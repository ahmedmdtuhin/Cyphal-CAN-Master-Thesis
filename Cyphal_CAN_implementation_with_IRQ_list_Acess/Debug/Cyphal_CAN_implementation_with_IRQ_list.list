
Cyphal_CAN_implementation_with_IRQ_list.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b90  08009d28  08009d28  00019d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c0  0800b8c0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001d8  0800baa0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800baa0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac73  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce0  00000000  00000000  0002aebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000728  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022caa  00000000  00000000  0002dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b264  00000000  00000000  00050852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1495  00000000  00000000  0005bab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003448  00000000  00000000  0012cf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00130394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d10 	.word	0x08009d10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009d10 	.word	0x08009d10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bf28      	it	cs
 8000ef6:	4613      	movcs	r3, r2
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffe3 	bl	8000ee4 <nunavutChooseMin>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffdb 	bl	8000ee4 <nunavutChooseMin>
 8000f2e:	4603      	mov	r3, r0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b092      	sub	sp, #72	; 0x48
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <nunavutCopyBits+0x20>
 8000f4c:	4b91      	ldr	r3, [pc, #580]	; (8001194 <nunavutCopyBits+0x25c>)
 8000f4e:	4a92      	ldr	r2, [pc, #584]	; (8001198 <nunavutCopyBits+0x260>)
 8000f50:	217f      	movs	r1, #127	; 0x7f
 8000f52:	4892      	ldr	r0, [pc, #584]	; (800119c <nunavutCopyBits+0x264>)
 8000f54:	f006 f9fe 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <nunavutCopyBits+0x32>
 8000f5e:	4b90      	ldr	r3, [pc, #576]	; (80011a0 <nunavutCopyBits+0x268>)
 8000f60:	4a8d      	ldr	r2, [pc, #564]	; (8001198 <nunavutCopyBits+0x260>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	488d      	ldr	r0, [pc, #564]	; (800119c <nunavutCopyBits+0x264>)
 8000f66:	f006 f9f5 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d105      	bne.n	8000f7e <nunavutCopyBits+0x46>
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <nunavutCopyBits+0x26c>)
 8000f74:	4a88      	ldr	r2, [pc, #544]	; (8001198 <nunavutCopyBits+0x260>)
 8000f76:	2181      	movs	r1, #129	; 0x81
 8000f78:	4888      	ldr	r0, [pc, #544]	; (800119c <nunavutCopyBits+0x264>)
 8000f7a:	f006 f9eb 	bl	8007354 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8000f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d14f      	bne.n	8001028 <nunavutCopyBits+0xf0>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14a      	bne.n	8001028 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fb2:	f007 f826 	bl	8008002 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8000fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80df 	beq.w	800118a <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd0:	4413      	add	r3, r2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd8:	4413      	add	r3, r2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d905      	bls.n	8000ff0 <nunavutCopyBits+0xb8>
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <nunavutCopyBits+0x270>)
 8000fe6:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <nunavutCopyBits+0x260>)
 8000fe8:	2190      	movs	r1, #144	; 0x90
 8000fea:	486c      	ldr	r0, [pc, #432]	; (800119c <nunavutCopyBits+0x264>)
 8000fec:	f006 f9b2 	bl	8007354 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8000ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800100a:	43db      	mvns	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4013      	ands	r3, r2
 8001010:	b2da      	uxtb	r2, r3
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	7819      	ldrb	r1, [r3, #0]
 8001016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800101a:	400b      	ands	r3, r1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	701a      	strb	r2, [r3, #0]
    {
 8001026:	e0b0      	b.n	800118a <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 8001040:	6a3a      	ldr	r2, [r7, #32]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	429a      	cmp	r2, r3
 8001046:	d210      	bcs.n	800106a <nunavutCopyBits+0x132>
 8001048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	3308      	adds	r3, #8
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	6a3a      	ldr	r2, [r7, #32]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	429a      	cmp	r2, r3
 800105c:	d905      	bls.n	800106a <nunavutCopyBits+0x132>
 800105e:	4b53      	ldr	r3, [pc, #332]	; (80011ac <nunavutCopyBits+0x274>)
 8001060:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <nunavutCopyBits+0x260>)
 8001062:	219f      	movs	r1, #159	; 0x9f
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <nunavutCopyBits+0x264>)
 8001066:	f006 f975 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 800106a:	6a3a      	ldr	r2, [r7, #32]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	d97d      	bls.n	800116e <nunavutCopyBits+0x236>
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	3308      	adds	r3, #8
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4413      	add	r3, r2
 8001080:	461a      	mov	r2, r3
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	429a      	cmp	r2, r3
 8001086:	d972      	bls.n	800116e <nunavutCopyBits+0x236>
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <nunavutCopyBits+0x278>)
 800108a:	4a43      	ldr	r2, [pc, #268]	; (8001198 <nunavutCopyBits+0x260>)
 800108c:	21a0      	movs	r1, #160	; 0xa0
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <nunavutCopyBits+0x264>)
 8001090:	f006 f960 	bl	8007354 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 800109e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80010a8:	7dba      	ldrb	r2, [r7, #22]
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bf38      	it	cc
 80010b0:	4613      	movcc	r3, r2
 80010b2:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	f1c3 0008 	rsb	r0, r3, #8
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff ff0f 	bl	8000ee4 <nunavutChooseMin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 80010ca:	7d3b      	ldrb	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <nunavutCopyBits+0x1a4>
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <nunavutCopyBits+0x27c>)
 80010d2:	4a31      	ldr	r2, [pc, #196]	; (8001198 <nunavutCopyBits+0x260>)
 80010d4:	21a7      	movs	r1, #167	; 0xa7
 80010d6:	4831      	ldr	r0, [pc, #196]	; (800119c <nunavutCopyBits+0x264>)
 80010d8:	f006 f93c 	bl	8007354 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d905      	bls.n	80010ee <nunavutCopyBits+0x1b6>
 80010e2:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <nunavutCopyBits+0x280>)
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <nunavutCopyBits+0x260>)
 80010e6:	21a8      	movs	r1, #168	; 0xa8
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <nunavutCopyBits+0x264>)
 80010ea:	f006 f933 	bl	8007354 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80010ee:	7d3b      	ldrb	r3, [r7, #20]
 80010f0:	2201      	movs	r2, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	1e5a      	subs	r2, r3, #1
 80010f8:	7dbb      	ldrb	r3, [r7, #22]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <nunavutCopyBits+0x1da>
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <nunavutCopyBits+0x284>)
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <nunavutCopyBits+0x260>)
 800110a:	21ab      	movs	r1, #171	; 0xab
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <nunavutCopyBits+0x264>)
 800110e:	f006 f921 	bl	8007354 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	fa42 f303 	asr.w	r3, r2, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7cfb      	ldrb	r3, [r7, #19]
 800113c:	43db      	mvns	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4013      	ands	r3, r2
 8001142:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001144:	7cba      	ldrb	r2, [r7, #18]
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	4013      	ands	r3, r2
 800114a:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 800114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	4413      	add	r3, r2
 8001154:	7c79      	ldrb	r1, [r7, #17]
 8001156:	7c3a      	ldrb	r2, [r7, #16]
 8001158:	430a      	orrs	r2, r1
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001162:	4413      	add	r3, r2
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8001166:	7d3b      	ldrb	r3, [r7, #20]
 8001168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800116a:	4413      	add	r3, r2
 800116c:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001172:	429a      	cmp	r2, r3
 8001174:	d88e      	bhi.n	8001094 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117a:	429a      	cmp	r2, r3
 800117c:	d006      	beq.n	800118c <nunavutCopyBits+0x254>
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <nunavutCopyBits+0x288>)
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <nunavutCopyBits+0x260>)
 8001182:	21b9      	movs	r1, #185	; 0xb9
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <nunavutCopyBits+0x264>)
 8001186:	f006 f8e5 	bl	8007354 <__assert_func>
    {
 800118a:	bf00      	nop
    }
}
 800118c:	bf00      	nop
 800118e:	3748      	adds	r7, #72	; 0x48
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08009d28 	.word	0x08009d28
 8001198:	0800af44 	.word	0x0800af44
 800119c:	08009d3c 	.word	0x08009d3c
 80011a0:	08009da8 	.word	0x08009da8
 80011a4:	08009dbc 	.word	0x08009dbc
 80011a8:	08009dc8 	.word	0x08009dc8
 80011ac:	08009dd8 	.word	0x08009dd8
 80011b0:	08009e44 	.word	0x08009e44
 80011b4:	08009eb0 	.word	0x08009eb0
 80011b8:	08009ebc 	.word	0x08009ebc
 80011bc:	08009ec8 	.word	0x08009ec8
 80011c0:	08009ed4 	.word	0x08009ed4

080011c4 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <nunavutSetUxx+0x1e>
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <nunavutSetUxx+0xfc>)
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <nunavutSetUxx+0x100>)
 80011da:	21f7      	movs	r1, #247	; 0xf7
 80011dc:	483a      	ldr	r0, [pc, #232]	; (80012c8 <nunavutSetUxx+0x104>)
 80011de:	f006 f8b9 	bl	8007354 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	00da      	lsls	r2, r3, #3
 80011e6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	440b      	add	r3, r1
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d202      	bcs.n	80011f8 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80011f2:	f06f 0302 	mvn.w	r3, #2
 80011f6:	e05f      	b.n	80012b8 <nunavutSetUxx+0xf4>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80011f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe70 	bl	8000ee4 <nunavutChooseMin>
 8001204:	61f8      	str	r0, [r7, #28]
    const uint8_t tmp[sizeof(uint64_t)] = {
        (uint8_t)((value >> 0U) & 0xFFU),
 8001206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    const uint8_t tmp[sizeof(uint64_t)] = {
 800120a:	753b      	strb	r3, [r7, #20]
        (uint8_t)((value >> 8U) & 0xFFU),
 800120c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	0a02      	lsrs	r2, r0, #8
 800121a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800121e:	0a0b      	lsrs	r3, r1, #8
 8001220:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001222:	757b      	strb	r3, [r7, #21]
        (uint8_t)((value >> 16U) & 0xFFU),
 8001224:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	0c02      	lsrs	r2, r0, #16
 8001232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001236:	0c0b      	lsrs	r3, r1, #16
 8001238:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800123a:	75bb      	strb	r3, [r7, #22]
        (uint8_t)((value >> 24U) & 0xFFU),
 800123c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	0e02      	lsrs	r2, r0, #24
 800124a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800124e:	0e0b      	lsrs	r3, r1, #24
 8001250:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001252:	75fb      	strb	r3, [r7, #23]
        (uint8_t)((value >> 32U) & 0xFFU),
 8001254:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	000a      	movs	r2, r1
 8001262:	2300      	movs	r3, #0
 8001264:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001266:	763b      	strb	r3, [r7, #24]
        (uint8_t)((value >> 40U) & 0xFFU),
 8001268:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0a0a      	lsrs	r2, r1, #8
 8001276:	2300      	movs	r3, #0
 8001278:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800127a:	767b      	strb	r3, [r7, #25]
        (uint8_t)((value >> 48U) & 0xFFU),
 800127c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	0c0a      	lsrs	r2, r1, #16
 800128a:	2300      	movs	r3, #0
 800128c:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800128e:	76bb      	strb	r3, [r7, #26]
        (uint8_t)((value >> 56U) & 0xFFU),
 8001290:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	0e0a      	lsrs	r2, r1, #24
 800129e:	2300      	movs	r3, #0
 80012a0:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012a2:	76fb      	strb	r3, [r7, #27]
    };
    nunavutCopyBits(buf, off_bits, saturated_len_bits, &tmp[0], 0U);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff fe41 	bl	8000f38 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	08009ee8 	.word	0x08009ee8
 80012c4:	0800af34 	.word	0x0800af34
 80012c8:	08009d3c 	.word	0x08009d3c

080012cc <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <nunavutGetU16+0x22>
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <nunavutGetU16+0x7c>)
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <nunavutGetU16+0x80>)
 80012e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <nunavutGetU16+0x84>)
 80012ea:	f006 f833 	bl	8007354 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2110      	movs	r1, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fdf6 	bl	8000ee4 <nunavutChooseMin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f7ff fe00 	bl	8000f04 <nunavutSaturateBufferFragmentBitLength>
 8001304:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint16_t) * 8U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b10      	cmp	r3, #16
 800130a:	d906      	bls.n	800131a <nunavutGetU16+0x4e>
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <nunavutGetU16+0x88>)
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <nunavutGetU16+0x80>)
 8001310:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <nunavutGetU16+0x84>)
 8001316:	f006 f81d 	bl	8007354 <__assert_func>
    uint8_t tmp[sizeof(uint16_t)] = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	823b      	strh	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 800131e:	f107 0010 	add.w	r0, r7, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2100      	movs	r1, #0
 800132c:	f7ff fe04 	bl	8000f38 <nunavutCopyBits>
    return (uint16_t)(tmp[0] | (uint16_t)(((uint16_t) tmp[1]) << 8U));
 8001330:	7c3b      	ldrb	r3, [r7, #16]
 8001332:	b29a      	uxth	r2, r3
 8001334:	7c7b      	ldrb	r3, [r7, #17]
 8001336:	b29b      	uxth	r3, r3
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b29b      	uxth	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	08009ee8 	.word	0x08009ee8
 800134c:	0800af84 	.word	0x0800af84
 8001350:	08009d3c 	.word	0x08009d3c
 8001354:	08009efc 	.word	0x08009efc

08001358 <uavcan_register_Name_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_serialize_(
    const uavcan_register_Name_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800135c:	b092      	sub	sp, #72	; 0x48
 800135e:	af04      	add	r7, sp, #16
 8001360:	6278      	str	r0, [r7, #36]	; 0x24
 8001362:	6239      	str	r1, [r7, #32]
 8001364:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <uavcan_register_Name_1_0_serialize_+0x20>
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <uavcan_register_Name_1_0_serialize_+0x20>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <uavcan_register_Name_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001378:	f06f 0301 	mvn.w	r3, #1
 800137c:	e0f5      	b.n	800156a <uavcan_register_Name_1_0_serialize_+0x212>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800138c:	d202      	bcs.n	8001394 <uavcan_register_Name_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800138e:	f06f 0302 	mvn.w	r3, #2
 8001392:	e0ea      	b.n	800156a <uavcan_register_Name_1_0_serialize_+0x212>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated uint8[<=255] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <uavcan_register_Name_1_0_serialize_+0x56>
 80013a2:	4b74      	ldr	r3, [pc, #464]	; (8001574 <uavcan_register_Name_1_0_serialize_+0x21c>)
 80013a4:	4a74      	ldr	r2, [pc, #464]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 80013a6:	2181      	movs	r1, #129	; 0x81
 80013a8:	4874      	ldr	r0, [pc, #464]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 80013aa:	f005 ffd3 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	2200      	movs	r2, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	617a      	str	r2, [r7, #20]
 80013b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80013ba:	460b      	mov	r3, r1
 80013bc:	f513 6800 	adds.w	r8, r3, #2048	; 0x800
 80013c0:	4613      	mov	r3, r2
 80013c2:	f143 0900 	adc.w	r9, r3, #0
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	2200      	movs	r2, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	60fa      	str	r2, [r7, #12]
 80013d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80013d4:	460b      	mov	r3, r1
 80013d6:	4543      	cmp	r3, r8
 80013d8:	4613      	mov	r3, r2
 80013da:	eb73 0309 	sbcs.w	r3, r3, r9
 80013de:	d205      	bcs.n	80013ec <uavcan_register_Name_1_0_serialize_+0x94>
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <uavcan_register_Name_1_0_serialize_+0x228>)
 80013e2:	4a65      	ldr	r2, [pc, #404]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 80013e4:	2182      	movs	r1, #130	; 0x82
 80013e6:	4865      	ldr	r0, [pc, #404]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 80013e8:	f005 ffb4 	bl	8007354 <__assert_func>
        if (obj->name.count > 255)
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d902      	bls.n	80013fc <uavcan_register_Name_1_0_serialize_+0xa4>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80013f6:	f06f 0309 	mvn.w	r3, #9
 80013fa:	e0b6      	b.n	800156a <uavcan_register_Name_1_0_serialize_+0x212>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	4413      	add	r3, r2
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	3308      	adds	r3, #8
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <uavcan_register_Name_1_0_serialize_+0xd2>
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001420:	4a55      	ldr	r2, [pc, #340]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001422:	218a      	movs	r1, #138	; 0x8a
 8001424:	4855      	ldr	r0, [pc, #340]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001426:	f005 ff95 	bl	8007354 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
 800142e:	e033      	b.n	8001498 <uavcan_register_Name_1_0_serialize_+0x140>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <uavcan_register_Name_1_0_serialize_+0xee>
 800143a:	4b4e      	ldr	r3, [pc, #312]	; (8001574 <uavcan_register_Name_1_0_serialize_+0x21c>)
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 800143e:	218d      	movs	r1, #141	; 0x8d
 8001440:	484e      	ldr	r0, [pc, #312]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001442:	f005 ff87 	bl	8007354 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	2200      	movs	r2, #0
 800144a:	469a      	mov	sl, r3
 800144c:	4693      	mov	fp, r2
 800144e:	f11a 0408 	adds.w	r4, sl, #8
 8001452:	f14b 0500 	adc.w	r5, fp, #0
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	2200      	movs	r2, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001464:	460b      	mov	r3, r1
 8001466:	42a3      	cmp	r3, r4
 8001468:	4613      	mov	r3, r2
 800146a:	41ab      	sbcs	r3, r5
 800146c:	d205      	bcs.n	800147a <uavcan_register_Name_1_0_serialize_+0x122>
 800146e:	4b45      	ldr	r3, [pc, #276]	; (8001584 <uavcan_register_Name_1_0_serialize_+0x22c>)
 8001470:	4a41      	ldr	r2, [pc, #260]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001472:	218e      	movs	r1, #142	; 0x8e
 8001474:	4841      	ldr	r0, [pc, #260]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001476:	f005 ff6d 	bl	8007354 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->name.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	6a3a      	ldr	r2, [r7, #32]
 8001480:	4413      	add	r3, r2
 8001482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001486:	440a      	add	r2, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 800148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148e:	3308      	adds	r3, #8
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	3301      	adds	r3, #1
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800149e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3c5      	bcc.n	8001430 <uavcan_register_Name_1_0_serialize_+0xd8>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03a      	beq.n	8001524 <uavcan_register_Name_1_0_serialize_+0x1cc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f1c3 0308 	rsb	r3, r3, #8
 80014bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 80014c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <uavcan_register_Name_1_0_serialize_+0x17c>
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <uavcan_register_Name_1_0_serialize_+0x230>)
 80014ca:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 80014cc:	2197      	movs	r1, #151	; 0x97
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 80014d0:	f005 ff40 	bl	8007354 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80014d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9cd 2300 	strd	r2, r3, [sp]
 80014e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014ea:	6a38      	ldr	r0, [r7, #32]
 80014ec:	f7ff fe6a 	bl	80011c4 <nunavutSetUxx>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err0_ < 0)
 80014f6:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da02      	bge.n	8001504 <uavcan_register_Name_1_0_serialize_+0x1ac>
        {
            return _err0_;
 80014fe:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001502:	e032      	b.n	800156a <uavcan_register_Name_1_0_serialize_+0x212>
        }
        offset_bits += _pad0_;
 8001504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800150a:	4413      	add	r3, r2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <uavcan_register_Name_1_0_serialize_+0x1cc>
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <uavcan_register_Name_1_0_serialize_+0x21c>)
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 800151c:	219e      	movs	r1, #158	; 0x9e
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001520:	f005 ff18 	bl	8007354 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	2b07      	cmp	r3, #7
 8001528:	d805      	bhi.n	8001536 <uavcan_register_Name_1_0_serialize_+0x1de>
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <uavcan_register_Name_1_0_serialize_+0x234>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 800152e:	21a1      	movs	r1, #161	; 0xa1
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001532:	f005 ff0f 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 8001536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800153c:	d905      	bls.n	800154a <uavcan_register_Name_1_0_serialize_+0x1f2>
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <uavcan_register_Name_1_0_serialize_+0x238>)
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001542:	21a2      	movs	r1, #162	; 0xa2
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001546:	f005 ff05 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <uavcan_register_Name_1_0_serialize_+0x208>
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001558:	21a3      	movs	r1, #163	; 0xa3
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <uavcan_register_Name_1_0_serialize_+0x224>)
 800155c:	f005 fefa 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001574:	08009f1c 	.word	0x08009f1c
 8001578:	0800b04c 	.word	0x0800b04c
 800157c:	08009f34 	.word	0x08009f34
 8001580:	08009f98 	.word	0x08009f98
 8001584:	08009fcc 	.word	0x08009fcc
 8001588:	08009ffc 	.word	0x08009ffc
 800158c:	0800a008 	.word	0x0800a008
 8001590:	0800a01c 	.word	0x0800a01c

08001594 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <uavcan_register_Name_1_0_deserialize_+0x26>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <uavcan_register_Name_1_0_deserialize_+0x26>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <uavcan_register_Name_1_0_deserialize_+0x2c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80015ba:	f06f 0301 	mvn.w	r3, #1
 80015be:	e093      	b.n	80016e8 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    if (buffer == NULL)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <uavcan_register_Name_1_0_deserialize_+0x15c>)
 80015c8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <uavcan_register_Name_1_0_deserialize_+0x5c>
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <uavcan_register_Name_1_0_deserialize_+0x160>)
 80015e6:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <uavcan_register_Name_1_0_deserialize_+0x164>)
 80015e8:	21ca      	movs	r1, #202	; 0xca
 80015ea:	4844      	ldr	r0, [pc, #272]	; (80016fc <uavcan_register_Name_1_0_deserialize_+0x168>)
 80015ec:	f005 feb2 	bl	8007354 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	3308      	adds	r3, #8
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d309      	bcc.n	800160e <uavcan_register_Name_1_0_deserialize_+0x7a>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800160c:	e003      	b.n	8001616 <uavcan_register_Name_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->name.count = 0U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3308      	adds	r3, #8
 800161a:	61fb      	str	r3, [r7, #28]
    if (out_obj->name.count > 255U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d902      	bls.n	800162c <uavcan_register_Name_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001626:	f06f 0309 	mvn.w	r3, #9
 800162a:	e05d      	b.n	80016e8 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <uavcan_register_Name_1_0_deserialize_+0xae>
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001638:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <uavcan_register_Name_1_0_deserialize_+0x164>)
 800163a:	21d9      	movs	r1, #217	; 0xd9
 800163c:	482f      	ldr	r0, [pc, #188]	; (80016fc <uavcan_register_Name_1_0_deserialize_+0x168>)
 800163e:	f005 fe89 	bl	8007354 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e025      	b.n	8001694 <uavcan_register_Name_1_0_deserialize_+0x100>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <uavcan_register_Name_1_0_deserialize_+0xca>
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001656:	21dc      	movs	r1, #220	; 0xdc
 8001658:	4828      	ldr	r0, [pc, #160]	; (80016fc <uavcan_register_Name_1_0_deserialize_+0x168>)
 800165a:	f005 fe7b 	bl	8007354 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3308      	adds	r3, #8
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d30a      	bcc.n	800167e <uavcan_register_Name_1_0_deserialize_+0xea>
        {
            out_obj->name.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	4413      	add	r3, r2
 8001670:	7819      	ldrb	r1, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e004      	b.n	8001688 <uavcan_register_Name_1_0_deserialize_+0xf4>
        }
        else
        {
            out_obj->name.elements[_index1_] = 0U;
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4413      	add	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3308      	adds	r3, #8
 800168c:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	3301      	adds	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3d3      	bcc.n	8001648 <uavcan_register_Name_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3307      	adds	r3, #7
 80016a4:	f023 0307 	bic.w	r3, r3, #7
 80016a8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <uavcan_register_Name_1_0_deserialize_+0x12c>
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <uavcan_register_Name_1_0_deserialize_+0x160>)
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <uavcan_register_Name_1_0_deserialize_+0x164>)
 80016b8:	21e8      	movs	r1, #232	; 0xe8
 80016ba:	4810      	ldr	r0, [pc, #64]	; (80016fc <uavcan_register_Name_1_0_deserialize_+0x168>)
 80016bc:	f005 fe4a 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80016c0:	6939      	ldr	r1, [r7, #16]
 80016c2:	69f8      	ldr	r0, [r7, #28]
 80016c4:	f7ff fc0e 	bl	8000ee4 <nunavutChooseMin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d205      	bcs.n	80016e6 <uavcan_register_Name_1_0_deserialize_+0x152>
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <uavcan_register_Name_1_0_deserialize_+0x16c>)
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <uavcan_register_Name_1_0_deserialize_+0x164>)
 80016de:	21ea      	movs	r1, #234	; 0xea
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <uavcan_register_Name_1_0_deserialize_+0x168>)
 80016e2:	f005 fe37 	bl	8007354 <__assert_func>
    return NUNAVUT_SUCCESS;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	0800a034 	.word	0x0800a034
 80016f4:	08009f1c 	.word	0x08009f1c
 80016f8:	0800aff4 	.word	0x0800aff4
 80016fc:	08009f34 	.word	0x08009f34
 8001700:	0800a038 	.word	0x0800a038

08001704 <uavcan_register_List_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Request_1_0_deserialize_(
    uavcan_register_List_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <uavcan_register_List_Request_1_0_deserialize_+0x26>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <uavcan_register_List_Request_1_0_deserialize_+0x26>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <uavcan_register_List_Request_1_0_deserialize_+0x2c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <uavcan_register_List_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800172a:	f06f 0301 	mvn.w	r3, #1
 800172e:	e048      	b.n	80017c2 <uavcan_register_List_Request_1_0_deserialize_+0xbe>
    }
    if (buffer == NULL)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <uavcan_register_List_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <uavcan_register_List_Request_1_0_deserialize_+0xc8>)
 8001738:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
    // saturated uint16 index
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <uavcan_register_List_Request_1_0_deserialize_+0x5c>
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 8001756:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 8001758:	21bf      	movs	r1, #191	; 0xbf
 800175a:	481f      	ldr	r0, [pc, #124]	; (80017d8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 800175c:	f005 fdfa 	bl	8007354 <__assert_func>
    out_obj->index = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8001760:	2310      	movs	r3, #16
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	69f9      	ldr	r1, [r7, #28]
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7ff fdb0 	bl	80012cc <nunavutGetU16>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	801a      	strh	r2, [r3, #0]
    offset_bits += 16U;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3310      	adds	r3, #16
 8001778:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3307      	adds	r3, #7
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <uavcan_register_List_Request_1_0_deserialize_+0x96>
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 8001792:	21c3      	movs	r1, #195	; 0xc3
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 8001796:	f005 fddd 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800179a:	69b9      	ldr	r1, [r7, #24]
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f7ff fba1 	bl	8000ee4 <nunavutChooseMin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d205      	bcs.n	80017c0 <uavcan_register_List_Request_1_0_deserialize_+0xbc>
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <uavcan_register_List_Request_1_0_deserialize_+0xd8>)
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 80017b8:	21c5      	movs	r1, #197	; 0xc5
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 80017bc:	f005 fdca 	bl	8007354 <__assert_func>
    return NUNAVUT_SUCCESS;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0800a034 	.word	0x0800a034
 80017d0:	08009f1c 	.word	0x08009f1c
 80017d4:	0800af54 	.word	0x0800af54
 80017d8:	0800a064 	.word	0x0800a064
 80017dc:	0800a038 	.word	0x0800a038

080017e0 <uavcan_register_List_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_serialize_(
    const uavcan_register_List_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b08c      	sub	sp, #48	; 0x30
 80017e6:	af04      	add	r7, sp, #16
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <uavcan_register_List_Response_1_0_serialize_+0x20>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <uavcan_register_List_Response_1_0_serialize_+0x20>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <uavcan_register_List_Response_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001800:	f06f 0301 	mvn.w	r3, #1
 8001804:	e0f7      	b.n	80019f6 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001814:	d202      	bcs.n	800181c <uavcan_register_List_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001816:	f06f 0302 	mvn.w	r3, #2
 800181a:	e0ec      	b.n	80019f6 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    {   // uavcan.register.Name.1.0 name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <uavcan_register_List_Response_1_0_serialize_+0x58>
 800182a:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 800182c:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 800182e:	f240 1111 	movw	r1, #273	; 0x111
 8001832:	4875      	ldr	r0, [pc, #468]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8001834:	f005 fd8e 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <uavcan_register_List_Response_1_0_serialize_+0x70>
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8001844:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001846:	f44f 7189 	mov.w	r1, #274	; 0x112
 800184a:	486f      	ldr	r0, [pc, #444]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800184c:	f005 fd82 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2200      	movs	r2, #0
 8001854:	469a      	mov	sl, r3
 8001856:	4693      	mov	fp, r2
 8001858:	f51a 6400 	adds.w	r4, sl, #2048	; 0x800
 800185c:	f14b 0500 	adc.w	r5, fp, #0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	2200      	movs	r2, #0
 8001866:	4698      	mov	r8, r3
 8001868:	4691      	mov	r9, r2
 800186a:	45a0      	cmp	r8, r4
 800186c:	eb79 0305 	sbcs.w	r3, r9, r5
 8001870:	d206      	bcs.n	8001880 <uavcan_register_List_Response_1_0_serialize_+0xa0>
 8001872:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <uavcan_register_List_Response_1_0_serialize_+0x22c>)
 8001874:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001876:	f240 1113 	movw	r1, #275	; 0x113
 800187a:	4863      	ldr	r0, [pc, #396]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800187c:	f005 fd6a 	bl	8007354 <__assert_func>
        size_t _size_bytes0_ = 256UL;  // Nested object (max) size, in bytes.
 8001880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001884:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <uavcan_register_List_Response_1_0_serialize_+0xbe>
 8001890:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8001892:	4a5c      	ldr	r2, [pc, #368]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001894:	f240 1115 	movw	r1, #277	; 0x115
 8001898:	485b      	ldr	r0, [pc, #364]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800189a:	f005 fd5b 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4413      	add	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d206      	bcs.n	80018ba <uavcan_register_List_Response_1_0_serialize_+0xda>
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <uavcan_register_List_Response_1_0_serialize_+0x230>)
 80018ae:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80018b0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80018b4:	4854      	ldr	r0, [pc, #336]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80018b6:	f005 fd4d 	bl	8007354 <__assert_func>
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 80018ba:	68f8      	ldr	r0, [r7, #12]
            &obj->name, &buffer[offset_bits / 8U], &_size_bytes0_);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	4413      	add	r3, r2
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 80018c4:	f107 0210 	add.w	r2, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff fd45 	bl	8001358 <uavcan_register_Name_1_0_serialize_>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]
        if (_err2_ < 0)
 80018d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da02      	bge.n	80018e0 <uavcan_register_List_Response_1_0_serialize_+0x100>
        {
            return _err2_;
 80018da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018de:	e08a      	b.n	80019f6 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) >= 8ULL);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d806      	bhi.n	80018f6 <uavcan_register_List_Response_1_0_serialize_+0x116>
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <uavcan_register_List_Response_1_0_serialize_+0x234>)
 80018ea:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80018ec:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80018f0:	4845      	ldr	r0, [pc, #276]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80018f2:	f005 fd2f 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) <= 2048ULL);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fe:	d906      	bls.n	800190e <uavcan_register_List_Response_1_0_serialize_+0x12e>
 8001900:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <uavcan_register_List_Response_1_0_serialize_+0x238>)
 8001902:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001904:	f240 111f 	movw	r1, #287	; 0x11f
 8001908:	483f      	ldr	r0, [pc, #252]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800190a:	f005 fd23 	bl	8007354 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	429a      	cmp	r2, r3
 8001920:	d906      	bls.n	8001930 <uavcan_register_List_Response_1_0_serialize_+0x150>
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <uavcan_register_List_Response_1_0_serialize_+0x23c>)
 8001924:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001926:	f240 1121 	movw	r1, #289	; 0x121
 800192a:	4837      	ldr	r0, [pc, #220]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800192c:	f005 fd12 	bl	8007354 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	2b00      	cmp	r3, #0
 8001938:	d037      	beq.n	80019aa <uavcan_register_List_Response_1_0_serialize_+0x1ca>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f1c3 0308 	rsb	r3, r3, #8
 8001948:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad1_ > 0);
 800194a:	7dbb      	ldrb	r3, [r7, #22]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d106      	bne.n	800195e <uavcan_register_List_Response_1_0_serialize_+0x17e>
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <uavcan_register_List_Response_1_0_serialize_+0x240>)
 8001952:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8001954:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001958:	482b      	ldr	r0, [pc, #172]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800195a:	f005 fcfb 	bl	8007354 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800195e:	7dbb      	ldrb	r3, [r7, #22]
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9cd 2300 	strd	r2, r3, [sp]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	69b9      	ldr	r1, [r7, #24]
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f7ff fc26 	bl	80011c4 <nunavutSetUxx>
 8001978:	4603      	mov	r3, r0
 800197a:	757b      	strb	r3, [r7, #21]
        if (_err3_ < 0)
 800197c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da02      	bge.n	800198a <uavcan_register_List_Response_1_0_serialize_+0x1aa>
        {
            return _err3_;
 8001984:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001988:	e035      	b.n	80019f6 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        offset_bits += _pad1_;
 800198a:	7dbb      	ldrb	r3, [r7, #22]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <uavcan_register_List_Response_1_0_serialize_+0x1ca>
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80019a0:	f240 112d 	movw	r1, #301	; 0x12d
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80019a6:	f005 fcd5 	bl	8007354 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d806      	bhi.n	80019be <uavcan_register_List_Response_1_0_serialize_+0x1de>
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <uavcan_register_List_Response_1_0_serialize_+0x244>)
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80019b4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80019ba:	f005 fccb 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019c4:	d906      	bls.n	80019d4 <uavcan_register_List_Response_1_0_serialize_+0x1f4>
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <uavcan_register_List_Response_1_0_serialize_+0x248>)
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80019ca:	f240 1131 	movw	r1, #305	; 0x131
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80019d0:	f005 fcc0 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <uavcan_register_List_Response_1_0_serialize_+0x20c>
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80019e2:	f44f 7199 	mov.w	r1, #306	; 0x132
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80019e8:	f005 fcb4 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a00:	08009f1c 	.word	0x08009f1c
 8001a04:	0800b01c 	.word	0x0800b01c
 8001a08:	0800a064 	.word	0x0800a064
 8001a0c:	08009f98 	.word	0x08009f98
 8001a10:	0800a0c8 	.word	0x0800a0c8
 8001a14:	0800a100 	.word	0x0800a100
 8001a18:	0800a120 	.word	0x0800a120
 8001a1c:	0800a140 	.word	0x0800a140
 8001a20:	0800a168 	.word	0x0800a168
 8001a24:	0800a008 	.word	0x0800a008
 8001a28:	0800a01c 	.word	0x0800a01c

08001a2c <uavcan_register_List_Response_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_deserialize_(
    uavcan_register_List_Response_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <uavcan_register_List_Response_1_0_deserialize_+0x26>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <uavcan_register_List_Response_1_0_deserialize_+0x26>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001a52:	f06f 0301 	mvn.w	r3, #1
 8001a56:	e078      	b.n	8001b4a <uavcan_register_List_Response_1_0_deserialize_+0x11e>
    }
    if (buffer == NULL)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <uavcan_register_List_Response_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <uavcan_register_List_Response_1_0_deserialize_+0x128>)
 8001a60:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <uavcan_register_List_Response_1_0_deserialize_+0x5e>
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8001a7e:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8001a80:	f240 1159 	movw	r1, #345	; 0x159
 8001a84:	4836      	ldr	r0, [pc, #216]	; (8001b60 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8001a86:	f005 fc65 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <uavcan_register_List_Response_1_0_deserialize_+0x76>
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8001a96:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8001a98:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8001a9c:	4830      	ldr	r0, [pc, #192]	; (8001b60 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8001a9e:	f005 fc59 	bl	8007354 <__assert_func>
    {
        size_t _size_bytes1_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa1b 	bl	8000ee4 <nunavutChooseMin>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <uavcan_register_List_Response_1_0_deserialize_+0xa2>
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8001ac4:	f240 115d 	movw	r1, #349	; 0x15d
 8001ac8:	4825      	ldr	r0, [pc, #148]	; (8001b60 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8001aca:	f005 fc43 	bl	8007354 <__assert_func>
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8001ace:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f107 0214 	add.w	r2, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff fd59 	bl	8001594 <uavcan_register_Name_1_0_deserialize_>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8001ae6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da02      	bge.n	8001af4 <uavcan_register_List_Response_1_0_deserialize_+0xc8>
        {
            return _err4_;
 8001aee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001af2:	e02a      	b.n	8001b4a <uavcan_register_List_Response_1_0_deserialize_+0x11e>
        }
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested serialized representation.
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3307      	adds	r3, #7
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <uavcan_register_List_Response_1_0_deserialize_+0xf4>
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8001b16:	f240 1167 	movw	r1, #359	; 0x167
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8001b1c:	f005 fc1a 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	69f8      	ldr	r0, [r7, #28]
 8001b24:	f7ff f9de 	bl	8000ee4 <nunavutChooseMin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d206      	bcs.n	8001b48 <uavcan_register_List_Response_1_0_deserialize_+0x11c>
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <uavcan_register_List_Response_1_0_deserialize_+0x138>)
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8001b3e:	f240 1169 	movw	r1, #361	; 0x169
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8001b44:	f005 fc06 	bl	8007354 <__assert_func>
    return NUNAVUT_SUCCESS;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	0800a034 	.word	0x0800a034
 8001b58:	08009f1c 	.word	0x08009f1c
 8001b5c:	0800afc4 	.word	0x0800afc4
 8001b60:	0800a064 	.word	0x0800a064
 8001b64:	0800a038 	.word	0x0800a038

08001b68 <uavcan_register_List_Response_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_List_Response_1_0_initialize_(uavcan_register_List_Response_1_0* const out_obj)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d018      	beq.n	8001ba8 <uavcan_register_List_Response_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_List_Response_1_0_deserialize_(out_obj, &buf, &size_bytes);
 8001b7e:	f107 0210 	add.w	r2, r7, #16
 8001b82:	f107 030f 	add.w	r3, r7, #15
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff4f 	bl	8001a2c <uavcan_register_List_Response_1_0_deserialize_>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 8001b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da06      	bge.n	8001ba8 <uavcan_register_List_Response_1_0_initialize_+0x40>
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <uavcan_register_List_Response_1_0_initialize_+0x48>)
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <uavcan_register_List_Response_1_0_initialize_+0x4c>)
 8001b9e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <uavcan_register_List_Response_1_0_initialize_+0x50>)
 8001ba4:	f005 fbd6 	bl	8007354 <__assert_func>
        (void) err;
    }
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	0800a174 	.word	0x0800a174
 8001bb4:	0800af94 	.word	0x0800af94
 8001bb8:	0800a064 	.word	0x0800a064

08001bbc <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b08c      	sub	sp, #48	; 0x30
 8001bc2:	af04      	add	r7, sp, #16
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <uavcan_node_Health_1_0_serialize_+0x20>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <uavcan_node_Health_1_0_serialize_+0x20>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001bdc:	f06f 0301 	mvn.w	r3, #1
 8001be0:	e092      	b.n	8001d08 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	d802      	bhi.n	8001bf6 <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001bf0:	f06f 0302 	mvn.w	r3, #2
 8001bf4:	e088      	b.n	8001d08 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <uavcan_node_Health_1_0_serialize_+0x54>
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <uavcan_node_Health_1_0_serialize_+0x158>)
 8001c06:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001c08:	2185      	movs	r1, #133	; 0x85
 8001c0a:	4844      	ldr	r0, [pc, #272]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001c0c:	f005 fba2 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2200      	movs	r2, #0
 8001c14:	469a      	mov	sl, r3
 8001c16:	4693      	mov	fp, r2
 8001c18:	f11a 0402 	adds.w	r4, sl, #2
 8001c1c:	f14b 0500 	adc.w	r5, fp, #0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	2200      	movs	r2, #0
 8001c26:	4698      	mov	r8, r3
 8001c28:	4691      	mov	r9, r2
 8001c2a:	45a0      	cmp	r8, r4
 8001c2c:	eb79 0305 	sbcs.w	r3, r9, r5
 8001c30:	d205      	bcs.n	8001c3e <uavcan_node_Health_1_0_serialize_+0x82>
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <uavcan_node_Health_1_0_serialize_+0x164>)
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001c36:	2186      	movs	r1, #134	; 0x86
 8001c38:	4838      	ldr	r0, [pc, #224]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001c3a:	f005 fb8b 	bl	8007354 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8001c44:	7efb      	ldrb	r3, [r7, #27]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d901      	bls.n	8001c4e <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	7efa      	ldrb	r2, [r7, #27]
 8001c58:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d035      	beq.n	8001cd6 <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f1c3 0308 	rsb	r3, r3, #8
 8001c78:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <uavcan_node_Health_1_0_serialize_+0xd0>
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <uavcan_node_Health_1_0_serialize_+0x168>)
 8001c82:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001c84:	2192      	movs	r1, #146	; 0x92
 8001c86:	4825      	ldr	r0, [pc, #148]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001c88:	f005 fb64 	bl	8007354 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001c8c:	7cfb      	ldrb	r3, [r7, #19]
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f7ff fa8f 	bl	80011c4 <nunavutSetUxx>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001caa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 8001cb2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001cb6:	e027      	b.n	8001d08 <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <uavcan_node_Health_1_0_serialize_+0x11a>
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <uavcan_node_Health_1_0_serialize_+0x158>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001cce:	2199      	movs	r1, #153	; 0x99
 8001cd0:	4812      	ldr	r0, [pc, #72]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001cd2:	f005 fb3f 	bl	8007354 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d005      	beq.n	8001ce8 <uavcan_node_Health_1_0_serialize_+0x12c>
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <uavcan_node_Health_1_0_serialize_+0x16c>)
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001ce0:	219c      	movs	r1, #156	; 0x9c
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001ce4:	f005 fb36 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <uavcan_node_Health_1_0_serialize_+0x142>
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <uavcan_node_Health_1_0_serialize_+0x158>)
 8001cf4:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001cf6:	219d      	movs	r1, #157	; 0x9d
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <uavcan_node_Health_1_0_serialize_+0x160>)
 8001cfa:	f005 fb2b 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d12:	bf00      	nop
 8001d14:	08009f1c 	.word	0x08009f1c
 8001d18:	0800aef0 	.word	0x0800aef0
 8001d1c:	0800a180 	.word	0x0800a180
 8001d20:	0800a1e4 	.word	0x0800a1e4
 8001d24:	08009ffc 	.word	0x08009ffc
 8001d28:	0800a214 	.word	0x0800a214

08001d2c <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d30:	b08c      	sub	sp, #48	; 0x30
 8001d32:	af04      	add	r7, sp, #16
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <uavcan_node_Mode_1_0_serialize_+0x20>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <uavcan_node_Mode_1_0_serialize_+0x20>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001d4c:	f06f 0301 	mvn.w	r3, #1
 8001d50:	e092      	b.n	8001e78 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	2b07      	cmp	r3, #7
 8001d5e:	d802      	bhi.n	8001d66 <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001d60:	f06f 0302 	mvn.w	r3, #2
 8001d64:	e088      	b.n	8001e78 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <uavcan_node_Mode_1_0_serialize_+0x54>
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001d78:	2185      	movs	r1, #133	; 0x85
 8001d7a:	4844      	ldr	r0, [pc, #272]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001d7c:	f005 faea 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2200      	movs	r2, #0
 8001d84:	469a      	mov	sl, r3
 8001d86:	4693      	mov	fp, r2
 8001d88:	f11a 0403 	adds.w	r4, sl, #3
 8001d8c:	f14b 0500 	adc.w	r5, fp, #0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	2200      	movs	r2, #0
 8001d96:	4698      	mov	r8, r3
 8001d98:	4691      	mov	r9, r2
 8001d9a:	45a0      	cmp	r8, r4
 8001d9c:	eb79 0305 	sbcs.w	r3, r9, r5
 8001da0:	d205      	bcs.n	8001dae <uavcan_node_Mode_1_0_serialize_+0x82>
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <uavcan_node_Mode_1_0_serialize_+0x164>)
 8001da4:	4a38      	ldr	r2, [pc, #224]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001da6:	2186      	movs	r1, #134	; 0x86
 8001da8:	4838      	ldr	r0, [pc, #224]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001daa:	f005 fad3 	bl	8007354 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8001db4:	7efb      	ldrb	r3, [r7, #27]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d901      	bls.n	8001dbe <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	7efa      	ldrb	r2, [r7, #27]
 8001dc8:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3303      	adds	r3, #3
 8001dce:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d035      	beq.n	8001e46 <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f1c3 0308 	rsb	r3, r3, #8
 8001de8:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <uavcan_node_Mode_1_0_serialize_+0xd0>
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001df4:	2192      	movs	r1, #146	; 0x92
 8001df6:	4825      	ldr	r0, [pc, #148]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001df8:	f005 faac 	bl	8007354 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9cd 2300 	strd	r2, r3, [sp]
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7ff f9d7 	bl	80011c4 <nunavutSetUxx>
 8001e16:	4603      	mov	r3, r0
 8001e18:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001e1a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da02      	bge.n	8001e28 <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 8001e22:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001e26:	e027      	b.n	8001e78 <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <uavcan_node_Mode_1_0_serialize_+0x11a>
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001e3e:	2199      	movs	r1, #153	; 0x99
 8001e40:	4812      	ldr	r0, [pc, #72]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001e42:	f005 fa87 	bl	8007354 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d005      	beq.n	8001e58 <uavcan_node_Mode_1_0_serialize_+0x12c>
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <uavcan_node_Mode_1_0_serialize_+0x16c>)
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001e50:	219c      	movs	r1, #156	; 0x9c
 8001e52:	480e      	ldr	r0, [pc, #56]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001e54:	f005 fa7e 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <uavcan_node_Mode_1_0_serialize_+0x142>
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001e66:	219d      	movs	r1, #157	; 0x9d
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001e6a:	f005 fa73 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	08009f1c 	.word	0x08009f1c
 8001e88:	0800af14 	.word	0x0800af14
 8001e8c:	0800a228 	.word	0x0800a228
 8001e90:	0800a288 	.word	0x0800a288
 8001e94:	08009ffc 	.word	0x08009ffc
 8001e98:	0800a214 	.word	0x0800a214

08001e9c <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b0a4      	sub	sp, #144	; 0x90
 8001ea2:	af04      	add	r7, sp, #16
 8001ea4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001ea6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ea8:	657a      	str	r2, [r7, #84]	; 0x54
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8001eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001ebc:	f06f 0301 	mvn.w	r3, #1
 8001ec0:	e273      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	67bb      	str	r3, [r7, #120]	; 0x78
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8001ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	2b37      	cmp	r3, #55	; 0x37
 8001ece:	d802      	bhi.n	8001ed6 <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001ed0:	f06f 0302 	mvn.w	r3, #2
 8001ed4:	e269      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8001ee4:	4ba8      	ldr	r3, [pc, #672]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001ee6:	4aa9      	ldr	r2, [pc, #676]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001ee8:	218a      	movs	r1, #138	; 0x8a
 8001eea:	48a9      	ldr	r0, [pc, #676]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001eec:	f005 fa32 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8001ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	4691      	mov	r9, r2
 8001ef8:	f118 0420 	adds.w	r4, r8, #32
 8001efc:	f149 0500 	adc.w	r5, r9, #0
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	2200      	movs	r2, #0
 8001f06:	469a      	mov	sl, r3
 8001f08:	4693      	mov	fp, r2
 8001f0a:	45a2      	cmp	sl, r4
 8001f0c:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001f10:	d205      	bcs.n	8001f1e <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 8001f12:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <uavcan_node_Heartbeat_1_0_serialize_+0x2f8>)
 8001f14:	4a9d      	ldr	r2, [pc, #628]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001f16:	218b      	movs	r1, #139	; 0x8b
 8001f18:	489d      	ldr	r0, [pc, #628]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001f1a:	f005 fa1b 	bl	8007354 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->uptime, 32U);
 8001f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f28:	2320      	movs	r3, #32
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001f30:	e9cd 3400 	strd	r3, r4, [sp]
 8001f34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f36:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f38:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f3a:	f7ff f943 	bl	80011c4 <nunavutSetUxx>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (_err0_ < 0)
 8001f44:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da02      	bge.n	8001f52 <uavcan_node_Heartbeat_1_0_serialize_+0xb6>
        {
            return _err0_;
 8001f4c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001f50:	e22b      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += 32U;
 8001f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f54:	3320      	adds	r3, #32
 8001f56:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d03a      	beq.n	8001fd8 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f1c3 0308 	rsb	r3, r3, #8
 8001f70:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001f74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <uavcan_node_Heartbeat_1_0_serialize_+0xec>
 8001f7c:	4b86      	ldr	r3, [pc, #536]	; (8002198 <uavcan_node_Heartbeat_1_0_serialize_+0x2fc>)
 8001f7e:	4a83      	ldr	r2, [pc, #524]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001f80:	2197      	movs	r1, #151	; 0x97
 8001f82:	4883      	ldr	r0, [pc, #524]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001f84:	f005 f9e6 	bl	8007354 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001f88:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f9c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001fa0:	f7ff f910 	bl	80011c4 <nunavutSetUxx>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        if (_err1_ < 0)
 8001faa:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da02      	bge.n	8001fb8 <uavcan_node_Heartbeat_1_0_serialize_+0x11c>
        {
            return _err1_;
 8001fb2:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8001fb6:	e1f8      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad0_;
 8001fb8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fbe:	4413      	add	r3, r2
 8001fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
 8001fcc:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001fce:	4a6f      	ldr	r2, [pc, #444]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001fd0:	219e      	movs	r1, #158	; 0x9e
 8001fd2:	486f      	ldr	r0, [pc, #444]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001fd4:	f005 f9be 	bl	8007354 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <uavcan_node_Heartbeat_1_0_serialize_+0x152>
 8001fe2:	4b69      	ldr	r3, [pc, #420]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001fe6:	21a1      	movs	r1, #161	; 0xa1
 8001fe8:	4869      	ldr	r0, [pc, #420]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001fea:	f005 f9b3 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <uavcan_node_Heartbeat_1_0_serialize_+0x168>
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001ffa:	4a64      	ldr	r2, [pc, #400]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001ffc:	21a2      	movs	r1, #162	; 0xa2
 8001ffe:	4864      	ldr	r0, [pc, #400]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002000:	f005 f9a8 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002006:	2200      	movs	r2, #0
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
 800200a:	647a      	str	r2, [r7, #68]	; 0x44
 800200c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002010:	460b      	mov	r3, r1
 8002012:	3308      	adds	r3, #8
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
 8002016:	4613      	mov	r3, r2
 8002018:	f143 0300 	adc.w	r3, r3, #0
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	2200      	movs	r2, #0
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
 8002026:	637a      	str	r2, [r7, #52]	; 0x34
 8002028:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800202c:	4623      	mov	r3, r4
 800202e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002032:	4602      	mov	r2, r0
 8002034:	4293      	cmp	r3, r2
 8002036:	462b      	mov	r3, r5
 8002038:	460a      	mov	r2, r1
 800203a:	4193      	sbcs	r3, r2
 800203c:	d205      	bcs.n	800204a <uavcan_node_Heartbeat_1_0_serialize_+0x1ae>
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <uavcan_node_Heartbeat_1_0_serialize_+0x300>)
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002042:	21a3      	movs	r1, #163	; 0xa3
 8002044:	4852      	ldr	r0, [pc, #328]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002046:	f005 f985 	bl	8007354 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 800204a:	2301      	movs	r3, #1
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800204e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <uavcan_node_Heartbeat_1_0_serialize_+0x1c8>
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800205a:	4a4c      	ldr	r2, [pc, #304]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800205c:	21a5      	movs	r1, #165	; 0xa5
 800205e:	484c      	ldr	r0, [pc, #304]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002060:	f005 f978 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8002064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206a:	4413      	add	r3, r2
 800206c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800206e:	429a      	cmp	r2, r3
 8002070:	d205      	bcs.n	800207e <uavcan_node_Heartbeat_1_0_serialize_+0x1e2>
 8002072:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <uavcan_node_Heartbeat_1_0_serialize_+0x304>)
 8002074:	4a45      	ldr	r2, [pc, #276]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002076:	21a6      	movs	r1, #166	; 0xa6
 8002078:	4845      	ldr	r0, [pc, #276]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800207a:	f005 f96b 	bl	8007354 <__assert_func>
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 800207e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002080:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002088:	1899      	adds	r1, r3, r2
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 800208a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff fd94 	bl	8001bbc <uavcan_node_Health_1_0_serialize_>
 8002094:	4603      	mov	r3, r0
 8002096:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        if (_err2_ < 0)
 800209a:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da02      	bge.n	80020a8 <uavcan_node_Heartbeat_1_0_serialize_+0x20c>
        {
            return _err2_;
 80020a2:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80020a6:	e180      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d005      	beq.n	80020bc <uavcan_node_Heartbeat_1_0_serialize_+0x220>
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <uavcan_node_Heartbeat_1_0_serialize_+0x308>)
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80020b4:	21ae      	movs	r1, #174	; 0xae
 80020b6:	4836      	ldr	r0, [pc, #216]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80020b8:	f005 f94c 	bl	8007354 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80020bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80020c2:	4413      	add	r3, r2
 80020c4:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80020c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d905      	bls.n	80020dc <uavcan_node_Heartbeat_1_0_serialize_+0x240>
 80020d0:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80020d2:	4a2e      	ldr	r2, [pc, #184]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80020d4:	21b0      	movs	r1, #176	; 0xb0
 80020d6:	482e      	ldr	r0, [pc, #184]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80020d8:	f005 f93c 	bl	8007354 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80020dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03a      	beq.n	800215c <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80020e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f1c3 0308 	rsb	r3, r3, #8
 80020f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        NUNAVUT_ASSERT(_pad1_ > 0);
 80020f8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <uavcan_node_Heartbeat_1_0_serialize_+0x270>
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002104:	21b5      	movs	r1, #181	; 0xb5
 8002106:	4822      	ldr	r0, [pc, #136]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002108:	f005 f924 	bl	8007354 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800210c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9cd 2300 	strd	r2, r3, [sp]
 800211e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002120:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002122:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002124:	f7ff f84e 	bl	80011c4 <nunavutSetUxx>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if (_err3_ < 0)
 800212e:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002132:	2b00      	cmp	r3, #0
 8002134:	da02      	bge.n	800213c <uavcan_node_Heartbeat_1_0_serialize_+0x2a0>
        {
            return _err3_;
 8002136:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 800213a:	e136      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad1_;
 800213c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002140:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002142:	4413      	add	r3, r2
 8002144:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002154:	21bc      	movs	r1, #188	; 0xbc
 8002156:	480e      	ldr	r0, [pc, #56]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002158:	f005 f8fc 	bl	8007354 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800215c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <uavcan_node_Heartbeat_1_0_serialize_+0x2d6>
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800216a:	21bf      	movs	r1, #191	; 0xbf
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800216e:	f005 f8f1 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d019      	beq.n	80021b0 <uavcan_node_Heartbeat_1_0_serialize_+0x314>
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800217e:	4a03      	ldr	r2, [pc, #12]	; (800218c <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002180:	21c0      	movs	r1, #192	; 0xc0
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002184:	f005 f8e6 	bl	8007354 <__assert_func>
 8002188:	08009f1c 	.word	0x08009f1c
 800218c:	0800aec8 	.word	0x0800aec8
 8002190:	0800a2b8 	.word	0x0800a2b8
 8002194:	0800a320 	.word	0x0800a320
 8002198:	08009ffc 	.word	0x08009ffc
 800219c:	08009fcc 	.word	0x08009fcc
 80021a0:	0800a0c8 	.word	0x0800a0c8
 80021a4:	0800a350 	.word	0x0800a350
 80021a8:	0800a140 	.word	0x0800a140
 80021ac:	0800a168 	.word	0x0800a168
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 80021b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b2:	2200      	movs	r2, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80021bc:	460b      	mov	r3, r1
 80021be:	3308      	adds	r3, #8
 80021c0:	623b      	str	r3, [r7, #32]
 80021c2:	4613      	mov	r3, r2
 80021c4:	f143 0300 	adc.w	r3, r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	2200      	movs	r2, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	61fa      	str	r2, [r7, #28]
 80021d4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80021d8:	4623      	mov	r3, r4
 80021da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021de:	4602      	mov	r2, r0
 80021e0:	4293      	cmp	r3, r2
 80021e2:	462b      	mov	r3, r5
 80021e4:	460a      	mov	r2, r1
 80021e6:	4193      	sbcs	r3, r2
 80021e8:	d205      	bcs.n	80021f6 <uavcan_node_Heartbeat_1_0_serialize_+0x35a>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 80021ec:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 80021ee:	21c1      	movs	r1, #193	; 0xc1
 80021f0:	4872      	ldr	r0, [pc, #456]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 80021f2:	f005 f8af 	bl	8007354 <__assert_func>
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 80021f6:	2301      	movs	r3, #1
 80021f8:	667b      	str	r3, [r7, #100]	; 0x64
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80021fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <uavcan_node_Heartbeat_1_0_serialize_+0x374>
 8002204:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002206:	4a6c      	ldr	r2, [pc, #432]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002208:	21c3      	movs	r1, #195	; 0xc3
 800220a:	486c      	ldr	r0, [pc, #432]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 800220c:	f005 f8a2 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8002210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002216:	4413      	add	r3, r2
 8002218:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800221a:	429a      	cmp	r2, r3
 800221c:	d205      	bcs.n	800222a <uavcan_node_Heartbeat_1_0_serialize_+0x38e>
 800221e:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <uavcan_node_Heartbeat_1_0_serialize_+0x528>)
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002222:	21c4      	movs	r1, #196	; 0xc4
 8002224:	4865      	ldr	r0, [pc, #404]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002226:	f005 f895 	bl	8007354 <__assert_func>
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 800222a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222c:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 800222e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002234:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8002236:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800223a:	4619      	mov	r1, r3
 800223c:	f7ff fd76 	bl	8001d2c <uavcan_node_Mode_1_0_serialize_>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        if (_err4_ < 0)
 8002246:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <uavcan_node_Heartbeat_1_0_serialize_+0x3b8>
        {
            return _err4_;
 800224e:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8002252:	e0aa      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8002254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	2b08      	cmp	r3, #8
 800225a:	d005      	beq.n	8002268 <uavcan_node_Heartbeat_1_0_serialize_+0x3cc>
 800225c:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <uavcan_node_Heartbeat_1_0_serialize_+0x52c>)
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002260:	21cc      	movs	r1, #204	; 0xcc
 8002262:	4856      	ldr	r0, [pc, #344]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002264:	f005 f876 	bl	8007354 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800226e:	4413      	add	r3, r2
 8002270:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002278:	429a      	cmp	r2, r3
 800227a:	d905      	bls.n	8002288 <uavcan_node_Heartbeat_1_0_serialize_+0x3ec>
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <uavcan_node_Heartbeat_1_0_serialize_+0x530>)
 800227e:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002280:	21ce      	movs	r1, #206	; 0xce
 8002282:	484e      	ldr	r0, [pc, #312]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002284:	f005 f866 	bl	8007354 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <uavcan_node_Heartbeat_1_0_serialize_+0x402>
 8002292:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002296:	21d1      	movs	r1, #209	; 0xd1
 8002298:	4848      	ldr	r0, [pc, #288]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 800229a:	f005 f85b 	bl	8007354 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 800229e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022a0:	2200      	movs	r2, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	617a      	str	r2, [r7, #20]
 80022a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022aa:	460b      	mov	r3, r1
 80022ac:	3308      	adds	r3, #8
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	f143 0300 	adc.w	r3, r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	2200      	movs	r2, #0
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c6:	4623      	mov	r3, r4
 80022c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022cc:	4602      	mov	r2, r0
 80022ce:	4293      	cmp	r3, r2
 80022d0:	462b      	mov	r3, r5
 80022d2:	460a      	mov	r2, r1
 80022d4:	4193      	sbcs	r3, r2
 80022d6:	d205      	bcs.n	80022e4 <uavcan_node_Heartbeat_1_0_serialize_+0x448>
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 80022da:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 80022dc:	21d2      	movs	r1, #210	; 0xd2
 80022de:	4837      	ldr	r0, [pc, #220]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 80022e0:	f005 f838 	bl	8007354 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 80022e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ea:	4413      	add	r3, r2
 80022ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022ee:	7992      	ldrb	r2, [r2, #6]
 80022f0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80022f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f4:	3308      	adds	r3, #8
 80022f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80022f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03a      	beq.n	8002378 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f1c3 0308 	rsb	r3, r3, #8
 8002310:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(_pad2_ > 0);
 8002314:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <uavcan_node_Heartbeat_1_0_serialize_+0x48c>
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <uavcan_node_Heartbeat_1_0_serialize_+0x534>)
 800231e:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002320:	21da      	movs	r1, #218	; 0xda
 8002322:	4826      	ldr	r0, [pc, #152]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002324:	f005 f816 	bl	8007354 <__assert_func>
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002328:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9cd 2300 	strd	r2, r3, [sp]
 800233a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800233c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800233e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002340:	f7fe ff40 	bl	80011c4 <nunavutSetUxx>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if (_err5_ < 0)
 800234a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800234e:	2b00      	cmp	r3, #0
 8002350:	da02      	bge.n	8002358 <uavcan_node_Heartbeat_1_0_serialize_+0x4bc>
        {
            return _err5_;
 8002352:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002356:	e028      	b.n	80023aa <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad2_;
 8002358:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800235c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800235e:	4413      	add	r3, r2
 8002360:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002370:	21e1      	movs	r1, #225	; 0xe1
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002374:	f004 ffee 	bl	8007354 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8002378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237a:	2b38      	cmp	r3, #56	; 0x38
 800237c:	d005      	beq.n	800238a <uavcan_node_Heartbeat_1_0_serialize_+0x4ee>
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <uavcan_node_Heartbeat_1_0_serialize_+0x538>)
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002382:	21e4      	movs	r1, #228	; 0xe4
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002386:	f004 ffe5 	bl	8007354 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800238a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <uavcan_node_Heartbeat_1_0_serialize_+0x504>
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002398:	21e5      	movs	r1, #229	; 0xe5
 800239a:	4808      	ldr	r0, [pc, #32]	; (80023bc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 800239c:	f004 ffda 	bl	8007354 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80023a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3780      	adds	r7, #128	; 0x80
 80023ae:	46bd      	mov	sp, r7
 80023b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b4:	08009fcc 	.word	0x08009fcc
 80023b8:	0800aec8 	.word	0x0800aec8
 80023bc:	0800a2b8 	.word	0x0800a2b8
 80023c0:	08009f1c 	.word	0x08009f1c
 80023c4:	0800a370 	.word	0x0800a370
 80023c8:	0800a3a8 	.word	0x0800a3a8
 80023cc:	0800a140 	.word	0x0800a140
 80023d0:	0800a3c8 	.word	0x0800a3c8
 80023d4:	0800a3d4 	.word	0x0800a3d4

080023d8 <micros>:
// Application-specific function prototypes
void process_canard_TX_queue(void);

// return useconds - not implemented yet
uint32_t micros(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <initCyphal>:
/* USER CODE END PFP */
static CanardRxSubscription g_reg_list_service_subscription;

  void initCyphal(void)
  {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af04      	add	r7, sp, #16
      // (1) Initialize your CanardInstance, canard, etc. (already done in your code)
      // (2) Subscribe to the List service request (port ID = 385):

      int8_t result = canardRxSubscribe(
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <initCyphal+0x3c>)
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <initCyphal+0x40>)
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9cd 2300 	strd	r2, r3, [sp]
 80023fc:	2302      	movs	r3, #2
 80023fe:	f240 1281 	movw	r2, #385	; 0x181
 8002402:	2102      	movs	r1, #2
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <initCyphal+0x44>)
 8002406:	f002 ff53 	bl	80052b0 <canardRxSubscribe>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
          uavcan_register_List_1_0_FIXED_PORT_ID_,              // 385
          uavcan_register_List_Request_1_0_EXTENT_BYTES_,       // Max size of the request
          CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
          &g_reg_list_service_subscription
      );
      if (result < 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da01      	bge.n	800241a <initCyphal+0x32>
      {
          // Handle error
          Error_Handler();
 8002416:	f000 fb78 	bl	8002b0a <Error_Handler>
      }

      // Now your node will be able to accept requests for the register List service.
  }
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000260 	.word	0x20000260
 8002428:	001e8480 	.word	0x001e8480
 800242c:	2000021c 	.word	0x2000021c

08002430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8002436:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002438:	f003 f824 	bl	8005484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243c:	f000 f8f0 	bl	8002620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002440:	f000 f990 	bl	8002764 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002444:	f000 f958 	bl	80026f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8002448:	486b      	ldr	r0, [pc, #428]	; (80025f8 <main+0x1c8>)
 800244a:	f003 fa8d 	bl	8005968 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800244e:	2102      	movs	r1, #2
 8002450:	4869      	ldr	r0, [pc, #420]	; (80025f8 <main+0x1c8>)
 8002452:	f003 fcbf 	bl	8005dd4 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef Filter;

  // accept all frames - filtration is managed by software
  Filter.FilterIdHigh = 0x0000;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
  Filter.FilterIdLow = 0x0000;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  Filter.FilterMaskIdHigh = 0x0000;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  Filter.FilterMaskIdLow = 0x0000;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  Filter.FilterBank = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002480:	2301      	movs	r3, #1
 8002482:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
  Filter.FilterActivation = ENABLE;
 8002486:	2301      	movs	r3, #1
 8002488:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  Filter.SlaveStartFilterBank = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8002492:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8002496:	4619      	mov	r1, r3
 8002498:	4857      	ldr	r0, [pc, #348]	; (80025f8 <main+0x1c8>)
 800249a:	f003 f985 	bl	80057a8 <HAL_CAN_ConfigFilter>

  // Initialization of a canard instance with the previous allocator
  canard = canardInit(&memAllocate, &memFree);
 800249e:	4c57      	ldr	r4, [pc, #348]	; (80025fc <main+0x1cc>)
 80024a0:	463b      	mov	r3, r7
 80024a2:	4a57      	ldr	r2, [pc, #348]	; (8002600 <main+0x1d0>)
 80024a4:	4957      	ldr	r1, [pc, #348]	; (8002604 <main+0x1d4>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fd56 	bl	8004f58 <canardInit>
 80024ac:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80024b0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80024b4:	461d      	mov	r5, r3
 80024b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initCyphal();
 80024c2:	f7ff ff91 	bl	80023e8 <initCyphal>
  canard.node_id = 96;
 80024c6:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <main+0x1cc>)
 80024c8:	2260      	movs	r2, #96	; 0x60
 80024ca:	711a      	strb	r2, [r3, #4]

  queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
 80024cc:	4c4e      	ldr	r4, [pc, #312]	; (8002608 <main+0x1d8>)
 80024ce:	463b      	mov	r3, r7
 80024d0:	2208      	movs	r2, #8
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fd7d 	bl	8004fd4 <canardTxInit>
 80024da:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80024de:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80024e2:	461d      	mov	r5, r3
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	6023      	str	r3, [r4, #0]
                        CANARD_MTU_CAN_CLASSIC);

  CanardRxSubscription subscription; // Transfer subscription state.

  if( canardRxSubscribe((CanardInstance *const)&canard,
 80024ec:	f240 6154 	movw	r1, #1620	; 0x654
 80024f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <main+0x1dc>)
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002500:	f240 1301 	movw	r3, #257	; 0x101
 8002504:	460a      	mov	r2, r1
 8002506:	2100      	movs	r1, #0
 8002508:	483c      	ldr	r0, [pc, #240]	; (80025fc <main+0x1cc>)
 800250a:	f002 fed1 	bl	80052b0 <canardRxSubscribe>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <main+0xe8>
                        MSG_PORT_ID,
                        uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &subscription) != 1 )
                        {
                          Error_Handler();
 8002514:	f000 faf9 	bl	8002b0a <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Create a heartbeat message
    uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 8002518:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800251c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002520:	461a      	mov	r2, r3
 8002522:	2300      	movs	r3, #0
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	6053      	str	r3, [r2, #4]
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <main+0x1e0>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002530:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002534:	601a      	str	r2, [r3, #0]
                                                .health = {uavcan_node_Health_1_0_NOMINAL},
                                                .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

    // Serialize the heartbeat message
    if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 8002536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253a:	4a36      	ldr	r2, [pc, #216]	; (8002614 <main+0x1e4>)
 800253c:	4936      	ldr	r1, [pc, #216]	; (8002618 <main+0x1e8>)
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fcac 	bl	8001e9c <uavcan_node_Heartbeat_1_0_serialize_>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	da01      	bge.n	800254e <main+0x11e>
    {
      Error_Handler();
 800254a:	f000 fade 	bl	8002b0a <Error_Handler>
    }

    // Create a transfer for the heartbeat message
    const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
 800254e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002552:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002556:	2204      	movs	r2, #4
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800255e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002562:	2200      	movs	r2, #0
 8002564:	705a      	strb	r2, [r3, #1]
 8002566:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800256a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800256e:	f641 5255 	movw	r2, #7509	; 0x1d55
 8002572:	805a      	strh	r2, [r3, #2]
 8002574:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002578:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	711a      	strb	r2, [r3, #4]
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <main+0x1ec>)
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002588:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800258c:	715a      	strb	r2, [r3, #5]
                                                      .transfer_kind = CanardTransferKindMessage,
                                                      .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
                                                      .remote_node_id = CANARD_NODE_ID_UNSET,
                                                      .transfer_id = my_message_transfer_id,};

    if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <main+0x1e4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <main+0x1e8>)
 8002594:	9202      	str	r2, [sp, #8]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	f107 0320 	add.w	r3, r7, #32
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	4915      	ldr	r1, [pc, #84]	; (80025fc <main+0x1cc>)
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <main+0x1d8>)
 80025aa:	f002 fd31 	bl	8005010 <canardTxPush>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da01      	bge.n	80025b8 <main+0x188>
                    0,     					// Zero if transmission deadline is not limited.
                    &transfer_metadata,
                    hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
                    hbeat_ser_buf) < 0 )
                    {
                      Error_Handler();
 80025b4:	f000 faa9 	bl	8002b0a <Error_Handler>
                    }

    // Block for a second before generating the next transfer
    uint32_t timestamp = HAL_GetTick();
 80025b8:	f002 ffca 	bl	8005550 <HAL_GetTick>
 80025bc:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
    while( HAL_GetTick() < timestamp + 1000u )
 80025c0:	e004      	b.n	80025cc <main+0x19c>
    {
      process_canard_TX_queue();
 80025c2:	f000 f91f 	bl	8002804 <process_canard_TX_queue>
      HAL_Delay(10);
 80025c6:	200a      	movs	r0, #10
 80025c8:	f002 ffce 	bl	8005568 <HAL_Delay>
    while( HAL_GetTick() < timestamp + 1000u )
 80025cc:	f002 ffc0 	bl	8005550 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80025d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3f1      	bcc.n	80025c2 <main+0x192>
    }

    // Increase uptime
    test_uptimeSec++;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <main+0x1e0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <main+0x1e0>)
 80025e6:	6013      	str	r3, [r2, #0]
    // Increment the transfer_id variable
    my_message_transfer_id++;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <main+0x1ec>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <main+0x1ec>)
 80025f2:	701a      	strb	r2, [r3, #0]
  {
 80025f4:	e790      	b.n	8002518 <main+0xe8>
 80025f6:	bf00      	nop
 80025f8:	200001f4 	.word	0x200001f4
 80025fc:	2000021c 	.word	0x2000021c
 8002600:	08002af3 	.word	0x08002af3
 8002604:	08002ad9 	.word	0x08002ad9
 8002608:	20000238 	.word	0x20000238
 800260c:	001e8480 	.word	0x001e8480
 8002610:	20000250 	.word	0x20000250
 8002614:	20000000 	.word	0x20000000
 8002618:	20000254 	.word	0x20000254
 800261c:	2000024c 	.word	0x2000024c

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b094      	sub	sp, #80	; 0x50
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	2234      	movs	r2, #52	; 0x34
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f005 fd01 	bl	8008036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <SystemClock_Config+0xd0>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <SystemClock_Config+0xd0>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <SystemClock_Config+0xd0>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <SystemClock_Config+0xd4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <SystemClock_Config+0xd4>)
 800266a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <SystemClock_Config+0xd4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800267c:	2301      	movs	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002686:	2302      	movs	r3, #2
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800268a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002690:	2304      	movs	r3, #4
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002694:	23a0      	movs	r3, #160	; 0xa0
 8002696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002698:	2302      	movs	r3, #2
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800269c:	2302      	movs	r3, #2
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fbb5 	bl	8006e18 <HAL_RCC_OscConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026b4:	f000 fa29 	bl	8002b0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b8:	230f      	movs	r3, #15
 80026ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026bc:	2302      	movs	r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	2105      	movs	r1, #5
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 f888 	bl	80067ec <HAL_RCC_ClockConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026e2:	f000 fa12 	bl	8002b0a <Error_Handler>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3750      	adds	r7, #80	; 0x50
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_CAN1_Init+0x64>)
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <MX_CAN1_Init+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_CAN1_Init+0x64>)
 8002704:	2204      	movs	r2, #4
 8002706:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_CAN1_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_CAN1_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_CAN1_Init+0x64>)
 8002716:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800271a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_CAN1_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_CAN1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_CAN1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_CAN1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_CAN1_Init+0x64>)
 8002736:	2201      	movs	r2, #1
 8002738:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_CAN1_Init+0x64>)
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_CAN1_Init+0x64>)
 8002742:	2200      	movs	r2, #0
 8002744:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_CAN1_Init+0x64>)
 8002748:	f002 ff32 	bl	80055b0 <HAL_CAN_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002752:	f000 f9da 	bl	8002b0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200001f4 	.word	0x200001f4
 8002760:	40006400 	.word	0x40006400

08002764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <MX_GPIO_Init+0x98>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <MX_GPIO_Init+0x98>)
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <MX_GPIO_Init+0x98>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_GPIO_Init+0x98>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <MX_GPIO_Init+0x98>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_GPIO_Init+0x98>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_GPIO_Init+0x98>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <MX_GPIO_Init+0x98>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_GPIO_Init+0x98>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2120      	movs	r1, #32
 80027d2:	480b      	ldr	r0, [pc, #44]	; (8002800 <MX_GPIO_Init+0x9c>)
 80027d4:	f003 fff0 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027d8:	2320      	movs	r3, #32
 80027da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_GPIO_Init+0x9c>)
 80027f0:	f003 fe4e 	bl	8006490 <HAL_GPIO_Init>

}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000

08002804 <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
 8002804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002808:	b08b      	sub	sp, #44	; 0x2c
 800280a:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e039      	b.n	8002886 <process_canard_TX_queue+0x82>
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	d00c      	beq.n	8002836 <process_canard_TX_queue+0x32>
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8002822:	f7ff fdd9 	bl	80023d8 <micros>
 8002826:	4603      	mov	r3, r0
 8002828:	2200      	movs	r2, #0
 800282a:	461c      	mov	r4, r3
 800282c:	4615      	mov	r5, r2
 800282e:	4544      	cmp	r4, r8
 8002830:	eb75 0309 	sbcs.w	r3, r5, r9
 8002834:	d21d      	bcs.n	8002872 <process_canard_TX_queue+0x6e>
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
 8002836:	2304      	movs	r3, #4
 8002838:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]

      TxHeader.DLC = ti->frame.payload_size;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	61fb      	str	r3, [r7, #28]
      TxHeader.ExtId = ti->frame.extended_can_id;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	613b      	str	r3, [r7, #16]

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4618      	mov	r0, r3
 8002856:	f005 fc7e 	bl	8008156 <memcpy>

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800285a:	463b      	mov	r3, r7
 800285c:	1d3a      	adds	r2, r7, #4
 800285e:	f107 010c 	add.w	r1, r7, #12
 8002862:	480f      	ldr	r0, [pc, #60]	; (80028a0 <process_canard_TX_queue+0x9c>)
 8002864:	f003 f8c4 	bl	80059f0 <HAL_CAN_AddTxMessage>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <process_canard_TX_queue+0x6e>
      {
        break;
 800286e:	bf00      	nop
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}
 8002870:	e010      	b.n	8002894 <process_canard_TX_queue+0x90>
    canard.memory_free(&canard, canardTxPop(&queue, ti));
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <process_canard_TX_queue+0xa0>)
 8002874:	68de      	ldr	r6, [r3, #12]
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	480b      	ldr	r0, [pc, #44]	; (80028a8 <process_canard_TX_queue+0xa4>)
 800287a:	f002 fc68 	bl	800514e <canardTxPop>
 800287e:	4603      	mov	r3, r0
 8002880:	4619      	mov	r1, r3
 8002882:	4808      	ldr	r0, [pc, #32]	; (80028a4 <process_canard_TX_queue+0xa0>)
 8002884:	47b0      	blx	r6
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8002886:	4808      	ldr	r0, [pc, #32]	; (80028a8 <process_canard_TX_queue+0xa4>)
 8002888:	f002 fc4c 	bl	8005124 <canardTxPeek>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1be      	bne.n	8002812 <process_canard_TX_queue+0xe>
}
 8002894:	bf00      	nop
 8002896:	372c      	adds	r7, #44	; 0x2c
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800289e:	bf00      	nop
 80028a0:	200001f4 	.word	0x200001f4
 80028a4:	2000021c 	.word	0x2000021c
 80028a8:	20000238 	.word	0x20000238

080028ac <HAL_CAN_RxFifo0MsgPendingCallback>:

#pragma optimize=s none
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80028b4:	af04      	add	r7, sp, #16
 80028b6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80028ba:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80028be:	6018      	str	r0, [r3, #0]
    // 1. Read the pending frame from FIFO0.
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0};
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80028cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80028d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80028d4:	f507 7120 	add.w	r1, r7, #640	; 0x280
 80028d8:	f5a1 701f 	sub.w	r0, r1, #636	; 0x27c
 80028dc:	2100      	movs	r1, #0
 80028de:	6800      	ldr	r0, [r0, #0]
 80028e0:	f003 f956 	bl	8005b90 <HAL_CAN_GetRxMessage>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 80d8 	bne.w	8002a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
        return;
    }

    // 2. Wrap it into a CanardFrame.
    CanardFrame rxf;
    rxf.extended_can_id = RxHeader.ExtId;          // 29-bit ID from hardware
 80028ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80028f0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    rxf.payload_size    = RxHeader.DLC;            // 0..8
 80028f4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80028f8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    rxf.payload         = RxData;                  // Our local buffer
 80028fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002900:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

    // 3. Attempt to parse it into a higher-level CanardRxTransfer.
    CanardRxTransfer transfer;
    const int8_t accept_result = canardRxAccept(
        &canard,
        micros(),        // Local monotonic microsecond timestamp
 8002904:	f7ff fd68 	bl	80023d8 <micros>
 8002908:	4603      	mov	r3, r0
    const int8_t accept_result = canardRxAccept(
 800290a:	2200      	movs	r2, #0
 800290c:	469a      	mov	sl, r3
 800290e:	4693      	mov	fp, r2
 8002910:	2300      	movs	r3, #0
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4652      	mov	r2, sl
 8002926:	465b      	mov	r3, fp
 8002928:	4862      	ldr	r0, [pc, #392]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800292a:	f002 fc31 	bl	8005190 <canardRxAccept>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
        0,               // If you have multiple redundant interfaces, put the iface index here
        &transfer,
        NULL
    );

    if (accept_result != 1)
 8002934:	f997 327b 	ldrsb.w	r3, [r7, #635]	; 0x27b
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 80b1 	bne.w	8002aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
    // If you also have other messages to parse, check them here:
    // e.g., if (transfer.metadata.transfer_kind == CanardTransferKindMessage && transfer.metadata.port_id == YOUR_PORT_ID) { ... }
    // -------------------------------------------------------

    // 4. Check if this is a uavcan.register.List.1.0 REQUEST:
    if ((transfer.metadata.transfer_kind == CanardTransferKindRequest) &&
 800293e:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 8002942:	2b02      	cmp	r3, #2
 8002944:	f040 80a2 	bne.w	8002a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        (transfer.metadata.port_id == uavcan_register_List_1_0_FIXED_PORT_ID_)) // 385
 8002948:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
    if ((transfer.metadata.transfer_kind == CanardTransferKindRequest) &&
 800294c:	f240 1281 	movw	r2, #385	; 0x181
 8002950:	4293      	cmp	r3, r2
 8002952:	f040 809b 	bne.w	8002a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
    {
        // Deserialize the request to get the index.
        uavcan_register_List_Request_1_0 request;
        size_t request_payload_size = transfer.payload_size;
 8002956:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800295a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        const int8_t deserialization_result =
            uavcan_register_List_Request_1_0_deserialize_(
                &request,
                (const uint8_t*)transfer.payload,
 800295e:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
            uavcan_register_List_Request_1_0_deserialize_(
 8002962:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002966:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe feca 	bl	8001704 <uavcan_register_List_Request_1_0_deserialize_>
 8002970:	4603      	mov	r3, r0
 8002972:	f887 327a 	strb.w	r3, [r7, #634]	; 0x27a
                &request_payload_size
            );

        // We always free the payload after deserialization.
        canard.memory_free(&canard, transfer.payload);
 8002976:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800297e:	4611      	mov	r1, r2
 8002980:	484c      	ldr	r0, [pc, #304]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002982:	4798      	blx	r3

        if (deserialization_result >= 0)
 8002984:	f997 327a 	ldrsb.w	r3, [r7, #634]	; 0x27a
 8002988:	2b00      	cmp	r3, #0
 800298a:	f2c0 808b 	blt.w	8002aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
        {
            // 5. Build the response with the name that corresponds to 'request.index'.
            uavcan_register_List_Response_1_0 response;
            uavcan_register_List_Response_1_0_initialize_(&response);
 800298e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8e8 	bl	8001b68 <uavcan_register_List_Response_1_0_initialize_>

            const uint16_t idx = request.index;
 8002998:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 800299c:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
            if (idx < g_num_registers)
 80029a0:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80029a4:	2204      	movs	r2, #4
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d225      	bcs.n	80029f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
            {
                // Valid index => set the register name
                const char* reg_name = g_register_names[idx];
 80029aa:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 80029ae:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                size_t name_len = strlen(reg_name);
 80029b8:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80029bc:	f7fd fc78 	bl	80002b0 <strlen>
 80029c0:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
                if (name_len > 255U) name_len = 255U;  // saturate
 80029c4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80029c8:	2bff      	cmp	r3, #255	; 0xff
 80029ca:	d902      	bls.n	80029d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
 80029cc:	23ff      	movs	r3, #255	; 0xff
 80029ce:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
                memcpy(response.name.name.elements, reg_name, name_len);
 80029d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029d6:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80029da:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 fbb9 	bl	8008156 <memcpy>
                response.name.name.count = name_len;
 80029e4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80029e8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80029ec:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80029f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80029f4:	e006      	b.n	8002a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
            }
            else
            {
                // Out-of-range => return an empty name
                response.name.name.count = 0U;
 80029f6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80029fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            }

            // 6. Serialize the response
            uint8_t resp_payload[uavcan_register_List_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 8002a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a08:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            const int8_t ser_res =
                uavcan_register_List_Response_1_0_serialize_(&response, resp_payload, &resp_payload_size);
 8002a0c:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002a10:	f107 0108 	add.w	r1, r7, #8
 8002a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fee1 	bl	80017e0 <uavcan_register_List_Response_1_0_serialize_>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
            if (ser_res < 0)
 8002a24:	f997 3273 	ldrsb.w	r3, [r7, #627]	; 0x273
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db3d      	blt.n	8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
                return;
            }

            // 7. Publish the service response
            CanardTransferMetadata meta = {
                .priority       = transfer.metadata.priority,
 8002a2c:	f897 3220 	ldrb.w	r3, [r7, #544]	; 0x220
            CanardTransferMetadata meta = {
 8002a30:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8002a3a:	f240 1381 	movw	r3, #385	; 0x181
 8002a3e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
                .transfer_kind  = CanardTransferKindResponse,     // must be RESPONSE
                .port_id        = uavcan_register_List_1_0_FIXED_PORT_ID_, // 385
                .remote_node_id = transfer.metadata.remote_node_id,// who requested
 8002a42:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
            CanardTransferMetadata meta = {
 8002a46:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
                .transfer_id    = transfer.metadata.transfer_id,   // must match request
 8002a4a:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
            CanardTransferMetadata meta = {
 8002a4e:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
            };

            const int32_t push_result = canardTxPush(
                &queue,
                &canard,
                micros() + 1000ULL * 1000ULL,  // e.g. 1-second deadline
 8002a52:	f7ff fcc1 	bl	80023d8 <micros>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2200      	movs	r2, #0
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4615      	mov	r5, r2
            const int32_t push_result = canardTxPush(
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002a60:	eb14 0803 	adds.w	r8, r4, r3
 8002a64:	f145 0900 	adc.w	r9, r5, #0
 8002a68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a6c:	f107 0208 	add.w	r2, r7, #8
 8002a70:	9202      	str	r2, [sp, #8]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002a82:	f002 fac5 	bl	8005010 <canardTxPush>
 8002a86:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            );
            (void) push_result;  // Handle error if < 0
        }

        // Done with handling the List.1.0 request
        return;
 8002a8a:	e00b      	b.n	8002aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
    else
    {
        // If this was not a List.1.0 request, handle your other messages or just free the payload.
        // For example, if you had something else waiting to be deserialized. Or:

        canard.memory_free(&canard, transfer.payload);
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8002a94:	4611      	mov	r1, r2
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002a98:	4798      	blx	r3
        return;
 8002a9a:	e006      	b.n	8002aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x1fe>
        return;
 8002a9c:	bf00      	nop
 8002a9e:	e004      	b.n	8002aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x1fe>
        return;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x1fe>
        return;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x1fe>
                return;
 8002aa8:	bf00      	nop
    }
}
 8002aaa:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab4:	2000021c 	.word	0x2000021c
 8002ab8:	0800aeb8 	.word	0x0800aeb8
 8002abc:	000f4240 	.word	0x000f4240
 8002ac0:	20000238 	.word	0x20000238

08002ac4 <HAL_CAN_RxFifo1MsgPendingCallback>:


#pragma optimize=s none
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ;
 8002acc:	bf00      	nop
}
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <memAllocate>:

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  (void) ins;
  return malloc(amount);
 8002ae2:	6838      	ldr	r0, [r7, #0]
 8002ae4:	f004 fc54 	bl	8007390 <malloc>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 8002afc:	6838      	ldr	r0, [r7, #0]
 8002afe:	f004 fc4f 	bl	80073a0 <free>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0e:	b672      	cpsid	i
}
 8002b10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <Error_Handler+0x8>

08002b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_MspInit+0x4c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b52:	2007      	movs	r0, #7
 8002b54:	f003 fc5a 	bl	800640c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_CAN_MspInit+0x94>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d134      	bne.n	8002bf0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_CAN_MspInit+0x98>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002bd0:	2309      	movs	r3, #9
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <HAL_CAN_MspInit+0x9c>)
 8002bdc:	f003 fc58 	bl	8006490 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2014      	movs	r0, #20
 8002be6:	f003 fc1c 	bl	8006422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002bea:	2014      	movs	r0, #20
 8002bec:	f003 fc35 	bl	800645a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40006400 	.word	0x40006400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f002 fc6a 	bl	8005528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <CAN1_RX0_IRQHandler+0x10>)
 8002c5e:	f003 f8df 	bl	8005e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200001f4 	.word	0x200001f4

08002c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_kill>:

int _kill(int pid, int sig)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c86:	f005 fa39 	bl	80080fc <__errno>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2216      	movs	r2, #22
 8002c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_exit>:

void _exit (int status)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ffe7 	bl	8002c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cae:	e7fe      	b.n	8002cae <_exit+0x12>

08002cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cc2:	f3af 8000 	nop.w
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	b2ca      	uxtb	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf0      	blt.n	8002cc2 <_read+0x12>
  }

  return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e009      	b.n	8002d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	60ba      	str	r2, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dbf1      	blt.n	8002cfc <_write+0x12>
  }
  return len;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_close>:

int _close(int file)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_isatty>:

int _isatty(int file)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <_sbrk+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <_sbrk+0x60>)
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <_sbrk+0x64>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <_sbrk+0x68>)
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d207      	bcs.n	8002dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dbc:	f005 f99e 	bl	80080fc <__errno>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	e009      	b.n	8002de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <_sbrk+0x64>)
 8002ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20020000 	.word	0x20020000
 8002dec:	00000400 	.word	0x00000400
 8002df0:	20000488 	.word	0x20000488
 8002df4:	200005e0 	.word	0x200005e0

08002df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <SystemInit+0x20>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <SystemInit+0x20>)
 8002e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e20:	f7ff ffea 	bl	8002df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e26:	490d      	ldr	r1, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f005 f95d 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7ff faef 	bl	8002430 <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002e60:	0800b8c8 	.word	0x0800b8c8
  ldr r2, =_sbss
 8002e64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e68:	200005dc 	.word	0x200005dc

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>

08002e6e <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8002e82:	e007      	b.n	8002e94 <cavlFindExtremum+0x26>
    {
        result = c;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f4      	bne.n	8002e84 <cavlFindExtremum+0x16>
    }
    return result;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <cavlPrivateRotate+0x3c>
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <cavlPrivateRotate+0x3c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	db04      	blt.n	8002ee4 <cavlPrivateRotate+0x3c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	dd05      	ble.n	8002ef0 <cavlPrivateRotate+0x48>
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <cavlPrivateRotate+0xe8>)
 8002ee6:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <cavlPrivateRotate+0xec>)
 8002ee8:	2162      	movs	r1, #98	; 0x62
 8002eea:	482b      	ldr	r0, [pc, #172]	; (8002f98 <cavlPrivateRotate+0xf0>)
 8002eec:	f004 fa32 	bl	8007354 <__assert_func>
    Cavl* const z = x->lr[!r];
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4299      	cmp	r1, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	f082 0201 	eor.w	r2, r2, #1
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	4610      	mov	r0, r2
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	0083      	lsls	r3, r0, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f083 0301 	eor.w	r3, r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	0800a430 	.word	0x0800a430
 8002f94:	0800b3ec 	.word	0x0800b3ec
 8002f98:	0800a488 	.word	0x0800a488

08002f9c <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <cavlPrivateAdjustBalance+0x28>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	db04      	blt.n	8002fc4 <cavlPrivateAdjustBalance+0x28>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	dd05      	ble.n	8002fd0 <cavlPrivateAdjustBalance+0x34>
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <cavlPrivateAdjustBalance+0x1b0>)
 8002fc6:	4a62      	ldr	r2, [pc, #392]	; (8003150 <cavlPrivateAdjustBalance+0x1b4>)
 8002fc8:	2177      	movs	r1, #119	; 0x77
 8002fca:	4862      	ldr	r0, [pc, #392]	; (8003154 <cavlPrivateAdjustBalance+0x1b8>)
 8002fcc:	f004 f9c2 	bl	8007354 <__assert_func>
    Cavl*        out    = x;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d001      	beq.n	8002fe6 <cavlPrivateAdjustBalance+0x4a>
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	e000      	b.n	8002fe8 <cavlPrivateAdjustBalance+0x4c>
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	4413      	add	r3, r2
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8002fee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	db04      	blt.n	8003002 <cavlPrivateAdjustBalance+0x66>
 8002ff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	f340 809c 	ble.w	800313a <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	09db      	lsrs	r3, r3, #7
 8003006:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8003008:	7cbb      	ldrb	r3, [r7, #18]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <cavlPrivateAdjustBalance+0x76>
 800300e:	2301      	movs	r3, #1
 8003010:	e001      	b.n	8003016 <cavlPrivateAdjustBalance+0x7a>
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8003018:	7cbb      	ldrb	r3, [r7, #18]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <cavlPrivateAdjustBalance+0xa0>
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <cavlPrivateAdjustBalance+0x1bc>)
 8003032:	4a47      	ldr	r2, [pc, #284]	; (8003150 <cavlPrivateAdjustBalance+0x1b4>)
 8003034:	217f      	movs	r1, #127	; 0x7f
 8003036:	4847      	ldr	r0, [pc, #284]	; (8003154 <cavlPrivateAdjustBalance+0x1b8>)
 8003038:	f004 f98c 	bl	8007354 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	dc1c      	bgt.n	800308a <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8003054:	7cbb      	ldrb	r3, [r7, #18]
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff25 	bl	8002ea8 <cavlPrivateRotate>
            if (0 == z->bf)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8003068:	7c7b      	ldrb	r3, [r7, #17]
 800306a:	425b      	negs	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	b25a      	sxtb	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	7c7a      	ldrb	r2, [r7, #17]
 8003078:	731a      	strb	r2, [r3, #12]
    {
 800307a:	e061      	b.n	8003140 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	731a      	strb	r2, [r3, #12]
    {
 8003088:	e05a      	b.n	8003140 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800308a:	7cbb      	ldrb	r3, [r7, #18]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <cavlPrivateAdjustBalance+0x10c>
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <cavlPrivateAdjustBalance+0x1c0>)
 800309e:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <cavlPrivateAdjustBalance+0x1b4>)
 80030a0:	2192      	movs	r1, #146	; 0x92
 80030a2:	482c      	ldr	r0, [pc, #176]	; (8003154 <cavlPrivateAdjustBalance+0x1b8>)
 80030a4:	f004 f956 	bl	8007354 <__assert_func>
            out = y;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 80030ac:	7cbb      	ldrb	r3, [r7, #18]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff feee 	bl	8002ea8 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80030cc:	7cbb      	ldrb	r3, [r7, #18]
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fee9 	bl	8002ea8 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80030dc:	461a      	mov	r2, r3
 80030de:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da09      	bge.n	80030fe <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7c7a      	ldrb	r2, [r7, #17]
 80030ee:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	731a      	strb	r2, [r3, #12]
    {
 80030fc:	e020      	b.n	8003140 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	dd0c      	ble.n	800312c <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800311e:	7c7b      	ldrb	r3, [r7, #17]
 8003120:	425b      	negs	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	b25a      	sxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	731a      	strb	r2, [r3, #12]
    {
 800312a:	e009      	b.n	8003140 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	731a      	strb	r2, [r3, #12]
    {
 8003138:	e002      	b.n	8003140 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7cfa      	ldrb	r2, [r7, #19]
 800313e:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8003140:	697b      	ldr	r3, [r7, #20]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800a4bc 	.word	0x0800a4bc
 8003150:	0800b3d0 	.word	0x0800b3d0
 8003154:	0800a488 	.word	0x0800a488
 8003158:	0800a4f4 	.word	0x0800a4f4
 800315c:	0800a508 	.word	0x0800a508

08003160 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <cavlPrivateRetraceOnGrowth+0x18>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <cavlPrivateRetraceOnGrowth+0x24>
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <cavlPrivateRetraceOnGrowth+0xa8>)
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <cavlPrivateRetraceOnGrowth+0xac>)
 800317c:	21b5      	movs	r1, #181	; 0xb5
 800317e:	4824      	ldr	r0, [pc, #144]	; (8003210 <cavlPrivateRetraceOnGrowth+0xb0>)
 8003180:	f004 f8e8 	bl	8007354 <__assert_func>
    Cavl* c = added;      // Child
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800318e:	e023      	b.n	80031d8 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	429a      	cmp	r2, r3
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d005      	beq.n	80031bc <cavlPrivateRetraceOnGrowth+0x5c>
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <cavlPrivateRetraceOnGrowth+0xb4>)
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <cavlPrivateRetraceOnGrowth+0xac>)
 80031b4:	21bb      	movs	r1, #187	; 0xbb
 80031b6:	4816      	ldr	r0, [pc, #88]	; (8003210 <cavlPrivateRetraceOnGrowth+0xb0>)
 80031b8:	f004 f8cc 	bl	8007354 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	4619      	mov	r1, r3
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f7ff feeb 	bl	8002f9c <cavlPrivateAdjustBalance>
 80031c6:	6178      	str	r0, [r7, #20]
        p = c->up;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1d8      	bne.n	8003190 <cavlPrivateRetraceOnGrowth+0x30>
 80031de:	e000      	b.n	80031e2 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80031e0:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <cavlPrivateRetraceOnGrowth+0x94>
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <cavlPrivateRetraceOnGrowth+0xb8>)
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <cavlPrivateRetraceOnGrowth+0xac>)
 80031ec:	21c3      	movs	r1, #195	; 0xc3
 80031ee:	4808      	ldr	r0, [pc, #32]	; (8003210 <cavlPrivateRetraceOnGrowth+0xb0>)
 80031f0:	f004 f8b0 	bl	8007354 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <cavlPrivateRetraceOnGrowth+0x9e>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	e000      	b.n	8003200 <cavlPrivateRetraceOnGrowth+0xa0>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0800a51c 	.word	0x0800a51c
 800320c:	0800b3b4 	.word	0x0800b3b4
 8003210:	0800a488 	.word	0x0800a488
 8003214:	0800a548 	.word	0x0800a548
 8003218:	0800a558 	.word	0x0800a558

0800321c <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d065      	beq.n	8003300 <cavlSearch+0xe4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d062      	beq.n	8003300 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8003244:	e02f      	b.n	80032a6 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4611      	mov	r1, r2
 800324e:	68b8      	ldr	r0, [r7, #8]
 8003250:	4798      	blx	r3
 8003252:	4603      	mov	r3, r0
 8003254:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8003256:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <cavlSearch+0x4a>
            {
                out = *n;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8003264:	e023      	b.n	80032ae <cavlSearch+0x92>
            }
            up = *n;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003274:	2b00      	cmp	r3, #0
 8003276:	bfcc      	ite	gt
 8003278:	2301      	movgt	r3, #1
 800327a:	2300      	movle	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <cavlSearch+0x8a>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	429a      	cmp	r2, r3
 8003298:	d005      	beq.n	80032a6 <cavlSearch+0x8a>
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <cavlSearch+0xf0>)
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <cavlSearch+0xf4>)
 800329e:	21db      	movs	r1, #219	; 0xdb
 80032a0:	481c      	ldr	r0, [pc, #112]	; (8003314 <cavlSearch+0xf8>)
 80032a2:	f004 f857 	bl	8007354 <__assert_func>
        while (*n != NULL)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1cb      	bne.n	8003246 <cavlSearch+0x2a>
        }
        if (NULL == out)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d125      	bne.n	8003300 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <cavlSearch+0xa8>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68b8      	ldr	r0, [r7, #8]
 80032be:	4798      	blx	r3
 80032c0:	4603      	mov	r3, r0
 80032c2:	e000      	b.n	80032c6 <cavlSearch+0xaa>
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d018      	beq.n	8003300 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
                out->up        = up;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2200      	movs	r2, #0
 80032ea:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 80032ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ee:	f7ff ff37 	bl	8003160 <cavlPrivateRetraceOnGrowth>
 80032f2:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <cavlSearch+0xe4>
                {
                    *root = rt;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003302:	4618      	mov	r0, r3
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	0800a56c 	.word	0x0800a56c
 8003310:	0800b3a8 	.word	0x0800b3a8
 8003314:	0800a488 	.word	0x0800a488

08003318 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8116 	beq.w	8003556 <cavlRemove+0x23e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8112 	beq.w	8003556 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <cavlRemove+0x2e>
 800333a:	4b89      	ldr	r3, [pc, #548]	; (8003560 <cavlRemove+0x248>)
 800333c:	4a89      	ldr	r2, [pc, #548]	; (8003564 <cavlRemove+0x24c>)
 800333e:	21f6      	movs	r1, #246	; 0xf6
 8003340:	4889      	ldr	r0, [pc, #548]	; (8003568 <cavlRemove+0x250>)
 8003342:	f004 f807 	bl	8007354 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <cavlRemove+0x4c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d005      	beq.n	8003364 <cavlRemove+0x4c>
 8003358:	4b84      	ldr	r3, [pc, #528]	; (800356c <cavlRemove+0x254>)
 800335a:	4a82      	ldr	r2, [pc, #520]	; (8003564 <cavlRemove+0x24c>)
 800335c:	21f7      	movs	r1, #247	; 0xf7
 800335e:	4882      	ldr	r0, [pc, #520]	; (8003568 <cavlRemove+0x250>)
 8003360:	f003 fff8 	bl	8007354 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d073      	beq.n	800345c <cavlRemove+0x144>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d06f      	beq.n	800345c <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fd73 	bl	8002e6e <cavlFindExtremum>
 8003388:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <cavlRemove+0x88>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <cavlRemove+0x88>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <cavlRemove+0x94>
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <cavlRemove+0x258>)
 80033a2:	4a70      	ldr	r2, [pc, #448]	; (8003564 <cavlRemove+0x24c>)
 80033a4:	21ff      	movs	r1, #255	; 0xff
 80033a6:	4870      	ldr	r0, [pc, #448]	; (8003568 <cavlRemove+0x250>)
 80033a8:	f003 ffd4 	bl	8007354 <__assert_func>
            re->bf        = node->bf;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d025      	beq.n	800341c <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d006      	beq.n	80033ee <cavlRemove+0xd6>
 80033e0:	4b64      	ldr	r3, [pc, #400]	; (8003574 <cavlRemove+0x25c>)
 80033e2:	4a60      	ldr	r2, [pc, #384]	; (8003564 <cavlRemove+0x24c>)
 80033e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80033e8:	485f      	ldr	r0, [pc, #380]	; (8003568 <cavlRemove+0x250>)
 80033ea:	f003 ffb3 	bl	8007354 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	601a      	str	r2, [r3, #0]
                r             = false;
 8003416:	2300      	movs	r3, #0
 8003418:	76fb      	strb	r3, [r7, #27]
 800341a:	e003      	b.n	8003424 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8003420:	2301      	movs	r3, #1
 8003422:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	4299      	cmp	r1, r3
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	605a      	str	r2, [r3, #4]
        {
 8003452:	e046      	b.n	80034e2 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	601a      	str	r2, [r3, #0]
        {
 800345a:	e042      	b.n	80034e2 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d020      	beq.n	80034d4 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	7ef8      	ldrb	r0, [r7, #27]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	69f9      	ldr	r1, [r7, #28]
 80034b0:	0083      	lsls	r3, r0, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 80034c4:	7efb      	ldrb	r3, [r7, #27]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e006      	b.n	80034e2 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d036      	beq.n	8003556 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f083 0301 	eor.w	r3, r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	69f8      	ldr	r0, [r7, #28]
 8003508:	f7ff fd48 	bl	8002f9c <cavlPrivateAdjustBalance>
 800350c:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <cavlRemove+0x21e>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8003534:	e7da      	b.n	80034ec <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10c      	bne.n	8003556 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <cavlRemove+0x238>
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <cavlRemove+0x260>)
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <cavlRemove+0x24c>)
 8003546:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800354a:	4807      	ldr	r0, [pc, #28]	; (8003568 <cavlRemove+0x250>)
 800354c:	f003 ff02 	bl	8007354 <__assert_func>
                *root = c;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8003556:	bf00      	nop
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	0800a594 	.word	0x0800a594
 8003564:	0800b430 	.word	0x0800b430
 8003568:	0800a488 	.word	0x0800a488
 800356c:	0800a5ac 	.word	0x0800a5ac
 8003570:	0800a5dc 	.word	0x0800a5dc
 8003574:	0800a62c 	.word	0x0800a62c
 8003578:	0800a558 	.word	0x0800a558

0800357c <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8003584:	687b      	ldr	r3, [r7, #4]
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	460a      	mov	r2, r1
 800359e:	80fb      	strh	r3, [r7, #6]
 80035a0:	4613      	mov	r3, r2
 80035a2:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	b299      	uxth	r1, r3
 80035b0:	797b      	ldrb	r3, [r7, #5]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	404b      	eors	r3, r1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4905      	ldr	r1, [pc, #20]	; (80035d0 <crcAddByte+0x3c>)
 80035bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80035c0:	4053      	eors	r3, r2
 80035c2:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	0800b080 	.word	0x0800b080

080035d4 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d108      	bne.n	80035fa <crcAdd+0x26>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <crcAdd+0x26>
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <crcAdd+0x64>)
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <crcAdd+0x68>)
 80035f2:	2189      	movs	r1, #137	; 0x89
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <crcAdd+0x6c>)
 80035f6:	f003 fead 	bl	8007354 <__assert_func>
    TransferCRC    out = crc;
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e00e      	b.n	8003626 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	8bfb      	ldrh	r3, [r7, #30]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ffbf 	bl	8003594 <crcAddByte>
 8003616:	4603      	mov	r3, r0
 8003618:	83fb      	strh	r3, [r7, #30]
        ++p;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3301      	adds	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3301      	adds	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d3ec      	bcc.n	8003608 <crcAdd+0x34>
    }
    return out;
 800362e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	0800a63c 	.word	0x0800a63c
 800363c:	0800b2fc 	.word	0x0800b2fc
 8003640:	0800a664 	.word	0x0800a664

08003644 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	460a      	mov	r2, r1
 800364e:	80fb      	strh	r3, [r7, #6]
 8003650:	4613      	mov	r3, r2
 8003652:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8003654:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da05      	bge.n	8003668 <txMakeMessageSessionSpecifier+0x24>
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <txMakeMessageSessionSpecifier+0x54>)
 800365e:	4a0f      	ldr	r2, [pc, #60]	; (800369c <txMakeMessageSessionSpecifier+0x58>)
 8003660:	21ab      	movs	r1, #171	; 0xab
 8003662:	480f      	ldr	r0, [pc, #60]	; (80036a0 <txMakeMessageSessionSpecifier+0x5c>)
 8003664:	f003 fe76 	bl	8007354 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d305      	bcc.n	800367c <txMakeMessageSessionSpecifier+0x38>
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <txMakeMessageSessionSpecifier+0x60>)
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <txMakeMessageSessionSpecifier+0x58>)
 8003674:	21ac      	movs	r1, #172	; 0xac
 8003676:	480a      	ldr	r0, [pc, #40]	; (80036a0 <txMakeMessageSessionSpecifier+0x5c>)
 8003678:	f003 fe6c 	bl	8007354 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8003682:	b29b      	uxth	r3, r3
 8003684:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8003686:	797a      	ldrb	r2, [r7, #5]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4313      	orrs	r3, r2
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	0800a694 	.word	0x0800a694
 800369c:	0800b304 	.word	0x0800b304
 80036a0:	0800a664 	.word	0x0800a664
 80036a4:	0800a6a8 	.word	0x0800a6a8

080036a8 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4604      	mov	r4, r0
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4623      	mov	r3, r4
 80036b8:	80fb      	strh	r3, [r7, #6]
 80036ba:	4603      	mov	r3, r0
 80036bc:	717b      	strb	r3, [r7, #5]
 80036be:	460b      	mov	r3, r1
 80036c0:	713b      	strb	r3, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80036c6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da05      	bge.n	80036da <txMakeServiceSessionSpecifier+0x32>
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <txMakeServiceSessionSpecifier+0x84>)
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <txMakeServiceSessionSpecifier+0x88>)
 80036d2:	21b6      	movs	r1, #182	; 0xb6
 80036d4:	4817      	ldr	r0, [pc, #92]	; (8003734 <txMakeServiceSessionSpecifier+0x8c>)
 80036d6:	f003 fe3d 	bl	8007354 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 80036da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da05      	bge.n	80036ee <txMakeServiceSessionSpecifier+0x46>
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <txMakeServiceSessionSpecifier+0x90>)
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <txMakeServiceSessionSpecifier+0x88>)
 80036e6:	21b7      	movs	r1, #183	; 0xb7
 80036e8:	4812      	ldr	r0, [pc, #72]	; (8003734 <txMakeServiceSessionSpecifier+0x8c>)
 80036ea:	f003 fe33 	bl	8007354 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d305      	bcc.n	8003702 <txMakeServiceSessionSpecifier+0x5a>
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <txMakeServiceSessionSpecifier+0x94>)
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <txMakeServiceSessionSpecifier+0x88>)
 80036fa:	21b8      	movs	r1, #184	; 0xb8
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <txMakeServiceSessionSpecifier+0x8c>)
 80036fe:	f003 fe29 	bl	8007354 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8003702:	793a      	ldrb	r2, [r7, #4]
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	01db      	lsls	r3, r3, #7
 8003708:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800370e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003710:	797a      	ldrb	r2, [r7, #5]
 8003712:	2a00      	cmp	r2, #0
 8003714:	d002      	beq.n	800371c <txMakeServiceSessionSpecifier+0x74>
 8003716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800371a:	e000      	b.n	800371e <txMakeServiceSessionSpecifier+0x76>
 800371c:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800371e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	0800a694 	.word	0x0800a694
 8003730:	0800b324 	.word	0x0800b324
 8003734:	0800a664 	.word	0x0800a664
 8003738:	0800a6bc 	.word	0x0800a6bc
 800373c:	0800a6d0 	.word	0x0800a6d0

08003740 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b07      	cmp	r3, #7
 8003754:	d802      	bhi.n	800375c <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8003756:	2308      	movs	r3, #8
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e014      	b.n	8003786 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d808      	bhi.n	8003776 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <adjustPresentationLayerMTU+0x58>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <adjustPresentationLayerMTU+0x5c>)
 8003770:	5c9b      	ldrb	r3, [r3, r2]
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e007      	b.n	8003786 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <adjustPresentationLayerMTU+0x58>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <adjustPresentationLayerMTU+0x5c>)
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b01      	subs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	0800b290 	.word	0x0800b290
 800379c:	0800b280 	.word	0x0800b280

080037a0 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <txMakeCANID+0x20>
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <txMakeCANID+0x198>)
 80037b6:	4a61      	ldr	r2, [pc, #388]	; (800393c <txMakeCANID+0x19c>)
 80037b8:	21d8      	movs	r1, #216	; 0xd8
 80037ba:	4861      	ldr	r0, [pc, #388]	; (8003940 <txMakeCANID+0x1a0>)
 80037bc:	f003 fdca 	bl	8007354 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <txMakeCANID+0x32>
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <txMakeCANID+0x1a4>)
 80037c8:	4a5c      	ldr	r2, [pc, #368]	; (800393c <txMakeCANID+0x19c>)
 80037ca:	21d9      	movs	r1, #217	; 0xd9
 80037cc:	485c      	ldr	r0, [pc, #368]	; (8003940 <txMakeCANID+0x1a0>)
 80037ce:	f003 fdc1 	bl	8007354 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80037d2:	f06f 0301 	mvn.w	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <txMakeCANID+0xf0>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d153      	bne.n	8003890 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f0:	d24e      	bcs.n	8003890 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db11      	blt.n	800381e <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	885b      	ldrh	r3, [r3, #2]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff1e 	bl	8003644 <txMakeMessageSessionSpecifier>
 8003808:	4603      	mov	r3, r0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	da75      	bge.n	80038fe <txMakeCANID+0x15e>
 8003812:	4b4d      	ldr	r3, [pc, #308]	; (8003948 <txMakeCANID+0x1a8>)
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <txMakeCANID+0x19c>)
 8003816:	21e1      	movs	r1, #225	; 0xe1
 8003818:	4849      	ldr	r0, [pc, #292]	; (8003940 <txMakeCANID+0x1a0>)
 800381a:	f003 fd9b 	bl	8007354 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	429a      	cmp	r2, r3
 8003824:	d830      	bhi.n	8003888 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <txMakeCANID+0x9e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <txMakeCANID+0x9e>
 8003832:	4b46      	ldr	r3, [pc, #280]	; (800394c <txMakeCANID+0x1ac>)
 8003834:	4a41      	ldr	r2, [pc, #260]	; (800393c <txMakeCANID+0x19c>)
 8003836:	21e5      	movs	r1, #229	; 0xe5
 8003838:	4841      	ldr	r0, [pc, #260]	; (8003940 <txMakeCANID+0x1a0>)
 800383a:	f003 fd8b 	bl	8007354 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003846:	f7ff fec5 	bl	80035d4 <crcAdd>
 800384a:	4603      	mov	r3, r0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	885b      	ldrh	r3, [r3, #2]
 800385a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff feef 	bl	8003644 <txMakeMessageSessionSpecifier>
 8003866:	4603      	mov	r3, r0
 8003868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386c:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003874:	d305      	bcc.n	8003882 <txMakeCANID+0xe2>
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <txMakeCANID+0x1b0>)
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <txMakeCANID+0x19c>)
 800387a:	21e8      	movs	r1, #232	; 0xe8
 800387c:	4830      	ldr	r0, [pc, #192]	; (8003940 <txMakeCANID+0x1a0>)
 800387e:	f003 fd69 	bl	8007354 <__assert_func>
            out = (int32_t) spec;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003886:	e03a      	b.n	80038fe <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8003888:	f06f 0301 	mvn.w	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800388e:	e036      	b.n	80038fe <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <txMakeCANID+0x100>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d12a      	bne.n	80038f6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	791b      	ldrb	r3, [r3, #4]
 80038a4:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db25      	blt.n	80038f6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	885b      	ldrh	r3, [r3, #2]
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b2:	d220      	bcs.n	80038f6 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80038b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db18      	blt.n	80038ee <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	f7ff fee8 	bl	80036a8 <txMakeServiceSessionSpecifier>
 80038d8:	4603      	mov	r3, r0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da0f      	bge.n	8003902 <txMakeCANID+0x162>
 80038e2:	4b19      	ldr	r3, [pc, #100]	; (8003948 <txMakeCANID+0x1a8>)
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <txMakeCANID+0x19c>)
 80038e6:	21f9      	movs	r1, #249	; 0xf9
 80038e8:	4815      	ldr	r0, [pc, #84]	; (8003940 <txMakeCANID+0x1a0>)
 80038ea:	f003 fd33 	bl	8007354 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 80038ee:	f06f 0301 	mvn.w	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80038f4:	e005      	b.n	8003902 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 80038f6:	f06f 0301 	mvn.w	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	e002      	b.n	8003904 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003902:	bf00      	nop
    }

    if (out >= 0)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	db10      	blt.n	800392c <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b07      	cmp	r3, #7
 8003914:	d807      	bhi.n	8003926 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	069a      	lsls	r2, r3, #26
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e002      	b.n	800392c <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8003926:	f06f 0301 	mvn.w	r3, #1
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0800a6e4 	.word	0x0800a6e4
 800393c:	0800b2f0 	.word	0x0800b2f0
 8003940:	0800a664 	.word	0x0800a664
 8003944:	0800a6f8 	.word	0x0800a6f8
 8003948:	0800a714 	.word	0x0800a714
 800394c:	0800a720 	.word	0x0800a720
 8003950:	0800a754 	.word	0x0800a754

08003954 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4623      	mov	r3, r4
 8003964:	71fb      	strb	r3, [r7, #7]
 8003966:	4603      	mov	r3, r0
 8003968:	71bb      	strb	r3, [r7, #6]
 800396a:	460b      	mov	r3, r1
 800396c:	717b      	strb	r3, [r7, #5]
 800396e:	4613      	mov	r3, r2
 8003970:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <txMakeTailByte+0x38>
 8003978:	797b      	ldrb	r3, [r7, #5]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d006      	beq.n	800398c <txMakeTailByte+0x38>
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <txMakeTailByte+0x78>)
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <txMakeTailByte+0x7c>)
 8003982:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003986:	4813      	ldr	r0, [pc, #76]	; (80039d4 <txMakeTailByte+0x80>)
 8003988:	f003 fce4 	bl	8007354 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <txMakeTailByte+0x42>
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	e000      	b.n	8003998 <txMakeTailByte+0x44>
 8003996:	2200      	movs	r2, #0
 8003998:	79bb      	ldrb	r3, [r7, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <txMakeTailByte+0x4e>
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	e000      	b.n	80039a4 <txMakeTailByte+0x50>
 80039a2:	2300      	movs	r3, #0
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 80039a8:	797a      	ldrb	r2, [r7, #5]
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	d001      	beq.n	80039b2 <txMakeTailByte+0x5e>
 80039ae:	2220      	movs	r2, #32
 80039b0:	e000      	b.n	80039b4 <txMakeTailByte+0x60>
 80039b2:	2200      	movs	r2, #0
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 80039b8:	793b      	ldrb	r3, [r7, #4]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80039c0:	4313      	orrs	r3, r2
 80039c2:	b2db      	uxtb	r3, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	0800a770 	.word	0x0800a770
 80039d0:	0800b398 	.word	0x0800b398
 80039d4:	0800a664 	.word	0x0800a664

080039d8 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d906      	bls.n	80039f4 <txRoundFramePayloadSizeUp+0x1c>
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <txRoundFramePayloadSizeUp+0x4c>)
 80039e8:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <txRoundFramePayloadSizeUp+0x50>)
 80039ea:	f240 1123 	movw	r1, #291	; 0x123
 80039ee:	480f      	ldr	r0, [pc, #60]	; (8003a2c <txRoundFramePayloadSizeUp+0x54>)
 80039f0:	f003 fcb0 	bl	8007354 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 80039f4:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <txRoundFramePayloadSizeUp+0x58>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d906      	bls.n	8003a12 <txRoundFramePayloadSizeUp+0x3a>
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <txRoundFramePayloadSizeUp+0x5c>)
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <txRoundFramePayloadSizeUp+0x50>)
 8003a08:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003a0c:	4807      	ldr	r0, [pc, #28]	; (8003a2c <txRoundFramePayloadSizeUp+0x54>)
 8003a0e:	f003 fca1 	bl	8007354 <__assert_func>
    return CanardCANDLCToLength[y];
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <txRoundFramePayloadSizeUp+0x60>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	0800a798 	.word	0x0800a798
 8003a28:	0800b368 	.word	0x0800b368
 8003a2c:	0800a664 	.word	0x0800a664
 8003a30:	0800b290 	.word	0x0800b290
 8003a34:	0800a7e0 	.word	0x0800a7e0
 8003a38:	0800b280 	.word	0x0800b280

08003a3c <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <txAllocateQueueItem+0x22>
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <txAllocateQueueItem+0x94>)
 8003a52:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <txAllocateQueueItem+0x98>)
 8003a54:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003a58:	481f      	ldr	r0, [pc, #124]	; (8003ad8 <txAllocateQueueItem+0x9c>)
 8003a5a:	f003 fc7b 	bl	8007354 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <txAllocateQueueItem+0x36>
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <txAllocateQueueItem+0xa0>)
 8003a66:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <txAllocateQueueItem+0x98>)
 8003a68:	f240 1131 	movw	r1, #305	; 0x131
 8003a6c:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <txAllocateQueueItem+0x9c>)
 8003a6e:	f003 fc71 	bl	8007354 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	3230      	adds	r2, #48	; 0x30
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	4798      	blx	r3
 8003a80:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01e      	beq.n	8003ac6 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aac:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	621a      	str	r2, [r3, #32]
    }
    return out;
 8003ac6:	697b      	ldr	r3, [r7, #20]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	0800a828 	.word	0x0800a828
 8003ad4:	0800b384 	.word	0x0800b384
 8003ad8:	0800a664 	.word	0x0800a664
 8003adc:	0800a83c 	.word	0x0800a83c

08003ae0 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <txAVLPredicate+0x1e>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <txAVLPredicate+0x2c>
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <txAVLPredicate+0x48>)
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <txAVLPredicate+0x4c>)
 8003b02:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003b06:	480a      	ldr	r0, [pc, #40]	; (8003b30 <txAVLPredicate+0x50>)
 8003b08:	f003 fc24 	bl	8007354 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d301      	bcc.n	8003b1c <txAVLPredicate+0x3c>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e001      	b.n	8003b20 <txAVLPredicate+0x40>
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0800a850 	.word	0x0800a850
 8003b2c:	0800b358 	.word	0x0800b358
 8003b30:	0800a664 	.word	0x0800a664

08003b34 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b08d      	sub	sp, #52	; 0x34
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <txPushSingleFrame+0x22>
 8003b48:	4b5c      	ldr	r3, [pc, #368]	; (8003cbc <txPushSingleFrame+0x188>)
 8003b4a:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003b4c:	f240 1159 	movw	r1, #345	; 0x159
 8003b50:	485c      	ldr	r0, [pc, #368]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003b52:	f003 fbff 	bl	8007354 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8003b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <txPushSingleFrame+0x3c>
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <txPushSingleFrame+0x3c>
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <txPushSingleFrame+0x194>)
 8003b64:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003b66:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003b6a:	4856      	ldr	r0, [pc, #344]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003b6c:	f003 fbf2 	bl	8007354 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8003b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b72:	3301      	adds	r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff2f 	bl	80039d8 <txRoundFramePayloadSizeUp>
 8003b7a:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d806      	bhi.n	8003b92 <txPushSingleFrame+0x5e>
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <txPushSingleFrame+0x198>)
 8003b86:	4a4e      	ldr	r2, [pc, #312]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003b88:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003b8c:	484d      	ldr	r0, [pc, #308]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003b8e:	f003 fbe1 	bl	8007354 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8003b92:	6a3a      	ldr	r2, [r7, #32]
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d006      	beq.n	8003bb8 <txPushSingleFrame+0x84>
 8003baa:	4b49      	ldr	r3, [pc, #292]	; (8003cd0 <txPushSingleFrame+0x19c>)
 8003bac:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003bae:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003bb2:	4844      	ldr	r0, [pc, #272]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003bb4:	f003 fbce 	bl	8007354 <__assert_func>
    int32_t       out = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d209      	bcs.n	8003bdc <txPushSingleFrame+0xa8>
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd2:	68b8      	ldr	r0, [r7, #8]
 8003bd4:	f7ff ff32 	bl	8003a3c <txAllocateQueueItem>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e000      	b.n	8003bde <txPushSingleFrame+0xaa>
 8003bdc:	2300      	movs	r3, #0
    TxItem* const tqi =
 8003bde:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d054      	beq.n	8003c90 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8003be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <txPushSingleFrame+0xcc>
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <txPushSingleFrame+0x1a0>)
 8003bf4:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003bf6:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8003bfa:	4832      	ldr	r0, [pc, #200]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003bfc:	f003 fbaa 	bl	8007354 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3330      	adds	r3, #48	; 0x30
 8003c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 faa4 	bl	8008156 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c10:	3330      	adds	r3, #48	; 0x30
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fa0b 	bl	8008036 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	1e5c      	subs	r4, r3, #1
 8003c24:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7ff fe91 	bl	8003954 <txMakeTailByte>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4423      	add	r3, r4
 8003c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f103 000c 	add.w	r0, r3, #12
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <txPushSingleFrame+0x1a4>)
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <txPushSingleFrame+0x1a8>)
 8003c4a:	f7ff fae7 	bl	800321c <cavlSearch>
 8003c4e:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d006      	beq.n	8003c66 <txPushSingleFrame+0x132>
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <txPushSingleFrame+0x1ac>)
 8003c5a:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003c5c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003c60:	4818      	ldr	r0, [pc, #96]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003c62:	f003 fb77 	bl	8007354 <__assert_func>
        que->size++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d906      	bls.n	8003c8a <txPushSingleFrame+0x156>
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <txPushSingleFrame+0x1b0>)
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003c80:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003c84:	480f      	ldr	r0, [pc, #60]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003c86:	f003 fb65 	bl	8007354 <__assert_func>
        out = 1;  // One frame enqueued.
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e002      	b.n	8003c96 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8003c90:	f06f 0302 	mvn.w	r3, #2
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db09      	blt.n	8003cb0 <txPushSingleFrame+0x17c>
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d006      	beq.n	8003cb0 <txPushSingleFrame+0x17c>
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <txPushSingleFrame+0x1b4>)
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <txPushSingleFrame+0x18c>)
 8003ca6:	f240 117b 	movw	r1, #379	; 0x17b
 8003caa:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <txPushSingleFrame+0x190>)
 8003cac:	f003 fb52 	bl	8007354 <__assert_func>
    return out;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	372c      	adds	r7, #44	; 0x2c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	0800a828 	.word	0x0800a828
 8003cc0:	0800b344 	.word	0x0800b344
 8003cc4:	0800a664 	.word	0x0800a664
 8003cc8:	0800a884 	.word	0x0800a884
 8003ccc:	0800a8b4 	.word	0x0800a8b4
 8003cd0:	0800a8d8 	.word	0x0800a8d8
 8003cd4:	0800a914 	.word	0x0800a914
 8003cd8:	0800357d 	.word	0x0800357d
 8003cdc:	08003ae1 	.word	0x08003ae1
 8003ce0:	0800a92c 	.word	0x0800a92c
 8003ce4:	0800a944 	.word	0x0800a944
 8003ce8:	0800a960 	.word	0x0800a960

08003cec <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b093      	sub	sp, #76	; 0x4c
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <txGenerateMultiFrameChain+0x20>
 8003cfe:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <txGenerateMultiFrameChain+0x260>)
 8003d00:	4a93      	ldr	r2, [pc, #588]	; (8003f50 <txGenerateMultiFrameChain+0x264>)
 8003d02:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003d06:	4893      	ldr	r0, [pc, #588]	; (8003f54 <txGenerateMultiFrameChain+0x268>)
 8003d08:	f003 fb24 	bl	8007354 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <txGenerateMultiFrameChain+0x34>
 8003d12:	4b91      	ldr	r3, [pc, #580]	; (8003f58 <txGenerateMultiFrameChain+0x26c>)
 8003d14:	4a8e      	ldr	r2, [pc, #568]	; (8003f50 <txGenerateMultiFrameChain+0x264>)
 8003d16:	f240 1189 	movw	r1, #393	; 0x189
 8003d1a:	488e      	ldr	r0, [pc, #568]	; (8003f54 <txGenerateMultiFrameChain+0x268>)
 8003d1c:	f003 fb1a 	bl	8007354 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8003d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d806      	bhi.n	8003d36 <txGenerateMultiFrameChain+0x4a>
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <txGenerateMultiFrameChain+0x270>)
 8003d2a:	4a89      	ldr	r2, [pc, #548]	; (8003f50 <txGenerateMultiFrameChain+0x264>)
 8003d2c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8003d30:	4888      	ldr	r0, [pc, #544]	; (8003f54 <txGenerateMultiFrameChain+0x268>)
 8003d32:	f003 fb0f 	bl	8007354 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8003d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <txGenerateMultiFrameChain+0x5e>
 8003d3c:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <txGenerateMultiFrameChain+0x274>)
 8003d3e:	4a84      	ldr	r2, [pc, #528]	; (8003f50 <txGenerateMultiFrameChain+0x264>)
 8003d40:	f240 118b 	movw	r1, #395	; 0x18b
 8003d44:	4883      	ldr	r0, [pc, #524]	; (8003f54 <txGenerateMultiFrameChain+0x268>)
 8003d46:	f003 fb05 	bl	8007354 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	3302      	adds	r3, #2
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8003d60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d68:	f7ff fc34 	bl	80035d4 <crcAdd>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8003d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 8003d7a:	e0d4      	b.n	8003f26 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d908      	bls.n	8003da0 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8003d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe1e 	bl	80039d8 <txRoundFramePayloadSizeUp>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	e001      	b.n	8003da4 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7ff fe43 	bl	8003a3c <txAllocateQueueItem>
 8003db6:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e002      	b.n	8003dca <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80ae 	beq.w	8003f32 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 8003de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d21c      	bcs.n	8003e22 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8003de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 8003df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d901      	bls.n	8003dfc <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3330      	adds	r3, #48	; 0x30
 8003e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 f9a6 	bl	8008156 <memcpy>
            frame_offset = frame_offset + move_size;
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	4413      	add	r3, r2
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 8003e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	4413      	add	r3, r2
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	4413      	add	r3, r2
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8003e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d343      	bcc.n	8003eb2 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8003e2a:	e00f      	b.n	8003e4c <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	4413      	add	r3, r2
 8003e32:	3330      	adds	r3, #48	; 0x30
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8003e3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fba6 	bl	8003594 <crcAddByte>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	3302      	adds	r3, #2
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d8ea      	bhi.n	8003e2c <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8003e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d213      	bcs.n	8003e86 <txGenerateMultiFrameChain+0x19a>
 8003e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d10f      	bne.n	8003e86 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8003e66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	b2d9      	uxtb	r1, r3
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	4413      	add	r3, r2
 8003e74:	3330      	adds	r3, #48	; 0x30
 8003e76:	460a      	mov	r2, r1
 8003e78:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	3301      	adds	r3, #1
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8003e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d211      	bcs.n	8003eb2 <txGenerateMultiFrameChain+0x1c6>
 8003e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d90d      	bls.n	8003eb2 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e9a:	b2d9      	uxtb	r1, r3
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3330      	adds	r3, #48	; 0x30
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	3301      	adds	r3, #1
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d006      	beq.n	8003ecc <txGenerateMultiFrameChain+0x1e0>
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <txGenerateMultiFrameChain+0x278>)
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <txGenerateMultiFrameChain+0x264>)
 8003ec2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003ec6:	4823      	ldr	r0, [pc, #140]	; (8003f54 <txGenerateMultiFrameChain+0x268>)
 8003ec8:	f003 fa44 	bl	8007354 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2d8      	uxtb	r0, r3
 8003eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	bf2c      	ite	cs
 8003ee2:	2301      	movcs	r3, #1
 8003ee4:	2300      	movcc	r3, #0
 8003ee6:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8003ee8:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8003eea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003eee:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003ef2:	f7ff fd2f 	bl	8003954 <txMakeTailByte>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	4423      	add	r3, r4
 8003efe:	3330      	adds	r3, #48	; 0x30
 8003f00:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8003f02:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003f1a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 8003f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	f4ff af26 	bcc.w	8003d7c <txGenerateMultiFrameChain+0x90>
 8003f30:	e000      	b.n	8003f34 <txGenerateMultiFrameChain+0x248>
            break;
 8003f32:	bf00      	nop
    }
    return out;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	461c      	mov	r4, r3
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	3744      	adds	r7, #68	; 0x44
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd90      	pop	{r4, r7, pc}
 8003f4c:	0800a828 	.word	0x0800a828
 8003f50:	0800b414 	.word	0x0800b414
 8003f54:	0800a664 	.word	0x0800a664
 8003f58:	0800a978 	.word	0x0800a978
 8003f5c:	0800a994 	.word	0x0800a994
 8003f60:	0800a914 	.word	0x0800a914
 8003f64:	0800a9bc 	.word	0x0800a9bc

08003f68 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b094      	sub	sp, #80	; 0x50
 8003f6c:	af06      	add	r7, sp, #24
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <txPushMultiFrame+0x18>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <txPushMultiFrame+0x26>
 8003f80:	4b65      	ldr	r3, [pc, #404]	; (8004118 <txPushMultiFrame+0x1b0>)
 8003f82:	4a66      	ldr	r2, [pc, #408]	; (800411c <txPushMultiFrame+0x1b4>)
 8003f84:	f240 11ed 	movw	r1, #493	; 0x1ed
 8003f88:	4865      	ldr	r0, [pc, #404]	; (8004120 <txPushMultiFrame+0x1b8>)
 8003f8a:	f003 f9e3 	bl	8007354 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <txPushMultiFrame+0x3a>
 8003f94:	4b63      	ldr	r3, [pc, #396]	; (8004124 <txPushMultiFrame+0x1bc>)
 8003f96:	4a61      	ldr	r2, [pc, #388]	; (800411c <txPushMultiFrame+0x1b4>)
 8003f98:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8003f9c:	4860      	ldr	r0, [pc, #384]	; (8004120 <txPushMultiFrame+0x1b8>)
 8003f9e:	f003 f9d9 	bl	8007354 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8003fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d806      	bhi.n	8003fb8 <txPushMultiFrame+0x50>
 8003faa:	4b5f      	ldr	r3, [pc, #380]	; (8004128 <txPushMultiFrame+0x1c0>)
 8003fac:	4a5b      	ldr	r2, [pc, #364]	; (800411c <txPushMultiFrame+0x1b4>)
 8003fae:	f240 11ef 	movw	r1, #495	; 0x1ef
 8003fb2:	485b      	ldr	r0, [pc, #364]	; (8004120 <txPushMultiFrame+0x1b8>)
 8003fb4:	f003 f9ce 	bl	8007354 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8003fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d806      	bhi.n	8003fe6 <txPushMultiFrame+0x7e>
 8003fd8:	4b54      	ldr	r3, [pc, #336]	; (800412c <txPushMultiFrame+0x1c4>)
 8003fda:	4a50      	ldr	r2, [pc, #320]	; (800411c <txPushMultiFrame+0x1b4>)
 8003fdc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003fe0:	484f      	ldr	r0, [pc, #316]	; (8004120 <txPushMultiFrame+0x1b8>)
 8003fe2:	f003 f9b7 	bl	8007354 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d87b      	bhi.n	80040ee <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8003ff6:	f107 0010 	add.w	r0, r7, #16
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004006:	9303      	str	r3, [sp, #12]
 8004008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004010:	e9cd 2300 	strd	r2, r3, [sp]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	f7ff fe68 	bl	8003cec <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d051      	beq.n	80040c6 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f103 000c 	add.w	r0, r3, #12
 800402c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <txPushMultiFrame+0x1c8>)
 8004030:	4a40      	ldr	r2, [pc, #256]	; (8004134 <txPushMultiFrame+0x1cc>)
 8004032:	f7ff f8f3 	bl	800321c <cavlSearch>
 8004036:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d006      	beq.n	800404e <txPushMultiFrame+0xe6>
 8004040:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <txPushMultiFrame+0x1d0>)
 8004042:	4a36      	ldr	r2, [pc, #216]	; (800411c <txPushMultiFrame+0x1b4>)
 8004044:	f240 2106 	movw	r1, #518	; 0x206
 8004048:	4835      	ldr	r0, [pc, #212]	; (8004120 <txPushMultiFrame+0x1b8>)
 800404a:	f003 f983 	bl	8007354 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <txPushMultiFrame+0xfc>
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <txPushMultiFrame+0x1d4>)
 8004058:	4a30      	ldr	r2, [pc, #192]	; (800411c <txPushMultiFrame+0x1b4>)
 800405a:	f240 2107 	movw	r1, #519	; 0x207
 800405e:	4830      	ldr	r0, [pc, #192]	; (8004120 <txPushMultiFrame+0x1b8>)
 8004060:	f003 f978 	bl	8007354 <__assert_func>
                next = next->next_in_transfer;
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1da      	bne.n	8004026 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	429a      	cmp	r2, r3
 8004076:	d006      	beq.n	8004086 <txPushMultiFrame+0x11e>
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <txPushMultiFrame+0x1d8>)
 800407a:	4a28      	ldr	r2, [pc, #160]	; (800411c <txPushMultiFrame+0x1b4>)
 800407c:	f240 210a 	movw	r1, #522	; 0x20a
 8004080:	4827      	ldr	r0, [pc, #156]	; (8004120 <txPushMultiFrame+0x1b8>)
 8004082:	f003 f967 	bl	8007354 <__assert_func>
            que->size += sq.size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	441a      	add	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d906      	bls.n	80040ac <txPushMultiFrame+0x144>
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <txPushMultiFrame+0x1dc>)
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <txPushMultiFrame+0x1b4>)
 80040a2:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80040a6:	481e      	ldr	r0, [pc, #120]	; (8004120 <txPushMultiFrame+0x1b8>)
 80040a8:	f003 f954 	bl	8007354 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da06      	bge.n	80040c0 <txPushMultiFrame+0x158>
 80040b2:	4b25      	ldr	r3, [pc, #148]	; (8004148 <txPushMultiFrame+0x1e0>)
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <txPushMultiFrame+0x1b4>)
 80040b6:	f240 210d 	movw	r1, #525	; 0x20d
 80040ba:	4819      	ldr	r0, [pc, #100]	; (8004120 <txPushMultiFrame+0x1b8>)
 80040bc:	f003 f94a 	bl	8007354 <__assert_func>
            out = (int32_t) sq.size;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
 80040c4:	e016      	b.n	80040f4 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80040c6:	f06f 0302 	mvn.w	r3, #2
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 80040d0:	e009      	b.n	80040e6 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	4798      	blx	r3
                head = next;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f2      	bne.n	80040d2 <txPushMultiFrame+0x16a>
 80040ec:	e002      	b.n	80040f4 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80040ee:	f06f 0302 	mvn.w	r3, #2
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db09      	blt.n	800410e <txPushMultiFrame+0x1a6>
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	dc06      	bgt.n	800410e <txPushMultiFrame+0x1a6>
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <txPushMultiFrame+0x1e4>)
 8004102:	4a06      	ldr	r2, [pc, #24]	; (800411c <txPushMultiFrame+0x1b4>)
 8004104:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <txPushMultiFrame+0x1b8>)
 800410a:	f003 f923 	bl	8007354 <__assert_func>
    return out;
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004110:	4618      	mov	r0, r3
 8004112:	3738      	adds	r7, #56	; 0x38
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	0800a9f8 	.word	0x0800a9f8
 800411c:	0800b400 	.word	0x0800b400
 8004120:	0800a664 	.word	0x0800a664
 8004124:	0800a978 	.word	0x0800a978
 8004128:	0800a994 	.word	0x0800a994
 800412c:	0800aa28 	.word	0x0800aa28
 8004130:	0800357d 	.word	0x0800357d
 8004134:	08003ae1 	.word	0x08003ae1
 8004138:	0800aa38 	.word	0x0800aa38
 800413c:	0800aa4c 	.word	0x0800aa4c
 8004140:	0800aa68 	.word	0x0800aa68
 8004144:	0800a944 	.word	0x0800a944
 8004148:	0800aa80 	.word	0x0800aa80
 800414c:	0800aaa4 	.word	0x0800aaa4

08004150 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <rxTryParseFrame+0x22>
 8004164:	4b96      	ldr	r3, [pc, #600]	; (80043c0 <rxTryParseFrame+0x270>)
 8004166:	4a97      	ldr	r2, [pc, #604]	; (80043c4 <rxTryParseFrame+0x274>)
 8004168:	f240 214f 	movw	r1, #591	; 0x24f
 800416c:	4896      	ldr	r0, [pc, #600]	; (80043c8 <rxTryParseFrame+0x278>)
 800416e:	f003 f8f1 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417a:	d306      	bcc.n	800418a <rxTryParseFrame+0x3a>
 800417c:	4b93      	ldr	r3, [pc, #588]	; (80043cc <rxTryParseFrame+0x27c>)
 800417e:	4a91      	ldr	r2, [pc, #580]	; (80043c4 <rxTryParseFrame+0x274>)
 8004180:	f44f 7114 	mov.w	r1, #592	; 0x250
 8004184:	4890      	ldr	r0, [pc, #576]	; (80043c8 <rxTryParseFrame+0x278>)
 8004186:	f003 f8e5 	bl	8007354 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <rxTryParseFrame+0x4e>
 8004190:	4b8f      	ldr	r3, [pc, #572]	; (80043d0 <rxTryParseFrame+0x280>)
 8004192:	4a8c      	ldr	r2, [pc, #560]	; (80043c4 <rxTryParseFrame+0x274>)
 8004194:	f240 2151 	movw	r1, #593	; 0x251
 8004198:	488b      	ldr	r0, [pc, #556]	; (80043c8 <rxTryParseFrame+0x278>)
 800419a:	f003 f8db 	bl	8007354 <__assert_func>
    bool valid = false;
 800419e:	2300      	movs	r3, #0
 80041a0:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8105 	beq.w	80043b6 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <rxTryParseFrame+0x72>
 80041b4:	4b87      	ldr	r3, [pc, #540]	; (80043d4 <rxTryParseFrame+0x284>)
 80041b6:	4a83      	ldr	r2, [pc, #524]	; (80043c4 <rxTryParseFrame+0x274>)
 80041b8:	f240 2155 	movw	r1, #597	; 0x255
 80041bc:	4882      	ldr	r0, [pc, #520]	; (80043c8 <rxTryParseFrame+0x278>)
 80041be:	f003 f8c9 	bl	8007354 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c8:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d128      	bne.n	800424c <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800420a:	b29a      	uxth	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	22ff      	movs	r2, #255	; 0xff
 800421e:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	22ff      	movs	r2, #255	; 0xff
 8004224:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <rxTryParseFrame+0xee>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <rxTryParseFrame+0xee>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <rxTryParseFrame+0xf0>
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	7ffb      	ldrb	r3, [r7, #31]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e02c      	b.n	80042a6 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <rxTryParseFrame+0x10a>
 8004256:	2202      	movs	r2, #2
 8004258:	e000      	b.n	800425c <rxTryParseFrame+0x10c>
 800425a:	2201      	movs	r2, #1
            out->transfer_kind =
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	0b9b      	lsrs	r3, r3, #14
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	b29a      	uxth	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	09db      	lsrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427a:	b2da      	uxtb	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <rxTryParseFrame+0x14a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	7b1a      	ldrb	r2, [r3, #12]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	7b5b      	ldrb	r3, [r3, #13]
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <rxTryParseFrame+0x14a>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <rxTryParseFrame+0x14c>
 800429a:	2300      	movs	r3, #0
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4413      	add	r3, r2
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 80042d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	09db      	lsrs	r3, r3, #7
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2da      	uxtb	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8004308:	7ffb      	ldrb	r3, [r7, #31]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <rxTryParseFrame+0x1d8>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	7bdb      	ldrb	r3, [r3, #15]
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <rxTryParseFrame+0x1d4>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7c5b      	ldrb	r3, [r3, #17]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <rxTryParseFrame+0x1d8>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <rxTryParseFrame+0x1da>
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8004334:	7ffb      	ldrb	r3, [r7, #31]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	7c1b      	ldrb	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <rxTryParseFrame+0x202>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	7b1b      	ldrb	r3, [r3, #12]
 800434e:	2bff      	cmp	r3, #255	; 0xff
 8004350:	d001      	beq.n	8004356 <rxTryParseFrame+0x206>
        valid = valid &&
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <rxTryParseFrame+0x208>
 8004356:	2300      	movs	r3, #0
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <rxTryParseFrame+0x22c>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d803      	bhi.n	8004378 <rxTryParseFrame+0x228>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	7c1b      	ldrb	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <rxTryParseFrame+0x22c>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <rxTryParseFrame+0x22e>
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <rxTryParseFrame+0x25a>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <rxTryParseFrame+0x256>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7bdb      	ldrb	r3, [r3, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <rxTryParseFrame+0x25a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	7c1b      	ldrb	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <rxTryParseFrame+0x25a>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <rxTryParseFrame+0x25c>
 80043aa:	2300      	movs	r3, #0
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	7ffb      	ldrb	r3, [r7, #31]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	0800aabc 	.word	0x0800aabc
 80043c4:	0800b450 	.word	0x0800b450
 80043c8:	0800a664 	.word	0x0800a664
 80043cc:	0800aad4 	.word	0x0800aad4
 80043d0:	0800ab04 	.word	0x0800ab04
 80043d4:	0800ab18 	.word	0x0800ab18

080043d8 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <rxInitTransferMetadataFromFrame+0x1e>
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <rxInitTransferMetadataFromFrame+0x78>)
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <rxInitTransferMetadataFromFrame+0x7c>)
 80043ec:	f44f 7124 	mov.w	r1, #656	; 0x290
 80043f0:	4819      	ldr	r0, [pc, #100]	; (8004458 <rxInitTransferMetadataFromFrame+0x80>)
 80043f2:	f002 ffaf 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <rxInitTransferMetadataFromFrame+0x34>
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <rxInitTransferMetadataFromFrame+0x84>)
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <rxInitTransferMetadataFromFrame+0x7c>)
 8004402:	f240 2191 	movw	r1, #657	; 0x291
 8004406:	4814      	ldr	r0, [pc, #80]	; (8004458 <rxInitTransferMetadataFromFrame+0x80>)
 8004408:	f002 ffa4 	bl	8007354 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <rxInitTransferMetadataFromFrame+0x48>
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <rxInitTransferMetadataFromFrame+0x88>)
 8004414:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <rxInitTransferMetadataFromFrame+0x7c>)
 8004416:	f240 2192 	movw	r1, #658	; 0x292
 800441a:	480f      	ldr	r0, [pc, #60]	; (8004458 <rxInitTransferMetadataFromFrame+0x80>)
 800441c:	f002 ff9a 	bl	8007354 <__assert_func>
    out_transfer->priority       = frame->priority;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7a1a      	ldrb	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7a5a      	ldrb	r2, [r3, #9]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	895a      	ldrh	r2, [r3, #10]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7b1a      	ldrb	r2, [r3, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7b9a      	ldrb	r2, [r3, #14]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	715a      	strb	r2, [r3, #5]
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0800aabc 	.word	0x0800aabc
 8004454:	0800b4fc 	.word	0x0800b4fc
 8004458:	0800a664 	.word	0x0800a664
 800445c:	0800ab18 	.word	0x0800ab18
 8004460:	0800ab38 	.word	0x0800ab38

08004464 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	460a      	mov	r2, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b1f      	cmp	r3, #31
 8004478:	d906      	bls.n	8004488 <rxComputeTransferIDDifference+0x24>
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <rxComputeTransferIDDifference+0x6c>)
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <rxComputeTransferIDDifference+0x70>)
 800447e:	f240 219d 	movw	r1, #669	; 0x29d
 8004482:	4815      	ldr	r0, [pc, #84]	; (80044d8 <rxComputeTransferIDDifference+0x74>)
 8004484:	f002 ff66 	bl	8007354 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8004488:	79bb      	ldrb	r3, [r7, #6]
 800448a:	2b1f      	cmp	r3, #31
 800448c:	d906      	bls.n	800449c <rxComputeTransferIDDifference+0x38>
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <rxComputeTransferIDDifference+0x78>)
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <rxComputeTransferIDDifference+0x70>)
 8004492:	f240 219e 	movw	r1, #670	; 0x29e
 8004496:	4810      	ldr	r0, [pc, #64]	; (80044d8 <rxComputeTransferIDDifference+0x74>)
 8004498:	f002 ff5c 	bl	8007354 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	79bb      	ldrb	r3, [r7, #6]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 80044aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da07      	bge.n	80044c2 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 80044b2:	2320      	movs	r3, #32
 80044b4:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 80044b6:	7b7b      	ldrb	r3, [r7, #13]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	4413      	add	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	b2db      	uxtb	r3, r3
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	0800ab54 	.word	0x0800ab54
 80044d4:	0800b498 	.word	0x0800b498
 80044d8:	0800a664 	.word	0x0800a664
 80044dc:	0800ab6c 	.word	0x0800ab6c

080044e0 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <rxSessionWritePayload+0x22>
 80044f4:	4b67      	ldr	r3, [pc, #412]	; (8004694 <rxSessionWritePayload+0x1b4>)
 80044f6:	4a68      	ldr	r2, [pc, #416]	; (8004698 <rxSessionWritePayload+0x1b8>)
 80044f8:	f240 21ae 	movw	r1, #686	; 0x2ae
 80044fc:	4867      	ldr	r0, [pc, #412]	; (800469c <rxSessionWritePayload+0x1bc>)
 80044fe:	f002 ff29 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <rxSessionWritePayload+0x36>
 8004508:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <rxSessionWritePayload+0x1c0>)
 800450a:	4a63      	ldr	r2, [pc, #396]	; (8004698 <rxSessionWritePayload+0x1b8>)
 800450c:	f240 21af 	movw	r1, #687	; 0x2af
 8004510:	4862      	ldr	r0, [pc, #392]	; (800469c <rxSessionWritePayload+0x1bc>)
 8004512:	f002 ff1f 	bl	8007354 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <rxSessionWritePayload+0x50>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <rxSessionWritePayload+0x50>
 8004522:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <rxSessionWritePayload+0x1c4>)
 8004524:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <rxSessionWritePayload+0x1b8>)
 8004526:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800452a:	485c      	ldr	r0, [pc, #368]	; (800469c <rxSessionWritePayload+0x1bc>)
 800452c:	f002 ff12 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d206      	bcs.n	8004548 <rxSessionWritePayload+0x68>
 800453a:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <rxSessionWritePayload+0x1c8>)
 800453c:	4a56      	ldr	r2, [pc, #344]	; (8004698 <rxSessionWritePayload+0x1b8>)
 800453e:	f240 21b1 	movw	r1, #689	; 0x2b1
 8004542:	4856      	ldr	r0, [pc, #344]	; (800469c <rxSessionWritePayload+0x1bc>)
 8004544:	f002 ff06 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d906      	bls.n	8004562 <rxSessionWritePayload+0x82>
 8004554:	4b55      	ldr	r3, [pc, #340]	; (80046ac <rxSessionWritePayload+0x1cc>)
 8004556:	4a50      	ldr	r2, [pc, #320]	; (8004698 <rxSessionWritePayload+0x1b8>)
 8004558:	f240 21b2 	movw	r1, #690	; 0x2b2
 800455c:	484f      	ldr	r0, [pc, #316]	; (800469c <rxSessionWritePayload+0x1bc>)
 800455e:	f002 fef9 	bl	8007354 <__assert_func>

    rxs->total_payload_size += payload_size;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	441a      	add	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d115      	bne.n	80045a2 <rxSessionWritePayload+0xc2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d012      	beq.n	80045a2 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d006      	beq.n	8004592 <rxSessionWritePayload+0xb2>
 8004584:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <rxSessionWritePayload+0x1d0>)
 8004586:	4a44      	ldr	r2, [pc, #272]	; (8004698 <rxSessionWritePayload+0x1b8>)
 8004588:	f240 21b9 	movw	r1, #697	; 0x2b9
 800458c:	4843      	ldr	r0, [pc, #268]	; (800469c <rxSessionWritePayload+0x1bc>)
 800458e:	f002 fee1 	bl	8007354 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	4798      	blx	r3
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04e      	beq.n	800464c <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d229      	bcs.n	8004614 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d206      	bcs.n	80045d8 <rxSessionWritePayload+0xf8>
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <rxSessionWritePayload+0x1c8>)
 80045cc:	4a32      	ldr	r2, [pc, #200]	; (8004698 <rxSessionWritePayload+0x1b8>)
 80045ce:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80045d2:	4832      	ldr	r0, [pc, #200]	; (800469c <rxSessionWritePayload+0x1bc>)
 80045d4:	f002 febe 	bl	8007354 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d006      	beq.n	80045fe <rxSessionWritePayload+0x11e>
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <rxSessionWritePayload+0x1d4>)
 80045f2:	4a29      	ldr	r2, [pc, #164]	; (8004698 <rxSessionWritePayload+0x1b8>)
 80045f4:	f240 21c6 	movw	r1, #710	; 0x2c6
 80045f8:	4828      	ldr	r0, [pc, #160]	; (800469c <rxSessionWritePayload+0x1bc>)
 80045fa:	f002 feab 	bl	8007354 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d306      	bcc.n	8004614 <rxSessionWritePayload+0x134>
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <rxSessionWritePayload+0x1d8>)
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <rxSessionWritePayload+0x1b8>)
 800460a:	f240 21c7 	movw	r1, #711	; 0x2c7
 800460e:	4823      	ldr	r0, [pc, #140]	; (800469c <rxSessionWritePayload+0x1bc>)
 8004610:	f002 fea0 	bl	8007354 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4413      	add	r3, r2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	6a39      	ldr	r1, [r7, #32]
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fd97 	bl	8008156 <memcpy>
        rxs->payload_size += bytes_to_copy;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	441a      	add	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d219      	bcs.n	8004672 <rxSessionWritePayload+0x192>
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <rxSessionWritePayload+0x1c8>)
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <rxSessionWritePayload+0x1b8>)
 8004642:	f240 21d1 	movw	r1, #721	; 0x2d1
 8004646:	4815      	ldr	r0, [pc, #84]	; (800469c <rxSessionWritePayload+0x1bc>)
 8004648:	f002 fe84 	bl	8007354 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <rxSessionWritePayload+0x182>
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <rxSessionWritePayload+0x1d0>)
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <rxSessionWritePayload+0x1b8>)
 8004658:	f240 21d5 	movw	r1, #725	; 0x2d5
 800465c:	480f      	ldr	r0, [pc, #60]	; (800469c <rxSessionWritePayload+0x1bc>)
 800465e:	f002 fe79 	bl	8007354 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <rxSessionWritePayload+0x18e>
 8004668:	f06f 0302 	mvn.w	r3, #2
 800466c:	e000      	b.n	8004670 <rxSessionWritePayload+0x190>
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8004672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	dd06      	ble.n	8004688 <rxSessionWritePayload+0x1a8>
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <rxSessionWritePayload+0x1dc>)
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <rxSessionWritePayload+0x1b8>)
 800467e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8004682:	4806      	ldr	r0, [pc, #24]	; (800469c <rxSessionWritePayload+0x1bc>)
 8004684:	f002 fe66 	bl	8007354 <__assert_func>
    return out;
 8004688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	0800a828 	.word	0x0800a828
 8004698:	0800b4d0 	.word	0x0800b4d0
 800469c:	0800a664 	.word	0x0800a664
 80046a0:	0800ab84 	.word	0x0800ab84
 80046a4:	0800a720 	.word	0x0800a720
 80046a8:	0800ab98 	.word	0x0800ab98
 80046ac:	0800abb4 	.word	0x0800abb4
 80046b0:	0800abe4 	.word	0x0800abe4
 80046b4:	0800abfc 	.word	0x0800abfc
 80046b8:	0800ac2c 	.word	0x0800ac2c
 80046bc:	0800ac4c 	.word	0x0800ac4c

080046c0 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <rxSessionRestart+0x1e>
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <rxSessionRestart+0x7c>)
 80046d2:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <rxSessionRestart+0x80>)
 80046d4:	f240 21de 	movw	r1, #734	; 0x2de
 80046d8:	481a      	ldr	r0, [pc, #104]	; (8004744 <rxSessionRestart+0x84>)
 80046da:	f002 fe3b 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <rxSessionRestart+0x32>
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <rxSessionRestart+0x88>)
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <rxSessionRestart+0x80>)
 80046e8:	f240 21df 	movw	r1, #735	; 0x2df
 80046ec:	4815      	ldr	r0, [pc, #84]	; (8004744 <rxSessionRestart+0x84>)
 80046ee:	f002 fe31 	bl	8007354 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	6912      	ldr	r2, [r2, #16]
 80046fa:	4611      	mov	r1, r2
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004718:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	7d9b      	ldrb	r3, [r3, #22]
 800471e:	3301      	adds	r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	761a      	strb	r2, [r3, #24]
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	0800a828 	.word	0x0800a828
 8004740:	0800b4e8 	.word	0x0800b4e8
 8004744:	0800a664 	.word	0x0800a664
 8004748:	0800ab84 	.word	0x0800ab84

0800474c <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <rxSessionAcceptFrame+0x22>
 8004760:	4b81      	ldr	r3, [pc, #516]	; (8004968 <rxSessionAcceptFrame+0x21c>)
 8004762:	4a82      	ldr	r2, [pc, #520]	; (800496c <rxSessionAcceptFrame+0x220>)
 8004764:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8004768:	4881      	ldr	r0, [pc, #516]	; (8004970 <rxSessionAcceptFrame+0x224>)
 800476a:	f002 fdf3 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <rxSessionAcceptFrame+0x36>
 8004774:	4b7f      	ldr	r3, [pc, #508]	; (8004974 <rxSessionAcceptFrame+0x228>)
 8004776:	4a7d      	ldr	r2, [pc, #500]	; (800496c <rxSessionAcceptFrame+0x220>)
 8004778:	f240 21f1 	movw	r1, #753	; 0x2f1
 800477c:	487c      	ldr	r0, [pc, #496]	; (8004970 <rxSessionAcceptFrame+0x224>)
 800477e:	f002 fde9 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <rxSessionAcceptFrame+0x4a>
 8004788:	4b7b      	ldr	r3, [pc, #492]	; (8004978 <rxSessionAcceptFrame+0x22c>)
 800478a:	4a78      	ldr	r2, [pc, #480]	; (800496c <rxSessionAcceptFrame+0x220>)
 800478c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004790:	4877      	ldr	r0, [pc, #476]	; (8004970 <rxSessionAcceptFrame+0x224>)
 8004792:	f002 fddf 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <rxSessionAcceptFrame+0x60>
 800479e:	4b77      	ldr	r3, [pc, #476]	; (800497c <rxSessionAcceptFrame+0x230>)
 80047a0:	4a72      	ldr	r2, [pc, #456]	; (800496c <rxSessionAcceptFrame+0x220>)
 80047a2:	f240 21f3 	movw	r1, #755	; 0x2f3
 80047a6:	4872      	ldr	r0, [pc, #456]	; (8004970 <rxSessionAcceptFrame+0x224>)
 80047a8:	f002 fdd4 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7b9b      	ldrb	r3, [r3, #14]
 80047b0:	2b1f      	cmp	r3, #31
 80047b2:	d906      	bls.n	80047c2 <rxSessionAcceptFrame+0x76>
 80047b4:	4b72      	ldr	r3, [pc, #456]	; (8004980 <rxSessionAcceptFrame+0x234>)
 80047b6:	4a6d      	ldr	r2, [pc, #436]	; (800496c <rxSessionAcceptFrame+0x220>)
 80047b8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80047bc:	486c      	ldr	r0, [pc, #432]	; (8004970 <rxSessionAcceptFrame+0x224>)
 80047be:	f002 fdc9 	bl	8007354 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <rxSessionAcceptFrame+0x8a>
 80047c8:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <rxSessionAcceptFrame+0x238>)
 80047ca:	4a68      	ldr	r2, [pc, #416]	; (800496c <rxSessionAcceptFrame+0x220>)
 80047cc:	f240 21f5 	movw	r1, #757	; 0x2f5
 80047d0:	4867      	ldr	r0, [pc, #412]	; (8004970 <rxSessionAcceptFrame+0x224>)
 80047d2:	f002 fdbf 	bl	8007354 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7bdb      	ldrb	r3, [r3, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7bdb      	ldrb	r3, [r3, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <rxSessionAcceptFrame+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7c1b      	ldrb	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <rxSessionAcceptFrame+0xb2>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <rxSessionAcceptFrame+0xb4>
 80047fe:	2300      	movs	r3, #0
 8004800:	75bb      	strb	r3, [r7, #22]
 8004802:	7dbb      	ldrb	r3, [r7, #22]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800480a:	7dbb      	ldrb	r3, [r7, #22]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	8a98      	ldrh	r0, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6959      	ldr	r1, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	461a      	mov	r2, r3
 8004824:	f7fe fed6 	bl	80035d4 <crcAdd>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fe4d 	bl	80044e0 <rxSessionWritePayload>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800484a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da10      	bge.n	8004874 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8004852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004856:	f113 0f03 	cmn.w	r3, #3
 800485a:	d006      	beq.n	800486a <rxSessionAcceptFrame+0x11e>
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <rxSessionAcceptFrame+0x23c>)
 800485e:	4a43      	ldr	r2, [pc, #268]	; (800496c <rxSessionAcceptFrame+0x220>)
 8004860:	f240 3107 	movw	r1, #775	; 0x307
 8004864:	4842      	ldr	r0, [pc, #264]	; (8004970 <rxSessionAcceptFrame+0x224>)
 8004866:	f002 fd75 	bl	8007354 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff ff27 	bl	80046c0 <rxSessionRestart>
 8004872:	e072      	b.n	800495a <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7c1b      	ldrb	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05f      	beq.n	800493c <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800487c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <rxSessionAcceptFrame+0x146>
 8004884:	4b41      	ldr	r3, [pc, #260]	; (800498c <rxSessionAcceptFrame+0x240>)
 8004886:	4a39      	ldr	r2, [pc, #228]	; (800496c <rxSessionAcceptFrame+0x220>)
 8004888:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800488c:	4838      	ldr	r0, [pc, #224]	; (8004970 <rxSessionAcceptFrame+0x224>)
 800488e:	f002 fd61 	bl	8007354 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8004892:	7dbb      	ldrb	r3, [r7, #22]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <rxSessionAcceptFrame+0x154>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	8a9b      	ldrh	r3, [r3, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d148      	bne.n	8004932 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fd95 	bl	80043d8 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	6a39      	ldr	r1, [r7, #32]
 80048b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d206      	bcs.n	80048e4 <rxSessionAcceptFrame+0x198>
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <rxSessionAcceptFrame+0x244>)
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <rxSessionAcceptFrame+0x220>)
 80048da:	f240 3116 	movw	r1, #790	; 0x316
 80048de:	4824      	ldr	r0, [pc, #144]	; (8004970 <rxSessionAcceptFrame+0x224>)
 80048e0:	f002 fd38 	bl	8007354 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 80048f0:	7dbb      	ldrb	r3, [r7, #22]
 80048f2:	f083 0301 	eor.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d017      	beq.n	800492c <rxSessionAcceptFrame+0x1e0>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d814      	bhi.n	800492c <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f1c3 0302 	rsb	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d206      	bcs.n	800491e <rxSessionAcceptFrame+0x1d2>
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <rxSessionAcceptFrame+0x248>)
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <rxSessionAcceptFrame+0x220>)
 8004914:	f240 311a 	movw	r1, #794	; 0x31a
 8004918:	4815      	ldr	r0, [pc, #84]	; (8004970 <rxSessionAcceptFrame+0x224>)
 800491a:	f002 fd1b 	bl	8007354 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	1e9a      	subs	r2, r3, #2
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fec3 	bl	80046c0 <rxSessionRestart>
 800493a:	e00e      	b.n	800495a <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	7e1b      	ldrb	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800495a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	0800a828 	.word	0x0800a828
 800496c:	0800b4b8 	.word	0x0800b4b8
 8004970:	0800a664 	.word	0x0800a664
 8004974:	0800ab84 	.word	0x0800ab84
 8004978:	0800aabc 	.word	0x0800aabc
 800497c:	0800ab18 	.word	0x0800ab18
 8004980:	0800ac58 	.word	0x0800ac58
 8004984:	0800ab38 	.word	0x0800ab38
 8004988:	0800ac80 	.word	0x0800ac80
 800498c:	0800ac8c 	.word	0x0800ac8c
 8004990:	0800ac98 	.word	0x0800ac98
 8004994:	0800acc8 	.word	0x0800acc8

08004998 <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <rxSessionSynchronize+0x22>
 80049ac:	4b5c      	ldr	r3, [pc, #368]	; (8004b20 <rxSessionSynchronize+0x188>)
 80049ae:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <rxSessionSynchronize+0x18c>)
 80049b0:	f44f 7150 	mov.w	r1, #832	; 0x340
 80049b4:	485c      	ldr	r0, [pc, #368]	; (8004b28 <rxSessionSynchronize+0x190>)
 80049b6:	f002 fccd 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <rxSessionSynchronize+0x36>
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <rxSessionSynchronize+0x194>)
 80049c2:	4a58      	ldr	r2, [pc, #352]	; (8004b24 <rxSessionSynchronize+0x18c>)
 80049c4:	f240 3141 	movw	r1, #833	; 0x341
 80049c8:	4857      	ldr	r0, [pc, #348]	; (8004b28 <rxSessionSynchronize+0x190>)
 80049ca:	f002 fcc3 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7d9b      	ldrb	r3, [r3, #22]
 80049d2:	2b1f      	cmp	r3, #31
 80049d4:	d906      	bls.n	80049e4 <rxSessionSynchronize+0x4c>
 80049d6:	4b56      	ldr	r3, [pc, #344]	; (8004b30 <rxSessionSynchronize+0x198>)
 80049d8:	4a52      	ldr	r2, [pc, #328]	; (8004b24 <rxSessionSynchronize+0x18c>)
 80049da:	f240 3142 	movw	r1, #834	; 0x342
 80049de:	4852      	ldr	r0, [pc, #328]	; (8004b28 <rxSessionSynchronize+0x190>)
 80049e0:	f002 fcb8 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	7b9b      	ldrb	r3, [r3, #14]
 80049e8:	2b1f      	cmp	r3, #31
 80049ea:	d906      	bls.n	80049fa <rxSessionSynchronize+0x62>
 80049ec:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <rxSessionSynchronize+0x19c>)
 80049ee:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <rxSessionSynchronize+0x18c>)
 80049f0:	f240 3143 	movw	r1, #835	; 0x343
 80049f4:	484c      	ldr	r0, [pc, #304]	; (8004b28 <rxSessionSynchronize+0x190>)
 80049f6:	f002 fcad 	bl	8007354 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	7ddb      	ldrb	r3, [r3, #23]
 80049fe:	79fa      	ldrb	r2, [r7, #7]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	7d9a      	ldrb	r2, [r3, #22]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	7b9b      	ldrb	r3, [r3, #14]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	7d9a      	ldrb	r2, [r3, #22]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	7b9b      	ldrb	r3, [r3, #14]
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7ff fd1c 	bl	8004464 <rxComputeTransferIDDifference>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	bf8c      	ite	hi
 8004a32:	2301      	movhi	r3, #1
 8004a34:	2300      	movls	r3, #0
 8004a36:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a44:	4290      	cmp	r0, r2
 8004a46:	eb71 0303 	sbcs.w	r3, r1, r3
 8004a4a:	d20f      	bcs.n	8004a6c <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	1a84      	subs	r4, r0, r2
 8004a5a:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8004a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a62:	42a2      	cmp	r2, r4
 8004a64:	41ab      	sbcs	r3, r5
 8004a66:	d201      	bcs.n	8004a6c <rxSessionSynchronize+0xd4>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <rxSessionSynchronize+0xd6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	753b      	strb	r3, [r7, #20]
 8004a70:	7d3b      	ldrb	r3, [r7, #20]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 8004a8c:	7d7b      	ldrb	r3, [r7, #21]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d114      	bne.n	8004abc <rxSessionSynchronize+0x124>
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 8004a98:	7d3b      	ldrb	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10e      	bne.n	8004abc <rxSessionSynchronize+0x124>
 8004a9e:	7d3b      	ldrb	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 8004aa4:	7d7b      	ldrb	r3, [r7, #21]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <rxSessionSynchronize+0x124>
 8004aaa:	7d3b      	ldrb	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 8004ab0:	7dbb      	ldrb	r3, [r7, #22]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <rxSessionSynchronize+0x128>
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <rxSessionSynchronize+0x12a>
 8004ac0:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 8004ac2:	74bb      	strb	r3, [r7, #18]
 8004ac4:	7cbb      	ldrb	r3, [r7, #18]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	7bdb      	ldrb	r3, [r3, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d021      	beq.n	8004b18 <rxSessionSynchronize+0x180>
 8004ad4:	7cbb      	ldrb	r3, [r7, #18]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01e      	beq.n	8004b18 <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	7bdb      	ldrb	r3, [r3, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <rxSessionSynchronize+0x158>
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <rxSessionSynchronize+0x1a0>)
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <rxSessionSynchronize+0x18c>)
 8004ae6:	f240 3159 	movw	r1, #857	; 0x359
 8004aea:	480f      	ldr	r0, [pc, #60]	; (8004b28 <rxSessionSynchronize+0x190>)
 8004aec:	f002 fc32 	bl	8007354 <__assert_func>
        rxs->total_payload_size    = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b02:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	7b9a      	ldrb	r2, [r3, #14]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	79fa      	ldrb	r2, [r7, #7]
 8004b16:	75da      	strb	r2, [r3, #23]
    }
}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b20:	0800ab84 	.word	0x0800ab84
 8004b24:	0800b480 	.word	0x0800b480
 8004b28:	0800a664 	.word	0x0800a664
 8004b2c:	0800aabc 	.word	0x0800aabc
 8004b30:	0800ad00 	.word	0x0800ad00
 8004b34:	0800ac58 	.word	0x0800ac58
 8004b38:	0800ad28 	.word	0x0800ad28

08004b3c <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <rxSessionUpdate+0x22>
 8004b50:	4b48      	ldr	r3, [pc, #288]	; (8004c74 <rxSessionUpdate+0x138>)
 8004b52:	4a49      	ldr	r2, [pc, #292]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004b54:	f240 3172 	movw	r1, #882	; 0x372
 8004b58:	4848      	ldr	r0, [pc, #288]	; (8004c7c <rxSessionUpdate+0x140>)
 8004b5a:	f002 fbfb 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <rxSessionUpdate+0x36>
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <rxSessionUpdate+0x144>)
 8004b66:	4a44      	ldr	r2, [pc, #272]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004b68:	f240 3173 	movw	r1, #883	; 0x373
 8004b6c:	4843      	ldr	r0, [pc, #268]	; (8004c7c <rxSessionUpdate+0x140>)
 8004b6e:	f002 fbf1 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <rxSessionUpdate+0x4a>
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <rxSessionUpdate+0x148>)
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004b7c:	f44f 715d 	mov.w	r1, #884	; 0x374
 8004b80:	483e      	ldr	r0, [pc, #248]	; (8004c7c <rxSessionUpdate+0x140>)
 8004b82:	f002 fbe7 	bl	8007354 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <rxSessionUpdate+0x5e>
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <rxSessionUpdate+0x14c>)
 8004b8e:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004b90:	f240 3175 	movw	r1, #885	; 0x375
 8004b94:	4839      	ldr	r0, [pc, #228]	; (8004c7c <rxSessionUpdate+0x140>)
 8004b96:	f002 fbdd 	bl	8007354 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	7d9b      	ldrb	r3, [r3, #22]
 8004b9e:	2b1f      	cmp	r3, #31
 8004ba0:	d906      	bls.n	8004bb0 <rxSessionUpdate+0x74>
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <rxSessionUpdate+0x150>)
 8004ba4:	4a34      	ldr	r2, [pc, #208]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004ba6:	f240 3176 	movw	r1, #886	; 0x376
 8004baa:	4834      	ldr	r0, [pc, #208]	; (8004c7c <rxSessionUpdate+0x140>)
 8004bac:	f002 fbd2 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7b9b      	ldrb	r3, [r3, #14]
 8004bb4:	2b1f      	cmp	r3, #31
 8004bb6:	d906      	bls.n	8004bc6 <rxSessionUpdate+0x8a>
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <rxSessionUpdate+0x154>)
 8004bba:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <rxSessionUpdate+0x13c>)
 8004bbc:	f240 3177 	movw	r1, #887	; 0x377
 8004bc0:	482e      	ldr	r0, [pc, #184]	; (8004c7c <rxSessionUpdate+0x140>)
 8004bc2:	f002 fbc7 	bl	8007354 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 8004bc6:	78f9      	ldrb	r1, [r7, #3]
 8004bc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f7ff fedf 	bl	8004998 <rxSessionSynchronize>
    int8_t out = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	7ddb      	ldrb	r3, [r3, #23]
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7c5a      	ldrb	r2, [r3, #17]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	7e1b      	ldrb	r3, [r3, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	7b9a      	ldrb	r2, [r3, #14]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	7d9b      	ldrb	r3, [r3, #22]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e006      	b.n	8004c38 <rxSessionUpdate+0xfc>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 8004c38:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 8004c3a:	7dbb      	ldrb	r3, [r7, #22]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <rxSessionUpdate+0x12a>
 8004c40:	7d7b      	ldrb	r3, [r7, #21]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00f      	beq.n	8004c66 <rxSessionUpdate+0x12a>
 8004c46:	7d3b      	ldrb	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <rxSessionUpdate+0x12a>
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff fd75 	bl	800474c <rxSessionAcceptFrame>
 8004c62:	4603      	mov	r3, r0
 8004c64:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 8004c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	0800a828 	.word	0x0800a828
 8004c78:	0800b470 	.word	0x0800b470
 8004c7c:	0800a664 	.word	0x0800a664
 8004c80:	0800ab84 	.word	0x0800ab84
 8004c84:	0800aabc 	.word	0x0800aabc
 8004c88:	0800ab38 	.word	0x0800ab38
 8004c8c:	0800ad00 	.word	0x0800ad00
 8004c90:	0800ac58 	.word	0x0800ac58

08004c94 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8004c94:	b5b0      	push	{r4, r5, r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af04      	add	r7, sp, #16
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <rxAcceptFrame+0x22>
 8004ca8:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <rxAcceptFrame+0x22c>)
 8004caa:	4a86      	ldr	r2, [pc, #536]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004cac:	f240 3196 	movw	r1, #918	; 0x396
 8004cb0:	4885      	ldr	r0, [pc, #532]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004cb2:	f002 fb4f 	bl	8007354 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <rxAcceptFrame+0x36>
 8004cbc:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <rxAcceptFrame+0x238>)
 8004cbe:	4a81      	ldr	r2, [pc, #516]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004cc0:	f240 3197 	movw	r1, #919	; 0x397
 8004cc4:	4880      	ldr	r0, [pc, #512]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004cc6:	f002 fb45 	bl	8007354 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	8b9a      	ldrh	r2, [r3, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	895b      	ldrh	r3, [r3, #10]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d006      	beq.n	8004ce4 <rxAcceptFrame+0x50>
 8004cd6:	4b7e      	ldr	r3, [pc, #504]	; (8004ed0 <rxAcceptFrame+0x23c>)
 8004cd8:	4a7a      	ldr	r2, [pc, #488]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004cda:	f44f 7166 	mov.w	r1, #920	; 0x398
 8004cde:	487a      	ldr	r0, [pc, #488]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004ce0:	f002 fb38 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <rxAcceptFrame+0x64>
 8004cea:	4b7a      	ldr	r3, [pc, #488]	; (8004ed4 <rxAcceptFrame+0x240>)
 8004cec:	4a75      	ldr	r2, [pc, #468]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004cee:	f240 3199 	movw	r1, #921	; 0x399
 8004cf2:	4875      	ldr	r0, [pc, #468]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004cf4:	f002 fb2e 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <rxAcceptFrame+0x7a>
 8004d00:	4b75      	ldr	r3, [pc, #468]	; (8004ed8 <rxAcceptFrame+0x244>)
 8004d02:	4a70      	ldr	r2, [pc, #448]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004d04:	f240 319a 	movw	r1, #922	; 0x39a
 8004d08:	486f      	ldr	r0, [pc, #444]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004d0a:	f002 fb23 	bl	8007354 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7b9b      	ldrb	r3, [r3, #14]
 8004d12:	2b1f      	cmp	r3, #31
 8004d14:	d906      	bls.n	8004d24 <rxAcceptFrame+0x90>
 8004d16:	4b71      	ldr	r3, [pc, #452]	; (8004edc <rxAcceptFrame+0x248>)
 8004d18:	4a6a      	ldr	r2, [pc, #424]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004d1a:	f240 319b 	movw	r1, #923	; 0x39b
 8004d1e:	486a      	ldr	r0, [pc, #424]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004d20:	f002 fb18 	bl	8007354 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7b5b      	ldrb	r3, [r3, #13]
 8004d28:	2bff      	cmp	r3, #255	; 0xff
 8004d2a:	d00c      	beq.n	8004d46 <rxAcceptFrame+0xb2>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	791a      	ldrb	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7b5b      	ldrb	r3, [r3, #13]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d006      	beq.n	8004d46 <rxAcceptFrame+0xb2>
 8004d38:	4b69      	ldr	r3, [pc, #420]	; (8004ee0 <rxAcceptFrame+0x24c>)
 8004d3a:	4a62      	ldr	r2, [pc, #392]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004d3c:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004d40:	4861      	ldr	r0, [pc, #388]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004d42:	f002 fb07 	bl	8007354 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <rxAcceptFrame+0xc6>
 8004d4c:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <rxAcceptFrame+0x250>)
 8004d4e:	4a5d      	ldr	r2, [pc, #372]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004d50:	f240 319d 	movw	r1, #925	; 0x39d
 8004d54:	485c      	ldr	r0, [pc, #368]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004d56:	f002 fafd 	bl	8007354 <__assert_func>

    int8_t out = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7b1b      	ldrb	r3, [r3, #12]
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db6c      	blt.n	8004e42 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7b1b      	ldrb	r3, [r3, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d134      	bne.n	8004de4 <rxAcceptFrame+0x150>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7bdb      	ldrb	r3, [r3, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d030      	beq.n	8004de4 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2120      	movs	r1, #32
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	4798      	blx	r3
 8004d8c:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7b1b      	ldrb	r3, [r3, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	3308      	adds	r3, #8
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01d      	beq.n	8004de0 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	6939      	ldr	r1, [r7, #16]
 8004dac:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc8:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7b9a      	ldrb	r2, [r3, #14]
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	761a      	strb	r2, [r3, #24]
 8004dde:	e001      	b.n	8004de4 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 8004de0:	23fd      	movs	r3, #253	; 0xfd
 8004de2:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7b1b      	ldrb	r3, [r3, #12]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	3308      	adds	r3, #8
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d05e      	beq.n	8004eb4 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8004df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <rxAcceptFrame+0x178>
 8004dfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <rxAcceptFrame+0x254>)
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004e02:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8004e06:	4830      	ldr	r0, [pc, #192]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004e08:	f002 faa4 	bl	8007354 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7b1b      	ldrb	r3, [r3, #12]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	3308      	adds	r3, #8
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	6989      	ldr	r1, [r1, #24]
 8004e24:	78fd      	ldrb	r5, [r7, #3]
 8004e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e28:	9003      	str	r0, [sp, #12]
 8004e2a:	9102      	str	r1, [sp, #8]
 8004e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8004e30:	462b      	mov	r3, r5
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4621      	mov	r1, r4
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fe80 	bl	8004b3c <rxSessionUpdate>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e038      	b.n	8004eb4 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7b1b      	ldrb	r3, [r3, #12]
 8004e46:	2bff      	cmp	r3, #255	; 0xff
 8004e48:	d006      	beq.n	8004e58 <rxAcceptFrame+0x1c4>
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <rxAcceptFrame+0x258>)
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <rxAcceptFrame+0x230>)
 8004e4e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8004e52:	481d      	ldr	r0, [pc, #116]	; (8004ec8 <rxAcceptFrame+0x234>)
 8004e54:	f002 fa7e 	bl	8007354 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bf28      	it	cs
 8004e64:	4613      	movcs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	69b9      	ldr	r1, [r7, #24]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	4798      	blx	r3
 8004e72:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01a      	beq.n	8004eb0 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff faaa 	bl	80043d8 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f003 f956 	bl	8008156 <memcpy>
            out = 1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e001      	b.n	8004eb4 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8004eb0:	23fd      	movs	r3, #253	; 0xfd
 8004eb2:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8004eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec0:	0800a828 	.word	0x0800a828
 8004ec4:	0800b460 	.word	0x0800b460
 8004ec8:	0800a664 	.word	0x0800a664
 8004ecc:	0800ad44 	.word	0x0800ad44
 8004ed0:	0800ad60 	.word	0x0800ad60
 8004ed4:	0800aabc 	.word	0x0800aabc
 8004ed8:	0800ab18 	.word	0x0800ab18
 8004edc:	0800ac58 	.word	0x0800ac58
 8004ee0:	0800ad88 	.word	0x0800ad88
 8004ee4:	0800ab38 	.word	0x0800ab38
 8004ee8:	0800ade0 	.word	0x0800ade0
 8004eec:	0800adec 	.word	0x0800adec

08004ef0 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	8b9b      	ldrh	r3, [r3, #28]
 8004f04:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8004f06:	89fa      	ldrh	r2, [r7, #14]
 8004f08:	89bb      	ldrh	r3, [r7, #12]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d00a      	beq.n	8004f24 <rxSubscriptionPredicateOnPortID+0x34>
 8004f0e:	89fa      	ldrh	r2, [r7, #14]
 8004f10:	89bb      	ldrh	r3, [r7, #12]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf8c      	ite	hi
 8004f16:	2301      	movhi	r3, #1
 8004f18:	2300      	movls	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <rxSubscriptionPredicateOnPortID+0x44>)
 8004f20:	569b      	ldrsb	r3, [r3, r2]
 8004f22:	e000      	b.n	8004f26 <rxSubscriptionPredicateOnPortID+0x36>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	0800b44c 	.word	0x0800b44c

08004f38 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	331c      	adds	r3, #28
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ffd1 	bl	8004ef0 <rxSubscriptionPredicateOnPortID>
 8004f4e:	4603      	mov	r3, r0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <canardInit+0x20>
 8004f6a:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <canardInit+0x6c>)
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <canardInit+0x70>)
 8004f6e:	f240 4104 	movw	r1, #1028	; 0x404
 8004f72:	4816      	ldr	r0, [pc, #88]	; (8004fcc <canardInit+0x74>)
 8004f74:	f002 f9ee 	bl	8007354 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <canardInit+0x34>
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <canardInit+0x78>)
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <canardInit+0x70>)
 8004f82:	f240 4105 	movw	r1, #1029	; 0x405
 8004f86:	4811      	ldr	r0, [pc, #68]	; (8004fcc <canardInit+0x74>)
 8004f88:	f002 f9e4 	bl	8007354 <__assert_func>
    const CanardInstance out = {
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	23ff      	movs	r3, #255	; 0xff
 8004f92:	763b      	strb	r3, [r7, #24]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	461d      	mov	r5, r3
 8004fac:	f107 0414 	add.w	r4, r7, #20
 8004fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004fb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	3730      	adds	r7, #48	; 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc4:	0800ae0c 	.word	0x0800ae0c
 8004fc8:	0800b2d4 	.word	0x0800b2d4
 8004fcc:	0800a664 	.word	0x0800a664
 8004fd0:	0800ae2c 	.word	0x0800ae2c

08004fd4 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8004fd4:	b4b0      	push	{r4, r5, r7}
 8004fd6:	b08b      	sub	sp, #44	; 0x2c
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	2300      	movs	r3, #0
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	f107 0414 	add.w	r4, r7, #20
 8004ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	602b      	str	r3, [r5, #0]
}
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	372c      	adds	r7, #44	; 0x2c
 8005008:	46bd      	mov	sp, r7
 800500a:	bcb0      	pop	{r4, r5, r7}
 800500c:	4770      	bx	lr
	...

08005010 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	; 0x38
 8005014:	af06      	add	r7, sp, #24
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800501e:	f06f 0301 	mvn.w	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d062      	beq.n	80050f0 <canardTxPush+0xe0>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05f      	beq.n	80050f0 <canardTxPush+0xe0>
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d05c      	beq.n	80050f0 <canardTxPush+0xe0>
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <canardTxPush+0x32>
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d156      	bne.n	80050f0 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fb7a 	bl	8003740 <adjustPresentationLayerMTU>
 800504c:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	791a      	ldrb	r2, [r3, #4]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800505c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505e:	f7fe fb9f 	bl	80037a0 <txMakeCANID>
 8005062:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	db40      	blt.n	80050ec <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	429a      	cmp	r2, r3
 8005070:	d81c      	bhi.n	80050ac <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8005072:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8005074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005076:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	9103      	str	r1, [sp, #12]
 800507c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800507e:	9102      	str	r1, [sp, #8]
 8005080:	9201      	str	r2, [sp, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7fe fd52 	bl	8003b34 <txPushSingleFrame>
 8005090:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	db2b      	blt.n	80050f0 <canardTxPush+0xe0>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d028      	beq.n	80050f0 <canardTxPush+0xe0>
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <canardTxPush+0x100>)
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <canardTxPush+0x104>)
 80050a2:	f240 4133 	movw	r1, #1075	; 0x433
 80050a6:	481c      	ldr	r0, [pc, #112]	; (8005118 <canardTxPush+0x108>)
 80050a8:	f002 f954 	bl	8007354 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80050ac:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80050ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b0:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80050b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b4:	9105      	str	r1, [sp, #20]
 80050b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b8:	9104      	str	r1, [sp, #16]
 80050ba:	9203      	str	r2, [sp, #12]
 80050bc:	9302      	str	r3, [sp, #8]
 80050be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c2:	e9cd 2300 	strd	r2, r3, [sp]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fe ff4c 	bl	8003f68 <txPushMultiFrame>
 80050d0:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0b      	blt.n	80050f0 <canardTxPush+0xe0>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	dc08      	bgt.n	80050f0 <canardTxPush+0xe0>
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <canardTxPush+0x10c>)
 80050e0:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <canardTxPush+0x104>)
 80050e2:	f240 413f 	movw	r1, #1087	; 0x43f
 80050e6:	480c      	ldr	r0, [pc, #48]	; (8005118 <canardTxPush+0x108>)
 80050e8:	f002 f934 	bl	8007354 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <canardTxPush+0xf4>
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <canardTxPush+0x110>)
 80050f8:	4a06      	ldr	r2, [pc, #24]	; (8005114 <canardTxPush+0x104>)
 80050fa:	f240 4147 	movw	r1, #1095	; 0x447
 80050fe:	4806      	ldr	r0, [pc, #24]	; (8005118 <canardTxPush+0x108>)
 8005100:	f002 f928 	bl	8007354 <__assert_func>
    return out;
 8005104:	69fb      	ldr	r3, [r7, #28]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	0800a960 	.word	0x0800a960
 8005114:	0800b2e0 	.word	0x0800b2e0
 8005118:	0800a664 	.word	0x0800a664
 800511c:	0800aaa4 	.word	0x0800aaa4
 8005120:	0800ae48 	.word	0x0800ae48

08005124 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd fe96 	bl	8002e6e <cavlFindExtremum>
 8005142:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <canardTxPop+0x36>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	330c      	adds	r3, #12
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe f8cf 	bl	8003318 <cavlRemove>
        que->size--;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]
    }
    return out;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b090      	sub	sp, #64	; 0x40
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800519c:	23fe      	movs	r3, #254	; 0xfe
 800519e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d068      	beq.n	800527a <canardRxAccept+0xea>
 80051a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d065      	beq.n	800527a <canardRxAccept+0xea>
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d062      	beq.n	800527a <canardRxAccept+0xea>
 80051b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051bc:	d25d      	bcs.n	800527a <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80051c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d155      	bne.n	800527a <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	2220      	movs	r2, #32
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f002 ff2d 	bl	8008036 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 80051dc:	f107 0310 	add.w	r3, r7, #16
 80051e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051e6:	f7fe ffb3 	bl	8004150 <rxTryParseFrame>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d041      	beq.n	8005274 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 80051f0:	7f7b      	ldrb	r3, [r7, #29]
 80051f2:	2bff      	cmp	r3, #255	; 0xff
 80051f4:	d004      	beq.n	8005200 <canardRxAccept+0x70>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	791a      	ldrb	r2, [r3, #4]
 80051fa:	7f7b      	ldrb	r3, [r7, #29]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d135      	bne.n	800526c <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8005200:	7e7b      	ldrb	r3, [r7, #25]
 8005202:	3304      	adds	r3, #4
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	18d0      	adds	r0, r2, r3
 800520a:	f107 0310 	add.w	r3, r7, #16
 800520e:	f103 010a 	add.w	r1, r3, #10
 8005212:	2300      	movs	r3, #0
 8005214:	4a21      	ldr	r2, [pc, #132]	; (800529c <canardRxAccept+0x10c>)
 8005216:	f7fe f801 	bl	800321c <cavlSearch>
 800521a:	6338      	str	r0, [r7, #48]	; 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 800521c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8005222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01a      	beq.n	8005264 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	8b9a      	ldrh	r2, [r3, #28]
 8005232:	8b7b      	ldrh	r3, [r7, #26]
 8005234:	429a      	cmp	r2, r3
 8005236:	d006      	beq.n	8005246 <canardRxAccept+0xb6>
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <canardRxAccept+0x110>)
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <canardRxAccept+0x114>)
 800523c:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8005240:	4819      	ldr	r0, [pc, #100]	; (80052a8 <canardRxAccept+0x118>)
 8005242:	f002 f887 	bl	8007354 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 8005246:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800524a:	f107 0210 	add.w	r2, r7, #16
 800524e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	460b      	mov	r3, r1
 8005254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fd1c 	bl	8004c94 <rxAcceptFrame>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 8005262:	e00a      	b.n	800527a <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800526a:	e006      	b.n	800527a <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005272:	e002      	b.n	800527a <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800527a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800527e:	2b01      	cmp	r3, #1
 8005280:	dd06      	ble.n	8005290 <canardRxAccept+0x100>
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <canardRxAccept+0x11c>)
 8005284:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <canardRxAccept+0x114>)
 8005286:	f240 419a 	movw	r1, #1178	; 0x49a
 800528a:	4807      	ldr	r0, [pc, #28]	; (80052a8 <canardRxAccept+0x118>)
 800528c:	f002 f862 	bl	8007354 <__assert_func>
    return out;
 8005290:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005294:	4618      	mov	r0, r3
 8005296:	3738      	adds	r7, #56	; 0x38
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08004ef1 	.word	0x08004ef1
 80052a0:	0800ae54 	.word	0x0800ae54
 80052a4:	0800b43c 	.word	0x0800b43c
 80052a8:	0800a664 	.word	0x0800a664
 80052ac:	0800ae74 	.word	0x0800ae74

080052b0 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	72fb      	strb	r3, [r7, #11]
 80052be:	4613      	mov	r3, r2
 80052c0:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80052c2:	23fe      	movs	r3, #254	; 0xfe
 80052c4:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d04a      	beq.n	8005366 <canardRxSubscribe+0xb6>
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d047      	beq.n	8005366 <canardRxSubscribe+0xb6>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d844      	bhi.n	8005366 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 80052dc:	893a      	ldrh	r2, [r7, #8]
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	4619      	mov	r1, r3
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f850 	bl	8005388 <canardRxUnsubscribe>
 80052e8:	4603      	mov	r3, r0
 80052ea:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 80052ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	db38      	blt.n	8005366 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 80052f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	893a      	ldrh	r2, [r7, #8]
 8005308:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e009      	b.n	8005324 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	3308      	adds	r3, #8
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	3301      	adds	r3, #1
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b7f      	cmp	r3, #127	; 0x7f
 8005328:	d9f2      	bls.n	8005310 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3304      	adds	r3, #4
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	18d0      	adds	r0, r2, r3
 8005334:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <canardRxSubscribe+0xc4>)
 8005336:	4a10      	ldr	r2, [pc, #64]	; (8005378 <canardRxSubscribe+0xc8>)
 8005338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800533a:	f7fd ff6f 	bl	800321c <cavlSearch>
 800533e:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d006      	beq.n	8005356 <canardRxSubscribe+0xa6>
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <canardRxSubscribe+0xcc>)
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <canardRxSubscribe+0xd0>)
 800534c:	f240 41be 	movw	r1, #1214	; 0x4be
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <canardRxSubscribe+0xd4>)
 8005352:	f001 ffff 	bl	8007354 <__assert_func>
            out = (out > 0) ? 0 : 1;
 8005356:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfd4      	ite	le
 800535e:	2301      	movle	r3, #1
 8005360:	2300      	movgt	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8005366:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	0800357d 	.word	0x0800357d
 8005378:	08004f39 	.word	0x08004f39
 800537c:	0800ae80 	.word	0x0800ae80
 8005380:	0800b51c 	.word	0x0800b51c
 8005384:	0800a664 	.word	0x0800a664

08005388 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
 8005394:	4613      	mov	r3, r2
 8005396:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005398:	23fe      	movs	r3, #254	; 0xfe
 800539a:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d05f      	beq.n	8005466 <canardRxUnsubscribe+0xde>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d85c      	bhi.n	8005466 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 80053ac:	883b      	ldrh	r3, [r7, #0]
 80053ae:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3304      	adds	r3, #4
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	18d0      	adds	r0, r2, r3
 80053ba:	f107 010e 	add.w	r1, r7, #14
 80053be:	2300      	movs	r3, #0
 80053c0:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <canardRxUnsubscribe+0xec>)
 80053c2:	f7fd ff2b 	bl	800321c <cavlSearch>
 80053c6:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d049      	beq.n	8005462 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3304      	adds	r3, #4
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd ff9b 	bl	8003318 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	8b9b      	ldrh	r3, [r3, #28]
 80053e6:	883a      	ldrh	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d006      	beq.n	80053fa <canardRxUnsubscribe+0x72>
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <canardRxUnsubscribe+0xf0>)
 80053ee:	4a23      	ldr	r2, [pc, #140]	; (800547c <canardRxUnsubscribe+0xf4>)
 80053f0:	f240 41d3 	movw	r1, #1235	; 0x4d3
 80053f4:	4822      	ldr	r0, [pc, #136]	; (8005480 <canardRxUnsubscribe+0xf8>)
 80053f6:	f001 ffad 	bl	8007354 <__assert_func>
            out = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e02a      	b.n	800545a <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	6939      	ldr	r1, [r7, #16]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	3308      	adds	r3, #8
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <canardRxUnsubscribe+0xa0>
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3308      	adds	r3, #8
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	e000      	b.n	800542a <canardRxUnsubscribe+0xa2>
 8005428:	2300      	movs	r3, #0
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	6939      	ldr	r1, [r7, #16]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3308      	adds	r3, #8
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	3308      	adds	r3, #8
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	3301      	adds	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d9d1      	bls.n	8005404 <canardRxUnsubscribe+0x7c>
 8005460:	e001      	b.n	8005466 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8005466:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	08004ef1 	.word	0x08004ef1
 8005478:	0800aea0 	.word	0x0800aea0
 800547c:	0800b530 	.word	0x0800b530
 8005480:	0800a664 	.word	0x0800a664

08005484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <HAL_Init+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_Init+0x40>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_Init+0x40>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_Init+0x40>)
 800549a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_Init+0x40>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <HAL_Init+0x40>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ac:	2003      	movs	r0, #3
 80054ae:	f000 ffad 	bl	800640c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f000 f808 	bl	80054c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b8:	f7fd fb2c 	bl	8002b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023c00 	.word	0x40023c00

080054c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_InitTick+0x54>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_InitTick+0x58>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4619      	mov	r1, r3
 80054da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054de:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 ffc5 	bl	8006476 <HAL_SYSTICK_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00e      	b.n	8005514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d80a      	bhi.n	8005512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054fc:	2200      	movs	r2, #0
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	f000 ff8d 	bl	8006422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005508:	4a06      	ldr	r2, [pc, #24]	; (8005524 <HAL_InitTick+0x5c>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000004 	.word	0x20000004
 8005520:	2000000c 	.word	0x2000000c
 8005524:	20000008 	.word	0x20000008

08005528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_IncTick+0x20>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <HAL_IncTick+0x24>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4413      	add	r3, r2
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_IncTick+0x24>)
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000000c 	.word	0x2000000c
 800554c:	2000048c 	.word	0x2000048c

08005550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return uwTick;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_GetTick+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000048c 	.word	0x2000048c

08005568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7ff ffee 	bl	8005550 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d005      	beq.n	800558e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_Delay+0x44>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800558e:	bf00      	nop
 8005590:	f7ff ffde 	bl	8005550 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d8f7      	bhi.n	8005590 <HAL_Delay+0x28>
  {
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	2000000c 	.word	0x2000000c

080055b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0ed      	b.n	800579e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fd fac8 	bl	8002b64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055e4:	f7ff ffb4 	bl	8005550 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80055ea:	e012      	b.n	8005612 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055ec:	f7ff ffb0 	bl	8005550 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b0a      	cmp	r3, #10
 80055f8:	d90b      	bls.n	8005612 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2205      	movs	r2, #5
 800560a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e0c5      	b.n	800579e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0e5      	beq.n	80055ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0202 	bic.w	r2, r2, #2
 800562e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005630:	f7ff ff8e 	bl	8005550 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005636:	e012      	b.n	800565e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005638:	f7ff ff8a 	bl	8005550 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b0a      	cmp	r3, #10
 8005644:	d90b      	bls.n	800565e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2205      	movs	r2, #5
 8005656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e09f      	b.n	800579e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7e1b      	ldrb	r3, [r3, #24]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d108      	bne.n	8005686 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e007      	b.n	8005696 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7e5b      	ldrb	r3, [r3, #25]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e007      	b.n	80056c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7e9b      	ldrb	r3, [r3, #26]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0220 	orr.w	r2, r2, #32
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e007      	b.n	80056ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0220 	bic.w	r2, r2, #32
 80056e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	7edb      	ldrb	r3, [r3, #27]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d108      	bne.n	8005704 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0210 	bic.w	r2, r2, #16
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e007      	b.n	8005714 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0210 	orr.w	r2, r2, #16
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7f1b      	ldrb	r3, [r3, #28]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e007      	b.n	800573e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0208 	bic.w	r2, r2, #8
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	7f5b      	ldrb	r3, [r3, #29]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d108      	bne.n	8005758 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0204 	orr.w	r2, r2, #4
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e007      	b.n	8005768 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0204 	bic.w	r2, r2, #4
 8005766:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d003      	beq.n	80057ce <HAL_CAN_ConfigFilter+0x26>
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f040 80be 	bne.w	800594a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80057ce:	4b65      	ldr	r3, [pc, #404]	; (8005964 <HAL_CAN_ConfigFilter+0x1bc>)
 80057d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	431a      	orrs	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2201      	movs	r2, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	43db      	mvns	r3, r3
 8005820:	401a      	ands	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d123      	bne.n	8005878 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005852:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3248      	adds	r2, #72	; 0x48
 8005858:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800586c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800586e:	6979      	ldr	r1, [r7, #20]
 8005870:	3348      	adds	r3, #72	; 0x48
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	440b      	add	r3, r1
 8005876:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d122      	bne.n	80058c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	431a      	orrs	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3248      	adds	r2, #72	; 0x48
 80058a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	3348      	adds	r3, #72	; 0x48
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	401a      	ands	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80058e0:	e007      	b.n	80058f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	43db      	mvns	r3, r3
 8005904:	401a      	ands	r2, r3
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800590c:	e007      	b.n	800591e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	431a      	orrs	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d107      	bne.n	8005936 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	431a      	orrs	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800593c:	f023 0201 	bic.w	r2, r3, #1
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e006      	b.n	8005958 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
  }
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40006400 	.word	0x40006400

08005968 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d12e      	bne.n	80059da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005994:	f7ff fddc 	bl	8005550 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800599a:	e012      	b.n	80059c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800599c:	f7ff fdd8 	bl	8005550 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b0a      	cmp	r3, #10
 80059a8:	d90b      	bls.n	80059c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2205      	movs	r2, #5
 80059ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e012      	b.n	80059e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e006      	b.n	80059e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a0e:	7ffb      	ldrb	r3, [r7, #31]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d003      	beq.n	8005a1c <HAL_CAN_AddTxMessage+0x2c>
 8005a14:	7ffb      	ldrb	r3, [r7, #31]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	f040 80ad 	bne.w	8005b76 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8095 	beq.w	8005b66 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005a46:	2201      	movs	r2, #1
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	6809      	ldr	r1, [r1, #0]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	440b      	add	r3, r1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e00f      	b.n	8005a94 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a84:	68f9      	ldr	r1, [r7, #12]
 8005a86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005a88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	440b      	add	r3, r1
 8005a92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	7d1b      	ldrb	r3, [r3, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d111      	bne.n	8005ad4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	6811      	ldr	r1, [r2, #0]
 8005ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3318      	adds	r3, #24
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	440b      	add	r3, r1
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3307      	adds	r3, #7
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	061a      	lsls	r2, r3, #24
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3306      	adds	r3, #6
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3305      	adds	r3, #5
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4313      	orrs	r3, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	3204      	adds	r2, #4
 8005af4:	7812      	ldrb	r2, [r2, #0]
 8005af6:	4610      	mov	r0, r2
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6811      	ldr	r1, [r2, #0]
 8005afc:	ea43 0200 	orr.w	r2, r3, r0
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	440b      	add	r3, r1
 8005b06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3303      	adds	r3, #3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	061a      	lsls	r2, r3, #24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3302      	adds	r3, #2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3301      	adds	r3, #1
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	4313      	orrs	r3, r2
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6811      	ldr	r1, [r2, #0]
 8005b32:	ea43 0200 	orr.w	r2, r3, r0
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005b40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3318      	adds	r3, #24
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	6811      	ldr	r1, [r2, #0]
 8005b54:	f043 0201 	orr.w	r2, r3, #1
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	440b      	add	r3, r1
 8005b60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e00e      	b.n	8005b84 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e006      	b.n	8005b84 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3724      	adds	r7, #36	; 0x24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ba4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <HAL_CAN_GetRxMessage+0x24>
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 8103 	bne.w	8005dba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0f7      	b.n	8005dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0e8      	b.n	8005dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	331b      	adds	r3, #27
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	4413      	add	r3, r2
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0204 	and.w	r2, r3, #4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10c      	bne.n	8005c2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	331b      	adds	r3, #27
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	4413      	add	r3, r2
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	0d5b      	lsrs	r3, r3, #21
 8005c24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e00b      	b.n	8005c46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	331b      	adds	r3, #27
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	331b      	adds	r3, #27
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	4413      	add	r3, r2
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0202 	and.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	331b      	adds	r3, #27
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	3304      	adds	r3, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2208      	movs	r2, #8
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	e00b      	b.n	8005c94 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	331b      	adds	r3, #27
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	331b      	adds	r3, #27
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	331b      	adds	r3, #27
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	0a1a      	lsrs	r2, r3, #8
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	0c1a      	lsrs	r2, r3, #16
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	3302      	adds	r3, #2
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	0e1a      	lsrs	r2, r3, #24
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3303      	adds	r3, #3
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0a1a      	lsrs	r2, r3, #8
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3305      	adds	r3, #5
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	0c1a      	lsrs	r2, r3, #16
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	3306      	adds	r3, #6
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0e1a      	lsrs	r2, r3, #24
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d108      	bne.n	8005da6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0220 	orr.w	r2, r2, #32
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	e007      	b.n	8005db6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0220 	orr.w	r2, r2, #32
 8005db4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e006      	b.n	8005dc8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005de4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d002      	beq.n	8005df2 <HAL_CAN_ActivateNotification+0x1e>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d109      	bne.n	8005e06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6959      	ldr	r1, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e006      	b.n	8005e14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d07c      	beq.n	8005f60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d023      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2201      	movs	r2, #1
 8005e76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f983 	bl	800618e <HAL_CAN_TxMailbox0CompleteCallback>
 8005e88:	e016      	b.n	8005eb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9c:	e00c      	b.n	8005eb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb0:	e002      	b.n	8005eb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f989 	bl	80061ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d024      	beq.n	8005f0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f963 	bl	80061a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8005edc:	e016      	b.n	8005f0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	e00c      	b.n	8005f0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
 8005f04:	e002      	b.n	8005f0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f969 	bl	80061de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d024      	beq.n	8005f60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f943 	bl	80061b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005f30:	e016      	b.n	8005f60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
 8005f44:	e00c      	b.n	8005f60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	e002      	b.n	8005f60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f949 	bl	80061f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2210      	movs	r2, #16
 8005f82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f930 	bl	8006206 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc fc74 	bl	80028ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d006      	beq.n	800600a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2208      	movs	r2, #8
 8006002:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f908 	bl	800621a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fc fd4e 	bl	8002ac4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2210      	movs	r2, #16
 8006042:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f8f2 	bl	800622e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d006      	beq.n	800606c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2208      	movs	r2, #8
 8006064:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8eb 	bl	8006242 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d07b      	beq.n	800616e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d072      	beq.n	8006166 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d043      	beq.n	8006166 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03e      	beq.n	8006166 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ee:	2b60      	cmp	r3, #96	; 0x60
 80060f0:	d02b      	beq.n	800614a <HAL_CAN_IRQHandler+0x32a>
 80060f2:	2b60      	cmp	r3, #96	; 0x60
 80060f4:	d82e      	bhi.n	8006154 <HAL_CAN_IRQHandler+0x334>
 80060f6:	2b50      	cmp	r3, #80	; 0x50
 80060f8:	d022      	beq.n	8006140 <HAL_CAN_IRQHandler+0x320>
 80060fa:	2b50      	cmp	r3, #80	; 0x50
 80060fc:	d82a      	bhi.n	8006154 <HAL_CAN_IRQHandler+0x334>
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d019      	beq.n	8006136 <HAL_CAN_IRQHandler+0x316>
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d826      	bhi.n	8006154 <HAL_CAN_IRQHandler+0x334>
 8006106:	2b30      	cmp	r3, #48	; 0x30
 8006108:	d010      	beq.n	800612c <HAL_CAN_IRQHandler+0x30c>
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d822      	bhi.n	8006154 <HAL_CAN_IRQHandler+0x334>
 800610e:	2b10      	cmp	r3, #16
 8006110:	d002      	beq.n	8006118 <HAL_CAN_IRQHandler+0x2f8>
 8006112:	2b20      	cmp	r3, #32
 8006114:	d005      	beq.n	8006122 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006116:	e01d      	b.n	8006154 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f043 0308 	orr.w	r3, r3, #8
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006120:	e019      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	f043 0310 	orr.w	r3, r3, #16
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800612a:	e014      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006134:	e00f      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800613e:	e00a      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006148:	e005      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006152:	e000      	b.n	8006156 <HAL_CAN_IRQHandler+0x336>
            break;
 8006154:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006164:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2204      	movs	r2, #4
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f868 	bl	8006256 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <__NVIC_SetPriorityGrouping+0x44>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800629e:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <__NVIC_SetPriorityGrouping+0x44>)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	60d3      	str	r3, [r2, #12]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <__NVIC_GetPriorityGrouping+0x18>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 0307 	and.w	r3, r3, #7
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db0b      	blt.n	80062fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	f003 021f 	and.w	r2, r3, #31
 80062e8:	4907      	ldr	r1, [pc, #28]	; (8006308 <__NVIC_EnableIRQ+0x38>)
 80062ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2001      	movs	r0, #1
 80062f2:	fa00 f202 	lsl.w	r2, r0, r2
 80062f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	e000e100 	.word	0xe000e100

0800630c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631c:	2b00      	cmp	r3, #0
 800631e:	db0a      	blt.n	8006336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	490c      	ldr	r1, [pc, #48]	; (8006358 <__NVIC_SetPriority+0x4c>)
 8006326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632a:	0112      	lsls	r2, r2, #4
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	440b      	add	r3, r1
 8006330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006334:	e00a      	b.n	800634c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4908      	ldr	r1, [pc, #32]	; (800635c <__NVIC_SetPriority+0x50>)
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	3b04      	subs	r3, #4
 8006344:	0112      	lsls	r2, r2, #4
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	440b      	add	r3, r1
 800634a:	761a      	strb	r2, [r3, #24]
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	e000e100 	.word	0xe000e100
 800635c:	e000ed00 	.word	0xe000ed00

08006360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f1c3 0307 	rsb	r3, r3, #7
 800637a:	2b04      	cmp	r3, #4
 800637c:	bf28      	it	cs
 800637e:	2304      	movcs	r3, #4
 8006380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3304      	adds	r3, #4
 8006386:	2b06      	cmp	r3, #6
 8006388:	d902      	bls.n	8006390 <NVIC_EncodePriority+0x30>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3b03      	subs	r3, #3
 800638e:	e000      	b.n	8006392 <NVIC_EncodePriority+0x32>
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	43da      	mvns	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	401a      	ands	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063a8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	43d9      	mvns	r1, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b8:	4313      	orrs	r3, r2
         );
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3724      	adds	r7, #36	; 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063d8:	d301      	bcc.n	80063de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063da:	2301      	movs	r3, #1
 80063dc:	e00f      	b.n	80063fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063de:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <SysTick_Config+0x40>)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063e6:	210f      	movs	r1, #15
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	f7ff ff8e 	bl	800630c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <SysTick_Config+0x40>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063f6:	4b04      	ldr	r3, [pc, #16]	; (8006408 <SysTick_Config+0x40>)
 80063f8:	2207      	movs	r2, #7
 80063fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	e000e010 	.word	0xe000e010

0800640c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff29 	bl	800626c <__NVIC_SetPriorityGrouping>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006434:	f7ff ff3e 	bl	80062b4 <__NVIC_GetPriorityGrouping>
 8006438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	6978      	ldr	r0, [r7, #20]
 8006440:	f7ff ff8e 	bl	8006360 <NVIC_EncodePriority>
 8006444:	4602      	mov	r2, r0
 8006446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ff5d 	bl	800630c <__NVIC_SetPriority>
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	4603      	mov	r3, r0
 8006462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff31 	bl	80062d0 <__NVIC_EnableIRQ>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ffa2 	bl	80063c8 <SysTick_Config>
 8006484:	4603      	mov	r3, r0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	; 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e165      	b.n	8006778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064ac:	2201      	movs	r2, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 8154 	bne.w	8006772 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d005      	beq.n	80064e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d130      	bne.n	8006544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	2203      	movs	r2, #3
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006518:	2201      	movs	r2, #1
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 0201 	and.w	r2, r3, #1
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b03      	cmp	r3, #3
 800654e:	d017      	beq.n	8006580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	2203      	movs	r2, #3
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d123      	bne.n	80065d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	08da      	lsrs	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3208      	adds	r2, #8
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	220f      	movs	r2, #15
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	08da      	lsrs	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3208      	adds	r2, #8
 80065ce:	69b9      	ldr	r1, [r7, #24]
 80065d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	2203      	movs	r2, #3
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0203 	and.w	r2, r3, #3
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80ae 	beq.w	8006772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	4b5d      	ldr	r3, [pc, #372]	; (8006790 <HAL_GPIO_Init+0x300>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	4a5c      	ldr	r2, [pc, #368]	; (8006790 <HAL_GPIO_Init+0x300>)
 8006620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006624:	6453      	str	r3, [r2, #68]	; 0x44
 8006626:	4b5a      	ldr	r3, [pc, #360]	; (8006790 <HAL_GPIO_Init+0x300>)
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006632:	4a58      	ldr	r2, [pc, #352]	; (8006794 <HAL_GPIO_Init+0x304>)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	3302      	adds	r3, #2
 800663a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	220f      	movs	r2, #15
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4013      	ands	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a4f      	ldr	r2, [pc, #316]	; (8006798 <HAL_GPIO_Init+0x308>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d025      	beq.n	80066aa <HAL_GPIO_Init+0x21a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a4e      	ldr	r2, [pc, #312]	; (800679c <HAL_GPIO_Init+0x30c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <HAL_GPIO_Init+0x216>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a4d      	ldr	r2, [pc, #308]	; (80067a0 <HAL_GPIO_Init+0x310>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d019      	beq.n	80066a2 <HAL_GPIO_Init+0x212>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4c      	ldr	r2, [pc, #304]	; (80067a4 <HAL_GPIO_Init+0x314>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_GPIO_Init+0x20e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a4b      	ldr	r2, [pc, #300]	; (80067a8 <HAL_GPIO_Init+0x318>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00d      	beq.n	800669a <HAL_GPIO_Init+0x20a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a4a      	ldr	r2, [pc, #296]	; (80067ac <HAL_GPIO_Init+0x31c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <HAL_GPIO_Init+0x206>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a49      	ldr	r2, [pc, #292]	; (80067b0 <HAL_GPIO_Init+0x320>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_GPIO_Init+0x202>
 800668e:	2306      	movs	r3, #6
 8006690:	e00c      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 8006692:	2307      	movs	r3, #7
 8006694:	e00a      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 8006696:	2305      	movs	r3, #5
 8006698:	e008      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 800669a:	2304      	movs	r3, #4
 800669c:	e006      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 800669e:	2303      	movs	r3, #3
 80066a0:	e004      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e002      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <HAL_GPIO_Init+0x21c>
 80066aa:	2300      	movs	r3, #0
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	f002 0203 	and.w	r2, r2, #3
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	4093      	lsls	r3, r2
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066bc:	4935      	ldr	r1, [pc, #212]	; (8006794 <HAL_GPIO_Init+0x304>)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	089b      	lsrs	r3, r3, #2
 80066c2:	3302      	adds	r3, #2
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066ca:	4b3a      	ldr	r3, [pc, #232]	; (80067b4 <HAL_GPIO_Init+0x324>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	43db      	mvns	r3, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066ee:	4a31      	ldr	r2, [pc, #196]	; (80067b4 <HAL_GPIO_Init+0x324>)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066f4:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <HAL_GPIO_Init+0x324>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006718:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_GPIO_Init+0x324>)
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800671e:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <HAL_GPIO_Init+0x324>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006742:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <HAL_GPIO_Init+0x324>)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006748:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <HAL_GPIO_Init+0x324>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800676c:	4a11      	ldr	r2, [pc, #68]	; (80067b4 <HAL_GPIO_Init+0x324>)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	f67f ae96 	bls.w	80064ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	40013800 	.word	0x40013800
 8006798:	40020000 	.word	0x40020000
 800679c:	40020400 	.word	0x40020400
 80067a0:	40020800 	.word	0x40020800
 80067a4:	40020c00 	.word	0x40020c00
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40021400 	.word	0x40021400
 80067b0:	40021800 	.word	0x40021800
 80067b4:	40013c00 	.word	0x40013c00

080067b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	807b      	strh	r3, [r7, #2]
 80067c4:	4613      	mov	r3, r2
 80067c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067c8:	787b      	ldrb	r3, [r7, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067d4:	e003      	b.n	80067de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067d6:	887b      	ldrh	r3, [r7, #2]
 80067d8:	041a      	lsls	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	619a      	str	r2, [r3, #24]
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0cc      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006800:	4b68      	ldr	r3, [pc, #416]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d90c      	bls.n	8006828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b65      	ldr	r3, [pc, #404]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0b8      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006840:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800684a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006858:	4b53      	ldr	r3, [pc, #332]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4a52      	ldr	r2, [pc, #328]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006864:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	494d      	ldr	r1, [pc, #308]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d044      	beq.n	800690c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d119      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d003      	beq.n	80068aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d107      	bne.n	80068ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068aa:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e06f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ba:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e067      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f023 0203 	bic.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4934      	ldr	r1, [pc, #208]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068dc:	f7fe fe38 	bl	8005550 <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e4:	f7fe fe34 	bl	8005550 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e04f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fa:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 020c 	and.w	r2, r3, #12
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	429a      	cmp	r2, r3
 800690a:	d1eb      	bne.n	80068e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d20c      	bcs.n	8006934 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e032      	b.n	800699a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	490e      	ldr	r1, [pc, #56]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006972:	f000 f821 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006976:	4602      	mov	r2, r0
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	490a      	ldr	r1, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	5ccb      	ldrb	r3, [r1, r3]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fd98 	bl	80054c8 <HAL_InitTick>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023c00 	.word	0x40023c00
 80069a8:	40023800 	.word	0x40023800
 80069ac:	0800b070 	.word	0x0800b070
 80069b0:	20000004 	.word	0x20000004
 80069b4:	20000008 	.word	0x20000008

080069b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069bc:	b0ae      	sub	sp, #184	; 0xb8
 80069be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069de:	4bcb      	ldr	r3, [pc, #812]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	f200 8206 	bhi.w	8006df8 <HAL_RCC_GetSysClockFreq+0x440>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a29 	.word	0x08006a29
 80069f8:	08006df9 	.word	0x08006df9
 80069fc:	08006df9 	.word	0x08006df9
 8006a00:	08006df9 	.word	0x08006df9
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006df9 	.word	0x08006df9
 8006a0c:	08006df9 	.word	0x08006df9
 8006a10:	08006df9 	.word	0x08006df9
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006df9 	.word	0x08006df9
 8006a1c:	08006df9 	.word	0x08006df9
 8006a20:	08006df9 	.word	0x08006df9
 8006a24:	08006c29 	.word	0x08006c29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4bb9      	ldr	r3, [pc, #740]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006a2e:	e1e7      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a30:	4bb8      	ldr	r3, [pc, #736]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006a36:	e1e3      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a38:	4bb4      	ldr	r3, [pc, #720]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a44:	4bb1      	ldr	r3, [pc, #708]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d071      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a50:	4bae      	ldr	r3, [pc, #696]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	099b      	lsrs	r3, r3, #6
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a76:	4622      	mov	r2, r4
 8006a78:	462b      	mov	r3, r5
 8006a7a:	f04f 0000 	mov.w	r0, #0
 8006a7e:	f04f 0100 	mov.w	r1, #0
 8006a82:	0159      	lsls	r1, r3, #5
 8006a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a88:	0150      	lsls	r0, r2, #5
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4621      	mov	r1, r4
 8006a90:	1a51      	subs	r1, r2, r1
 8006a92:	6439      	str	r1, [r7, #64]	; 0x40
 8006a94:	4629      	mov	r1, r5
 8006a96:	eb63 0301 	sbc.w	r3, r3, r1
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	018b      	lsls	r3, r1, #6
 8006aac:	4641      	mov	r1, r8
 8006aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	018a      	lsls	r2, r1, #6
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	1a51      	subs	r1, r2, r1
 8006aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8006abc:	4649      	mov	r1, r9
 8006abe:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	00cb      	lsls	r3, r1, #3
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ada:	4641      	mov	r1, r8
 8006adc:	00ca      	lsls	r2, r1, #3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aea:	462b      	mov	r3, r5
 8006aec:	460a      	mov	r2, r1
 8006aee:	eb42 0303 	adc.w	r3, r2, r3
 8006af2:	637b      	str	r3, [r7, #52]	; 0x34
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b00:	4629      	mov	r1, r5
 8006b02:	024b      	lsls	r3, r1, #9
 8006b04:	4621      	mov	r1, r4
 8006b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	024a      	lsls	r2, r1, #9
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006b24:	f7fa f860 	bl	8000be8 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b32:	e067      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b34:	4b75      	ldr	r3, [pc, #468]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	099b      	lsrs	r3, r3, #6
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b4e:	2300      	movs	r3, #0
 8006b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f04f 0000 	mov.w	r0, #0
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	0159      	lsls	r1, r3, #5
 8006b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b68:	0150      	lsls	r0, r2, #5
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4621      	mov	r1, r4
 8006b70:	1a51      	subs	r1, r2, r1
 8006b72:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b74:	4629      	mov	r1, r5
 8006b76:	eb63 0301 	sbc.w	r3, r3, r1
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006b88:	4649      	mov	r1, r9
 8006b8a:	018b      	lsls	r3, r1, #6
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b92:	4641      	mov	r1, r8
 8006b94:	018a      	lsls	r2, r1, #6
 8006b96:	4641      	mov	r1, r8
 8006b98:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bb6:	4692      	mov	sl, r2
 8006bb8:	469b      	mov	fp, r3
 8006bba:	4623      	mov	r3, r4
 8006bbc:	eb1a 0303 	adds.w	r3, sl, r3
 8006bc0:	623b      	str	r3, [r7, #32]
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	028b      	lsls	r3, r1, #10
 8006bda:	4621      	mov	r1, r4
 8006bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be0:	4621      	mov	r1, r4
 8006be2:	028a      	lsls	r2, r1, #10
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bec:	2200      	movs	r2, #0
 8006bee:	673b      	str	r3, [r7, #112]	; 0x70
 8006bf0:	677a      	str	r2, [r7, #116]	; 0x74
 8006bf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006bf6:	f7f9 fff7 	bl	8000be8 <__aeabi_uldivmod>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4613      	mov	r3, r2
 8006c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c04:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8006c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c26:	e0eb      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c28:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d06b      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c40:	4b32      	ldr	r3, [pc, #200]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	099b      	lsrs	r3, r3, #6
 8006c46:	2200      	movs	r2, #0
 8006c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	663b      	str	r3, [r7, #96]	; 0x60
 8006c54:	2300      	movs	r3, #0
 8006c56:	667b      	str	r3, [r7, #100]	; 0x64
 8006c58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	462b      	mov	r3, r5
 8006c60:	f04f 0000 	mov.w	r0, #0
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	0159      	lsls	r1, r3, #5
 8006c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c6e:	0150      	lsls	r0, r2, #5
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4621      	mov	r1, r4
 8006c76:	1a51      	subs	r1, r2, r1
 8006c78:	61b9      	str	r1, [r7, #24]
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006c8e:	4659      	mov	r1, fp
 8006c90:	018b      	lsls	r3, r1, #6
 8006c92:	4651      	mov	r1, sl
 8006c94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c98:	4651      	mov	r1, sl
 8006c9a:	018a      	lsls	r2, r1, #6
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	ebb2 0801 	subs.w	r8, r2, r1
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	eb63 0901 	sbc.w	r9, r3, r1
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cbc:	4690      	mov	r8, r2
 8006cbe:	4699      	mov	r9, r3
 8006cc0:	4623      	mov	r3, r4
 8006cc2:	eb18 0303 	adds.w	r3, r8, r3
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	462b      	mov	r3, r5
 8006cca:	eb49 0303 	adc.w	r3, r9, r3
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006cdc:	4629      	mov	r1, r5
 8006cde:	024b      	lsls	r3, r1, #9
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	024a      	lsls	r2, r1, #9
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006cf8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cfc:	f7f9 ff74 	bl	8000be8 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4613      	mov	r3, r2
 8006d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d0a:	e065      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x420>
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d18:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	2200      	movs	r2, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	4611      	mov	r1, r2
 8006d24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d28:	653b      	str	r3, [r7, #80]	; 0x50
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006d32:	4642      	mov	r2, r8
 8006d34:	464b      	mov	r3, r9
 8006d36:	f04f 0000 	mov.w	r0, #0
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	0159      	lsls	r1, r3, #5
 8006d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d44:	0150      	lsls	r0, r2, #5
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	1a51      	subs	r1, r2, r1
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	4649      	mov	r1, r9
 8006d52:	eb63 0301 	sbc.w	r3, r3, r1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006d64:	4659      	mov	r1, fp
 8006d66:	018b      	lsls	r3, r1, #6
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d6e:	4651      	mov	r1, sl
 8006d70:	018a      	lsls	r2, r1, #6
 8006d72:	4651      	mov	r1, sl
 8006d74:	1a54      	subs	r4, r2, r1
 8006d76:	4659      	mov	r1, fp
 8006d78:	eb63 0501 	sbc.w	r5, r3, r1
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	00eb      	lsls	r3, r5, #3
 8006d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d8a:	00e2      	lsls	r2, r4, #3
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	4643      	mov	r3, r8
 8006d92:	18e3      	adds	r3, r4, r3
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	464b      	mov	r3, r9
 8006d98:	eb45 0303 	adc.w	r3, r5, r3
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006daa:	4629      	mov	r1, r5
 8006dac:	028b      	lsls	r3, r1, #10
 8006dae:	4621      	mov	r1, r4
 8006db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db4:	4621      	mov	r1, r4
 8006db6:	028a      	lsls	r2, r1, #10
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006dc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dca:	f7f9 ff0d 	bl	8000be8 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x458>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	0f1b      	lsrs	r3, r3, #28
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8006de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006df6:	e003      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006dfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	37b8      	adds	r7, #184	; 0xb8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800
 8006e14:	00f42400 	.word	0x00f42400

08006e18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e28d      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8083 	beq.w	8006f3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e38:	4b94      	ldr	r3, [pc, #592]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 030c 	and.w	r3, r3, #12
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d019      	beq.n	8006e78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e44:	4b91      	ldr	r3, [pc, #580]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d106      	bne.n	8006e5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e50:	4b8e      	ldr	r3, [pc, #568]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e5c:	d00c      	beq.n	8006e78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e5e:	4b8b      	ldr	r3, [pc, #556]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d112      	bne.n	8006e90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e6a:	4b88      	ldr	r3, [pc, #544]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e76:	d10b      	bne.n	8006e90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e78:	4b84      	ldr	r3, [pc, #528]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05b      	beq.n	8006f3c <HAL_RCC_OscConfig+0x124>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d157      	bne.n	8006f3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e25a      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x90>
 8006e9a:	4b7c      	ldr	r3, [pc, #496]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7b      	ldr	r2, [pc, #492]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e01d      	b.n	8006ee4 <HAL_RCC_OscConfig+0xcc>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCC_OscConfig+0xb4>
 8006eb2:	4b76      	ldr	r3, [pc, #472]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a75      	ldr	r2, [pc, #468]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4b73      	ldr	r3, [pc, #460]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a72      	ldr	r2, [pc, #456]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCC_OscConfig+0xcc>
 8006ecc:	4b6f      	ldr	r3, [pc, #444]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6e      	ldr	r2, [pc, #440]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4b6c      	ldr	r3, [pc, #432]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6b      	ldr	r2, [pc, #428]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fe fb30 	bl	8005550 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef4:	f7fe fb2c 	bl	8005550 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	; 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e21f      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f06:	4b61      	ldr	r3, [pc, #388]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0xdc>
 8006f12:	e014      	b.n	8006f3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fe fb1c 	bl	8005550 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f1c:	f7fe fb18 	bl	8005550 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b64      	cmp	r3, #100	; 0x64
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e20b      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f2e:	4b57      	ldr	r3, [pc, #348]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x104>
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d06f      	beq.n	800702a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f4a:	4b50      	ldr	r3, [pc, #320]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d017      	beq.n	8006f86 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f56:	4b4d      	ldr	r3, [pc, #308]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d105      	bne.n	8006f6e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f62:	4b4a      	ldr	r3, [pc, #296]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6e:	4b47      	ldr	r3, [pc, #284]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f76:	2b0c      	cmp	r3, #12
 8006f78:	d11c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f7a:	4b44      	ldr	r3, [pc, #272]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f86:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_RCC_OscConfig+0x186>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d001      	beq.n	8006f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1d3      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9e:	4b3b      	ldr	r3, [pc, #236]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4937      	ldr	r1, [pc, #220]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb2:	e03a      	b.n	800702a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fbc:	4b34      	ldr	r3, [pc, #208]	; (8007090 <HAL_RCC_OscConfig+0x278>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fe fac5 	bl	8005550 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fca:	f7fe fac1 	bl	8005550 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e1b4      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe8:	4b28      	ldr	r3, [pc, #160]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4925      	ldr	r1, [pc, #148]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
 8006ffc:	e015      	b.n	800702a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <HAL_RCC_OscConfig+0x278>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fe faa4 	bl	8005550 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700c:	f7fe faa0 	bl	8005550 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e193      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d036      	beq.n	80070a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <HAL_RCC_OscConfig+0x27c>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fe fa84 	bl	8005550 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800704c:	f7fe fa80 	bl	8005550 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e173      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_RCC_OscConfig+0x274>)
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x234>
 800706a:	e01b      	b.n	80070a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <HAL_RCC_OscConfig+0x27c>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007072:	f7fe fa6d 	bl	8005550 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007078:	e00e      	b.n	8007098 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800707a:	f7fe fa69 	bl	8005550 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d907      	bls.n	8007098 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e15c      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
 800708c:	40023800 	.word	0x40023800
 8007090:	42470000 	.word	0x42470000
 8007094:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007098:	4b8a      	ldr	r3, [pc, #552]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800709a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ea      	bne.n	800707a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8097 	beq.w	80071e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070b6:	4b83      	ldr	r3, [pc, #524]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	4b7f      	ldr	r3, [pc, #508]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	4a7e      	ldr	r2, [pc, #504]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d0:	6413      	str	r3, [r2, #64]	; 0x40
 80070d2:	4b7c      	ldr	r3, [pc, #496]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e2:	4b79      	ldr	r3, [pc, #484]	; (80072c8 <HAL_RCC_OscConfig+0x4b0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d118      	bne.n	8007120 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ee:	4b76      	ldr	r3, [pc, #472]	; (80072c8 <HAL_RCC_OscConfig+0x4b0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a75      	ldr	r2, [pc, #468]	; (80072c8 <HAL_RCC_OscConfig+0x4b0>)
 80070f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070fa:	f7fe fa29 	bl	8005550 <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007102:	f7fe fa25 	bl	8005550 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e118      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007114:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <HAL_RCC_OscConfig+0x4b0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d106      	bne.n	8007136 <HAL_RCC_OscConfig+0x31e>
 8007128:	4b66      	ldr	r3, [pc, #408]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	4a65      	ldr	r2, [pc, #404]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	6713      	str	r3, [r2, #112]	; 0x70
 8007134:	e01c      	b.n	8007170 <HAL_RCC_OscConfig+0x358>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d10c      	bne.n	8007158 <HAL_RCC_OscConfig+0x340>
 800713e:	4b61      	ldr	r3, [pc, #388]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	4a60      	ldr	r2, [pc, #384]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007144:	f043 0304 	orr.w	r3, r3, #4
 8007148:	6713      	str	r3, [r2, #112]	; 0x70
 800714a:	4b5e      	ldr	r3, [pc, #376]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	4a5d      	ldr	r2, [pc, #372]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	6713      	str	r3, [r2, #112]	; 0x70
 8007156:	e00b      	b.n	8007170 <HAL_RCC_OscConfig+0x358>
 8007158:	4b5a      	ldr	r3, [pc, #360]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	4a59      	ldr	r2, [pc, #356]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	6713      	str	r3, [r2, #112]	; 0x70
 8007164:	4b57      	ldr	r3, [pc, #348]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	4a56      	ldr	r2, [pc, #344]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800716a:	f023 0304 	bic.w	r3, r3, #4
 800716e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007178:	f7fe f9ea 	bl	8005550 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	e00a      	b.n	8007196 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007180:	f7fe f9e6 	bl	8005550 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e0d7      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007196:	4b4b      	ldr	r3, [pc, #300]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0ee      	beq.n	8007180 <HAL_RCC_OscConfig+0x368>
 80071a2:	e014      	b.n	80071ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a4:	f7fe f9d4 	bl	8005550 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071aa:	e00a      	b.n	80071c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ac:	f7fe f9d0 	bl	8005550 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e0c1      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c2:	4b40      	ldr	r3, [pc, #256]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1ee      	bne.n	80071ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d105      	bne.n	80071e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071d4:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	4a3a      	ldr	r2, [pc, #232]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80071da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80ad 	beq.w	8007344 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ea:	4b36      	ldr	r3, [pc, #216]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d060      	beq.n	80072b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d145      	bne.n	800728a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071fe:	4b33      	ldr	r3, [pc, #204]	; (80072cc <HAL_RCC_OscConfig+0x4b4>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fe f9a4 	bl	8005550 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800720c:	f7fe f9a0 	bl	8005550 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e093      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800721e:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f0      	bne.n	800720c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	019b      	lsls	r3, r3, #6
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	3b01      	subs	r3, #1
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	071b      	lsls	r3, r3, #28
 8007256:	491b      	ldr	r1, [pc, #108]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 8007258:	4313      	orrs	r3, r2
 800725a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <HAL_RCC_OscConfig+0x4b4>)
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fe f975 	bl	8005550 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726a:	f7fe f971 	bl	8005550 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e064      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800727c:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f0      	beq.n	800726a <HAL_RCC_OscConfig+0x452>
 8007288:	e05c      	b.n	8007344 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_RCC_OscConfig+0x4b4>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fe f95e 	bl	8005550 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007298:	f7fe f95a 	bl	8005550 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e04d      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <HAL_RCC_OscConfig+0x4ac>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0x480>
 80072b6:	e045      	b.n	8007344 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d107      	bne.n	80072d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e040      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
 80072c4:	40023800 	.word	0x40023800
 80072c8:	40007000 	.word	0x40007000
 80072cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072d0:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <HAL_RCC_OscConfig+0x538>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d030      	beq.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d129      	bne.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d122      	bne.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007300:	4013      	ands	r3, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007308:	4293      	cmp	r3, r2
 800730a:	d119      	bne.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	3b01      	subs	r3, #1
 800731a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d10f      	bne.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d107      	bne.n	8007340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800

08007354 <__assert_func>:
 8007354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007356:	4614      	mov	r4, r2
 8007358:	461a      	mov	r2, r3
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <__assert_func+0x2c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4605      	mov	r5, r0
 8007360:	68d8      	ldr	r0, [r3, #12]
 8007362:	b14c      	cbz	r4, 8007378 <__assert_func+0x24>
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <__assert_func+0x30>)
 8007366:	9100      	str	r1, [sp, #0]
 8007368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800736c:	4906      	ldr	r1, [pc, #24]	; (8007388 <__assert_func+0x34>)
 800736e:	462b      	mov	r3, r5
 8007370:	f000 fdd4 	bl	8007f1c <fiprintf>
 8007374:	f000 fefd 	bl	8008172 <abort>
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <__assert_func+0x38>)
 800737a:	461c      	mov	r4, r3
 800737c:	e7f3      	b.n	8007366 <__assert_func+0x12>
 800737e:	bf00      	nop
 8007380:	20000068 	.word	0x20000068
 8007384:	0800b544 	.word	0x0800b544
 8007388:	0800b551 	.word	0x0800b551
 800738c:	0800b57f 	.word	0x0800b57f

08007390 <malloc>:
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <malloc+0xc>)
 8007392:	4601      	mov	r1, r0
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	f000 b82b 	b.w	80073f0 <_malloc_r>
 800739a:	bf00      	nop
 800739c:	20000068 	.word	0x20000068

080073a0 <free>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <free+0xc>)
 80073a2:	4601      	mov	r1, r0
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	f001 bd65 	b.w	8008e74 <_free_r>
 80073aa:	bf00      	nop
 80073ac:	20000068 	.word	0x20000068

080073b0 <sbrk_aligned>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4e0e      	ldr	r6, [pc, #56]	; (80073ec <sbrk_aligned+0x3c>)
 80073b4:	460c      	mov	r4, r1
 80073b6:	6831      	ldr	r1, [r6, #0]
 80073b8:	4605      	mov	r5, r0
 80073ba:	b911      	cbnz	r1, 80073c2 <sbrk_aligned+0x12>
 80073bc:	f000 fe7c 	bl	80080b8 <_sbrk_r>
 80073c0:	6030      	str	r0, [r6, #0]
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fe77 	bl	80080b8 <_sbrk_r>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d00a      	beq.n	80073e4 <sbrk_aligned+0x34>
 80073ce:	1cc4      	adds	r4, r0, #3
 80073d0:	f024 0403 	bic.w	r4, r4, #3
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d007      	beq.n	80073e8 <sbrk_aligned+0x38>
 80073d8:	1a21      	subs	r1, r4, r0
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 fe6c 	bl	80080b8 <_sbrk_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d101      	bne.n	80073e8 <sbrk_aligned+0x38>
 80073e4:	f04f 34ff 	mov.w	r4, #4294967295
 80073e8:	4620      	mov	r0, r4
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	20000494 	.word	0x20000494

080073f0 <_malloc_r>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	1ccd      	adds	r5, r1, #3
 80073f6:	f025 0503 	bic.w	r5, r5, #3
 80073fa:	3508      	adds	r5, #8
 80073fc:	2d0c      	cmp	r5, #12
 80073fe:	bf38      	it	cc
 8007400:	250c      	movcc	r5, #12
 8007402:	2d00      	cmp	r5, #0
 8007404:	4607      	mov	r7, r0
 8007406:	db01      	blt.n	800740c <_malloc_r+0x1c>
 8007408:	42a9      	cmp	r1, r5
 800740a:	d905      	bls.n	8007418 <_malloc_r+0x28>
 800740c:	230c      	movs	r3, #12
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	2600      	movs	r6, #0
 8007412:	4630      	mov	r0, r6
 8007414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007418:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074ec <_malloc_r+0xfc>
 800741c:	f000 f868 	bl	80074f0 <__malloc_lock>
 8007420:	f8d8 3000 	ldr.w	r3, [r8]
 8007424:	461c      	mov	r4, r3
 8007426:	bb5c      	cbnz	r4, 8007480 <_malloc_r+0x90>
 8007428:	4629      	mov	r1, r5
 800742a:	4638      	mov	r0, r7
 800742c:	f7ff ffc0 	bl	80073b0 <sbrk_aligned>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	4604      	mov	r4, r0
 8007434:	d155      	bne.n	80074e2 <_malloc_r+0xf2>
 8007436:	f8d8 4000 	ldr.w	r4, [r8]
 800743a:	4626      	mov	r6, r4
 800743c:	2e00      	cmp	r6, #0
 800743e:	d145      	bne.n	80074cc <_malloc_r+0xdc>
 8007440:	2c00      	cmp	r4, #0
 8007442:	d048      	beq.n	80074d6 <_malloc_r+0xe6>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	4631      	mov	r1, r6
 8007448:	4638      	mov	r0, r7
 800744a:	eb04 0903 	add.w	r9, r4, r3
 800744e:	f000 fe33 	bl	80080b8 <_sbrk_r>
 8007452:	4581      	cmp	r9, r0
 8007454:	d13f      	bne.n	80074d6 <_malloc_r+0xe6>
 8007456:	6821      	ldr	r1, [r4, #0]
 8007458:	1a6d      	subs	r5, r5, r1
 800745a:	4629      	mov	r1, r5
 800745c:	4638      	mov	r0, r7
 800745e:	f7ff ffa7 	bl	80073b0 <sbrk_aligned>
 8007462:	3001      	adds	r0, #1
 8007464:	d037      	beq.n	80074d6 <_malloc_r+0xe6>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	442b      	add	r3, r5
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	f8d8 3000 	ldr.w	r3, [r8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d038      	beq.n	80074e6 <_malloc_r+0xf6>
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	42a2      	cmp	r2, r4
 8007478:	d12b      	bne.n	80074d2 <_malloc_r+0xe2>
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	e00f      	b.n	80074a0 <_malloc_r+0xb0>
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	1b52      	subs	r2, r2, r5
 8007484:	d41f      	bmi.n	80074c6 <_malloc_r+0xd6>
 8007486:	2a0b      	cmp	r2, #11
 8007488:	d917      	bls.n	80074ba <_malloc_r+0xca>
 800748a:	1961      	adds	r1, r4, r5
 800748c:	42a3      	cmp	r3, r4
 800748e:	6025      	str	r5, [r4, #0]
 8007490:	bf18      	it	ne
 8007492:	6059      	strne	r1, [r3, #4]
 8007494:	6863      	ldr	r3, [r4, #4]
 8007496:	bf08      	it	eq
 8007498:	f8c8 1000 	streq.w	r1, [r8]
 800749c:	5162      	str	r2, [r4, r5]
 800749e:	604b      	str	r3, [r1, #4]
 80074a0:	4638      	mov	r0, r7
 80074a2:	f104 060b 	add.w	r6, r4, #11
 80074a6:	f000 f829 	bl	80074fc <__malloc_unlock>
 80074aa:	f026 0607 	bic.w	r6, r6, #7
 80074ae:	1d23      	adds	r3, r4, #4
 80074b0:	1af2      	subs	r2, r6, r3
 80074b2:	d0ae      	beq.n	8007412 <_malloc_r+0x22>
 80074b4:	1b9b      	subs	r3, r3, r6
 80074b6:	50a3      	str	r3, [r4, r2]
 80074b8:	e7ab      	b.n	8007412 <_malloc_r+0x22>
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	6862      	ldr	r2, [r4, #4]
 80074be:	d1dd      	bne.n	800747c <_malloc_r+0x8c>
 80074c0:	f8c8 2000 	str.w	r2, [r8]
 80074c4:	e7ec      	b.n	80074a0 <_malloc_r+0xb0>
 80074c6:	4623      	mov	r3, r4
 80074c8:	6864      	ldr	r4, [r4, #4]
 80074ca:	e7ac      	b.n	8007426 <_malloc_r+0x36>
 80074cc:	4634      	mov	r4, r6
 80074ce:	6876      	ldr	r6, [r6, #4]
 80074d0:	e7b4      	b.n	800743c <_malloc_r+0x4c>
 80074d2:	4613      	mov	r3, r2
 80074d4:	e7cc      	b.n	8007470 <_malloc_r+0x80>
 80074d6:	230c      	movs	r3, #12
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4638      	mov	r0, r7
 80074dc:	f000 f80e 	bl	80074fc <__malloc_unlock>
 80074e0:	e797      	b.n	8007412 <_malloc_r+0x22>
 80074e2:	6025      	str	r5, [r4, #0]
 80074e4:	e7dc      	b.n	80074a0 <_malloc_r+0xb0>
 80074e6:	605b      	str	r3, [r3, #4]
 80074e8:	deff      	udf	#255	; 0xff
 80074ea:	bf00      	nop
 80074ec:	20000490 	.word	0x20000490

080074f0 <__malloc_lock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__malloc_lock+0x8>)
 80074f2:	f000 be2e 	b.w	8008152 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	200005d8 	.word	0x200005d8

080074fc <__malloc_unlock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_unlock+0x8>)
 80074fe:	f000 be29 	b.w	8008154 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	200005d8 	.word	0x200005d8

08007508 <__cvt>:
 8007508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	ec55 4b10 	vmov	r4, r5, d0
 8007510:	2d00      	cmp	r5, #0
 8007512:	460e      	mov	r6, r1
 8007514:	4619      	mov	r1, r3
 8007516:	462b      	mov	r3, r5
 8007518:	bfbb      	ittet	lt
 800751a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800751e:	461d      	movlt	r5, r3
 8007520:	2300      	movge	r3, #0
 8007522:	232d      	movlt	r3, #45	; 0x2d
 8007524:	700b      	strb	r3, [r1, #0]
 8007526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800752c:	4691      	mov	r9, r2
 800752e:	f023 0820 	bic.w	r8, r3, #32
 8007532:	bfbc      	itt	lt
 8007534:	4622      	movlt	r2, r4
 8007536:	4614      	movlt	r4, r2
 8007538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800753c:	d005      	beq.n	800754a <__cvt+0x42>
 800753e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007542:	d100      	bne.n	8007546 <__cvt+0x3e>
 8007544:	3601      	adds	r6, #1
 8007546:	2102      	movs	r1, #2
 8007548:	e000      	b.n	800754c <__cvt+0x44>
 800754a:	2103      	movs	r1, #3
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	ab02      	add	r3, sp, #8
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	ec45 4b10 	vmov	d0, r4, r5
 8007558:	4653      	mov	r3, sl
 800755a:	4632      	mov	r2, r6
 800755c:	f000 fe98 	bl	8008290 <_dtoa_r>
 8007560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007564:	4607      	mov	r7, r0
 8007566:	d102      	bne.n	800756e <__cvt+0x66>
 8007568:	f019 0f01 	tst.w	r9, #1
 800756c:	d022      	beq.n	80075b4 <__cvt+0xac>
 800756e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007572:	eb07 0906 	add.w	r9, r7, r6
 8007576:	d110      	bne.n	800759a <__cvt+0x92>
 8007578:	783b      	ldrb	r3, [r7, #0]
 800757a:	2b30      	cmp	r3, #48	; 0x30
 800757c:	d10a      	bne.n	8007594 <__cvt+0x8c>
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f9 fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800758a:	b918      	cbnz	r0, 8007594 <__cvt+0x8c>
 800758c:	f1c6 0601 	rsb	r6, r6, #1
 8007590:	f8ca 6000 	str.w	r6, [sl]
 8007594:	f8da 3000 	ldr.w	r3, [sl]
 8007598:	4499      	add	r9, r3
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f9 fab1 	bl	8000b08 <__aeabi_dcmpeq>
 80075a6:	b108      	cbz	r0, 80075ac <__cvt+0xa4>
 80075a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075ac:	2230      	movs	r2, #48	; 0x30
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	454b      	cmp	r3, r9
 80075b2:	d307      	bcc.n	80075c4 <__cvt+0xbc>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075b8:	1bdb      	subs	r3, r3, r7
 80075ba:	4638      	mov	r0, r7
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	b004      	add	sp, #16
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c4:	1c59      	adds	r1, r3, #1
 80075c6:	9103      	str	r1, [sp, #12]
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	e7f0      	b.n	80075ae <__cvt+0xa6>

080075cc <__exponent>:
 80075cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ce:	4603      	mov	r3, r0
 80075d0:	2900      	cmp	r1, #0
 80075d2:	bfb8      	it	lt
 80075d4:	4249      	neglt	r1, r1
 80075d6:	f803 2b02 	strb.w	r2, [r3], #2
 80075da:	bfb4      	ite	lt
 80075dc:	222d      	movlt	r2, #45	; 0x2d
 80075de:	222b      	movge	r2, #43	; 0x2b
 80075e0:	2909      	cmp	r1, #9
 80075e2:	7042      	strb	r2, [r0, #1]
 80075e4:	dd2a      	ble.n	800763c <__exponent+0x70>
 80075e6:	f10d 0207 	add.w	r2, sp, #7
 80075ea:	4617      	mov	r7, r2
 80075ec:	260a      	movs	r6, #10
 80075ee:	4694      	mov	ip, r2
 80075f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80075f4:	fb06 1415 	mls	r4, r6, r5, r1
 80075f8:	3430      	adds	r4, #48	; 0x30
 80075fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075fe:	460c      	mov	r4, r1
 8007600:	2c63      	cmp	r4, #99	; 0x63
 8007602:	f102 32ff 	add.w	r2, r2, #4294967295
 8007606:	4629      	mov	r1, r5
 8007608:	dcf1      	bgt.n	80075ee <__exponent+0x22>
 800760a:	3130      	adds	r1, #48	; 0x30
 800760c:	f1ac 0402 	sub.w	r4, ip, #2
 8007610:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007614:	1c41      	adds	r1, r0, #1
 8007616:	4622      	mov	r2, r4
 8007618:	42ba      	cmp	r2, r7
 800761a:	d30a      	bcc.n	8007632 <__exponent+0x66>
 800761c:	f10d 0209 	add.w	r2, sp, #9
 8007620:	eba2 020c 	sub.w	r2, r2, ip
 8007624:	42bc      	cmp	r4, r7
 8007626:	bf88      	it	hi
 8007628:	2200      	movhi	r2, #0
 800762a:	4413      	add	r3, r2
 800762c:	1a18      	subs	r0, r3, r0
 800762e:	b003      	add	sp, #12
 8007630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007632:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007636:	f801 5f01 	strb.w	r5, [r1, #1]!
 800763a:	e7ed      	b.n	8007618 <__exponent+0x4c>
 800763c:	2330      	movs	r3, #48	; 0x30
 800763e:	3130      	adds	r1, #48	; 0x30
 8007640:	7083      	strb	r3, [r0, #2]
 8007642:	70c1      	strb	r1, [r0, #3]
 8007644:	1d03      	adds	r3, r0, #4
 8007646:	e7f1      	b.n	800762c <__exponent+0x60>

08007648 <_printf_float>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	ed2d 8b02 	vpush	{d8}
 8007650:	b08d      	sub	sp, #52	; 0x34
 8007652:	460c      	mov	r4, r1
 8007654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007658:	4616      	mov	r6, r2
 800765a:	461f      	mov	r7, r3
 800765c:	4605      	mov	r5, r0
 800765e:	f000 fcf3 	bl	8008048 <_localeconv_r>
 8007662:	f8d0 a000 	ldr.w	sl, [r0]
 8007666:	4650      	mov	r0, sl
 8007668:	f7f8 fe22 	bl	80002b0 <strlen>
 800766c:	2300      	movs	r3, #0
 800766e:	930a      	str	r3, [sp, #40]	; 0x28
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	9305      	str	r3, [sp, #20]
 8007674:	f8d8 3000 	ldr.w	r3, [r8]
 8007678:	f894 b018 	ldrb.w	fp, [r4, #24]
 800767c:	3307      	adds	r3, #7
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	f103 0208 	add.w	r2, r3, #8
 8007686:	f8c8 2000 	str.w	r2, [r8]
 800768a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800768e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007692:	9307      	str	r3, [sp, #28]
 8007694:	f8cd 8018 	str.w	r8, [sp, #24]
 8007698:	ee08 0a10 	vmov	s16, r0
 800769c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80076a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076a4:	4b9e      	ldr	r3, [pc, #632]	; (8007920 <_printf_float+0x2d8>)
 80076a6:	f04f 32ff 	mov.w	r2, #4294967295
 80076aa:	f7f9 fa5f 	bl	8000b6c <__aeabi_dcmpun>
 80076ae:	bb88      	cbnz	r0, 8007714 <_printf_float+0xcc>
 80076b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076b4:	4b9a      	ldr	r3, [pc, #616]	; (8007920 <_printf_float+0x2d8>)
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	f7f9 fa39 	bl	8000b30 <__aeabi_dcmple>
 80076be:	bb48      	cbnz	r0, 8007714 <_printf_float+0xcc>
 80076c0:	2200      	movs	r2, #0
 80076c2:	2300      	movs	r3, #0
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 fa28 	bl	8000b1c <__aeabi_dcmplt>
 80076cc:	b110      	cbz	r0, 80076d4 <_printf_float+0x8c>
 80076ce:	232d      	movs	r3, #45	; 0x2d
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	4a93      	ldr	r2, [pc, #588]	; (8007924 <_printf_float+0x2dc>)
 80076d6:	4b94      	ldr	r3, [pc, #592]	; (8007928 <_printf_float+0x2e0>)
 80076d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076dc:	bf94      	ite	ls
 80076de:	4690      	movls	r8, r2
 80076e0:	4698      	movhi	r8, r3
 80076e2:	2303      	movs	r3, #3
 80076e4:	6123      	str	r3, [r4, #16]
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	f023 0304 	bic.w	r3, r3, #4
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	f04f 0900 	mov.w	r9, #0
 80076f2:	9700      	str	r7, [sp, #0]
 80076f4:	4633      	mov	r3, r6
 80076f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80076f8:	4621      	mov	r1, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 f9da 	bl	8007ab4 <_printf_common>
 8007700:	3001      	adds	r0, #1
 8007702:	f040 8090 	bne.w	8007826 <_printf_float+0x1de>
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	b00d      	add	sp, #52	; 0x34
 800770c:	ecbd 8b02 	vpop	{d8}
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f9 fa26 	bl	8000b6c <__aeabi_dcmpun>
 8007720:	b140      	cbz	r0, 8007734 <_printf_float+0xec>
 8007722:	464b      	mov	r3, r9
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfbc      	itt	lt
 8007728:	232d      	movlt	r3, #45	; 0x2d
 800772a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800772e:	4a7f      	ldr	r2, [pc, #508]	; (800792c <_printf_float+0x2e4>)
 8007730:	4b7f      	ldr	r3, [pc, #508]	; (8007930 <_printf_float+0x2e8>)
 8007732:	e7d1      	b.n	80076d8 <_printf_float+0x90>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800773a:	9206      	str	r2, [sp, #24]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	d13f      	bne.n	80077c0 <_printf_float+0x178>
 8007740:	2306      	movs	r3, #6
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	9b05      	ldr	r3, [sp, #20]
 8007746:	6861      	ldr	r1, [r4, #4]
 8007748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800774c:	2300      	movs	r3, #0
 800774e:	9303      	str	r3, [sp, #12]
 8007750:	ab0a      	add	r3, sp, #40	; 0x28
 8007752:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007756:	ab09      	add	r3, sp, #36	; 0x24
 8007758:	ec49 8b10 	vmov	d0, r8, r9
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	6022      	str	r2, [r4, #0]
 8007760:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007764:	4628      	mov	r0, r5
 8007766:	f7ff fecf 	bl	8007508 <__cvt>
 800776a:	9b06      	ldr	r3, [sp, #24]
 800776c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776e:	2b47      	cmp	r3, #71	; 0x47
 8007770:	4680      	mov	r8, r0
 8007772:	d108      	bne.n	8007786 <_printf_float+0x13e>
 8007774:	1cc8      	adds	r0, r1, #3
 8007776:	db02      	blt.n	800777e <_printf_float+0x136>
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	4299      	cmp	r1, r3
 800777c:	dd41      	ble.n	8007802 <_printf_float+0x1ba>
 800777e:	f1ab 0302 	sub.w	r3, fp, #2
 8007782:	fa5f fb83 	uxtb.w	fp, r3
 8007786:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800778a:	d820      	bhi.n	80077ce <_printf_float+0x186>
 800778c:	3901      	subs	r1, #1
 800778e:	465a      	mov	r2, fp
 8007790:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007794:	9109      	str	r1, [sp, #36]	; 0x24
 8007796:	f7ff ff19 	bl	80075cc <__exponent>
 800779a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800779c:	1813      	adds	r3, r2, r0
 800779e:	2a01      	cmp	r2, #1
 80077a0:	4681      	mov	r9, r0
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	dc02      	bgt.n	80077ac <_printf_float+0x164>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	07d2      	lsls	r2, r2, #31
 80077aa:	d501      	bpl.n	80077b0 <_printf_float+0x168>
 80077ac:	3301      	adds	r3, #1
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d09c      	beq.n	80076f2 <_printf_float+0xaa>
 80077b8:	232d      	movs	r3, #45	; 0x2d
 80077ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077be:	e798      	b.n	80076f2 <_printf_float+0xaa>
 80077c0:	9a06      	ldr	r2, [sp, #24]
 80077c2:	2a47      	cmp	r2, #71	; 0x47
 80077c4:	d1be      	bne.n	8007744 <_printf_float+0xfc>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1bc      	bne.n	8007744 <_printf_float+0xfc>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7b9      	b.n	8007742 <_printf_float+0xfa>
 80077ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077d2:	d118      	bne.n	8007806 <_printf_float+0x1be>
 80077d4:	2900      	cmp	r1, #0
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	dd0b      	ble.n	80077f2 <_printf_float+0x1aa>
 80077da:	6121      	str	r1, [r4, #16]
 80077dc:	b913      	cbnz	r3, 80077e4 <_printf_float+0x19c>
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	07d0      	lsls	r0, r2, #31
 80077e2:	d502      	bpl.n	80077ea <_printf_float+0x1a2>
 80077e4:	3301      	adds	r3, #1
 80077e6:	440b      	add	r3, r1
 80077e8:	6123      	str	r3, [r4, #16]
 80077ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80077ec:	f04f 0900 	mov.w	r9, #0
 80077f0:	e7de      	b.n	80077b0 <_printf_float+0x168>
 80077f2:	b913      	cbnz	r3, 80077fa <_printf_float+0x1b2>
 80077f4:	6822      	ldr	r2, [r4, #0]
 80077f6:	07d2      	lsls	r2, r2, #31
 80077f8:	d501      	bpl.n	80077fe <_printf_float+0x1b6>
 80077fa:	3302      	adds	r3, #2
 80077fc:	e7f4      	b.n	80077e8 <_printf_float+0x1a0>
 80077fe:	2301      	movs	r3, #1
 8007800:	e7f2      	b.n	80077e8 <_printf_float+0x1a0>
 8007802:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007808:	4299      	cmp	r1, r3
 800780a:	db05      	blt.n	8007818 <_printf_float+0x1d0>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	6121      	str	r1, [r4, #16]
 8007810:	07d8      	lsls	r0, r3, #31
 8007812:	d5ea      	bpl.n	80077ea <_printf_float+0x1a2>
 8007814:	1c4b      	adds	r3, r1, #1
 8007816:	e7e7      	b.n	80077e8 <_printf_float+0x1a0>
 8007818:	2900      	cmp	r1, #0
 800781a:	bfd4      	ite	le
 800781c:	f1c1 0202 	rsble	r2, r1, #2
 8007820:	2201      	movgt	r2, #1
 8007822:	4413      	add	r3, r2
 8007824:	e7e0      	b.n	80077e8 <_printf_float+0x1a0>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	055a      	lsls	r2, r3, #21
 800782a:	d407      	bmi.n	800783c <_printf_float+0x1f4>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	4642      	mov	r2, r8
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	d12c      	bne.n	8007894 <_printf_float+0x24c>
 800783a:	e764      	b.n	8007706 <_printf_float+0xbe>
 800783c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007840:	f240 80e0 	bls.w	8007a04 <_printf_float+0x3bc>
 8007844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007848:	2200      	movs	r2, #0
 800784a:	2300      	movs	r3, #0
 800784c:	f7f9 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8007850:	2800      	cmp	r0, #0
 8007852:	d034      	beq.n	80078be <_printf_float+0x276>
 8007854:	4a37      	ldr	r2, [pc, #220]	; (8007934 <_printf_float+0x2ec>)
 8007856:	2301      	movs	r3, #1
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f af51 	beq.w	8007706 <_printf_float+0xbe>
 8007864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007868:	429a      	cmp	r2, r3
 800786a:	db02      	blt.n	8007872 <_printf_float+0x22a>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	07d8      	lsls	r0, r3, #31
 8007870:	d510      	bpl.n	8007894 <_printf_float+0x24c>
 8007872:	ee18 3a10 	vmov	r3, s16
 8007876:	4652      	mov	r2, sl
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f af41 	beq.w	8007706 <_printf_float+0xbe>
 8007884:	f04f 0800 	mov.w	r8, #0
 8007888:	f104 091a 	add.w	r9, r4, #26
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	3b01      	subs	r3, #1
 8007890:	4543      	cmp	r3, r8
 8007892:	dc09      	bgt.n	80078a8 <_printf_float+0x260>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	079b      	lsls	r3, r3, #30
 8007898:	f100 8107 	bmi.w	8007aaa <_printf_float+0x462>
 800789c:	68e0      	ldr	r0, [r4, #12]
 800789e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a0:	4298      	cmp	r0, r3
 80078a2:	bfb8      	it	lt
 80078a4:	4618      	movlt	r0, r3
 80078a6:	e730      	b.n	800770a <_printf_float+0xc2>
 80078a8:	2301      	movs	r3, #1
 80078aa:	464a      	mov	r2, r9
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af27 	beq.w	8007706 <_printf_float+0xbe>
 80078b8:	f108 0801 	add.w	r8, r8, #1
 80078bc:	e7e6      	b.n	800788c <_printf_float+0x244>
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dc39      	bgt.n	8007938 <_printf_float+0x2f0>
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <_printf_float+0x2ec>)
 80078c6:	2301      	movs	r3, #1
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f af19 	beq.w	8007706 <_printf_float+0xbe>
 80078d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078d8:	4313      	orrs	r3, r2
 80078da:	d102      	bne.n	80078e2 <_printf_float+0x29a>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	d5d8      	bpl.n	8007894 <_printf_float+0x24c>
 80078e2:	ee18 3a10 	vmov	r3, s16
 80078e6:	4652      	mov	r2, sl
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af09 	beq.w	8007706 <_printf_float+0xbe>
 80078f4:	f04f 0900 	mov.w	r9, #0
 80078f8:	f104 0a1a 	add.w	sl, r4, #26
 80078fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fe:	425b      	negs	r3, r3
 8007900:	454b      	cmp	r3, r9
 8007902:	dc01      	bgt.n	8007908 <_printf_float+0x2c0>
 8007904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007906:	e792      	b.n	800782e <_printf_float+0x1e6>
 8007908:	2301      	movs	r3, #1
 800790a:	4652      	mov	r2, sl
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f aef7 	beq.w	8007706 <_printf_float+0xbe>
 8007918:	f109 0901 	add.w	r9, r9, #1
 800791c:	e7ee      	b.n	80078fc <_printf_float+0x2b4>
 800791e:	bf00      	nop
 8007920:	7fefffff 	.word	0x7fefffff
 8007924:	0800b580 	.word	0x0800b580
 8007928:	0800b584 	.word	0x0800b584
 800792c:	0800b588 	.word	0x0800b588
 8007930:	0800b58c 	.word	0x0800b58c
 8007934:	0800b590 	.word	0x0800b590
 8007938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800793a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793c:	429a      	cmp	r2, r3
 800793e:	bfa8      	it	ge
 8007940:	461a      	movge	r2, r3
 8007942:	2a00      	cmp	r2, #0
 8007944:	4691      	mov	r9, r2
 8007946:	dc37      	bgt.n	80079b8 <_printf_float+0x370>
 8007948:	f04f 0b00 	mov.w	fp, #0
 800794c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007950:	f104 021a 	add.w	r2, r4, #26
 8007954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	eba3 0309 	sub.w	r3, r3, r9
 800795c:	455b      	cmp	r3, fp
 800795e:	dc33      	bgt.n	80079c8 <_printf_float+0x380>
 8007960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007964:	429a      	cmp	r2, r3
 8007966:	db3b      	blt.n	80079e0 <_printf_float+0x398>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	d438      	bmi.n	80079e0 <_printf_float+0x398>
 800796e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007972:	eba2 0903 	sub.w	r9, r2, r3
 8007976:	9b05      	ldr	r3, [sp, #20]
 8007978:	1ad2      	subs	r2, r2, r3
 800797a:	4591      	cmp	r9, r2
 800797c:	bfa8      	it	ge
 800797e:	4691      	movge	r9, r2
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	dc35      	bgt.n	80079f2 <_printf_float+0x3aa>
 8007986:	f04f 0800 	mov.w	r8, #0
 800798a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800798e:	f104 0a1a 	add.w	sl, r4, #26
 8007992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007996:	1a9b      	subs	r3, r3, r2
 8007998:	eba3 0309 	sub.w	r3, r3, r9
 800799c:	4543      	cmp	r3, r8
 800799e:	f77f af79 	ble.w	8007894 <_printf_float+0x24c>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	f43f aeaa 	beq.w	8007706 <_printf_float+0xbe>
 80079b2:	f108 0801 	add.w	r8, r8, #1
 80079b6:	e7ec      	b.n	8007992 <_printf_float+0x34a>
 80079b8:	4613      	mov	r3, r2
 80079ba:	4631      	mov	r1, r6
 80079bc:	4642      	mov	r2, r8
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	d1c0      	bne.n	8007948 <_printf_float+0x300>
 80079c6:	e69e      	b.n	8007706 <_printf_float+0xbe>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	9205      	str	r2, [sp, #20]
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f ae97 	beq.w	8007706 <_printf_float+0xbe>
 80079d8:	9a05      	ldr	r2, [sp, #20]
 80079da:	f10b 0b01 	add.w	fp, fp, #1
 80079de:	e7b9      	b.n	8007954 <_printf_float+0x30c>
 80079e0:	ee18 3a10 	vmov	r3, s16
 80079e4:	4652      	mov	r2, sl
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	d1be      	bne.n	800796e <_printf_float+0x326>
 80079f0:	e689      	b.n	8007706 <_printf_float+0xbe>
 80079f2:	9a05      	ldr	r2, [sp, #20]
 80079f4:	464b      	mov	r3, r9
 80079f6:	4442      	add	r2, r8
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	d1c1      	bne.n	8007986 <_printf_float+0x33e>
 8007a02:	e680      	b.n	8007706 <_printf_float+0xbe>
 8007a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a06:	2a01      	cmp	r2, #1
 8007a08:	dc01      	bgt.n	8007a0e <_printf_float+0x3c6>
 8007a0a:	07db      	lsls	r3, r3, #31
 8007a0c:	d53a      	bpl.n	8007a84 <_printf_float+0x43c>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4642      	mov	r2, r8
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae74 	beq.w	8007706 <_printf_float+0xbe>
 8007a1e:	ee18 3a10 	vmov	r3, s16
 8007a22:	4652      	mov	r2, sl
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f43f ae6b 	beq.w	8007706 <_printf_float+0xbe>
 8007a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a3c:	f7f9 f864 	bl	8000b08 <__aeabi_dcmpeq>
 8007a40:	b9d8      	cbnz	r0, 8007a7a <_printf_float+0x432>
 8007a42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a46:	f108 0201 	add.w	r2, r8, #1
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	d10e      	bne.n	8007a72 <_printf_float+0x42a>
 8007a54:	e657      	b.n	8007706 <_printf_float+0xbe>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4652      	mov	r2, sl
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae50 	beq.w	8007706 <_printf_float+0xbe>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4543      	cmp	r3, r8
 8007a70:	dcf1      	bgt.n	8007a56 <_printf_float+0x40e>
 8007a72:	464b      	mov	r3, r9
 8007a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a78:	e6da      	b.n	8007830 <_printf_float+0x1e8>
 8007a7a:	f04f 0800 	mov.w	r8, #0
 8007a7e:	f104 0a1a 	add.w	sl, r4, #26
 8007a82:	e7f2      	b.n	8007a6a <_printf_float+0x422>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4642      	mov	r2, r8
 8007a88:	e7df      	b.n	8007a4a <_printf_float+0x402>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	464a      	mov	r2, r9
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	f43f ae36 	beq.w	8007706 <_printf_float+0xbe>
 8007a9a:	f108 0801 	add.w	r8, r8, #1
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aa2:	1a5b      	subs	r3, r3, r1
 8007aa4:	4543      	cmp	r3, r8
 8007aa6:	dcf0      	bgt.n	8007a8a <_printf_float+0x442>
 8007aa8:	e6f8      	b.n	800789c <_printf_float+0x254>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	f104 0919 	add.w	r9, r4, #25
 8007ab2:	e7f4      	b.n	8007a9e <_printf_float+0x456>

08007ab4 <_printf_common>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	4616      	mov	r6, r2
 8007aba:	4699      	mov	r9, r3
 8007abc:	688a      	ldr	r2, [r1, #8]
 8007abe:	690b      	ldr	r3, [r1, #16]
 8007ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bfb8      	it	lt
 8007ac8:	4613      	movlt	r3, r2
 8007aca:	6033      	str	r3, [r6, #0]
 8007acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b10a      	cbz	r2, 8007ada <_printf_common+0x26>
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	6033      	str	r3, [r6, #0]
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	0699      	lsls	r1, r3, #26
 8007ade:	bf42      	ittt	mi
 8007ae0:	6833      	ldrmi	r3, [r6, #0]
 8007ae2:	3302      	addmi	r3, #2
 8007ae4:	6033      	strmi	r3, [r6, #0]
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	f015 0506 	ands.w	r5, r5, #6
 8007aec:	d106      	bne.n	8007afc <_printf_common+0x48>
 8007aee:	f104 0a19 	add.w	sl, r4, #25
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	6832      	ldr	r2, [r6, #0]
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	dc26      	bgt.n	8007b4a <_printf_common+0x96>
 8007afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b00:	1e13      	subs	r3, r2, #0
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	bf18      	it	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	0692      	lsls	r2, r2, #26
 8007b0a:	d42b      	bmi.n	8007b64 <_printf_common+0xb0>
 8007b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b10:	4649      	mov	r1, r9
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d01e      	beq.n	8007b58 <_printf_common+0xa4>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	f003 0306 	and.w	r3, r3, #6
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	bf02      	ittt	eq
 8007b26:	68e5      	ldreq	r5, [r4, #12]
 8007b28:	6833      	ldreq	r3, [r6, #0]
 8007b2a:	1aed      	subeq	r5, r5, r3
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	bf0c      	ite	eq
 8007b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b34:	2500      	movne	r5, #0
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bfc4      	itt	gt
 8007b3a:	1a9b      	subgt	r3, r3, r2
 8007b3c:	18ed      	addgt	r5, r5, r3
 8007b3e:	2600      	movs	r6, #0
 8007b40:	341a      	adds	r4, #26
 8007b42:	42b5      	cmp	r5, r6
 8007b44:	d11a      	bne.n	8007b7c <_printf_common+0xc8>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e008      	b.n	8007b5c <_printf_common+0xa8>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	4649      	mov	r1, r9
 8007b50:	4638      	mov	r0, r7
 8007b52:	47c0      	blx	r8
 8007b54:	3001      	adds	r0, #1
 8007b56:	d103      	bne.n	8007b60 <_printf_common+0xac>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b60:	3501      	adds	r5, #1
 8007b62:	e7c6      	b.n	8007af2 <_printf_common+0x3e>
 8007b64:	18e1      	adds	r1, r4, r3
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	2030      	movs	r0, #48	; 0x30
 8007b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b6e:	4422      	add	r2, r4
 8007b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b78:	3302      	adds	r3, #2
 8007b7a:	e7c7      	b.n	8007b0c <_printf_common+0x58>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4649      	mov	r1, r9
 8007b82:	4638      	mov	r0, r7
 8007b84:	47c0      	blx	r8
 8007b86:	3001      	adds	r0, #1
 8007b88:	d0e6      	beq.n	8007b58 <_printf_common+0xa4>
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7d9      	b.n	8007b42 <_printf_common+0x8e>
	...

08007b90 <_printf_i>:
 8007b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b94:	7e0f      	ldrb	r7, [r1, #24]
 8007b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b98:	2f78      	cmp	r7, #120	; 0x78
 8007b9a:	4691      	mov	r9, r2
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	469a      	mov	sl, r3
 8007ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ba6:	d807      	bhi.n	8007bb8 <_printf_i+0x28>
 8007ba8:	2f62      	cmp	r7, #98	; 0x62
 8007baa:	d80a      	bhi.n	8007bc2 <_printf_i+0x32>
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	f000 80d4 	beq.w	8007d5a <_printf_i+0x1ca>
 8007bb2:	2f58      	cmp	r7, #88	; 0x58
 8007bb4:	f000 80c0 	beq.w	8007d38 <_printf_i+0x1a8>
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc0:	e03a      	b.n	8007c38 <_printf_i+0xa8>
 8007bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bc6:	2b15      	cmp	r3, #21
 8007bc8:	d8f6      	bhi.n	8007bb8 <_printf_i+0x28>
 8007bca:	a101      	add	r1, pc, #4	; (adr r1, 8007bd0 <_printf_i+0x40>)
 8007bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd0:	08007c29 	.word	0x08007c29
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007bb9 	.word	0x08007bb9
 8007bdc:	08007bb9 	.word	0x08007bb9
 8007be0:	08007bb9 	.word	0x08007bb9
 8007be4:	08007bb9 	.word	0x08007bb9
 8007be8:	08007c3d 	.word	0x08007c3d
 8007bec:	08007bb9 	.word	0x08007bb9
 8007bf0:	08007bb9 	.word	0x08007bb9
 8007bf4:	08007bb9 	.word	0x08007bb9
 8007bf8:	08007bb9 	.word	0x08007bb9
 8007bfc:	08007d41 	.word	0x08007d41
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007cfb 	.word	0x08007cfb
 8007c08:	08007bb9 	.word	0x08007bb9
 8007c0c:	08007bb9 	.word	0x08007bb9
 8007c10:	08007d63 	.word	0x08007d63
 8007c14:	08007bb9 	.word	0x08007bb9
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007bb9 	.word	0x08007bb9
 8007c20:	08007bb9 	.word	0x08007bb9
 8007c24:	08007d03 	.word	0x08007d03
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	1d1a      	adds	r2, r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	602a      	str	r2, [r5, #0]
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e09f      	b.n	8007d7c <_printf_i+0x1ec>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	0607      	lsls	r7, r0, #24
 8007c42:	f103 0104 	add.w	r1, r3, #4
 8007c46:	6029      	str	r1, [r5, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0xbe>
 8007c4a:	681e      	ldr	r6, [r3, #0]
 8007c4c:	e003      	b.n	8007c56 <_printf_i+0xc6>
 8007c4e:	0646      	lsls	r6, r0, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0xba>
 8007c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	da03      	bge.n	8007c62 <_printf_i+0xd2>
 8007c5a:	232d      	movs	r3, #45	; 0x2d
 8007c5c:	4276      	negs	r6, r6
 8007c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c62:	485a      	ldr	r0, [pc, #360]	; (8007dcc <_printf_i+0x23c>)
 8007c64:	230a      	movs	r3, #10
 8007c66:	e012      	b.n	8007c8e <_printf_i+0xfe>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	1d19      	adds	r1, r3, #4
 8007c6e:	6029      	str	r1, [r5, #0]
 8007c70:	0605      	lsls	r5, r0, #24
 8007c72:	d501      	bpl.n	8007c78 <_printf_i+0xe8>
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <_printf_i+0xee>
 8007c78:	0641      	lsls	r1, r0, #25
 8007c7a:	d5fb      	bpl.n	8007c74 <_printf_i+0xe4>
 8007c7c:	881e      	ldrh	r6, [r3, #0]
 8007c7e:	4853      	ldr	r0, [pc, #332]	; (8007dcc <_printf_i+0x23c>)
 8007c80:	2f6f      	cmp	r7, #111	; 0x6f
 8007c82:	bf0c      	ite	eq
 8007c84:	2308      	moveq	r3, #8
 8007c86:	230a      	movne	r3, #10
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c8e:	6865      	ldr	r5, [r4, #4]
 8007c90:	60a5      	str	r5, [r4, #8]
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	bfa2      	ittt	ge
 8007c96:	6821      	ldrge	r1, [r4, #0]
 8007c98:	f021 0104 	bicge.w	r1, r1, #4
 8007c9c:	6021      	strge	r1, [r4, #0]
 8007c9e:	b90e      	cbnz	r6, 8007ca4 <_printf_i+0x114>
 8007ca0:	2d00      	cmp	r5, #0
 8007ca2:	d04b      	beq.n	8007d3c <_printf_i+0x1ac>
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007caa:	fb03 6711 	mls	r7, r3, r1, r6
 8007cae:	5dc7      	ldrb	r7, [r0, r7]
 8007cb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cb4:	4637      	mov	r7, r6
 8007cb6:	42bb      	cmp	r3, r7
 8007cb8:	460e      	mov	r6, r1
 8007cba:	d9f4      	bls.n	8007ca6 <_printf_i+0x116>
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d10b      	bne.n	8007cd8 <_printf_i+0x148>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	07de      	lsls	r6, r3, #31
 8007cc4:	d508      	bpl.n	8007cd8 <_printf_i+0x148>
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	6861      	ldr	r1, [r4, #4]
 8007cca:	4299      	cmp	r1, r3
 8007ccc:	bfde      	ittt	le
 8007cce:	2330      	movle	r3, #48	; 0x30
 8007cd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cd8:	1b52      	subs	r2, r2, r5
 8007cda:	6122      	str	r2, [r4, #16]
 8007cdc:	f8cd a000 	str.w	sl, [sp]
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	aa03      	add	r2, sp, #12
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	f7ff fee4 	bl	8007ab4 <_printf_common>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d14a      	bne.n	8007d86 <_printf_i+0x1f6>
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	b004      	add	sp, #16
 8007cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	f043 0320 	orr.w	r3, r3, #32
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	4833      	ldr	r0, [pc, #204]	; (8007dd0 <_printf_i+0x240>)
 8007d04:	2778      	movs	r7, #120	; 0x78
 8007d06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	6829      	ldr	r1, [r5, #0]
 8007d0e:	061f      	lsls	r7, r3, #24
 8007d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d14:	d402      	bmi.n	8007d1c <_printf_i+0x18c>
 8007d16:	065f      	lsls	r7, r3, #25
 8007d18:	bf48      	it	mi
 8007d1a:	b2b6      	uxthmi	r6, r6
 8007d1c:	07df      	lsls	r7, r3, #31
 8007d1e:	bf48      	it	mi
 8007d20:	f043 0320 	orrmi.w	r3, r3, #32
 8007d24:	6029      	str	r1, [r5, #0]
 8007d26:	bf48      	it	mi
 8007d28:	6023      	strmi	r3, [r4, #0]
 8007d2a:	b91e      	cbnz	r6, 8007d34 <_printf_i+0x1a4>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	f023 0320 	bic.w	r3, r3, #32
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	2310      	movs	r3, #16
 8007d36:	e7a7      	b.n	8007c88 <_printf_i+0xf8>
 8007d38:	4824      	ldr	r0, [pc, #144]	; (8007dcc <_printf_i+0x23c>)
 8007d3a:	e7e4      	b.n	8007d06 <_printf_i+0x176>
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	e7bd      	b.n	8007cbc <_printf_i+0x12c>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	6826      	ldr	r6, [r4, #0]
 8007d44:	6961      	ldr	r1, [r4, #20]
 8007d46:	1d18      	adds	r0, r3, #4
 8007d48:	6028      	str	r0, [r5, #0]
 8007d4a:	0635      	lsls	r5, r6, #24
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	d501      	bpl.n	8007d54 <_printf_i+0x1c4>
 8007d50:	6019      	str	r1, [r3, #0]
 8007d52:	e002      	b.n	8007d5a <_printf_i+0x1ca>
 8007d54:	0670      	lsls	r0, r6, #25
 8007d56:	d5fb      	bpl.n	8007d50 <_printf_i+0x1c0>
 8007d58:	8019      	strh	r1, [r3, #0]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	4615      	mov	r5, r2
 8007d60:	e7bc      	b.n	8007cdc <_printf_i+0x14c>
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	602a      	str	r2, [r5, #0]
 8007d68:	681d      	ldr	r5, [r3, #0]
 8007d6a:	6862      	ldr	r2, [r4, #4]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f7f8 fa4e 	bl	8000210 <memchr>
 8007d74:	b108      	cbz	r0, 8007d7a <_printf_i+0x1ea>
 8007d76:	1b40      	subs	r0, r0, r5
 8007d78:	6060      	str	r0, [r4, #4]
 8007d7a:	6863      	ldr	r3, [r4, #4]
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d84:	e7aa      	b.n	8007cdc <_printf_i+0x14c>
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	462a      	mov	r2, r5
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	47d0      	blx	sl
 8007d90:	3001      	adds	r0, #1
 8007d92:	d0ad      	beq.n	8007cf0 <_printf_i+0x160>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	079b      	lsls	r3, r3, #30
 8007d98:	d413      	bmi.n	8007dc2 <_printf_i+0x232>
 8007d9a:	68e0      	ldr	r0, [r4, #12]
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	4298      	cmp	r0, r3
 8007da0:	bfb8      	it	lt
 8007da2:	4618      	movlt	r0, r3
 8007da4:	e7a6      	b.n	8007cf4 <_printf_i+0x164>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4632      	mov	r2, r6
 8007daa:	4649      	mov	r1, r9
 8007dac:	4640      	mov	r0, r8
 8007dae:	47d0      	blx	sl
 8007db0:	3001      	adds	r0, #1
 8007db2:	d09d      	beq.n	8007cf0 <_printf_i+0x160>
 8007db4:	3501      	adds	r5, #1
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	9903      	ldr	r1, [sp, #12]
 8007dba:	1a5b      	subs	r3, r3, r1
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dcf2      	bgt.n	8007da6 <_printf_i+0x216>
 8007dc0:	e7eb      	b.n	8007d9a <_printf_i+0x20a>
 8007dc2:	2500      	movs	r5, #0
 8007dc4:	f104 0619 	add.w	r6, r4, #25
 8007dc8:	e7f5      	b.n	8007db6 <_printf_i+0x226>
 8007dca:	bf00      	nop
 8007dcc:	0800b592 	.word	0x0800b592
 8007dd0:	0800b5a3 	.word	0x0800b5a3

08007dd4 <std>:
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
 8007dda:	e9c0 3300 	strd	r3, r3, [r0]
 8007dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de2:	6083      	str	r3, [r0, #8]
 8007de4:	8181      	strh	r1, [r0, #12]
 8007de6:	6643      	str	r3, [r0, #100]	; 0x64
 8007de8:	81c2      	strh	r2, [r0, #14]
 8007dea:	6183      	str	r3, [r0, #24]
 8007dec:	4619      	mov	r1, r3
 8007dee:	2208      	movs	r2, #8
 8007df0:	305c      	adds	r0, #92	; 0x5c
 8007df2:	f000 f920 	bl	8008036 <memset>
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <std+0x58>)
 8007df8:	6263      	str	r3, [r4, #36]	; 0x24
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <std+0x5c>)
 8007dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <std+0x60>)
 8007e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e02:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <std+0x64>)
 8007e04:	6323      	str	r3, [r4, #48]	; 0x30
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <std+0x68>)
 8007e08:	6224      	str	r4, [r4, #32]
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d006      	beq.n	8007e1c <std+0x48>
 8007e0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e12:	4294      	cmp	r4, r2
 8007e14:	d002      	beq.n	8007e1c <std+0x48>
 8007e16:	33d0      	adds	r3, #208	; 0xd0
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d105      	bne.n	8007e28 <std+0x54>
 8007e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e24:	f000 b994 	b.w	8008150 <__retarget_lock_init_recursive>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08007f7d 	.word	0x08007f7d
 8007e30:	08007f9f 	.word	0x08007f9f
 8007e34:	08007fd7 	.word	0x08007fd7
 8007e38:	08007ffb 	.word	0x08007ffb
 8007e3c:	20000498 	.word	0x20000498

08007e40 <stdio_exit_handler>:
 8007e40:	4a02      	ldr	r2, [pc, #8]	; (8007e4c <stdio_exit_handler+0xc>)
 8007e42:	4903      	ldr	r1, [pc, #12]	; (8007e50 <stdio_exit_handler+0x10>)
 8007e44:	4803      	ldr	r0, [pc, #12]	; (8007e54 <stdio_exit_handler+0x14>)
 8007e46:	f000 b87b 	b.w	8007f40 <_fwalk_sglue>
 8007e4a:	bf00      	nop
 8007e4c:	20000010 	.word	0x20000010
 8007e50:	08009999 	.word	0x08009999
 8007e54:	2000001c 	.word	0x2000001c

08007e58 <cleanup_stdio>:
 8007e58:	6841      	ldr	r1, [r0, #4]
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <cleanup_stdio+0x34>)
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	4604      	mov	r4, r0
 8007e62:	d001      	beq.n	8007e68 <cleanup_stdio+0x10>
 8007e64:	f001 fd98 	bl	8009998 <_fflush_r>
 8007e68:	68a1      	ldr	r1, [r4, #8]
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <cleanup_stdio+0x38>)
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d002      	beq.n	8007e76 <cleanup_stdio+0x1e>
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 fd91 	bl	8009998 <_fflush_r>
 8007e76:	68e1      	ldr	r1, [r4, #12]
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <cleanup_stdio+0x3c>)
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	d004      	beq.n	8007e88 <cleanup_stdio+0x30>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e84:	f001 bd88 	b.w	8009998 <_fflush_r>
 8007e88:	bd10      	pop	{r4, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000498 	.word	0x20000498
 8007e90:	20000500 	.word	0x20000500
 8007e94:	20000568 	.word	0x20000568

08007e98 <global_stdio_init.part.0>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <global_stdio_init.part.0+0x30>)
 8007e9c:	4c0b      	ldr	r4, [pc, #44]	; (8007ecc <global_stdio_init.part.0+0x34>)
 8007e9e:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <global_stdio_init.part.0+0x38>)
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	f7ff ff94 	bl	8007dd4 <std>
 8007eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2109      	movs	r1, #9
 8007eb4:	f7ff ff8e 	bl	8007dd4 <std>
 8007eb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec2:	2112      	movs	r1, #18
 8007ec4:	f7ff bf86 	b.w	8007dd4 <std>
 8007ec8:	200005d0 	.word	0x200005d0
 8007ecc:	20000498 	.word	0x20000498
 8007ed0:	08007e41 	.word	0x08007e41

08007ed4 <__sfp_lock_acquire>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__sfp_lock_acquire+0x8>)
 8007ed6:	f000 b93c 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	200005d9 	.word	0x200005d9

08007ee0 <__sfp_lock_release>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__sfp_lock_release+0x8>)
 8007ee2:	f000 b937 	b.w	8008154 <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	200005d9 	.word	0x200005d9

08007eec <__sinit>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	4604      	mov	r4, r0
 8007ef0:	f7ff fff0 	bl	8007ed4 <__sfp_lock_acquire>
 8007ef4:	6a23      	ldr	r3, [r4, #32]
 8007ef6:	b11b      	cbz	r3, 8007f00 <__sinit+0x14>
 8007ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efc:	f7ff bff0 	b.w	8007ee0 <__sfp_lock_release>
 8007f00:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <__sinit+0x28>)
 8007f02:	6223      	str	r3, [r4, #32]
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <__sinit+0x2c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f5      	bne.n	8007ef8 <__sinit+0xc>
 8007f0c:	f7ff ffc4 	bl	8007e98 <global_stdio_init.part.0>
 8007f10:	e7f2      	b.n	8007ef8 <__sinit+0xc>
 8007f12:	bf00      	nop
 8007f14:	08007e59 	.word	0x08007e59
 8007f18:	200005d0 	.word	0x200005d0

08007f1c <fiprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b503      	push	{r0, r1, lr}
 8007f20:	4601      	mov	r1, r0
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	4805      	ldr	r0, [pc, #20]	; (8007f3c <fiprintf+0x20>)
 8007f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	f001 fb93 	bl	8009658 <_vfiprintf_r>
 8007f32:	b002      	add	sp, #8
 8007f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f38:	b003      	add	sp, #12
 8007f3a:	4770      	bx	lr
 8007f3c:	20000068 	.word	0x20000068

08007f40 <_fwalk_sglue>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	4607      	mov	r7, r0
 8007f46:	4688      	mov	r8, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f50:	f1b9 0901 	subs.w	r9, r9, #1
 8007f54:	d505      	bpl.n	8007f62 <_fwalk_sglue+0x22>
 8007f56:	6824      	ldr	r4, [r4, #0]
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d1f7      	bne.n	8007f4c <_fwalk_sglue+0xc>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f62:	89ab      	ldrh	r3, [r5, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d907      	bls.n	8007f78 <_fwalk_sglue+0x38>
 8007f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	d003      	beq.n	8007f78 <_fwalk_sglue+0x38>
 8007f70:	4629      	mov	r1, r5
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	4306      	orrs	r6, r0
 8007f78:	3568      	adds	r5, #104	; 0x68
 8007f7a:	e7e9      	b.n	8007f50 <_fwalk_sglue+0x10>

08007f7c <__sread>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	460c      	mov	r4, r1
 8007f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f84:	f000 f886 	bl	8008094 <_read_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	bfab      	itete	ge
 8007f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f90:	181b      	addge	r3, r3, r0
 8007f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f96:	bfac      	ite	ge
 8007f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f9a:	81a3      	strhlt	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__swrite>:
 8007f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	898b      	ldrh	r3, [r1, #12]
 8007fa6:	05db      	lsls	r3, r3, #23
 8007fa8:	4605      	mov	r5, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4616      	mov	r6, r2
 8007fae:	d505      	bpl.n	8007fbc <__swrite+0x1e>
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f000 f85a 	bl	8008070 <_lseek_r>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4628      	mov	r0, r5
 8007fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	f000 b881 	b.w	80080d8 <_write_r>

08007fd6 <__sseek>:
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	460c      	mov	r4, r1
 8007fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fde:	f000 f847 	bl	8008070 <_lseek_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	bf15      	itete	ne
 8007fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ff2:	81a3      	strheq	r3, [r4, #12]
 8007ff4:	bf18      	it	ne
 8007ff6:	81a3      	strhne	r3, [r4, #12]
 8007ff8:	bd10      	pop	{r4, pc}

08007ffa <__sclose>:
 8007ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffe:	f000 b827 	b.w	8008050 <_close_r>

08008002 <memmove>:
 8008002:	4288      	cmp	r0, r1
 8008004:	b510      	push	{r4, lr}
 8008006:	eb01 0402 	add.w	r4, r1, r2
 800800a:	d902      	bls.n	8008012 <memmove+0x10>
 800800c:	4284      	cmp	r4, r0
 800800e:	4623      	mov	r3, r4
 8008010:	d807      	bhi.n	8008022 <memmove+0x20>
 8008012:	1e43      	subs	r3, r0, #1
 8008014:	42a1      	cmp	r1, r4
 8008016:	d008      	beq.n	800802a <memmove+0x28>
 8008018:	f811 2b01 	ldrb.w	r2, [r1], #1
 800801c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008020:	e7f8      	b.n	8008014 <memmove+0x12>
 8008022:	4402      	add	r2, r0
 8008024:	4601      	mov	r1, r0
 8008026:	428a      	cmp	r2, r1
 8008028:	d100      	bne.n	800802c <memmove+0x2a>
 800802a:	bd10      	pop	{r4, pc}
 800802c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008030:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008034:	e7f7      	b.n	8008026 <memmove+0x24>

08008036 <memset>:
 8008036:	4402      	add	r2, r0
 8008038:	4603      	mov	r3, r0
 800803a:	4293      	cmp	r3, r2
 800803c:	d100      	bne.n	8008040 <memset+0xa>
 800803e:	4770      	bx	lr
 8008040:	f803 1b01 	strb.w	r1, [r3], #1
 8008044:	e7f9      	b.n	800803a <memset+0x4>
	...

08008048 <_localeconv_r>:
 8008048:	4800      	ldr	r0, [pc, #0]	; (800804c <_localeconv_r+0x4>)
 800804a:	4770      	bx	lr
 800804c:	2000015c 	.word	0x2000015c

08008050 <_close_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d06      	ldr	r5, [pc, #24]	; (800806c <_close_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7fa fe61 	bl	8002d22 <_close>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_close_r+0x1a>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_close_r+0x1a>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200005d4 	.word	0x200005d4

08008070 <_lseek_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_lseek_r+0x20>)
 8008074:	4604      	mov	r4, r0
 8008076:	4608      	mov	r0, r1
 8008078:	4611      	mov	r1, r2
 800807a:	2200      	movs	r2, #0
 800807c:	602a      	str	r2, [r5, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7fa fe76 	bl	8002d70 <_lseek>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_lseek_r+0x1e>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_lseek_r+0x1e>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	200005d4 	.word	0x200005d4

08008094 <_read_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4d07      	ldr	r5, [pc, #28]	; (80080b4 <_read_r+0x20>)
 8008098:	4604      	mov	r4, r0
 800809a:	4608      	mov	r0, r1
 800809c:	4611      	mov	r1, r2
 800809e:	2200      	movs	r2, #0
 80080a0:	602a      	str	r2, [r5, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f7fa fe04 	bl	8002cb0 <_read>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_read_r+0x1e>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_read_r+0x1e>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	200005d4 	.word	0x200005d4

080080b8 <_sbrk_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_sbrk_r+0x1c>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7fa fe62 	bl	8002d8c <_sbrk>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_sbrk_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_sbrk_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200005d4 	.word	0x200005d4

080080d8 <_write_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_write_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7fa fdff 	bl	8002cea <_write>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_write_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_write_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	200005d4 	.word	0x200005d4

080080fc <__errno>:
 80080fc:	4b01      	ldr	r3, [pc, #4]	; (8008104 <__errno+0x8>)
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000068 	.word	0x20000068

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	; (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	; (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	; (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	; (800814c <__libc_init_array+0x44>)
 800811c:	f001 fdf8 	bl	8009d10 <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	0800b8c0 	.word	0x0800b8c0
 8008144:	0800b8c0 	.word	0x0800b8c0
 8008148:	0800b8c0 	.word	0x0800b8c0
 800814c:	0800b8c4 	.word	0x0800b8c4

08008150 <__retarget_lock_init_recursive>:
 8008150:	4770      	bx	lr

08008152 <__retarget_lock_acquire_recursive>:
 8008152:	4770      	bx	lr

08008154 <__retarget_lock_release_recursive>:
 8008154:	4770      	bx	lr

08008156 <memcpy>:
 8008156:	440a      	add	r2, r1
 8008158:	4291      	cmp	r1, r2
 800815a:	f100 33ff 	add.w	r3, r0, #4294967295
 800815e:	d100      	bne.n	8008162 <memcpy+0xc>
 8008160:	4770      	bx	lr
 8008162:	b510      	push	{r4, lr}
 8008164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800816c:	4291      	cmp	r1, r2
 800816e:	d1f9      	bne.n	8008164 <memcpy+0xe>
 8008170:	bd10      	pop	{r4, pc}

08008172 <abort>:
 8008172:	b508      	push	{r3, lr}
 8008174:	2006      	movs	r0, #6
 8008176:	f001 fcf5 	bl	8009b64 <raise>
 800817a:	2001      	movs	r0, #1
 800817c:	f7fa fd8e 	bl	8002c9c <_exit>

08008180 <quorem>:
 8008180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	6903      	ldr	r3, [r0, #16]
 8008186:	690c      	ldr	r4, [r1, #16]
 8008188:	42a3      	cmp	r3, r4
 800818a:	4607      	mov	r7, r0
 800818c:	db7e      	blt.n	800828c <quorem+0x10c>
 800818e:	3c01      	subs	r4, #1
 8008190:	f101 0814 	add.w	r8, r1, #20
 8008194:	f100 0514 	add.w	r5, r0, #20
 8008198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081a6:	3301      	adds	r3, #1
 80081a8:	429a      	cmp	r2, r3
 80081aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80081b6:	d331      	bcc.n	800821c <quorem+0x9c>
 80081b8:	f04f 0e00 	mov.w	lr, #0
 80081bc:	4640      	mov	r0, r8
 80081be:	46ac      	mov	ip, r5
 80081c0:	46f2      	mov	sl, lr
 80081c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80081c6:	b293      	uxth	r3, r2
 80081c8:	fb06 e303 	mla	r3, r6, r3, lr
 80081cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081d0:	0c1a      	lsrs	r2, r3, #16
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ebaa 0303 	sub.w	r3, sl, r3
 80081d8:	f8dc a000 	ldr.w	sl, [ip]
 80081dc:	fa13 f38a 	uxtah	r3, r3, sl
 80081e0:	fb06 220e 	mla	r2, r6, lr, r2
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	9b00      	ldr	r3, [sp, #0]
 80081e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ec:	b292      	uxth	r2, r2
 80081ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80081fa:	4581      	cmp	r9, r0
 80081fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008200:	f84c 3b04 	str.w	r3, [ip], #4
 8008204:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008208:	d2db      	bcs.n	80081c2 <quorem+0x42>
 800820a:	f855 300b 	ldr.w	r3, [r5, fp]
 800820e:	b92b      	cbnz	r3, 800821c <quorem+0x9c>
 8008210:	9b01      	ldr	r3, [sp, #4]
 8008212:	3b04      	subs	r3, #4
 8008214:	429d      	cmp	r5, r3
 8008216:	461a      	mov	r2, r3
 8008218:	d32c      	bcc.n	8008274 <quorem+0xf4>
 800821a:	613c      	str	r4, [r7, #16]
 800821c:	4638      	mov	r0, r7
 800821e:	f001 f8f1 	bl	8009404 <__mcmp>
 8008222:	2800      	cmp	r0, #0
 8008224:	db22      	blt.n	800826c <quorem+0xec>
 8008226:	3601      	adds	r6, #1
 8008228:	4629      	mov	r1, r5
 800822a:	2000      	movs	r0, #0
 800822c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008230:	f8d1 c000 	ldr.w	ip, [r1]
 8008234:	b293      	uxth	r3, r2
 8008236:	1ac3      	subs	r3, r0, r3
 8008238:	0c12      	lsrs	r2, r2, #16
 800823a:	fa13 f38c 	uxtah	r3, r3, ip
 800823e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800824c:	45c1      	cmp	r9, r8
 800824e:	f841 3b04 	str.w	r3, [r1], #4
 8008252:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008256:	d2e9      	bcs.n	800822c <quorem+0xac>
 8008258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800825c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008260:	b922      	cbnz	r2, 800826c <quorem+0xec>
 8008262:	3b04      	subs	r3, #4
 8008264:	429d      	cmp	r5, r3
 8008266:	461a      	mov	r2, r3
 8008268:	d30a      	bcc.n	8008280 <quorem+0x100>
 800826a:	613c      	str	r4, [r7, #16]
 800826c:	4630      	mov	r0, r6
 800826e:	b003      	add	sp, #12
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	3b04      	subs	r3, #4
 8008278:	2a00      	cmp	r2, #0
 800827a:	d1ce      	bne.n	800821a <quorem+0x9a>
 800827c:	3c01      	subs	r4, #1
 800827e:	e7c9      	b.n	8008214 <quorem+0x94>
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	3b04      	subs	r3, #4
 8008284:	2a00      	cmp	r2, #0
 8008286:	d1f0      	bne.n	800826a <quorem+0xea>
 8008288:	3c01      	subs	r4, #1
 800828a:	e7eb      	b.n	8008264 <quorem+0xe4>
 800828c:	2000      	movs	r0, #0
 800828e:	e7ee      	b.n	800826e <quorem+0xee>

08008290 <_dtoa_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	ed2d 8b04 	vpush	{d8-d9}
 8008298:	69c5      	ldr	r5, [r0, #28]
 800829a:	b093      	sub	sp, #76	; 0x4c
 800829c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082a0:	ec57 6b10 	vmov	r6, r7, d0
 80082a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082a8:	9107      	str	r1, [sp, #28]
 80082aa:	4604      	mov	r4, r0
 80082ac:	920a      	str	r2, [sp, #40]	; 0x28
 80082ae:	930d      	str	r3, [sp, #52]	; 0x34
 80082b0:	b975      	cbnz	r5, 80082d0 <_dtoa_r+0x40>
 80082b2:	2010      	movs	r0, #16
 80082b4:	f7ff f86c 	bl	8007390 <malloc>
 80082b8:	4602      	mov	r2, r0
 80082ba:	61e0      	str	r0, [r4, #28]
 80082bc:	b920      	cbnz	r0, 80082c8 <_dtoa_r+0x38>
 80082be:	4bae      	ldr	r3, [pc, #696]	; (8008578 <_dtoa_r+0x2e8>)
 80082c0:	21ef      	movs	r1, #239	; 0xef
 80082c2:	48ae      	ldr	r0, [pc, #696]	; (800857c <_dtoa_r+0x2ec>)
 80082c4:	f7ff f846 	bl	8007354 <__assert_func>
 80082c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082cc:	6005      	str	r5, [r0, #0]
 80082ce:	60c5      	str	r5, [r0, #12]
 80082d0:	69e3      	ldr	r3, [r4, #28]
 80082d2:	6819      	ldr	r1, [r3, #0]
 80082d4:	b151      	cbz	r1, 80082ec <_dtoa_r+0x5c>
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	604a      	str	r2, [r1, #4]
 80082da:	2301      	movs	r3, #1
 80082dc:	4093      	lsls	r3, r2
 80082de:	608b      	str	r3, [r1, #8]
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fe53 	bl	8008f8c <_Bfree>
 80082e6:	69e3      	ldr	r3, [r4, #28]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	1e3b      	subs	r3, r7, #0
 80082ee:	bfbb      	ittet	lt
 80082f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082f4:	9303      	strlt	r3, [sp, #12]
 80082f6:	2300      	movge	r3, #0
 80082f8:	2201      	movlt	r2, #1
 80082fa:	bfac      	ite	ge
 80082fc:	f8c8 3000 	strge.w	r3, [r8]
 8008300:	f8c8 2000 	strlt.w	r2, [r8]
 8008304:	4b9e      	ldr	r3, [pc, #632]	; (8008580 <_dtoa_r+0x2f0>)
 8008306:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800830a:	ea33 0308 	bics.w	r3, r3, r8
 800830e:	d11b      	bne.n	8008348 <_dtoa_r+0xb8>
 8008310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008312:	f242 730f 	movw	r3, #9999	; 0x270f
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800831c:	4333      	orrs	r3, r6
 800831e:	f000 8593 	beq.w	8008e48 <_dtoa_r+0xbb8>
 8008322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008324:	b963      	cbnz	r3, 8008340 <_dtoa_r+0xb0>
 8008326:	4b97      	ldr	r3, [pc, #604]	; (8008584 <_dtoa_r+0x2f4>)
 8008328:	e027      	b.n	800837a <_dtoa_r+0xea>
 800832a:	4b97      	ldr	r3, [pc, #604]	; (8008588 <_dtoa_r+0x2f8>)
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	9800      	ldr	r0, [sp, #0]
 8008336:	b013      	add	sp, #76	; 0x4c
 8008338:	ecbd 8b04 	vpop	{d8-d9}
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	4b90      	ldr	r3, [pc, #576]	; (8008584 <_dtoa_r+0x2f4>)
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	3303      	adds	r3, #3
 8008346:	e7f3      	b.n	8008330 <_dtoa_r+0xa0>
 8008348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	ec51 0b17 	vmov	r0, r1, d7
 8008352:	eeb0 8a47 	vmov.f32	s16, s14
 8008356:	eef0 8a67 	vmov.f32	s17, s15
 800835a:	2300      	movs	r3, #0
 800835c:	f7f8 fbd4 	bl	8000b08 <__aeabi_dcmpeq>
 8008360:	4681      	mov	r9, r0
 8008362:	b160      	cbz	r0, 800837e <_dtoa_r+0xee>
 8008364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008366:	2301      	movs	r3, #1
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8568 	beq.w	8008e42 <_dtoa_r+0xbb2>
 8008372:	4b86      	ldr	r3, [pc, #536]	; (800858c <_dtoa_r+0x2fc>)
 8008374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	e7da      	b.n	8008334 <_dtoa_r+0xa4>
 800837e:	aa10      	add	r2, sp, #64	; 0x40
 8008380:	a911      	add	r1, sp, #68	; 0x44
 8008382:	4620      	mov	r0, r4
 8008384:	eeb0 0a48 	vmov.f32	s0, s16
 8008388:	eef0 0a68 	vmov.f32	s1, s17
 800838c:	f001 f8e0 	bl	8009550 <__d2b>
 8008390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008394:	4682      	mov	sl, r0
 8008396:	2d00      	cmp	r5, #0
 8008398:	d07f      	beq.n	800849a <_dtoa_r+0x20a>
 800839a:	ee18 3a90 	vmov	r3, s17
 800839e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083a6:	ec51 0b18 	vmov	r0, r1, d8
 80083aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80083b6:	4619      	mov	r1, r3
 80083b8:	2200      	movs	r2, #0
 80083ba:	4b75      	ldr	r3, [pc, #468]	; (8008590 <_dtoa_r+0x300>)
 80083bc:	f7f7 ff84 	bl	80002c8 <__aeabi_dsub>
 80083c0:	a367      	add	r3, pc, #412	; (adr r3, 8008560 <_dtoa_r+0x2d0>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f8 f937 	bl	8000638 <__aeabi_dmul>
 80083ca:	a367      	add	r3, pc, #412	; (adr r3, 8008568 <_dtoa_r+0x2d8>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f7 ff7c 	bl	80002cc <__adddf3>
 80083d4:	4606      	mov	r6, r0
 80083d6:	4628      	mov	r0, r5
 80083d8:	460f      	mov	r7, r1
 80083da:	f7f8 f8c3 	bl	8000564 <__aeabi_i2d>
 80083de:	a364      	add	r3, pc, #400	; (adr r3, 8008570 <_dtoa_r+0x2e0>)
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f7f8 f928 	bl	8000638 <__aeabi_dmul>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f7 ff6c 	bl	80002cc <__adddf3>
 80083f4:	4606      	mov	r6, r0
 80083f6:	460f      	mov	r7, r1
 80083f8:	f7f8 fbce 	bl	8000b98 <__aeabi_d2iz>
 80083fc:	2200      	movs	r2, #0
 80083fe:	4683      	mov	fp, r0
 8008400:	2300      	movs	r3, #0
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f8 fb89 	bl	8000b1c <__aeabi_dcmplt>
 800840a:	b148      	cbz	r0, 8008420 <_dtoa_r+0x190>
 800840c:	4658      	mov	r0, fp
 800840e:	f7f8 f8a9 	bl	8000564 <__aeabi_i2d>
 8008412:	4632      	mov	r2, r6
 8008414:	463b      	mov	r3, r7
 8008416:	f7f8 fb77 	bl	8000b08 <__aeabi_dcmpeq>
 800841a:	b908      	cbnz	r0, 8008420 <_dtoa_r+0x190>
 800841c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008420:	f1bb 0f16 	cmp.w	fp, #22
 8008424:	d857      	bhi.n	80084d6 <_dtoa_r+0x246>
 8008426:	4b5b      	ldr	r3, [pc, #364]	; (8008594 <_dtoa_r+0x304>)
 8008428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	ec51 0b18 	vmov	r0, r1, d8
 8008434:	f7f8 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8008438:	2800      	cmp	r0, #0
 800843a:	d04e      	beq.n	80084da <_dtoa_r+0x24a>
 800843c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008440:	2300      	movs	r3, #0
 8008442:	930c      	str	r3, [sp, #48]	; 0x30
 8008444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008446:	1b5b      	subs	r3, r3, r5
 8008448:	1e5a      	subs	r2, r3, #1
 800844a:	bf45      	ittet	mi
 800844c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008450:	9305      	strmi	r3, [sp, #20]
 8008452:	2300      	movpl	r3, #0
 8008454:	2300      	movmi	r3, #0
 8008456:	9206      	str	r2, [sp, #24]
 8008458:	bf54      	ite	pl
 800845a:	9305      	strpl	r3, [sp, #20]
 800845c:	9306      	strmi	r3, [sp, #24]
 800845e:	f1bb 0f00 	cmp.w	fp, #0
 8008462:	db3c      	blt.n	80084de <_dtoa_r+0x24e>
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800846a:	445b      	add	r3, fp
 800846c:	9306      	str	r3, [sp, #24]
 800846e:	2300      	movs	r3, #0
 8008470:	9308      	str	r3, [sp, #32]
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	2b09      	cmp	r3, #9
 8008476:	d868      	bhi.n	800854a <_dtoa_r+0x2ba>
 8008478:	2b05      	cmp	r3, #5
 800847a:	bfc4      	itt	gt
 800847c:	3b04      	subgt	r3, #4
 800847e:	9307      	strgt	r3, [sp, #28]
 8008480:	9b07      	ldr	r3, [sp, #28]
 8008482:	f1a3 0302 	sub.w	r3, r3, #2
 8008486:	bfcc      	ite	gt
 8008488:	2500      	movgt	r5, #0
 800848a:	2501      	movle	r5, #1
 800848c:	2b03      	cmp	r3, #3
 800848e:	f200 8085 	bhi.w	800859c <_dtoa_r+0x30c>
 8008492:	e8df f003 	tbb	[pc, r3]
 8008496:	3b2e      	.short	0x3b2e
 8008498:	5839      	.short	0x5839
 800849a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800849e:	441d      	add	r5, r3
 80084a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	bfc1      	itttt	gt
 80084a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80084b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80084b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084b8:	bfd6      	itet	le
 80084ba:	f1c3 0320 	rsble	r3, r3, #32
 80084be:	ea48 0003 	orrgt.w	r0, r8, r3
 80084c2:	fa06 f003 	lslle.w	r0, r6, r3
 80084c6:	f7f8 f83d 	bl	8000544 <__aeabi_ui2d>
 80084ca:	2201      	movs	r2, #1
 80084cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80084d0:	3d01      	subs	r5, #1
 80084d2:	920e      	str	r2, [sp, #56]	; 0x38
 80084d4:	e76f      	b.n	80083b6 <_dtoa_r+0x126>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e7b3      	b.n	8008442 <_dtoa_r+0x1b2>
 80084da:	900c      	str	r0, [sp, #48]	; 0x30
 80084dc:	e7b2      	b.n	8008444 <_dtoa_r+0x1b4>
 80084de:	9b05      	ldr	r3, [sp, #20]
 80084e0:	eba3 030b 	sub.w	r3, r3, fp
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	f1cb 0300 	rsb	r3, fp, #0
 80084ea:	9308      	str	r3, [sp, #32]
 80084ec:	2300      	movs	r3, #0
 80084ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f0:	e7bf      	b.n	8008472 <_dtoa_r+0x1e2>
 80084f2:	2300      	movs	r3, #0
 80084f4:	9309      	str	r3, [sp, #36]	; 0x24
 80084f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dc52      	bgt.n	80085a2 <_dtoa_r+0x312>
 80084fc:	2301      	movs	r3, #1
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	461a      	mov	r2, r3
 8008504:	920a      	str	r2, [sp, #40]	; 0x28
 8008506:	e00b      	b.n	8008520 <_dtoa_r+0x290>
 8008508:	2301      	movs	r3, #1
 800850a:	e7f3      	b.n	80084f4 <_dtoa_r+0x264>
 800850c:	2300      	movs	r3, #0
 800850e:	9309      	str	r3, [sp, #36]	; 0x24
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	445b      	add	r3, fp
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	3301      	adds	r3, #1
 8008518:	2b01      	cmp	r3, #1
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	bfb8      	it	lt
 800851e:	2301      	movlt	r3, #1
 8008520:	69e0      	ldr	r0, [r4, #28]
 8008522:	2100      	movs	r1, #0
 8008524:	2204      	movs	r2, #4
 8008526:	f102 0614 	add.w	r6, r2, #20
 800852a:	429e      	cmp	r6, r3
 800852c:	d93d      	bls.n	80085aa <_dtoa_r+0x31a>
 800852e:	6041      	str	r1, [r0, #4]
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fceb 	bl	8008f0c <_Balloc>
 8008536:	9000      	str	r0, [sp, #0]
 8008538:	2800      	cmp	r0, #0
 800853a:	d139      	bne.n	80085b0 <_dtoa_r+0x320>
 800853c:	4b16      	ldr	r3, [pc, #88]	; (8008598 <_dtoa_r+0x308>)
 800853e:	4602      	mov	r2, r0
 8008540:	f240 11af 	movw	r1, #431	; 0x1af
 8008544:	e6bd      	b.n	80082c2 <_dtoa_r+0x32>
 8008546:	2301      	movs	r3, #1
 8008548:	e7e1      	b.n	800850e <_dtoa_r+0x27e>
 800854a:	2501      	movs	r5, #1
 800854c:	2300      	movs	r3, #0
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	9509      	str	r5, [sp, #36]	; 0x24
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	2200      	movs	r2, #0
 800855c:	2312      	movs	r3, #18
 800855e:	e7d1      	b.n	8008504 <_dtoa_r+0x274>
 8008560:	636f4361 	.word	0x636f4361
 8008564:	3fd287a7 	.word	0x3fd287a7
 8008568:	8b60c8b3 	.word	0x8b60c8b3
 800856c:	3fc68a28 	.word	0x3fc68a28
 8008570:	509f79fb 	.word	0x509f79fb
 8008574:	3fd34413 	.word	0x3fd34413
 8008578:	0800b5c1 	.word	0x0800b5c1
 800857c:	0800b5d8 	.word	0x0800b5d8
 8008580:	7ff00000 	.word	0x7ff00000
 8008584:	0800b5bd 	.word	0x0800b5bd
 8008588:	0800b5b4 	.word	0x0800b5b4
 800858c:	0800b591 	.word	0x0800b591
 8008590:	3ff80000 	.word	0x3ff80000
 8008594:	0800b6c8 	.word	0x0800b6c8
 8008598:	0800b630 	.word	0x0800b630
 800859c:	2301      	movs	r3, #1
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	e7d7      	b.n	8008552 <_dtoa_r+0x2c2>
 80085a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	e7ba      	b.n	8008520 <_dtoa_r+0x290>
 80085aa:	3101      	adds	r1, #1
 80085ac:	0052      	lsls	r2, r2, #1
 80085ae:	e7ba      	b.n	8008526 <_dtoa_r+0x296>
 80085b0:	69e3      	ldr	r3, [r4, #28]
 80085b2:	9a00      	ldr	r2, [sp, #0]
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	2b0e      	cmp	r3, #14
 80085ba:	f200 80a8 	bhi.w	800870e <_dtoa_r+0x47e>
 80085be:	2d00      	cmp	r5, #0
 80085c0:	f000 80a5 	beq.w	800870e <_dtoa_r+0x47e>
 80085c4:	f1bb 0f00 	cmp.w	fp, #0
 80085c8:	dd38      	ble.n	800863c <_dtoa_r+0x3ac>
 80085ca:	4bc0      	ldr	r3, [pc, #768]	; (80088cc <_dtoa_r+0x63c>)
 80085cc:	f00b 020f 	and.w	r2, fp, #15
 80085d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80085d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80085dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085e0:	d019      	beq.n	8008616 <_dtoa_r+0x386>
 80085e2:	4bbb      	ldr	r3, [pc, #748]	; (80088d0 <_dtoa_r+0x640>)
 80085e4:	ec51 0b18 	vmov	r0, r1, d8
 80085e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085ec:	f7f8 f94e 	bl	800088c <__aeabi_ddiv>
 80085f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f4:	f008 080f 	and.w	r8, r8, #15
 80085f8:	2503      	movs	r5, #3
 80085fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80088d0 <_dtoa_r+0x640>
 80085fe:	f1b8 0f00 	cmp.w	r8, #0
 8008602:	d10a      	bne.n	800861a <_dtoa_r+0x38a>
 8008604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	f7f8 f93e 	bl	800088c <__aeabi_ddiv>
 8008610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008614:	e02b      	b.n	800866e <_dtoa_r+0x3de>
 8008616:	2502      	movs	r5, #2
 8008618:	e7ef      	b.n	80085fa <_dtoa_r+0x36a>
 800861a:	f018 0f01 	tst.w	r8, #1
 800861e:	d008      	beq.n	8008632 <_dtoa_r+0x3a2>
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008628:	f7f8 f806 	bl	8000638 <__aeabi_dmul>
 800862c:	3501      	adds	r5, #1
 800862e:	4606      	mov	r6, r0
 8008630:	460f      	mov	r7, r1
 8008632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008636:	f109 0908 	add.w	r9, r9, #8
 800863a:	e7e0      	b.n	80085fe <_dtoa_r+0x36e>
 800863c:	f000 809f 	beq.w	800877e <_dtoa_r+0x4ee>
 8008640:	f1cb 0600 	rsb	r6, fp, #0
 8008644:	4ba1      	ldr	r3, [pc, #644]	; (80088cc <_dtoa_r+0x63c>)
 8008646:	4fa2      	ldr	r7, [pc, #648]	; (80088d0 <_dtoa_r+0x640>)
 8008648:	f006 020f 	and.w	r2, r6, #15
 800864c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	ec51 0b18 	vmov	r0, r1, d8
 8008658:	f7f7 ffee 	bl	8000638 <__aeabi_dmul>
 800865c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008660:	1136      	asrs	r6, r6, #4
 8008662:	2300      	movs	r3, #0
 8008664:	2502      	movs	r5, #2
 8008666:	2e00      	cmp	r6, #0
 8008668:	d17e      	bne.n	8008768 <_dtoa_r+0x4d8>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1d0      	bne.n	8008610 <_dtoa_r+0x380>
 800866e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008670:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8084 	beq.w	8008782 <_dtoa_r+0x4f2>
 800867a:	4b96      	ldr	r3, [pc, #600]	; (80088d4 <_dtoa_r+0x644>)
 800867c:	2200      	movs	r2, #0
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f8 fa4b 	bl	8000b1c <__aeabi_dcmplt>
 8008686:	2800      	cmp	r0, #0
 8008688:	d07b      	beq.n	8008782 <_dtoa_r+0x4f2>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d078      	beq.n	8008782 <_dtoa_r+0x4f2>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd39      	ble.n	800870a <_dtoa_r+0x47a>
 8008696:	4b90      	ldr	r3, [pc, #576]	; (80088d8 <_dtoa_r+0x648>)
 8008698:	2200      	movs	r2, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 ffcb 	bl	8000638 <__aeabi_dmul>
 80086a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a6:	9e01      	ldr	r6, [sp, #4]
 80086a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80086ac:	3501      	adds	r5, #1
 80086ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7f7 ff56 	bl	8000564 <__aeabi_i2d>
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	f7f7 ffbc 	bl	8000638 <__aeabi_dmul>
 80086c0:	4b86      	ldr	r3, [pc, #536]	; (80088dc <_dtoa_r+0x64c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	f7f7 fe02 	bl	80002cc <__adddf3>
 80086c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d158      	bne.n	8008788 <_dtoa_r+0x4f8>
 80086d6:	4b82      	ldr	r3, [pc, #520]	; (80088e0 <_dtoa_r+0x650>)
 80086d8:	2200      	movs	r2, #0
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fdf3 	bl	80002c8 <__aeabi_dsub>
 80086e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e6:	4680      	mov	r8, r0
 80086e8:	4689      	mov	r9, r1
 80086ea:	f7f8 fa35 	bl	8000b58 <__aeabi_dcmpgt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f040 8296 	bne.w	8008c20 <_dtoa_r+0x990>
 80086f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80086f8:	4640      	mov	r0, r8
 80086fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086fe:	4649      	mov	r1, r9
 8008700:	f7f8 fa0c 	bl	8000b1c <__aeabi_dcmplt>
 8008704:	2800      	cmp	r0, #0
 8008706:	f040 8289 	bne.w	8008c1c <_dtoa_r+0x98c>
 800870a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800870e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008710:	2b00      	cmp	r3, #0
 8008712:	f2c0 814e 	blt.w	80089b2 <_dtoa_r+0x722>
 8008716:	f1bb 0f0e 	cmp.w	fp, #14
 800871a:	f300 814a 	bgt.w	80089b2 <_dtoa_r+0x722>
 800871e:	4b6b      	ldr	r3, [pc, #428]	; (80088cc <_dtoa_r+0x63c>)
 8008720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	f280 80dc 	bge.w	80088e8 <_dtoa_r+0x658>
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f300 80d8 	bgt.w	80088e8 <_dtoa_r+0x658>
 8008738:	f040 826f 	bne.w	8008c1a <_dtoa_r+0x98a>
 800873c:	4b68      	ldr	r3, [pc, #416]	; (80088e0 <_dtoa_r+0x650>)
 800873e:	2200      	movs	r2, #0
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f7 ff78 	bl	8000638 <__aeabi_dmul>
 8008748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800874c:	f7f8 f9fa 	bl	8000b44 <__aeabi_dcmpge>
 8008750:	9e04      	ldr	r6, [sp, #16]
 8008752:	4637      	mov	r7, r6
 8008754:	2800      	cmp	r0, #0
 8008756:	f040 8245 	bne.w	8008be4 <_dtoa_r+0x954>
 800875a:	9d00      	ldr	r5, [sp, #0]
 800875c:	2331      	movs	r3, #49	; 0x31
 800875e:	f805 3b01 	strb.w	r3, [r5], #1
 8008762:	f10b 0b01 	add.w	fp, fp, #1
 8008766:	e241      	b.n	8008bec <_dtoa_r+0x95c>
 8008768:	07f2      	lsls	r2, r6, #31
 800876a:	d505      	bpl.n	8008778 <_dtoa_r+0x4e8>
 800876c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008770:	f7f7 ff62 	bl	8000638 <__aeabi_dmul>
 8008774:	3501      	adds	r5, #1
 8008776:	2301      	movs	r3, #1
 8008778:	1076      	asrs	r6, r6, #1
 800877a:	3708      	adds	r7, #8
 800877c:	e773      	b.n	8008666 <_dtoa_r+0x3d6>
 800877e:	2502      	movs	r5, #2
 8008780:	e775      	b.n	800866e <_dtoa_r+0x3de>
 8008782:	9e04      	ldr	r6, [sp, #16]
 8008784:	465f      	mov	r7, fp
 8008786:	e792      	b.n	80086ae <_dtoa_r+0x41e>
 8008788:	9900      	ldr	r1, [sp, #0]
 800878a:	4b50      	ldr	r3, [pc, #320]	; (80088cc <_dtoa_r+0x63c>)
 800878c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008790:	4431      	add	r1, r6
 8008792:	9102      	str	r1, [sp, #8]
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	eeb0 9a47 	vmov.f32	s18, s14
 800879a:	eef0 9a67 	vmov.f32	s19, s15
 800879e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d044      	beq.n	8008834 <_dtoa_r+0x5a4>
 80087aa:	494e      	ldr	r1, [pc, #312]	; (80088e4 <_dtoa_r+0x654>)
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7f8 f86d 	bl	800088c <__aeabi_ddiv>
 80087b2:	ec53 2b19 	vmov	r2, r3, d9
 80087b6:	f7f7 fd87 	bl	80002c8 <__aeabi_dsub>
 80087ba:	9d00      	ldr	r5, [sp, #0]
 80087bc:	ec41 0b19 	vmov	d9, r0, r1
 80087c0:	4649      	mov	r1, r9
 80087c2:	4640      	mov	r0, r8
 80087c4:	f7f8 f9e8 	bl	8000b98 <__aeabi_d2iz>
 80087c8:	4606      	mov	r6, r0
 80087ca:	f7f7 fecb 	bl	8000564 <__aeabi_i2d>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f7 fd77 	bl	80002c8 <__aeabi_dsub>
 80087da:	3630      	adds	r6, #48	; 0x30
 80087dc:	f805 6b01 	strb.w	r6, [r5], #1
 80087e0:	ec53 2b19 	vmov	r2, r3, d9
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	f7f8 f998 	bl	8000b1c <__aeabi_dcmplt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d164      	bne.n	80088ba <_dtoa_r+0x62a>
 80087f0:	4642      	mov	r2, r8
 80087f2:	464b      	mov	r3, r9
 80087f4:	4937      	ldr	r1, [pc, #220]	; (80088d4 <_dtoa_r+0x644>)
 80087f6:	2000      	movs	r0, #0
 80087f8:	f7f7 fd66 	bl	80002c8 <__aeabi_dsub>
 80087fc:	ec53 2b19 	vmov	r2, r3, d9
 8008800:	f7f8 f98c 	bl	8000b1c <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	f040 80b6 	bne.w	8008976 <_dtoa_r+0x6e6>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	429d      	cmp	r5, r3
 800880e:	f43f af7c 	beq.w	800870a <_dtoa_r+0x47a>
 8008812:	4b31      	ldr	r3, [pc, #196]	; (80088d8 <_dtoa_r+0x648>)
 8008814:	ec51 0b19 	vmov	r0, r1, d9
 8008818:	2200      	movs	r2, #0
 800881a:	f7f7 ff0d 	bl	8000638 <__aeabi_dmul>
 800881e:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <_dtoa_r+0x648>)
 8008820:	ec41 0b19 	vmov	d9, r0, r1
 8008824:	2200      	movs	r2, #0
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f7 ff05 	bl	8000638 <__aeabi_dmul>
 800882e:	4680      	mov	r8, r0
 8008830:	4689      	mov	r9, r1
 8008832:	e7c5      	b.n	80087c0 <_dtoa_r+0x530>
 8008834:	ec51 0b17 	vmov	r0, r1, d7
 8008838:	f7f7 fefe 	bl	8000638 <__aeabi_dmul>
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	9d00      	ldr	r5, [sp, #0]
 8008840:	930f      	str	r3, [sp, #60]	; 0x3c
 8008842:	ec41 0b19 	vmov	d9, r0, r1
 8008846:	4649      	mov	r1, r9
 8008848:	4640      	mov	r0, r8
 800884a:	f7f8 f9a5 	bl	8000b98 <__aeabi_d2iz>
 800884e:	4606      	mov	r6, r0
 8008850:	f7f7 fe88 	bl	8000564 <__aeabi_i2d>
 8008854:	3630      	adds	r6, #48	; 0x30
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4640      	mov	r0, r8
 800885c:	4649      	mov	r1, r9
 800885e:	f7f7 fd33 	bl	80002c8 <__aeabi_dsub>
 8008862:	f805 6b01 	strb.w	r6, [r5], #1
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	429d      	cmp	r5, r3
 800886a:	4680      	mov	r8, r0
 800886c:	4689      	mov	r9, r1
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	d124      	bne.n	80088be <_dtoa_r+0x62e>
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <_dtoa_r+0x654>)
 8008876:	ec51 0b19 	vmov	r0, r1, d9
 800887a:	f7f7 fd27 	bl	80002cc <__adddf3>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	f7f8 f967 	bl	8000b58 <__aeabi_dcmpgt>
 800888a:	2800      	cmp	r0, #0
 800888c:	d173      	bne.n	8008976 <_dtoa_r+0x6e6>
 800888e:	ec53 2b19 	vmov	r2, r3, d9
 8008892:	4914      	ldr	r1, [pc, #80]	; (80088e4 <_dtoa_r+0x654>)
 8008894:	2000      	movs	r0, #0
 8008896:	f7f7 fd17 	bl	80002c8 <__aeabi_dsub>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f8 f93b 	bl	8000b1c <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f43f af2f 	beq.w	800870a <_dtoa_r+0x47a>
 80088ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088ae:	1e6b      	subs	r3, r5, #1
 80088b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088b6:	2b30      	cmp	r3, #48	; 0x30
 80088b8:	d0f8      	beq.n	80088ac <_dtoa_r+0x61c>
 80088ba:	46bb      	mov	fp, r7
 80088bc:	e04a      	b.n	8008954 <_dtoa_r+0x6c4>
 80088be:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <_dtoa_r+0x648>)
 80088c0:	f7f7 feba 	bl	8000638 <__aeabi_dmul>
 80088c4:	4680      	mov	r8, r0
 80088c6:	4689      	mov	r9, r1
 80088c8:	e7bd      	b.n	8008846 <_dtoa_r+0x5b6>
 80088ca:	bf00      	nop
 80088cc:	0800b6c8 	.word	0x0800b6c8
 80088d0:	0800b6a0 	.word	0x0800b6a0
 80088d4:	3ff00000 	.word	0x3ff00000
 80088d8:	40240000 	.word	0x40240000
 80088dc:	401c0000 	.word	0x401c0000
 80088e0:	40140000 	.word	0x40140000
 80088e4:	3fe00000 	.word	0x3fe00000
 80088e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088ec:	9d00      	ldr	r5, [sp, #0]
 80088ee:	4642      	mov	r2, r8
 80088f0:	464b      	mov	r3, r9
 80088f2:	4630      	mov	r0, r6
 80088f4:	4639      	mov	r1, r7
 80088f6:	f7f7 ffc9 	bl	800088c <__aeabi_ddiv>
 80088fa:	f7f8 f94d 	bl	8000b98 <__aeabi_d2iz>
 80088fe:	9001      	str	r0, [sp, #4]
 8008900:	f7f7 fe30 	bl	8000564 <__aeabi_i2d>
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	f7f7 fe96 	bl	8000638 <__aeabi_dmul>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f7 fcd8 	bl	80002c8 <__aeabi_dsub>
 8008918:	9e01      	ldr	r6, [sp, #4]
 800891a:	9f04      	ldr	r7, [sp, #16]
 800891c:	3630      	adds	r6, #48	; 0x30
 800891e:	f805 6b01 	strb.w	r6, [r5], #1
 8008922:	9e00      	ldr	r6, [sp, #0]
 8008924:	1bae      	subs	r6, r5, r6
 8008926:	42b7      	cmp	r7, r6
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	d134      	bne.n	8008998 <_dtoa_r+0x708>
 800892e:	f7f7 fccd 	bl	80002cc <__adddf3>
 8008932:	4642      	mov	r2, r8
 8008934:	464b      	mov	r3, r9
 8008936:	4606      	mov	r6, r0
 8008938:	460f      	mov	r7, r1
 800893a:	f7f8 f90d 	bl	8000b58 <__aeabi_dcmpgt>
 800893e:	b9c8      	cbnz	r0, 8008974 <_dtoa_r+0x6e4>
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f8 f8de 	bl	8000b08 <__aeabi_dcmpeq>
 800894c:	b110      	cbz	r0, 8008954 <_dtoa_r+0x6c4>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	07db      	lsls	r3, r3, #31
 8008952:	d40f      	bmi.n	8008974 <_dtoa_r+0x6e4>
 8008954:	4651      	mov	r1, sl
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fb18 	bl	8008f8c <_Bfree>
 800895c:	2300      	movs	r3, #0
 800895e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008960:	702b      	strb	r3, [r5, #0]
 8008962:	f10b 0301 	add.w	r3, fp, #1
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800896a:	2b00      	cmp	r3, #0
 800896c:	f43f ace2 	beq.w	8008334 <_dtoa_r+0xa4>
 8008970:	601d      	str	r5, [r3, #0]
 8008972:	e4df      	b.n	8008334 <_dtoa_r+0xa4>
 8008974:	465f      	mov	r7, fp
 8008976:	462b      	mov	r3, r5
 8008978:	461d      	mov	r5, r3
 800897a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800897e:	2a39      	cmp	r2, #57	; 0x39
 8008980:	d106      	bne.n	8008990 <_dtoa_r+0x700>
 8008982:	9a00      	ldr	r2, [sp, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d1f7      	bne.n	8008978 <_dtoa_r+0x6e8>
 8008988:	9900      	ldr	r1, [sp, #0]
 800898a:	2230      	movs	r2, #48	; 0x30
 800898c:	3701      	adds	r7, #1
 800898e:	700a      	strb	r2, [r1, #0]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	3201      	adds	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e790      	b.n	80088ba <_dtoa_r+0x62a>
 8008998:	4ba3      	ldr	r3, [pc, #652]	; (8008c28 <_dtoa_r+0x998>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe4c 	bl	8000638 <__aeabi_dmul>
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	4606      	mov	r6, r0
 80089a6:	460f      	mov	r7, r1
 80089a8:	f7f8 f8ae 	bl	8000b08 <__aeabi_dcmpeq>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d09e      	beq.n	80088ee <_dtoa_r+0x65e>
 80089b0:	e7d0      	b.n	8008954 <_dtoa_r+0x6c4>
 80089b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	f000 80ca 	beq.w	8008b4e <_dtoa_r+0x8be>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	f300 80ad 	bgt.w	8008b1c <_dtoa_r+0x88c>
 80089c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	f000 80a5 	beq.w	8008b14 <_dtoa_r+0x884>
 80089ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089ce:	9e08      	ldr	r6, [sp, #32]
 80089d0:	9d05      	ldr	r5, [sp, #20]
 80089d2:	9a05      	ldr	r2, [sp, #20]
 80089d4:	441a      	add	r2, r3
 80089d6:	9205      	str	r2, [sp, #20]
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	2101      	movs	r1, #1
 80089dc:	441a      	add	r2, r3
 80089de:	4620      	mov	r0, r4
 80089e0:	9206      	str	r2, [sp, #24]
 80089e2:	f000 fb89 	bl	80090f8 <__i2b>
 80089e6:	4607      	mov	r7, r0
 80089e8:	b165      	cbz	r5, 8008a04 <_dtoa_r+0x774>
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd09      	ble.n	8008a04 <_dtoa_r+0x774>
 80089f0:	42ab      	cmp	r3, r5
 80089f2:	9a05      	ldr	r2, [sp, #20]
 80089f4:	bfa8      	it	ge
 80089f6:	462b      	movge	r3, r5
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	9205      	str	r2, [sp, #20]
 80089fc:	9a06      	ldr	r2, [sp, #24]
 80089fe:	1aed      	subs	r5, r5, r3
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	9306      	str	r3, [sp, #24]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	b1f3      	cbz	r3, 8008a46 <_dtoa_r+0x7b6>
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80a3 	beq.w	8008b56 <_dtoa_r+0x8c6>
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	dd10      	ble.n	8008a36 <_dtoa_r+0x7a6>
 8008a14:	4639      	mov	r1, r7
 8008a16:	4632      	mov	r2, r6
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 fc2d 	bl	8009278 <__pow5mult>
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4601      	mov	r1, r0
 8008a22:	4607      	mov	r7, r0
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fb7d 	bl	8009124 <__multiply>
 8008a2a:	4651      	mov	r1, sl
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 faac 	bl	8008f8c <_Bfree>
 8008a34:	46c2      	mov	sl, r8
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	1b9a      	subs	r2, r3, r6
 8008a3a:	d004      	beq.n	8008a46 <_dtoa_r+0x7b6>
 8008a3c:	4651      	mov	r1, sl
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 fc1a 	bl	8009278 <__pow5mult>
 8008a44:	4682      	mov	sl, r0
 8008a46:	2101      	movs	r1, #1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fb55 	bl	80090f8 <__i2b>
 8008a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	4606      	mov	r6, r0
 8008a54:	f340 8081 	ble.w	8008b5a <_dtoa_r+0x8ca>
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fc0b 	bl	8009278 <__pow5mult>
 8008a62:	9b07      	ldr	r3, [sp, #28]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	4606      	mov	r6, r0
 8008a68:	dd7a      	ble.n	8008b60 <_dtoa_r+0x8d0>
 8008a6a:	f04f 0800 	mov.w	r8, #0
 8008a6e:	6933      	ldr	r3, [r6, #16]
 8008a70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a74:	6918      	ldr	r0, [r3, #16]
 8008a76:	f000 faf1 	bl	800905c <__hi0bits>
 8008a7a:	f1c0 0020 	rsb	r0, r0, #32
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	4418      	add	r0, r3
 8008a82:	f010 001f 	ands.w	r0, r0, #31
 8008a86:	f000 8094 	beq.w	8008bb2 <_dtoa_r+0x922>
 8008a8a:	f1c0 0320 	rsb	r3, r0, #32
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	f340 8085 	ble.w	8008b9e <_dtoa_r+0x90e>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	f1c0 001c 	rsb	r0, r0, #28
 8008a9a:	4403      	add	r3, r0
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	4403      	add	r3, r0
 8008aa2:	4405      	add	r5, r0
 8008aa4:	9306      	str	r3, [sp, #24]
 8008aa6:	9b05      	ldr	r3, [sp, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dd05      	ble.n	8008ab8 <_dtoa_r+0x828>
 8008aac:	4651      	mov	r1, sl
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fc3b 	bl	800932c <__lshift>
 8008ab6:	4682      	mov	sl, r0
 8008ab8:	9b06      	ldr	r3, [sp, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dd05      	ble.n	8008aca <_dtoa_r+0x83a>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fc32 	bl	800932c <__lshift>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d072      	beq.n	8008bb6 <_dtoa_r+0x926>
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	f000 fc96 	bl	8009404 <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	da6c      	bge.n	8008bb6 <_dtoa_r+0x926>
 8008adc:	2300      	movs	r3, #0
 8008ade:	4651      	mov	r1, sl
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fa74 	bl	8008fd0 <__multadd>
 8008ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aee:	4682      	mov	sl, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 81b0 	beq.w	8008e56 <_dtoa_r+0xbc6>
 8008af6:	2300      	movs	r3, #0
 8008af8:	4639      	mov	r1, r7
 8008afa:	220a      	movs	r2, #10
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fa67 	bl	8008fd0 <__multadd>
 8008b02:	9b01      	ldr	r3, [sp, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	4607      	mov	r7, r0
 8008b08:	f300 8096 	bgt.w	8008c38 <_dtoa_r+0x9a8>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	dc59      	bgt.n	8008bc6 <_dtoa_r+0x936>
 8008b12:	e091      	b.n	8008c38 <_dtoa_r+0x9a8>
 8008b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b1a:	e758      	b.n	80089ce <_dtoa_r+0x73e>
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	1e5e      	subs	r6, r3, #1
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	42b3      	cmp	r3, r6
 8008b24:	bfbf      	itttt	lt
 8008b26:	9b08      	ldrlt	r3, [sp, #32]
 8008b28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b2a:	9608      	strlt	r6, [sp, #32]
 8008b2c:	1af3      	sublt	r3, r6, r3
 8008b2e:	bfb4      	ite	lt
 8008b30:	18d2      	addlt	r2, r2, r3
 8008b32:	1b9e      	subge	r6, r3, r6
 8008b34:	9b04      	ldr	r3, [sp, #16]
 8008b36:	bfbc      	itt	lt
 8008b38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b3a:	2600      	movlt	r6, #0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bfb7      	itett	lt
 8008b40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b48:	1a9d      	sublt	r5, r3, r2
 8008b4a:	2300      	movlt	r3, #0
 8008b4c:	e741      	b.n	80089d2 <_dtoa_r+0x742>
 8008b4e:	9e08      	ldr	r6, [sp, #32]
 8008b50:	9d05      	ldr	r5, [sp, #20]
 8008b52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b54:	e748      	b.n	80089e8 <_dtoa_r+0x758>
 8008b56:	9a08      	ldr	r2, [sp, #32]
 8008b58:	e770      	b.n	8008a3c <_dtoa_r+0x7ac>
 8008b5a:	9b07      	ldr	r3, [sp, #28]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	dc19      	bgt.n	8008b94 <_dtoa_r+0x904>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	b9bb      	cbnz	r3, 8008b94 <_dtoa_r+0x904>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b6a:	b99b      	cbnz	r3, 8008b94 <_dtoa_r+0x904>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b72:	0d1b      	lsrs	r3, r3, #20
 8008b74:	051b      	lsls	r3, r3, #20
 8008b76:	b183      	cbz	r3, 8008b9a <_dtoa_r+0x90a>
 8008b78:	9b05      	ldr	r3, [sp, #20]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	9305      	str	r3, [sp, #20]
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9306      	str	r3, [sp, #24]
 8008b84:	f04f 0801 	mov.w	r8, #1
 8008b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f47f af6f 	bne.w	8008a6e <_dtoa_r+0x7de>
 8008b90:	2001      	movs	r0, #1
 8008b92:	e774      	b.n	8008a7e <_dtoa_r+0x7ee>
 8008b94:	f04f 0800 	mov.w	r8, #0
 8008b98:	e7f6      	b.n	8008b88 <_dtoa_r+0x8f8>
 8008b9a:	4698      	mov	r8, r3
 8008b9c:	e7f4      	b.n	8008b88 <_dtoa_r+0x8f8>
 8008b9e:	d082      	beq.n	8008aa6 <_dtoa_r+0x816>
 8008ba0:	9a05      	ldr	r2, [sp, #20]
 8008ba2:	331c      	adds	r3, #28
 8008ba4:	441a      	add	r2, r3
 8008ba6:	9205      	str	r2, [sp, #20]
 8008ba8:	9a06      	ldr	r2, [sp, #24]
 8008baa:	441a      	add	r2, r3
 8008bac:	441d      	add	r5, r3
 8008bae:	9206      	str	r2, [sp, #24]
 8008bb0:	e779      	b.n	8008aa6 <_dtoa_r+0x816>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	e7f4      	b.n	8008ba0 <_dtoa_r+0x910>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc37      	bgt.n	8008c2c <_dtoa_r+0x99c>
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	dd34      	ble.n	8008c2c <_dtoa_r+0x99c>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	b963      	cbnz	r3, 8008be4 <_dtoa_r+0x954>
 8008bca:	4631      	mov	r1, r6
 8008bcc:	2205      	movs	r2, #5
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 f9fe 	bl	8008fd0 <__multadd>
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	4650      	mov	r0, sl
 8008bda:	f000 fc13 	bl	8009404 <__mcmp>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f73f adbb 	bgt.w	800875a <_dtoa_r+0x4ca>
 8008be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be6:	9d00      	ldr	r5, [sp, #0]
 8008be8:	ea6f 0b03 	mvn.w	fp, r3
 8008bec:	f04f 0800 	mov.w	r8, #0
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f9ca 	bl	8008f8c <_Bfree>
 8008bf8:	2f00      	cmp	r7, #0
 8008bfa:	f43f aeab 	beq.w	8008954 <_dtoa_r+0x6c4>
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	d005      	beq.n	8008c10 <_dtoa_r+0x980>
 8008c04:	45b8      	cmp	r8, r7
 8008c06:	d003      	beq.n	8008c10 <_dtoa_r+0x980>
 8008c08:	4641      	mov	r1, r8
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f9be 	bl	8008f8c <_Bfree>
 8008c10:	4639      	mov	r1, r7
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 f9ba 	bl	8008f8c <_Bfree>
 8008c18:	e69c      	b.n	8008954 <_dtoa_r+0x6c4>
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	4637      	mov	r7, r6
 8008c1e:	e7e1      	b.n	8008be4 <_dtoa_r+0x954>
 8008c20:	46bb      	mov	fp, r7
 8008c22:	4637      	mov	r7, r6
 8008c24:	e599      	b.n	800875a <_dtoa_r+0x4ca>
 8008c26:	bf00      	nop
 8008c28:	40240000 	.word	0x40240000
 8008c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80c8 	beq.w	8008dc4 <_dtoa_r+0xb34>
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	dd05      	ble.n	8008c48 <_dtoa_r+0x9b8>
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fb73 	bl	800932c <__lshift>
 8008c46:	4607      	mov	r7, r0
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	d05b      	beq.n	8008d06 <_dtoa_r+0xa76>
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 f95b 	bl	8008f0c <_Balloc>
 8008c56:	4605      	mov	r5, r0
 8008c58:	b928      	cbnz	r0, 8008c66 <_dtoa_r+0x9d6>
 8008c5a:	4b83      	ldr	r3, [pc, #524]	; (8008e68 <_dtoa_r+0xbd8>)
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c62:	f7ff bb2e 	b.w	80082c2 <_dtoa_r+0x32>
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	3202      	adds	r2, #2
 8008c6a:	0092      	lsls	r2, r2, #2
 8008c6c:	f107 010c 	add.w	r1, r7, #12
 8008c70:	300c      	adds	r0, #12
 8008c72:	f7ff fa70 	bl	8008156 <memcpy>
 8008c76:	2201      	movs	r2, #1
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fb56 	bl	800932c <__lshift>
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	9304      	str	r3, [sp, #16]
 8008c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	9308      	str	r3, [sp, #32]
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	46b8      	mov	r8, r7
 8008c96:	9306      	str	r3, [sp, #24]
 8008c98:	4607      	mov	r7, r0
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	f7ff fa6c 	bl	8008180 <quorem>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	9002      	str	r0, [sp, #8]
 8008cac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f000 fba7 	bl	8009404 <__mcmp>
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	9005      	str	r0, [sp, #20]
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fbbd 	bl	800943c <__mdiff>
 8008cc2:	68c2      	ldr	r2, [r0, #12]
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	bb02      	cbnz	r2, 8008d0a <_dtoa_r+0xa7a>
 8008cc8:	4601      	mov	r1, r0
 8008cca:	4650      	mov	r0, sl
 8008ccc:	f000 fb9a 	bl	8009404 <__mcmp>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd8:	f000 f958 	bl	8008f8c <_Bfree>
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce0:	9d04      	ldr	r5, [sp, #16]
 8008ce2:	ea43 0102 	orr.w	r1, r3, r2
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	4319      	orrs	r1, r3
 8008cea:	d110      	bne.n	8008d0e <_dtoa_r+0xa7e>
 8008cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cf0:	d029      	beq.n	8008d46 <_dtoa_r+0xab6>
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dd02      	ble.n	8008cfe <_dtoa_r+0xa6e>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	f883 9000 	strb.w	r9, [r3]
 8008d04:	e774      	b.n	8008bf0 <_dtoa_r+0x960>
 8008d06:	4638      	mov	r0, r7
 8008d08:	e7ba      	b.n	8008c80 <_dtoa_r+0x9f0>
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	e7e1      	b.n	8008cd2 <_dtoa_r+0xa42>
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	db04      	blt.n	8008d1e <_dtoa_r+0xa8e>
 8008d14:	9907      	ldr	r1, [sp, #28]
 8008d16:	430b      	orrs	r3, r1
 8008d18:	9906      	ldr	r1, [sp, #24]
 8008d1a:	430b      	orrs	r3, r1
 8008d1c:	d120      	bne.n	8008d60 <_dtoa_r+0xad0>
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	dded      	ble.n	8008cfe <_dtoa_r+0xa6e>
 8008d22:	4651      	mov	r1, sl
 8008d24:	2201      	movs	r2, #1
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 fb00 	bl	800932c <__lshift>
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4682      	mov	sl, r0
 8008d30:	f000 fb68 	bl	8009404 <__mcmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	dc03      	bgt.n	8008d40 <_dtoa_r+0xab0>
 8008d38:	d1e1      	bne.n	8008cfe <_dtoa_r+0xa6e>
 8008d3a:	f019 0f01 	tst.w	r9, #1
 8008d3e:	d0de      	beq.n	8008cfe <_dtoa_r+0xa6e>
 8008d40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d44:	d1d8      	bne.n	8008cf8 <_dtoa_r+0xa68>
 8008d46:	9a01      	ldr	r2, [sp, #4]
 8008d48:	2339      	movs	r3, #57	; 0x39
 8008d4a:	7013      	strb	r3, [r2, #0]
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	461d      	mov	r5, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d56:	2a39      	cmp	r2, #57	; 0x39
 8008d58:	d06c      	beq.n	8008e34 <_dtoa_r+0xba4>
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e747      	b.n	8008bf0 <_dtoa_r+0x960>
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	dd07      	ble.n	8008d74 <_dtoa_r+0xae4>
 8008d64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d68:	d0ed      	beq.n	8008d46 <_dtoa_r+0xab6>
 8008d6a:	9a01      	ldr	r2, [sp, #4]
 8008d6c:	f109 0301 	add.w	r3, r9, #1
 8008d70:	7013      	strb	r3, [r2, #0]
 8008d72:	e73d      	b.n	8008bf0 <_dtoa_r+0x960>
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	9a08      	ldr	r2, [sp, #32]
 8008d78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d043      	beq.n	8008e08 <_dtoa_r+0xb78>
 8008d80:	4651      	mov	r1, sl
 8008d82:	2300      	movs	r3, #0
 8008d84:	220a      	movs	r2, #10
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 f922 	bl	8008fd0 <__multadd>
 8008d8c:	45b8      	cmp	r8, r7
 8008d8e:	4682      	mov	sl, r0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	f04f 020a 	mov.w	r2, #10
 8008d98:	4641      	mov	r1, r8
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	d107      	bne.n	8008dae <_dtoa_r+0xb1e>
 8008d9e:	f000 f917 	bl	8008fd0 <__multadd>
 8008da2:	4680      	mov	r8, r0
 8008da4:	4607      	mov	r7, r0
 8008da6:	9b04      	ldr	r3, [sp, #16]
 8008da8:	3301      	adds	r3, #1
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	e775      	b.n	8008c9a <_dtoa_r+0xa0a>
 8008dae:	f000 f90f 	bl	8008fd0 <__multadd>
 8008db2:	4639      	mov	r1, r7
 8008db4:	4680      	mov	r8, r0
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f908 	bl	8008fd0 <__multadd>
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	e7f0      	b.n	8008da6 <_dtoa_r+0xb16>
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	9d00      	ldr	r5, [sp, #0]
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4650      	mov	r0, sl
 8008dce:	f7ff f9d7 	bl	8008180 <quorem>
 8008dd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008dd6:	9b00      	ldr	r3, [sp, #0]
 8008dd8:	f805 9b01 	strb.w	r9, [r5], #1
 8008ddc:	1aea      	subs	r2, r5, r3
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	4293      	cmp	r3, r2
 8008de2:	dd07      	ble.n	8008df4 <_dtoa_r+0xb64>
 8008de4:	4651      	mov	r1, sl
 8008de6:	2300      	movs	r3, #0
 8008de8:	220a      	movs	r2, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f8f0 	bl	8008fd0 <__multadd>
 8008df0:	4682      	mov	sl, r0
 8008df2:	e7ea      	b.n	8008dca <_dtoa_r+0xb3a>
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfc8      	it	gt
 8008dfa:	461d      	movgt	r5, r3
 8008dfc:	9b00      	ldr	r3, [sp, #0]
 8008dfe:	bfd8      	it	le
 8008e00:	2501      	movle	r5, #1
 8008e02:	441d      	add	r5, r3
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	4651      	mov	r1, sl
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fa8d 	bl	800932c <__lshift>
 8008e12:	4631      	mov	r1, r6
 8008e14:	4682      	mov	sl, r0
 8008e16:	f000 faf5 	bl	8009404 <__mcmp>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	dc96      	bgt.n	8008d4c <_dtoa_r+0xabc>
 8008e1e:	d102      	bne.n	8008e26 <_dtoa_r+0xb96>
 8008e20:	f019 0f01 	tst.w	r9, #1
 8008e24:	d192      	bne.n	8008d4c <_dtoa_r+0xabc>
 8008e26:	462b      	mov	r3, r5
 8008e28:	461d      	mov	r5, r3
 8008e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e2e:	2a30      	cmp	r2, #48	; 0x30
 8008e30:	d0fa      	beq.n	8008e28 <_dtoa_r+0xb98>
 8008e32:	e6dd      	b.n	8008bf0 <_dtoa_r+0x960>
 8008e34:	9a00      	ldr	r2, [sp, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d189      	bne.n	8008d4e <_dtoa_r+0xabe>
 8008e3a:	f10b 0b01 	add.w	fp, fp, #1
 8008e3e:	2331      	movs	r3, #49	; 0x31
 8008e40:	e796      	b.n	8008d70 <_dtoa_r+0xae0>
 8008e42:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <_dtoa_r+0xbdc>)
 8008e44:	f7ff ba99 	b.w	800837a <_dtoa_r+0xea>
 8008e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f47f aa6d 	bne.w	800832a <_dtoa_r+0x9a>
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <_dtoa_r+0xbe0>)
 8008e52:	f7ff ba92 	b.w	800837a <_dtoa_r+0xea>
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dcb5      	bgt.n	8008dc8 <_dtoa_r+0xb38>
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	f73f aeb1 	bgt.w	8008bc6 <_dtoa_r+0x936>
 8008e64:	e7b0      	b.n	8008dc8 <_dtoa_r+0xb38>
 8008e66:	bf00      	nop
 8008e68:	0800b630 	.word	0x0800b630
 8008e6c:	0800b590 	.word	0x0800b590
 8008e70:	0800b5b4 	.word	0x0800b5b4

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_free_r+0x90>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f7fe fb31 	bl	80074f0 <__malloc_lock>
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <_free_r+0x94>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x30>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	f7fe bb2c 	b.w	80074fc <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x46>
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x22>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x50>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x46>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1855      	adds	r5, r2, r1
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x70>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	4421      	add	r1, r4
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x26>
 8008ed8:	681c      	ldr	r4, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	440c      	add	r4, r1
 8008ee0:	6014      	str	r4, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x26>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x78>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x26>
 8008eec:	6825      	ldr	r5, [r4, #0]
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1949      	addeq	r1, r1, r5
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x26>
 8008f04:	b003      	add	sp, #12
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	20000490 	.word	0x20000490

08008f0c <_Balloc>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	69c6      	ldr	r6, [r0, #28]
 8008f10:	4604      	mov	r4, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	b976      	cbnz	r6, 8008f34 <_Balloc+0x28>
 8008f16:	2010      	movs	r0, #16
 8008f18:	f7fe fa3a 	bl	8007390 <malloc>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	61e0      	str	r0, [r4, #28]
 8008f20:	b920      	cbnz	r0, 8008f2c <_Balloc+0x20>
 8008f22:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <_Balloc+0x78>)
 8008f24:	4818      	ldr	r0, [pc, #96]	; (8008f88 <_Balloc+0x7c>)
 8008f26:	216b      	movs	r1, #107	; 0x6b
 8008f28:	f7fe fa14 	bl	8007354 <__assert_func>
 8008f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f30:	6006      	str	r6, [r0, #0]
 8008f32:	60c6      	str	r6, [r0, #12]
 8008f34:	69e6      	ldr	r6, [r4, #28]
 8008f36:	68f3      	ldr	r3, [r6, #12]
 8008f38:	b183      	cbz	r3, 8008f5c <_Balloc+0x50>
 8008f3a:	69e3      	ldr	r3, [r4, #28]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f42:	b9b8      	cbnz	r0, 8008f74 <_Balloc+0x68>
 8008f44:	2101      	movs	r1, #1
 8008f46:	fa01 f605 	lsl.w	r6, r1, r5
 8008f4a:	1d72      	adds	r2, r6, #5
 8008f4c:	0092      	lsls	r2, r2, #2
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fe24 	bl	8009b9c <_calloc_r>
 8008f54:	b160      	cbz	r0, 8008f70 <_Balloc+0x64>
 8008f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f5a:	e00e      	b.n	8008f7a <_Balloc+0x6e>
 8008f5c:	2221      	movs	r2, #33	; 0x21
 8008f5e:	2104      	movs	r1, #4
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fe1b 	bl	8009b9c <_calloc_r>
 8008f66:	69e3      	ldr	r3, [r4, #28]
 8008f68:	60f0      	str	r0, [r6, #12]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e4      	bne.n	8008f3a <_Balloc+0x2e>
 8008f70:	2000      	movs	r0, #0
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f80:	e7f7      	b.n	8008f72 <_Balloc+0x66>
 8008f82:	bf00      	nop
 8008f84:	0800b5c1 	.word	0x0800b5c1
 8008f88:	0800b641 	.word	0x0800b641

08008f8c <_Bfree>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	69c6      	ldr	r6, [r0, #28]
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b976      	cbnz	r6, 8008fb4 <_Bfree+0x28>
 8008f96:	2010      	movs	r0, #16
 8008f98:	f7fe f9fa 	bl	8007390 <malloc>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	61e8      	str	r0, [r5, #28]
 8008fa0:	b920      	cbnz	r0, 8008fac <_Bfree+0x20>
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <_Bfree+0x3c>)
 8008fa4:	4809      	ldr	r0, [pc, #36]	; (8008fcc <_Bfree+0x40>)
 8008fa6:	218f      	movs	r1, #143	; 0x8f
 8008fa8:	f7fe f9d4 	bl	8007354 <__assert_func>
 8008fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb0:	6006      	str	r6, [r0, #0]
 8008fb2:	60c6      	str	r6, [r0, #12]
 8008fb4:	b13c      	cbz	r4, 8008fc6 <_Bfree+0x3a>
 8008fb6:	69eb      	ldr	r3, [r5, #28]
 8008fb8:	6862      	ldr	r2, [r4, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc0:	6021      	str	r1, [r4, #0]
 8008fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	0800b5c1 	.word	0x0800b5c1
 8008fcc:	0800b641 	.word	0x0800b641

08008fd0 <__multadd>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	690d      	ldr	r5, [r1, #16]
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	461e      	mov	r6, r3
 8008fdc:	f101 0c14 	add.w	ip, r1, #20
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fe6:	b299      	uxth	r1, r3
 8008fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8008fec:	0c1e      	lsrs	r6, r3, #16
 8008fee:	0c0b      	lsrs	r3, r1, #16
 8008ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8008ff4:	b289      	uxth	r1, r1
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ffc:	4285      	cmp	r5, r0
 8008ffe:	f84c 1b04 	str.w	r1, [ip], #4
 8009002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009006:	dcec      	bgt.n	8008fe2 <__multadd+0x12>
 8009008:	b30e      	cbz	r6, 800904e <__multadd+0x7e>
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	42ab      	cmp	r3, r5
 800900e:	dc19      	bgt.n	8009044 <__multadd+0x74>
 8009010:	6861      	ldr	r1, [r4, #4]
 8009012:	4638      	mov	r0, r7
 8009014:	3101      	adds	r1, #1
 8009016:	f7ff ff79 	bl	8008f0c <_Balloc>
 800901a:	4680      	mov	r8, r0
 800901c:	b928      	cbnz	r0, 800902a <__multadd+0x5a>
 800901e:	4602      	mov	r2, r0
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <__multadd+0x84>)
 8009022:	480d      	ldr	r0, [pc, #52]	; (8009058 <__multadd+0x88>)
 8009024:	21ba      	movs	r1, #186	; 0xba
 8009026:	f7fe f995 	bl	8007354 <__assert_func>
 800902a:	6922      	ldr	r2, [r4, #16]
 800902c:	3202      	adds	r2, #2
 800902e:	f104 010c 	add.w	r1, r4, #12
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	300c      	adds	r0, #12
 8009036:	f7ff f88e 	bl	8008156 <memcpy>
 800903a:	4621      	mov	r1, r4
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff ffa5 	bl	8008f8c <_Bfree>
 8009042:	4644      	mov	r4, r8
 8009044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009048:	3501      	adds	r5, #1
 800904a:	615e      	str	r6, [r3, #20]
 800904c:	6125      	str	r5, [r4, #16]
 800904e:	4620      	mov	r0, r4
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	0800b630 	.word	0x0800b630
 8009058:	0800b641 	.word	0x0800b641

0800905c <__hi0bits>:
 800905c:	0c03      	lsrs	r3, r0, #16
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	b9d3      	cbnz	r3, 8009098 <__hi0bits+0x3c>
 8009062:	0400      	lsls	r0, r0, #16
 8009064:	2310      	movs	r3, #16
 8009066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800906a:	bf04      	itt	eq
 800906c:	0200      	lsleq	r0, r0, #8
 800906e:	3308      	addeq	r3, #8
 8009070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009074:	bf04      	itt	eq
 8009076:	0100      	lsleq	r0, r0, #4
 8009078:	3304      	addeq	r3, #4
 800907a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800907e:	bf04      	itt	eq
 8009080:	0080      	lsleq	r0, r0, #2
 8009082:	3302      	addeq	r3, #2
 8009084:	2800      	cmp	r0, #0
 8009086:	db05      	blt.n	8009094 <__hi0bits+0x38>
 8009088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800908c:	f103 0301 	add.w	r3, r3, #1
 8009090:	bf08      	it	eq
 8009092:	2320      	moveq	r3, #32
 8009094:	4618      	mov	r0, r3
 8009096:	4770      	bx	lr
 8009098:	2300      	movs	r3, #0
 800909a:	e7e4      	b.n	8009066 <__hi0bits+0xa>

0800909c <__lo0bits>:
 800909c:	6803      	ldr	r3, [r0, #0]
 800909e:	f013 0207 	ands.w	r2, r3, #7
 80090a2:	d00c      	beq.n	80090be <__lo0bits+0x22>
 80090a4:	07d9      	lsls	r1, r3, #31
 80090a6:	d422      	bmi.n	80090ee <__lo0bits+0x52>
 80090a8:	079a      	lsls	r2, r3, #30
 80090aa:	bf49      	itett	mi
 80090ac:	085b      	lsrmi	r3, r3, #1
 80090ae:	089b      	lsrpl	r3, r3, #2
 80090b0:	6003      	strmi	r3, [r0, #0]
 80090b2:	2201      	movmi	r2, #1
 80090b4:	bf5c      	itt	pl
 80090b6:	6003      	strpl	r3, [r0, #0]
 80090b8:	2202      	movpl	r2, #2
 80090ba:	4610      	mov	r0, r2
 80090bc:	4770      	bx	lr
 80090be:	b299      	uxth	r1, r3
 80090c0:	b909      	cbnz	r1, 80090c6 <__lo0bits+0x2a>
 80090c2:	0c1b      	lsrs	r3, r3, #16
 80090c4:	2210      	movs	r2, #16
 80090c6:	b2d9      	uxtb	r1, r3
 80090c8:	b909      	cbnz	r1, 80090ce <__lo0bits+0x32>
 80090ca:	3208      	adds	r2, #8
 80090cc:	0a1b      	lsrs	r3, r3, #8
 80090ce:	0719      	lsls	r1, r3, #28
 80090d0:	bf04      	itt	eq
 80090d2:	091b      	lsreq	r3, r3, #4
 80090d4:	3204      	addeq	r2, #4
 80090d6:	0799      	lsls	r1, r3, #30
 80090d8:	bf04      	itt	eq
 80090da:	089b      	lsreq	r3, r3, #2
 80090dc:	3202      	addeq	r2, #2
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d403      	bmi.n	80090ea <__lo0bits+0x4e>
 80090e2:	085b      	lsrs	r3, r3, #1
 80090e4:	f102 0201 	add.w	r2, r2, #1
 80090e8:	d003      	beq.n	80090f2 <__lo0bits+0x56>
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	e7e5      	b.n	80090ba <__lo0bits+0x1e>
 80090ee:	2200      	movs	r2, #0
 80090f0:	e7e3      	b.n	80090ba <__lo0bits+0x1e>
 80090f2:	2220      	movs	r2, #32
 80090f4:	e7e1      	b.n	80090ba <__lo0bits+0x1e>
	...

080090f8 <__i2b>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	460c      	mov	r4, r1
 80090fc:	2101      	movs	r1, #1
 80090fe:	f7ff ff05 	bl	8008f0c <_Balloc>
 8009102:	4602      	mov	r2, r0
 8009104:	b928      	cbnz	r0, 8009112 <__i2b+0x1a>
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <__i2b+0x24>)
 8009108:	4805      	ldr	r0, [pc, #20]	; (8009120 <__i2b+0x28>)
 800910a:	f240 1145 	movw	r1, #325	; 0x145
 800910e:	f7fe f921 	bl	8007354 <__assert_func>
 8009112:	2301      	movs	r3, #1
 8009114:	6144      	str	r4, [r0, #20]
 8009116:	6103      	str	r3, [r0, #16]
 8009118:	bd10      	pop	{r4, pc}
 800911a:	bf00      	nop
 800911c:	0800b630 	.word	0x0800b630
 8009120:	0800b641 	.word	0x0800b641

08009124 <__multiply>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4691      	mov	r9, r2
 800912a:	690a      	ldr	r2, [r1, #16]
 800912c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009130:	429a      	cmp	r2, r3
 8009132:	bfb8      	it	lt
 8009134:	460b      	movlt	r3, r1
 8009136:	460c      	mov	r4, r1
 8009138:	bfbc      	itt	lt
 800913a:	464c      	movlt	r4, r9
 800913c:	4699      	movlt	r9, r3
 800913e:	6927      	ldr	r7, [r4, #16]
 8009140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009144:	68a3      	ldr	r3, [r4, #8]
 8009146:	6861      	ldr	r1, [r4, #4]
 8009148:	eb07 060a 	add.w	r6, r7, sl
 800914c:	42b3      	cmp	r3, r6
 800914e:	b085      	sub	sp, #20
 8009150:	bfb8      	it	lt
 8009152:	3101      	addlt	r1, #1
 8009154:	f7ff feda 	bl	8008f0c <_Balloc>
 8009158:	b930      	cbnz	r0, 8009168 <__multiply+0x44>
 800915a:	4602      	mov	r2, r0
 800915c:	4b44      	ldr	r3, [pc, #272]	; (8009270 <__multiply+0x14c>)
 800915e:	4845      	ldr	r0, [pc, #276]	; (8009274 <__multiply+0x150>)
 8009160:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009164:	f7fe f8f6 	bl	8007354 <__assert_func>
 8009168:	f100 0514 	add.w	r5, r0, #20
 800916c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009170:	462b      	mov	r3, r5
 8009172:	2200      	movs	r2, #0
 8009174:	4543      	cmp	r3, r8
 8009176:	d321      	bcc.n	80091bc <__multiply+0x98>
 8009178:	f104 0314 	add.w	r3, r4, #20
 800917c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009180:	f109 0314 	add.w	r3, r9, #20
 8009184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009188:	9202      	str	r2, [sp, #8]
 800918a:	1b3a      	subs	r2, r7, r4
 800918c:	3a15      	subs	r2, #21
 800918e:	f022 0203 	bic.w	r2, r2, #3
 8009192:	3204      	adds	r2, #4
 8009194:	f104 0115 	add.w	r1, r4, #21
 8009198:	428f      	cmp	r7, r1
 800919a:	bf38      	it	cc
 800919c:	2204      	movcc	r2, #4
 800919e:	9201      	str	r2, [sp, #4]
 80091a0:	9a02      	ldr	r2, [sp, #8]
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d80c      	bhi.n	80091c2 <__multiply+0x9e>
 80091a8:	2e00      	cmp	r6, #0
 80091aa:	dd03      	ble.n	80091b4 <__multiply+0x90>
 80091ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d05b      	beq.n	800926c <__multiply+0x148>
 80091b4:	6106      	str	r6, [r0, #16]
 80091b6:	b005      	add	sp, #20
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	f843 2b04 	str.w	r2, [r3], #4
 80091c0:	e7d8      	b.n	8009174 <__multiply+0x50>
 80091c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80091c6:	f1ba 0f00 	cmp.w	sl, #0
 80091ca:	d024      	beq.n	8009216 <__multiply+0xf2>
 80091cc:	f104 0e14 	add.w	lr, r4, #20
 80091d0:	46a9      	mov	r9, r5
 80091d2:	f04f 0c00 	mov.w	ip, #0
 80091d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091da:	f8d9 1000 	ldr.w	r1, [r9]
 80091de:	fa1f fb82 	uxth.w	fp, r2
 80091e2:	b289      	uxth	r1, r1
 80091e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80091e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091ec:	f8d9 2000 	ldr.w	r2, [r9]
 80091f0:	4461      	add	r1, ip
 80091f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80091fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091fe:	b289      	uxth	r1, r1
 8009200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009204:	4577      	cmp	r7, lr
 8009206:	f849 1b04 	str.w	r1, [r9], #4
 800920a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800920e:	d8e2      	bhi.n	80091d6 <__multiply+0xb2>
 8009210:	9a01      	ldr	r2, [sp, #4]
 8009212:	f845 c002 	str.w	ip, [r5, r2]
 8009216:	9a03      	ldr	r2, [sp, #12]
 8009218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800921c:	3304      	adds	r3, #4
 800921e:	f1b9 0f00 	cmp.w	r9, #0
 8009222:	d021      	beq.n	8009268 <__multiply+0x144>
 8009224:	6829      	ldr	r1, [r5, #0]
 8009226:	f104 0c14 	add.w	ip, r4, #20
 800922a:	46ae      	mov	lr, r5
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	f8bc b000 	ldrh.w	fp, [ip]
 8009234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009238:	fb09 220b 	mla	r2, r9, fp, r2
 800923c:	4452      	add	r2, sl
 800923e:	b289      	uxth	r1, r1
 8009240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009244:	f84e 1b04 	str.w	r1, [lr], #4
 8009248:	f85c 1b04 	ldr.w	r1, [ip], #4
 800924c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009250:	f8be 1000 	ldrh.w	r1, [lr]
 8009254:	fb09 110a 	mla	r1, r9, sl, r1
 8009258:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800925c:	4567      	cmp	r7, ip
 800925e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009262:	d8e5      	bhi.n	8009230 <__multiply+0x10c>
 8009264:	9a01      	ldr	r2, [sp, #4]
 8009266:	50a9      	str	r1, [r5, r2]
 8009268:	3504      	adds	r5, #4
 800926a:	e799      	b.n	80091a0 <__multiply+0x7c>
 800926c:	3e01      	subs	r6, #1
 800926e:	e79b      	b.n	80091a8 <__multiply+0x84>
 8009270:	0800b630 	.word	0x0800b630
 8009274:	0800b641 	.word	0x0800b641

08009278 <__pow5mult>:
 8009278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800927c:	4615      	mov	r5, r2
 800927e:	f012 0203 	ands.w	r2, r2, #3
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	d007      	beq.n	8009298 <__pow5mult+0x20>
 8009288:	4c25      	ldr	r4, [pc, #148]	; (8009320 <__pow5mult+0xa8>)
 800928a:	3a01      	subs	r2, #1
 800928c:	2300      	movs	r3, #0
 800928e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009292:	f7ff fe9d 	bl	8008fd0 <__multadd>
 8009296:	4607      	mov	r7, r0
 8009298:	10ad      	asrs	r5, r5, #2
 800929a:	d03d      	beq.n	8009318 <__pow5mult+0xa0>
 800929c:	69f4      	ldr	r4, [r6, #28]
 800929e:	b97c      	cbnz	r4, 80092c0 <__pow5mult+0x48>
 80092a0:	2010      	movs	r0, #16
 80092a2:	f7fe f875 	bl	8007390 <malloc>
 80092a6:	4602      	mov	r2, r0
 80092a8:	61f0      	str	r0, [r6, #28]
 80092aa:	b928      	cbnz	r0, 80092b8 <__pow5mult+0x40>
 80092ac:	4b1d      	ldr	r3, [pc, #116]	; (8009324 <__pow5mult+0xac>)
 80092ae:	481e      	ldr	r0, [pc, #120]	; (8009328 <__pow5mult+0xb0>)
 80092b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092b4:	f7fe f84e 	bl	8007354 <__assert_func>
 80092b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092bc:	6004      	str	r4, [r0, #0]
 80092be:	60c4      	str	r4, [r0, #12]
 80092c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092c8:	b94c      	cbnz	r4, 80092de <__pow5mult+0x66>
 80092ca:	f240 2171 	movw	r1, #625	; 0x271
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff12 	bl	80090f8 <__i2b>
 80092d4:	2300      	movs	r3, #0
 80092d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092da:	4604      	mov	r4, r0
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 0900 	mov.w	r9, #0
 80092e2:	07eb      	lsls	r3, r5, #31
 80092e4:	d50a      	bpl.n	80092fc <__pow5mult+0x84>
 80092e6:	4639      	mov	r1, r7
 80092e8:	4622      	mov	r2, r4
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff1a 	bl	8009124 <__multiply>
 80092f0:	4639      	mov	r1, r7
 80092f2:	4680      	mov	r8, r0
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff fe49 	bl	8008f8c <_Bfree>
 80092fa:	4647      	mov	r7, r8
 80092fc:	106d      	asrs	r5, r5, #1
 80092fe:	d00b      	beq.n	8009318 <__pow5mult+0xa0>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	b938      	cbnz	r0, 8009314 <__pow5mult+0x9c>
 8009304:	4622      	mov	r2, r4
 8009306:	4621      	mov	r1, r4
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff ff0b 	bl	8009124 <__multiply>
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f8c0 9000 	str.w	r9, [r0]
 8009314:	4604      	mov	r4, r0
 8009316:	e7e4      	b.n	80092e2 <__pow5mult+0x6a>
 8009318:	4638      	mov	r0, r7
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931e:	bf00      	nop
 8009320:	0800b790 	.word	0x0800b790
 8009324:	0800b5c1 	.word	0x0800b5c1
 8009328:	0800b641 	.word	0x0800b641

0800932c <__lshift>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	6849      	ldr	r1, [r1, #4]
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	4607      	mov	r7, r0
 800933e:	4691      	mov	r9, r2
 8009340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009344:	f108 0601 	add.w	r6, r8, #1
 8009348:	42b3      	cmp	r3, r6
 800934a:	db0b      	blt.n	8009364 <__lshift+0x38>
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fddd 	bl	8008f0c <_Balloc>
 8009352:	4605      	mov	r5, r0
 8009354:	b948      	cbnz	r0, 800936a <__lshift+0x3e>
 8009356:	4602      	mov	r2, r0
 8009358:	4b28      	ldr	r3, [pc, #160]	; (80093fc <__lshift+0xd0>)
 800935a:	4829      	ldr	r0, [pc, #164]	; (8009400 <__lshift+0xd4>)
 800935c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009360:	f7fd fff8 	bl	8007354 <__assert_func>
 8009364:	3101      	adds	r1, #1
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	e7ee      	b.n	8009348 <__lshift+0x1c>
 800936a:	2300      	movs	r3, #0
 800936c:	f100 0114 	add.w	r1, r0, #20
 8009370:	f100 0210 	add.w	r2, r0, #16
 8009374:	4618      	mov	r0, r3
 8009376:	4553      	cmp	r3, sl
 8009378:	db33      	blt.n	80093e2 <__lshift+0xb6>
 800937a:	6920      	ldr	r0, [r4, #16]
 800937c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009380:	f104 0314 	add.w	r3, r4, #20
 8009384:	f019 091f 	ands.w	r9, r9, #31
 8009388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800938c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009390:	d02b      	beq.n	80093ea <__lshift+0xbe>
 8009392:	f1c9 0e20 	rsb	lr, r9, #32
 8009396:	468a      	mov	sl, r1
 8009398:	2200      	movs	r2, #0
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	fa00 f009 	lsl.w	r0, r0, r9
 80093a0:	4310      	orrs	r0, r2
 80093a2:	f84a 0b04 	str.w	r0, [sl], #4
 80093a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093aa:	459c      	cmp	ip, r3
 80093ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80093b0:	d8f3      	bhi.n	800939a <__lshift+0x6e>
 80093b2:	ebac 0304 	sub.w	r3, ip, r4
 80093b6:	3b15      	subs	r3, #21
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	3304      	adds	r3, #4
 80093be:	f104 0015 	add.w	r0, r4, #21
 80093c2:	4584      	cmp	ip, r0
 80093c4:	bf38      	it	cc
 80093c6:	2304      	movcc	r3, #4
 80093c8:	50ca      	str	r2, [r1, r3]
 80093ca:	b10a      	cbz	r2, 80093d0 <__lshift+0xa4>
 80093cc:	f108 0602 	add.w	r6, r8, #2
 80093d0:	3e01      	subs	r6, #1
 80093d2:	4638      	mov	r0, r7
 80093d4:	612e      	str	r6, [r5, #16]
 80093d6:	4621      	mov	r1, r4
 80093d8:	f7ff fdd8 	bl	8008f8c <_Bfree>
 80093dc:	4628      	mov	r0, r5
 80093de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093e6:	3301      	adds	r3, #1
 80093e8:	e7c5      	b.n	8009376 <__lshift+0x4a>
 80093ea:	3904      	subs	r1, #4
 80093ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093f4:	459c      	cmp	ip, r3
 80093f6:	d8f9      	bhi.n	80093ec <__lshift+0xc0>
 80093f8:	e7ea      	b.n	80093d0 <__lshift+0xa4>
 80093fa:	bf00      	nop
 80093fc:	0800b630 	.word	0x0800b630
 8009400:	0800b641 	.word	0x0800b641

08009404 <__mcmp>:
 8009404:	b530      	push	{r4, r5, lr}
 8009406:	6902      	ldr	r2, [r0, #16]
 8009408:	690c      	ldr	r4, [r1, #16]
 800940a:	1b12      	subs	r2, r2, r4
 800940c:	d10e      	bne.n	800942c <__mcmp+0x28>
 800940e:	f100 0314 	add.w	r3, r0, #20
 8009412:	3114      	adds	r1, #20
 8009414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800941c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009424:	42a5      	cmp	r5, r4
 8009426:	d003      	beq.n	8009430 <__mcmp+0x2c>
 8009428:	d305      	bcc.n	8009436 <__mcmp+0x32>
 800942a:	2201      	movs	r2, #1
 800942c:	4610      	mov	r0, r2
 800942e:	bd30      	pop	{r4, r5, pc}
 8009430:	4283      	cmp	r3, r0
 8009432:	d3f3      	bcc.n	800941c <__mcmp+0x18>
 8009434:	e7fa      	b.n	800942c <__mcmp+0x28>
 8009436:	f04f 32ff 	mov.w	r2, #4294967295
 800943a:	e7f7      	b.n	800942c <__mcmp+0x28>

0800943c <__mdiff>:
 800943c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	460c      	mov	r4, r1
 8009442:	4606      	mov	r6, r0
 8009444:	4611      	mov	r1, r2
 8009446:	4620      	mov	r0, r4
 8009448:	4690      	mov	r8, r2
 800944a:	f7ff ffdb 	bl	8009404 <__mcmp>
 800944e:	1e05      	subs	r5, r0, #0
 8009450:	d110      	bne.n	8009474 <__mdiff+0x38>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff fd59 	bl	8008f0c <_Balloc>
 800945a:	b930      	cbnz	r0, 800946a <__mdiff+0x2e>
 800945c:	4b3a      	ldr	r3, [pc, #232]	; (8009548 <__mdiff+0x10c>)
 800945e:	4602      	mov	r2, r0
 8009460:	f240 2137 	movw	r1, #567	; 0x237
 8009464:	4839      	ldr	r0, [pc, #228]	; (800954c <__mdiff+0x110>)
 8009466:	f7fd ff75 	bl	8007354 <__assert_func>
 800946a:	2301      	movs	r3, #1
 800946c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	bfa4      	itt	ge
 8009476:	4643      	movge	r3, r8
 8009478:	46a0      	movge	r8, r4
 800947a:	4630      	mov	r0, r6
 800947c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009480:	bfa6      	itte	ge
 8009482:	461c      	movge	r4, r3
 8009484:	2500      	movge	r5, #0
 8009486:	2501      	movlt	r5, #1
 8009488:	f7ff fd40 	bl	8008f0c <_Balloc>
 800948c:	b920      	cbnz	r0, 8009498 <__mdiff+0x5c>
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <__mdiff+0x10c>)
 8009490:	4602      	mov	r2, r0
 8009492:	f240 2145 	movw	r1, #581	; 0x245
 8009496:	e7e5      	b.n	8009464 <__mdiff+0x28>
 8009498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800949c:	6926      	ldr	r6, [r4, #16]
 800949e:	60c5      	str	r5, [r0, #12]
 80094a0:	f104 0914 	add.w	r9, r4, #20
 80094a4:	f108 0514 	add.w	r5, r8, #20
 80094a8:	f100 0e14 	add.w	lr, r0, #20
 80094ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094b4:	f108 0210 	add.w	r2, r8, #16
 80094b8:	46f2      	mov	sl, lr
 80094ba:	2100      	movs	r1, #0
 80094bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80094c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094c4:	fa11 f88b 	uxtah	r8, r1, fp
 80094c8:	b299      	uxth	r1, r3
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	eba8 0801 	sub.w	r8, r8, r1
 80094d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094d8:	fa1f f888 	uxth.w	r8, r8
 80094dc:	1419      	asrs	r1, r3, #16
 80094de:	454e      	cmp	r6, r9
 80094e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094e4:	f84a 3b04 	str.w	r3, [sl], #4
 80094e8:	d8e8      	bhi.n	80094bc <__mdiff+0x80>
 80094ea:	1b33      	subs	r3, r6, r4
 80094ec:	3b15      	subs	r3, #21
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	3304      	adds	r3, #4
 80094f4:	3415      	adds	r4, #21
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	bf38      	it	cc
 80094fa:	2304      	movcc	r3, #4
 80094fc:	441d      	add	r5, r3
 80094fe:	4473      	add	r3, lr
 8009500:	469e      	mov	lr, r3
 8009502:	462e      	mov	r6, r5
 8009504:	4566      	cmp	r6, ip
 8009506:	d30e      	bcc.n	8009526 <__mdiff+0xea>
 8009508:	f10c 0203 	add.w	r2, ip, #3
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	f022 0203 	bic.w	r2, r2, #3
 8009512:	3d03      	subs	r5, #3
 8009514:	45ac      	cmp	ip, r5
 8009516:	bf38      	it	cc
 8009518:	2200      	movcc	r2, #0
 800951a:	4413      	add	r3, r2
 800951c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009520:	b17a      	cbz	r2, 8009542 <__mdiff+0x106>
 8009522:	6107      	str	r7, [r0, #16]
 8009524:	e7a4      	b.n	8009470 <__mdiff+0x34>
 8009526:	f856 8b04 	ldr.w	r8, [r6], #4
 800952a:	fa11 f288 	uxtah	r2, r1, r8
 800952e:	1414      	asrs	r4, r2, #16
 8009530:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009534:	b292      	uxth	r2, r2
 8009536:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800953a:	f84e 2b04 	str.w	r2, [lr], #4
 800953e:	1421      	asrs	r1, r4, #16
 8009540:	e7e0      	b.n	8009504 <__mdiff+0xc8>
 8009542:	3f01      	subs	r7, #1
 8009544:	e7ea      	b.n	800951c <__mdiff+0xe0>
 8009546:	bf00      	nop
 8009548:	0800b630 	.word	0x0800b630
 800954c:	0800b641 	.word	0x0800b641

08009550 <__d2b>:
 8009550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009554:	460f      	mov	r7, r1
 8009556:	2101      	movs	r1, #1
 8009558:	ec59 8b10 	vmov	r8, r9, d0
 800955c:	4616      	mov	r6, r2
 800955e:	f7ff fcd5 	bl	8008f0c <_Balloc>
 8009562:	4604      	mov	r4, r0
 8009564:	b930      	cbnz	r0, 8009574 <__d2b+0x24>
 8009566:	4602      	mov	r2, r0
 8009568:	4b24      	ldr	r3, [pc, #144]	; (80095fc <__d2b+0xac>)
 800956a:	4825      	ldr	r0, [pc, #148]	; (8009600 <__d2b+0xb0>)
 800956c:	f240 310f 	movw	r1, #783	; 0x30f
 8009570:	f7fd fef0 	bl	8007354 <__assert_func>
 8009574:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800957c:	bb2d      	cbnz	r5, 80095ca <__d2b+0x7a>
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	f1b8 0300 	subs.w	r3, r8, #0
 8009584:	d026      	beq.n	80095d4 <__d2b+0x84>
 8009586:	4668      	mov	r0, sp
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	f7ff fd87 	bl	800909c <__lo0bits>
 800958e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009592:	b1e8      	cbz	r0, 80095d0 <__d2b+0x80>
 8009594:	f1c0 0320 	rsb	r3, r0, #32
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	430b      	orrs	r3, r1
 800959e:	40c2      	lsrs	r2, r0
 80095a0:	6163      	str	r3, [r4, #20]
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	61a3      	str	r3, [r4, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bf14      	ite	ne
 80095ac:	2202      	movne	r2, #2
 80095ae:	2201      	moveq	r2, #1
 80095b0:	6122      	str	r2, [r4, #16]
 80095b2:	b1bd      	cbz	r5, 80095e4 <__d2b+0x94>
 80095b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095b8:	4405      	add	r5, r0
 80095ba:	603d      	str	r5, [r7, #0]
 80095bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095c0:	6030      	str	r0, [r6, #0]
 80095c2:	4620      	mov	r0, r4
 80095c4:	b003      	add	sp, #12
 80095c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ce:	e7d6      	b.n	800957e <__d2b+0x2e>
 80095d0:	6161      	str	r1, [r4, #20]
 80095d2:	e7e7      	b.n	80095a4 <__d2b+0x54>
 80095d4:	a801      	add	r0, sp, #4
 80095d6:	f7ff fd61 	bl	800909c <__lo0bits>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	6163      	str	r3, [r4, #20]
 80095de:	3020      	adds	r0, #32
 80095e0:	2201      	movs	r2, #1
 80095e2:	e7e5      	b.n	80095b0 <__d2b+0x60>
 80095e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095ec:	6038      	str	r0, [r7, #0]
 80095ee:	6918      	ldr	r0, [r3, #16]
 80095f0:	f7ff fd34 	bl	800905c <__hi0bits>
 80095f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095f8:	e7e2      	b.n	80095c0 <__d2b+0x70>
 80095fa:	bf00      	nop
 80095fc:	0800b630 	.word	0x0800b630
 8009600:	0800b641 	.word	0x0800b641

08009604 <__sfputc_r>:
 8009604:	6893      	ldr	r3, [r2, #8]
 8009606:	3b01      	subs	r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	b410      	push	{r4}
 800960c:	6093      	str	r3, [r2, #8]
 800960e:	da08      	bge.n	8009622 <__sfputc_r+0x1e>
 8009610:	6994      	ldr	r4, [r2, #24]
 8009612:	42a3      	cmp	r3, r4
 8009614:	db01      	blt.n	800961a <__sfputc_r+0x16>
 8009616:	290a      	cmp	r1, #10
 8009618:	d103      	bne.n	8009622 <__sfputc_r+0x1e>
 800961a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800961e:	f000 b9e3 	b.w	80099e8 <__swbuf_r>
 8009622:	6813      	ldr	r3, [r2, #0]
 8009624:	1c58      	adds	r0, r3, #1
 8009626:	6010      	str	r0, [r2, #0]
 8009628:	7019      	strb	r1, [r3, #0]
 800962a:	4608      	mov	r0, r1
 800962c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009630:	4770      	bx	lr

08009632 <__sfputs_r>:
 8009632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009634:	4606      	mov	r6, r0
 8009636:	460f      	mov	r7, r1
 8009638:	4614      	mov	r4, r2
 800963a:	18d5      	adds	r5, r2, r3
 800963c:	42ac      	cmp	r4, r5
 800963e:	d101      	bne.n	8009644 <__sfputs_r+0x12>
 8009640:	2000      	movs	r0, #0
 8009642:	e007      	b.n	8009654 <__sfputs_r+0x22>
 8009644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009648:	463a      	mov	r2, r7
 800964a:	4630      	mov	r0, r6
 800964c:	f7ff ffda 	bl	8009604 <__sfputc_r>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d1f3      	bne.n	800963c <__sfputs_r+0xa>
 8009654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009658 <_vfiprintf_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	460d      	mov	r5, r1
 800965e:	b09d      	sub	sp, #116	; 0x74
 8009660:	4614      	mov	r4, r2
 8009662:	4698      	mov	r8, r3
 8009664:	4606      	mov	r6, r0
 8009666:	b118      	cbz	r0, 8009670 <_vfiprintf_r+0x18>
 8009668:	6a03      	ldr	r3, [r0, #32]
 800966a:	b90b      	cbnz	r3, 8009670 <_vfiprintf_r+0x18>
 800966c:	f7fe fc3e 	bl	8007eec <__sinit>
 8009670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009672:	07d9      	lsls	r1, r3, #31
 8009674:	d405      	bmi.n	8009682 <_vfiprintf_r+0x2a>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	059a      	lsls	r2, r3, #22
 800967a:	d402      	bmi.n	8009682 <_vfiprintf_r+0x2a>
 800967c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800967e:	f7fe fd68 	bl	8008152 <__retarget_lock_acquire_recursive>
 8009682:	89ab      	ldrh	r3, [r5, #12]
 8009684:	071b      	lsls	r3, r3, #28
 8009686:	d501      	bpl.n	800968c <_vfiprintf_r+0x34>
 8009688:	692b      	ldr	r3, [r5, #16]
 800968a:	b99b      	cbnz	r3, 80096b4 <_vfiprintf_r+0x5c>
 800968c:	4629      	mov	r1, r5
 800968e:	4630      	mov	r0, r6
 8009690:	f000 f9e8 	bl	8009a64 <__swsetup_r>
 8009694:	b170      	cbz	r0, 80096b4 <_vfiprintf_r+0x5c>
 8009696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009698:	07dc      	lsls	r4, r3, #31
 800969a:	d504      	bpl.n	80096a6 <_vfiprintf_r+0x4e>
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	b01d      	add	sp, #116	; 0x74
 80096a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	0598      	lsls	r0, r3, #22
 80096aa:	d4f7      	bmi.n	800969c <_vfiprintf_r+0x44>
 80096ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ae:	f7fe fd51 	bl	8008154 <__retarget_lock_release_recursive>
 80096b2:	e7f3      	b.n	800969c <_vfiprintf_r+0x44>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	2320      	movs	r3, #32
 80096ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096be:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c2:	2330      	movs	r3, #48	; 0x30
 80096c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009878 <_vfiprintf_r+0x220>
 80096c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096cc:	f04f 0901 	mov.w	r9, #1
 80096d0:	4623      	mov	r3, r4
 80096d2:	469a      	mov	sl, r3
 80096d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d8:	b10a      	cbz	r2, 80096de <_vfiprintf_r+0x86>
 80096da:	2a25      	cmp	r2, #37	; 0x25
 80096dc:	d1f9      	bne.n	80096d2 <_vfiprintf_r+0x7a>
 80096de:	ebba 0b04 	subs.w	fp, sl, r4
 80096e2:	d00b      	beq.n	80096fc <_vfiprintf_r+0xa4>
 80096e4:	465b      	mov	r3, fp
 80096e6:	4622      	mov	r2, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7ff ffa1 	bl	8009632 <__sfputs_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	f000 80a9 	beq.w	8009848 <_vfiprintf_r+0x1f0>
 80096f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f8:	445a      	add	r2, fp
 80096fa:	9209      	str	r2, [sp, #36]	; 0x24
 80096fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80a1 	beq.w	8009848 <_vfiprintf_r+0x1f0>
 8009706:	2300      	movs	r3, #0
 8009708:	f04f 32ff 	mov.w	r2, #4294967295
 800970c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	9307      	str	r3, [sp, #28]
 8009718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971c:	931a      	str	r3, [sp, #104]	; 0x68
 800971e:	4654      	mov	r4, sl
 8009720:	2205      	movs	r2, #5
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	4854      	ldr	r0, [pc, #336]	; (8009878 <_vfiprintf_r+0x220>)
 8009728:	f7f6 fd72 	bl	8000210 <memchr>
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	b9d8      	cbnz	r0, 8009768 <_vfiprintf_r+0x110>
 8009730:	06d1      	lsls	r1, r2, #27
 8009732:	bf44      	itt	mi
 8009734:	2320      	movmi	r3, #32
 8009736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973a:	0713      	lsls	r3, r2, #28
 800973c:	bf44      	itt	mi
 800973e:	232b      	movmi	r3, #43	; 0x2b
 8009740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009744:	f89a 3000 	ldrb.w	r3, [sl]
 8009748:	2b2a      	cmp	r3, #42	; 0x2a
 800974a:	d015      	beq.n	8009778 <_vfiprintf_r+0x120>
 800974c:	9a07      	ldr	r2, [sp, #28]
 800974e:	4654      	mov	r4, sl
 8009750:	2000      	movs	r0, #0
 8009752:	f04f 0c0a 	mov.w	ip, #10
 8009756:	4621      	mov	r1, r4
 8009758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975c:	3b30      	subs	r3, #48	; 0x30
 800975e:	2b09      	cmp	r3, #9
 8009760:	d94d      	bls.n	80097fe <_vfiprintf_r+0x1a6>
 8009762:	b1b0      	cbz	r0, 8009792 <_vfiprintf_r+0x13a>
 8009764:	9207      	str	r2, [sp, #28]
 8009766:	e014      	b.n	8009792 <_vfiprintf_r+0x13a>
 8009768:	eba0 0308 	sub.w	r3, r0, r8
 800976c:	fa09 f303 	lsl.w	r3, r9, r3
 8009770:	4313      	orrs	r3, r2
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	46a2      	mov	sl, r4
 8009776:	e7d2      	b.n	800971e <_vfiprintf_r+0xc6>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d19      	adds	r1, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9103      	str	r1, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfbb      	ittet	lt
 8009784:	425b      	neglt	r3, r3
 8009786:	f042 0202 	orrlt.w	r2, r2, #2
 800978a:	9307      	strge	r3, [sp, #28]
 800978c:	9307      	strlt	r3, [sp, #28]
 800978e:	bfb8      	it	lt
 8009790:	9204      	strlt	r2, [sp, #16]
 8009792:	7823      	ldrb	r3, [r4, #0]
 8009794:	2b2e      	cmp	r3, #46	; 0x2e
 8009796:	d10c      	bne.n	80097b2 <_vfiprintf_r+0x15a>
 8009798:	7863      	ldrb	r3, [r4, #1]
 800979a:	2b2a      	cmp	r3, #42	; 0x2a
 800979c:	d134      	bne.n	8009808 <_vfiprintf_r+0x1b0>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	9203      	str	r2, [sp, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfb8      	it	lt
 80097aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ae:	3402      	adds	r4, #2
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009888 <_vfiprintf_r+0x230>
 80097b6:	7821      	ldrb	r1, [r4, #0]
 80097b8:	2203      	movs	r2, #3
 80097ba:	4650      	mov	r0, sl
 80097bc:	f7f6 fd28 	bl	8000210 <memchr>
 80097c0:	b138      	cbz	r0, 80097d2 <_vfiprintf_r+0x17a>
 80097c2:	9b04      	ldr	r3, [sp, #16]
 80097c4:	eba0 000a 	sub.w	r0, r0, sl
 80097c8:	2240      	movs	r2, #64	; 0x40
 80097ca:	4082      	lsls	r2, r0
 80097cc:	4313      	orrs	r3, r2
 80097ce:	3401      	adds	r4, #1
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d6:	4829      	ldr	r0, [pc, #164]	; (800987c <_vfiprintf_r+0x224>)
 80097d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097dc:	2206      	movs	r2, #6
 80097de:	f7f6 fd17 	bl	8000210 <memchr>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d03f      	beq.n	8009866 <_vfiprintf_r+0x20e>
 80097e6:	4b26      	ldr	r3, [pc, #152]	; (8009880 <_vfiprintf_r+0x228>)
 80097e8:	bb1b      	cbnz	r3, 8009832 <_vfiprintf_r+0x1da>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	3307      	adds	r3, #7
 80097ee:	f023 0307 	bic.w	r3, r3, #7
 80097f2:	3308      	adds	r3, #8
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f8:	443b      	add	r3, r7
 80097fa:	9309      	str	r3, [sp, #36]	; 0x24
 80097fc:	e768      	b.n	80096d0 <_vfiprintf_r+0x78>
 80097fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009802:	460c      	mov	r4, r1
 8009804:	2001      	movs	r0, #1
 8009806:	e7a6      	b.n	8009756 <_vfiprintf_r+0xfe>
 8009808:	2300      	movs	r3, #0
 800980a:	3401      	adds	r4, #1
 800980c:	9305      	str	r3, [sp, #20]
 800980e:	4619      	mov	r1, r3
 8009810:	f04f 0c0a 	mov.w	ip, #10
 8009814:	4620      	mov	r0, r4
 8009816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981a:	3a30      	subs	r2, #48	; 0x30
 800981c:	2a09      	cmp	r2, #9
 800981e:	d903      	bls.n	8009828 <_vfiprintf_r+0x1d0>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0c6      	beq.n	80097b2 <_vfiprintf_r+0x15a>
 8009824:	9105      	str	r1, [sp, #20]
 8009826:	e7c4      	b.n	80097b2 <_vfiprintf_r+0x15a>
 8009828:	fb0c 2101 	mla	r1, ip, r1, r2
 800982c:	4604      	mov	r4, r0
 800982e:	2301      	movs	r3, #1
 8009830:	e7f0      	b.n	8009814 <_vfiprintf_r+0x1bc>
 8009832:	ab03      	add	r3, sp, #12
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	462a      	mov	r2, r5
 8009838:	4b12      	ldr	r3, [pc, #72]	; (8009884 <_vfiprintf_r+0x22c>)
 800983a:	a904      	add	r1, sp, #16
 800983c:	4630      	mov	r0, r6
 800983e:	f7fd ff03 	bl	8007648 <_printf_float>
 8009842:	4607      	mov	r7, r0
 8009844:	1c78      	adds	r0, r7, #1
 8009846:	d1d6      	bne.n	80097f6 <_vfiprintf_r+0x19e>
 8009848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984a:	07d9      	lsls	r1, r3, #31
 800984c:	d405      	bmi.n	800985a <_vfiprintf_r+0x202>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	059a      	lsls	r2, r3, #22
 8009852:	d402      	bmi.n	800985a <_vfiprintf_r+0x202>
 8009854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009856:	f7fe fc7d 	bl	8008154 <__retarget_lock_release_recursive>
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	065b      	lsls	r3, r3, #25
 800985e:	f53f af1d 	bmi.w	800969c <_vfiprintf_r+0x44>
 8009862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009864:	e71c      	b.n	80096a0 <_vfiprintf_r+0x48>
 8009866:	ab03      	add	r3, sp, #12
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	462a      	mov	r2, r5
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <_vfiprintf_r+0x22c>)
 800986e:	a904      	add	r1, sp, #16
 8009870:	4630      	mov	r0, r6
 8009872:	f7fe f98d 	bl	8007b90 <_printf_i>
 8009876:	e7e4      	b.n	8009842 <_vfiprintf_r+0x1ea>
 8009878:	0800b79c 	.word	0x0800b79c
 800987c:	0800b7a6 	.word	0x0800b7a6
 8009880:	08007649 	.word	0x08007649
 8009884:	08009633 	.word	0x08009633
 8009888:	0800b7a2 	.word	0x0800b7a2

0800988c <__sflush_r>:
 800988c:	898a      	ldrh	r2, [r1, #12]
 800988e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009892:	4605      	mov	r5, r0
 8009894:	0710      	lsls	r0, r2, #28
 8009896:	460c      	mov	r4, r1
 8009898:	d458      	bmi.n	800994c <__sflush_r+0xc0>
 800989a:	684b      	ldr	r3, [r1, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	dc05      	bgt.n	80098ac <__sflush_r+0x20>
 80098a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc02      	bgt.n	80098ac <__sflush_r+0x20>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d0f9      	beq.n	80098a6 <__sflush_r+0x1a>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098b8:	682f      	ldr	r7, [r5, #0]
 80098ba:	6a21      	ldr	r1, [r4, #32]
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	d032      	beq.n	8009926 <__sflush_r+0x9a>
 80098c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	075a      	lsls	r2, r3, #29
 80098c6:	d505      	bpl.n	80098d4 <__sflush_r+0x48>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	1ac0      	subs	r0, r0, r3
 80098cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ce:	b10b      	cbz	r3, 80098d4 <__sflush_r+0x48>
 80098d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098d2:	1ac0      	subs	r0, r0, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	4602      	mov	r2, r0
 80098d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098da:	6a21      	ldr	r1, [r4, #32]
 80098dc:	4628      	mov	r0, r5
 80098de:	47b0      	blx	r6
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	d106      	bne.n	80098f4 <__sflush_r+0x68>
 80098e6:	6829      	ldr	r1, [r5, #0]
 80098e8:	291d      	cmp	r1, #29
 80098ea:	d82b      	bhi.n	8009944 <__sflush_r+0xb8>
 80098ec:	4a29      	ldr	r2, [pc, #164]	; (8009994 <__sflush_r+0x108>)
 80098ee:	410a      	asrs	r2, r1
 80098f0:	07d6      	lsls	r6, r2, #31
 80098f2:	d427      	bmi.n	8009944 <__sflush_r+0xb8>
 80098f4:	2200      	movs	r2, #0
 80098f6:	6062      	str	r2, [r4, #4]
 80098f8:	04d9      	lsls	r1, r3, #19
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	d504      	bpl.n	800990a <__sflush_r+0x7e>
 8009900:	1c42      	adds	r2, r0, #1
 8009902:	d101      	bne.n	8009908 <__sflush_r+0x7c>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b903      	cbnz	r3, 800990a <__sflush_r+0x7e>
 8009908:	6560      	str	r0, [r4, #84]	; 0x54
 800990a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800990c:	602f      	str	r7, [r5, #0]
 800990e:	2900      	cmp	r1, #0
 8009910:	d0c9      	beq.n	80098a6 <__sflush_r+0x1a>
 8009912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009916:	4299      	cmp	r1, r3
 8009918:	d002      	beq.n	8009920 <__sflush_r+0x94>
 800991a:	4628      	mov	r0, r5
 800991c:	f7ff faaa 	bl	8008e74 <_free_r>
 8009920:	2000      	movs	r0, #0
 8009922:	6360      	str	r0, [r4, #52]	; 0x34
 8009924:	e7c0      	b.n	80098a8 <__sflush_r+0x1c>
 8009926:	2301      	movs	r3, #1
 8009928:	4628      	mov	r0, r5
 800992a:	47b0      	blx	r6
 800992c:	1c41      	adds	r1, r0, #1
 800992e:	d1c8      	bne.n	80098c2 <__sflush_r+0x36>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0c5      	beq.n	80098c2 <__sflush_r+0x36>
 8009936:	2b1d      	cmp	r3, #29
 8009938:	d001      	beq.n	800993e <__sflush_r+0xb2>
 800993a:	2b16      	cmp	r3, #22
 800993c:	d101      	bne.n	8009942 <__sflush_r+0xb6>
 800993e:	602f      	str	r7, [r5, #0]
 8009940:	e7b1      	b.n	80098a6 <__sflush_r+0x1a>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	e7ad      	b.n	80098a8 <__sflush_r+0x1c>
 800994c:	690f      	ldr	r7, [r1, #16]
 800994e:	2f00      	cmp	r7, #0
 8009950:	d0a9      	beq.n	80098a6 <__sflush_r+0x1a>
 8009952:	0793      	lsls	r3, r2, #30
 8009954:	680e      	ldr	r6, [r1, #0]
 8009956:	bf08      	it	eq
 8009958:	694b      	ldreq	r3, [r1, #20]
 800995a:	600f      	str	r7, [r1, #0]
 800995c:	bf18      	it	ne
 800995e:	2300      	movne	r3, #0
 8009960:	eba6 0807 	sub.w	r8, r6, r7
 8009964:	608b      	str	r3, [r1, #8]
 8009966:	f1b8 0f00 	cmp.w	r8, #0
 800996a:	dd9c      	ble.n	80098a6 <__sflush_r+0x1a>
 800996c:	6a21      	ldr	r1, [r4, #32]
 800996e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009970:	4643      	mov	r3, r8
 8009972:	463a      	mov	r2, r7
 8009974:	4628      	mov	r0, r5
 8009976:	47b0      	blx	r6
 8009978:	2800      	cmp	r0, #0
 800997a:	dc06      	bgt.n	800998a <__sflush_r+0xfe>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e78e      	b.n	80098a8 <__sflush_r+0x1c>
 800998a:	4407      	add	r7, r0
 800998c:	eba8 0800 	sub.w	r8, r8, r0
 8009990:	e7e9      	b.n	8009966 <__sflush_r+0xda>
 8009992:	bf00      	nop
 8009994:	dfbffffe 	.word	0xdfbffffe

08009998 <_fflush_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	690b      	ldr	r3, [r1, #16]
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b913      	cbnz	r3, 80099a8 <_fflush_r+0x10>
 80099a2:	2500      	movs	r5, #0
 80099a4:	4628      	mov	r0, r5
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	b118      	cbz	r0, 80099b2 <_fflush_r+0x1a>
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	b90b      	cbnz	r3, 80099b2 <_fflush_r+0x1a>
 80099ae:	f7fe fa9d 	bl	8007eec <__sinit>
 80099b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0f3      	beq.n	80099a2 <_fflush_r+0xa>
 80099ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099bc:	07d0      	lsls	r0, r2, #31
 80099be:	d404      	bmi.n	80099ca <_fflush_r+0x32>
 80099c0:	0599      	lsls	r1, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_fflush_r+0x32>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f7fe fbc4 	bl	8008152 <__retarget_lock_acquire_recursive>
 80099ca:	4628      	mov	r0, r5
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7ff ff5d 	bl	800988c <__sflush_r>
 80099d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d4:	07da      	lsls	r2, r3, #31
 80099d6:	4605      	mov	r5, r0
 80099d8:	d4e4      	bmi.n	80099a4 <_fflush_r+0xc>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	059b      	lsls	r3, r3, #22
 80099de:	d4e1      	bmi.n	80099a4 <_fflush_r+0xc>
 80099e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e2:	f7fe fbb7 	bl	8008154 <__retarget_lock_release_recursive>
 80099e6:	e7dd      	b.n	80099a4 <_fflush_r+0xc>

080099e8 <__swbuf_r>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	460e      	mov	r6, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	4605      	mov	r5, r0
 80099f0:	b118      	cbz	r0, 80099fa <__swbuf_r+0x12>
 80099f2:	6a03      	ldr	r3, [r0, #32]
 80099f4:	b90b      	cbnz	r3, 80099fa <__swbuf_r+0x12>
 80099f6:	f7fe fa79 	bl	8007eec <__sinit>
 80099fa:	69a3      	ldr	r3, [r4, #24]
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	071a      	lsls	r2, r3, #28
 8009a02:	d525      	bpl.n	8009a50 <__swbuf_r+0x68>
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	b31b      	cbz	r3, 8009a50 <__swbuf_r+0x68>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	6922      	ldr	r2, [r4, #16]
 8009a0c:	1a98      	subs	r0, r3, r2
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	b2f6      	uxtb	r6, r6
 8009a12:	4283      	cmp	r3, r0
 8009a14:	4637      	mov	r7, r6
 8009a16:	dc04      	bgt.n	8009a22 <__swbuf_r+0x3a>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7ff ffbc 	bl	8009998 <_fflush_r>
 8009a20:	b9e0      	cbnz	r0, 8009a5c <__swbuf_r+0x74>
 8009a22:	68a3      	ldr	r3, [r4, #8]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	701e      	strb	r6, [r3, #0]
 8009a30:	6962      	ldr	r2, [r4, #20]
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d004      	beq.n	8009a42 <__swbuf_r+0x5a>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d506      	bpl.n	8009a4c <__swbuf_r+0x64>
 8009a3e:	2e0a      	cmp	r6, #10
 8009a40:	d104      	bne.n	8009a4c <__swbuf_r+0x64>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f7ff ffa7 	bl	8009998 <_fflush_r>
 8009a4a:	b938      	cbnz	r0, 8009a5c <__swbuf_r+0x74>
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	4621      	mov	r1, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f806 	bl	8009a64 <__swsetup_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0d5      	beq.n	8009a08 <__swbuf_r+0x20>
 8009a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a60:	e7f4      	b.n	8009a4c <__swbuf_r+0x64>
	...

08009a64 <__swsetup_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <__swsetup_r+0xac>)
 8009a68:	4605      	mov	r5, r0
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	b118      	cbz	r0, 8009a78 <__swsetup_r+0x14>
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b90b      	cbnz	r3, 8009a78 <__swsetup_r+0x14>
 8009a74:	f7fe fa3a 	bl	8007eec <__sinit>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a7e:	0718      	lsls	r0, r3, #28
 8009a80:	d422      	bmi.n	8009ac8 <__swsetup_r+0x64>
 8009a82:	06d9      	lsls	r1, r3, #27
 8009a84:	d407      	bmi.n	8009a96 <__swsetup_r+0x32>
 8009a86:	2309      	movs	r3, #9
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e034      	b.n	8009b00 <__swsetup_r+0x9c>
 8009a96:	0758      	lsls	r0, r3, #29
 8009a98:	d512      	bpl.n	8009ac0 <__swsetup_r+0x5c>
 8009a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9c:	b141      	cbz	r1, 8009ab0 <__swsetup_r+0x4c>
 8009a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	d002      	beq.n	8009aac <__swsetup_r+0x48>
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f7ff f9e4 	bl	8008e74 <_free_r>
 8009aac:	2300      	movs	r3, #0
 8009aae:	6363      	str	r3, [r4, #52]	; 0x34
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6063      	str	r3, [r4, #4]
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f043 0308 	orr.w	r3, r3, #8
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	6923      	ldr	r3, [r4, #16]
 8009aca:	b94b      	cbnz	r3, 8009ae0 <__swsetup_r+0x7c>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad6:	d003      	beq.n	8009ae0 <__swsetup_r+0x7c>
 8009ad8:	4621      	mov	r1, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	f000 f8b9 	bl	8009c52 <__smakebuf_r>
 8009ae0:	89a0      	ldrh	r0, [r4, #12]
 8009ae2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ae6:	f010 0301 	ands.w	r3, r0, #1
 8009aea:	d00a      	beq.n	8009b02 <__swsetup_r+0x9e>
 8009aec:	2300      	movs	r3, #0
 8009aee:	60a3      	str	r3, [r4, #8]
 8009af0:	6963      	ldr	r3, [r4, #20]
 8009af2:	425b      	negs	r3, r3
 8009af4:	61a3      	str	r3, [r4, #24]
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	b943      	cbnz	r3, 8009b0c <__swsetup_r+0xa8>
 8009afa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009afe:	d1c4      	bne.n	8009a8a <__swsetup_r+0x26>
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	0781      	lsls	r1, r0, #30
 8009b04:	bf58      	it	pl
 8009b06:	6963      	ldrpl	r3, [r4, #20]
 8009b08:	60a3      	str	r3, [r4, #8]
 8009b0a:	e7f4      	b.n	8009af6 <__swsetup_r+0x92>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7f7      	b.n	8009b00 <__swsetup_r+0x9c>
 8009b10:	20000068 	.word	0x20000068

08009b14 <_raise_r>:
 8009b14:	291f      	cmp	r1, #31
 8009b16:	b538      	push	{r3, r4, r5, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	d904      	bls.n	8009b28 <_raise_r+0x14>
 8009b1e:	2316      	movs	r3, #22
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b2a:	b112      	cbz	r2, 8009b32 <_raise_r+0x1e>
 8009b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b30:	b94b      	cbnz	r3, 8009b46 <_raise_r+0x32>
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f830 	bl	8009b98 <_getpid_r>
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b42:	f000 b817 	b.w	8009b74 <_kill_r>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d00a      	beq.n	8009b60 <_raise_r+0x4c>
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	d103      	bne.n	8009b56 <_raise_r+0x42>
 8009b4e:	2316      	movs	r3, #22
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	2001      	movs	r0, #1
 8009b54:	e7e7      	b.n	8009b26 <_raise_r+0x12>
 8009b56:	2400      	movs	r4, #0
 8009b58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	4798      	blx	r3
 8009b60:	2000      	movs	r0, #0
 8009b62:	e7e0      	b.n	8009b26 <_raise_r+0x12>

08009b64 <raise>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <raise+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f7ff bfd3 	b.w	8009b14 <_raise_r>
 8009b6e:	bf00      	nop
 8009b70:	20000068 	.word	0x20000068

08009b74 <_kill_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <_kill_r+0x20>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	4611      	mov	r1, r2
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f7f9 f87b 	bl	8002c7c <_kill>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d102      	bne.n	8009b90 <_kill_r+0x1c>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	b103      	cbz	r3, 8009b90 <_kill_r+0x1c>
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	bf00      	nop
 8009b94:	200005d4 	.word	0x200005d4

08009b98 <_getpid_r>:
 8009b98:	f7f9 b868 	b.w	8002c6c <_getpid>

08009b9c <_calloc_r>:
 8009b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b9e:	fba1 2402 	umull	r2, r4, r1, r2
 8009ba2:	b94c      	cbnz	r4, 8009bb8 <_calloc_r+0x1c>
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	9201      	str	r2, [sp, #4]
 8009ba8:	f7fd fc22 	bl	80073f0 <_malloc_r>
 8009bac:	9a01      	ldr	r2, [sp, #4]
 8009bae:	4605      	mov	r5, r0
 8009bb0:	b930      	cbnz	r0, 8009bc0 <_calloc_r+0x24>
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	b003      	add	sp, #12
 8009bb6:	bd30      	pop	{r4, r5, pc}
 8009bb8:	220c      	movs	r2, #12
 8009bba:	6002      	str	r2, [r0, #0]
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	e7f8      	b.n	8009bb2 <_calloc_r+0x16>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7fe fa38 	bl	8008036 <memset>
 8009bc6:	e7f4      	b.n	8009bb2 <_calloc_r+0x16>

08009bc8 <__ascii_mbtowc>:
 8009bc8:	b082      	sub	sp, #8
 8009bca:	b901      	cbnz	r1, 8009bce <__ascii_mbtowc+0x6>
 8009bcc:	a901      	add	r1, sp, #4
 8009bce:	b142      	cbz	r2, 8009be2 <__ascii_mbtowc+0x1a>
 8009bd0:	b14b      	cbz	r3, 8009be6 <__ascii_mbtowc+0x1e>
 8009bd2:	7813      	ldrb	r3, [r2, #0]
 8009bd4:	600b      	str	r3, [r1, #0]
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	1e10      	subs	r0, r2, #0
 8009bda:	bf18      	it	ne
 8009bdc:	2001      	movne	r0, #1
 8009bde:	b002      	add	sp, #8
 8009be0:	4770      	bx	lr
 8009be2:	4610      	mov	r0, r2
 8009be4:	e7fb      	b.n	8009bde <__ascii_mbtowc+0x16>
 8009be6:	f06f 0001 	mvn.w	r0, #1
 8009bea:	e7f8      	b.n	8009bde <__ascii_mbtowc+0x16>

08009bec <__ascii_wctomb>:
 8009bec:	b149      	cbz	r1, 8009c02 <__ascii_wctomb+0x16>
 8009bee:	2aff      	cmp	r2, #255	; 0xff
 8009bf0:	bf85      	ittet	hi
 8009bf2:	238a      	movhi	r3, #138	; 0x8a
 8009bf4:	6003      	strhi	r3, [r0, #0]
 8009bf6:	700a      	strbls	r2, [r1, #0]
 8009bf8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bfc:	bf98      	it	ls
 8009bfe:	2001      	movls	r0, #1
 8009c00:	4770      	bx	lr
 8009c02:	4608      	mov	r0, r1
 8009c04:	4770      	bx	lr

08009c06 <__swhatbuf_r>:
 8009c06:	b570      	push	{r4, r5, r6, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	b096      	sub	sp, #88	; 0x58
 8009c12:	4615      	mov	r5, r2
 8009c14:	461e      	mov	r6, r3
 8009c16:	da0d      	bge.n	8009c34 <__swhatbuf_r+0x2e>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c1e:	f04f 0100 	mov.w	r1, #0
 8009c22:	bf0c      	ite	eq
 8009c24:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c28:	2340      	movne	r3, #64	; 0x40
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	6031      	str	r1, [r6, #0]
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	b016      	add	sp, #88	; 0x58
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	466a      	mov	r2, sp
 8009c36:	f000 f849 	bl	8009ccc <_fstat_r>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	dbec      	blt.n	8009c18 <__swhatbuf_r+0x12>
 8009c3e:	9901      	ldr	r1, [sp, #4]
 8009c40:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c44:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c48:	4259      	negs	r1, r3
 8009c4a:	4159      	adcs	r1, r3
 8009c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c50:	e7eb      	b.n	8009c2a <__swhatbuf_r+0x24>

08009c52 <__smakebuf_r>:
 8009c52:	898b      	ldrh	r3, [r1, #12]
 8009c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c56:	079d      	lsls	r5, r3, #30
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	d507      	bpl.n	8009c6e <__smakebuf_r+0x1c>
 8009c5e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	2301      	movs	r3, #1
 8009c68:	6163      	str	r3, [r4, #20]
 8009c6a:	b002      	add	sp, #8
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	ab01      	add	r3, sp, #4
 8009c70:	466a      	mov	r2, sp
 8009c72:	f7ff ffc8 	bl	8009c06 <__swhatbuf_r>
 8009c76:	9900      	ldr	r1, [sp, #0]
 8009c78:	4605      	mov	r5, r0
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7fd fbb8 	bl	80073f0 <_malloc_r>
 8009c80:	b948      	cbnz	r0, 8009c96 <__smakebuf_r+0x44>
 8009c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c86:	059a      	lsls	r2, r3, #22
 8009c88:	d4ef      	bmi.n	8009c6a <__smakebuf_r+0x18>
 8009c8a:	f023 0303 	bic.w	r3, r3, #3
 8009c8e:	f043 0302 	orr.w	r3, r3, #2
 8009c92:	81a3      	strh	r3, [r4, #12]
 8009c94:	e7e3      	b.n	8009c5e <__smakebuf_r+0xc>
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	6020      	str	r0, [r4, #0]
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	9b00      	ldr	r3, [sp, #0]
 8009ca2:	6163      	str	r3, [r4, #20]
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	6120      	str	r0, [r4, #16]
 8009ca8:	b15b      	cbz	r3, 8009cc2 <__smakebuf_r+0x70>
 8009caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 f81e 	bl	8009cf0 <_isatty_r>
 8009cb4:	b128      	cbz	r0, 8009cc2 <__smakebuf_r+0x70>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f023 0303 	bic.w	r3, r3, #3
 8009cbc:	f043 0301 	orr.w	r3, r3, #1
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	431d      	orrs	r5, r3
 8009cc6:	81a5      	strh	r5, [r4, #12]
 8009cc8:	e7cf      	b.n	8009c6a <__smakebuf_r+0x18>
	...

08009ccc <_fstat_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	; (8009cec <_fstat_r+0x20>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	f7f9 f82e 	bl	8002d3a <_fstat>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d102      	bne.n	8009ce8 <_fstat_r+0x1c>
 8009ce2:	682b      	ldr	r3, [r5, #0]
 8009ce4:	b103      	cbz	r3, 8009ce8 <_fstat_r+0x1c>
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	bf00      	nop
 8009cec:	200005d4 	.word	0x200005d4

08009cf0 <_isatty_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d06      	ldr	r5, [pc, #24]	; (8009d0c <_isatty_r+0x1c>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f9 f82d 	bl	8002d5a <_isatty>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_isatty_r+0x1a>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_isatty_r+0x1a>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	200005d4 	.word	0x200005d4

08009d10 <_init>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr

08009d1c <_fini>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr
