
Cyphal_CAN_implementation_with_IRQ_final2_stringsubscribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022c0  0800bf78  0800bf78  0001bf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e238  0800e238  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e238  0800e238  0001e238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e240  0800e240  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e240  0800e240  0001e240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e244  0800e244  0001e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800e248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001e0  0800e428  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800e428  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011eec  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002756  00000000  00000000  0003213f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd1  00000000  00000000  00035738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236d1  00000000  00000000  00036309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d88  00000000  00000000  000599da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a40  00000000  00000000  0006c762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000508c  00000000  00000000  0013f1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00144230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf60 	.word	0x0800bf60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bf60 	.word	0x0800bf60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bf28      	it	cs
 8000ef6:	4613      	movcs	r3, r2
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffe3 	bl	8000ee4 <nunavutChooseMin>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffdb 	bl	8000ee4 <nunavutChooseMin>
 8000f2e:	4603      	mov	r3, r0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b092      	sub	sp, #72	; 0x48
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <nunavutCopyBits+0x20>
 8000f4c:	4b91      	ldr	r3, [pc, #580]	; (8001194 <nunavutCopyBits+0x25c>)
 8000f4e:	4a92      	ldr	r2, [pc, #584]	; (8001198 <nunavutCopyBits+0x260>)
 8000f50:	217f      	movs	r1, #127	; 0x7f
 8000f52:	4892      	ldr	r0, [pc, #584]	; (800119c <nunavutCopyBits+0x264>)
 8000f54:	f008 f8d6 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <nunavutCopyBits+0x32>
 8000f5e:	4b90      	ldr	r3, [pc, #576]	; (80011a0 <nunavutCopyBits+0x268>)
 8000f60:	4a8d      	ldr	r2, [pc, #564]	; (8001198 <nunavutCopyBits+0x260>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	488d      	ldr	r0, [pc, #564]	; (800119c <nunavutCopyBits+0x264>)
 8000f66:	f008 f8cd 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d105      	bne.n	8000f7e <nunavutCopyBits+0x46>
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <nunavutCopyBits+0x26c>)
 8000f74:	4a88      	ldr	r2, [pc, #544]	; (8001198 <nunavutCopyBits+0x260>)
 8000f76:	2181      	movs	r1, #129	; 0x81
 8000f78:	4888      	ldr	r0, [pc, #544]	; (800119c <nunavutCopyBits+0x264>)
 8000f7a:	f008 f8c3 	bl	8009104 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8000f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d14f      	bne.n	8001028 <nunavutCopyBits+0xf0>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14a      	bne.n	8001028 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fb2:	f009 f835 	bl	800a020 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8000fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80df 	beq.w	800118a <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd0:	4413      	add	r3, r2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd8:	4413      	add	r3, r2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d905      	bls.n	8000ff0 <nunavutCopyBits+0xb8>
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <nunavutCopyBits+0x270>)
 8000fe6:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <nunavutCopyBits+0x260>)
 8000fe8:	2190      	movs	r1, #144	; 0x90
 8000fea:	486c      	ldr	r0, [pc, #432]	; (800119c <nunavutCopyBits+0x264>)
 8000fec:	f008 f88a 	bl	8009104 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8000ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800100a:	43db      	mvns	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4013      	ands	r3, r2
 8001010:	b2da      	uxtb	r2, r3
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	7819      	ldrb	r1, [r3, #0]
 8001016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800101a:	400b      	ands	r3, r1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	701a      	strb	r2, [r3, #0]
    {
 8001026:	e0b0      	b.n	800118a <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 8001040:	6a3a      	ldr	r2, [r7, #32]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	429a      	cmp	r2, r3
 8001046:	d210      	bcs.n	800106a <nunavutCopyBits+0x132>
 8001048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	3308      	adds	r3, #8
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	6a3a      	ldr	r2, [r7, #32]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	429a      	cmp	r2, r3
 800105c:	d905      	bls.n	800106a <nunavutCopyBits+0x132>
 800105e:	4b53      	ldr	r3, [pc, #332]	; (80011ac <nunavutCopyBits+0x274>)
 8001060:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <nunavutCopyBits+0x260>)
 8001062:	219f      	movs	r1, #159	; 0x9f
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <nunavutCopyBits+0x264>)
 8001066:	f008 f84d 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 800106a:	6a3a      	ldr	r2, [r7, #32]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	d97d      	bls.n	800116e <nunavutCopyBits+0x236>
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	3308      	adds	r3, #8
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4413      	add	r3, r2
 8001080:	461a      	mov	r2, r3
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	429a      	cmp	r2, r3
 8001086:	d972      	bls.n	800116e <nunavutCopyBits+0x236>
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <nunavutCopyBits+0x278>)
 800108a:	4a43      	ldr	r2, [pc, #268]	; (8001198 <nunavutCopyBits+0x260>)
 800108c:	21a0      	movs	r1, #160	; 0xa0
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <nunavutCopyBits+0x264>)
 8001090:	f008 f838 	bl	8009104 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 800109e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80010a8:	7dba      	ldrb	r2, [r7, #22]
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bf38      	it	cc
 80010b0:	4613      	movcc	r3, r2
 80010b2:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	f1c3 0008 	rsb	r0, r3, #8
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff ff0f 	bl	8000ee4 <nunavutChooseMin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 80010ca:	7d3b      	ldrb	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <nunavutCopyBits+0x1a4>
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <nunavutCopyBits+0x27c>)
 80010d2:	4a31      	ldr	r2, [pc, #196]	; (8001198 <nunavutCopyBits+0x260>)
 80010d4:	21a7      	movs	r1, #167	; 0xa7
 80010d6:	4831      	ldr	r0, [pc, #196]	; (800119c <nunavutCopyBits+0x264>)
 80010d8:	f008 f814 	bl	8009104 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d905      	bls.n	80010ee <nunavutCopyBits+0x1b6>
 80010e2:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <nunavutCopyBits+0x280>)
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <nunavutCopyBits+0x260>)
 80010e6:	21a8      	movs	r1, #168	; 0xa8
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <nunavutCopyBits+0x264>)
 80010ea:	f008 f80b 	bl	8009104 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80010ee:	7d3b      	ldrb	r3, [r7, #20]
 80010f0:	2201      	movs	r2, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	1e5a      	subs	r2, r3, #1
 80010f8:	7dbb      	ldrb	r3, [r7, #22]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <nunavutCopyBits+0x1da>
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <nunavutCopyBits+0x284>)
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <nunavutCopyBits+0x260>)
 800110a:	21ab      	movs	r1, #171	; 0xab
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <nunavutCopyBits+0x264>)
 800110e:	f007 fff9 	bl	8009104 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	fa42 f303 	asr.w	r3, r2, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7cfb      	ldrb	r3, [r7, #19]
 800113c:	43db      	mvns	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4013      	ands	r3, r2
 8001142:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001144:	7cba      	ldrb	r2, [r7, #18]
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	4013      	ands	r3, r2
 800114a:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 800114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	4413      	add	r3, r2
 8001154:	7c79      	ldrb	r1, [r7, #17]
 8001156:	7c3a      	ldrb	r2, [r7, #16]
 8001158:	430a      	orrs	r2, r1
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001162:	4413      	add	r3, r2
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8001166:	7d3b      	ldrb	r3, [r7, #20]
 8001168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800116a:	4413      	add	r3, r2
 800116c:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001172:	429a      	cmp	r2, r3
 8001174:	d88e      	bhi.n	8001094 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117a:	429a      	cmp	r2, r3
 800117c:	d006      	beq.n	800118c <nunavutCopyBits+0x254>
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <nunavutCopyBits+0x288>)
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <nunavutCopyBits+0x260>)
 8001182:	21b9      	movs	r1, #185	; 0xb9
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <nunavutCopyBits+0x264>)
 8001186:	f007 ffbd 	bl	8009104 <__assert_func>
    {
 800118a:	bf00      	nop
    }
}
 800118c:	bf00      	nop
 800118e:	3748      	adds	r7, #72	; 0x48
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800bf78 	.word	0x0800bf78
 8001198:	0800d320 	.word	0x0800d320
 800119c:	0800bf8c 	.word	0x0800bf8c
 80011a0:	0800c008 	.word	0x0800c008
 80011a4:	0800c01c 	.word	0x0800c01c
 80011a8:	0800c028 	.word	0x0800c028
 80011ac:	0800c038 	.word	0x0800c038
 80011b0:	0800c0a4 	.word	0x0800c0a4
 80011b4:	0800c110 	.word	0x0800c110
 80011b8:	0800c11c 	.word	0x0800c11c
 80011bc:	0800c128 	.word	0x0800c128
 80011c0:	0800c134 	.word	0x0800c134

080011c4 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <nunavutSetUxx+0x1e>
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <nunavutSetUxx+0xfc>)
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <nunavutSetUxx+0x100>)
 80011da:	21f7      	movs	r1, #247	; 0xf7
 80011dc:	483a      	ldr	r0, [pc, #232]	; (80012c8 <nunavutSetUxx+0x104>)
 80011de:	f007 ff91 	bl	8009104 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	00da      	lsls	r2, r3, #3
 80011e6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	440b      	add	r3, r1
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d202      	bcs.n	80011f8 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80011f2:	f06f 0302 	mvn.w	r3, #2
 80011f6:	e05f      	b.n	80012b8 <nunavutSetUxx+0xf4>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80011f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe70 	bl	8000ee4 <nunavutChooseMin>
 8001204:	61f8      	str	r0, [r7, #28]
    const uint8_t tmp[sizeof(uint64_t)] = {
        (uint8_t)((value >> 0U) & 0xFFU),
 8001206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    const uint8_t tmp[sizeof(uint64_t)] = {
 800120a:	753b      	strb	r3, [r7, #20]
        (uint8_t)((value >> 8U) & 0xFFU),
 800120c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	0a02      	lsrs	r2, r0, #8
 800121a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800121e:	0a0b      	lsrs	r3, r1, #8
 8001220:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001222:	757b      	strb	r3, [r7, #21]
        (uint8_t)((value >> 16U) & 0xFFU),
 8001224:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	0c02      	lsrs	r2, r0, #16
 8001232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001236:	0c0b      	lsrs	r3, r1, #16
 8001238:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800123a:	75bb      	strb	r3, [r7, #22]
        (uint8_t)((value >> 24U) & 0xFFU),
 800123c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	0e02      	lsrs	r2, r0, #24
 800124a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800124e:	0e0b      	lsrs	r3, r1, #24
 8001250:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001252:	75fb      	strb	r3, [r7, #23]
        (uint8_t)((value >> 32U) & 0xFFU),
 8001254:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	000a      	movs	r2, r1
 8001262:	2300      	movs	r3, #0
 8001264:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001266:	763b      	strb	r3, [r7, #24]
        (uint8_t)((value >> 40U) & 0xFFU),
 8001268:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0a0a      	lsrs	r2, r1, #8
 8001276:	2300      	movs	r3, #0
 8001278:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800127a:	767b      	strb	r3, [r7, #25]
        (uint8_t)((value >> 48U) & 0xFFU),
 800127c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	0c0a      	lsrs	r2, r1, #16
 800128a:	2300      	movs	r3, #0
 800128c:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800128e:	76bb      	strb	r3, [r7, #26]
        (uint8_t)((value >> 56U) & 0xFFU),
 8001290:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	0e0a      	lsrs	r2, r1, #24
 800129e:	2300      	movs	r3, #0
 80012a0:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012a2:	76fb      	strb	r3, [r7, #27]
    };
    nunavutCopyBits(buf, off_bits, saturated_len_bits, &tmp[0], 0U);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff fe41 	bl	8000f38 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800c148 	.word	0x0800c148
 80012c4:	0800d310 	.word	0x0800d310
 80012c8:	0800bf8c 	.word	0x0800bf8c

080012cc <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <nunavutGetU16+0x22>
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <nunavutGetU16+0x7c>)
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <nunavutGetU16+0x80>)
 80012e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <nunavutGetU16+0x84>)
 80012ea:	f007 ff0b 	bl	8009104 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2110      	movs	r1, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fdf6 	bl	8000ee4 <nunavutChooseMin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f7ff fe00 	bl	8000f04 <nunavutSaturateBufferFragmentBitLength>
 8001304:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint16_t) * 8U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b10      	cmp	r3, #16
 800130a:	d906      	bls.n	800131a <nunavutGetU16+0x4e>
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <nunavutGetU16+0x88>)
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <nunavutGetU16+0x80>)
 8001310:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <nunavutGetU16+0x84>)
 8001316:	f007 fef5 	bl	8009104 <__assert_func>
    uint8_t tmp[sizeof(uint16_t)] = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	823b      	strh	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 800131e:	f107 0010 	add.w	r0, r7, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2100      	movs	r1, #0
 800132c:	f7ff fe04 	bl	8000f38 <nunavutCopyBits>
    return (uint16_t)(tmp[0] | (uint16_t)(((uint16_t) tmp[1]) << 8U));
 8001330:	7c3b      	ldrb	r3, [r7, #16]
 8001332:	b29a      	uxth	r2, r3
 8001334:	7c7b      	ldrb	r3, [r7, #17]
 8001336:	b29b      	uxth	r3, r3
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b29b      	uxth	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800c148 	.word	0x0800c148
 800134c:	0800d384 	.word	0x0800d384
 8001350:	0800bf8c 	.word	0x0800bf8c
 8001354:	0800c15c 	.word	0x0800c15c

08001358 <nunavutGetU64>:

static inline uint64_t nunavutGetU64(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800135c:	b0a4      	sub	sp, #144	; 0x90
 800135e:	af02      	add	r7, sp, #8
 8001360:	6778      	str	r0, [r7, #116]	; 0x74
 8001362:	6739      	str	r1, [r7, #112]	; 0x70
 8001364:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001366:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    NUNAVUT_ASSERT(buf != NULL);
 800136a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <nunavutGetU64+0x26>
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <nunavutGetU64+0x1c8>)
 8001372:	4a6c      	ldr	r2, [pc, #432]	; (8001524 <nunavutGetU64+0x1cc>)
 8001374:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <nunavutGetU64+0x1d0>)
 800137a:	f007 fec3 	bl	8009104 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 64U));
 800137e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fdad 	bl	8000ee4 <nunavutChooseMin>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001390:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001392:	f7ff fdb7 	bl	8000f04 <nunavutSaturateBufferFragmentBitLength>
 8001396:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    NUNAVUT_ASSERT(bits <= (sizeof(uint64_t) * 8U));
 800139a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800139e:	2b40      	cmp	r3, #64	; 0x40
 80013a0:	d906      	bls.n	80013b0 <nunavutGetU64+0x58>
 80013a2:	4b62      	ldr	r3, [pc, #392]	; (800152c <nunavutGetU64+0x1d4>)
 80013a4:	4a5f      	ldr	r2, [pc, #380]	; (8001524 <nunavutGetU64+0x1cc>)
 80013a6:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80013aa:	485f      	ldr	r0, [pc, #380]	; (8001528 <nunavutGetU64+0x1d0>)
 80013ac:	f007 feaa 	bl	8009104 <__assert_func>
    uint8_t tmp[sizeof(uint64_t)] = {0};
 80013b0:	2300      	movs	r3, #0
 80013b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 80013ba:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80013be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013c8:	2100      	movs	r1, #0
 80013ca:	f7ff fdb5 	bl	8000f38 <nunavutCopyBits>
    return (uint64_t)(tmp[0] |
 80013ce:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2200      	movs	r2, #0
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
 80013d8:	667a      	str	r2, [r7, #100]	; 0x64
                      ((uint64_t) tmp[1] << 8U) |
 80013da:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	461c      	mov	r4, r3
 80013e4:	4615      	mov	r5, r2
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	022b      	lsls	r3, r5, #8
 80013f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80013f4:	0222      	lsls	r2, r4, #8
    return (uint64_t)(tmp[0] |
 80013f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013fa:	4621      	mov	r1, r4
 80013fc:	ea41 0a02 	orr.w	sl, r1, r2
 8001400:	4629      	mov	r1, r5
 8001402:	ea41 0b03 	orr.w	fp, r1, r3
                      ((uint64_t) tmp[2] << 16U) |
 8001406:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2200      	movs	r2, #0
 800140e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001410:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800141e:	4629      	mov	r1, r5
 8001420:	040b      	lsls	r3, r1, #16
 8001422:	4621      	mov	r1, r4
 8001424:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001428:	4621      	mov	r1, r4
 800142a:	040a      	lsls	r2, r1, #16
                      ((uint64_t) tmp[1] << 8U) |
 800142c:	ea4a 0102 	orr.w	r1, sl, r2
 8001430:	6539      	str	r1, [r7, #80]	; 0x50
 8001432:	ea4b 0303 	orr.w	r3, fp, r3
 8001436:	657b      	str	r3, [r7, #84]	; 0x54
                      ((uint64_t) tmp[3] << 24U) |
 8001438:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
 8001442:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001444:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001448:	460b      	mov	r3, r1
 800144a:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800144e:	460b      	mov	r3, r1
 8001450:	ea4f 6803 	mov.w	r8, r3, lsl #24
                      ((uint64_t) tmp[2] << 16U) |
 8001454:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001458:	460b      	mov	r3, r1
 800145a:	ea43 0308 	orr.w	r3, r3, r8
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
 8001460:	4613      	mov	r3, r2
 8001462:	ea43 0309 	orr.w	r3, r3, r9
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
                      ((uint64_t) tmp[4] << 32U) |
 8001468:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2200      	movs	r2, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
 8001472:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800147e:	000b      	movs	r3, r1
 8001480:	2200      	movs	r2, #0
                      ((uint64_t) tmp[3] << 24U) |
 8001482:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001486:	4621      	mov	r1, r4
 8001488:	4311      	orrs	r1, r2
 800148a:	6339      	str	r1, [r7, #48]	; 0x30
 800148c:	4629      	mov	r1, r5
 800148e:	4319      	orrs	r1, r3
 8001490:	6379      	str	r1, [r7, #52]	; 0x34
                      ((uint64_t) tmp[5] << 40U) |
 8001492:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2200      	movs	r2, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
 800149c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014a8:	020b      	lsls	r3, r1, #8
 80014aa:	2200      	movs	r2, #0
                      ((uint64_t) tmp[4] << 32U) |
 80014ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014b0:	4621      	mov	r1, r4
 80014b2:	4311      	orrs	r1, r2
 80014b4:	6239      	str	r1, [r7, #32]
 80014b6:	4629      	mov	r1, r5
 80014b8:	4319      	orrs	r1, r3
 80014ba:	6279      	str	r1, [r7, #36]	; 0x24
                      ((uint64_t) tmp[6] << 48U) |
 80014bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	61fa      	str	r2, [r7, #28]
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	69b9      	ldr	r1, [r7, #24]
 80014d2:	040b      	lsls	r3, r1, #16
 80014d4:	2200      	movs	r2, #0
                      ((uint64_t) tmp[5] << 40U) |
 80014d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014da:	4621      	mov	r1, r4
 80014dc:	4311      	orrs	r1, r2
 80014de:	6139      	str	r1, [r7, #16]
 80014e0:	4629      	mov	r1, r5
 80014e2:	4319      	orrs	r1, r3
 80014e4:	6179      	str	r1, [r7, #20]
                      ((uint64_t) tmp[7] << 56U));
 80014e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	60fa      	str	r2, [r7, #12]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	060b      	lsls	r3, r1, #24
 80014fe:	2200      	movs	r2, #0
    return (uint64_t)(tmp[0] |
 8001500:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001504:	4621      	mov	r1, r4
 8001506:	4311      	orrs	r1, r2
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	4629      	mov	r1, r5
 800150c:	4319      	orrs	r1, r3
 800150e:	6079      	str	r1, [r7, #4]
 8001510:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	3788      	adds	r7, #136	; 0x88
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001520:	0800c148 	.word	0x0800c148
 8001524:	0800d3ec 	.word	0x0800d3ec
 8001528:	0800bf8c 	.word	0x0800bf8c
 800152c:	0800c17c 	.word	0x0800c17c

08001530 <nunavutGetF64>:

static inline double nunavutGetF64(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint64_t in;
        double fl;
    } const tmp = {nunavutGetU64(buf, buf_size_bytes, off_bits, 64U)};
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff08 	bl	8001358 <nunavutGetU64>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return tmp.fl;
 8001550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b08c      	sub	sp, #48	; 0x30
 8001566:	af04      	add	r7, sp, #16
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <uavcan_node_Health_1_0_serialize_+0x20>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <uavcan_node_Health_1_0_serialize_+0x20>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001580:	f06f 0301 	mvn.w	r3, #1
 8001584:	e092      	b.n	80016ac <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	2b07      	cmp	r3, #7
 8001592:	d802      	bhi.n	800159a <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001594:	f06f 0302 	mvn.w	r3, #2
 8001598:	e088      	b.n	80016ac <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <uavcan_node_Health_1_0_serialize_+0x54>
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <uavcan_node_Health_1_0_serialize_+0x158>)
 80015aa:	4a44      	ldr	r2, [pc, #272]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 80015ac:	2185      	movs	r1, #133	; 0x85
 80015ae:	4844      	ldr	r0, [pc, #272]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 80015b0:	f007 fda8 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	469a      	mov	sl, r3
 80015ba:	4693      	mov	fp, r2
 80015bc:	f11a 0402 	adds.w	r4, sl, #2
 80015c0:	f14b 0500 	adc.w	r5, fp, #0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	2200      	movs	r2, #0
 80015ca:	4698      	mov	r8, r3
 80015cc:	4691      	mov	r9, r2
 80015ce:	45a0      	cmp	r8, r4
 80015d0:	eb79 0305 	sbcs.w	r3, r9, r5
 80015d4:	d205      	bcs.n	80015e2 <uavcan_node_Health_1_0_serialize_+0x82>
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <uavcan_node_Health_1_0_serialize_+0x164>)
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 80015da:	2186      	movs	r1, #134	; 0x86
 80015dc:	4838      	ldr	r0, [pc, #224]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 80015de:	f007 fd91 	bl	8009104 <__assert_func>
        uint8_t _sat0_ = obj->value;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80015e8:	7efb      	ldrb	r3, [r7, #27]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d901      	bls.n	80015f2 <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 80015ee:	2303      	movs	r3, #3
 80015f0:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	7efa      	ldrb	r2, [r7, #27]
 80015fc:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3302      	adds	r3, #2
 8001602:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	2b00      	cmp	r3, #0
 800160c:	d035      	beq.n	800167a <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f1c3 0308 	rsb	r3, r3, #8
 800161c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <uavcan_node_Health_1_0_serialize_+0xd0>
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <uavcan_node_Health_1_0_serialize_+0x168>)
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001628:	2192      	movs	r1, #146	; 0x92
 800162a:	4825      	ldr	r0, [pc, #148]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800162c:	f007 fd6a 	bl	8009104 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001630:	7cfb      	ldrb	r3, [r7, #19]
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9cd 2300 	strd	r2, r3, [sp]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	6979      	ldr	r1, [r7, #20]
 8001644:	68b8      	ldr	r0, [r7, #8]
 8001646:	f7ff fdbd 	bl	80011c4 <nunavutSetUxx>
 800164a:	4603      	mov	r3, r0
 800164c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 800164e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001652:	2b00      	cmp	r3, #0
 8001654:	da02      	bge.n	800165c <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 8001656:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800165a:	e027      	b.n	80016ac <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <uavcan_node_Health_1_0_serialize_+0x11a>
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <uavcan_node_Health_1_0_serialize_+0x158>)
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001672:	2199      	movs	r1, #153	; 0x99
 8001674:	4812      	ldr	r0, [pc, #72]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8001676:	f007 fd45 	bl	8009104 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d005      	beq.n	800168c <uavcan_node_Health_1_0_serialize_+0x12c>
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <uavcan_node_Health_1_0_serialize_+0x16c>)
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 8001684:	219c      	movs	r1, #156	; 0x9c
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8001688:	f007 fd3c 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <uavcan_node_Health_1_0_serialize_+0x142>
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <uavcan_node_Health_1_0_serialize_+0x158>)
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <uavcan_node_Health_1_0_serialize_+0x15c>)
 800169a:	219d      	movs	r1, #157	; 0x9d
 800169c:	4808      	ldr	r0, [pc, #32]	; (80016c0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800169e:	f007 fd31 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016b6:	bf00      	nop
 80016b8:	0800c19c 	.word	0x0800c19c
 80016bc:	0800d2cc 	.word	0x0800d2cc
 80016c0:	0800c1b4 	.word	0x0800c1b4
 80016c4:	0800c228 	.word	0x0800c228
 80016c8:	0800c258 	.word	0x0800c258
 80016cc:	0800c264 	.word	0x0800c264

080016d0 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b08c      	sub	sp, #48	; 0x30
 80016d6:	af04      	add	r7, sp, #16
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80016f0:	f06f 0301 	mvn.w	r3, #1
 80016f4:	e092      	b.n	800181c <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	2b07      	cmp	r3, #7
 8001702:	d802      	bhi.n	800170a <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001704:	f06f 0302 	mvn.w	r3, #2
 8001708:	e088      	b.n	800181c <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <uavcan_node_Mode_1_0_serialize_+0x54>
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <uavcan_node_Mode_1_0_serialize_+0x158>)
 800171a:	4a44      	ldr	r2, [pc, #272]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800171c:	2185      	movs	r1, #133	; 0x85
 800171e:	4844      	ldr	r0, [pc, #272]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8001720:	f007 fcf0 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2200      	movs	r2, #0
 8001728:	469a      	mov	sl, r3
 800172a:	4693      	mov	fp, r2
 800172c:	f11a 0403 	adds.w	r4, sl, #3
 8001730:	f14b 0500 	adc.w	r5, fp, #0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	2200      	movs	r2, #0
 800173a:	4698      	mov	r8, r3
 800173c:	4691      	mov	r9, r2
 800173e:	45a0      	cmp	r8, r4
 8001740:	eb79 0305 	sbcs.w	r3, r9, r5
 8001744:	d205      	bcs.n	8001752 <uavcan_node_Mode_1_0_serialize_+0x82>
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <uavcan_node_Mode_1_0_serialize_+0x164>)
 8001748:	4a38      	ldr	r2, [pc, #224]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800174a:	2186      	movs	r1, #134	; 0x86
 800174c:	4838      	ldr	r0, [pc, #224]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800174e:	f007 fcd9 	bl	8009104 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8001758:	7efb      	ldrb	r3, [r7, #27]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d901      	bls.n	8001762 <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 800175e:	2307      	movs	r3, #7
 8001760:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	7efa      	ldrb	r2, [r7, #27]
 800176c:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3303      	adds	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	2b00      	cmp	r3, #0
 800177c:	d035      	beq.n	80017ea <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f1c3 0308 	rsb	r3, r3, #8
 800178c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <uavcan_node_Mode_1_0_serialize_+0xd0>
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8001798:	2192      	movs	r1, #146	; 0x92
 800179a:	4825      	ldr	r0, [pc, #148]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800179c:	f007 fcb2 	bl	8009104 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9cd 2300 	strd	r2, r3, [sp]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	68b8      	ldr	r0, [r7, #8]
 80017b6:	f7ff fd05 	bl	80011c4 <nunavutSetUxx>
 80017ba:	4603      	mov	r3, r0
 80017bc:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80017be:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da02      	bge.n	80017cc <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 80017c6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80017ca:	e027      	b.n	800181c <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <uavcan_node_Mode_1_0_serialize_+0x11a>
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80017e2:	2199      	movs	r1, #153	; 0x99
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80017e6:	f007 fc8d 	bl	8009104 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d005      	beq.n	80017fc <uavcan_node_Mode_1_0_serialize_+0x12c>
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <uavcan_node_Mode_1_0_serialize_+0x16c>)
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80017f4:	219c      	movs	r1, #156	; 0x9c
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80017f8:	f007 fc84 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <uavcan_node_Mode_1_0_serialize_+0x142>
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800180a:	219d      	movs	r1, #157	; 0x9d
 800180c:	4808      	ldr	r0, [pc, #32]	; (8001830 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800180e:	f007 fc79 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	0800c19c 	.word	0x0800c19c
 800182c:	0800d2f0 	.word	0x0800d2f0
 8001830:	0800c278 	.word	0x0800c278
 8001834:	0800c2ec 	.word	0x0800c2ec
 8001838:	0800c258 	.word	0x0800c258
 800183c:	0800c264 	.word	0x0800c264

08001840 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b0a4      	sub	sp, #144	; 0x90
 8001846:	af04      	add	r7, sp, #16
 8001848:	65f8      	str	r0, [r7, #92]	; 0x5c
 800184a:	65b9      	str	r1, [r7, #88]	; 0x58
 800184c:	657a      	str	r2, [r7, #84]	; 0x54
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8001854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 800185a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001860:	f06f 0301 	mvn.w	r3, #1
 8001864:	e273      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	67bb      	str	r3, [r7, #120]	; 0x78
    if ((8U * (size_t) capacity_bytes) < 56UL)
 800186c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	2b37      	cmp	r3, #55	; 0x37
 8001872:	d802      	bhi.n	800187a <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001874:	f06f 0302 	mvn.w	r3, #2
 8001878:	e269      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800187e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8001888:	4ba8      	ldr	r3, [pc, #672]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800188a:	4aa9      	ldr	r2, [pc, #676]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800188c:	218a      	movs	r1, #138	; 0x8a
 800188e:	48a9      	ldr	r0, [pc, #676]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001890:	f007 fc38 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8001894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001896:	2200      	movs	r2, #0
 8001898:	4698      	mov	r8, r3
 800189a:	4691      	mov	r9, r2
 800189c:	f118 0420 	adds.w	r4, r8, #32
 80018a0:	f149 0500 	adc.w	r5, r9, #0
 80018a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	2200      	movs	r2, #0
 80018aa:	469a      	mov	sl, r3
 80018ac:	4693      	mov	fp, r2
 80018ae:	45a2      	cmp	sl, r4
 80018b0:	eb7b 0305 	sbcs.w	r3, fp, r5
 80018b4:	d205      	bcs.n	80018c2 <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 80018b6:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <uavcan_node_Heartbeat_1_0_serialize_+0x2f8>)
 80018b8:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80018ba:	218b      	movs	r1, #139	; 0x8b
 80018bc:	489d      	ldr	r0, [pc, #628]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80018be:	f007 fc21 	bl	8009104 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->uptime, 32U);
 80018c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2200      	movs	r2, #0
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018cc:	2320      	movs	r3, #32
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80018d4:	e9cd 3400 	strd	r3, r4, [sp]
 80018d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80018da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80018de:	f7ff fc71 	bl	80011c4 <nunavutSetUxx>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (_err0_ < 0)
 80018e8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da02      	bge.n	80018f6 <uavcan_node_Heartbeat_1_0_serialize_+0xb6>
        {
            return _err0_;
 80018f0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80018f4:	e22b      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += 32U;
 80018f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f8:	3320      	adds	r3, #32
 80018fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03a      	beq.n	800197c <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f1c3 0308 	rsb	r3, r3, #8
 8001914:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001918:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <uavcan_node_Heartbeat_1_0_serialize_+0xec>
 8001920:	4b86      	ldr	r3, [pc, #536]	; (8001b3c <uavcan_node_Heartbeat_1_0_serialize_+0x2fc>)
 8001922:	4a83      	ldr	r2, [pc, #524]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001924:	2197      	movs	r1, #151	; 0x97
 8001926:	4883      	ldr	r0, [pc, #524]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001928:	f007 fbec 	bl	8009104 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800192c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9cd 2300 	strd	r2, r3, [sp]
 800193e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001940:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001942:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001944:	f7ff fc3e 	bl	80011c4 <nunavutSetUxx>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        if (_err1_ < 0)
 800194e:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8001952:	2b00      	cmp	r3, #0
 8001954:	da02      	bge.n	800195c <uavcan_node_Heartbeat_1_0_serialize_+0x11c>
        {
            return _err1_;
 8001956:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 800195a:	e1f8      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad0_;
 800195c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001962:	4413      	add	r3, r2
 8001964:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001972:	4a6f      	ldr	r2, [pc, #444]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001974:	219e      	movs	r1, #158	; 0x9e
 8001976:	486f      	ldr	r0, [pc, #444]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001978:	f007 fbc4 	bl	8009104 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800197c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <uavcan_node_Heartbeat_1_0_serialize_+0x152>
 8001986:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001988:	4a69      	ldr	r2, [pc, #420]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800198a:	21a1      	movs	r1, #161	; 0xa1
 800198c:	4869      	ldr	r0, [pc, #420]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800198e:	f007 fbb9 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <uavcan_node_Heartbeat_1_0_serialize_+0x168>
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800199e:	4a64      	ldr	r2, [pc, #400]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80019a0:	21a2      	movs	r1, #162	; 0xa2
 80019a2:	4864      	ldr	r0, [pc, #400]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80019a4:	f007 fbae 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 80019a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019aa:	2200      	movs	r2, #0
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
 80019ae:	647a      	str	r2, [r7, #68]	; 0x44
 80019b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80019b4:	460b      	mov	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ba:	4613      	mov	r3, r2
 80019bc:	f143 0300 	adc.w	r3, r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	2200      	movs	r2, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	637a      	str	r2, [r7, #52]	; 0x34
 80019cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d0:	4623      	mov	r3, r4
 80019d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019d6:	4602      	mov	r2, r0
 80019d8:	4293      	cmp	r3, r2
 80019da:	462b      	mov	r3, r5
 80019dc:	460a      	mov	r2, r1
 80019de:	4193      	sbcs	r3, r2
 80019e0:	d205      	bcs.n	80019ee <uavcan_node_Heartbeat_1_0_serialize_+0x1ae>
 80019e2:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <uavcan_node_Heartbeat_1_0_serialize_+0x300>)
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80019e6:	21a3      	movs	r1, #163	; 0xa3
 80019e8:	4852      	ldr	r0, [pc, #328]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80019ea:	f007 fb8b 	bl	8009104 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 80019ee:	2301      	movs	r3, #1
 80019f0:	66bb      	str	r3, [r7, #104]	; 0x68
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80019f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <uavcan_node_Heartbeat_1_0_serialize_+0x1c8>
 80019fc:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001a00:	21a5      	movs	r1, #165	; 0xa5
 8001a02:	484c      	ldr	r0, [pc, #304]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001a04:	f007 fb7e 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8001a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0e:	4413      	add	r3, r2
 8001a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d205      	bcs.n	8001a22 <uavcan_node_Heartbeat_1_0_serialize_+0x1e2>
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <uavcan_node_Heartbeat_1_0_serialize_+0x304>)
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001a1a:	21a6      	movs	r1, #166	; 0xa6
 8001a1c:	4845      	ldr	r0, [pc, #276]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001a1e:	f007 fb71 	bl	8009104 <__assert_func>
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 8001a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a24:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8001a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a2c:	1899      	adds	r1, r3, r2
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 8001a2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a32:	461a      	mov	r2, r3
 8001a34:	f7ff fd94 	bl	8001560 <uavcan_node_Health_1_0_serialize_>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        if (_err2_ < 0)
 8001a3e:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da02      	bge.n	8001a4c <uavcan_node_Heartbeat_1_0_serialize_+0x20c>
        {
            return _err2_;
 8001a46:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8001a4a:	e180      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 8001a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d005      	beq.n	8001a60 <uavcan_node_Heartbeat_1_0_serialize_+0x220>
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <uavcan_node_Heartbeat_1_0_serialize_+0x308>)
 8001a56:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001a58:	21ae      	movs	r1, #174	; 0xae
 8001a5a:	4836      	ldr	r0, [pc, #216]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001a5c:	f007 fb52 	bl	8009104 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8001a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a66:	4413      	add	r3, r2
 8001a68:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8001a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d905      	bls.n	8001a80 <uavcan_node_Heartbeat_1_0_serialize_+0x240>
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8001a76:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001a78:	21b0      	movs	r1, #176	; 0xb0
 8001a7a:	482e      	ldr	r0, [pc, #184]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001a7c:	f007 fb42 	bl	8009104 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03a      	beq.n	8001b00 <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8001a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f1c3 0308 	rsb	r3, r3, #8
 8001a98:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        NUNAVUT_ASSERT(_pad1_ > 0);
 8001a9c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x270>
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001aa8:	21b5      	movs	r1, #181	; 0xb5
 8001aaa:	4822      	ldr	r0, [pc, #136]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001aac:	f007 fb2a 	bl	8009104 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8001ab0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ac4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ac6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ac8:	f7ff fb7c 	bl	80011c4 <nunavutSetUxx>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if (_err3_ < 0)
 8001ad2:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da02      	bge.n	8001ae0 <uavcan_node_Heartbeat_1_0_serialize_+0x2a0>
        {
            return _err3_;
 8001ada:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8001ade:	e136      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad1_;
 8001ae0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001ae4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ae6:	4413      	add	r3, r2
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001af8:	21bc      	movs	r1, #188	; 0xbc
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001afc:	f007 fb02 	bl	8009104 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <uavcan_node_Heartbeat_1_0_serialize_+0x2d6>
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001b0e:	21bf      	movs	r1, #191	; 0xbf
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001b12:	f007 faf7 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d019      	beq.n	8001b54 <uavcan_node_Heartbeat_1_0_serialize_+0x314>
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8001b22:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8001b24:	21c0      	movs	r1, #192	; 0xc0
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8001b28:	f007 faec 	bl	8009104 <__assert_func>
 8001b2c:	0800c19c 	.word	0x0800c19c
 8001b30:	0800d2a4 	.word	0x0800d2a4
 8001b34:	0800c31c 	.word	0x0800c31c
 8001b38:	0800c394 	.word	0x0800c394
 8001b3c:	0800c258 	.word	0x0800c258
 8001b40:	0800c3c4 	.word	0x0800c3c4
 8001b44:	0800c3f4 	.word	0x0800c3f4
 8001b48:	0800c42c 	.word	0x0800c42c
 8001b4c:	0800c44c 	.word	0x0800c44c
 8001b50:	0800c474 	.word	0x0800c474
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b56:	2200      	movs	r2, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001b60:	460b      	mov	r3, r1
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
 8001b66:	4613      	mov	r3, r2
 8001b68:	f143 0300 	adc.w	r3, r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	2200      	movs	r2, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	61fa      	str	r2, [r7, #28]
 8001b78:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b82:	4602      	mov	r2, r0
 8001b84:	4293      	cmp	r3, r2
 8001b86:	462b      	mov	r3, r5
 8001b88:	460a      	mov	r2, r1
 8001b8a:	4193      	sbcs	r3, r2
 8001b8c:	d205      	bcs.n	8001b9a <uavcan_node_Heartbeat_1_0_serialize_+0x35a>
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8001b90:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001b92:	21c1      	movs	r1, #193	; 0xc1
 8001b94:	4872      	ldr	r0, [pc, #456]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001b96:	f007 fab5 	bl	8009104 <__assert_func>
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	667b      	str	r3, [r7, #100]	; 0x64
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <uavcan_node_Heartbeat_1_0_serialize_+0x374>
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8001baa:	4a6c      	ldr	r2, [pc, #432]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001bac:	21c3      	movs	r1, #195	; 0xc3
 8001bae:	486c      	ldr	r0, [pc, #432]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001bb0:	f007 faa8 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8001bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bba:	4413      	add	r3, r2
 8001bbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d205      	bcs.n	8001bce <uavcan_node_Heartbeat_1_0_serialize_+0x38e>
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <uavcan_node_Heartbeat_1_0_serialize_+0x528>)
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001bc6:	21c4      	movs	r1, #196	; 0xc4
 8001bc8:	4865      	ldr	r0, [pc, #404]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001bca:	f007 fa9b 	bl	8009104 <__assert_func>
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8001bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd0:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bd8:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8001bda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff fd76 	bl	80016d0 <uavcan_node_Mode_1_0_serialize_>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        if (_err4_ < 0)
 8001bea:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da02      	bge.n	8001bf8 <uavcan_node_Heartbeat_1_0_serialize_+0x3b8>
        {
            return _err4_;
 8001bf2:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8001bf6:	e0aa      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8001bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d005      	beq.n	8001c0c <uavcan_node_Heartbeat_1_0_serialize_+0x3cc>
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <uavcan_node_Heartbeat_1_0_serialize_+0x52c>)
 8001c02:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001c04:	21cc      	movs	r1, #204	; 0xcc
 8001c06:	4856      	ldr	r0, [pc, #344]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001c08:	f007 fa7c 	bl	8009104 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8001c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c12:	4413      	add	r3, r2
 8001c14:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8001c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d905      	bls.n	8001c2c <uavcan_node_Heartbeat_1_0_serialize_+0x3ec>
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <uavcan_node_Heartbeat_1_0_serialize_+0x530>)
 8001c22:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001c24:	21ce      	movs	r1, #206	; 0xce
 8001c26:	484e      	ldr	r0, [pc, #312]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001c28:	f007 fa6c 	bl	8009104 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <uavcan_node_Heartbeat_1_0_serialize_+0x402>
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001c3a:	21d1      	movs	r1, #209	; 0xd1
 8001c3c:	4848      	ldr	r0, [pc, #288]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001c3e:	f007 fa61 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c44:	2200      	movs	r2, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	617a      	str	r2, [r7, #20]
 8001c4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	3308      	adds	r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	4613      	mov	r3, r2
 8001c56:	f143 0300 	adc.w	r3, r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	2200      	movs	r2, #0
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c70:	4602      	mov	r2, r0
 8001c72:	4293      	cmp	r3, r2
 8001c74:	462b      	mov	r3, r5
 8001c76:	460a      	mov	r2, r1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	d205      	bcs.n	8001c88 <uavcan_node_Heartbeat_1_0_serialize_+0x448>
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8001c7e:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001c80:	21d2      	movs	r1, #210	; 0xd2
 8001c82:	4837      	ldr	r0, [pc, #220]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001c84:	f007 fa3e 	bl	8009104 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8001c88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c8e:	4413      	add	r3, r2
 8001c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c92:	7992      	ldrb	r2, [r2, #6]
 8001c94:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c98:	3308      	adds	r3, #8
 8001c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03a      	beq.n	8001d1c <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8001ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f1c3 0308 	rsb	r3, r3, #8
 8001cb4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(_pad2_ > 0);
 8001cb8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <uavcan_node_Heartbeat_1_0_serialize_+0x48c>
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <uavcan_node_Heartbeat_1_0_serialize_+0x534>)
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001cc4:	21da      	movs	r1, #218	; 0xda
 8001cc6:	4826      	ldr	r0, [pc, #152]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001cc8:	f007 fa1c 	bl	8009104 <__assert_func>
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8001ccc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9cd 2300 	strd	r2, r3, [sp]
 8001cde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ce0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ce2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ce4:	f7ff fa6e 	bl	80011c4 <nunavutSetUxx>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if (_err5_ < 0)
 8001cee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da02      	bge.n	8001cfc <uavcan_node_Heartbeat_1_0_serialize_+0x4bc>
        {
            return _err5_;
 8001cf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001cfa:	e028      	b.n	8001d4e <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad2_;
 8001cfc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001d00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d02:	4413      	add	r3, r2
 8001d04:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001d14:	21e1      	movs	r1, #225	; 0xe1
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001d18:	f007 f9f4 	bl	8009104 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8001d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d1e:	2b38      	cmp	r3, #56	; 0x38
 8001d20:	d005      	beq.n	8001d2e <uavcan_node_Heartbeat_1_0_serialize_+0x4ee>
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <uavcan_node_Heartbeat_1_0_serialize_+0x538>)
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001d26:	21e4      	movs	r1, #228	; 0xe4
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001d2a:	f007 f9eb 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <uavcan_node_Heartbeat_1_0_serialize_+0x504>
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8001d3c:	21e5      	movs	r1, #229	; 0xe5
 8001d3e:	4808      	ldr	r0, [pc, #32]	; (8001d60 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8001d40:	f007 f9e0 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3780      	adds	r7, #128	; 0x80
 8001d52:	46bd      	mov	sp, r7
 8001d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d58:	0800c3c4 	.word	0x0800c3c4
 8001d5c:	0800d2a4 	.word	0x0800d2a4
 8001d60:	0800c31c 	.word	0x0800c31c
 8001d64:	0800c19c 	.word	0x0800c19c
 8001d68:	0800c480 	.word	0x0800c480
 8001d6c:	0800c4b8 	.word	0x0800c4b8
 8001d70:	0800c44c 	.word	0x0800c44c
 8001d74:	0800c4d8 	.word	0x0800c4d8
 8001d78:	0800c4e4 	.word	0x0800c4e4

08001d7c <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001da2:	f06f 0301 	mvn.w	r3, #1
 8001da6:	e08b      	b.n	8001ec0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x14c>)
 8001db0:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8001dce:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8001dd0:	21ce      	movs	r1, #206	; 0xce
 8001dd2:	4840      	ldr	r0, [pc, #256]	; (8001ed4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8001dd4:	f007 f996 	bl	8009104 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	3308      	adds	r3, #8
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d309      	bcc.n	8001df6 <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001df4:	e003      	b.n	8001dfe <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3308      	adds	r3, #8
 8001e02:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d902      	bls.n	8001e14 <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001e0e:	f06f 0309 	mvn.w	r3, #9
 8001e12:	e055      	b.n	8001ec0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8001e20:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8001e22:	21dd      	movs	r1, #221	; 0xdd
 8001e24:	482b      	ldr	r0, [pc, #172]	; (8001ed4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8001e26:	f007 f96d 	bl	8009104 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	e01d      	b.n	8001e6c <uavcan_primitive_array_Real64_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <uavcan_primitive_array_Real64_1_0_deserialize_+0xca>
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8001e3e:	21e0      	movs	r1, #224	; 0xe0
 8001e40:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8001e42:	f007 f95f 	bl	8009104 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF64(&buffer[0], capacity_bytes, offset_bits);
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f7ff fb70 	bl	8001530 <nunavutGetF64>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	00c9      	lsls	r1, r1, #3
 8001e5a:	4401      	add	r1, r0
 8001e5c:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3340      	adds	r3, #64	; 0x40
 8001e64:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3db      	bcc.n	8001e30 <uavcan_primitive_array_Real64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	f023 0307 	bic.w	r3, r3, #7
 8001e80:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11c>
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8001e90:	21e5      	movs	r1, #229	; 0xe5
 8001e92:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8001e94:	f007 f936 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	69f8      	ldr	r0, [r7, #28]
 8001e9c:	f7ff f822 	bl	8000ee4 <nunavutChooseMin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d205      	bcs.n	8001ebe <uavcan_primitive_array_Real64_1_0_deserialize_+0x142>
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x15c>)
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8001eb6:	21e7      	movs	r1, #231	; 0xe7
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8001eba:	f007 f923 	bl	8009104 <__assert_func>
    return NUNAVUT_SUCCESS;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0800c4fc 	.word	0x0800c4fc
 8001ecc:	0800c19c 	.word	0x0800c19c
 8001ed0:	0800d3bc 	.word	0x0800d3bc
 8001ed4:	0800c500 	.word	0x0800c500
 8001ed8:	0800c580 	.word	0x0800c580

08001edc <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b094      	sub	sp, #80	; 0x50
 8001ee2:	af04      	add	r7, sp, #16
 8001ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ee8:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <uavcan_primitive_String_1_0_serialize_+0x20>
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <uavcan_primitive_String_1_0_serialize_+0x20>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <uavcan_primitive_String_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001efc:	f06f 0301 	mvn.w	r3, #1
 8001f00:	e108      	b.n	8002114 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8001f10:	d202      	bcs.n	8001f18 <uavcan_primitive_String_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001f12:	f06f 0302 	mvn.w	r3, #2
 8001f16:	e0fd      	b.n	8002114 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <uavcan_primitive_String_1_0_serialize_+0x56>
 8001f26:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8001f28:	4a7e      	ldr	r2, [pc, #504]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8001f2a:	2181      	movs	r1, #129	; 0x81
 8001f2c:	487e      	ldr	r0, [pc, #504]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8001f2e:	f007 f8e9 	bl	8009104 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8001f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f34:	2200      	movs	r2, #0
 8001f36:	469a      	mov	sl, r3
 8001f38:	4693      	mov	fp, r2
 8001f3a:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 8001f3e:	f14b 0900 	adc.w	r9, fp, #0
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	2200      	movs	r2, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	61fa      	str	r2, [r7, #28]
 8001f4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f50:	460b      	mov	r3, r1
 8001f52:	4543      	cmp	r3, r8
 8001f54:	4613      	mov	r3, r2
 8001f56:	eb73 0309 	sbcs.w	r3, r3, r9
 8001f5a:	d205      	bcs.n	8001f68 <uavcan_primitive_String_1_0_serialize_+0x8c>
 8001f5c:	4b73      	ldr	r3, [pc, #460]	; (800212c <uavcan_primitive_String_1_0_serialize_+0x250>)
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8001f60:	2182      	movs	r1, #130	; 0x82
 8001f62:	4871      	ldr	r0, [pc, #452]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8001f64:	f007 f8ce 	bl	8009104 <__assert_func>
        if (obj->value.count > 256)
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d902      	bls.n	8001f7a <uavcan_primitive_String_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001f74:	f06f 0309 	mvn.w	r3, #9
 8001f78:	e0cc      	b.n	8002114 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f80:	2200      	movs	r2, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	617a      	str	r2, [r7, #20]
 8001f86:	2310      	movs	r3, #16
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8001f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f98:	f7ff f914 	bl	80011c4 <nunavutSetUxx>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 8001fa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da02      	bge.n	8001fb0 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8001faa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001fae:	e0b1      	b.n	8002114 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb2:	3310      	adds	r3, #16
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <uavcan_primitive_String_1_0_serialize_+0xf0>
 8001fc0:	4b57      	ldr	r3, [pc, #348]	; (8002120 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8001fc2:	4a58      	ldr	r2, [pc, #352]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8001fc4:	218e      	movs	r1, #142	; 0x8e
 8001fc6:	4858      	ldr	r0, [pc, #352]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8001fc8:	f007 f89c 	bl	8009104 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fd0:	e037      	b.n	8002042 <uavcan_primitive_String_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <uavcan_primitive_String_1_0_serialize_+0x10c>
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8001fde:	4a51      	ldr	r2, [pc, #324]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8001fe0:	2191      	movs	r1, #145	; 0x91
 8001fe2:	4851      	ldr	r0, [pc, #324]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8001fe4:	f007 f88e 	bl	8009104 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fea:	2200      	movs	r2, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	60fa      	str	r2, [r7, #12]
 8001ff0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f113 0408 	adds.w	r4, r3, #8
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	f143 0500 	adc.w	r5, r3, #0
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	2200      	movs	r2, #0
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800200e:	460b      	mov	r3, r1
 8002010:	42a3      	cmp	r3, r4
 8002012:	4613      	mov	r3, r2
 8002014:	41ab      	sbcs	r3, r5
 8002016:	d205      	bcs.n	8002024 <uavcan_primitive_String_1_0_serialize_+0x148>
 8002018:	4b45      	ldr	r3, [pc, #276]	; (8002130 <uavcan_primitive_String_1_0_serialize_+0x254>)
 800201a:	4a42      	ldr	r2, [pc, #264]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 800201c:	2192      	movs	r1, #146	; 0x92
 800201e:	4842      	ldr	r0, [pc, #264]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8002020:	f007 f870 	bl	8009104 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8002024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202a:	4413      	add	r3, r2
 800202c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800202e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002030:	440a      	add	r2, r1
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 8002036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002038:	3308      	adds	r3, #8
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	3301      	adds	r3, #1
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800204a:	429a      	cmp	r2, r3
 800204c:	d3c1      	bcc.n	8001fd2 <uavcan_primitive_String_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03a      	beq.n	80020ce <uavcan_primitive_String_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f1c3 0308 	rsb	r3, r3, #8
 8002066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 800206a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <uavcan_primitive_String_1_0_serialize_+0x1a2>
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <uavcan_primitive_String_1_0_serialize_+0x258>)
 8002074:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8002076:	219b      	movs	r1, #155	; 0x9b
 8002078:	482b      	ldr	r0, [pc, #172]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800207a:	f007 f843 	bl	8009104 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800207e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9cd 2300 	strd	r2, r3, [sp]
 8002090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002092:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002096:	f7ff f895 	bl	80011c4 <nunavutSetUxx>
 800209a:	4603      	mov	r3, r0
 800209c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 80020a0:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da02      	bge.n	80020ae <uavcan_primitive_String_1_0_serialize_+0x1d2>
        {
            return _err1_;
 80020a8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80020ac:	e032      	b.n	8002114 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 80020ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b4:	4413      	add	r3, r2
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80020b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <uavcan_primitive_String_1_0_serialize_+0x1f2>
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <uavcan_primitive_String_1_0_serialize_+0x244>)
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80020c6:	21a2      	movs	r1, #162	; 0xa2
 80020c8:	4817      	ldr	r0, [pc, #92]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80020ca:	f007 f81b 	bl	8009104 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d805      	bhi.n	80020e0 <uavcan_primitive_String_1_0_serialize_+0x204>
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <uavcan_primitive_String_1_0_serialize_+0x25c>)
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80020d8:	21a5      	movs	r1, #165	; 0xa5
 80020da:	4813      	ldr	r0, [pc, #76]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80020dc:	f007 f812 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80020e6:	d905      	bls.n	80020f4 <uavcan_primitive_String_1_0_serialize_+0x218>
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <uavcan_primitive_String_1_0_serialize_+0x260>)
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80020ec:	21a6      	movs	r1, #166	; 0xa6
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80020f0:	f007 f808 	bl	8009104 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <uavcan_primitive_String_1_0_serialize_+0x22e>
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8002102:	21a7      	movs	r1, #167	; 0xa7
 8002104:	4808      	ldr	r0, [pc, #32]	; (8002128 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8002106:	f006 fffd 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3740      	adds	r7, #64	; 0x40
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	0800c19c 	.word	0x0800c19c
 8002124:	0800d394 	.word	0x0800d394
 8002128:	0800c5ac 	.word	0x0800c5ac
 800212c:	0800c628 	.word	0x0800c628
 8002130:	0800c3c4 	.word	0x0800c3c4
 8002134:	0800c258 	.word	0x0800c258
 8002138:	0800c65c 	.word	0x0800c65c
 800213c:	0800c674 	.word	0x0800c674

08002140 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <uavcan_primitive_String_1_0_deserialize_+0x2c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002166:	f06f 0301 	mvn.w	r3, #1
 800216a:	e08c      	b.n	8002286 <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <uavcan_primitive_String_1_0_deserialize_+0x150>)
 8002174:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <uavcan_primitive_String_1_0_deserialize_+0x5c>
 8002190:	4b40      	ldr	r3, [pc, #256]	; (8002294 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8002192:	4a41      	ldr	r2, [pc, #260]	; (8002298 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8002194:	21ce      	movs	r1, #206	; 0xce
 8002196:	4841      	ldr	r0, [pc, #260]	; (800229c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8002198:	f006 ffb4 	bl	8009104 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800219c:	2310      	movs	r3, #16
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	68b8      	ldr	r0, [r7, #8]
 80021a4:	f7ff f892 	bl	80012cc <nunavutGetU16>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3310      	adds	r3, #16
 80021b6:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80021be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c2:	d902      	bls.n	80021ca <uavcan_primitive_String_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80021c4:	f06f 0309 	mvn.w	r3, #9
 80021c8:	e05d      	b.n	8002286 <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <uavcan_primitive_String_1_0_deserialize_+0xa0>
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 80021d6:	4a30      	ldr	r2, [pc, #192]	; (8002298 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80021d8:	21d6      	movs	r1, #214	; 0xd6
 80021da:	4830      	ldr	r0, [pc, #192]	; (800229c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80021dc:	f006 ff92 	bl	8009104 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e025      	b.n	8002232 <uavcan_primitive_String_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <uavcan_primitive_String_1_0_deserialize_+0xbc>
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 80021f2:	4a29      	ldr	r2, [pc, #164]	; (8002298 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80021f4:	21d9      	movs	r1, #217	; 0xd9
 80021f6:	4829      	ldr	r0, [pc, #164]	; (800229c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80021f8:	f006 ff84 	bl	8009104 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	3308      	adds	r3, #8
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	429a      	cmp	r2, r3
 8002204:	d30a      	bcc.n	800221c <uavcan_primitive_String_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	7819      	ldrb	r1, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	460a      	mov	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e004      	b.n	8002226 <uavcan_primitive_String_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4413      	add	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3308      	adds	r3, #8
 800222a:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	3301      	adds	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3d3      	bcc.n	80021e6 <uavcan_primitive_String_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3307      	adds	r3, #7
 8002242:	f023 0307 	bic.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <uavcan_primitive_String_1_0_deserialize_+0x11e>
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8002256:	21e5      	movs	r1, #229	; 0xe5
 8002258:	4810      	ldr	r0, [pc, #64]	; (800229c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 800225a:	f006 ff53 	bl	8009104 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	69f8      	ldr	r0, [r7, #28]
 8002262:	f7fe fe3f 	bl	8000ee4 <nunavutChooseMin>
 8002266:	4603      	mov	r3, r0
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d205      	bcs.n	8002284 <uavcan_primitive_String_1_0_deserialize_+0x144>
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <uavcan_primitive_String_1_0_deserialize_+0x160>)
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 800227c:	21e7      	movs	r1, #231	; 0xe7
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8002280:	f006 ff40 	bl	8009104 <__assert_func>
    return NUNAVUT_SUCCESS;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	0800c4fc 	.word	0x0800c4fc
 8002294:	0800c19c 	.word	0x0800c19c
 8002298:	0800d358 	.word	0x0800d358
 800229c:	0800c5ac 	.word	0x0800c5ac
 80022a0:	0800c580 	.word	0x0800c580

080022a4 <uavcan_primitive_String_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_primitive_String_1_0_initialize_(uavcan_primitive_String_1_0* const out_obj)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d017      	beq.n	80022e2 <uavcan_primitive_String_1_0_initialize_+0x3e>
    {
        size_t size_bytes = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_primitive_String_1_0_deserialize_(out_obj, &buf, &size_bytes);
 80022ba:	f107 0210 	add.w	r2, r7, #16
 80022be:	f107 030f 	add.w	r3, r7, #15
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff3b 	bl	8002140 <uavcan_primitive_String_1_0_deserialize_>
 80022ca:	4603      	mov	r3, r0
 80022cc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80022ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da05      	bge.n	80022e2 <uavcan_primitive_String_1_0_initialize_+0x3e>
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <uavcan_primitive_String_1_0_initialize_+0x48>)
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <uavcan_primitive_String_1_0_initialize_+0x4c>)
 80022da:	21f6      	movs	r1, #246	; 0xf6
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <uavcan_primitive_String_1_0_initialize_+0x50>)
 80022de:	f006 ff11 	bl	8009104 <__assert_func>
        (void) err;
    }
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0800c68c 	.word	0x0800c68c
 80022f0:	0800d330 	.word	0x0800d330
 80022f4:	0800c5ac 	.word	0x0800c5ac

080022f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80022fe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002300:	f003 fe86 	bl	8006010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002304:	f000 fe3e 	bl	8002f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //ssd1306_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002308:	f000 fdce 	bl	8002ea8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800230c:	f000 fda2 	bl	8002e54 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002310:	f000 fea4 	bl	800305c <MX_CAN1_Init>
  MX_I2C1_Init();
 8002314:	f000 fd70 	bl	8002df8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8002318:	f003 fc84 	bl	8005c24 <ssd1306_Init>
  CAN_Filter_Config();
 800231c:	f000 fed4 	bl	80030c8 <CAN_Filter_Config>
  /* USER CODE END 2 */

  if(HAL_CAN_Start(&hcan1) != HAL_OK) //Starts CAN1
 8002320:	4848      	ldr	r0, [pc, #288]	; (8002444 <main+0x14c>)
 8002322:	f004 f8e7 	bl	80064f4 <HAL_CAN_Start>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <main+0x38>
      {
          Error_Handler();
 800232c:	f000 fef2 	bl	8003114 <Error_Handler>
      }

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable CAN1 interrupt call backs for the respective interrupt notifications flags
 8002330:	2102      	movs	r1, #2
 8002332:	4844      	ldr	r0, [pc, #272]	; (8002444 <main+0x14c>)
 8002334:	f004 fb14 	bl	8006960 <HAL_CAN_ActivateNotification>



// Very first step: Initialization of canard instance and memory for queue
   canard = canardInit(&memAllocate, &memFree);
 8002338:	4c43      	ldr	r4, [pc, #268]	; (8002448 <main+0x150>)
 800233a:	463b      	mov	r3, r7
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <main+0x154>)
 800233e:	4944      	ldr	r1, [pc, #272]	; (8002450 <main+0x158>)
 8002340:	4618      	mov	r0, r3
 8002342:	f003 f99f 	bl	8005684 <canardInit>
 8002346:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800234a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   canard.node_id = 17;
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <main+0x150>)
 800235e:	2211      	movs	r2, #17
 8002360:	711a      	strb	r2, [r3, #4]

   txqueue = canardTxInit( 100,                 		  // Limit the size of the queue at 100 frames.
 8002362:	4c3c      	ldr	r4, [pc, #240]	; (8002454 <main+0x15c>)
 8002364:	463b      	mov	r3, r7
 8002366:	2208      	movs	r2, #8
 8002368:	2164      	movs	r1, #100	; 0x64
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f9c8 	bl	8005700 <canardTxInit>
 8002370:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002374:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8002378:	461d      	mov	r5, r3
 800237a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	6023      	str	r3, [r4, #0]
//because it doesn’t know that we are interested in them .

//To tell which type of message it should subscribe
   CanardRxSubscription subscription; // Transfer subscription state. Structure that will hold the subscription state for one subject.

     if( canardRxSubscribe((CanardInstance *const)&canard,
 8002382:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002386:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	4a32      	ldr	r2, [pc, #200]	; (8002458 <main+0x160>)
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9cd 2300 	strd	r2, r3, [sp]
 8002396:	f240 1301 	movw	r3, #257	; 0x101
 800239a:	460a      	mov	r2, r1
 800239c:	2100      	movs	r1, #0
 800239e:	482a      	ldr	r0, [pc, #168]	; (8002448 <main+0x150>)
 80023a0:	f003 fb1c 	bl	80059dc <canardRxSubscribe>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <main+0xb6>
                           REAL_MSG_PORT_ID,
                           uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                           CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                           &subscription) != 1 )
                           {
                             Error_Handler();
 80023aa:	f000 feb3 	bl	8003114 <Error_Handler>


     //Subscription for string from other node
          CanardRxSubscription sub_string;

          if( canardRxSubscribe((CanardInstance *const)&canard,
 80023ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <main+0x160>)
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9cd 2300 	strd	r2, r3, [sp]
 80023c2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80023c6:	460a      	mov	r2, r1
 80023c8:	2100      	movs	r1, #0
 80023ca:	481f      	ldr	r0, [pc, #124]	; (8002448 <main+0x150>)
 80023cc:	f003 fb06 	bl	80059dc <canardRxSubscribe>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <main+0xe2>
									STRING_MSG_PORT_ID,
     							   uavcan_primitive_String_1_0_EXTENT_BYTES_,
                                    CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                                    &sub_string) != 1 )
                                    {
                                      Error_Handler();
 80023d6:	f000 fe9d 	bl	8003114 <Error_Handler>
                                    }



     uint32_t last_heartbeat_ms = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
     uint32_t last_string_ms    = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 1) Publish heartbeat every 1 second
	          if (HAL_GetTick() - last_heartbeat_ms >= 1000)
 80023e6:	f003 fe79 	bl	80060dc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f6:	d30a      	bcc.n	800240e <main+0x116>
	          {
	        	  last_heartbeat_ms = HAL_GetTick();
 80023f8:	f003 fe70 	bl	80060dc <HAL_GetTick>
 80023fc:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	              publishHeartbeat();
 8002400:	f000 f832 	bl	8002468 <publishHeartbeat>
	              uptime_s++; // increment for next heartbeat
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <main+0x164>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <main+0x164>)
 800240c:	6013      	str	r3, [r2, #0]
	          }

	          // 2) If you want to publish a string every 2 seconds
	          if (HAL_GetTick() - last_string_ms >= 1000)
 800240e:	f003 fe65 	bl	80060dc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800241e:	d30b      	bcc.n	8002438 <main+0x140>
	          {
	              last_string_ms = HAL_GetTick();
 8002420:	f003 fe5c 	bl	80060dc <HAL_GetTick>
 8002424:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
	              publishStringMessage("Hello from STM32!");
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <main+0x168>)
 800242a:	f000 f86b 	bl	8002504 <publishStringMessage>
	              HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2120      	movs	r1, #32
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <main+0x16c>)
 8002434:	f004 ff90 	bl	8007358 <HAL_GPIO_WritePin>
	          }

	          // 3) Process TX queue
	          canard_TX_queue_process_func();
 8002438:	f000 f900 	bl	800263c <canard_TX_queue_process_func>

	          // 4) Wait a bit
	          HAL_Delay(10);
 800243c:	200a      	movs	r0, #10
 800243e:	f003 fe59 	bl	80060f4 <HAL_Delay>
	          if (HAL_GetTick() - last_heartbeat_ms >= 1000)
 8002442:	e7d0      	b.n	80023e6 <main+0xee>
 8002444:	200001fc 	.word	0x200001fc
 8002448:	200002c0 	.word	0x200002c0
 800244c:	08002dd3 	.word	0x08002dd3
 8002450:	08002db9 	.word	0x08002db9
 8002454:	200002dc 	.word	0x200002dc
 8002458:	001e8480 	.word	0x001e8480
 800245c:	200002f4 	.word	0x200002f4
 8002460:	0800c698 	.word	0x0800c698
 8002464:	40020000 	.word	0x40020000

08002468 <publishHeartbeat>:


	      }
	      /* USER CODE END 3 */

 void publishHeartbeat(void){
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af04      	add	r7, sp, #16

	  //For hbeat message transmission

	  	  // 1. Create a heartbeat message
	  	  uavcan_node_Heartbeat_1_0 hbeat_message = { .uptime = uptime_s,
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <publishHeartbeat+0x84>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]
	  	  											  .health = {uavcan_node_Health_1_0_NOMINAL},
	  	  											  .mode   = {uavcan_node_Mode_1_0_OPERATIONAL}
	  	      };

	  	  // 2. Serialize the heartbeat
	  	      if (uavcan_node_Heartbeat_1_0_serialize_(&hbeat_message, hbeat_buf, &hbeat_buf_size) < 0)
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <publishHeartbeat+0x88>)
 8002484:	491b      	ldr	r1, [pc, #108]	; (80024f4 <publishHeartbeat+0x8c>)
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f9da 	bl	8001840 <uavcan_node_Heartbeat_1_0_serialize_>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	da01      	bge.n	8002496 <publishHeartbeat+0x2e>
	  	      {
	  	        Error_Handler();
 8002492:	f000 fe3f 	bl	8003114 <Error_Handler>
	  	      }

	  	  // 3. Create metadata describing this message transfer
	  	      const CanardTransferMetadata transfer_metadata = {  .priority       = CanardPriorityNominal,
 8002496:	2304      	movs	r3, #4
 8002498:	703b      	strb	r3, [r7, #0]
 800249a:	2300      	movs	r3, #0
 800249c:	707b      	strb	r3, [r7, #1]
 800249e:	f641 5355 	movw	r3, #7509	; 0x1d55
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	23ff      	movs	r3, #255	; 0xff
 80024a6:	713b      	strb	r3, [r7, #4]
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <publishHeartbeat+0x90>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	717b      	strb	r3, [r7, #5]
	  															  .remote_node_id = CANARD_NODE_ID_UNSET,
	  															  .transfer_id    = hbeat_message_transfer_id,
	  	      };

	  	  // 4. Enqueue the message transfer into the TX queue
	  	        if (canardTxPush(&txqueue,
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <publishHeartbeat+0x88>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <publishHeartbeat+0x8c>)
 80024b4:	9202      	str	r2, [sp, #8]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	463b      	mov	r3, r7
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	490d      	ldr	r1, [pc, #52]	; (80024fc <publishHeartbeat+0x94>)
 80024c6:	480e      	ldr	r0, [pc, #56]	; (8002500 <publishHeartbeat+0x98>)
 80024c8:	f003 f938 	bl	800573c <canardTxPush>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da01      	bge.n	80024d6 <publishHeartbeat+0x6e>
	  	                         0,                  // No specific deadline
	  	                         &transfer_metadata,
	  	                         hbeat_buf_size,
	  	                         hbeat_buf) < 0)
	  	        {
	  	          Error_Handler();
 80024d2:	f000 fe1f 	bl	8003114 <Error_Handler>
	  	        }

		        hbeat_message_transfer_id ++;        // transfer increments for hbeat message
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <publishHeartbeat+0x90>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <publishHeartbeat+0x90>)
 80024e0:	701a      	strb	r2, [r3, #0]



  }
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200002f4 	.word	0x200002f4
 80024f0:	20000000 	.word	0x20000000
 80024f4:	200002fc 	.word	0x200002fc
 80024f8:	200002f0 	.word	0x200002f0
 80024fc:	200002c0 	.word	0x200002c0
 8002500:	200002dc 	.word	0x200002dc

08002504 <publishStringMessage>:
  // Implementation of publishStringMessage
  void publishStringMessage(const char* text)
  {
 8002504:	b580      	push	{r7, lr}
 8002506:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800250a:	af04      	add	r7, sp, #16
 800250c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002510:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002514:	6018      	str	r0, [r3, #0]
     uavcan_primitive_String_1_0 msg;
     uavcan_primitive_String_1_0_initialize_(&msg);
 8002516:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fec2 	bl	80022a4 <uavcan_primitive_String_1_0_initialize_>

     size_t length = strlen(text);
 8002520:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002524:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	f7fd fec1 	bl	80002b0 <strlen>
 800252e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
     if (length > uavcan_primitive_String_1_0_value_ARRAY_CAPACITY_)
 8002532:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253a:	d903      	bls.n	8002544 <publishStringMessage+0x40>
     {
         length = uavcan_primitive_String_1_0_value_ARRAY_CAPACITY_;
 800253c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002540:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
     }
     memcpy(msg.value.elements, text, length);
 8002544:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002548:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800254c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002550:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	f007 fe2e 	bl	800a1b6 <memcpy>
     msg.value.count = length;
 800255a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800255e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002562:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002566:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

     uint8_t ser_buf[uavcan_primitive_String_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_] = {0};
 800256a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800256e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	3304      	adds	r3, #4
 8002578:	22fe      	movs	r2, #254	; 0xfe
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 fd69 	bl	800a054 <memset>
     size_t  ser_size = sizeof(ser_buf);
 8002582:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002586:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800258a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800258e:	601a      	str	r2, [r3, #0]

     if (uavcan_primitive_String_1_0_serialize_(&msg, ser_buf, &ser_size) < 0)
 8002590:	f107 0210 	add.w	r2, r7, #16
 8002594:	f107 0114 	add.w	r1, r7, #20
 8002598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc9d 	bl	8001edc <uavcan_primitive_String_1_0_serialize_>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db3d      	blt.n	8002624 <publishStringMessage+0x120>
     {
         return; // or Error_Handler();
     }

     const CanardTransferMetadata metadata = {
 80025a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80025ac:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80025b0:	2204      	movs	r2, #4
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80025b8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80025bc:	2200      	movs	r2, #0
 80025be:	705a      	strb	r2, [r3, #1]
 80025c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025c4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80025c8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80025cc:	805a      	strh	r2, [r3, #2]
 80025ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80025d2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80025d6:	22ff      	movs	r2, #255	; 0xff
 80025d8:	711a      	strb	r2, [r3, #4]
         .priority       = CanardPriorityNominal,
         .transfer_kind  = CanardTransferKindMessage,
         .port_id        = STRING_MSG_PORT_ID,
         .remote_node_id = CANARD_NODE_ID_UNSET,
         .transfer_id    = string_transfer_id++,
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <publishStringMessage+0x12c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	b2d1      	uxtb	r1, r2
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <publishStringMessage+0x12c>)
 80025e4:	7011      	strb	r1, [r2, #0]
     const CanardTransferMetadata metadata = {
 80025e6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80025ea:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80025ee:	7153      	strb	r3, [r2, #5]
     };

     if (canardTxPush(&txqueue, &canard, 0, &metadata, ser_size, ser_buf) < 0)
 80025f0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80025f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f107 0214 	add.w	r2, r7, #20
 80025fe:	9202      	str	r2, [sp, #8]
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	4908      	ldr	r1, [pc, #32]	; (8002634 <publishStringMessage+0x130>)
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <publishStringMessage+0x134>)
 8002614:	f003 f892 	bl	800573c <canardTxPush>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	da03      	bge.n	8002626 <publishStringMessage+0x122>
     {
    	 Error_Handler();// handle error
 800261e:	f000 fd79 	bl	8003114 <Error_Handler>
 8002622:	e000      	b.n	8002626 <publishStringMessage+0x122>
         return; // or Error_Handler();
 8002624:	bf00      	nop
     }


}
 8002626:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200002f8 	.word	0x200002f8
 8002634:	200002c0 	.word	0x200002c0
 8002638:	200002dc 	.word	0x200002dc

0800263c <canard_TX_queue_process_func>:


void canard_TX_queue_process_func ()
{
 800263c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002640:	b08b      	sub	sp, #44	; 0x2c
 8002642:	af00      	add	r7, sp, #0
	// Look at the top of the TX queue
	  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&txqueue)) != NULL;)
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
 8002648:	e039      	b.n	80026be <canard_TX_queue_process_func+0x82>
	  {
	    // 1. Check if the TX deadline has not passed
	    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > timer_ms()))
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	d00c      	beq.n	800266e <canard_TX_queue_process_func+0x32>
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800265a:	f000 fbc6 	bl	8002dea <timer_ms>
 800265e:	4603      	mov	r3, r0
 8002660:	2200      	movs	r2, #0
 8002662:	461c      	mov	r4, r3
 8002664:	4615      	mov	r5, r2
 8002666:	4544      	cmp	r4, r8
 8002668:	eb75 0309 	sbcs.w	r3, r5, r9
 800266c:	d21d      	bcs.n	80026aa <canard_TX_queue_process_func+0x6e>
	    {
	      // 2. Prepare the CAN header for transmission

	      CAN_TxHeaderTypeDef TxHeader;
	      TxHeader.IDE = CAN_ID_EXT;             // Use extended CAN ID
 800266e:	2304      	movs	r3, #4
 8002670:	617b      	str	r3, [r7, #20]
	      TxHeader.RTR = CAN_RTR_DATA;           // Data frame
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
	      TxHeader.DLC = ti->frame.payload_size; // Number of bytes in payload
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	61fb      	str	r3, [r7, #28]
	      TxHeader.ExtId = ti->frame.extended_can_id;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	613b      	str	r3, [r7, #16]

	      uint8_t TxData[8];
	      uint32_t TxMailbox;

	      // 3. Copy the payload into a temporary buffer
	      memcpy(TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size);
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f007 fd92 	bl	800a1b6 <memcpy>

	      // 4. Transmit using the HAL driver

	      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002692:	463b      	mov	r3, r7
 8002694:	1d3a      	adds	r2, r7, #4
 8002696:	f107 010c 	add.w	r1, r7, #12
 800269a:	480f      	ldr	r0, [pc, #60]	; (80026d8 <canard_TX_queue_process_func+0x9c>)
 800269c:	f003 ff6e 	bl	800657c <HAL_CAN_AddTxMessage>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <canard_TX_queue_process_func+0x6e>
	      {
	        // If transmission fails (for example, no empty mailbox), break and try again later
	        break;
 80026a6:	bf00      	nop
	    }

	    // 5. Whether sent or expired, pop from the queue and free memory
	    canard.memory_free(&canard, canardTxPop(&txqueue, ti));
	  }
}
 80026a8:	e010      	b.n	80026cc <canard_TX_queue_process_func+0x90>
	    canard.memory_free(&canard, canardTxPop(&txqueue, ti));
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <canard_TX_queue_process_func+0xa0>)
 80026ac:	68de      	ldr	r6, [r3, #12]
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <canard_TX_queue_process_func+0xa4>)
 80026b2:	f003 f8e2 	bl	800587a <canardTxPop>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4808      	ldr	r0, [pc, #32]	; (80026dc <canard_TX_queue_process_func+0xa0>)
 80026bc:	47b0      	blx	r6
	  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&txqueue)) != NULL;)
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <canard_TX_queue_process_func+0xa4>)
 80026c0:	f003 f8c6 	bl	8005850 <canardTxPeek>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1be      	bne.n	800264a <canard_TX_queue_process_func+0xe>
}
 80026cc:	bf00      	nop
 80026ce:	372c      	adds	r7, #44	; 0x2c
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026d6:	bf00      	nop
 80026d8:	200001fc 	.word	0x200001fc
 80026dc:	200002c0 	.word	0x200002c0
 80026e0:	200002dc 	.word	0x200002dc
 80026e4:	00000000 	.word	0x00000000

080026e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
 * @brief CAN RX FIFO 0 message pending callback.
 * @param hcan Pointer to the CAN handle.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80026ee:	af04      	add	r7, sp, #16
 80026f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80026f4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80026f8:	6018      	str	r0, [r3, #0]
    // 1. Read the CAN frame from FIFO0
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0};
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
    uint32_t RxFifo0Index = CAN_RX_FIFO0;  // Typically 0
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

    if (HAL_CAN_GetRxMessage(hcan, RxFifo0Index, &RxHeader, RxData) != HAL_OK)
 800270c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8002710:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8002714:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002718:	f2a1 4004 	subw	r0, r1, #1028	; 0x404
 800271c:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 8002720:	6800      	ldr	r0, [r0, #0]
 8002722:	f003 fffb 	bl	800671c <HAL_CAN_GetRxMessage>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
    {
        printf("Failed to get CAN RX message.\n");
 800272c:	48d4      	ldr	r0, [pc, #848]	; (8002a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 800272e:	f007 fb63 	bl	8009df8 <puts>
        return;
 8002732:	e326      	b.n	8002d82 <HAL_CAN_RxFifo0MsgPendingCallback+0x69a>
    }

    // 2. Construct a CanardFrame
    CanardFrame frame;
    frame.extended_can_id = RxHeader.ExtId;
 8002734:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002738:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
    frame.payload_size = (size_t)RxHeader.DLC;
 800273c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002740:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
    frame.payload = (void*)RxData;
 8002744:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8002748:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

    // 3. Attempt to accept and reassemble the transfer
    CanardRxTransfer transfer;

    if (canardRxAccept(&canard,
                       timer_ms(),
 800274c:	f000 fb4d 	bl	8002dea <timer_ms>
 8002750:	4603      	mov	r3, r0
    if (canardRxAccept(&canard,
 8002752:	2200      	movs	r2, #0
 8002754:	461c      	mov	r4, r3
 8002756:	4615      	mov	r5, r2
 8002758:	2300      	movs	r3, #0
 800275a:	9303      	str	r3, [sp, #12]
 800275c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	4622      	mov	r2, r4
 800276e:	462b      	mov	r3, r5
 8002770:	48c4      	ldr	r0, [pc, #784]	; (8002a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x39c>)
 8002772:	f003 f8a3 	bl	80058bc <canardRxAccept>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d003      	beq.n	8002784 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
                       0,
                       &transfer,
                       NULL) != 1)
    {
        // The frame received is not a valid transfer
        printf("Invalid CAN transfer received.\n");
 800277c:	48c2      	ldr	r0, [pc, #776]	; (8002a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>)
 800277e:	f007 fb3b 	bl	8009df8 <puts>
        return;
 8002782:	e2fe      	b.n	8002d82 <HAL_CAN_RxFifo0MsgPendingCallback+0x69a>
    }

    // 4. Determine the transfer kind and port ID
    const CanardPortID rx_port_id = transfer.metadata.port_id;
 8002784:	f8b7 3382 	ldrh.w	r3, [r7, #898]	; 0x382
 8002788:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6

    if (transfer.metadata.transfer_kind == CanardTransferKindMessage)
 800278c:	f897 3381 	ldrb.w	r3, [r7, #897]	; 0x381
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 82ea 	bne.w	8002d6a <HAL_CAN_RxFifo0MsgPendingCallback+0x682>
    {
        // Handle messages (Real64 and String)
        if (rx_port_id == REAL_MSG_PORT_ID)
 8002796:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800279a:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 800279e:	4293      	cmp	r3, r2
 80027a0:	f040 81d4 	bne.w	8002b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>
        {
            // Deserialize and handle Real64 message
            uavcan_primitive_array_Real64_1_0 array_msg;
            size_t array_buf_size = uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_;
 80027a4:	f240 1301 	movw	r3, #257	; 0x101
 80027a8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
            if (uavcan_primitive_array_Real64_1_0_deserialize_(&array_msg, transfer.payload, &array_buf_size) < 0)
 80027ac:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80027b0:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80027b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fadf 	bl	8001d7c <uavcan_primitive_array_Real64_1_0_deserialize_>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da04      	bge.n	80027ce <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            {
                printf("Failed to deserialize Real64 message.\n");
 80027c4:	48b1      	ldr	r0, [pc, #708]	; (8002a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>)
 80027c6:	f007 fb17 	bl	8009df8 <puts>
                Error_Handler();
 80027ca:	f000 fca3 	bl	8003114 <Error_Handler>
            }

            // Debug array content via UART
            for (size_t i = 0; i < array_msg.value.count; i++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80027d4:	e013      	b.n	80027fe <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
                printf("Element %zu: %.2f\n", i, array_msg.value.elements[i]);
 80027d6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80027da:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80027de:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 80027ee:	48a8      	ldr	r0, [pc, #672]	; (8002a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>)
 80027f0:	f007 fa9c 	bl	8009d2c <iprintf>
            for (size_t i = 0; i < array_msg.value.count; i++) {
 80027f4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80027f8:	3301      	adds	r3, #1
 80027fa:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80027fe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002802:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002806:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800280a:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 800280e:	429a      	cmp	r2, r3
 8002810:	d3e1      	bcc.n	80027d6 <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
            }

            // Prepare message for UART
            char msg[128] = {0};
 8002812:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002816:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	3304      	adds	r3, #4
 8002820:	227c      	movs	r2, #124	; 0x7c
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f007 fc15 	bl	800a054 <memset>
            size_t len = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

            len += snprintf(msg + len, sizeof(msg) - len, "Real64 Message Received: ");
 8002830:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002834:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002838:	18d0      	adds	r0, r2, r3
 800283a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800283e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002842:	4a94      	ldr	r2, [pc, #592]	; (8002a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ac>)
 8002844:	4619      	mov	r1, r3
 8002846:	f007 fadf 	bl	8009e08 <sniprintf>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002852:	4413      	add	r3, r2
 8002854:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            for (size_t i = 0; i < array_msg.value.count; i++) {
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800285e:	e027      	b.n	80028b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
                len += snprintf(msg + len, sizeof(msg) - len, "%.2f ", array_msg.value.elements[i]);
 8002860:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002864:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002868:	18d0      	adds	r0, r2, r3
 800286a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800286e:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 8002872:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002876:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 800287a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	e9cd 2300 	strd	r2, r3, [sp]
 800288a:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b0>)
 800288c:	f007 fabc 	bl	8009e08 <sniprintf>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002898:	4413      	add	r3, r2
 800289a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                if (len >= sizeof(msg)) break; // Prevent buffer overflow
 800289e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80028a2:	2b7f      	cmp	r3, #127	; 0x7f
 80028a4:	d80f      	bhi.n	80028c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
            for (size_t i = 0; i < array_msg.value.count; i++) {
 80028a6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80028b0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80028b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80028bc:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d3cd      	bcc.n	8002860 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
 80028c4:	e000      	b.n	80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
                if (len >= sizeof(msg)) break; // Prevent buffer overflow
 80028c6:	bf00      	nop
            }
            len += snprintf(msg + len, sizeof(msg) - len, "\r\n");
 80028c8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80028cc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80028d0:	18d0      	adds	r0, r2, r3
 80028d2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80028d6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x3b4>)
 80028dc:	4619      	mov	r1, r3
 80028de:	f007 fa93 	bl	8009e08 <sniprintf>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80028ea:	4413      	add	r3, r2
 80028ec:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80028f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fcdb 	bl	80002b0 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	4866      	ldr	r0, [pc, #408]	; (8002aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>)
 8002908:	f006 f840 	bl	800898c <HAL_UART_Transmit>

            // Prepare message for OLED
            #define MAX_OLED_WIDTH 21 // Characters per line for 128-pixel-wide display with Font_6x8
            #define MAX_LINES 4       // Adjust based on OLED height and font size

            char lines[MAX_LINES][MAX_OLED_WIDTH + 1] = {0}; // Buffer for multiple lines
 800290c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002910:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8002914:	4618      	mov	r0, r3
 8002916:	2358      	movs	r3, #88	; 0x58
 8002918:	461a      	mov	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f007 fb9a 	bl	800a054 <memset>

            // Split data into multiple lines and check for special values
            size_t index = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            bool motor_on = false, motor_off = false; // Flags for Motor On/Off
 8002926:	2300      	movs	r3, #0
 8002928:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
 800292c:	2300      	movs	r3, #0
 800292e:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6

            for (size_t i = 0; i < array_msg.value.count; i++) {
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8002938:	e07c      	b.n	8002a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>
                char temp[16];
                snprintf(temp, sizeof(temp), "%.1f ", array_msg.value.elements[i]); // Format each value
 800293a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800293e:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8002942:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f507 705b 	add.w	r0, r7, #876	; 0x36c
 8002952:	e9cd 2300 	strd	r2, r3, [sp]
 8002956:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>)
 8002958:	2110      	movs	r1, #16
 800295a:	f007 fa55 	bl	8009e08 <sniprintf>
                if (array_msg.value.elements[i] == 1.1) {
 800295e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002962:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8002966:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002972:	a33f      	add	r3, pc, #252	; (adr r3, 8002a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fe f8c6 	bl	8000b08 <__aeabi_dcmpeq>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
                    motor_on = true; // Set Motor On flag
 8002982:	2301      	movs	r3, #1
 8002984:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
 8002988:	e014      	b.n	80029b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>
                } else if (array_msg.value.elements[i] == 2.2) {
 800298a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800298e:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8002992:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299e:	a336      	add	r3, pc, #216	; (adr r3, 8002a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fe f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>
                    motor_off = true; // Set Motor Off flag
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
                }

                if (strlen(lines[index]) + strlen(temp) < MAX_OLED_WIDTH) {
 80029b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029b8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80029bc:	2116      	movs	r1, #22
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fc73 	bl	80002b0 <strlen>
 80029ca:	4604      	mov	r4, r0
 80029cc:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fc6d 	bl	80002b0 <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4423      	add	r3, r4
 80029da:	2b14      	cmp	r3, #20
 80029dc:	d80e      	bhi.n	80029fc <HAL_CAN_RxFifo0MsgPendingCallback+0x314>
                    strcat(lines[index], temp); // Add to current line
 80029de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029e2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80029e6:	2116      	movs	r1, #22
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f007 fb35 	bl	800a064 <strcat>
 80029fa:	e016      	b.n	8002a2a <HAL_CAN_RxFifo0MsgPendingCallback+0x342>
                } else if (index < MAX_LINES - 1) {
 80029fc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d823      	bhi.n	8002a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
                    index++; // Move to next line
 8002a04:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
                    strcat(lines[index], temp); // Start new line
 8002a0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a12:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002a16:	2116      	movs	r1, #22
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f007 fb1d 	bl	800a064 <strcat>
            for (size_t i = 0; i < array_msg.value.count; i++) {
 8002a2a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8002a34:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002a38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002a40:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f4ff af78 	bcc.w	800293a <HAL_CAN_RxFifo0MsgPendingCallback+0x252>
 8002a4a:	e000      	b.n	8002a4e <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
                } else {
                    break; // Stop if no more lines are available
 8002a4c:	bf00      	nop
                }
            }

            // Display on OLED
            ssd1306_Fill(Black);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f003 f952 	bl	8005cf8 <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 8002a54:	2100      	movs	r1, #0
 8002a56:	2000      	movs	r0, #0
 8002a58:	f003 fa90 	bl	8005f7c <ssd1306_SetCursor>
            ssd1306_WriteString("Real64 Message:", Font_6x8, White);
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 8002a5e:	2301      	movs	r3, #1
 8002a60:	ca06      	ldmia	r2, {r1, r2}
 8002a62:	4812      	ldr	r0, [pc, #72]	; (8002aac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 8002a64:	f003 fa64 	bl	8005f30 <ssd1306_WriteString>

            for (size_t i = 0; i <= index; i++) {
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002a6e:	e03b      	b.n	8002ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>
 8002a70:	9999999a 	.word	0x9999999a
 8002a74:	3ff19999 	.word	0x3ff19999
 8002a78:	9999999a 	.word	0x9999999a
 8002a7c:	40019999 	.word	0x40019999
 8002a80:	0800c6ac 	.word	0x0800c6ac
 8002a84:	200002c0 	.word	0x200002c0
 8002a88:	0800c6cc 	.word	0x0800c6cc
 8002a8c:	0800c6ec 	.word	0x0800c6ec
 8002a90:	0800c714 	.word	0x0800c714
 8002a94:	0800c728 	.word	0x0800c728
 8002a98:	0800c744 	.word	0x0800c744
 8002a9c:	0800c74c 	.word	0x0800c74c
 8002aa0:	20000278 	.word	0x20000278
 8002aa4:	0800c750 	.word	0x0800c750
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	0800c758 	.word	0x0800c758
                ssd1306_SetCursor(0, 16 + (i * 8)); // Moved to next line (adjusted line height as needed)
 8002ab0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f003 fa5c 	bl	8005f7c <ssd1306_SetCursor>
                ssd1306_WriteString(lines[i], Font_6x8, White);
 8002ac4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ac8:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002acc:	2116      	movs	r1, #22
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	18d0      	adds	r0, r2, r3
 8002ad4:	4aad      	ldr	r2, [pc, #692]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	ca06      	ldmia	r2, {r1, r2}
 8002ada:	f003 fa29 	bl	8005f30 <ssd1306_WriteString>
            for (size_t i = 0; i <= index; i++) {
 8002ade:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002ae8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002aec:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d9dd      	bls.n	8002ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c8>
            }

            // Add Motor On/Off message if flags are set
            if (motor_on) {
 8002af4:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_CAN_RxFifo0MsgPendingCallback+0x436>
                ssd1306_SetCursor(0, 16 + ((index + 1) * 8)); // Extra line for Motor On
 8002afc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b00:	3303      	adds	r3, #3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f003 fa36 	bl	8005f7c <ssd1306_SetCursor>
                ssd1306_WriteString("Motor On", Font_6x8, White);
 8002b10:	4a9e      	ldr	r2, [pc, #632]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8002b12:	2301      	movs	r3, #1
 8002b14:	ca06      	ldmia	r2, {r1, r2}
 8002b16:	489e      	ldr	r0, [pc, #632]	; (8002d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a8>)
 8002b18:	f003 fa0a 	bl	8005f30 <ssd1306_WriteString>
 8002b1c:	e013      	b.n	8002b46 <HAL_CAN_RxFifo0MsgPendingCallback+0x45e>
            } else if (motor_off) {
 8002b1e:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <HAL_CAN_RxFifo0MsgPendingCallback+0x45e>
                ssd1306_SetCursor(0, 16 + ((index + 1) * 8)); // Extra line for Motor Off
 8002b26:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b2a:	3303      	adds	r3, #3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	2000      	movs	r0, #0
 8002b36:	f003 fa21 	bl	8005f7c <ssd1306_SetCursor>
                ssd1306_WriteString("Motor Off", Font_6x8, White);
 8002b3a:	4a94      	ldr	r2, [pc, #592]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	ca06      	ldmia	r2, {r1, r2}
 8002b40:	4894      	ldr	r0, [pc, #592]	; (8002d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8002b42:	f003 f9f5 	bl	8005f30 <ssd1306_WriteString>
            }

            ssd1306_UpdateScreen();
 8002b46:	f003 f8ef 	bl	8005d28 <ssd1306_UpdateScreen>
 8002b4a:	e10e      	b.n	8002d6a <HAL_CAN_RxFifo0MsgPendingCallback+0x682>
        }
        else if (rx_port_id == STRING_MSG_PORT_ID)
 8002b4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b50:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 8002b54:	4293      	cmp	r3, r2
 8002b56:	f040 8102 	bne.w	8002d5e <HAL_CAN_RxFifo0MsgPendingCallback+0x676>
        {
            // Deserialize and handle String message
            uavcan_primitive_String_1_0 str_msg;
            size_t str_buf_size = uavcan_primitive_String_1_0_EXTENT_BYTES_;
 8002b5a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002b5e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
            if (uavcan_primitive_String_1_0_deserialize_(&str_msg, transfer.payload, &str_buf_size) < 0)
 8002b62:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8002b66:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002b6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fae6 	bl	8002140 <uavcan_primitive_String_1_0_deserialize_>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da04      	bge.n	8002b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>
            {
                printf("Failed to deserialize String message.\n");
 8002b7a:	4887      	ldr	r0, [pc, #540]	; (8002d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8002b7c:	f007 f93c 	bl	8009df8 <puts>
                Error_Handler();
 8002b80:	f000 fac8 	bl	8003114 <Error_Handler>
            }

            // Convert to C-string for printing
            char text[256] = {0}; // Adjust size as needed
 8002b84:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002b88:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	3304      	adds	r3, #4
 8002b92:	22fc      	movs	r2, #252	; 0xfc
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f007 fa5c 	bl	800a054 <memset>
            size_t copy_len = (str_msg.value.count < sizeof(text) - 1) ? str_msg.value.count : sizeof(text) - 1;
 8002b9c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002ba0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ba4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ba8:	2bff      	cmp	r3, #255	; 0xff
 8002baa:	bf28      	it	cs
 8002bac:	23ff      	movcs	r3, #255	; 0xff
 8002bae:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            memcpy(text, str_msg.value.elements, copy_len);
 8002bb2:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002bb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bba:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f007 faf9 	bl	800a1b6 <memcpy>
            text[copy_len] = '\0';
 8002bc4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002bc8:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8002bcc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002bd0:	4413      	add	r3, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]

            // Debug String content via UART
            printf("String Message Received: \"%s\"\n", text);
 8002bd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bda:	4619      	mov	r1, r3
 8002bdc:	486f      	ldr	r0, [pc, #444]	; (8002d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8002bde:	f007 f8a5 	bl	8009d2c <iprintf>

            // Prepare message for UART
            char msg[256] = {0};
 8002be2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002be6:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	22fc      	movs	r2, #252	; 0xfc
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f007 fa2d 	bl	800a054 <memset>
            snprintf(msg, sizeof(msg), "String Message: %s\r\n", text);
 8002bfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bfe:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8002c02:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b8>)
 8002c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c08:	f007 f8fe 	bl	8009e08 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c0c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fb4d 	bl	80002b0 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	4860      	ldr	r0, [pc, #384]	; (8002da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6bc>)
 8002c24:	f005 feb2 	bl	800898c <HAL_UART_Transmit>

            // Prepare message for OLED
            #define MAX_OLED_WIDTH 21 // Characters per line for 128-pixel-wide display with Font_6x8
            #define MAX_LINES 4       // Adjust based on OLED height and font size

            char lines[MAX_LINES][MAX_OLED_WIDTH + 1] = {0}; // Buffer for multiple lines
 8002c28:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002c2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c30:	4618      	mov	r0, r3
 8002c32:	2358      	movs	r3, #88	; 0x58
 8002c34:	461a      	mov	r2, r3
 8002c36:	2100      	movs	r1, #0
 8002c38:	f007 fa0c 	bl	800a054 <memset>

            // Split the string into multiple lines if necessary
            size_t index = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
            size_t len = strlen(text);
 8002c42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fb32 	bl	80002b0 <strlen>
 8002c4c:	f8c7 03cc 	str.w	r0, [r7, #972]	; 0x3cc
            size_t start = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

            while (start < len && index < MAX_LINES)
 8002c56:	e042      	b.n	8002cde <HAL_CAN_RxFifo0MsgPendingCallback+0x5f6>
            {
                size_t end = start + MAX_OLED_WIDTH;
 8002c58:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002c5c:	3315      	adds	r3, #21
 8002c5e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
                if (end > len)
 8002c62:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8002c66:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d903      	bls.n	8002c76 <HAL_CAN_RxFifo0MsgPendingCallback+0x58e>
                    end = len;
 8002c6e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002c72:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

                size_t line_length = end - start;
 8002c76:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8002c7a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
                strncpy(lines[index], &text[start], line_length);
 8002c84:	f107 0208 	add.w	r2, r7, #8
 8002c88:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002c8c:	2116      	movs	r1, #22
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	18d0      	adds	r0, r2, r3
 8002c94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c98:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f007 f9ed 	bl	800a082 <strncpy>
                lines[index][line_length] = '\0'; // Null-terminate
 8002ca8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002cac:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
 8002cb0:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002cb4:	2116      	movs	r1, #22
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	441a      	add	r2, r3
 8002cbc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002cc0:	4413      	add	r3, r2
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]

                start += line_length;
 8002cc6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8002cca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002cce:	4413      	add	r3, r2
 8002cd0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
                index++;
 8002cd4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
            while (start < len && index < MAX_LINES)
 8002cde:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8002ce2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d203      	bcs.n	8002cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x60a>
 8002cea:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d9b2      	bls.n	8002c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x570>
            }

            // Display on OLED
            ssd1306_Fill(Black);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f003 f800 	bl	8005cf8 <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f003 f93e 	bl	8005f7c <ssd1306_SetCursor>
            ssd1306_WriteString("String Message:", Font_6x8, White);
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8002d02:	2301      	movs	r3, #1
 8002d04:	ca06      	ldmia	r2, {r1, r2}
 8002d06:	4828      	ldr	r0, [pc, #160]	; (8002da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c0>)
 8002d08:	f003 f912 	bl	8005f30 <ssd1306_WriteString>

            for (size_t i = 0; i < index; i++) {
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002d12:	e01b      	b.n	8002d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x664>
                ssd1306_SetCursor(0, 16 + (i * 8)); // Moved to next line (adjusted line height as needed)
 8002d14:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002d18:	3302      	adds	r3, #2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	2000      	movs	r0, #0
 8002d24:	f003 f92a 	bl	8005f7c <ssd1306_SetCursor>
                ssd1306_WriteString(lines[i], Font_6x8, White);
 8002d28:	f107 0208 	add.w	r2, r7, #8
 8002d2c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002d30:	2116      	movs	r1, #22
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	18d0      	adds	r0, r2, r3
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	ca06      	ldmia	r2, {r1, r2}
 8002d3e:	f003 f8f7 	bl	8005f30 <ssd1306_WriteString>
            for (size_t i = 0; i < index; i++) {
 8002d42:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002d46:	3301      	adds	r3, #1
 8002d48:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002d4c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d50:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3dd      	bcc.n	8002d14 <HAL_CAN_RxFifo0MsgPendingCallback+0x62c>
            }

            ssd1306_UpdateScreen();
 8002d58:	f002 ffe6 	bl	8005d28 <ssd1306_UpdateScreen>
 8002d5c:	e005      	b.n	8002d6a <HAL_CAN_RxFifo0MsgPendingCallback+0x682>
        }
        else
        {
            printf("Received message on unknown Port ID: %u\n", rx_port_id);
 8002d5e:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 8002d62:	4619      	mov	r1, r3
 8002d64:	4811      	ldr	r0, [pc, #68]	; (8002dac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c4>)
 8002d66:	f006 ffe1 	bl	8009d2c <iprintf>
        }
    }

    // 5. Free memory allocated by libcanard
    canard.memory_free(&canard, transfer.payload);
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c8>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8002d72:	4611      	mov	r1, r2
 8002d74:	480e      	ldr	r0, [pc, #56]	; (8002db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c8>)
 8002d76:	4798      	blx	r3

    // 6. Toggle LED to indicate successful reception
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002d78:	2120      	movs	r1, #32
 8002d7a:	480e      	ldr	r0, [pc, #56]	; (8002db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6cc>)
 8002d7c:	f004 fb05 	bl	800738a <HAL_GPIO_TogglePin>

    return;
 8002d80:	bf00      	nop
}
 8002d82:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	0800c768 	.word	0x0800c768
 8002d94:	0800c774 	.word	0x0800c774
 8002d98:	0800c780 	.word	0x0800c780
 8002d9c:	0800c7a8 	.word	0x0800c7a8
 8002da0:	0800c7c8 	.word	0x0800c7c8
 8002da4:	20000278 	.word	0x20000278
 8002da8:	0800c7e0 	.word	0x0800c7e0
 8002dac:	0800c7f0 	.word	0x0800c7f0
 8002db0:	200002c0 	.word	0x200002c0
 8002db4:	40020000 	.word	0x40020000

08002db8 <memAllocate>:


//Wrappers from standard C (malloc and calloc) for using it 01heap allocator with canard

static void* memAllocate(CanardInstance* const abc, const size_t amount)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  (void) abc;
  return malloc(amount);
 8002dc2:	6838      	ldr	r0, [r7, #0]
 8002dc4:	f006 f9bc 	bl	8009140 <malloc>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <memFree>:

static void memFree(CanardInstance* const abc, void* const pointer)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  (void) abc;
  free( pointer );
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f006 f9b7 	bl	8009150 <free>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <timer_ms>:


uint32_t timer_ms(void) // Need to set up timer peripheral, based on the microsecond precision requirements
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002dee:	f003 f975 	bl	80060dc <HAL_GetTick>
 8002df2:	4603      	mov	r3, r0
	//return 0;
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f004 fac3 	bl	80073c0 <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f000 f968 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000224 	.word	0x20000224
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <MX_USART2_UART_Init+0x50>)
 8002e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <MX_USART2_UART_Init+0x4c>)
 8002e8c:	f005 fd2e 	bl	80088ec <HAL_UART_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e96:	f000 f93d 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000278 	.word	0x20000278
 8002ea4:	40004400 	.word	0x40004400

08002ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2120      	movs	r1, #32
 8002f32:	4812      	ldr	r0, [pc, #72]	; (8002f7c <MX_GPIO_Init+0xd4>)
 8002f34:	f004 fa10 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <MX_GPIO_Init+0xd8>)
 8002f50:	f004 f86e 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f54:	2320      	movs	r3, #32
 8002f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4804      	ldr	r0, [pc, #16]	; (8002f7c <MX_GPIO_Init+0xd4>)
 8002f6c:	f004 f860 	bl	8007030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020800 	.word	0x40020800

08002f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b094      	sub	sp, #80	; 0x50
 8002f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8a:	f107 031c 	add.w	r3, r7, #28
 8002f8e:	2234      	movs	r2, #52	; 0x34
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f007 f85e 	bl	800a054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	4b29      	ldr	r3, [pc, #164]	; (8003054 <SystemClock_Config+0xd0>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <SystemClock_Config+0xd0>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <SystemClock_Config+0xd0>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4b23      	ldr	r3, [pc, #140]	; (8003058 <SystemClock_Config+0xd4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <SystemClock_Config+0xd4>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <SystemClock_Config+0xd4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002ffc:	2354      	movs	r3, #84	; 0x54
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003000:	2302      	movs	r3, #2
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003004:	2302      	movs	r3, #2
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003008:	2302      	movs	r3, #2
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	4618      	mov	r0, r3
 8003012:	f005 f9cd 	bl	80083b0 <HAL_RCC_OscConfig>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800301c:	f000 f87a 	bl	8003114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003020:	230f      	movs	r3, #15
 8003022:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003024:	2302      	movs	r3, #2
 8003026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800302c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fe6d 	bl	8007d1c <HAL_RCC_ClockConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003048:	f000 f864 	bl	8003114 <Error_Handler>
  }
}
 800304c:	bf00      	nop
 800304e:	3750      	adds	r7, #80	; 0x50
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000

0800305c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <MX_CAN1_Init+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003068:	2203      	movs	r2, #3
 800306a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <MX_CAN1_Init+0x64>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_CAN1_Init+0x64>)
 800307a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800307e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003082:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003086:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <MX_CAN1_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003090:	2200      	movs	r2, #0
 8003092:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <MX_CAN1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_CAN1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <MX_CAN1_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_CAN1_Init+0x64>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80030ac:	4804      	ldr	r0, [pc, #16]	; (80030c0 <MX_CAN1_Init+0x64>)
 80030ae:	f003 f845 	bl	800613c <HAL_CAN_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80030b8:	f000 f82c 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200001fc 	.word	0x200001fc
 80030c4:	40006400 	.word	0x40006400

080030c8 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0

	 	CAN_FilterTypeDef can1_filter_init;

	 	can1_filter_init.FilterActivation = ENABLE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
	 	can1_filter_init.FilterBank  = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
	 	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
	 	can1_filter_init.FilterIdHigh = 0x0000;
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
	 	can1_filter_init.FilterIdLow = 0x0000;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
	 	can1_filter_init.FilterMaskIdHigh = 0X0000;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
	 	can1_filter_init.FilterMaskIdLow = 0x0000;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
	 	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
	 	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]

	 	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 80030f2:	463b      	mov	r3, r7
 80030f4:	4619      	mov	r1, r3
 80030f6:	4806      	ldr	r0, [pc, #24]	; (8003110 <CAN_Filter_Config+0x48>)
 80030f8:	f003 f91c 	bl	8006334 <HAL_CAN_ConfigFilter>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <CAN_Filter_Config+0x3e>
	 	{
	 		Error_Handler();
 8003102:	f000 f807 	bl	8003114 <Error_Handler>

	 }

}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001fc 	.word	0x200001fc

08003114 <Error_Handler>:

void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800311c:	e7fe      	b.n	800311c <Error_Handler+0x8>
	...

08003120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_MspInit+0x4c>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_MspInit+0x4c>)
 8003130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_MspInit+0x4c>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_MspInit+0x4c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_MspInit+0x4c>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_MspInit+0x4c>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800315e:	2007      	movs	r0, #7
 8003160:	f003 ff24 	bl	8006fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_CAN_MspInit+0x94>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d134      	bne.n	80031fc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_CAN_MspInit+0x98>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_CAN_MspInit+0x98>)
 800319c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_CAN_MspInit+0x98>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_CAN_MspInit+0x98>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_CAN_MspInit+0x98>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_CAN_MspInit+0x98>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80031dc:	2309      	movs	r3, #9
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4619      	mov	r1, r3
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <HAL_CAN_MspInit+0x9c>)
 80031e8:	f003 ff22 	bl	8007030 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	2014      	movs	r0, #20
 80031f2:	f003 fee6 	bl	8006fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80031f6:	2014      	movs	r0, #20
 80031f8:	f003 feff 	bl	8006ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80031fc:	bf00      	nop
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40006400 	.word	0x40006400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020000 	.word	0x40020000

08003210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_I2C_MspInit+0x84>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12c      	bne.n	800328c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_I2C_MspInit+0x88>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_I2C_MspInit+0x88>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_I2C_MspInit+0x88>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800324e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003254:	2312      	movs	r3, #18
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003260:	2304      	movs	r3, #4
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	480c      	ldr	r0, [pc, #48]	; (800329c <HAL_I2C_MspInit+0x8c>)
 800326c:	f003 fee0 	bl	8007030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_I2C_MspInit+0x88>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_I2C_MspInit+0x88>)
 800327a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_I2C_MspInit+0x88>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40005400 	.word	0x40005400
 8003298:	40023800 	.word	0x40023800
 800329c:	40020400 	.word	0x40020400

080032a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a19      	ldr	r2, [pc, #100]	; (8003324 <HAL_UART_MspInit+0x84>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12b      	bne.n	800331a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_UART_MspInit+0x88>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032fa:	230c      	movs	r3, #12
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800330a:	2307      	movs	r3, #7
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <HAL_UART_MspInit+0x8c>)
 8003316:	f003 fe8b 	bl	8007030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40004400 	.word	0x40004400
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003334:	e7fe      	b.n	8003334 <NMI_Handler+0x4>

08003336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333a:	e7fe      	b.n	800333a <HardFault_Handler+0x4>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <MemManage_Handler+0x4>

08003342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <UsageFault_Handler+0x4>

0800334e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800337c:	f002 fe9a 	bl	80060b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <CAN1_RX0_IRQHandler+0x10>)
 800338a:	f003 fb0f 	bl	80069ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200001fc 	.word	0x200001fc

08003398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return 1;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_kill>:

int _kill(int pid, int sig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033b2:	f006 fed3 	bl	800a15c <__errno>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2216      	movs	r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
  return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_exit>:

void _exit (int status)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ffe7 	bl	80033a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033da:	e7fe      	b.n	80033da <_exit+0x12>

080033dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e00a      	b.n	8003404 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ee:	f3af 8000 	nop.w
 80033f2:	4601      	mov	r1, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	60ba      	str	r2, [r7, #8]
 80033fa:	b2ca      	uxtb	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	dbf0      	blt.n	80033ee <_read+0x12>
  }

  return len;
 800340c:	687b      	ldr	r3, [r7, #4]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e009      	b.n	800343c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	dbf1      	blt.n	8003428 <_write+0x12>
  }
  return len;
 8003444:	687b      	ldr	r3, [r7, #4]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <_close>:

int _close(int file)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003476:	605a      	str	r2, [r3, #4]
  return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <_isatty>:

int _isatty(int file)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800348e:	2301      	movs	r3, #1
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <_sbrk+0x5c>)
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <_sbrk+0x60>)
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <_sbrk+0x64>)
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <_sbrk+0x68>)
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d207      	bcs.n	80034f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e8:	f006 fe38 	bl	800a15c <__errno>
 80034ec:	4603      	mov	r3, r0
 80034ee:	220c      	movs	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e009      	b.n	800350c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <_sbrk+0x64>)
 8003508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20020000 	.word	0x20020000
 8003518:	00000400 	.word	0x00000400
 800351c:	20000308 	.word	0x20000308
 8003520:	20000668 	.word	0x20000668

08003524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <SystemInit+0x20>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <SystemInit+0x20>)
 8003530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003580 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800354c:	f7ff ffea 	bl	8003524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003550:	480c      	ldr	r0, [pc, #48]	; (8003584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003552:	490d      	ldr	r1, [pc, #52]	; (8003588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003568:	4c0a      	ldr	r4, [pc, #40]	; (8003594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003576:	f006 fdf7 	bl	800a168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357a:	f7fe febd 	bl	80022f8 <main>
  bx  lr    
 800357e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003588:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800358c:	0800e248 	.word	0x0800e248
  ldr r2, =_sbss
 8003590:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003594:	20000664 	.word	0x20000664

08003598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003598:	e7fe      	b.n	8003598 <ADC_IRQHandler>

0800359a <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 80035ae:	e007      	b.n	80035c0 <cavlFindExtremum+0x26>
    {
        result = c;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f4      	bne.n	80035b0 <cavlFindExtremum+0x16>
    }
    return result;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <cavlPrivateRotate+0x3c>
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <cavlPrivateRotate+0x3c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	db04      	blt.n	8003610 <cavlPrivateRotate+0x3c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	dd05      	ble.n	800361c <cavlPrivateRotate+0x48>
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <cavlPrivateRotate+0xe8>)
 8003612:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <cavlPrivateRotate+0xec>)
 8003614:	2162      	movs	r1, #98	; 0x62
 8003616:	482b      	ldr	r0, [pc, #172]	; (80036c4 <cavlPrivateRotate+0xf0>)
 8003618:	f005 fd74 	bl	8009104 <__assert_func>
    Cavl* const z = x->lr[!r];
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f083 0301 	eor.w	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4299      	cmp	r1, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	f082 0201 	eor.w	r2, r2, #1
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	4610      	mov	r0, r2
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	0083      	lsls	r3, r0, #2
 800367a:	440b      	add	r3, r1
 800367c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f083 0301 	eor.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	605a      	str	r2, [r3, #4]
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	0800c81c 	.word	0x0800c81c
 80036c0:	0800d780 	.word	0x0800d780
 80036c4:	0800c874 	.word	0x0800c874

080036c8 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <cavlPrivateAdjustBalance+0x28>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	db04      	blt.n	80036f0 <cavlPrivateAdjustBalance+0x28>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	dd05      	ble.n	80036fc <cavlPrivateAdjustBalance+0x34>
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <cavlPrivateAdjustBalance+0x1b0>)
 80036f2:	4a62      	ldr	r2, [pc, #392]	; (800387c <cavlPrivateAdjustBalance+0x1b4>)
 80036f4:	2177      	movs	r1, #119	; 0x77
 80036f6:	4862      	ldr	r0, [pc, #392]	; (8003880 <cavlPrivateAdjustBalance+0x1b8>)
 80036f8:	f005 fd04 	bl	8009104 <__assert_func>
    Cavl*        out    = x;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	2a00      	cmp	r2, #0
 800370c:	d001      	beq.n	8003712 <cavlPrivateAdjustBalance+0x4a>
 800370e:	2201      	movs	r2, #1
 8003710:	e000      	b.n	8003714 <cavlPrivateAdjustBalance+0x4c>
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	4413      	add	r3, r2
 8003716:	b2db      	uxtb	r3, r3
 8003718:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800371a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	db04      	blt.n	800372e <cavlPrivateAdjustBalance+0x66>
 8003724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f340 809c 	ble.w	8003866 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	09db      	lsrs	r3, r3, #7
 8003732:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8003734:	7cbb      	ldrb	r3, [r7, #18]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <cavlPrivateAdjustBalance+0x76>
 800373a:	2301      	movs	r3, #1
 800373c:	e001      	b.n	8003742 <cavlPrivateAdjustBalance+0x7a>
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8003744:	7cbb      	ldrb	r3, [r7, #18]
 8003746:	f083 0301 	eor.w	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <cavlPrivateAdjustBalance+0xa0>
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <cavlPrivateAdjustBalance+0x1bc>)
 800375e:	4a47      	ldr	r2, [pc, #284]	; (800387c <cavlPrivateAdjustBalance+0x1b4>)
 8003760:	217f      	movs	r1, #127	; 0x7f
 8003762:	4847      	ldr	r0, [pc, #284]	; (8003880 <cavlPrivateAdjustBalance+0x1b8>)
 8003764:	f005 fcce 	bl	8009104 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	dc1c      	bgt.n	80037b6 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8003780:	7cbb      	ldrb	r3, [r7, #18]
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff25 	bl	80035d4 <cavlPrivateRotate>
            if (0 == z->bf)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8003794:	7c7b      	ldrb	r3, [r7, #17]
 8003796:	425b      	negs	r3, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	b25a      	sxtb	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	7c7a      	ldrb	r2, [r7, #17]
 80037a4:	731a      	strb	r2, [r3, #12]
    {
 80037a6:	e061      	b.n	800386c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	731a      	strb	r2, [r3, #12]
    {
 80037b4:	e05a      	b.n	800386c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 80037b6:	7cbb      	ldrb	r3, [r7, #18]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <cavlPrivateAdjustBalance+0x10c>
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <cavlPrivateAdjustBalance+0x1c0>)
 80037ca:	4a2c      	ldr	r2, [pc, #176]	; (800387c <cavlPrivateAdjustBalance+0x1b4>)
 80037cc:	2192      	movs	r1, #146	; 0x92
 80037ce:	482c      	ldr	r0, [pc, #176]	; (8003880 <cavlPrivateAdjustBalance+0x1b8>)
 80037d0:	f005 fc98 	bl	8009104 <__assert_func>
            out = y;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 80037d8:	7cbb      	ldrb	r3, [r7, #18]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff feee 	bl	80035d4 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80037f8:	7cbb      	ldrb	r3, [r7, #18]
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fee9 	bl	80035d4 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003808:	461a      	mov	r2, r3
 800380a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	da09      	bge.n	800382a <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7c7a      	ldrb	r2, [r7, #17]
 800381a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2200      	movs	r2, #0
 8003820:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	731a      	strb	r2, [r3, #12]
    {
 8003828:	e020      	b.n	800386c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003830:	461a      	mov	r2, r3
 8003832:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	dd0c      	ble.n	8003858 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800384a:	7c7b      	ldrb	r3, [r7, #17]
 800384c:	425b      	negs	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	b25a      	sxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	731a      	strb	r2, [r3, #12]
    {
 8003856:	e009      	b.n	800386c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	731a      	strb	r2, [r3, #12]
    {
 8003864:	e002      	b.n	800386c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7cfa      	ldrb	r2, [r7, #19]
 800386a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800386c:	697b      	ldr	r3, [r7, #20]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	0800c8a8 	.word	0x0800c8a8
 800387c:	0800d764 	.word	0x0800d764
 8003880:	0800c874 	.word	0x0800c874
 8003884:	0800c8e0 	.word	0x0800c8e0
 8003888:	0800c8f4 	.word	0x0800c8f4

0800388c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <cavlPrivateRetraceOnGrowth+0x18>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <cavlPrivateRetraceOnGrowth+0x24>
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <cavlPrivateRetraceOnGrowth+0xa8>)
 80038a6:	4a24      	ldr	r2, [pc, #144]	; (8003938 <cavlPrivateRetraceOnGrowth+0xac>)
 80038a8:	21b5      	movs	r1, #181	; 0xb5
 80038aa:	4824      	ldr	r0, [pc, #144]	; (800393c <cavlPrivateRetraceOnGrowth+0xb0>)
 80038ac:	f005 fc2a 	bl	8009104 <__assert_func>
    Cavl* c = added;      // Child
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 80038ba:	e023      	b.n	8003904 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d005      	beq.n	80038e8 <cavlPrivateRetraceOnGrowth+0x5c>
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <cavlPrivateRetraceOnGrowth+0xb4>)
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <cavlPrivateRetraceOnGrowth+0xac>)
 80038e0:	21bb      	movs	r1, #187	; 0xbb
 80038e2:	4816      	ldr	r0, [pc, #88]	; (800393c <cavlPrivateRetraceOnGrowth+0xb0>)
 80038e4:	f005 fc0e 	bl	8009104 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	4619      	mov	r1, r3
 80038ec:	6938      	ldr	r0, [r7, #16]
 80038ee:	f7ff feeb 	bl	80036c8 <cavlPrivateAdjustBalance>
 80038f2:	6178      	str	r0, [r7, #20]
        p = c->up;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1d8      	bne.n	80038bc <cavlPrivateRetraceOnGrowth+0x30>
 800390a:	e000      	b.n	800390e <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800390c:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <cavlPrivateRetraceOnGrowth+0x94>
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <cavlPrivateRetraceOnGrowth+0xb8>)
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <cavlPrivateRetraceOnGrowth+0xac>)
 8003918:	21c3      	movs	r1, #195	; 0xc3
 800391a:	4808      	ldr	r0, [pc, #32]	; (800393c <cavlPrivateRetraceOnGrowth+0xb0>)
 800391c:	f005 fbf2 	bl	8009104 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <cavlPrivateRetraceOnGrowth+0x9e>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	e000      	b.n	800392c <cavlPrivateRetraceOnGrowth+0xa0>
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800c908 	.word	0x0800c908
 8003938:	0800d748 	.word	0x0800d748
 800393c:	0800c874 	.word	0x0800c874
 8003940:	0800c934 	.word	0x0800c934
 8003944:	0800c944 	.word	0x0800c944

08003948 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d065      	beq.n	8003a2c <cavlSearch+0xe4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d062      	beq.n	8003a2c <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8003970:	e02f      	b.n	80039d2 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4611      	mov	r1, r2
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	4798      	blx	r3
 800397e:	4603      	mov	r3, r0
 8003980:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8003982:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <cavlSearch+0x4a>
            {
                out = *n;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8003990:	e023      	b.n	80039da <cavlSearch+0x92>
            }
            up = *n;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bfcc      	ite	gt
 80039a4:	2301      	movgt	r3, #1
 80039a6:	2300      	movle	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <cavlSearch+0x8a>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d005      	beq.n	80039d2 <cavlSearch+0x8a>
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <cavlSearch+0xf0>)
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <cavlSearch+0xf4>)
 80039ca:	21db      	movs	r1, #219	; 0xdb
 80039cc:	481c      	ldr	r0, [pc, #112]	; (8003a40 <cavlSearch+0xf8>)
 80039ce:	f005 fb99 	bl	8009104 <__assert_func>
        while (*n != NULL)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1cb      	bne.n	8003972 <cavlSearch+0x2a>
        }
        if (NULL == out)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d125      	bne.n	8003a2c <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <cavlSearch+0xa8>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68b8      	ldr	r0, [r7, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	e000      	b.n	80039f2 <cavlSearch+0xaa>
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2200      	movs	r2, #0
 8003a16:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8003a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a1a:	f7ff ff37 	bl	800388c <cavlPrivateRetraceOnGrowth>
 8003a1e:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <cavlSearch+0xe4>
                {
                    *root = rt;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	; 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	0800c958 	.word	0x0800c958
 8003a3c:	0800d73c 	.word	0x0800d73c
 8003a40:	0800c874 	.word	0x0800c874

08003a44 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8116 	beq.w	8003c82 <cavlRemove+0x23e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8112 	beq.w	8003c82 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <cavlRemove+0x2e>
 8003a66:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <cavlRemove+0x248>)
 8003a68:	4a89      	ldr	r2, [pc, #548]	; (8003c90 <cavlRemove+0x24c>)
 8003a6a:	21f6      	movs	r1, #246	; 0xf6
 8003a6c:	4889      	ldr	r0, [pc, #548]	; (8003c94 <cavlRemove+0x250>)
 8003a6e:	f005 fb49 	bl	8009104 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <cavlRemove+0x4c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d005      	beq.n	8003a90 <cavlRemove+0x4c>
 8003a84:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <cavlRemove+0x254>)
 8003a86:	4a82      	ldr	r2, [pc, #520]	; (8003c90 <cavlRemove+0x24c>)
 8003a88:	21f7      	movs	r1, #247	; 0xf7
 8003a8a:	4882      	ldr	r0, [pc, #520]	; (8003c94 <cavlRemove+0x250>)
 8003a8c:	f005 fb3a 	bl	8009104 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8003a94:	2300      	movs	r3, #0
 8003a96:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d073      	beq.n	8003b88 <cavlRemove+0x144>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d06f      	beq.n	8003b88 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fd73 	bl	800359a <cavlFindExtremum>
 8003ab4:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <cavlRemove+0x88>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <cavlRemove+0x88>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <cavlRemove+0x94>
 8003acc:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <cavlRemove+0x258>)
 8003ace:	4a70      	ldr	r2, [pc, #448]	; (8003c90 <cavlRemove+0x24c>)
 8003ad0:	21ff      	movs	r1, #255	; 0xff
 8003ad2:	4870      	ldr	r0, [pc, #448]	; (8003c94 <cavlRemove+0x250>)
 8003ad4:	f005 fb16 	bl	8009104 <__assert_func>
            re->bf        = node->bf;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d025      	beq.n	8003b48 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d006      	beq.n	8003b1a <cavlRemove+0xd6>
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <cavlRemove+0x25c>)
 8003b0e:	4a60      	ldr	r2, [pc, #384]	; (8003c90 <cavlRemove+0x24c>)
 8003b10:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003b14:	485f      	ldr	r0, [pc, #380]	; (8003c94 <cavlRemove+0x250>)
 8003b16:	f005 faf5 	bl	8009104 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	601a      	str	r2, [r3, #0]
                r             = false;
 8003b42:	2300      	movs	r3, #0
 8003b44:	76fb      	strb	r3, [r7, #27]
 8003b46:	e003      	b.n	8003b50 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00f      	beq.n	8003b80 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4299      	cmp	r1, r3
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]
        {
 8003b7e:	e046      	b.n	8003c0e <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	601a      	str	r2, [r3, #0]
        {
 8003b86:	e042      	b.n	8003c0e <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d020      	beq.n	8003c00 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	7ef8      	ldrb	r0, [r7, #27]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	0083      	lsls	r3, r0, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8003be2:	7efb      	ldrb	r3, [r7, #27]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8003bf0:	7efb      	ldrb	r3, [r7, #27]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e006      	b.n	8003c0e <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d036      	beq.n	8003c82 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8003c18:	7efb      	ldrb	r3, [r7, #27]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	69f8      	ldr	r0, [r7, #28]
 8003c34:	f7ff fd48 	bl	80036c8 <cavlPrivateAdjustBalance>
 8003c38:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <cavlRemove+0x21e>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8003c60:	e7da      	b.n	8003c18 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <cavlRemove+0x238>
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <cavlRemove+0x260>)
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <cavlRemove+0x24c>)
 8003c72:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003c76:	4807      	ldr	r0, [pc, #28]	; (8003c94 <cavlRemove+0x250>)
 8003c78:	f005 fa44 	bl	8009104 <__assert_func>
                *root = c;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8003c82:	bf00      	nop
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	0800c980 	.word	0x0800c980
 8003c90:	0800d7c4 	.word	0x0800d7c4
 8003c94:	0800c874 	.word	0x0800c874
 8003c98:	0800c998 	.word	0x0800c998
 8003c9c:	0800c9c8 	.word	0x0800c9c8
 8003ca0:	0800ca18 	.word	0x0800ca18
 8003ca4:	0800c944 	.word	0x0800c944

08003ca8 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8003cb0:	687b      	ldr	r3, [r7, #4]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460a      	mov	r2, r1
 8003cca:	80fb      	strh	r3, [r7, #6]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	797b      	ldrb	r3, [r7, #5]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	404b      	eors	r3, r1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4905      	ldr	r1, [pc, #20]	; (8003cfc <crcAddByte+0x3c>)
 8003ce8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8003cec:	4053      	eors	r3, r2
 8003cee:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	0800d414 	.word	0x0800d414

08003d00 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d108      	bne.n	8003d26 <crcAdd+0x26>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <crcAdd+0x26>
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <crcAdd+0x64>)
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <crcAdd+0x68>)
 8003d1e:	2189      	movs	r1, #137	; 0x89
 8003d20:	4812      	ldr	r0, [pc, #72]	; (8003d6c <crcAdd+0x6c>)
 8003d22:	f005 f9ef 	bl	8009104 <__assert_func>
    TransferCRC    out = crc;
 8003d26:	89fb      	ldrh	r3, [r7, #14]
 8003d28:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e00e      	b.n	8003d52 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	8bfb      	ldrh	r3, [r7, #30]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ffbf 	bl	8003cc0 <crcAddByte>
 8003d42:	4603      	mov	r3, r0
 8003d44:	83fb      	strh	r3, [r7, #30]
        ++p;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d3ec      	bcc.n	8003d34 <crcAdd+0x34>
    }
    return out;
 8003d5a:	8bfb      	ldrh	r3, [r7, #30]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	0800ca28 	.word	0x0800ca28
 8003d68:	0800d690 	.word	0x0800d690
 8003d6c:	0800ca50 	.word	0x0800ca50

08003d70 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	460a      	mov	r2, r1
 8003d7a:	80fb      	strh	r3, [r7, #6]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8003d80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da05      	bge.n	8003d94 <txMakeMessageSessionSpecifier+0x24>
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <txMakeMessageSessionSpecifier+0x54>)
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <txMakeMessageSessionSpecifier+0x58>)
 8003d8c:	21ab      	movs	r1, #171	; 0xab
 8003d8e:	480f      	ldr	r0, [pc, #60]	; (8003dcc <txMakeMessageSessionSpecifier+0x5c>)
 8003d90:	f005 f9b8 	bl	8009104 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d305      	bcc.n	8003da8 <txMakeMessageSessionSpecifier+0x38>
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <txMakeMessageSessionSpecifier+0x60>)
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <txMakeMessageSessionSpecifier+0x58>)
 8003da0:	21ac      	movs	r1, #172	; 0xac
 8003da2:	480a      	ldr	r0, [pc, #40]	; (8003dcc <txMakeMessageSessionSpecifier+0x5c>)
 8003da4:	f005 f9ae 	bl	8009104 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8003db2:	797a      	ldrb	r2, [r7, #5]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4313      	orrs	r3, r2
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	0800ca80 	.word	0x0800ca80
 8003dc8:	0800d698 	.word	0x0800d698
 8003dcc:	0800ca50 	.word	0x0800ca50
 8003dd0:	0800ca94 	.word	0x0800ca94

08003dd4 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	80fb      	strh	r3, [r7, #6]
 8003de6:	4603      	mov	r3, r0
 8003de8:	717b      	strb	r3, [r7, #5]
 8003dea:	460b      	mov	r3, r1
 8003dec:	713b      	strb	r3, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8003df2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da05      	bge.n	8003e06 <txMakeServiceSessionSpecifier+0x32>
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <txMakeServiceSessionSpecifier+0x84>)
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <txMakeServiceSessionSpecifier+0x88>)
 8003dfe:	21b6      	movs	r1, #182	; 0xb6
 8003e00:	4817      	ldr	r0, [pc, #92]	; (8003e60 <txMakeServiceSessionSpecifier+0x8c>)
 8003e02:	f005 f97f 	bl	8009104 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8003e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da05      	bge.n	8003e1a <txMakeServiceSessionSpecifier+0x46>
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <txMakeServiceSessionSpecifier+0x90>)
 8003e10:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <txMakeServiceSessionSpecifier+0x88>)
 8003e12:	21b7      	movs	r1, #183	; 0xb7
 8003e14:	4812      	ldr	r0, [pc, #72]	; (8003e60 <txMakeServiceSessionSpecifier+0x8c>)
 8003e16:	f005 f975 	bl	8009104 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d305      	bcc.n	8003e2e <txMakeServiceSessionSpecifier+0x5a>
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <txMakeServiceSessionSpecifier+0x94>)
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <txMakeServiceSessionSpecifier+0x88>)
 8003e26:	21b8      	movs	r1, #184	; 0xb8
 8003e28:	480d      	ldr	r0, [pc, #52]	; (8003e60 <txMakeServiceSessionSpecifier+0x8c>)
 8003e2a:	f005 f96b 	bl	8009104 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8003e2e:	793a      	ldrb	r2, [r7, #4]
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	01db      	lsls	r3, r3, #7
 8003e34:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8003e3a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003e3c:	797a      	ldrb	r2, [r7, #5]
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d002      	beq.n	8003e48 <txMakeServiceSessionSpecifier+0x74>
 8003e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e46:	e000      	b.n	8003e4a <txMakeServiceSessionSpecifier+0x76>
 8003e48:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8003e4a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	0800ca80 	.word	0x0800ca80
 8003e5c:	0800d6b8 	.word	0x0800d6b8
 8003e60:	0800ca50 	.word	0x0800ca50
 8003e64:	0800caa8 	.word	0x0800caa8
 8003e68:	0800cabc 	.word	0x0800cabc

08003e6c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8003e74:	2340      	movs	r3, #64	; 0x40
 8003e76:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b07      	cmp	r3, #7
 8003e80:	d802      	bhi.n	8003e88 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8003e82:	2308      	movs	r3, #8
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e014      	b.n	8003eb2 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d808      	bhi.n	8003ea2 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8003e90:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <adjustPresentationLayerMTU+0x58>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <adjustPresentationLayerMTU+0x5c>)
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e007      	b.n	8003eb2 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <adjustPresentationLayerMTU+0x58>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <adjustPresentationLayerMTU+0x5c>)
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b01      	subs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	0800d624 	.word	0x0800d624
 8003ec8:	0800d614 	.word	0x0800d614

08003ecc <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <txMakeCANID+0x20>
 8003ee0:	4b60      	ldr	r3, [pc, #384]	; (8004064 <txMakeCANID+0x198>)
 8003ee2:	4a61      	ldr	r2, [pc, #388]	; (8004068 <txMakeCANID+0x19c>)
 8003ee4:	21d8      	movs	r1, #216	; 0xd8
 8003ee6:	4861      	ldr	r0, [pc, #388]	; (800406c <txMakeCANID+0x1a0>)
 8003ee8:	f005 f90c 	bl	8009104 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <txMakeCANID+0x32>
 8003ef2:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <txMakeCANID+0x1a4>)
 8003ef4:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <txMakeCANID+0x19c>)
 8003ef6:	21d9      	movs	r1, #217	; 0xd9
 8003ef8:	485c      	ldr	r0, [pc, #368]	; (800406c <txMakeCANID+0x1a0>)
 8003efa:	f005 f903 	bl	8009104 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8003efe:	f06f 0301 	mvn.w	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d157      	bne.n	8003fbc <txMakeCANID+0xf0>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	791b      	ldrb	r3, [r3, #4]
 8003f10:	2bff      	cmp	r3, #255	; 0xff
 8003f12:	d153      	bne.n	8003fbc <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1c:	d24e      	bcs.n	8003fbc <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	db11      	blt.n	8003f4a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	885b      	ldrh	r3, [r3, #2]
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff1e 	bl	8003d70 <txMakeMessageSessionSpecifier>
 8003f34:	4603      	mov	r3, r0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da75      	bge.n	800402a <txMakeCANID+0x15e>
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <txMakeCANID+0x1a8>)
 8003f40:	4a49      	ldr	r2, [pc, #292]	; (8004068 <txMakeCANID+0x19c>)
 8003f42:	21e1      	movs	r1, #225	; 0xe1
 8003f44:	4849      	ldr	r0, [pc, #292]	; (800406c <txMakeCANID+0x1a0>)
 8003f46:	f005 f8dd 	bl	8009104 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d830      	bhi.n	8003fb4 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <txMakeCANID+0x9e>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <txMakeCANID+0x9e>
 8003f5e:	4b46      	ldr	r3, [pc, #280]	; (8004078 <txMakeCANID+0x1ac>)
 8003f60:	4a41      	ldr	r2, [pc, #260]	; (8004068 <txMakeCANID+0x19c>)
 8003f62:	21e5      	movs	r1, #229	; 0xe5
 8003f64:	4841      	ldr	r0, [pc, #260]	; (800406c <txMakeCANID+0x1a0>)
 8003f66:	f005 f8cd 	bl	8009104 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f72:	f7ff fec5 	bl	8003d00 <crcAdd>
 8003f76:	4603      	mov	r3, r0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	885b      	ldrh	r3, [r3, #2]
 8003f86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff feef 	bl	8003d70 <txMakeMessageSessionSpecifier>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f98:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa0:	d305      	bcc.n	8003fae <txMakeCANID+0xe2>
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <txMakeCANID+0x1b0>)
 8003fa4:	4a30      	ldr	r2, [pc, #192]	; (8004068 <txMakeCANID+0x19c>)
 8003fa6:	21e8      	movs	r1, #232	; 0xe8
 8003fa8:	4830      	ldr	r0, [pc, #192]	; (800406c <txMakeCANID+0x1a0>)
 8003faa:	f005 f8ab 	bl	8009104 <__assert_func>
            out = (int32_t) spec;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003fb2:	e03a      	b.n	800402a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8003fb4:	f06f 0301 	mvn.w	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003fba:	e036      	b.n	800402a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d003      	beq.n	8003fcc <txMakeCANID+0x100>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d12a      	bne.n	8004022 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	791b      	ldrb	r3, [r3, #4]
 8003fd0:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db25      	blt.n	8004022 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	885b      	ldrh	r3, [r3, #2]
 8003fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fde:	d220      	bcs.n	8004022 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db18      	blt.n	800401a <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	f7ff fee8 	bl	8003dd4 <txMakeServiceSessionSpecifier>
 8004004:	4603      	mov	r3, r0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	da0f      	bge.n	800402e <txMakeCANID+0x162>
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <txMakeCANID+0x1a8>)
 8004010:	4a15      	ldr	r2, [pc, #84]	; (8004068 <txMakeCANID+0x19c>)
 8004012:	21f9      	movs	r1, #249	; 0xf9
 8004014:	4815      	ldr	r0, [pc, #84]	; (800406c <txMakeCANID+0x1a0>)
 8004016:	f005 f875 	bl	8009104 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800401a:	f06f 0301 	mvn.w	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8004020:	e005      	b.n	800402e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8004022:	f06f 0301 	mvn.w	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
 8004028:	e002      	b.n	8004030 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800402e:	bf00      	nop
    }

    if (out >= 0)
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	db10      	blt.n	8004058 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b07      	cmp	r3, #7
 8004040:	d807      	bhi.n	8004052 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	069a      	lsls	r2, r3, #26
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	e002      	b.n	8004058 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8004052:	f06f 0301 	mvn.w	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800405a:	4618      	mov	r0, r3
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	0800cad0 	.word	0x0800cad0
 8004068:	0800d684 	.word	0x0800d684
 800406c:	0800ca50 	.word	0x0800ca50
 8004070:	0800cae4 	.word	0x0800cae4
 8004074:	0800cb00 	.word	0x0800cb00
 8004078:	0800cb0c 	.word	0x0800cb0c
 800407c:	0800cb40 	.word	0x0800cb40

08004080 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4623      	mov	r3, r4
 8004090:	71fb      	strb	r3, [r7, #7]
 8004092:	4603      	mov	r3, r0
 8004094:	71bb      	strb	r3, [r7, #6]
 8004096:	460b      	mov	r3, r1
 8004098:	717b      	strb	r3, [r7, #5]
 800409a:	4613      	mov	r3, r2
 800409c:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <txMakeTailByte+0x38>
 80040a4:	797b      	ldrb	r3, [r7, #5]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d006      	beq.n	80040b8 <txMakeTailByte+0x38>
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <txMakeTailByte+0x78>)
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <txMakeTailByte+0x7c>)
 80040ae:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80040b2:	4813      	ldr	r0, [pc, #76]	; (8004100 <txMakeTailByte+0x80>)
 80040b4:	f005 f826 	bl	8009104 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <txMakeTailByte+0x42>
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	e000      	b.n	80040c4 <txMakeTailByte+0x44>
 80040c2:	2200      	movs	r2, #0
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <txMakeTailByte+0x4e>
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	e000      	b.n	80040d0 <txMakeTailByte+0x50>
 80040ce:	2300      	movs	r3, #0
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 80040d4:	797a      	ldrb	r2, [r7, #5]
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d001      	beq.n	80040de <txMakeTailByte+0x5e>
 80040da:	2220      	movs	r2, #32
 80040dc:	e000      	b.n	80040e0 <txMakeTailByte+0x60>
 80040de:	2200      	movs	r2, #0
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 80040e4:	793b      	ldrb	r3, [r7, #4]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80040ec:	4313      	orrs	r3, r2
 80040ee:	b2db      	uxtb	r3, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}
 80040f8:	0800cb5c 	.word	0x0800cb5c
 80040fc:	0800d72c 	.word	0x0800d72c
 8004100:	0800ca50 	.word	0x0800ca50

08004104 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d906      	bls.n	8004120 <txRoundFramePayloadSizeUp+0x1c>
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <txRoundFramePayloadSizeUp+0x4c>)
 8004114:	4a0f      	ldr	r2, [pc, #60]	; (8004154 <txRoundFramePayloadSizeUp+0x50>)
 8004116:	f240 1123 	movw	r1, #291	; 0x123
 800411a:	480f      	ldr	r0, [pc, #60]	; (8004158 <txRoundFramePayloadSizeUp+0x54>)
 800411c:	f004 fff2 	bl	8009104 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8004120:	4a0e      	ldr	r2, [pc, #56]	; (800415c <txRoundFramePayloadSizeUp+0x58>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d906      	bls.n	800413e <txRoundFramePayloadSizeUp+0x3a>
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <txRoundFramePayloadSizeUp+0x5c>)
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <txRoundFramePayloadSizeUp+0x50>)
 8004134:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004138:	4807      	ldr	r0, [pc, #28]	; (8004158 <txRoundFramePayloadSizeUp+0x54>)
 800413a:	f004 ffe3 	bl	8009104 <__assert_func>
    return CanardCANDLCToLength[y];
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <txRoundFramePayloadSizeUp+0x60>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	781b      	ldrb	r3, [r3, #0]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	0800cb84 	.word	0x0800cb84
 8004154:	0800d6fc 	.word	0x0800d6fc
 8004158:	0800ca50 	.word	0x0800ca50
 800415c:	0800d624 	.word	0x0800d624
 8004160:	0800cbcc 	.word	0x0800cbcc
 8004164:	0800d614 	.word	0x0800d614

08004168 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <txAllocateQueueItem+0x22>
 800417c:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <txAllocateQueueItem+0x94>)
 800417e:	4a20      	ldr	r2, [pc, #128]	; (8004200 <txAllocateQueueItem+0x98>)
 8004180:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004184:	481f      	ldr	r0, [pc, #124]	; (8004204 <txAllocateQueueItem+0x9c>)
 8004186:	f004 ffbd 	bl	8009104 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <txAllocateQueueItem+0x36>
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <txAllocateQueueItem+0xa0>)
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <txAllocateQueueItem+0x98>)
 8004194:	f240 1131 	movw	r1, #305	; 0x131
 8004198:	481a      	ldr	r0, [pc, #104]	; (8004204 <txAllocateQueueItem+0x9c>)
 800419a:	f004 ffb3 	bl	8009104 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	3230      	adds	r2, #48	; 0x30
 80041a6:	4611      	mov	r1, r2
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	4798      	blx	r3
 80041ac:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01e      	beq.n	80041f2 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	621a      	str	r2, [r3, #32]
    }
    return out;
 80041f2:	697b      	ldr	r3, [r7, #20]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	0800cc14 	.word	0x0800cc14
 8004200:	0800d718 	.word	0x0800d718
 8004204:	0800ca50 	.word	0x0800ca50
 8004208:	0800cc28 	.word	0x0800cc28

0800420c <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <txAVLPredicate+0x1e>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <txAVLPredicate+0x2c>
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <txAVLPredicate+0x48>)
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <txAVLPredicate+0x4c>)
 800422e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004232:	480a      	ldr	r0, [pc, #40]	; (800425c <txAVLPredicate+0x50>)
 8004234:	f004 ff66 	bl	8009104 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	429a      	cmp	r2, r3
 8004242:	d301      	bcc.n	8004248 <txAVLPredicate+0x3c>
 8004244:	2301      	movs	r3, #1
 8004246:	e001      	b.n	800424c <txAVLPredicate+0x40>
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0800cc3c 	.word	0x0800cc3c
 8004258:	0800d6ec 	.word	0x0800d6ec
 800425c:	0800ca50 	.word	0x0800ca50

08004260 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b08d      	sub	sp, #52	; 0x34
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <txPushSingleFrame+0x22>
 8004274:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <txPushSingleFrame+0x188>)
 8004276:	4a5d      	ldr	r2, [pc, #372]	; (80043ec <txPushSingleFrame+0x18c>)
 8004278:	f240 1159 	movw	r1, #345	; 0x159
 800427c:	485c      	ldr	r0, [pc, #368]	; (80043f0 <txPushSingleFrame+0x190>)
 800427e:	f004 ff41 	bl	8009104 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8004282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <txPushSingleFrame+0x3c>
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <txPushSingleFrame+0x3c>
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <txPushSingleFrame+0x194>)
 8004290:	4a56      	ldr	r2, [pc, #344]	; (80043ec <txPushSingleFrame+0x18c>)
 8004292:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004296:	4856      	ldr	r0, [pc, #344]	; (80043f0 <txPushSingleFrame+0x190>)
 8004298:	f004 ff34 	bl	8009104 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	3301      	adds	r3, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff2f 	bl	8004104 <txRoundFramePayloadSizeUp>
 80042a6:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 80042a8:	6a3a      	ldr	r2, [r7, #32]
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d806      	bhi.n	80042be <txPushSingleFrame+0x5e>
 80042b0:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <txPushSingleFrame+0x198>)
 80042b2:	4a4e      	ldr	r2, [pc, #312]	; (80043ec <txPushSingleFrame+0x18c>)
 80042b4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80042b8:	484d      	ldr	r0, [pc, #308]	; (80043f0 <txPushSingleFrame+0x190>)
 80042ba:	f004 ff23 	bl	8009104 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	4413      	add	r3, r2
 80042ce:	3301      	adds	r3, #1
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d006      	beq.n	80042e4 <txPushSingleFrame+0x84>
 80042d6:	4b49      	ldr	r3, [pc, #292]	; (80043fc <txPushSingleFrame+0x19c>)
 80042d8:	4a44      	ldr	r2, [pc, #272]	; (80043ec <txPushSingleFrame+0x18c>)
 80042da:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80042de:	4844      	ldr	r0, [pc, #272]	; (80043f0 <txPushSingleFrame+0x190>)
 80042e0:	f004 ff10 	bl	8009104 <__assert_func>
    int32_t       out = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d209      	bcs.n	8004308 <txPushSingleFrame+0xa8>
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	f7ff ff32 	bl	8004168 <txAllocateQueueItem>
 8004304:	4603      	mov	r3, r0
 8004306:	e000      	b.n	800430a <txPushSingleFrame+0xaa>
 8004308:	2300      	movs	r3, #0
    TxItem* const tqi =
 800430a:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d054      	beq.n	80043bc <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8004312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <txPushSingleFrame+0xcc>
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <txPushSingleFrame+0x1a0>)
 8004320:	4a32      	ldr	r2, [pc, #200]	; (80043ec <txPushSingleFrame+0x18c>)
 8004322:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8004326:	4832      	ldr	r0, [pc, #200]	; (80043f0 <txPushSingleFrame+0x190>)
 8004328:	f004 feec 	bl	8009104 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3330      	adds	r3, #48	; 0x30
 8004330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004334:	4618      	mov	r0, r3
 8004336:	f005 ff3e 	bl	800a1b6 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800433a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433c:	3330      	adds	r3, #48	; 0x30
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f005 fe84 	bl	800a054 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	1e5c      	subs	r4, r3, #1
 8004350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004354:	2201      	movs	r2, #1
 8004356:	2101      	movs	r1, #1
 8004358:	2001      	movs	r0, #1
 800435a:	f7ff fe91 	bl	8004080 <txMakeTailByte>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	4423      	add	r3, r4
 8004366:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f103 000c 	add.w	r0, r3, #12
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <txPushSingleFrame+0x1a4>)
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <txPushSingleFrame+0x1a8>)
 8004376:	f7ff fae7 	bl	8003948 <cavlSearch>
 800437a:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	d006      	beq.n	8004392 <txPushSingleFrame+0x132>
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <txPushSingleFrame+0x1ac>)
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <txPushSingleFrame+0x18c>)
 8004388:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800438c:	4818      	ldr	r0, [pc, #96]	; (80043f0 <txPushSingleFrame+0x190>)
 800438e:	f004 feb9 	bl	8009104 <__assert_func>
        que->size++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d906      	bls.n	80043b6 <txPushSingleFrame+0x156>
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <txPushSingleFrame+0x1b0>)
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <txPushSingleFrame+0x18c>)
 80043ac:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80043b0:	480f      	ldr	r0, [pc, #60]	; (80043f0 <txPushSingleFrame+0x190>)
 80043b2:	f004 fea7 	bl	8009104 <__assert_func>
        out = 1;  // One frame enqueued.
 80043b6:	2301      	movs	r3, #1
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	e002      	b.n	80043c2 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80043bc:	f06f 0302 	mvn.w	r3, #2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	db09      	blt.n	80043dc <txPushSingleFrame+0x17c>
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d006      	beq.n	80043dc <txPushSingleFrame+0x17c>
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <txPushSingleFrame+0x1b4>)
 80043d0:	4a06      	ldr	r2, [pc, #24]	; (80043ec <txPushSingleFrame+0x18c>)
 80043d2:	f240 117b 	movw	r1, #379	; 0x17b
 80043d6:	4806      	ldr	r0, [pc, #24]	; (80043f0 <txPushSingleFrame+0x190>)
 80043d8:	f004 fe94 	bl	8009104 <__assert_func>
    return out;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043de:	4618      	mov	r0, r3
 80043e0:	372c      	adds	r7, #44	; 0x2c
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	0800cc14 	.word	0x0800cc14
 80043ec:	0800d6d8 	.word	0x0800d6d8
 80043f0:	0800ca50 	.word	0x0800ca50
 80043f4:	0800cc70 	.word	0x0800cc70
 80043f8:	0800cca0 	.word	0x0800cca0
 80043fc:	0800ccc4 	.word	0x0800ccc4
 8004400:	0800cd00 	.word	0x0800cd00
 8004404:	08003ca9 	.word	0x08003ca9
 8004408:	0800420d 	.word	0x0800420d
 800440c:	0800cd18 	.word	0x0800cd18
 8004410:	0800cd30 	.word	0x0800cd30
 8004414:	0800cd4c 	.word	0x0800cd4c

08004418 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b093      	sub	sp, #76	; 0x4c
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <txGenerateMultiFrameChain+0x20>
 800442a:	4b93      	ldr	r3, [pc, #588]	; (8004678 <txGenerateMultiFrameChain+0x260>)
 800442c:	4a93      	ldr	r2, [pc, #588]	; (800467c <txGenerateMultiFrameChain+0x264>)
 800442e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004432:	4893      	ldr	r0, [pc, #588]	; (8004680 <txGenerateMultiFrameChain+0x268>)
 8004434:	f004 fe66 	bl	8009104 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <txGenerateMultiFrameChain+0x34>
 800443e:	4b91      	ldr	r3, [pc, #580]	; (8004684 <txGenerateMultiFrameChain+0x26c>)
 8004440:	4a8e      	ldr	r2, [pc, #568]	; (800467c <txGenerateMultiFrameChain+0x264>)
 8004442:	f240 1189 	movw	r1, #393	; 0x189
 8004446:	488e      	ldr	r0, [pc, #568]	; (8004680 <txGenerateMultiFrameChain+0x268>)
 8004448:	f004 fe5c 	bl	8009104 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800444c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d806      	bhi.n	8004462 <txGenerateMultiFrameChain+0x4a>
 8004454:	4b8c      	ldr	r3, [pc, #560]	; (8004688 <txGenerateMultiFrameChain+0x270>)
 8004456:	4a89      	ldr	r2, [pc, #548]	; (800467c <txGenerateMultiFrameChain+0x264>)
 8004458:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800445c:	4888      	ldr	r0, [pc, #544]	; (8004680 <txGenerateMultiFrameChain+0x268>)
 800445e:	f004 fe51 	bl	8009104 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8004462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <txGenerateMultiFrameChain+0x5e>
 8004468:	4b88      	ldr	r3, [pc, #544]	; (800468c <txGenerateMultiFrameChain+0x274>)
 800446a:	4a84      	ldr	r2, [pc, #528]	; (800467c <txGenerateMultiFrameChain+0x264>)
 800446c:	f240 118b 	movw	r1, #395	; 0x18b
 8004470:	4883      	ldr	r0, [pc, #524]	; (8004680 <txGenerateMultiFrameChain+0x268>)
 8004472:	f004 fe47 	bl	8009104 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8004482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004484:	3302      	adds	r3, #2
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800448c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800448e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004490:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004494:	f7ff fc34 	bl	8003d00 <crcAdd>
 8004498:	4603      	mov	r3, r0
 800449a:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 80044a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 80044a6:	e0d4      	b.n	8004652 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d908      	bls.n	80044cc <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 80044ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fe1e 	bl	8004104 <txRoundFramePayloadSizeUp>
 80044c8:	4603      	mov	r3, r0
 80044ca:	e001      	b.n	80044d0 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044dc:	68b8      	ldr	r0, [r7, #8]
 80044de:	f7ff fe43 	bl	8004168 <txAllocateQueueItem>
 80044e2:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e002      	b.n	80044f6 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80ae 	beq.w	800465e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	3b01      	subs	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800450c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004510:	429a      	cmp	r2, r3
 8004512:	d21c      	bcs.n	800454e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8004514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800451c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d901      	bls.n	8004528 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3330      	adds	r3, #48	; 0x30
 800452c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004530:	4618      	mov	r0, r3
 8004532:	f005 fe40 	bl	800a1b6 <memcpy>
            frame_offset = frame_offset + move_size;
 8004536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	4413      	add	r3, r2
 800453c:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800453e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	4413      	add	r3, r2
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 8004546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	4413      	add	r3, r2
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800454e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004552:	429a      	cmp	r2, r3
 8004554:	d343      	bcc.n	80045de <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8004556:	e00f      	b.n	8004578 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	4413      	add	r3, r2
 800455e:	3330      	adds	r3, #48	; 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	3301      	adds	r3, #1
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800456a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fba6 	bl	8003cc0 <crcAddByte>
 8004574:	4603      	mov	r3, r0
 8004576:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	3302      	adds	r3, #2
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	429a      	cmp	r2, r3
 8004580:	d8ea      	bhi.n	8004558 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8004582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d213      	bcs.n	80045b2 <txGenerateMultiFrameChain+0x19a>
 800458a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800458e:	429a      	cmp	r2, r3
 8004590:	d10f      	bne.n	80045b2 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8004592:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b29b      	uxth	r3, r3
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	b2d9      	uxtb	r1, r3
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	4413      	add	r3, r2
 80045a0:	3330      	adds	r3, #48	; 0x30
 80045a2:	460a      	mov	r2, r1
 80045a4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	3301      	adds	r3, #1
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 80045ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ae:	3301      	adds	r3, #1
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 80045b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d211      	bcs.n	80045de <txGenerateMultiFrameChain+0x1c6>
 80045ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045be:	429a      	cmp	r2, r3
 80045c0:	d90d      	bls.n	80045de <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	4413      	add	r3, r2
 80045cc:	3330      	adds	r3, #48	; 0x30
 80045ce:	460a      	mov	r2, r1
 80045d0:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	3301      	adds	r3, #1
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	3301      	adds	r3, #1
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d006      	beq.n	80045f8 <txGenerateMultiFrameChain+0x1e0>
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <txGenerateMultiFrameChain+0x278>)
 80045ec:	4a23      	ldr	r2, [pc, #140]	; (800467c <txGenerateMultiFrameChain+0x264>)
 80045ee:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80045f2:	4823      	ldr	r0, [pc, #140]	; (8004680 <txGenerateMultiFrameChain+0x268>)
 80045f4:	f004 fd86 	bl	8009104 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2d8      	uxtb	r0, r3
 8004606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	429a      	cmp	r2, r3
 800460c:	bf2c      	ite	cs
 800460e:	2301      	movcs	r3, #1
 8004610:	2300      	movcc	r3, #0
 8004612:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8004614:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8004616:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800461a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800461e:	f7ff fd2f 	bl	8004080 <txMakeTailByte>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	4423      	add	r3, r4
 800462a:	3330      	adds	r3, #48	; 0x30
 800462c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800462e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f083 0301 	eor.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004646:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 8004652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	429a      	cmp	r2, r3
 8004658:	f4ff af26 	bcc.w	80044a8 <txGenerateMultiFrameChain+0x90>
 800465c:	e000      	b.n	8004660 <txGenerateMultiFrameChain+0x248>
            break;
 800465e:	bf00      	nop
    }
    return out;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	461c      	mov	r4, r3
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800466c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	3744      	adds	r7, #68	; 0x44
 8004674:	46bd      	mov	sp, r7
 8004676:	bd90      	pop	{r4, r7, pc}
 8004678:	0800cc14 	.word	0x0800cc14
 800467c:	0800d7a8 	.word	0x0800d7a8
 8004680:	0800ca50 	.word	0x0800ca50
 8004684:	0800cd64 	.word	0x0800cd64
 8004688:	0800cd80 	.word	0x0800cd80
 800468c:	0800cd00 	.word	0x0800cd00
 8004690:	0800cda8 	.word	0x0800cda8

08004694 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b094      	sub	sp, #80	; 0x50
 8004698:	af06      	add	r7, sp, #24
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <txPushMultiFrame+0x18>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <txPushMultiFrame+0x26>
 80046ac:	4b65      	ldr	r3, [pc, #404]	; (8004844 <txPushMultiFrame+0x1b0>)
 80046ae:	4a66      	ldr	r2, [pc, #408]	; (8004848 <txPushMultiFrame+0x1b4>)
 80046b0:	f240 11ed 	movw	r1, #493	; 0x1ed
 80046b4:	4865      	ldr	r0, [pc, #404]	; (800484c <txPushMultiFrame+0x1b8>)
 80046b6:	f004 fd25 	bl	8009104 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <txPushMultiFrame+0x3a>
 80046c0:	4b63      	ldr	r3, [pc, #396]	; (8004850 <txPushMultiFrame+0x1bc>)
 80046c2:	4a61      	ldr	r2, [pc, #388]	; (8004848 <txPushMultiFrame+0x1b4>)
 80046c4:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80046c8:	4860      	ldr	r0, [pc, #384]	; (800484c <txPushMultiFrame+0x1b8>)
 80046ca:	f004 fd1b 	bl	8009104 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80046ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d806      	bhi.n	80046e4 <txPushMultiFrame+0x50>
 80046d6:	4b5f      	ldr	r3, [pc, #380]	; (8004854 <txPushMultiFrame+0x1c0>)
 80046d8:	4a5b      	ldr	r2, [pc, #364]	; (8004848 <txPushMultiFrame+0x1b4>)
 80046da:	f240 11ef 	movw	r1, #495	; 0x1ef
 80046de:	485b      	ldr	r0, [pc, #364]	; (800484c <txPushMultiFrame+0x1b8>)
 80046e0:	f004 fd10 	bl	8009104 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 80046e4:	2300      	movs	r3, #0
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 80046e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ea:	3302      	adds	r3, #2
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 80046ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	2b01      	cmp	r3, #1
 8004702:	d806      	bhi.n	8004712 <txPushMultiFrame+0x7e>
 8004704:	4b54      	ldr	r3, [pc, #336]	; (8004858 <txPushMultiFrame+0x1c4>)
 8004706:	4a50      	ldr	r2, [pc, #320]	; (8004848 <txPushMultiFrame+0x1b4>)
 8004708:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800470c:	484f      	ldr	r0, [pc, #316]	; (800484c <txPushMultiFrame+0x1b8>)
 800470e:	f004 fcf9 	bl	8009104 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	441a      	add	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d87b      	bhi.n	800481a <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8004722:	f107 0010 	add.w	r0, r7, #16
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800473c:	e9cd 2300 	strd	r2, r3, [sp]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	f7ff fe68 	bl	8004418 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d051      	beq.n	80047f2 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f103 000c 	add.w	r0, r3, #12
 8004758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800475a:	4b40      	ldr	r3, [pc, #256]	; (800485c <txPushMultiFrame+0x1c8>)
 800475c:	4a40      	ldr	r2, [pc, #256]	; (8004860 <txPushMultiFrame+0x1cc>)
 800475e:	f7ff f8f3 	bl	8003948 <cavlSearch>
 8004762:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d006      	beq.n	800477a <txPushMultiFrame+0xe6>
 800476c:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <txPushMultiFrame+0x1d0>)
 800476e:	4a36      	ldr	r2, [pc, #216]	; (8004848 <txPushMultiFrame+0x1b4>)
 8004770:	f240 2106 	movw	r1, #518	; 0x206
 8004774:	4835      	ldr	r0, [pc, #212]	; (800484c <txPushMultiFrame+0x1b8>)
 8004776:	f004 fcc5 	bl	8009104 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <txPushMultiFrame+0xfc>
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <txPushMultiFrame+0x1d4>)
 8004784:	4a30      	ldr	r2, [pc, #192]	; (8004848 <txPushMultiFrame+0x1b4>)
 8004786:	f240 2107 	movw	r1, #519	; 0x207
 800478a:	4830      	ldr	r0, [pc, #192]	; (800484c <txPushMultiFrame+0x1b8>)
 800478c:	f004 fcba 	bl	8009104 <__assert_func>
                next = next->next_in_transfer;
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1da      	bne.n	8004752 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d006      	beq.n	80047b2 <txPushMultiFrame+0x11e>
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <txPushMultiFrame+0x1d8>)
 80047a6:	4a28      	ldr	r2, [pc, #160]	; (8004848 <txPushMultiFrame+0x1b4>)
 80047a8:	f240 210a 	movw	r1, #522	; 0x20a
 80047ac:	4827      	ldr	r0, [pc, #156]	; (800484c <txPushMultiFrame+0x1b8>)
 80047ae:	f004 fca9 	bl	8009104 <__assert_func>
            que->size += sq.size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d906      	bls.n	80047d8 <txPushMultiFrame+0x144>
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <txPushMultiFrame+0x1dc>)
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <txPushMultiFrame+0x1b4>)
 80047ce:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80047d2:	481e      	ldr	r0, [pc, #120]	; (800484c <txPushMultiFrame+0x1b8>)
 80047d4:	f004 fc96 	bl	8009104 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da06      	bge.n	80047ec <txPushMultiFrame+0x158>
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <txPushMultiFrame+0x1e0>)
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <txPushMultiFrame+0x1b4>)
 80047e2:	f240 210d 	movw	r1, #525	; 0x20d
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <txPushMultiFrame+0x1b8>)
 80047e8:	f004 fc8c 	bl	8009104 <__assert_func>
            out = (int32_t) sq.size;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
 80047f0:	e016      	b.n	8004820 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 80047fc:	e009      	b.n	8004812 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	4798      	blx	r3
                head = next;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f2      	bne.n	80047fe <txPushMultiFrame+0x16a>
 8004818:	e002      	b.n	8004820 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800481a:	f06f 0302 	mvn.w	r3, #2
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	db09      	blt.n	800483a <txPushMultiFrame+0x1a6>
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	2b01      	cmp	r3, #1
 800482a:	dc06      	bgt.n	800483a <txPushMultiFrame+0x1a6>
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <txPushMultiFrame+0x1e4>)
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <txPushMultiFrame+0x1b4>)
 8004830:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004834:	4805      	ldr	r0, [pc, #20]	; (800484c <txPushMultiFrame+0x1b8>)
 8004836:	f004 fc65 	bl	8009104 <__assert_func>
    return out;
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800483c:	4618      	mov	r0, r3
 800483e:	3738      	adds	r7, #56	; 0x38
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0800cde4 	.word	0x0800cde4
 8004848:	0800d794 	.word	0x0800d794
 800484c:	0800ca50 	.word	0x0800ca50
 8004850:	0800cd64 	.word	0x0800cd64
 8004854:	0800cd80 	.word	0x0800cd80
 8004858:	0800ce14 	.word	0x0800ce14
 800485c:	08003ca9 	.word	0x08003ca9
 8004860:	0800420d 	.word	0x0800420d
 8004864:	0800ce24 	.word	0x0800ce24
 8004868:	0800ce38 	.word	0x0800ce38
 800486c:	0800ce54 	.word	0x0800ce54
 8004870:	0800cd30 	.word	0x0800cd30
 8004874:	0800ce6c 	.word	0x0800ce6c
 8004878:	0800ce90 	.word	0x0800ce90

0800487c <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <rxTryParseFrame+0x22>
 8004890:	4b96      	ldr	r3, [pc, #600]	; (8004aec <rxTryParseFrame+0x270>)
 8004892:	4a97      	ldr	r2, [pc, #604]	; (8004af0 <rxTryParseFrame+0x274>)
 8004894:	f240 214f 	movw	r1, #591	; 0x24f
 8004898:	4896      	ldr	r0, [pc, #600]	; (8004af4 <rxTryParseFrame+0x278>)
 800489a:	f004 fc33 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a6:	d306      	bcc.n	80048b6 <rxTryParseFrame+0x3a>
 80048a8:	4b93      	ldr	r3, [pc, #588]	; (8004af8 <rxTryParseFrame+0x27c>)
 80048aa:	4a91      	ldr	r2, [pc, #580]	; (8004af0 <rxTryParseFrame+0x274>)
 80048ac:	f44f 7114 	mov.w	r1, #592	; 0x250
 80048b0:	4890      	ldr	r0, [pc, #576]	; (8004af4 <rxTryParseFrame+0x278>)
 80048b2:	f004 fc27 	bl	8009104 <__assert_func>
    CANARD_ASSERT(out != NULL);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <rxTryParseFrame+0x4e>
 80048bc:	4b8f      	ldr	r3, [pc, #572]	; (8004afc <rxTryParseFrame+0x280>)
 80048be:	4a8c      	ldr	r2, [pc, #560]	; (8004af0 <rxTryParseFrame+0x274>)
 80048c0:	f240 2151 	movw	r1, #593	; 0x251
 80048c4:	488b      	ldr	r0, [pc, #556]	; (8004af4 <rxTryParseFrame+0x278>)
 80048c6:	f004 fc1d 	bl	8009104 <__assert_func>
    bool valid = false;
 80048ca:	2300      	movs	r3, #0
 80048cc:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8105 	beq.w	8004ae2 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <rxTryParseFrame+0x72>
 80048e0:	4b87      	ldr	r3, [pc, #540]	; (8004b00 <rxTryParseFrame+0x284>)
 80048e2:	4a83      	ldr	r2, [pc, #524]	; (8004af0 <rxTryParseFrame+0x274>)
 80048e4:	f240 2155 	movw	r1, #597	; 0x255
 80048e8:	4882      	ldr	r0, [pc, #520]	; (8004af4 <rxTryParseFrame+0x278>)
 80048ea:	f004 fc0b 	bl	8009104 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f4:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b2da      	uxtb	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004916:	b2da      	uxtb	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d128      	bne.n	8004978 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2200      	movs	r2, #0
 800492a:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004936:	b29a      	uxth	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	22ff      	movs	r2, #255	; 0xff
 8004950:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <rxTryParseFrame+0xee>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <rxTryParseFrame+0xee>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <rxTryParseFrame+0xf0>
 800496a:	2300      	movs	r3, #0
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	7ffb      	ldrb	r3, [r7, #31]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e02c      	b.n	80049d2 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <rxTryParseFrame+0x10a>
 8004982:	2202      	movs	r2, #2
 8004984:	e000      	b.n	8004988 <rxTryParseFrame+0x10c>
 8004986:	2201      	movs	r2, #1
            out->transfer_kind =
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	0b9b      	lsrs	r3, r3, #14
 8004990:	b29b      	uxth	r3, r3
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	b29a      	uxth	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	09db      	lsrs	r3, r3, #7
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <rxTryParseFrame+0x14a>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	7b1a      	ldrb	r2, [r3, #12]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	7b5b      	ldrb	r3, [r3, #13]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <rxTryParseFrame+0x14a>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <rxTryParseFrame+0x14c>
 80049c6:	2300      	movs	r3, #0
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 80049fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8004a34:	7ffb      	ldrb	r3, [r7, #31]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <rxTryParseFrame+0x1d8>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	7bdb      	ldrb	r3, [r3, #15]
 8004a3e:	f083 0301 	eor.w	r3, r3, #1
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <rxTryParseFrame+0x1d4>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	7c5b      	ldrb	r3, [r3, #17]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <rxTryParseFrame+0x1d8>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <rxTryParseFrame+0x1da>
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00d      	beq.n	8004a82 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	7c1b      	ldrb	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <rxTryParseFrame+0x202>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	7b1b      	ldrb	r3, [r3, #12]
 8004a7a:	2bff      	cmp	r3, #255	; 0xff
 8004a7c:	d001      	beq.n	8004a82 <rxTryParseFrame+0x206>
        valid = valid &&
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <rxTryParseFrame+0x208>
 8004a82:	2300      	movs	r3, #0
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <rxTryParseFrame+0x22c>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d803      	bhi.n	8004aa4 <rxTryParseFrame+0x228>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7c1b      	ldrb	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <rxTryParseFrame+0x22c>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <rxTryParseFrame+0x22e>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	7ffb      	ldrb	r3, [r7, #31]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8004ab4:	7ffb      	ldrb	r3, [r7, #31]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <rxTryParseFrame+0x25a>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <rxTryParseFrame+0x256>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	7bdb      	ldrb	r3, [r3, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <rxTryParseFrame+0x25a>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	7c1b      	ldrb	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <rxTryParseFrame+0x25a>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <rxTryParseFrame+0x25c>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	0800cea8 	.word	0x0800cea8
 8004af0:	0800d7e4 	.word	0x0800d7e4
 8004af4:	0800ca50 	.word	0x0800ca50
 8004af8:	0800cec0 	.word	0x0800cec0
 8004afc:	0800cef0 	.word	0x0800cef0
 8004b00:	0800cf04 	.word	0x0800cf04

08004b04 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <rxInitTransferMetadataFromFrame+0x1e>
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <rxInitTransferMetadataFromFrame+0x78>)
 8004b16:	4a1a      	ldr	r2, [pc, #104]	; (8004b80 <rxInitTransferMetadataFromFrame+0x7c>)
 8004b18:	f44f 7124 	mov.w	r1, #656	; 0x290
 8004b1c:	4819      	ldr	r0, [pc, #100]	; (8004b84 <rxInitTransferMetadataFromFrame+0x80>)
 8004b1e:	f004 faf1 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <rxInitTransferMetadataFromFrame+0x34>
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <rxInitTransferMetadataFromFrame+0x84>)
 8004b2c:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <rxInitTransferMetadataFromFrame+0x7c>)
 8004b2e:	f240 2191 	movw	r1, #657	; 0x291
 8004b32:	4814      	ldr	r0, [pc, #80]	; (8004b84 <rxInitTransferMetadataFromFrame+0x80>)
 8004b34:	f004 fae6 	bl	8009104 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <rxInitTransferMetadataFromFrame+0x48>
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <rxInitTransferMetadataFromFrame+0x88>)
 8004b40:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <rxInitTransferMetadataFromFrame+0x7c>)
 8004b42:	f240 2192 	movw	r1, #658	; 0x292
 8004b46:	480f      	ldr	r0, [pc, #60]	; (8004b84 <rxInitTransferMetadataFromFrame+0x80>)
 8004b48:	f004 fadc 	bl	8009104 <__assert_func>
    out_transfer->priority       = frame->priority;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7a1a      	ldrb	r2, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7a5a      	ldrb	r2, [r3, #9]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	895a      	ldrh	r2, [r3, #10]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7b1a      	ldrb	r2, [r3, #12]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7b9a      	ldrb	r2, [r3, #14]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	715a      	strb	r2, [r3, #5]
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	0800cea8 	.word	0x0800cea8
 8004b80:	0800d890 	.word	0x0800d890
 8004b84:	0800ca50 	.word	0x0800ca50
 8004b88:	0800cf04 	.word	0x0800cf04
 8004b8c:	0800cf24 	.word	0x0800cf24

08004b90 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	460a      	mov	r2, r1
 8004b9a:	71fb      	strb	r3, [r7, #7]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b1f      	cmp	r3, #31
 8004ba4:	d906      	bls.n	8004bb4 <rxComputeTransferIDDifference+0x24>
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <rxComputeTransferIDDifference+0x6c>)
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <rxComputeTransferIDDifference+0x70>)
 8004baa:	f240 219d 	movw	r1, #669	; 0x29d
 8004bae:	4815      	ldr	r0, [pc, #84]	; (8004c04 <rxComputeTransferIDDifference+0x74>)
 8004bb0:	f004 faa8 	bl	8009104 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8004bb4:	79bb      	ldrb	r3, [r7, #6]
 8004bb6:	2b1f      	cmp	r3, #31
 8004bb8:	d906      	bls.n	8004bc8 <rxComputeTransferIDDifference+0x38>
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <rxComputeTransferIDDifference+0x78>)
 8004bbc:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <rxComputeTransferIDDifference+0x70>)
 8004bbe:	f240 219e 	movw	r1, #670	; 0x29e
 8004bc2:	4810      	ldr	r0, [pc, #64]	; (8004c04 <rxComputeTransferIDDifference+0x74>)
 8004bc4:	f004 fa9e 	bl	8009104 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	79bb      	ldrb	r3, [r7, #6]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8004bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da07      	bge.n	8004bee <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 8004bde:	2320      	movs	r3, #32
 8004be0:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8004be2:	7b7b      	ldrb	r3, [r7, #13]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	4413      	add	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	b2db      	uxtb	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	0800cf40 	.word	0x0800cf40
 8004c00:	0800d82c 	.word	0x0800d82c
 8004c04:	0800ca50 	.word	0x0800ca50
 8004c08:	0800cf58 	.word	0x0800cf58

08004c0c <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <rxSessionWritePayload+0x22>
 8004c20:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <rxSessionWritePayload+0x1b4>)
 8004c22:	4a68      	ldr	r2, [pc, #416]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004c24:	f240 21ae 	movw	r1, #686	; 0x2ae
 8004c28:	4867      	ldr	r0, [pc, #412]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004c2a:	f004 fa6b 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <rxSessionWritePayload+0x36>
 8004c34:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <rxSessionWritePayload+0x1c0>)
 8004c36:	4a63      	ldr	r2, [pc, #396]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004c38:	f240 21af 	movw	r1, #687	; 0x2af
 8004c3c:	4862      	ldr	r0, [pc, #392]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004c3e:	f004 fa61 	bl	8009104 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <rxSessionWritePayload+0x50>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <rxSessionWritePayload+0x50>
 8004c4e:	4b60      	ldr	r3, [pc, #384]	; (8004dd0 <rxSessionWritePayload+0x1c4>)
 8004c50:	4a5c      	ldr	r2, [pc, #368]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004c52:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8004c56:	485c      	ldr	r0, [pc, #368]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004c58:	f004 fa54 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d206      	bcs.n	8004c74 <rxSessionWritePayload+0x68>
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <rxSessionWritePayload+0x1c8>)
 8004c68:	4a56      	ldr	r2, [pc, #344]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004c6a:	f240 21b1 	movw	r1, #689	; 0x2b1
 8004c6e:	4856      	ldr	r0, [pc, #344]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004c70:	f004 fa48 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d906      	bls.n	8004c8e <rxSessionWritePayload+0x82>
 8004c80:	4b55      	ldr	r3, [pc, #340]	; (8004dd8 <rxSessionWritePayload+0x1cc>)
 8004c82:	4a50      	ldr	r2, [pc, #320]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004c84:	f240 21b2 	movw	r1, #690	; 0x2b2
 8004c88:	484f      	ldr	r0, [pc, #316]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004c8a:	f004 fa3b 	bl	8009104 <__assert_func>

    rxs->total_payload_size += payload_size;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	441a      	add	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <rxSessionWritePayload+0xc2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <rxSessionWritePayload+0xb2>
 8004cb0:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <rxSessionWritePayload+0x1d0>)
 8004cb2:	4a44      	ldr	r2, [pc, #272]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004cb4:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004cb8:	4843      	ldr	r0, [pc, #268]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004cba:	f004 fa23 	bl	8009104 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	4798      	blx	r3
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04e      	beq.n	8004d78 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d229      	bcs.n	8004d40 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d206      	bcs.n	8004d04 <rxSessionWritePayload+0xf8>
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <rxSessionWritePayload+0x1c8>)
 8004cf8:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004cfa:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8004cfe:	4832      	ldr	r0, [pc, #200]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004d00:	f004 fa00 	bl	8009104 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d006      	beq.n	8004d2a <rxSessionWritePayload+0x11e>
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <rxSessionWritePayload+0x1d4>)
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004d20:	f240 21c6 	movw	r1, #710	; 0x2c6
 8004d24:	4828      	ldr	r0, [pc, #160]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004d26:	f004 f9ed 	bl	8009104 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d306      	bcc.n	8004d40 <rxSessionWritePayload+0x134>
 8004d32:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <rxSessionWritePayload+0x1d8>)
 8004d34:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004d36:	f240 21c7 	movw	r1, #711	; 0x2c7
 8004d3a:	4823      	ldr	r0, [pc, #140]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004d3c:	f004 f9e2 	bl	8009104 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f005 fa31 	bl	800a1b6 <memcpy>
        rxs->payload_size += bytes_to_copy;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	441a      	add	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d219      	bcs.n	8004d9e <rxSessionWritePayload+0x192>
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <rxSessionWritePayload+0x1c8>)
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004d6e:	f240 21d1 	movw	r1, #721	; 0x2d1
 8004d72:	4815      	ldr	r0, [pc, #84]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004d74:	f004 f9c6 	bl	8009104 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d006      	beq.n	8004d8e <rxSessionWritePayload+0x182>
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <rxSessionWritePayload+0x1d0>)
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004d84:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004d88:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004d8a:	f004 f9bb 	bl	8009104 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <rxSessionWritePayload+0x18e>
 8004d94:	f06f 0302 	mvn.w	r3, #2
 8004d98:	e000      	b.n	8004d9c <rxSessionWritePayload+0x190>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8004d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dd06      	ble.n	8004db4 <rxSessionWritePayload+0x1a8>
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <rxSessionWritePayload+0x1dc>)
 8004da8:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <rxSessionWritePayload+0x1b8>)
 8004daa:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8004dae:	4806      	ldr	r0, [pc, #24]	; (8004dc8 <rxSessionWritePayload+0x1bc>)
 8004db0:	f004 f9a8 	bl	8009104 <__assert_func>
    return out;
 8004db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	0800cc14 	.word	0x0800cc14
 8004dc4:	0800d864 	.word	0x0800d864
 8004dc8:	0800ca50 	.word	0x0800ca50
 8004dcc:	0800cf70 	.word	0x0800cf70
 8004dd0:	0800cb0c 	.word	0x0800cb0c
 8004dd4:	0800cf84 	.word	0x0800cf84
 8004dd8:	0800cfa0 	.word	0x0800cfa0
 8004ddc:	0800cfd0 	.word	0x0800cfd0
 8004de0:	0800cfe8 	.word	0x0800cfe8
 8004de4:	0800d018 	.word	0x0800d018
 8004de8:	0800d038 	.word	0x0800d038

08004dec <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <rxSessionRestart+0x1e>
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <rxSessionRestart+0x7c>)
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <rxSessionRestart+0x80>)
 8004e00:	f240 21de 	movw	r1, #734	; 0x2de
 8004e04:	481a      	ldr	r0, [pc, #104]	; (8004e70 <rxSessionRestart+0x84>)
 8004e06:	f004 f97d 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <rxSessionRestart+0x32>
 8004e10:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <rxSessionRestart+0x88>)
 8004e12:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <rxSessionRestart+0x80>)
 8004e14:	f240 21df 	movw	r1, #735	; 0x2df
 8004e18:	4815      	ldr	r0, [pc, #84]	; (8004e70 <rxSessionRestart+0x84>)
 8004e1a:	f004 f973 	bl	8009104 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	6912      	ldr	r2, [r2, #16]
 8004e26:	4611      	mov	r1, r2
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e44:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	7d9b      	ldrb	r3, [r3, #22]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	761a      	strb	r2, [r3, #24]
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0800cc14 	.word	0x0800cc14
 8004e6c:	0800d87c 	.word	0x0800d87c
 8004e70:	0800ca50 	.word	0x0800ca50
 8004e74:	0800cf70 	.word	0x0800cf70

08004e78 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <rxSessionAcceptFrame+0x22>
 8004e8c:	4b81      	ldr	r3, [pc, #516]	; (8005094 <rxSessionAcceptFrame+0x21c>)
 8004e8e:	4a82      	ldr	r2, [pc, #520]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004e90:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8004e94:	4881      	ldr	r0, [pc, #516]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004e96:	f004 f935 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <rxSessionAcceptFrame+0x36>
 8004ea0:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <rxSessionAcceptFrame+0x228>)
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004ea4:	f240 21f1 	movw	r1, #753	; 0x2f1
 8004ea8:	487c      	ldr	r0, [pc, #496]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004eaa:	f004 f92b 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <rxSessionAcceptFrame+0x4a>
 8004eb4:	4b7b      	ldr	r3, [pc, #492]	; (80050a4 <rxSessionAcceptFrame+0x22c>)
 8004eb6:	4a78      	ldr	r2, [pc, #480]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004eb8:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004ebc:	4877      	ldr	r0, [pc, #476]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004ebe:	f004 f921 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <rxSessionAcceptFrame+0x60>
 8004eca:	4b77      	ldr	r3, [pc, #476]	; (80050a8 <rxSessionAcceptFrame+0x230>)
 8004ecc:	4a72      	ldr	r2, [pc, #456]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004ece:	f240 21f3 	movw	r1, #755	; 0x2f3
 8004ed2:	4872      	ldr	r0, [pc, #456]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004ed4:	f004 f916 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7b9b      	ldrb	r3, [r3, #14]
 8004edc:	2b1f      	cmp	r3, #31
 8004ede:	d906      	bls.n	8004eee <rxSessionAcceptFrame+0x76>
 8004ee0:	4b72      	ldr	r3, [pc, #456]	; (80050ac <rxSessionAcceptFrame+0x234>)
 8004ee2:	4a6d      	ldr	r2, [pc, #436]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004ee4:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8004ee8:	486c      	ldr	r0, [pc, #432]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004eea:	f004 f90b 	bl	8009104 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <rxSessionAcceptFrame+0x8a>
 8004ef4:	4b6e      	ldr	r3, [pc, #440]	; (80050b0 <rxSessionAcceptFrame+0x238>)
 8004ef6:	4a68      	ldr	r2, [pc, #416]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004ef8:	f240 21f5 	movw	r1, #757	; 0x2f5
 8004efc:	4867      	ldr	r0, [pc, #412]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004efe:	f004 f901 	bl	8009104 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7bdb      	ldrb	r3, [r3, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	7bdb      	ldrb	r3, [r3, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <rxSessionAcceptFrame+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7c1b      	ldrb	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <rxSessionAcceptFrame+0xb2>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <rxSessionAcceptFrame+0xb4>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75bb      	strb	r3, [r7, #22]
 8004f2e:	7dbb      	ldrb	r3, [r7, #22]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8004f36:	7dbb      	ldrb	r3, [r7, #22]
 8004f38:	f083 0301 	eor.w	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	8a98      	ldrh	r0, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fe fed6 	bl	8003d00 <crcAdd>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fe4d 	bl	8004c0c <rxSessionWritePayload>
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8004f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da10      	bge.n	8004fa0 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8004f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f82:	f113 0f03 	cmn.w	r3, #3
 8004f86:	d006      	beq.n	8004f96 <rxSessionAcceptFrame+0x11e>
 8004f88:	4b4a      	ldr	r3, [pc, #296]	; (80050b4 <rxSessionAcceptFrame+0x23c>)
 8004f8a:	4a43      	ldr	r2, [pc, #268]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004f8c:	f240 3107 	movw	r1, #775	; 0x307
 8004f90:	4842      	ldr	r0, [pc, #264]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004f92:	f004 f8b7 	bl	8009104 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ff27 	bl	8004dec <rxSessionRestart>
 8004f9e:	e072      	b.n	8005086 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	7c1b      	ldrb	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05f      	beq.n	8005068 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8004fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <rxSessionAcceptFrame+0x146>
 8004fb0:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <rxSessionAcceptFrame+0x240>)
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8004fb4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8004fb8:	4838      	ldr	r0, [pc, #224]	; (800509c <rxSessionAcceptFrame+0x224>)
 8004fba:	f004 f8a3 	bl	8009104 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8004fbe:	7dbb      	ldrb	r3, [r7, #22]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <rxSessionAcceptFrame+0x154>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	8a9b      	ldrh	r3, [r3, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d148      	bne.n	800505e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fd95 	bl	8004b04 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	6a39      	ldr	r1, [r7, #32]
 8004fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d206      	bcs.n	8005010 <rxSessionAcceptFrame+0x198>
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <rxSessionAcceptFrame+0x244>)
 8005004:	4a24      	ldr	r2, [pc, #144]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8005006:	f240 3116 	movw	r1, #790	; 0x316
 800500a:	4824      	ldr	r0, [pc, #144]	; (800509c <rxSessionAcceptFrame+0x224>)
 800500c:	f004 f87a 	bl	8009104 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800501c:	7dbb      	ldrb	r3, [r7, #22]
 800501e:	f083 0301 	eor.w	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <rxSessionAcceptFrame+0x1e0>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d814      	bhi.n	8005058 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f1c3 0302 	rsb	r3, r3, #2
 8005038:	429a      	cmp	r2, r3
 800503a:	d206      	bcs.n	800504a <rxSessionAcceptFrame+0x1d2>
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <rxSessionAcceptFrame+0x248>)
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <rxSessionAcceptFrame+0x220>)
 8005040:	f240 311a 	movw	r1, #794	; 0x31a
 8005044:	4815      	ldr	r0, [pc, #84]	; (800509c <rxSessionAcceptFrame+0x224>)
 8005046:	f004 f85d 	bl	8009104 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4413      	add	r3, r2
 8005052:	1e9a      	subs	r2, r3, #2
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fec3 	bl	8004dec <rxSessionRestart>
 8005066:	e00e      	b.n	8005086 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	7e1b      	ldrb	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f083 0301 	eor.w	r3, r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8005086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	0800cc14 	.word	0x0800cc14
 8005098:	0800d84c 	.word	0x0800d84c
 800509c:	0800ca50 	.word	0x0800ca50
 80050a0:	0800cf70 	.word	0x0800cf70
 80050a4:	0800cea8 	.word	0x0800cea8
 80050a8:	0800cf04 	.word	0x0800cf04
 80050ac:	0800d044 	.word	0x0800d044
 80050b0:	0800cf24 	.word	0x0800cf24
 80050b4:	0800d06c 	.word	0x0800d06c
 80050b8:	0800d078 	.word	0x0800d078
 80050bc:	0800d084 	.word	0x0800d084
 80050c0:	0800d0b4 	.word	0x0800d0b4

080050c4 <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <rxSessionSynchronize+0x22>
 80050d8:	4b5c      	ldr	r3, [pc, #368]	; (800524c <rxSessionSynchronize+0x188>)
 80050da:	4a5d      	ldr	r2, [pc, #372]	; (8005250 <rxSessionSynchronize+0x18c>)
 80050dc:	f44f 7150 	mov.w	r1, #832	; 0x340
 80050e0:	485c      	ldr	r0, [pc, #368]	; (8005254 <rxSessionSynchronize+0x190>)
 80050e2:	f004 f80f 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <rxSessionSynchronize+0x36>
 80050ec:	4b5a      	ldr	r3, [pc, #360]	; (8005258 <rxSessionSynchronize+0x194>)
 80050ee:	4a58      	ldr	r2, [pc, #352]	; (8005250 <rxSessionSynchronize+0x18c>)
 80050f0:	f240 3141 	movw	r1, #833	; 0x341
 80050f4:	4857      	ldr	r0, [pc, #348]	; (8005254 <rxSessionSynchronize+0x190>)
 80050f6:	f004 f805 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	7d9b      	ldrb	r3, [r3, #22]
 80050fe:	2b1f      	cmp	r3, #31
 8005100:	d906      	bls.n	8005110 <rxSessionSynchronize+0x4c>
 8005102:	4b56      	ldr	r3, [pc, #344]	; (800525c <rxSessionSynchronize+0x198>)
 8005104:	4a52      	ldr	r2, [pc, #328]	; (8005250 <rxSessionSynchronize+0x18c>)
 8005106:	f240 3142 	movw	r1, #834	; 0x342
 800510a:	4852      	ldr	r0, [pc, #328]	; (8005254 <rxSessionSynchronize+0x190>)
 800510c:	f003 fffa 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	7b9b      	ldrb	r3, [r3, #14]
 8005114:	2b1f      	cmp	r3, #31
 8005116:	d906      	bls.n	8005126 <rxSessionSynchronize+0x62>
 8005118:	4b51      	ldr	r3, [pc, #324]	; (8005260 <rxSessionSynchronize+0x19c>)
 800511a:	4a4d      	ldr	r2, [pc, #308]	; (8005250 <rxSessionSynchronize+0x18c>)
 800511c:	f240 3143 	movw	r1, #835	; 0x343
 8005120:	484c      	ldr	r0, [pc, #304]	; (8005254 <rxSessionSynchronize+0x190>)
 8005122:	f003 ffef 	bl	8009104 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	7ddb      	ldrb	r3, [r3, #23]
 800512a:	79fa      	ldrb	r2, [r7, #7]
 800512c:	429a      	cmp	r2, r3
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	7d9a      	ldrb	r2, [r3, #22]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	7b9b      	ldrb	r3, [r3, #14]
 800513e:	429a      	cmp	r2, r3
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	7d9a      	ldrb	r2, [r3, #22]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	7b9b      	ldrb	r3, [r3, #14]
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7ff fd1c 	bl	8004b90 <rxComputeTransferIDDifference>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	bf8c      	ite	hi
 800515e:	2301      	movhi	r3, #1
 8005160:	2300      	movls	r3, #0
 8005162:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005170:	4290      	cmp	r0, r2
 8005172:	eb71 0303 	sbcs.w	r3, r1, r3
 8005176:	d20f      	bcs.n	8005198 <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	1a84      	subs	r4, r0, r2
 8005186:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800518a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800518e:	42a2      	cmp	r2, r4
 8005190:	41ab      	sbcs	r3, r5
 8005192:	d201      	bcs.n	8005198 <rxSessionSynchronize+0xd4>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <rxSessionSynchronize+0xd6>
 8005198:	2300      	movs	r3, #0
 800519a:	753b      	strb	r3, [r7, #20]
 800519c:	7d3b      	ldrb	r3, [r7, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 80051b8:	7d7b      	ldrb	r3, [r7, #21]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d114      	bne.n	80051e8 <rxSessionSynchronize+0x124>
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 80051c4:	7d3b      	ldrb	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10e      	bne.n	80051e8 <rxSessionSynchronize+0x124>
 80051ca:	7d3b      	ldrb	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 80051d0:	7d7b      	ldrb	r3, [r7, #21]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d108      	bne.n	80051e8 <rxSessionSynchronize+0x124>
 80051d6:	7d3b      	ldrb	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 80051dc:	7dbb      	ldrb	r3, [r7, #22]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <rxSessionSynchronize+0x128>
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <rxSessionSynchronize+0x12a>
 80051ec:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 80051ee:	74bb      	strb	r3, [r7, #18]
 80051f0:	7cbb      	ldrb	r3, [r7, #18]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	7bdb      	ldrb	r3, [r3, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d021      	beq.n	8005244 <rxSessionSynchronize+0x180>
 8005200:	7cbb      	ldrb	r3, [r7, #18]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01e      	beq.n	8005244 <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	7bdb      	ldrb	r3, [r3, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <rxSessionSynchronize+0x158>
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <rxSessionSynchronize+0x1a0>)
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <rxSessionSynchronize+0x18c>)
 8005212:	f240 3159 	movw	r1, #857	; 0x359
 8005216:	480f      	ldr	r0, [pc, #60]	; (8005254 <rxSessionSynchronize+0x190>)
 8005218:	f003 ff74 	bl	8009104 <__assert_func>
        rxs->total_payload_size    = 0U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522e:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	7b9a      	ldrb	r2, [r3, #14]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	79fa      	ldrb	r2, [r7, #7]
 8005242:	75da      	strb	r2, [r3, #23]
    }
}
 8005244:	bf00      	nop
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bdb0      	pop	{r4, r5, r7, pc}
 800524c:	0800cf70 	.word	0x0800cf70
 8005250:	0800d814 	.word	0x0800d814
 8005254:	0800ca50 	.word	0x0800ca50
 8005258:	0800cea8 	.word	0x0800cea8
 800525c:	0800d0ec 	.word	0x0800d0ec
 8005260:	0800d044 	.word	0x0800d044
 8005264:	0800d114 	.word	0x0800d114

08005268 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <rxSessionUpdate+0x22>
 800527c:	4b48      	ldr	r3, [pc, #288]	; (80053a0 <rxSessionUpdate+0x138>)
 800527e:	4a49      	ldr	r2, [pc, #292]	; (80053a4 <rxSessionUpdate+0x13c>)
 8005280:	f240 3172 	movw	r1, #882	; 0x372
 8005284:	4848      	ldr	r0, [pc, #288]	; (80053a8 <rxSessionUpdate+0x140>)
 8005286:	f003 ff3d 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <rxSessionUpdate+0x36>
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <rxSessionUpdate+0x144>)
 8005292:	4a44      	ldr	r2, [pc, #272]	; (80053a4 <rxSessionUpdate+0x13c>)
 8005294:	f240 3173 	movw	r1, #883	; 0x373
 8005298:	4843      	ldr	r0, [pc, #268]	; (80053a8 <rxSessionUpdate+0x140>)
 800529a:	f003 ff33 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <rxSessionUpdate+0x4a>
 80052a4:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <rxSessionUpdate+0x148>)
 80052a6:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <rxSessionUpdate+0x13c>)
 80052a8:	f44f 715d 	mov.w	r1, #884	; 0x374
 80052ac:	483e      	ldr	r0, [pc, #248]	; (80053a8 <rxSessionUpdate+0x140>)
 80052ae:	f003 ff29 	bl	8009104 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <rxSessionUpdate+0x5e>
 80052b8:	4b3e      	ldr	r3, [pc, #248]	; (80053b4 <rxSessionUpdate+0x14c>)
 80052ba:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <rxSessionUpdate+0x13c>)
 80052bc:	f240 3175 	movw	r1, #885	; 0x375
 80052c0:	4839      	ldr	r0, [pc, #228]	; (80053a8 <rxSessionUpdate+0x140>)
 80052c2:	f003 ff1f 	bl	8009104 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7d9b      	ldrb	r3, [r3, #22]
 80052ca:	2b1f      	cmp	r3, #31
 80052cc:	d906      	bls.n	80052dc <rxSessionUpdate+0x74>
 80052ce:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <rxSessionUpdate+0x150>)
 80052d0:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <rxSessionUpdate+0x13c>)
 80052d2:	f240 3176 	movw	r1, #886	; 0x376
 80052d6:	4834      	ldr	r0, [pc, #208]	; (80053a8 <rxSessionUpdate+0x140>)
 80052d8:	f003 ff14 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7b9b      	ldrb	r3, [r3, #14]
 80052e0:	2b1f      	cmp	r3, #31
 80052e2:	d906      	bls.n	80052f2 <rxSessionUpdate+0x8a>
 80052e4:	4b35      	ldr	r3, [pc, #212]	; (80053bc <rxSessionUpdate+0x154>)
 80052e6:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <rxSessionUpdate+0x13c>)
 80052e8:	f240 3177 	movw	r1, #887	; 0x377
 80052ec:	482e      	ldr	r0, [pc, #184]	; (80053a8 <rxSessionUpdate+0x140>)
 80052ee:	f003 ff09 	bl	8009104 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 80052f2:	78f9      	ldrb	r1, [r7, #3]
 80052f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f8:	e9cd 2300 	strd	r2, r3, [sp]
 80052fc:	460a      	mov	r2, r1
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	f7ff fedf 	bl	80050c4 <rxSessionSynchronize>
    int8_t out = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	7ddb      	ldrb	r3, [r3, #23]
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	429a      	cmp	r2, r3
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7c5a      	ldrb	r2, [r3, #17]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	7e1b      	ldrb	r3, [r3, #24]
 8005322:	429a      	cmp	r2, r3
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7b9a      	ldrb	r2, [r3, #14]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	7d9b      	ldrb	r3, [r3, #22]
 8005334:	429a      	cmp	r2, r3
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e006      	b.n	8005364 <rxSessionUpdate+0xfc>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 8005364:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 8005366:	7dbb      	ldrb	r3, [r7, #22]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <rxSessionUpdate+0x12a>
 800536c:	7d7b      	ldrb	r3, [r7, #21]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00f      	beq.n	8005392 <rxSessionUpdate+0x12a>
 8005372:	7d3b      	ldrb	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <rxSessionUpdate+0x12a>
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fd75 	bl	8004e78 <rxSessionAcceptFrame>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 8005392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	0800cc14 	.word	0x0800cc14
 80053a4:	0800d804 	.word	0x0800d804
 80053a8:	0800ca50 	.word	0x0800ca50
 80053ac:	0800cf70 	.word	0x0800cf70
 80053b0:	0800cea8 	.word	0x0800cea8
 80053b4:	0800cf24 	.word	0x0800cf24
 80053b8:	0800d0ec 	.word	0x0800d0ec
 80053bc:	0800d044 	.word	0x0800d044

080053c0 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af04      	add	r7, sp, #16
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <rxAcceptFrame+0x22>
 80053d4:	4b85      	ldr	r3, [pc, #532]	; (80055ec <rxAcceptFrame+0x22c>)
 80053d6:	4a86      	ldr	r2, [pc, #536]	; (80055f0 <rxAcceptFrame+0x230>)
 80053d8:	f240 3196 	movw	r1, #918	; 0x396
 80053dc:	4885      	ldr	r0, [pc, #532]	; (80055f4 <rxAcceptFrame+0x234>)
 80053de:	f003 fe91 	bl	8009104 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <rxAcceptFrame+0x36>
 80053e8:	4b83      	ldr	r3, [pc, #524]	; (80055f8 <rxAcceptFrame+0x238>)
 80053ea:	4a81      	ldr	r2, [pc, #516]	; (80055f0 <rxAcceptFrame+0x230>)
 80053ec:	f240 3197 	movw	r1, #919	; 0x397
 80053f0:	4880      	ldr	r0, [pc, #512]	; (80055f4 <rxAcceptFrame+0x234>)
 80053f2:	f003 fe87 	bl	8009104 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	8b9a      	ldrh	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	895b      	ldrh	r3, [r3, #10]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d006      	beq.n	8005410 <rxAcceptFrame+0x50>
 8005402:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <rxAcceptFrame+0x23c>)
 8005404:	4a7a      	ldr	r2, [pc, #488]	; (80055f0 <rxAcceptFrame+0x230>)
 8005406:	f44f 7166 	mov.w	r1, #920	; 0x398
 800540a:	487a      	ldr	r0, [pc, #488]	; (80055f4 <rxAcceptFrame+0x234>)
 800540c:	f003 fe7a 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <rxAcceptFrame+0x64>
 8005416:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <rxAcceptFrame+0x240>)
 8005418:	4a75      	ldr	r2, [pc, #468]	; (80055f0 <rxAcceptFrame+0x230>)
 800541a:	f240 3199 	movw	r1, #921	; 0x399
 800541e:	4875      	ldr	r0, [pc, #468]	; (80055f4 <rxAcceptFrame+0x234>)
 8005420:	f003 fe70 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <rxAcceptFrame+0x7a>
 800542c:	4b75      	ldr	r3, [pc, #468]	; (8005604 <rxAcceptFrame+0x244>)
 800542e:	4a70      	ldr	r2, [pc, #448]	; (80055f0 <rxAcceptFrame+0x230>)
 8005430:	f240 319a 	movw	r1, #922	; 0x39a
 8005434:	486f      	ldr	r0, [pc, #444]	; (80055f4 <rxAcceptFrame+0x234>)
 8005436:	f003 fe65 	bl	8009104 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7b9b      	ldrb	r3, [r3, #14]
 800543e:	2b1f      	cmp	r3, #31
 8005440:	d906      	bls.n	8005450 <rxAcceptFrame+0x90>
 8005442:	4b71      	ldr	r3, [pc, #452]	; (8005608 <rxAcceptFrame+0x248>)
 8005444:	4a6a      	ldr	r2, [pc, #424]	; (80055f0 <rxAcceptFrame+0x230>)
 8005446:	f240 319b 	movw	r1, #923	; 0x39b
 800544a:	486a      	ldr	r0, [pc, #424]	; (80055f4 <rxAcceptFrame+0x234>)
 800544c:	f003 fe5a 	bl	8009104 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	7b5b      	ldrb	r3, [r3, #13]
 8005454:	2bff      	cmp	r3, #255	; 0xff
 8005456:	d00c      	beq.n	8005472 <rxAcceptFrame+0xb2>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	791a      	ldrb	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	7b5b      	ldrb	r3, [r3, #13]
 8005460:	429a      	cmp	r2, r3
 8005462:	d006      	beq.n	8005472 <rxAcceptFrame+0xb2>
 8005464:	4b69      	ldr	r3, [pc, #420]	; (800560c <rxAcceptFrame+0x24c>)
 8005466:	4a62      	ldr	r2, [pc, #392]	; (80055f0 <rxAcceptFrame+0x230>)
 8005468:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800546c:	4861      	ldr	r0, [pc, #388]	; (80055f4 <rxAcceptFrame+0x234>)
 800546e:	f003 fe49 	bl	8009104 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <rxAcceptFrame+0xc6>
 8005478:	4b65      	ldr	r3, [pc, #404]	; (8005610 <rxAcceptFrame+0x250>)
 800547a:	4a5d      	ldr	r2, [pc, #372]	; (80055f0 <rxAcceptFrame+0x230>)
 800547c:	f240 319d 	movw	r1, #925	; 0x39d
 8005480:	485c      	ldr	r0, [pc, #368]	; (80055f4 <rxAcceptFrame+0x234>)
 8005482:	f003 fe3f 	bl	8009104 <__assert_func>

    int8_t out = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7b1b      	ldrb	r3, [r3, #12]
 800548e:	b25b      	sxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	db6c      	blt.n	800556e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7b1b      	ldrb	r3, [r3, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	3308      	adds	r3, #8
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d134      	bne.n	8005510 <rxAcceptFrame+0x150>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7bdb      	ldrb	r3, [r3, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d030      	beq.n	8005510 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2120      	movs	r1, #32
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	4798      	blx	r3
 80054b8:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7b1b      	ldrb	r3, [r3, #12]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	3308      	adds	r3, #8
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01d      	beq.n	800550c <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2200      	movs	r2, #0
 80054e6:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f4:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	7b9a      	ldrb	r2, [r3, #14]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2201      	movs	r2, #1
 8005508:	761a      	strb	r2, [r3, #24]
 800550a:	e001      	b.n	8005510 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800550c:	23fd      	movs	r3, #253	; 0xfd
 800550e:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7b1b      	ldrb	r3, [r3, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	3308      	adds	r3, #8
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d05e      	beq.n	80055e0 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8005522:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <rxAcceptFrame+0x178>
 800552a:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <rxAcceptFrame+0x254>)
 800552c:	4a30      	ldr	r2, [pc, #192]	; (80055f0 <rxAcceptFrame+0x230>)
 800552e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8005532:	4830      	ldr	r0, [pc, #192]	; (80055f4 <rxAcceptFrame+0x234>)
 8005534:	f003 fde6 	bl	8009104 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7b1b      	ldrb	r3, [r3, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	3308      	adds	r3, #8
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	6989      	ldr	r1, [r1, #24]
 8005550:	78fd      	ldrb	r5, [r7, #3]
 8005552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005554:	9003      	str	r0, [sp, #12]
 8005556:	9102      	str	r1, [sp, #8]
 8005558:	e9cd 2300 	strd	r2, r3, [sp]
 800555c:	462b      	mov	r3, r5
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4621      	mov	r1, r4
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff fe80 	bl	8005268 <rxSessionUpdate>
 8005568:	4603      	mov	r3, r0
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e038      	b.n	80055e0 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7b1b      	ldrb	r3, [r3, #12]
 8005572:	2bff      	cmp	r3, #255	; 0xff
 8005574:	d006      	beq.n	8005584 <rxAcceptFrame+0x1c4>
 8005576:	4b28      	ldr	r3, [pc, #160]	; (8005618 <rxAcceptFrame+0x258>)
 8005578:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <rxAcceptFrame+0x230>)
 800557a:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800557e:	481d      	ldr	r0, [pc, #116]	; (80055f4 <rxAcceptFrame+0x234>)
 8005580:	f003 fdc0 	bl	8009104 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800558c:	4293      	cmp	r3, r2
 800558e:	bf28      	it	cs
 8005590:	4613      	movcs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	4798      	blx	r3
 800559e:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff faaa 	bl	8004b04 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f004 fdf0 	bl	800a1b6 <memcpy>
            out = 1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e001      	b.n	80055e0 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 80055dc:	23fd      	movs	r3, #253	; 0xfd
 80055de:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80055e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bdb0      	pop	{r4, r5, r7, pc}
 80055ec:	0800cc14 	.word	0x0800cc14
 80055f0:	0800d7f4 	.word	0x0800d7f4
 80055f4:	0800ca50 	.word	0x0800ca50
 80055f8:	0800d130 	.word	0x0800d130
 80055fc:	0800d14c 	.word	0x0800d14c
 8005600:	0800cea8 	.word	0x0800cea8
 8005604:	0800cf04 	.word	0x0800cf04
 8005608:	0800d044 	.word	0x0800d044
 800560c:	0800d174 	.word	0x0800d174
 8005610:	0800cf24 	.word	0x0800cf24
 8005614:	0800d1cc 	.word	0x0800d1cc
 8005618:	0800d1d8 	.word	0x0800d1d8

0800561c <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	8b9b      	ldrh	r3, [r3, #28]
 8005630:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8005632:	89fa      	ldrh	r2, [r7, #14]
 8005634:	89bb      	ldrh	r3, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d00a      	beq.n	8005650 <rxSubscriptionPredicateOnPortID+0x34>
 800563a:	89fa      	ldrh	r2, [r7, #14]
 800563c:	89bb      	ldrh	r3, [r7, #12]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf8c      	ite	hi
 8005642:	2301      	movhi	r3, #1
 8005644:	2300      	movls	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <rxSubscriptionPredicateOnPortID+0x44>)
 800564c:	569b      	ldrsb	r3, [r3, r2]
 800564e:	e000      	b.n	8005652 <rxSubscriptionPredicateOnPortID+0x36>
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	0800d7e0 	.word	0x0800d7e0

08005664 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	331c      	adds	r3, #28
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ffd1 	bl	800561c <rxSubscriptionPredicateOnPortID>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8005684:	b5b0      	push	{r4, r5, r7, lr}
 8005686:	b08c      	sub	sp, #48	; 0x30
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <canardInit+0x20>
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <canardInit+0x6c>)
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <canardInit+0x70>)
 800569a:	f240 4104 	movw	r1, #1028	; 0x404
 800569e:	4816      	ldr	r0, [pc, #88]	; (80056f8 <canardInit+0x74>)
 80056a0:	f003 fd30 	bl	8009104 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <canardInit+0x34>
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <canardInit+0x78>)
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <canardInit+0x70>)
 80056ae:	f240 4105 	movw	r1, #1029	; 0x405
 80056b2:	4811      	ldr	r0, [pc, #68]	; (80056f8 <canardInit+0x74>)
 80056b4:	f003 fd26 	bl	8009104 <__assert_func>
    const CanardInstance out = {
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	23ff      	movs	r3, #255	; 0xff
 80056be:	763b      	strb	r3, [r7, #24]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	2300      	movs	r3, #0
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d0:	2300      	movs	r3, #0
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	461d      	mov	r5, r3
 80056d8:	f107 0414 	add.w	r4, r7, #20
 80056dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80056e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	3730      	adds	r7, #48	; 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bdb0      	pop	{r4, r5, r7, pc}
 80056f0:	0800d1f8 	.word	0x0800d1f8
 80056f4:	0800d668 	.word	0x0800d668
 80056f8:	0800ca50 	.word	0x0800ca50
 80056fc:	0800d218 	.word	0x0800d218

08005700 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8005700:	b4b0      	push	{r4, r5, r7}
 8005702:	b08b      	sub	sp, #44	; 0x2c
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
 800571c:	2300      	movs	r3, #0
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	461d      	mov	r5, r3
 8005724:	f107 0414 	add.w	r4, r7, #20
 8005728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800572a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	602b      	str	r3, [r5, #0]
}
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	372c      	adds	r7, #44	; 0x2c
 8005734:	46bd      	mov	sp, r7
 8005736:	bcb0      	pop	{r4, r5, r7}
 8005738:	4770      	bx	lr
	...

0800573c <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af06      	add	r7, sp, #24
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800574a:	f06f 0301 	mvn.w	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d062      	beq.n	800581c <canardTxPush+0xe0>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05f      	beq.n	800581c <canardTxPush+0xe0>
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d05c      	beq.n	800581c <canardTxPush+0xe0>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <canardTxPush+0x32>
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d156      	bne.n	800581c <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fb7a 	bl	8003e6c <adjustPresentationLayerMTU>
 8005778:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	791a      	ldrb	r2, [r3, #4]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578a:	f7fe fb9f 	bl	8003ecc <txMakeCANID>
 800578e:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	db40      	blt.n	8005818 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8005796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	429a      	cmp	r2, r3
 800579c:	d81c      	bhi.n	80057d8 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800579e:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 80057a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a2:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 80057a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a6:	9103      	str	r1, [sp, #12]
 80057a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057aa:	9102      	str	r1, [sp, #8]
 80057ac:	9201      	str	r2, [sp, #4]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fe fd52 	bl	8004260 <txPushSingleFrame>
 80057bc:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db2b      	blt.n	800581c <canardTxPush+0xe0>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d028      	beq.n	800581c <canardTxPush+0xe0>
 80057ca:	4b1c      	ldr	r3, [pc, #112]	; (800583c <canardTxPush+0x100>)
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <canardTxPush+0x104>)
 80057ce:	f240 4133 	movw	r1, #1075	; 0x433
 80057d2:	481c      	ldr	r0, [pc, #112]	; (8005844 <canardTxPush+0x108>)
 80057d4:	f003 fc96 	bl	8009104 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80057d8:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80057da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057dc:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80057de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057e0:	9105      	str	r1, [sp, #20]
 80057e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e4:	9104      	str	r1, [sp, #16]
 80057e6:	9203      	str	r2, [sp, #12]
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ee:	e9cd 2300 	strd	r2, r3, [sp]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7fe ff4c 	bl	8004694 <txPushMultiFrame>
 80057fc:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	2b00      	cmp	r3, #0
 8005802:	db0b      	blt.n	800581c <canardTxPush+0xe0>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b01      	cmp	r3, #1
 8005808:	dc08      	bgt.n	800581c <canardTxPush+0xe0>
 800580a:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <canardTxPush+0x10c>)
 800580c:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <canardTxPush+0x104>)
 800580e:	f240 413f 	movw	r1, #1087	; 0x43f
 8005812:	480c      	ldr	r0, [pc, #48]	; (8005844 <canardTxPush+0x108>)
 8005814:	f003 fc76 	bl	8009104 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <canardTxPush+0xf4>
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <canardTxPush+0x110>)
 8005824:	4a06      	ldr	r2, [pc, #24]	; (8005840 <canardTxPush+0x104>)
 8005826:	f240 4147 	movw	r1, #1095	; 0x447
 800582a:	4806      	ldr	r0, [pc, #24]	; (8005844 <canardTxPush+0x108>)
 800582c:	f003 fc6a 	bl	8009104 <__assert_func>
    return out;
 8005830:	69fb      	ldr	r3, [r7, #28]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	0800cd4c 	.word	0x0800cd4c
 8005840:	0800d674 	.word	0x0800d674
 8005844:	0800ca50 	.word	0x0800ca50
 8005848:	0800ce90 	.word	0x0800ce90
 800584c:	0800d234 	.word	0x0800d234

08005850 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f7fd fe96 	bl	800359a <cavlFindExtremum>
 800586e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <canardTxPop+0x36>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	330c      	adds	r3, #12
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe f8cf 	bl	8003a44 <cavlRemove>
        que->size--;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
    }
    return out;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b090      	sub	sp, #64	; 0x40
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80058c8:	23fe      	movs	r3, #254	; 0xfe
 80058ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d068      	beq.n	80059a6 <canardRxAccept+0xea>
 80058d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d065      	beq.n	80059a6 <canardRxAccept+0xea>
 80058da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d062      	beq.n	80059a6 <canardRxAccept+0xea>
 80058e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e8:	d25d      	bcs.n	80059a6 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80058ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ec:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d155      	bne.n	80059a6 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 80058fa:	f107 0310 	add.w	r3, r7, #16
 80058fe:	2220      	movs	r2, #32
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f004 fba6 	bl	800a054 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8005908:	f107 0310 	add.w	r3, r7, #16
 800590c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800590e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005912:	f7fe ffb3 	bl	800487c <rxTryParseFrame>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d041      	beq.n	80059a0 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800591c:	7f7b      	ldrb	r3, [r7, #29]
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	d004      	beq.n	800592c <canardRxAccept+0x70>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	791a      	ldrb	r2, [r3, #4]
 8005926:	7f7b      	ldrb	r3, [r7, #29]
 8005928:	429a      	cmp	r2, r3
 800592a:	d135      	bne.n	8005998 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800592c:	7e7b      	ldrb	r3, [r7, #25]
 800592e:	3304      	adds	r3, #4
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	18d0      	adds	r0, r2, r3
 8005936:	f107 0310 	add.w	r3, r7, #16
 800593a:	f103 010a 	add.w	r1, r3, #10
 800593e:	2300      	movs	r3, #0
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <canardRxAccept+0x10c>)
 8005942:	f7fe f801 	bl	8003948 <cavlSearch>
 8005946:	6338      	str	r0, [r7, #48]	; 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 8005948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800594e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01a      	beq.n	8005990 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	8b9a      	ldrh	r2, [r3, #28]
 800595e:	8b7b      	ldrh	r3, [r7, #26]
 8005960:	429a      	cmp	r2, r3
 8005962:	d006      	beq.n	8005972 <canardRxAccept+0xb6>
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <canardRxAccept+0x110>)
 8005966:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <canardRxAccept+0x114>)
 8005968:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800596c:	4819      	ldr	r0, [pc, #100]	; (80059d4 <canardRxAccept+0x118>)
 800596e:	f003 fbc9 	bl	8009104 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 8005972:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8005976:	f107 0210 	add.w	r2, r7, #16
 800597a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	460b      	mov	r3, r1
 8005980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff fd1c 	bl	80053c0 <rxAcceptFrame>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800598e:	e00a      	b.n	80059a6 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 8005996:	e006      	b.n	80059a6 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8005998:	2300      	movs	r3, #0
 800599a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800599e:	e002      	b.n	80059a6 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 80059a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	dd06      	ble.n	80059bc <canardRxAccept+0x100>
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <canardRxAccept+0x11c>)
 80059b0:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <canardRxAccept+0x114>)
 80059b2:	f240 419a 	movw	r1, #1178	; 0x49a
 80059b6:	4807      	ldr	r0, [pc, #28]	; (80059d4 <canardRxAccept+0x118>)
 80059b8:	f003 fba4 	bl	8009104 <__assert_func>
    return out;
 80059bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3738      	adds	r7, #56	; 0x38
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	0800561d 	.word	0x0800561d
 80059cc:	0800d240 	.word	0x0800d240
 80059d0:	0800d7d0 	.word	0x0800d7d0
 80059d4:	0800ca50 	.word	0x0800ca50
 80059d8:	0800d260 	.word	0x0800d260

080059dc <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	72fb      	strb	r3, [r7, #11]
 80059ea:	4613      	mov	r3, r2
 80059ec:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80059ee:	23fe      	movs	r3, #254	; 0xfe
 80059f0:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d04a      	beq.n	8005a92 <canardRxSubscribe+0xb6>
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d047      	beq.n	8005a92 <canardRxSubscribe+0xb6>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d844      	bhi.n	8005a92 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8005a08:	893a      	ldrh	r2, [r7, #8]
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f850 	bl	8005ab4 <canardRxUnsubscribe>
 8005a14:	4603      	mov	r3, r0
 8005a16:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8005a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db38      	blt.n	8005a92 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8005a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a26:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	893a      	ldrh	r2, [r7, #8]
 8005a34:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e009      	b.n	8005a50 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3308      	adds	r3, #8
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b7f      	cmp	r3, #127	; 0x7f
 8005a54:	d9f2      	bls.n	8005a3c <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	18d0      	adds	r0, r2, r3
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <canardRxSubscribe+0xc4>)
 8005a62:	4a10      	ldr	r2, [pc, #64]	; (8005aa4 <canardRxSubscribe+0xc8>)
 8005a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a66:	f7fd ff6f 	bl	8003948 <cavlSearch>
 8005a6a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d006      	beq.n	8005a82 <canardRxSubscribe+0xa6>
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <canardRxSubscribe+0xcc>)
 8005a76:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <canardRxSubscribe+0xd0>)
 8005a78:	f240 41be 	movw	r1, #1214	; 0x4be
 8005a7c:	480c      	ldr	r0, [pc, #48]	; (8005ab0 <canardRxSubscribe+0xd4>)
 8005a7e:	f003 fb41 	bl	8009104 <__assert_func>
            out = (out > 0) ? 0 : 1;
 8005a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfd4      	ite	le
 8005a8a:	2301      	movle	r3, #1
 8005a8c:	2300      	movgt	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8005a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08003ca9 	.word	0x08003ca9
 8005aa4:	08005665 	.word	0x08005665
 8005aa8:	0800d26c 	.word	0x0800d26c
 8005aac:	0800d8b0 	.word	0x0800d8b0
 8005ab0:	0800ca50 	.word	0x0800ca50

08005ab4 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005ac4:	23fe      	movs	r3, #254	; 0xfe
 8005ac6:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d05f      	beq.n	8005b92 <canardRxUnsubscribe+0xde>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d85c      	bhi.n	8005b92 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8005ad8:	883b      	ldrh	r3, [r7, #0]
 8005ada:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	18d0      	adds	r0, r2, r3
 8005ae6:	f107 010e 	add.w	r1, r7, #14
 8005aea:	2300      	movs	r3, #0
 8005aec:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <canardRxUnsubscribe+0xec>)
 8005aee:	f7fd ff2b 	bl	8003948 <cavlSearch>
 8005af2:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d049      	beq.n	8005b8e <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	3304      	adds	r3, #4
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd ff9b 	bl	8003a44 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	8b9b      	ldrh	r3, [r3, #28]
 8005b12:	883a      	ldrh	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d006      	beq.n	8005b26 <canardRxUnsubscribe+0x72>
 8005b18:	4b22      	ldr	r3, [pc, #136]	; (8005ba4 <canardRxUnsubscribe+0xf0>)
 8005b1a:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <canardRxUnsubscribe+0xf4>)
 8005b1c:	f240 41d3 	movw	r1, #1235	; 0x4d3
 8005b20:	4822      	ldr	r0, [pc, #136]	; (8005bac <canardRxUnsubscribe+0xf8>)
 8005b22:	f003 faef 	bl	8009104 <__assert_func>
            out = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e02a      	b.n	8005b86 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	6939      	ldr	r1, [r7, #16]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <canardRxUnsubscribe+0xa0>
 8005b44:	6939      	ldr	r1, [r7, #16]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	e000      	b.n	8005b56 <canardRxUnsubscribe+0xa2>
 8005b54:	2300      	movs	r3, #0
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	6939      	ldr	r1, [r7, #16]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	3308      	adds	r3, #8
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3308      	adds	r3, #8
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8a:	d9d1      	bls.n	8005b30 <canardRxUnsubscribe+0x7c>
 8005b8c:	e001      	b.n	8005b92 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8005b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	0800561d 	.word	0x0800561d
 8005ba4:	0800d28c 	.word	0x0800d28c
 8005ba8:	0800d8c4 	.word	0x0800d8c4
 8005bac:	0800ca50 	.word	0x0800ca50

08005bb0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	1dfb      	adds	r3, r7, #7
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2301      	movs	r3, #1
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2178      	movs	r1, #120	; 0x78
 8005bde:	4803      	ldr	r0, [pc, #12]	; (8005bec <ssd1306_WriteCommand+0x2c>)
 8005be0:	f001 fd32 	bl	8007648 <HAL_I2C_Mem_Write>
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000224 	.word	0x20000224

08005bf0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af04      	add	r7, sp, #16
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	9202      	str	r2, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	2178      	movs	r1, #120	; 0x78
 8005c10:	4803      	ldr	r0, [pc, #12]	; (8005c20 <ssd1306_WriteData+0x30>)
 8005c12:	f001 fd19 	bl	8007648 <HAL_I2C_Mem_Write>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000224 	.word	0x20000224

08005c24 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005c28:	f7ff ffc2 	bl	8005bb0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005c2c:	2064      	movs	r0, #100	; 0x64
 8005c2e:	f000 fa61 	bl	80060f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005c32:	2000      	movs	r0, #0
 8005c34:	f000 f9ce 	bl	8005fd4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005c38:	2020      	movs	r0, #32
 8005c3a:	f7ff ffc1 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f7ff ffbe 	bl	8005bc0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005c44:	20b0      	movs	r0, #176	; 0xb0
 8005c46:	f7ff ffbb 	bl	8005bc0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005c4a:	20c8      	movs	r0, #200	; 0xc8
 8005c4c:	f7ff ffb8 	bl	8005bc0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005c50:	2000      	movs	r0, #0
 8005c52:	f7ff ffb5 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005c56:	2010      	movs	r0, #16
 8005c58:	f7ff ffb2 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005c5c:	2040      	movs	r0, #64	; 0x40
 8005c5e:	f7ff ffaf 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005c62:	20ff      	movs	r0, #255	; 0xff
 8005c64:	f000 f9a2 	bl	8005fac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005c68:	20a1      	movs	r0, #161	; 0xa1
 8005c6a:	f7ff ffa9 	bl	8005bc0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005c6e:	20a6      	movs	r0, #166	; 0xa6
 8005c70:	f7ff ffa6 	bl	8005bc0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005c74:	20a8      	movs	r0, #168	; 0xa8
 8005c76:	f7ff ffa3 	bl	8005bc0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8005c7a:	201f      	movs	r0, #31
 8005c7c:	f7ff ffa0 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005c80:	20a4      	movs	r0, #164	; 0xa4
 8005c82:	f7ff ff9d 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005c86:	20d3      	movs	r0, #211	; 0xd3
 8005c88:	f7ff ff9a 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f7ff ff97 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005c92:	20d5      	movs	r0, #213	; 0xd5
 8005c94:	f7ff ff94 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005c98:	20f0      	movs	r0, #240	; 0xf0
 8005c9a:	f7ff ff91 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005c9e:	20d9      	movs	r0, #217	; 0xd9
 8005ca0:	f7ff ff8e 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005ca4:	2022      	movs	r0, #34	; 0x22
 8005ca6:	f7ff ff8b 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005caa:	20da      	movs	r0, #218	; 0xda
 8005cac:	f7ff ff88 	bl	8005bc0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8005cb0:	2002      	movs	r0, #2
 8005cb2:	f7ff ff85 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005cb6:	20db      	movs	r0, #219	; 0xdb
 8005cb8:	f7ff ff82 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005cbc:	2020      	movs	r0, #32
 8005cbe:	f7ff ff7f 	bl	8005bc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005cc2:	208d      	movs	r0, #141	; 0x8d
 8005cc4:	f7ff ff7c 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005cc8:	2014      	movs	r0, #20
 8005cca:	f7ff ff79 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f000 f980 	bl	8005fd4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f000 f80f 	bl	8005cf8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005cda:	f000 f825 	bl	8005d28 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <ssd1306_Init+0xd0>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <ssd1306_Init+0xd0>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005cea:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <ssd1306_Init+0xd0>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	711a      	strb	r2, [r3, #4]
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	2000050c 	.word	0x2000050c

08005cf8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <ssd1306_Fill+0x14>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <ssd1306_Fill+0x16>
 8005d0c:	23ff      	movs	r3, #255	; 0xff
 8005d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d12:	4619      	mov	r1, r3
 8005d14:	4803      	ldr	r0, [pc, #12]	; (8005d24 <ssd1306_Fill+0x2c>)
 8005d16:	f004 f99d 	bl	800a054 <memset>
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000030c 	.word	0x2000030c

08005d28 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005d2e:	2300      	movs	r3, #0
 8005d30:	71fb      	strb	r3, [r7, #7]
 8005d32:	e016      	b.n	8005d62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	3b50      	subs	r3, #80	; 0x50
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ff40 	bl	8005bc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7ff ff3d 	bl	8005bc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005d46:	2010      	movs	r0, #16
 8005d48:	f7ff ff3a 	bl	8005bc0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	01db      	lsls	r3, r3, #7
 8005d50:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <ssd1306_UpdateScreen+0x4c>)
 8005d52:	4413      	add	r3, r2
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff4a 	bl	8005bf0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	71fb      	strb	r3, [r7, #7]
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d9e5      	bls.n	8005d34 <ssd1306_UpdateScreen+0xc>
    }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	2000030c 	.word	0x2000030c

08005d78 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
 8005d82:	460b      	mov	r3, r1
 8005d84:	71bb      	strb	r3, [r7, #6]
 8005d86:	4613      	mov	r3, r2
 8005d88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db3d      	blt.n	8005e0e <ssd1306_DrawPixel+0x96>
 8005d92:	79bb      	ldrb	r3, [r7, #6]
 8005d94:	2b1f      	cmp	r3, #31
 8005d96:	d83a      	bhi.n	8005e0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005d98:	797b      	ldrb	r3, [r7, #5]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d11a      	bne.n	8005dd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005d9e:	79fa      	ldrb	r2, [r7, #7]
 8005da0:	79bb      	ldrb	r3, [r7, #6]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	b2d8      	uxtb	r0, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	01db      	lsls	r3, r3, #7
 8005daa:	4413      	add	r3, r2
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <ssd1306_DrawPixel+0xa4>)
 8005dae:	5cd3      	ldrb	r3, [r2, r3]
 8005db0:	b25a      	sxtb	r2, r3
 8005db2:	79bb      	ldrb	r3, [r7, #6]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b259      	sxtb	r1, r3
 8005dc4:	79fa      	ldrb	r2, [r7, #7]
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	01db      	lsls	r3, r3, #7
 8005dca:	4413      	add	r3, r2
 8005dcc:	b2c9      	uxtb	r1, r1
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <ssd1306_DrawPixel+0xa4>)
 8005dd0:	54d1      	strb	r1, [r2, r3]
 8005dd2:	e01d      	b.n	8005e10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005dd4:	79fa      	ldrb	r2, [r7, #7]
 8005dd6:	79bb      	ldrb	r3, [r7, #6]
 8005dd8:	08db      	lsrs	r3, r3, #3
 8005dda:	b2d8      	uxtb	r0, r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	01db      	lsls	r3, r3, #7
 8005de0:	4413      	add	r3, r2
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <ssd1306_DrawPixel+0xa4>)
 8005de4:	5cd3      	ldrb	r3, [r2, r3]
 8005de6:	b25a      	sxtb	r2, r3
 8005de8:	79bb      	ldrb	r3, [r7, #6]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2101      	movs	r1, #1
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	b259      	sxtb	r1, r3
 8005dfe:	79fa      	ldrb	r2, [r7, #7]
 8005e00:	4603      	mov	r3, r0
 8005e02:	01db      	lsls	r3, r3, #7
 8005e04:	4413      	add	r3, r2
 8005e06:	b2c9      	uxtb	r1, r1
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <ssd1306_DrawPixel+0xa4>)
 8005e0a:	54d1      	strb	r1, [r2, r3]
 8005e0c:	e000      	b.n	8005e10 <ssd1306_DrawPixel+0x98>
        return;
 8005e0e:	bf00      	nop
    }
}
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	2000030c 	.word	0x2000030c

08005e20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	1d38      	adds	r0, r7, #4
 8005e2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4623      	mov	r3, r4
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	4613      	mov	r3, r2
 8005e36:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b1f      	cmp	r3, #31
 8005e3c:	d902      	bls.n	8005e44 <ssd1306_WriteChar+0x24>
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b7e      	cmp	r3, #126	; 0x7e
 8005e42:	d901      	bls.n	8005e48 <ssd1306_WriteChar+0x28>
        return 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e06d      	b.n	8005f24 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	793b      	ldrb	r3, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	dc06      	bgt.n	8005e64 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005e56:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	797b      	ldrb	r3, [r7, #5]
 8005e5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	dd01      	ble.n	8005e68 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e05d      	b.n	8005f24 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e04c      	b.n	8005f08 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	3b20      	subs	r3, #32
 8005e74:	7979      	ldrb	r1, [r7, #5]
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	440b      	add	r3, r1
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e034      	b.n	8005ef8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d012      	beq.n	8005ec4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005e9e:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	b2d8      	uxtb	r0, r3
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005eae:	885b      	ldrh	r3, [r3, #2]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	7bba      	ldrb	r2, [r7, #14]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	f7ff ff5b 	bl	8005d78 <ssd1306_DrawPixel>
 8005ec2:	e016      	b.n	8005ef2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005ec4:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	b2d8      	uxtb	r0, r3
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	b2d9      	uxtb	r1, r3
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	f7ff ff43 	bl	8005d78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	793b      	ldrb	r3, [r7, #4]
 8005efa:	461a      	mov	r2, r3
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d3c5      	bcc.n	8005e8e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3301      	adds	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	797b      	ldrb	r3, [r7, #5]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d3ad      	bcc.n	8005e6e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	793b      	ldrb	r3, [r7, #4]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <ssd1306_WriteChar+0x10c>)
 8005f20:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3724      	adds	r7, #36	; 0x24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd90      	pop	{r4, r7, pc}
 8005f2c:	2000050c 	.word	0x2000050c

08005f30 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	1d38      	adds	r0, r7, #4
 8005f3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8005f3e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8005f40:	e012      	b.n	8005f68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	7818      	ldrb	r0, [r3, #0]
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	1d3a      	adds	r2, r7, #4
 8005f4a:	ca06      	ldmia	r2, {r1, r2}
 8005f4c:	f7ff ff68 	bl	8005e20 <ssd1306_WriteChar>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d002      	beq.n	8005f62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	e008      	b.n	8005f74 <ssd1306_WriteString+0x44>
        }
        str++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e8      	bne.n	8005f42 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	781b      	ldrb	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	460a      	mov	r2, r1
 8005f86:	71fb      	strb	r3, [r7, #7]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <ssd1306_SetCursor+0x2c>)
 8005f92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005f94:	79bb      	ldrb	r3, [r7, #6]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <ssd1306_SetCursor+0x2c>)
 8005f9a:	805a      	strh	r2, [r3, #2]
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	2000050c 	.word	0x2000050c

08005fac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005fb6:	2381      	movs	r3, #129	; 0x81
 8005fb8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fdff 	bl	8005bc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fdfb 	bl	8005bc0 <ssd1306_WriteCommand>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005fe4:	23af      	movs	r3, #175	; 0xaf
 8005fe6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005fe8:	4b08      	ldr	r3, [pc, #32]	; (800600c <ssd1306_SetDisplayOn+0x38>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	715a      	strb	r2, [r3, #5]
 8005fee:	e004      	b.n	8005ffa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005ff0:	23ae      	movs	r3, #174	; 0xae
 8005ff2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <ssd1306_SetDisplayOn+0x38>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fddf 	bl	8005bc0 <ssd1306_WriteCommand>
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	2000050c 	.word	0x2000050c

08006010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_Init+0x40>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <HAL_Init+0x40>)
 800601a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800601e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_Init+0x40>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <HAL_Init+0x40>)
 8006026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800602c:	4b08      	ldr	r3, [pc, #32]	; (8006050 <HAL_Init+0x40>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a07      	ldr	r2, [pc, #28]	; (8006050 <HAL_Init+0x40>)
 8006032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006038:	2003      	movs	r0, #3
 800603a:	f000 ffb7 	bl	8006fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800603e:	2000      	movs	r0, #0
 8006040:	f000 f808 	bl	8006054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006044:	f7fd f86c 	bl	8003120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40023c00 	.word	0x40023c00

08006054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <HAL_InitTick+0x54>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	4b12      	ldr	r3, [pc, #72]	; (80060ac <HAL_InitTick+0x58>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800606a:	fbb3 f3f1 	udiv	r3, r3, r1
 800606e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006072:	4618      	mov	r0, r3
 8006074:	f000 ffcf 	bl	8007016 <HAL_SYSTICK_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e00e      	b.n	80060a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d80a      	bhi.n	800609e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006088:	2200      	movs	r2, #0
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	f000 ff97 	bl	8006fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006094:	4a06      	ldr	r2, [pc, #24]	; (80060b0 <HAL_InitTick+0x5c>)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e000      	b.n	80060a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20000004 	.word	0x20000004
 80060ac:	20000014 	.word	0x20000014
 80060b0:	20000010 	.word	0x20000010

080060b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_IncTick+0x20>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_IncTick+0x24>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4413      	add	r3, r2
 80060c4:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <HAL_IncTick+0x24>)
 80060c6:	6013      	str	r3, [r2, #0]
}
 80060c8:	bf00      	nop
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000014 	.word	0x20000014
 80060d8:	20000514 	.word	0x20000514

080060dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return uwTick;
 80060e0:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <HAL_GetTick+0x14>)
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000514 	.word	0x20000514

080060f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060fc:	f7ff ffee 	bl	80060dc <HAL_GetTick>
 8006100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d005      	beq.n	800611a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_Delay+0x44>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800611a:	bf00      	nop
 800611c:	f7ff ffde 	bl	80060dc <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d8f7      	bhi.n	800611c <HAL_Delay+0x28>
  {
  }
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000014 	.word	0x20000014

0800613c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e0ed      	b.n	800632a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fd f808 	bl	8003170 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006170:	f7ff ffb4 	bl	80060dc <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006176:	e012      	b.n	800619e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006178:	f7ff ffb0 	bl	80060dc <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b0a      	cmp	r3, #10
 8006184:	d90b      	bls.n	800619e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2205      	movs	r2, #5
 8006196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0c5      	b.n	800632a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0e5      	beq.n	8006178 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0202 	bic.w	r2, r2, #2
 80061ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061bc:	f7ff ff8e 	bl	80060dc <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061c2:	e012      	b.n	80061ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061c4:	f7ff ff8a 	bl	80060dc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b0a      	cmp	r3, #10
 80061d0:	d90b      	bls.n	80061ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2205      	movs	r2, #5
 80061e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e09f      	b.n	800632a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7e1b      	ldrb	r3, [r3, #24]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d108      	bne.n	8006212 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7e5b      	ldrb	r3, [r3, #25]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e007      	b.n	800624c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7e9b      	ldrb	r3, [r3, #26]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d108      	bne.n	8006266 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0220 	orr.w	r2, r2, #32
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e007      	b.n	8006276 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0220 	bic.w	r2, r2, #32
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7edb      	ldrb	r3, [r3, #27]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d108      	bne.n	8006290 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0210 	bic.w	r2, r2, #16
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e007      	b.n	80062a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0210 	orr.w	r2, r2, #16
 800629e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7f1b      	ldrb	r3, [r3, #28]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d108      	bne.n	80062ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e007      	b.n	80062ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0208 	bic.w	r2, r2, #8
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7f5b      	ldrb	r3, [r3, #29]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d108      	bne.n	80062e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0204 	orr.w	r2, r2, #4
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e007      	b.n	80062f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	ea42 0103 	orr.w	r1, r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800634a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d003      	beq.n	800635a <HAL_CAN_ConfigFilter+0x26>
 8006352:	7cfb      	ldrb	r3, [r7, #19]
 8006354:	2b02      	cmp	r3, #2
 8006356:	f040 80be 	bne.w	80064d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800635a:	4b65      	ldr	r3, [pc, #404]	; (80064f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800635c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006374:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	431a      	orrs	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2201      	movs	r2, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	43db      	mvns	r3, r3
 80063ac:	401a      	ands	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d123      	bne.n	8006404 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	401a      	ands	r2, r3
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3248      	adds	r2, #72	; 0x48
 80063e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	3348      	adds	r3, #72	; 0x48
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	440b      	add	r3, r1
 8006402:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d122      	bne.n	8006452 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	431a      	orrs	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800642c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3248      	adds	r2, #72	; 0x48
 8006432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	3348      	adds	r3, #72	; 0x48
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	440b      	add	r3, r1
 8006450:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	43db      	mvns	r3, r3
 8006464:	401a      	ands	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800646c:	e007      	b.n	800647e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	431a      	orrs	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	43db      	mvns	r3, r3
 8006490:	401a      	ands	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006498:	e007      	b.n	80064aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064c8:	f023 0201 	bic.w	r2, r3, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e006      	b.n	80064e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40006400 	.word	0x40006400

080064f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d12e      	bne.n	8006566 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006520:	f7ff fddc 	bl	80060dc <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006526:	e012      	b.n	800654e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006528:	f7ff fdd8 	bl	80060dc <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b0a      	cmp	r3, #10
 8006534:	d90b      	bls.n	800654e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2205      	movs	r2, #5
 8006546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e012      	b.n	8006574 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e006      	b.n	8006574 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006590:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d003      	beq.n	80065a8 <HAL_CAN_AddTxMessage+0x2c>
 80065a0:	7ffb      	ldrb	r3, [r7, #31]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f040 80ad 	bne.w	8006702 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8095 	beq.w	80066f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80065d2:	2201      	movs	r2, #1
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	409a      	lsls	r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	6809      	ldr	r1, [r1, #0]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3318      	adds	r3, #24
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	440b      	add	r3, r1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e00f      	b.n	8006620 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800660a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006614:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	3318      	adds	r3, #24
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	440b      	add	r3, r1
 800661e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3318      	adds	r3, #24
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	440b      	add	r3, r1
 8006630:	3304      	adds	r3, #4
 8006632:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	7d1b      	ldrb	r3, [r3, #20]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d111      	bne.n	8006660 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3318      	adds	r3, #24
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4413      	add	r3, r2
 8006648:	3304      	adds	r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	6811      	ldr	r1, [r2, #0]
 8006650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3318      	adds	r3, #24
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	440b      	add	r3, r1
 800665c:	3304      	adds	r3, #4
 800665e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3307      	adds	r3, #7
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	061a      	lsls	r2, r3, #24
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3306      	adds	r3, #6
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3305      	adds	r3, #5
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	4313      	orrs	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	3204      	adds	r2, #4
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	4610      	mov	r0, r2
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	6811      	ldr	r1, [r2, #0]
 8006688:	ea43 0200 	orr.w	r2, r3, r0
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	440b      	add	r3, r1
 8006692:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006696:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3303      	adds	r3, #3
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	061a      	lsls	r2, r3, #24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3302      	adds	r3, #2
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	041b      	lsls	r3, r3, #16
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3301      	adds	r3, #1
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	4313      	orrs	r3, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	4610      	mov	r0, r2
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	ea43 0200 	orr.w	r2, r3, r0
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	440b      	add	r3, r1
 80066c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80066cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	3318      	adds	r3, #24
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4413      	add	r3, r2
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	6811      	ldr	r1, [r2, #0]
 80066e0:	f043 0201 	orr.w	r2, r3, #1
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3318      	adds	r3, #24
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	440b      	add	r3, r1
 80066ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e00e      	b.n	8006710 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e006      	b.n	8006710 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3724      	adds	r7, #36	; 0x24
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006730:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d003      	beq.n	8006740 <HAL_CAN_GetRxMessage+0x24>
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b02      	cmp	r3, #2
 800673c:	f040 8103 	bne.w	8006946 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10e      	bne.n	8006764 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d116      	bne.n	8006782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0f7      	b.n	8006954 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d107      	bne.n	8006782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0e8      	b.n	8006954 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	331b      	adds	r3, #27
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	4413      	add	r3, r2
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0204 	and.w	r2, r3, #4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10c      	bne.n	80067ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	331b      	adds	r3, #27
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	0d5b      	lsrs	r3, r3, #21
 80067b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e00b      	b.n	80067d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	331b      	adds	r3, #27
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	4413      	add	r3, r2
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	331b      	adds	r3, #27
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	4413      	add	r3, r2
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0202 	and.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	331b      	adds	r3, #27
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2208      	movs	r2, #8
 8006804:	611a      	str	r2, [r3, #16]
 8006806:	e00b      	b.n	8006820 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	331b      	adds	r3, #27
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	4413      	add	r3, r2
 8006814:	3304      	adds	r3, #4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	331b      	adds	r3, #27
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	0a1b      	lsrs	r3, r3, #8
 8006832:	b2da      	uxtb	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	331b      	adds	r3, #27
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	4413      	add	r3, r2
 8006844:	3304      	adds	r3, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	4413      	add	r3, r2
 800685a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	4413      	add	r3, r2
 8006870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	0a1a      	lsrs	r2, r3, #8
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	4413      	add	r3, r2
 800688a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0c1a      	lsrs	r2, r3, #16
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	3302      	adds	r3, #2
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	0e1a      	lsrs	r2, r3, #24
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	3303      	adds	r3, #3
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4413      	add	r3, r2
 80068be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	3304      	adds	r3, #4
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	0a1a      	lsrs	r2, r3, #8
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3305      	adds	r3, #5
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	0c1a      	lsrs	r2, r3, #16
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	3306      	adds	r3, #6
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	4413      	add	r3, r2
 800690a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	0e1a      	lsrs	r2, r3, #24
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	3307      	adds	r3, #7
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d108      	bne.n	8006932 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0220 	orr.w	r2, r2, #32
 800692e:	60da      	str	r2, [r3, #12]
 8006930:	e007      	b.n	8006942 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0220 	orr.w	r2, r2, #32
 8006940:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e006      	b.n	8006954 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
  }
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006970:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d002      	beq.n	800697e <HAL_CAN_ActivateNotification+0x1e>
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d109      	bne.n	8006992 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e006      	b.n	80069a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d07c      	beq.n	8006aec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d023      	beq.n	8006a44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f983 	bl	8006d1a <HAL_CAN_TxMailbox0CompleteCallback>
 8006a14:	e016      	b.n	8006a44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	e00c      	b.n	8006a44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	e002      	b.n	8006a44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f989 	bl	8006d56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d024      	beq.n	8006a98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f963 	bl	8006d2e <HAL_CAN_TxMailbox1CompleteCallback>
 8006a68:	e016      	b.n	8006a98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	e00c      	b.n	8006a98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a90:	e002      	b.n	8006a98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f969 	bl	8006d6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d024      	beq.n	8006aec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f943 	bl	8006d42 <HAL_CAN_TxMailbox2CompleteCallback>
 8006abc:	e016      	b.n	8006aec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	e00c      	b.n	8006aec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	e002      	b.n	8006aec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f949 	bl	8006d7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f930 	bl	8006d92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb fdcc 	bl	80026e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2210      	movs	r2, #16
 8006b72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f912 	bl	8006dba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8f9 	bl	8006da6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f8fc 	bl	8006dce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8f5 	bl	8006de2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d07b      	beq.n	8006cfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d072      	beq.n	8006cf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d008      	beq.n	8006c44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	f043 0302 	orr.w	r3, r3, #2
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d008      	beq.n	8006c60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f043 0304 	orr.w	r3, r3, #4
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d043      	beq.n	8006cf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d03e      	beq.n	8006cf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c7a:	2b60      	cmp	r3, #96	; 0x60
 8006c7c:	d02b      	beq.n	8006cd6 <HAL_CAN_IRQHandler+0x32a>
 8006c7e:	2b60      	cmp	r3, #96	; 0x60
 8006c80:	d82e      	bhi.n	8006ce0 <HAL_CAN_IRQHandler+0x334>
 8006c82:	2b50      	cmp	r3, #80	; 0x50
 8006c84:	d022      	beq.n	8006ccc <HAL_CAN_IRQHandler+0x320>
 8006c86:	2b50      	cmp	r3, #80	; 0x50
 8006c88:	d82a      	bhi.n	8006ce0 <HAL_CAN_IRQHandler+0x334>
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d019      	beq.n	8006cc2 <HAL_CAN_IRQHandler+0x316>
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d826      	bhi.n	8006ce0 <HAL_CAN_IRQHandler+0x334>
 8006c92:	2b30      	cmp	r3, #48	; 0x30
 8006c94:	d010      	beq.n	8006cb8 <HAL_CAN_IRQHandler+0x30c>
 8006c96:	2b30      	cmp	r3, #48	; 0x30
 8006c98:	d822      	bhi.n	8006ce0 <HAL_CAN_IRQHandler+0x334>
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d002      	beq.n	8006ca4 <HAL_CAN_IRQHandler+0x2f8>
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d005      	beq.n	8006cae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006ca2:	e01d      	b.n	8006ce0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f043 0308 	orr.w	r3, r3, #8
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cac:	e019      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	f043 0310 	orr.w	r3, r3, #16
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cb6:	e014      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	f043 0320 	orr.w	r3, r3, #32
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cc0:	e00f      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cd4:	e005      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cde:	e000      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x336>
            break;
 8006ce0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006cf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f872 	bl	8006df6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d12:	bf00      	nop
 8006d14:	3728      	adds	r7, #40	; 0x28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	60d3      	str	r3, [r2, #12]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__NVIC_GetPriorityGrouping+0x18>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 0307 	and.w	r3, r3, #7
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db0b      	blt.n	8006e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	4907      	ldr	r1, [pc, #28]	; (8006ea8 <__NVIC_EnableIRQ+0x38>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2001      	movs	r0, #1
 8006e92:	fa00 f202 	lsl.w	r2, r0, r2
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e100 	.word	0xe000e100

08006eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	db0a      	blt.n	8006ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	490c      	ldr	r1, [pc, #48]	; (8006ef8 <__NVIC_SetPriority+0x4c>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	0112      	lsls	r2, r2, #4
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	440b      	add	r3, r1
 8006ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ed4:	e00a      	b.n	8006eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	4908      	ldr	r1, [pc, #32]	; (8006efc <__NVIC_SetPriority+0x50>)
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	3b04      	subs	r3, #4
 8006ee4:	0112      	lsls	r2, r2, #4
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	440b      	add	r3, r1
 8006eea:	761a      	strb	r2, [r3, #24]
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	e000e100 	.word	0xe000e100
 8006efc:	e000ed00 	.word	0xe000ed00

08006f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f1c3 0307 	rsb	r3, r3, #7
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	bf28      	it	cs
 8006f1e:	2304      	movcs	r3, #4
 8006f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2b06      	cmp	r3, #6
 8006f28:	d902      	bls.n	8006f30 <NVIC_EncodePriority+0x30>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3b03      	subs	r3, #3
 8006f2e:	e000      	b.n	8006f32 <NVIC_EncodePriority+0x32>
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43da      	mvns	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	401a      	ands	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f48:	f04f 31ff 	mov.w	r1, #4294967295
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f52:	43d9      	mvns	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f58:	4313      	orrs	r3, r2
         );
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3724      	adds	r7, #36	; 0x24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f78:	d301      	bcc.n	8006f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e00f      	b.n	8006f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <SysTick_Config+0x40>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f86:	210f      	movs	r1, #15
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	f7ff ff8e 	bl	8006eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <SysTick_Config+0x40>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <SysTick_Config+0x40>)
 8006f98:	2207      	movs	r2, #7
 8006f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	e000e010 	.word	0xe000e010

08006fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff29 	bl	8006e0c <__NVIC_SetPriorityGrouping>
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	4603      	mov	r3, r0
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fd4:	f7ff ff3e 	bl	8006e54 <__NVIC_GetPriorityGrouping>
 8006fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	6978      	ldr	r0, [r7, #20]
 8006fe0:	f7ff ff8e 	bl	8006f00 <NVIC_EncodePriority>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff ff5d 	bl	8006eac <__NVIC_SetPriority>
}
 8006ff2:	bf00      	nop
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	4603      	mov	r3, r0
 8007002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff ff31 	bl	8006e70 <__NVIC_EnableIRQ>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ffa2 	bl	8006f68 <SysTick_Config>
 8007024:	4603      	mov	r3, r0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	; 0x24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	e165      	b.n	8007318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800704c:	2201      	movs	r2, #1
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4013      	ands	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	429a      	cmp	r2, r3
 8007066:	f040 8154 	bne.w	8007312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d005      	beq.n	8007082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800707e:	2b02      	cmp	r3, #2
 8007080:	d130      	bne.n	80070e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	2203      	movs	r2, #3
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	43db      	mvns	r3, r3
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4013      	ands	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070b8:	2201      	movs	r2, #1
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	43db      	mvns	r3, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4013      	ands	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f003 0201 	and.w	r2, r3, #1
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4313      	orrs	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d017      	beq.n	8007120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	2203      	movs	r2, #3
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d123      	bne.n	8007174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	08da      	lsrs	r2, r3, #3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3208      	adds	r2, #8
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	220f      	movs	r2, #15
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	4013      	ands	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4313      	orrs	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	08da      	lsrs	r2, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3208      	adds	r2, #8
 800716e:	69b9      	ldr	r1, [r7, #24]
 8007170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	2203      	movs	r2, #3
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	43db      	mvns	r3, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4013      	ands	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 0203 	and.w	r2, r3, #3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80ae 	beq.w	8007312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	4b5d      	ldr	r3, [pc, #372]	; (8007330 <HAL_GPIO_Init+0x300>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	4a5c      	ldr	r2, [pc, #368]	; (8007330 <HAL_GPIO_Init+0x300>)
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c4:	6453      	str	r3, [r2, #68]	; 0x44
 80071c6:	4b5a      	ldr	r3, [pc, #360]	; (8007330 <HAL_GPIO_Init+0x300>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071d2:	4a58      	ldr	r2, [pc, #352]	; (8007334 <HAL_GPIO_Init+0x304>)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	089b      	lsrs	r3, r3, #2
 80071d8:	3302      	adds	r3, #2
 80071da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	220f      	movs	r2, #15
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a4f      	ldr	r2, [pc, #316]	; (8007338 <HAL_GPIO_Init+0x308>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d025      	beq.n	800724a <HAL_GPIO_Init+0x21a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a4e      	ldr	r2, [pc, #312]	; (800733c <HAL_GPIO_Init+0x30c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01f      	beq.n	8007246 <HAL_GPIO_Init+0x216>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a4d      	ldr	r2, [pc, #308]	; (8007340 <HAL_GPIO_Init+0x310>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d019      	beq.n	8007242 <HAL_GPIO_Init+0x212>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a4c      	ldr	r2, [pc, #304]	; (8007344 <HAL_GPIO_Init+0x314>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_GPIO_Init+0x20e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a4b      	ldr	r2, [pc, #300]	; (8007348 <HAL_GPIO_Init+0x318>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00d      	beq.n	800723a <HAL_GPIO_Init+0x20a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a4a      	ldr	r2, [pc, #296]	; (800734c <HAL_GPIO_Init+0x31c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d007      	beq.n	8007236 <HAL_GPIO_Init+0x206>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a49      	ldr	r2, [pc, #292]	; (8007350 <HAL_GPIO_Init+0x320>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <HAL_GPIO_Init+0x202>
 800722e:	2306      	movs	r3, #6
 8007230:	e00c      	b.n	800724c <HAL_GPIO_Init+0x21c>
 8007232:	2307      	movs	r3, #7
 8007234:	e00a      	b.n	800724c <HAL_GPIO_Init+0x21c>
 8007236:	2305      	movs	r3, #5
 8007238:	e008      	b.n	800724c <HAL_GPIO_Init+0x21c>
 800723a:	2304      	movs	r3, #4
 800723c:	e006      	b.n	800724c <HAL_GPIO_Init+0x21c>
 800723e:	2303      	movs	r3, #3
 8007240:	e004      	b.n	800724c <HAL_GPIO_Init+0x21c>
 8007242:	2302      	movs	r3, #2
 8007244:	e002      	b.n	800724c <HAL_GPIO_Init+0x21c>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <HAL_GPIO_Init+0x21c>
 800724a:	2300      	movs	r3, #0
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	f002 0203 	and.w	r2, r2, #3
 8007252:	0092      	lsls	r2, r2, #2
 8007254:	4093      	lsls	r3, r2
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	4313      	orrs	r3, r2
 800725a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800725c:	4935      	ldr	r1, [pc, #212]	; (8007334 <HAL_GPIO_Init+0x304>)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	089b      	lsrs	r3, r3, #2
 8007262:	3302      	adds	r3, #2
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800726a:	4b3a      	ldr	r3, [pc, #232]	; (8007354 <HAL_GPIO_Init+0x324>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	43db      	mvns	r3, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	4013      	ands	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800728e:	4a31      	ldr	r2, [pc, #196]	; (8007354 <HAL_GPIO_Init+0x324>)
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007294:	4b2f      	ldr	r3, [pc, #188]	; (8007354 <HAL_GPIO_Init+0x324>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072b8:	4a26      	ldr	r2, [pc, #152]	; (8007354 <HAL_GPIO_Init+0x324>)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072be:	4b25      	ldr	r3, [pc, #148]	; (8007354 <HAL_GPIO_Init+0x324>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	43db      	mvns	r3, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4013      	ands	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072e2:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <HAL_GPIO_Init+0x324>)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072e8:	4b1a      	ldr	r3, [pc, #104]	; (8007354 <HAL_GPIO_Init+0x324>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800730c:	4a11      	ldr	r2, [pc, #68]	; (8007354 <HAL_GPIO_Init+0x324>)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	3301      	adds	r3, #1
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b0f      	cmp	r3, #15
 800731c:	f67f ae96 	bls.w	800704c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800
 8007334:	40013800 	.word	0x40013800
 8007338:	40020000 	.word	0x40020000
 800733c:	40020400 	.word	0x40020400
 8007340:	40020800 	.word	0x40020800
 8007344:	40020c00 	.word	0x40020c00
 8007348:	40021000 	.word	0x40021000
 800734c:	40021400 	.word	0x40021400
 8007350:	40021800 	.word	0x40021800
 8007354:	40013c00 	.word	0x40013c00

08007358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
 8007364:	4613      	mov	r3, r2
 8007366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007368:	787b      	ldrb	r3, [r7, #1]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800736e:	887a      	ldrh	r2, [r7, #2]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007374:	e003      	b.n	800737e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007376:	887b      	ldrh	r3, [r7, #2]
 8007378:	041a      	lsls	r2, r3, #16
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	619a      	str	r2, [r3, #24]
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800739c:	887a      	ldrh	r2, [r7, #2]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4013      	ands	r3, r2
 80073a2:	041a      	lsls	r2, r3, #16
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	43d9      	mvns	r1, r3
 80073a8:	887b      	ldrh	r3, [r7, #2]
 80073aa:	400b      	ands	r3, r1
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	619a      	str	r2, [r3, #24]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e12b      	b.n	800762a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb ff12 	bl	8003210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2224      	movs	r2, #36	; 0x24
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007424:	f000 fd6c 	bl	8007f00 <HAL_RCC_GetPCLK1Freq>
 8007428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4a81      	ldr	r2, [pc, #516]	; (8007634 <HAL_I2C_Init+0x274>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d807      	bhi.n	8007444 <HAL_I2C_Init+0x84>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a80      	ldr	r2, [pc, #512]	; (8007638 <HAL_I2C_Init+0x278>)
 8007438:	4293      	cmp	r3, r2
 800743a:	bf94      	ite	ls
 800743c:	2301      	movls	r3, #1
 800743e:	2300      	movhi	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	e006      	b.n	8007452 <HAL_I2C_Init+0x92>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a7d      	ldr	r2, [pc, #500]	; (800763c <HAL_I2C_Init+0x27c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	bf94      	ite	ls
 800744c:	2301      	movls	r3, #1
 800744e:	2300      	movhi	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e0e7      	b.n	800762a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4a78      	ldr	r2, [pc, #480]	; (8007640 <HAL_I2C_Init+0x280>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	0c9b      	lsrs	r3, r3, #18
 8007464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4a6a      	ldr	r2, [pc, #424]	; (8007634 <HAL_I2C_Init+0x274>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d802      	bhi.n	8007494 <HAL_I2C_Init+0xd4>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3301      	adds	r3, #1
 8007492:	e009      	b.n	80074a8 <HAL_I2C_Init+0xe8>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	4a69      	ldr	r2, [pc, #420]	; (8007644 <HAL_I2C_Init+0x284>)
 80074a0:	fba2 2303 	umull	r2, r3, r2, r3
 80074a4:	099b      	lsrs	r3, r3, #6
 80074a6:	3301      	adds	r3, #1
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	495c      	ldr	r1, [pc, #368]	; (8007634 <HAL_I2C_Init+0x274>)
 80074c4:	428b      	cmp	r3, r1
 80074c6:	d819      	bhi.n	80074fc <HAL_I2C_Init+0x13c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1e59      	subs	r1, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074d6:	1c59      	adds	r1, r3, #1
 80074d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074dc:	400b      	ands	r3, r1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_I2C_Init+0x138>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1e59      	subs	r1, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f0:	3301      	adds	r3, #1
 80074f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074f6:	e051      	b.n	800759c <HAL_I2C_Init+0x1dc>
 80074f8:	2304      	movs	r3, #4
 80074fa:	e04f      	b.n	800759c <HAL_I2C_Init+0x1dc>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d111      	bne.n	8007528 <HAL_I2C_Init+0x168>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	1e58      	subs	r0, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	440b      	add	r3, r1
 8007512:	fbb0 f3f3 	udiv	r3, r0, r3
 8007516:	3301      	adds	r3, #1
 8007518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf0c      	ite	eq
 8007520:	2301      	moveq	r3, #1
 8007522:	2300      	movne	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	e012      	b.n	800754e <HAL_I2C_Init+0x18e>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1e58      	subs	r0, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	0099      	lsls	r1, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	fbb0 f3f3 	udiv	r3, r0, r3
 800753e:	3301      	adds	r3, #1
 8007540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_I2C_Init+0x196>
 8007552:	2301      	movs	r3, #1
 8007554:	e022      	b.n	800759c <HAL_I2C_Init+0x1dc>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10e      	bne.n	800757c <HAL_I2C_Init+0x1bc>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1e58      	subs	r0, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	440b      	add	r3, r1
 800756c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007570:	3301      	adds	r3, #1
 8007572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757a:	e00f      	b.n	800759c <HAL_I2C_Init+0x1dc>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1e58      	subs	r0, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	0099      	lsls	r1, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007592:	3301      	adds	r3, #1
 8007594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	6809      	ldr	r1, [r1, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6911      	ldr	r1, [r2, #16]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68d2      	ldr	r2, [r2, #12]
 80075d6:	4311      	orrs	r1, r2
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	430b      	orrs	r3, r1
 80075de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	000186a0 	.word	0x000186a0
 8007638:	001e847f 	.word	0x001e847f
 800763c:	003d08ff 	.word	0x003d08ff
 8007640:	431bde83 	.word	0x431bde83
 8007644:	10624dd3 	.word	0x10624dd3

08007648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	461a      	mov	r2, r3
 8007656:	4603      	mov	r3, r0
 8007658:	817b      	strh	r3, [r7, #10]
 800765a:	460b      	mov	r3, r1
 800765c:	813b      	strh	r3, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007662:	f7fe fd3b 	bl	80060dc <HAL_GetTick>
 8007666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b20      	cmp	r3, #32
 8007672:	f040 80d9 	bne.w	8007828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2319      	movs	r3, #25
 800767c:	2201      	movs	r2, #1
 800767e:	496d      	ldr	r1, [pc, #436]	; (8007834 <HAL_I2C_Mem_Write+0x1ec>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f971 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
 800768e:	e0cc      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_I2C_Mem_Write+0x56>
 800769a:	2302      	movs	r3, #2
 800769c:	e0c5      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d007      	beq.n	80076c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2221      	movs	r2, #33	; 0x21
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a4d      	ldr	r2, [pc, #308]	; (8007838 <HAL_I2C_Mem_Write+0x1f0>)
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007706:	88f8      	ldrh	r0, [r7, #6]
 8007708:	893a      	ldrh	r2, [r7, #8]
 800770a:	8979      	ldrh	r1, [r7, #10]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4603      	mov	r3, r0
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f890 	bl	800783c <I2C_RequestMemoryWrite>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d052      	beq.n	80077c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e081      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fa36 	bl	8007b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	2b04      	cmp	r3, #4
 800773c:	d107      	bne.n	800774e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800774c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e06b      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b04      	cmp	r3, #4
 800778e:	d11b      	bne.n	80077c8 <HAL_I2C_Mem_Write+0x180>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d017      	beq.n	80077c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1aa      	bne.n	8007726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fa29 	bl	8007c2c <I2C_WaitOnBTFFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00d      	beq.n	80077fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d107      	bne.n	80077f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e016      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800780a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	e000      	b.n	800782a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007828:	2302      	movs	r3, #2
  }
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	00100002 	.word	0x00100002
 8007838:	ffff0000 	.word	0xffff0000

0800783c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	461a      	mov	r2, r3
 800784a:	4603      	mov	r3, r0
 800784c:	817b      	strh	r3, [r7, #10]
 800784e:	460b      	mov	r3, r1
 8007850:	813b      	strh	r3, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2200      	movs	r2, #0
 800786e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f878 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00d      	beq.n	800789a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788c:	d103      	bne.n	8007896 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e05f      	b.n	800795a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800789a:	897b      	ldrh	r3, [r7, #10]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	6a3a      	ldr	r2, [r7, #32]
 80078ae:	492d      	ldr	r1, [pc, #180]	; (8007964 <I2C_RequestMemoryWrite+0x128>)
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f8d3 	bl	8007a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e04c      	b.n	800795a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d8:	6a39      	ldr	r1, [r7, #32]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f95e 	bl	8007b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d107      	bne.n	80078fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e02b      	b.n	800795a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d105      	bne.n	8007914 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007908:	893b      	ldrh	r3, [r7, #8]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	611a      	str	r2, [r3, #16]
 8007912:	e021      	b.n	8007958 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007914:	893b      	ldrh	r3, [r7, #8]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	b29b      	uxth	r3, r3
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007924:	6a39      	ldr	r1, [r7, #32]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f938 	bl	8007b9c <I2C_WaitOnTXEFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00d      	beq.n	800794e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b04      	cmp	r3, #4
 8007938:	d107      	bne.n	800794a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e005      	b.n	800795a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	00010002 	.word	0x00010002

08007968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007978:	e048      	b.n	8007a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d044      	beq.n	8007a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007982:	f7fe fbab 	bl	80060dc <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d139      	bne.n	8007a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	0c1b      	lsrs	r3, r3, #16
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10d      	bne.n	80079be <I2C_WaitOnFlagUntilTimeout+0x56>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	43da      	mvns	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4013      	ands	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bf0c      	ite	eq
 80079b4:	2301      	moveq	r3, #1
 80079b6:	2300      	movne	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	e00c      	b.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	43da      	mvns	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d116      	bne.n	8007a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e023      	b.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	0c1b      	lsrs	r3, r3, #16
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d10d      	bne.n	8007a32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	43da      	mvns	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4013      	ands	r3, r2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	e00c      	b.n	8007a4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	43da      	mvns	r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bf0c      	ite	eq
 8007a44:	2301      	moveq	r3, #1
 8007a46:	2300      	movne	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d093      	beq.n	800797a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a6a:	e071      	b.n	8007b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d123      	bne.n	8007ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	f043 0204 	orr.w	r2, r3, #4
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e067      	b.n	8007b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	d041      	beq.n	8007b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007acc:	f7fe fb06 	bl	80060dc <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d136      	bne.n	8007b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d10c      	bne.n	8007b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	43da      	mvns	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf14      	ite	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	2300      	moveq	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	e00b      	b.n	8007b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	43da      	mvns	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e021      	b.n	8007b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	0c1b      	lsrs	r3, r3, #16
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d10c      	bne.n	8007b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	43da      	mvns	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4013      	ands	r3, r2
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e00b      	b.n	8007b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	43da      	mvns	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	2300      	moveq	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f af6d 	bne.w	8007a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ba8:	e034      	b.n	8007c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f886 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e034      	b.n	8007c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d028      	beq.n	8007c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fe fa8b 	bl	80060dc <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11d      	bne.n	8007c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d016      	beq.n	8007c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e007      	b.n	8007c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1e:	2b80      	cmp	r3, #128	; 0x80
 8007c20:	d1c3      	bne.n	8007baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c38:	e034      	b.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f83e 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e034      	b.n	8007cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d028      	beq.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c52:	f7fe fa43 	bl	80060dc <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11d      	bne.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d016      	beq.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e007      	b.n	8007cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d1c3      	bne.n	8007c3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d11b      	bne.n	8007d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	f043 0204 	orr.w	r2, r3, #4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0cc      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d30:	4b68      	ldr	r3, [pc, #416]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d90c      	bls.n	8007d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3e:	4b65      	ldr	r3, [pc, #404]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d46:	4b63      	ldr	r3, [pc, #396]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d001      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0b8      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d020      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d70:	4b59      	ldr	r3, [pc, #356]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4a58      	ldr	r2, [pc, #352]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d88:	4b53      	ldr	r3, [pc, #332]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	4a52      	ldr	r2, [pc, #328]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d94:	4b50      	ldr	r3, [pc, #320]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	494d      	ldr	r1, [pc, #308]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d044      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d107      	bne.n	8007dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dba:	4b47      	ldr	r3, [pc, #284]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d119      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e07f      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d003      	beq.n	8007dda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d107      	bne.n	8007dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dda:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e06f      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dea:	4b3b      	ldr	r3, [pc, #236]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e067      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dfa:	4b37      	ldr	r3, [pc, #220]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f023 0203 	bic.w	r2, r3, #3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4934      	ldr	r1, [pc, #208]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e0c:	f7fe f966 	bl	80060dc <HAL_GetTick>
 8007e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e12:	e00a      	b.n	8007e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e14:	f7fe f962 	bl	80060dc <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e04f      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2a:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 020c 	and.w	r2, r3, #12
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d1eb      	bne.n	8007e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d20c      	bcs.n	8007e64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4a:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e52:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e032      	b.n	8007eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d008      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e70:	4b19      	ldr	r3, [pc, #100]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	4916      	ldr	r1, [pc, #88]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	490e      	ldr	r1, [pc, #56]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ea2:	f000 f855 	bl	8007f50 <HAL_RCC_GetSysClockFreq>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	490a      	ldr	r1, [pc, #40]	; (8007edc <HAL_RCC_ClockConfig+0x1c0>)
 8007eb4:	5ccb      	ldrb	r3, [r1, r3]
 8007eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eba:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe f8c6 	bl	8006054 <HAL_InitTick>

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40023c00 	.word	0x40023c00
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	0800d3fc 	.word	0x0800d3fc
 8007ee0:	20000004 	.word	0x20000004
 8007ee4:	20000010 	.word	0x20000010

08007ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <HAL_RCC_GetHCLKFreq+0x14>)
 8007eee:	681b      	ldr	r3, [r3, #0]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000004 	.word	0x20000004

08007f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f04:	f7ff fff0 	bl	8007ee8 <HAL_RCC_GetHCLKFreq>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	0a9b      	lsrs	r3, r3, #10
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	4903      	ldr	r1, [pc, #12]	; (8007f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f16:	5ccb      	ldrb	r3, [r1, r3]
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40023800 	.word	0x40023800
 8007f24:	0800d40c 	.word	0x0800d40c

08007f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f2c:	f7ff ffdc 	bl	8007ee8 <HAL_RCC_GetHCLKFreq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	0b5b      	lsrs	r3, r3, #13
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	4903      	ldr	r1, [pc, #12]	; (8007f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f3e:	5ccb      	ldrb	r3, [r1, r3]
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	0800d40c 	.word	0x0800d40c

08007f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f54:	b0ae      	sub	sp, #184	; 0xb8
 8007f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f76:	4bcb      	ldr	r3, [pc, #812]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 030c 	and.w	r3, r3, #12
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	f200 8206 	bhi.w	8008390 <HAL_RCC_GetSysClockFreq+0x440>
 8007f84:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08008391 	.word	0x08008391
 8007f94:	08008391 	.word	0x08008391
 8007f98:	08008391 	.word	0x08008391
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08008391 	.word	0x08008391
 8007fa4:	08008391 	.word	0x08008391
 8007fa8:	08008391 	.word	0x08008391
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08008391 	.word	0x08008391
 8007fb4:	08008391 	.word	0x08008391
 8007fb8:	08008391 	.word	0x08008391
 8007fbc:	080081c1 	.word	0x080081c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fc0:	4bb9      	ldr	r3, [pc, #740]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007fc6:	e1e7      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fc8:	4bb8      	ldr	r3, [pc, #736]	; (80082ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8007fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007fce:	e1e3      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fd0:	4bb4      	ldr	r3, [pc, #720]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fdc:	4bb1      	ldr	r3, [pc, #708]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d071      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fe8:	4bae      	ldr	r3, [pc, #696]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	099b      	lsrs	r3, r3, #6
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ff4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800800a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f04f 0100 	mov.w	r1, #0
 800801a:	0159      	lsls	r1, r3, #5
 800801c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008020:	0150      	lsls	r0, r2, #5
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4621      	mov	r1, r4
 8008028:	1a51      	subs	r1, r2, r1
 800802a:	6439      	str	r1, [r7, #64]	; 0x40
 800802c:	4629      	mov	r1, r5
 800802e:	eb63 0301 	sbc.w	r3, r3, r1
 8008032:	647b      	str	r3, [r7, #68]	; 0x44
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008040:	4649      	mov	r1, r9
 8008042:	018b      	lsls	r3, r1, #6
 8008044:	4641      	mov	r1, r8
 8008046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800804a:	4641      	mov	r1, r8
 800804c:	018a      	lsls	r2, r1, #6
 800804e:	4641      	mov	r1, r8
 8008050:	1a51      	subs	r1, r2, r1
 8008052:	63b9      	str	r1, [r7, #56]	; 0x38
 8008054:	4649      	mov	r1, r9
 8008056:	eb63 0301 	sbc.w	r3, r3, r1
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008068:	4649      	mov	r1, r9
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	4641      	mov	r1, r8
 800806e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008072:	4641      	mov	r1, r8
 8008074:	00ca      	lsls	r2, r1, #3
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	4603      	mov	r3, r0
 800807c:	4622      	mov	r2, r4
 800807e:	189b      	adds	r3, r3, r2
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
 8008082:	462b      	mov	r3, r5
 8008084:	460a      	mov	r2, r1
 8008086:	eb42 0303 	adc.w	r3, r2, r3
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008098:	4629      	mov	r1, r5
 800809a:	024b      	lsls	r3, r1, #9
 800809c:	4621      	mov	r1, r4
 800809e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080a2:	4621      	mov	r1, r4
 80080a4:	024a      	lsls	r2, r1, #9
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80080bc:	f7f8 fd94 	bl	8000be8 <__aeabi_uldivmod>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4613      	mov	r3, r2
 80080c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080ca:	e067      	b.n	800819c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080cc:	4b75      	ldr	r3, [pc, #468]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	099b      	lsrs	r3, r3, #6
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80080dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80080e6:	2300      	movs	r3, #0
 80080e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80080ee:	4622      	mov	r2, r4
 80080f0:	462b      	mov	r3, r5
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f04f 0100 	mov.w	r1, #0
 80080fa:	0159      	lsls	r1, r3, #5
 80080fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008100:	0150      	lsls	r0, r2, #5
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4621      	mov	r1, r4
 8008108:	1a51      	subs	r1, r2, r1
 800810a:	62b9      	str	r1, [r7, #40]	; 0x28
 800810c:	4629      	mov	r1, r5
 800810e:	eb63 0301 	sbc.w	r3, r3, r1
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008120:	4649      	mov	r1, r9
 8008122:	018b      	lsls	r3, r1, #6
 8008124:	4641      	mov	r1, r8
 8008126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800812a:	4641      	mov	r1, r8
 800812c:	018a      	lsls	r2, r1, #6
 800812e:	4641      	mov	r1, r8
 8008130:	ebb2 0a01 	subs.w	sl, r2, r1
 8008134:	4649      	mov	r1, r9
 8008136:	eb63 0b01 	sbc.w	fp, r3, r1
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008146:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800814a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800814e:	4692      	mov	sl, r2
 8008150:	469b      	mov	fp, r3
 8008152:	4623      	mov	r3, r4
 8008154:	eb1a 0303 	adds.w	r3, sl, r3
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	462b      	mov	r3, r5
 800815c:	eb4b 0303 	adc.w	r3, fp, r3
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800816e:	4629      	mov	r1, r5
 8008170:	028b      	lsls	r3, r1, #10
 8008172:	4621      	mov	r1, r4
 8008174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008178:	4621      	mov	r1, r4
 800817a:	028a      	lsls	r2, r1, #10
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008184:	2200      	movs	r2, #0
 8008186:	673b      	str	r3, [r7, #112]	; 0x70
 8008188:	677a      	str	r2, [r7, #116]	; 0x74
 800818a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800818e:	f7f8 fd2b 	bl	8000be8 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4613      	mov	r3, r2
 8008198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800819c:	4b41      	ldr	r3, [pc, #260]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	3301      	adds	r3, #1
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 80081ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80081be:	e0eb      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081c0:	4b38      	ldr	r3, [pc, #224]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081cc:	4b35      	ldr	r3, [pc, #212]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d06b      	beq.n	80082b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081d8:	4b32      	ldr	r3, [pc, #200]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	099b      	lsrs	r3, r3, #6
 80081de:	2200      	movs	r2, #0
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80081e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	663b      	str	r3, [r7, #96]	; 0x60
 80081ec:	2300      	movs	r3, #0
 80081ee:	667b      	str	r3, [r7, #100]	; 0x64
 80081f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	f04f 0000 	mov.w	r0, #0
 80081fc:	f04f 0100 	mov.w	r1, #0
 8008200:	0159      	lsls	r1, r3, #5
 8008202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008206:	0150      	lsls	r0, r2, #5
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4621      	mov	r1, r4
 800820e:	1a51      	subs	r1, r2, r1
 8008210:	61b9      	str	r1, [r7, #24]
 8008212:	4629      	mov	r1, r5
 8008214:	eb63 0301 	sbc.w	r3, r3, r1
 8008218:	61fb      	str	r3, [r7, #28]
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008226:	4659      	mov	r1, fp
 8008228:	018b      	lsls	r3, r1, #6
 800822a:	4651      	mov	r1, sl
 800822c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008230:	4651      	mov	r1, sl
 8008232:	018a      	lsls	r2, r1, #6
 8008234:	4651      	mov	r1, sl
 8008236:	ebb2 0801 	subs.w	r8, r2, r1
 800823a:	4659      	mov	r1, fp
 800823c:	eb63 0901 	sbc.w	r9, r3, r1
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800824c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008250:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008254:	4690      	mov	r8, r2
 8008256:	4699      	mov	r9, r3
 8008258:	4623      	mov	r3, r4
 800825a:	eb18 0303 	adds.w	r3, r8, r3
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	462b      	mov	r3, r5
 8008262:	eb49 0303 	adc.w	r3, r9, r3
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008274:	4629      	mov	r1, r5
 8008276:	024b      	lsls	r3, r1, #9
 8008278:	4621      	mov	r1, r4
 800827a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800827e:	4621      	mov	r1, r4
 8008280:	024a      	lsls	r2, r1, #9
 8008282:	4610      	mov	r0, r2
 8008284:	4619      	mov	r1, r3
 8008286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800828a:	2200      	movs	r2, #0
 800828c:	65bb      	str	r3, [r7, #88]	; 0x58
 800828e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008290:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008294:	f7f8 fca8 	bl	8000be8 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4613      	mov	r3, r2
 800829e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a2:	e065      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x420>
 80082a4:	40023800 	.word	0x40023800
 80082a8:	00f42400 	.word	0x00f42400
 80082ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082b0:	4b3d      	ldr	r3, [pc, #244]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	099b      	lsrs	r3, r3, #6
 80082b6:	2200      	movs	r2, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	4611      	mov	r1, r2
 80082bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082c0:	653b      	str	r3, [r7, #80]	; 0x50
 80082c2:	2300      	movs	r3, #0
 80082c4:	657b      	str	r3, [r7, #84]	; 0x54
 80082c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80082ca:	4642      	mov	r2, r8
 80082cc:	464b      	mov	r3, r9
 80082ce:	f04f 0000 	mov.w	r0, #0
 80082d2:	f04f 0100 	mov.w	r1, #0
 80082d6:	0159      	lsls	r1, r3, #5
 80082d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082dc:	0150      	lsls	r0, r2, #5
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4641      	mov	r1, r8
 80082e4:	1a51      	subs	r1, r2, r1
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	4649      	mov	r1, r9
 80082ea:	eb63 0301 	sbc.w	r3, r3, r1
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80082fc:	4659      	mov	r1, fp
 80082fe:	018b      	lsls	r3, r1, #6
 8008300:	4651      	mov	r1, sl
 8008302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008306:	4651      	mov	r1, sl
 8008308:	018a      	lsls	r2, r1, #6
 800830a:	4651      	mov	r1, sl
 800830c:	1a54      	subs	r4, r2, r1
 800830e:	4659      	mov	r1, fp
 8008310:	eb63 0501 	sbc.w	r5, r3, r1
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	00eb      	lsls	r3, r5, #3
 800831e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008322:	00e2      	lsls	r2, r4, #3
 8008324:	4614      	mov	r4, r2
 8008326:	461d      	mov	r5, r3
 8008328:	4643      	mov	r3, r8
 800832a:	18e3      	adds	r3, r4, r3
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	464b      	mov	r3, r9
 8008330:	eb45 0303 	adc.w	r3, r5, r3
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008342:	4629      	mov	r1, r5
 8008344:	028b      	lsls	r3, r1, #10
 8008346:	4621      	mov	r1, r4
 8008348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800834c:	4621      	mov	r1, r4
 800834e:	028a      	lsls	r2, r1, #10
 8008350:	4610      	mov	r0, r2
 8008352:	4619      	mov	r1, r3
 8008354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008358:	2200      	movs	r2, #0
 800835a:	64bb      	str	r3, [r7, #72]	; 0x48
 800835c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800835e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008362:	f7f8 fc41 	bl	8000be8 <__aeabi_uldivmod>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4613      	mov	r3, r2
 800836c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008370:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	0f1b      	lsrs	r3, r3, #28
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 800837e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800838e:	e003      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8008392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008396:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800839c:	4618      	mov	r0, r3
 800839e:	37b8      	adds	r7, #184	; 0xb8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800
 80083ac:	00f42400 	.word	0x00f42400

080083b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e28d      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8083 	beq.w	80084d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80083d0:	4b94      	ldr	r3, [pc, #592]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 030c 	and.w	r3, r3, #12
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d019      	beq.n	8008410 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80083dc:	4b91      	ldr	r3, [pc, #580]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d106      	bne.n	80083f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80083e8:	4b8e      	ldr	r3, [pc, #568]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f4:	d00c      	beq.n	8008410 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083f6:	4b8b      	ldr	r3, [pc, #556]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80083fe:	2b0c      	cmp	r3, #12
 8008400:	d112      	bne.n	8008428 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008402:	4b88      	ldr	r3, [pc, #544]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800840a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800840e:	d10b      	bne.n	8008428 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008410:	4b84      	ldr	r3, [pc, #528]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05b      	beq.n	80084d4 <HAL_RCC_OscConfig+0x124>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d157      	bne.n	80084d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e25a      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008430:	d106      	bne.n	8008440 <HAL_RCC_OscConfig+0x90>
 8008432:	4b7c      	ldr	r3, [pc, #496]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a7b      	ldr	r2, [pc, #492]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	e01d      	b.n	800847c <HAL_RCC_OscConfig+0xcc>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008448:	d10c      	bne.n	8008464 <HAL_RCC_OscConfig+0xb4>
 800844a:	4b76      	ldr	r3, [pc, #472]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a75      	ldr	r2, [pc, #468]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	4b73      	ldr	r3, [pc, #460]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a72      	ldr	r2, [pc, #456]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 800845c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e00b      	b.n	800847c <HAL_RCC_OscConfig+0xcc>
 8008464:	4b6f      	ldr	r3, [pc, #444]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6e      	ldr	r2, [pc, #440]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 800846a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b6c      	ldr	r3, [pc, #432]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a6b      	ldr	r2, [pc, #428]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800847a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d013      	beq.n	80084ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008484:	f7fd fe2a 	bl	80060dc <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800848c:	f7fd fe26 	bl	80060dc <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b64      	cmp	r3, #100	; 0x64
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e21f      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	4b61      	ldr	r3, [pc, #388]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0xdc>
 80084aa:	e014      	b.n	80084d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ac:	f7fd fe16 	bl	80060dc <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b4:	f7fd fe12 	bl	80060dc <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	; 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e20b      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084c6:	4b57      	ldr	r3, [pc, #348]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f0      	bne.n	80084b4 <HAL_RCC_OscConfig+0x104>
 80084d2:	e000      	b.n	80084d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d06f      	beq.n	80085c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084e2:	4b50      	ldr	r3, [pc, #320]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d017      	beq.n	800851e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084ee:	4b4d      	ldr	r3, [pc, #308]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d105      	bne.n	8008506 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084fa:	4b4a      	ldr	r3, [pc, #296]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00b      	beq.n	800851e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008506:	4b47      	ldr	r3, [pc, #284]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800850e:	2b0c      	cmp	r3, #12
 8008510:	d11c      	bne.n	800854c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008512:	4b44      	ldr	r3, [pc, #272]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d116      	bne.n	800854c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851e:	4b41      	ldr	r3, [pc, #260]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_RCC_OscConfig+0x186>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d001      	beq.n	8008536 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e1d3      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008536:	4b3b      	ldr	r3, [pc, #236]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	4937      	ldr	r1, [pc, #220]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008546:	4313      	orrs	r3, r2
 8008548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800854a:	e03a      	b.n	80085c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d020      	beq.n	8008596 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008554:	4b34      	ldr	r3, [pc, #208]	; (8008628 <HAL_RCC_OscConfig+0x278>)
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855a:	f7fd fdbf 	bl	80060dc <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008562:	f7fd fdbb 	bl	80060dc <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e1b4      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008574:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008580:	4b28      	ldr	r3, [pc, #160]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	4925      	ldr	r1, [pc, #148]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 8008590:	4313      	orrs	r3, r2
 8008592:	600b      	str	r3, [r1, #0]
 8008594:	e015      	b.n	80085c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008596:	4b24      	ldr	r3, [pc, #144]	; (8008628 <HAL_RCC_OscConfig+0x278>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859c:	f7fd fd9e 	bl	80060dc <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085a4:	f7fd fd9a 	bl	80060dc <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e193      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d036      	beq.n	800863c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d016      	beq.n	8008604 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <HAL_RCC_OscConfig+0x27c>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085dc:	f7fd fd7e 	bl	80060dc <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e4:	f7fd fd7a 	bl	80060dc <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e173      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <HAL_RCC_OscConfig+0x274>)
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f0      	beq.n	80085e4 <HAL_RCC_OscConfig+0x234>
 8008602:	e01b      	b.n	800863c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <HAL_RCC_OscConfig+0x27c>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800860a:	f7fd fd67 	bl	80060dc <HAL_GetTick>
 800860e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008610:	e00e      	b.n	8008630 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008612:	f7fd fd63 	bl	80060dc <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d907      	bls.n	8008630 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e15c      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
 8008624:	40023800 	.word	0x40023800
 8008628:	42470000 	.word	0x42470000
 800862c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008630:	4b8a      	ldr	r3, [pc, #552]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1ea      	bne.n	8008612 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8097 	beq.w	8008778 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800864e:	4b83      	ldr	r3, [pc, #524]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10f      	bne.n	800867a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800865a:	2300      	movs	r3, #0
 800865c:	60bb      	str	r3, [r7, #8]
 800865e:	4b7f      	ldr	r3, [pc, #508]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	4a7e      	ldr	r2, [pc, #504]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008668:	6413      	str	r3, [r2, #64]	; 0x40
 800866a:	4b7c      	ldr	r3, [pc, #496]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008676:	2301      	movs	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800867a:	4b79      	ldr	r3, [pc, #484]	; (8008860 <HAL_RCC_OscConfig+0x4b0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008682:	2b00      	cmp	r3, #0
 8008684:	d118      	bne.n	80086b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008686:	4b76      	ldr	r3, [pc, #472]	; (8008860 <HAL_RCC_OscConfig+0x4b0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a75      	ldr	r2, [pc, #468]	; (8008860 <HAL_RCC_OscConfig+0x4b0>)
 800868c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008692:	f7fd fd23 	bl	80060dc <HAL_GetTick>
 8008696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869a:	f7fd fd1f 	bl	80060dc <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e118      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ac:	4b6c      	ldr	r3, [pc, #432]	; (8008860 <HAL_RCC_OscConfig+0x4b0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0f0      	beq.n	800869a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d106      	bne.n	80086ce <HAL_RCC_OscConfig+0x31e>
 80086c0:	4b66      	ldr	r3, [pc, #408]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c4:	4a65      	ldr	r2, [pc, #404]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	6713      	str	r3, [r2, #112]	; 0x70
 80086cc:	e01c      	b.n	8008708 <HAL_RCC_OscConfig+0x358>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d10c      	bne.n	80086f0 <HAL_RCC_OscConfig+0x340>
 80086d6:	4b61      	ldr	r3, [pc, #388]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	4a60      	ldr	r2, [pc, #384]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086dc:	f043 0304 	orr.w	r3, r3, #4
 80086e0:	6713      	str	r3, [r2, #112]	; 0x70
 80086e2:	4b5e      	ldr	r3, [pc, #376]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e6:	4a5d      	ldr	r2, [pc, #372]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086e8:	f043 0301 	orr.w	r3, r3, #1
 80086ec:	6713      	str	r3, [r2, #112]	; 0x70
 80086ee:	e00b      	b.n	8008708 <HAL_RCC_OscConfig+0x358>
 80086f0:	4b5a      	ldr	r3, [pc, #360]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f4:	4a59      	ldr	r2, [pc, #356]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	6713      	str	r3, [r2, #112]	; 0x70
 80086fc:	4b57      	ldr	r3, [pc, #348]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	4a56      	ldr	r2, [pc, #344]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008702:	f023 0304 	bic.w	r3, r3, #4
 8008706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d015      	beq.n	800873c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008710:	f7fd fce4 	bl	80060dc <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008716:	e00a      	b.n	800872e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008718:	f7fd fce0 	bl	80060dc <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f241 3288 	movw	r2, #5000	; 0x1388
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e0d7      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872e:	4b4b      	ldr	r3, [pc, #300]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0ee      	beq.n	8008718 <HAL_RCC_OscConfig+0x368>
 800873a:	e014      	b.n	8008766 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873c:	f7fd fcce 	bl	80060dc <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008742:	e00a      	b.n	800875a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008744:	f7fd fcca 	bl	80060dc <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008752:	4293      	cmp	r3, r2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e0c1      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800875a:	4b40      	ldr	r3, [pc, #256]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1ee      	bne.n	8008744 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d105      	bne.n	8008778 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800876c:	4b3b      	ldr	r3, [pc, #236]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	4a3a      	ldr	r2, [pc, #232]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80ad 	beq.w	80088dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 030c 	and.w	r3, r3, #12
 800878a:	2b08      	cmp	r3, #8
 800878c:	d060      	beq.n	8008850 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d145      	bne.n	8008822 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008796:	4b33      	ldr	r3, [pc, #204]	; (8008864 <HAL_RCC_OscConfig+0x4b4>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fd fc9e 	bl	80060dc <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a4:	f7fd fc9a 	bl	80060dc <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e093      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b6:	4b29      	ldr	r3, [pc, #164]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69da      	ldr	r2, [r3, #28]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	431a      	orrs	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	019b      	lsls	r3, r3, #6
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	3b01      	subs	r3, #1
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	071b      	lsls	r3, r3, #28
 80087ee:	491b      	ldr	r1, [pc, #108]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <HAL_RCC_OscConfig+0x4b4>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fa:	f7fd fc6f 	bl	80060dc <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008802:	f7fd fc6b 	bl	80060dc <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e064      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008814:	4b11      	ldr	r3, [pc, #68]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f0      	beq.n	8008802 <HAL_RCC_OscConfig+0x452>
 8008820:	e05c      	b.n	80088dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008822:	4b10      	ldr	r3, [pc, #64]	; (8008864 <HAL_RCC_OscConfig+0x4b4>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fd fc58 	bl	80060dc <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008830:	f7fd fc54 	bl	80060dc <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e04d      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <HAL_RCC_OscConfig+0x4ac>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x480>
 800884e:	e045      	b.n	80088dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d107      	bne.n	8008868 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e040      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
 800885c:	40023800 	.word	0x40023800
 8008860:	40007000 	.word	0x40007000
 8008864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008868:	4b1f      	ldr	r3, [pc, #124]	; (80088e8 <HAL_RCC_OscConfig+0x538>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d030      	beq.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008880:	429a      	cmp	r2, r3
 8008882:	d129      	bne.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888e:	429a      	cmp	r2, r3
 8008890:	d122      	bne.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008898:	4013      	ands	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800889e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d119      	bne.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	3b01      	subs	r3, #1
 80088b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d10f      	bne.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d107      	bne.n	80088d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d001      	beq.n	80088dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40023800 	.word	0x40023800

080088ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e042      	b.n	8008984 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fa fcc4 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2224      	movs	r2, #36	; 0x24
 800891c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800892e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f973 	bl	8008c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695a      	ldr	r2, [r3, #20]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08a      	sub	sp, #40	; 0x28
 8008990:	af02      	add	r7, sp, #8
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d175      	bne.n	8008a98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_UART_Transmit+0x2c>
 80089b2:	88fb      	ldrh	r3, [r7, #6]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e06e      	b.n	8008a9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2221      	movs	r2, #33	; 0x21
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ca:	f7fd fb87 	bl	80060dc <HAL_GetTick>
 80089ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d108      	bne.n	80089f8 <HAL_UART_Transmit+0x6c>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	61bb      	str	r3, [r7, #24]
 80089f6:	e003      	b.n	8008a00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a00:	e02e      	b.n	8008a60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2180      	movs	r1, #128	; 0x80
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f848 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e03a      	b.n	8008a9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	61bb      	str	r3, [r7, #24]
 8008a40:	e007      	b.n	8008a52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1cb      	bne.n	8008a02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	2140      	movs	r1, #64	; 0x40
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f814 	bl	8008aa2 <UART_WaitOnFlagUntilTimeout>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e006      	b.n	8008a9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e000      	b.n	8008a9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a98:	2302      	movs	r3, #2
  }
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab2:	e03b      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	d037      	beq.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abc:	f7fd fb0e 	bl	80060dc <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	6a3a      	ldr	r2, [r7, #32]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d302      	bcc.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e03a      	b.n	8008b4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d023      	beq.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b80      	cmp	r3, #128	; 0x80
 8008ae8:	d020      	beq.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d01d      	beq.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d116      	bne.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f81d 	bl	8008b54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e00f      	b.n	8008b4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4013      	ands	r3, r2
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2301      	moveq	r3, #1
 8008b3e:	2300      	movne	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d0b4      	beq.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b095      	sub	sp, #84	; 0x54
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	330c      	adds	r3, #12
 8008b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e5      	bne.n	8008b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3314      	adds	r3, #20
 8008b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3314      	adds	r3, #20
 8008bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d119      	bne.n	8008c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f023 0310 	bic.w	r3, r3, #16
 8008be2:	647b      	str	r3, [r7, #68]	; 0x44
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bec:	61ba      	str	r2, [r7, #24]
 8008bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c0e:	bf00      	nop
 8008c10:	3754      	adds	r7, #84	; 0x54
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
	...

08008c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c20:	b0c0      	sub	sp, #256	; 0x100
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	68d9      	ldr	r1, [r3, #12]
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	ea40 0301 	orr.w	r3, r0, r1
 8008c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	689a      	ldr	r2, [r3, #8]
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c74:	f021 010c 	bic.w	r1, r1, #12
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c82:	430b      	orrs	r3, r1
 8008c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c96:	6999      	ldr	r1, [r3, #24]
 8008c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	ea40 0301 	orr.w	r3, r0, r1
 8008ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b8f      	ldr	r3, [pc, #572]	; (8008ee8 <UART_SetConfig+0x2cc>)
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d005      	beq.n	8008cbc <UART_SetConfig+0xa0>
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b8d      	ldr	r3, [pc, #564]	; (8008eec <UART_SetConfig+0x2d0>)
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d104      	bne.n	8008cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cbc:	f7ff f934 	bl	8007f28 <HAL_RCC_GetPCLK2Freq>
 8008cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cc4:	e003      	b.n	8008cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cc6:	f7ff f91b 	bl	8007f00 <HAL_RCC_GetPCLK1Freq>
 8008cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd8:	f040 810c 	bne.w	8008ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cee:	4622      	mov	r2, r4
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	1891      	adds	r1, r2, r2
 8008cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cf6:	415b      	adcs	r3, r3
 8008cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cfe:	4621      	mov	r1, r4
 8008d00:	eb12 0801 	adds.w	r8, r2, r1
 8008d04:	4629      	mov	r1, r5
 8008d06:	eb43 0901 	adc.w	r9, r3, r1
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d1e:	4690      	mov	r8, r2
 8008d20:	4699      	mov	r9, r3
 8008d22:	4623      	mov	r3, r4
 8008d24:	eb18 0303 	adds.w	r3, r8, r3
 8008d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	eb49 0303 	adc.w	r3, r9, r3
 8008d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	18db      	adds	r3, r3, r3
 8008d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d50:	4613      	mov	r3, r2
 8008d52:	eb42 0303 	adc.w	r3, r2, r3
 8008d56:	657b      	str	r3, [r7, #84]	; 0x54
 8008d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d60:	f7f7 ff42 	bl	8000be8 <__aeabi_uldivmod>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4b61      	ldr	r3, [pc, #388]	; (8008ef0 <UART_SetConfig+0x2d4>)
 8008d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	011c      	lsls	r4, r3, #4
 8008d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d84:	4642      	mov	r2, r8
 8008d86:	464b      	mov	r3, r9
 8008d88:	1891      	adds	r1, r2, r2
 8008d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d8c:	415b      	adcs	r3, r3
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d94:	4641      	mov	r1, r8
 8008d96:	eb12 0a01 	adds.w	sl, r2, r1
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db4:	4692      	mov	sl, r2
 8008db6:	469b      	mov	fp, r3
 8008db8:	4643      	mov	r3, r8
 8008dba:	eb1a 0303 	adds.w	r3, sl, r3
 8008dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dc2:	464b      	mov	r3, r9
 8008dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8008dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008de0:	460b      	mov	r3, r1
 8008de2:	18db      	adds	r3, r3, r3
 8008de4:	643b      	str	r3, [r7, #64]	; 0x40
 8008de6:	4613      	mov	r3, r2
 8008de8:	eb42 0303 	adc.w	r3, r2, r3
 8008dec:	647b      	str	r3, [r7, #68]	; 0x44
 8008dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008df6:	f7f7 fef7 	bl	8000be8 <__aeabi_uldivmod>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4b3b      	ldr	r3, [pc, #236]	; (8008ef0 <UART_SetConfig+0x2d4>)
 8008e02:	fba3 2301 	umull	r2, r3, r3, r1
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	2264      	movs	r2, #100	; 0x64
 8008e0a:	fb02 f303 	mul.w	r3, r2, r3
 8008e0e:	1acb      	subs	r3, r1, r3
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e16:	4b36      	ldr	r3, [pc, #216]	; (8008ef0 <UART_SetConfig+0x2d4>)
 8008e18:	fba3 2302 	umull	r2, r3, r3, r2
 8008e1c:	095b      	lsrs	r3, r3, #5
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e24:	441c      	add	r4, r3
 8008e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e38:	4642      	mov	r2, r8
 8008e3a:	464b      	mov	r3, r9
 8008e3c:	1891      	adds	r1, r2, r2
 8008e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e40:	415b      	adcs	r3, r3
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e48:	4641      	mov	r1, r8
 8008e4a:	1851      	adds	r1, r2, r1
 8008e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e4e:	4649      	mov	r1, r9
 8008e50:	414b      	adcs	r3, r1
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e60:	4659      	mov	r1, fp
 8008e62:	00cb      	lsls	r3, r1, #3
 8008e64:	4651      	mov	r1, sl
 8008e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e6a:	4651      	mov	r1, sl
 8008e6c:	00ca      	lsls	r2, r1, #3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4619      	mov	r1, r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	4642      	mov	r2, r8
 8008e76:	189b      	adds	r3, r3, r2
 8008e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	460a      	mov	r2, r1
 8008e80:	eb42 0303 	adc.w	r3, r2, r3
 8008e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	18db      	adds	r3, r3, r3
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	eb42 0303 	adc.w	r3, r2, r3
 8008ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008eb2:	f7f7 fe99 	bl	8000be8 <__aeabi_uldivmod>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <UART_SetConfig+0x2d4>)
 8008ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ec0:	095b      	lsrs	r3, r3, #5
 8008ec2:	2164      	movs	r1, #100	; 0x64
 8008ec4:	fb01 f303 	mul.w	r3, r1, r3
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	3332      	adds	r3, #50	; 0x32
 8008ece:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <UART_SetConfig+0x2d4>)
 8008ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	f003 0207 	and.w	r2, r3, #7
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4422      	add	r2, r4
 8008ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ee4:	e106      	b.n	80090f4 <UART_SetConfig+0x4d8>
 8008ee6:	bf00      	nop
 8008ee8:	40011000 	.word	0x40011000
 8008eec:	40011400 	.word	0x40011400
 8008ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f06:	4642      	mov	r2, r8
 8008f08:	464b      	mov	r3, r9
 8008f0a:	1891      	adds	r1, r2, r2
 8008f0c:	6239      	str	r1, [r7, #32]
 8008f0e:	415b      	adcs	r3, r3
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
 8008f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f16:	4641      	mov	r1, r8
 8008f18:	1854      	adds	r4, r2, r1
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	eb43 0501 	adc.w	r5, r3, r1
 8008f20:	f04f 0200 	mov.w	r2, #0
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	00eb      	lsls	r3, r5, #3
 8008f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f2e:	00e2      	lsls	r2, r4, #3
 8008f30:	4614      	mov	r4, r2
 8008f32:	461d      	mov	r5, r3
 8008f34:	4643      	mov	r3, r8
 8008f36:	18e3      	adds	r3, r4, r3
 8008f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	eb45 0303 	adc.w	r3, r5, r3
 8008f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f62:	4629      	mov	r1, r5
 8008f64:	008b      	lsls	r3, r1, #2
 8008f66:	4621      	mov	r1, r4
 8008f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	008a      	lsls	r2, r1, #2
 8008f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f74:	f7f7 fe38 	bl	8000be8 <__aeabi_uldivmod>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4b60      	ldr	r3, [pc, #384]	; (8009100 <UART_SetConfig+0x4e4>)
 8008f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	011c      	lsls	r4, r3, #4
 8008f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	1891      	adds	r1, r2, r2
 8008f9e:	61b9      	str	r1, [r7, #24]
 8008fa0:	415b      	adcs	r3, r3
 8008fa2:	61fb      	str	r3, [r7, #28]
 8008fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fa8:	4641      	mov	r1, r8
 8008faa:	1851      	adds	r1, r2, r1
 8008fac:	6139      	str	r1, [r7, #16]
 8008fae:	4649      	mov	r1, r9
 8008fb0:	414b      	adcs	r3, r1
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	00cb      	lsls	r3, r1, #3
 8008fc4:	4651      	mov	r1, sl
 8008fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fca:	4651      	mov	r1, sl
 8008fcc:	00ca      	lsls	r2, r1, #3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	189b      	adds	r3, r3, r2
 8008fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fdc:	464b      	mov	r3, r9
 8008fde:	460a      	mov	r2, r1
 8008fe0:	eb42 0303 	adc.w	r3, r2, r3
 8008fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009000:	4649      	mov	r1, r9
 8009002:	008b      	lsls	r3, r1, #2
 8009004:	4641      	mov	r1, r8
 8009006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900a:	4641      	mov	r1, r8
 800900c:	008a      	lsls	r2, r1, #2
 800900e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009012:	f7f7 fde9 	bl	8000be8 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4611      	mov	r1, r2
 800901c:	4b38      	ldr	r3, [pc, #224]	; (8009100 <UART_SetConfig+0x4e4>)
 800901e:	fba3 2301 	umull	r2, r3, r3, r1
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	2264      	movs	r2, #100	; 0x64
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	3332      	adds	r3, #50	; 0x32
 8009030:	4a33      	ldr	r2, [pc, #204]	; (8009100 <UART_SetConfig+0x4e4>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	095b      	lsrs	r3, r3, #5
 8009038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800903c:	441c      	add	r4, r3
 800903e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009042:	2200      	movs	r2, #0
 8009044:	673b      	str	r3, [r7, #112]	; 0x70
 8009046:	677a      	str	r2, [r7, #116]	; 0x74
 8009048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800904c:	4642      	mov	r2, r8
 800904e:	464b      	mov	r3, r9
 8009050:	1891      	adds	r1, r2, r2
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	415b      	adcs	r3, r3
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800905c:	4641      	mov	r1, r8
 800905e:	1851      	adds	r1, r2, r1
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	4649      	mov	r1, r9
 8009064:	414b      	adcs	r3, r1
 8009066:	607b      	str	r3, [r7, #4]
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009074:	4659      	mov	r1, fp
 8009076:	00cb      	lsls	r3, r1, #3
 8009078:	4651      	mov	r1, sl
 800907a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800907e:	4651      	mov	r1, sl
 8009080:	00ca      	lsls	r2, r1, #3
 8009082:	4610      	mov	r0, r2
 8009084:	4619      	mov	r1, r3
 8009086:	4603      	mov	r3, r0
 8009088:	4642      	mov	r2, r8
 800908a:	189b      	adds	r3, r3, r2
 800908c:	66bb      	str	r3, [r7, #104]	; 0x68
 800908e:	464b      	mov	r3, r9
 8009090:	460a      	mov	r2, r1
 8009092:	eb42 0303 	adc.w	r3, r2, r3
 8009096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	663b      	str	r3, [r7, #96]	; 0x60
 80090a2:	667a      	str	r2, [r7, #100]	; 0x64
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090b0:	4649      	mov	r1, r9
 80090b2:	008b      	lsls	r3, r1, #2
 80090b4:	4641      	mov	r1, r8
 80090b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ba:	4641      	mov	r1, r8
 80090bc:	008a      	lsls	r2, r1, #2
 80090be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090c2:	f7f7 fd91 	bl	8000be8 <__aeabi_uldivmod>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <UART_SetConfig+0x4e4>)
 80090cc:	fba3 1302 	umull	r1, r3, r3, r2
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	2164      	movs	r1, #100	; 0x64
 80090d4:	fb01 f303 	mul.w	r3, r1, r3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	3332      	adds	r3, #50	; 0x32
 80090de:	4a08      	ldr	r2, [pc, #32]	; (8009100 <UART_SetConfig+0x4e4>)
 80090e0:	fba2 2303 	umull	r2, r3, r2, r3
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	f003 020f 	and.w	r2, r3, #15
 80090ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4422      	add	r2, r4
 80090f2:	609a      	str	r2, [r3, #8]
}
 80090f4:	bf00      	nop
 80090f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090fa:	46bd      	mov	sp, r7
 80090fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009100:	51eb851f 	.word	0x51eb851f

08009104 <__assert_func>:
 8009104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009106:	4614      	mov	r4, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <__assert_func+0x2c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4605      	mov	r5, r0
 8009110:	68d8      	ldr	r0, [r3, #12]
 8009112:	b14c      	cbz	r4, 8009128 <__assert_func+0x24>
 8009114:	4b07      	ldr	r3, [pc, #28]	; (8009134 <__assert_func+0x30>)
 8009116:	9100      	str	r1, [sp, #0]
 8009118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800911c:	4906      	ldr	r1, [pc, #24]	; (8009138 <__assert_func+0x34>)
 800911e:	462b      	mov	r3, r5
 8009120:	f000 fdd4 	bl	8009ccc <fiprintf>
 8009124:	f001 f855 	bl	800a1d2 <abort>
 8009128:	4b04      	ldr	r3, [pc, #16]	; (800913c <__assert_func+0x38>)
 800912a:	461c      	mov	r4, r3
 800912c:	e7f3      	b.n	8009116 <__assert_func+0x12>
 800912e:	bf00      	nop
 8009130:	20000070 	.word	0x20000070
 8009134:	0800dec8 	.word	0x0800dec8
 8009138:	0800ded5 	.word	0x0800ded5
 800913c:	0800df03 	.word	0x0800df03

08009140 <malloc>:
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <malloc+0xc>)
 8009142:	4601      	mov	r1, r0
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f000 b82b 	b.w	80091a0 <_malloc_r>
 800914a:	bf00      	nop
 800914c:	20000070 	.word	0x20000070

08009150 <free>:
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <free+0xc>)
 8009152:	4601      	mov	r1, r0
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f001 bebd 	b.w	800aed4 <_free_r>
 800915a:	bf00      	nop
 800915c:	20000070 	.word	0x20000070

08009160 <sbrk_aligned>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	4e0e      	ldr	r6, [pc, #56]	; (800919c <sbrk_aligned+0x3c>)
 8009164:	460c      	mov	r4, r1
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	4605      	mov	r5, r0
 800916a:	b911      	cbnz	r1, 8009172 <sbrk_aligned+0x12>
 800916c:	f000 ffd4 	bl	800a118 <_sbrk_r>
 8009170:	6030      	str	r0, [r6, #0]
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 ffcf 	bl	800a118 <_sbrk_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d00a      	beq.n	8009194 <sbrk_aligned+0x34>
 800917e:	1cc4      	adds	r4, r0, #3
 8009180:	f024 0403 	bic.w	r4, r4, #3
 8009184:	42a0      	cmp	r0, r4
 8009186:	d007      	beq.n	8009198 <sbrk_aligned+0x38>
 8009188:	1a21      	subs	r1, r4, r0
 800918a:	4628      	mov	r0, r5
 800918c:	f000 ffc4 	bl	800a118 <_sbrk_r>
 8009190:	3001      	adds	r0, #1
 8009192:	d101      	bne.n	8009198 <sbrk_aligned+0x38>
 8009194:	f04f 34ff 	mov.w	r4, #4294967295
 8009198:	4620      	mov	r0, r4
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	2000051c 	.word	0x2000051c

080091a0 <_malloc_r>:
 80091a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a4:	1ccd      	adds	r5, r1, #3
 80091a6:	f025 0503 	bic.w	r5, r5, #3
 80091aa:	3508      	adds	r5, #8
 80091ac:	2d0c      	cmp	r5, #12
 80091ae:	bf38      	it	cc
 80091b0:	250c      	movcc	r5, #12
 80091b2:	2d00      	cmp	r5, #0
 80091b4:	4607      	mov	r7, r0
 80091b6:	db01      	blt.n	80091bc <_malloc_r+0x1c>
 80091b8:	42a9      	cmp	r1, r5
 80091ba:	d905      	bls.n	80091c8 <_malloc_r+0x28>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	2600      	movs	r6, #0
 80091c2:	4630      	mov	r0, r6
 80091c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800929c <_malloc_r+0xfc>
 80091cc:	f000 f868 	bl	80092a0 <__malloc_lock>
 80091d0:	f8d8 3000 	ldr.w	r3, [r8]
 80091d4:	461c      	mov	r4, r3
 80091d6:	bb5c      	cbnz	r4, 8009230 <_malloc_r+0x90>
 80091d8:	4629      	mov	r1, r5
 80091da:	4638      	mov	r0, r7
 80091dc:	f7ff ffc0 	bl	8009160 <sbrk_aligned>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	4604      	mov	r4, r0
 80091e4:	d155      	bne.n	8009292 <_malloc_r+0xf2>
 80091e6:	f8d8 4000 	ldr.w	r4, [r8]
 80091ea:	4626      	mov	r6, r4
 80091ec:	2e00      	cmp	r6, #0
 80091ee:	d145      	bne.n	800927c <_malloc_r+0xdc>
 80091f0:	2c00      	cmp	r4, #0
 80091f2:	d048      	beq.n	8009286 <_malloc_r+0xe6>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	4631      	mov	r1, r6
 80091f8:	4638      	mov	r0, r7
 80091fa:	eb04 0903 	add.w	r9, r4, r3
 80091fe:	f000 ff8b 	bl	800a118 <_sbrk_r>
 8009202:	4581      	cmp	r9, r0
 8009204:	d13f      	bne.n	8009286 <_malloc_r+0xe6>
 8009206:	6821      	ldr	r1, [r4, #0]
 8009208:	1a6d      	subs	r5, r5, r1
 800920a:	4629      	mov	r1, r5
 800920c:	4638      	mov	r0, r7
 800920e:	f7ff ffa7 	bl	8009160 <sbrk_aligned>
 8009212:	3001      	adds	r0, #1
 8009214:	d037      	beq.n	8009286 <_malloc_r+0xe6>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	442b      	add	r3, r5
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	f8d8 3000 	ldr.w	r3, [r8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d038      	beq.n	8009296 <_malloc_r+0xf6>
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	42a2      	cmp	r2, r4
 8009228:	d12b      	bne.n	8009282 <_malloc_r+0xe2>
 800922a:	2200      	movs	r2, #0
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	e00f      	b.n	8009250 <_malloc_r+0xb0>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	1b52      	subs	r2, r2, r5
 8009234:	d41f      	bmi.n	8009276 <_malloc_r+0xd6>
 8009236:	2a0b      	cmp	r2, #11
 8009238:	d917      	bls.n	800926a <_malloc_r+0xca>
 800923a:	1961      	adds	r1, r4, r5
 800923c:	42a3      	cmp	r3, r4
 800923e:	6025      	str	r5, [r4, #0]
 8009240:	bf18      	it	ne
 8009242:	6059      	strne	r1, [r3, #4]
 8009244:	6863      	ldr	r3, [r4, #4]
 8009246:	bf08      	it	eq
 8009248:	f8c8 1000 	streq.w	r1, [r8]
 800924c:	5162      	str	r2, [r4, r5]
 800924e:	604b      	str	r3, [r1, #4]
 8009250:	4638      	mov	r0, r7
 8009252:	f104 060b 	add.w	r6, r4, #11
 8009256:	f000 f829 	bl	80092ac <__malloc_unlock>
 800925a:	f026 0607 	bic.w	r6, r6, #7
 800925e:	1d23      	adds	r3, r4, #4
 8009260:	1af2      	subs	r2, r6, r3
 8009262:	d0ae      	beq.n	80091c2 <_malloc_r+0x22>
 8009264:	1b9b      	subs	r3, r3, r6
 8009266:	50a3      	str	r3, [r4, r2]
 8009268:	e7ab      	b.n	80091c2 <_malloc_r+0x22>
 800926a:	42a3      	cmp	r3, r4
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	d1dd      	bne.n	800922c <_malloc_r+0x8c>
 8009270:	f8c8 2000 	str.w	r2, [r8]
 8009274:	e7ec      	b.n	8009250 <_malloc_r+0xb0>
 8009276:	4623      	mov	r3, r4
 8009278:	6864      	ldr	r4, [r4, #4]
 800927a:	e7ac      	b.n	80091d6 <_malloc_r+0x36>
 800927c:	4634      	mov	r4, r6
 800927e:	6876      	ldr	r6, [r6, #4]
 8009280:	e7b4      	b.n	80091ec <_malloc_r+0x4c>
 8009282:	4613      	mov	r3, r2
 8009284:	e7cc      	b.n	8009220 <_malloc_r+0x80>
 8009286:	230c      	movs	r3, #12
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4638      	mov	r0, r7
 800928c:	f000 f80e 	bl	80092ac <__malloc_unlock>
 8009290:	e797      	b.n	80091c2 <_malloc_r+0x22>
 8009292:	6025      	str	r5, [r4, #0]
 8009294:	e7dc      	b.n	8009250 <_malloc_r+0xb0>
 8009296:	605b      	str	r3, [r3, #4]
 8009298:	deff      	udf	#255	; 0xff
 800929a:	bf00      	nop
 800929c:	20000518 	.word	0x20000518

080092a0 <__malloc_lock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_lock+0x8>)
 80092a2:	f000 bf86 	b.w	800a1b2 <__retarget_lock_acquire_recursive>
 80092a6:	bf00      	nop
 80092a8:	20000660 	.word	0x20000660

080092ac <__malloc_unlock>:
 80092ac:	4801      	ldr	r0, [pc, #4]	; (80092b4 <__malloc_unlock+0x8>)
 80092ae:	f000 bf81 	b.w	800a1b4 <__retarget_lock_release_recursive>
 80092b2:	bf00      	nop
 80092b4:	20000660 	.word	0x20000660

080092b8 <__cvt>:
 80092b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	ec55 4b10 	vmov	r4, r5, d0
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	460e      	mov	r6, r1
 80092c4:	4619      	mov	r1, r3
 80092c6:	462b      	mov	r3, r5
 80092c8:	bfbb      	ittet	lt
 80092ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092ce:	461d      	movlt	r5, r3
 80092d0:	2300      	movge	r3, #0
 80092d2:	232d      	movlt	r3, #45	; 0x2d
 80092d4:	700b      	strb	r3, [r1, #0]
 80092d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092dc:	4691      	mov	r9, r2
 80092de:	f023 0820 	bic.w	r8, r3, #32
 80092e2:	bfbc      	itt	lt
 80092e4:	4622      	movlt	r2, r4
 80092e6:	4614      	movlt	r4, r2
 80092e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092ec:	d005      	beq.n	80092fa <__cvt+0x42>
 80092ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092f2:	d100      	bne.n	80092f6 <__cvt+0x3e>
 80092f4:	3601      	adds	r6, #1
 80092f6:	2102      	movs	r1, #2
 80092f8:	e000      	b.n	80092fc <__cvt+0x44>
 80092fa:	2103      	movs	r1, #3
 80092fc:	ab03      	add	r3, sp, #12
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	ab02      	add	r3, sp, #8
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	ec45 4b10 	vmov	d0, r4, r5
 8009308:	4653      	mov	r3, sl
 800930a:	4632      	mov	r2, r6
 800930c:	f000 fff0 	bl	800a2f0 <_dtoa_r>
 8009310:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009314:	4607      	mov	r7, r0
 8009316:	d102      	bne.n	800931e <__cvt+0x66>
 8009318:	f019 0f01 	tst.w	r9, #1
 800931c:	d022      	beq.n	8009364 <__cvt+0xac>
 800931e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009322:	eb07 0906 	add.w	r9, r7, r6
 8009326:	d110      	bne.n	800934a <__cvt+0x92>
 8009328:	783b      	ldrb	r3, [r7, #0]
 800932a:	2b30      	cmp	r3, #48	; 0x30
 800932c:	d10a      	bne.n	8009344 <__cvt+0x8c>
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800933a:	b918      	cbnz	r0, 8009344 <__cvt+0x8c>
 800933c:	f1c6 0601 	rsb	r6, r6, #1
 8009340:	f8ca 6000 	str.w	r6, [sl]
 8009344:	f8da 3000 	ldr.w	r3, [sl]
 8009348:	4499      	add	r9, r3
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f7 fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 8009356:	b108      	cbz	r0, 800935c <__cvt+0xa4>
 8009358:	f8cd 900c 	str.w	r9, [sp, #12]
 800935c:	2230      	movs	r2, #48	; 0x30
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	454b      	cmp	r3, r9
 8009362:	d307      	bcc.n	8009374 <__cvt+0xbc>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009368:	1bdb      	subs	r3, r3, r7
 800936a:	4638      	mov	r0, r7
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	b004      	add	sp, #16
 8009370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009374:	1c59      	adds	r1, r3, #1
 8009376:	9103      	str	r1, [sp, #12]
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	e7f0      	b.n	800935e <__cvt+0xa6>

0800937c <__exponent>:
 800937c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800937e:	4603      	mov	r3, r0
 8009380:	2900      	cmp	r1, #0
 8009382:	bfb8      	it	lt
 8009384:	4249      	neglt	r1, r1
 8009386:	f803 2b02 	strb.w	r2, [r3], #2
 800938a:	bfb4      	ite	lt
 800938c:	222d      	movlt	r2, #45	; 0x2d
 800938e:	222b      	movge	r2, #43	; 0x2b
 8009390:	2909      	cmp	r1, #9
 8009392:	7042      	strb	r2, [r0, #1]
 8009394:	dd2a      	ble.n	80093ec <__exponent+0x70>
 8009396:	f10d 0207 	add.w	r2, sp, #7
 800939a:	4617      	mov	r7, r2
 800939c:	260a      	movs	r6, #10
 800939e:	4694      	mov	ip, r2
 80093a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80093a4:	fb06 1415 	mls	r4, r6, r5, r1
 80093a8:	3430      	adds	r4, #48	; 0x30
 80093aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80093ae:	460c      	mov	r4, r1
 80093b0:	2c63      	cmp	r4, #99	; 0x63
 80093b2:	f102 32ff 	add.w	r2, r2, #4294967295
 80093b6:	4629      	mov	r1, r5
 80093b8:	dcf1      	bgt.n	800939e <__exponent+0x22>
 80093ba:	3130      	adds	r1, #48	; 0x30
 80093bc:	f1ac 0402 	sub.w	r4, ip, #2
 80093c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80093c4:	1c41      	adds	r1, r0, #1
 80093c6:	4622      	mov	r2, r4
 80093c8:	42ba      	cmp	r2, r7
 80093ca:	d30a      	bcc.n	80093e2 <__exponent+0x66>
 80093cc:	f10d 0209 	add.w	r2, sp, #9
 80093d0:	eba2 020c 	sub.w	r2, r2, ip
 80093d4:	42bc      	cmp	r4, r7
 80093d6:	bf88      	it	hi
 80093d8:	2200      	movhi	r2, #0
 80093da:	4413      	add	r3, r2
 80093dc:	1a18      	subs	r0, r3, r0
 80093de:	b003      	add	sp, #12
 80093e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80093e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80093ea:	e7ed      	b.n	80093c8 <__exponent+0x4c>
 80093ec:	2330      	movs	r3, #48	; 0x30
 80093ee:	3130      	adds	r1, #48	; 0x30
 80093f0:	7083      	strb	r3, [r0, #2]
 80093f2:	70c1      	strb	r1, [r0, #3]
 80093f4:	1d03      	adds	r3, r0, #4
 80093f6:	e7f1      	b.n	80093dc <__exponent+0x60>

080093f8 <_printf_float>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	ed2d 8b02 	vpush	{d8}
 8009400:	b08d      	sub	sp, #52	; 0x34
 8009402:	460c      	mov	r4, r1
 8009404:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009408:	4616      	mov	r6, r2
 800940a:	461f      	mov	r7, r3
 800940c:	4605      	mov	r5, r0
 800940e:	f000 fe4b 	bl	800a0a8 <_localeconv_r>
 8009412:	f8d0 a000 	ldr.w	sl, [r0]
 8009416:	4650      	mov	r0, sl
 8009418:	f7f6 ff4a 	bl	80002b0 <strlen>
 800941c:	2300      	movs	r3, #0
 800941e:	930a      	str	r3, [sp, #40]	; 0x28
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	f8d8 3000 	ldr.w	r3, [r8]
 8009428:	f894 b018 	ldrb.w	fp, [r4, #24]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	f103 0208 	add.w	r2, r3, #8
 8009436:	f8c8 2000 	str.w	r2, [r8]
 800943a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800943e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f8cd 8018 	str.w	r8, [sp, #24]
 8009448:	ee08 0a10 	vmov	s16, r0
 800944c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009454:	4b9e      	ldr	r3, [pc, #632]	; (80096d0 <_printf_float+0x2d8>)
 8009456:	f04f 32ff 	mov.w	r2, #4294967295
 800945a:	f7f7 fb87 	bl	8000b6c <__aeabi_dcmpun>
 800945e:	bb88      	cbnz	r0, 80094c4 <_printf_float+0xcc>
 8009460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009464:	4b9a      	ldr	r3, [pc, #616]	; (80096d0 <_printf_float+0x2d8>)
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	f7f7 fb61 	bl	8000b30 <__aeabi_dcmple>
 800946e:	bb48      	cbnz	r0, 80094c4 <_printf_float+0xcc>
 8009470:	2200      	movs	r2, #0
 8009472:	2300      	movs	r3, #0
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f7 fb50 	bl	8000b1c <__aeabi_dcmplt>
 800947c:	b110      	cbz	r0, 8009484 <_printf_float+0x8c>
 800947e:	232d      	movs	r3, #45	; 0x2d
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009484:	4a93      	ldr	r2, [pc, #588]	; (80096d4 <_printf_float+0x2dc>)
 8009486:	4b94      	ldr	r3, [pc, #592]	; (80096d8 <_printf_float+0x2e0>)
 8009488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800948c:	bf94      	ite	ls
 800948e:	4690      	movls	r8, r2
 8009490:	4698      	movhi	r8, r3
 8009492:	2303      	movs	r3, #3
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	9b05      	ldr	r3, [sp, #20]
 8009498:	f023 0304 	bic.w	r3, r3, #4
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	9700      	str	r7, [sp, #0]
 80094a4:	4633      	mov	r3, r6
 80094a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80094a8:	4621      	mov	r1, r4
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 f9da 	bl	8009864 <_printf_common>
 80094b0:	3001      	adds	r0, #1
 80094b2:	f040 8090 	bne.w	80095d6 <_printf_float+0x1de>
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ba:	b00d      	add	sp, #52	; 0x34
 80094bc:	ecbd 8b02 	vpop	{d8}
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	4642      	mov	r2, r8
 80094c6:	464b      	mov	r3, r9
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f7 fb4e 	bl	8000b6c <__aeabi_dcmpun>
 80094d0:	b140      	cbz	r0, 80094e4 <_printf_float+0xec>
 80094d2:	464b      	mov	r3, r9
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfbc      	itt	lt
 80094d8:	232d      	movlt	r3, #45	; 0x2d
 80094da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094de:	4a7f      	ldr	r2, [pc, #508]	; (80096dc <_printf_float+0x2e4>)
 80094e0:	4b7f      	ldr	r3, [pc, #508]	; (80096e0 <_printf_float+0x2e8>)
 80094e2:	e7d1      	b.n	8009488 <_printf_float+0x90>
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094ea:	9206      	str	r2, [sp, #24]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	d13f      	bne.n	8009570 <_printf_float+0x178>
 80094f0:	2306      	movs	r3, #6
 80094f2:	6063      	str	r3, [r4, #4]
 80094f4:	9b05      	ldr	r3, [sp, #20]
 80094f6:	6861      	ldr	r1, [r4, #4]
 80094f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	ab0a      	add	r3, sp, #40	; 0x28
 8009502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009506:	ab09      	add	r3, sp, #36	; 0x24
 8009508:	ec49 8b10 	vmov	d0, r8, r9
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009514:	4628      	mov	r0, r5
 8009516:	f7ff fecf 	bl	80092b8 <__cvt>
 800951a:	9b06      	ldr	r3, [sp, #24]
 800951c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800951e:	2b47      	cmp	r3, #71	; 0x47
 8009520:	4680      	mov	r8, r0
 8009522:	d108      	bne.n	8009536 <_printf_float+0x13e>
 8009524:	1cc8      	adds	r0, r1, #3
 8009526:	db02      	blt.n	800952e <_printf_float+0x136>
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	4299      	cmp	r1, r3
 800952c:	dd41      	ble.n	80095b2 <_printf_float+0x1ba>
 800952e:	f1ab 0302 	sub.w	r3, fp, #2
 8009532:	fa5f fb83 	uxtb.w	fp, r3
 8009536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800953a:	d820      	bhi.n	800957e <_printf_float+0x186>
 800953c:	3901      	subs	r1, #1
 800953e:	465a      	mov	r2, fp
 8009540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009544:	9109      	str	r1, [sp, #36]	; 0x24
 8009546:	f7ff ff19 	bl	800937c <__exponent>
 800954a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800954c:	1813      	adds	r3, r2, r0
 800954e:	2a01      	cmp	r2, #1
 8009550:	4681      	mov	r9, r0
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	dc02      	bgt.n	800955c <_printf_float+0x164>
 8009556:	6822      	ldr	r2, [r4, #0]
 8009558:	07d2      	lsls	r2, r2, #31
 800955a:	d501      	bpl.n	8009560 <_printf_float+0x168>
 800955c:	3301      	adds	r3, #1
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009564:	2b00      	cmp	r3, #0
 8009566:	d09c      	beq.n	80094a2 <_printf_float+0xaa>
 8009568:	232d      	movs	r3, #45	; 0x2d
 800956a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956e:	e798      	b.n	80094a2 <_printf_float+0xaa>
 8009570:	9a06      	ldr	r2, [sp, #24]
 8009572:	2a47      	cmp	r2, #71	; 0x47
 8009574:	d1be      	bne.n	80094f4 <_printf_float+0xfc>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1bc      	bne.n	80094f4 <_printf_float+0xfc>
 800957a:	2301      	movs	r3, #1
 800957c:	e7b9      	b.n	80094f2 <_printf_float+0xfa>
 800957e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009582:	d118      	bne.n	80095b6 <_printf_float+0x1be>
 8009584:	2900      	cmp	r1, #0
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	dd0b      	ble.n	80095a2 <_printf_float+0x1aa>
 800958a:	6121      	str	r1, [r4, #16]
 800958c:	b913      	cbnz	r3, 8009594 <_printf_float+0x19c>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d502      	bpl.n	800959a <_printf_float+0x1a2>
 8009594:	3301      	adds	r3, #1
 8009596:	440b      	add	r3, r1
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	65a1      	str	r1, [r4, #88]	; 0x58
 800959c:	f04f 0900 	mov.w	r9, #0
 80095a0:	e7de      	b.n	8009560 <_printf_float+0x168>
 80095a2:	b913      	cbnz	r3, 80095aa <_printf_float+0x1b2>
 80095a4:	6822      	ldr	r2, [r4, #0]
 80095a6:	07d2      	lsls	r2, r2, #31
 80095a8:	d501      	bpl.n	80095ae <_printf_float+0x1b6>
 80095aa:	3302      	adds	r3, #2
 80095ac:	e7f4      	b.n	8009598 <_printf_float+0x1a0>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7f2      	b.n	8009598 <_printf_float+0x1a0>
 80095b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b8:	4299      	cmp	r1, r3
 80095ba:	db05      	blt.n	80095c8 <_printf_float+0x1d0>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	6121      	str	r1, [r4, #16]
 80095c0:	07d8      	lsls	r0, r3, #31
 80095c2:	d5ea      	bpl.n	800959a <_printf_float+0x1a2>
 80095c4:	1c4b      	adds	r3, r1, #1
 80095c6:	e7e7      	b.n	8009598 <_printf_float+0x1a0>
 80095c8:	2900      	cmp	r1, #0
 80095ca:	bfd4      	ite	le
 80095cc:	f1c1 0202 	rsble	r2, r1, #2
 80095d0:	2201      	movgt	r2, #1
 80095d2:	4413      	add	r3, r2
 80095d4:	e7e0      	b.n	8009598 <_printf_float+0x1a0>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	055a      	lsls	r2, r3, #21
 80095da:	d407      	bmi.n	80095ec <_printf_float+0x1f4>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	4642      	mov	r2, r8
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	d12c      	bne.n	8009644 <_printf_float+0x24c>
 80095ea:	e764      	b.n	80094b6 <_printf_float+0xbe>
 80095ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095f0:	f240 80e0 	bls.w	80097b4 <_printf_float+0x3bc>
 80095f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095f8:	2200      	movs	r2, #0
 80095fa:	2300      	movs	r3, #0
 80095fc:	f7f7 fa84 	bl	8000b08 <__aeabi_dcmpeq>
 8009600:	2800      	cmp	r0, #0
 8009602:	d034      	beq.n	800966e <_printf_float+0x276>
 8009604:	4a37      	ldr	r2, [pc, #220]	; (80096e4 <_printf_float+0x2ec>)
 8009606:	2301      	movs	r3, #1
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f af51 	beq.w	80094b6 <_printf_float+0xbe>
 8009614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009618:	429a      	cmp	r2, r3
 800961a:	db02      	blt.n	8009622 <_printf_float+0x22a>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07d8      	lsls	r0, r3, #31
 8009620:	d510      	bpl.n	8009644 <_printf_float+0x24c>
 8009622:	ee18 3a10 	vmov	r3, s16
 8009626:	4652      	mov	r2, sl
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f af41 	beq.w	80094b6 <_printf_float+0xbe>
 8009634:	f04f 0800 	mov.w	r8, #0
 8009638:	f104 091a 	add.w	r9, r4, #26
 800963c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963e:	3b01      	subs	r3, #1
 8009640:	4543      	cmp	r3, r8
 8009642:	dc09      	bgt.n	8009658 <_printf_float+0x260>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	079b      	lsls	r3, r3, #30
 8009648:	f100 8107 	bmi.w	800985a <_printf_float+0x462>
 800964c:	68e0      	ldr	r0, [r4, #12]
 800964e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009650:	4298      	cmp	r0, r3
 8009652:	bfb8      	it	lt
 8009654:	4618      	movlt	r0, r3
 8009656:	e730      	b.n	80094ba <_printf_float+0xc2>
 8009658:	2301      	movs	r3, #1
 800965a:	464a      	mov	r2, r9
 800965c:	4631      	mov	r1, r6
 800965e:	4628      	mov	r0, r5
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f af27 	beq.w	80094b6 <_printf_float+0xbe>
 8009668:	f108 0801 	add.w	r8, r8, #1
 800966c:	e7e6      	b.n	800963c <_printf_float+0x244>
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc39      	bgt.n	80096e8 <_printf_float+0x2f0>
 8009674:	4a1b      	ldr	r2, [pc, #108]	; (80096e4 <_printf_float+0x2ec>)
 8009676:	2301      	movs	r3, #1
 8009678:	4631      	mov	r1, r6
 800967a:	4628      	mov	r0, r5
 800967c:	47b8      	blx	r7
 800967e:	3001      	adds	r0, #1
 8009680:	f43f af19 	beq.w	80094b6 <_printf_float+0xbe>
 8009684:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009688:	4313      	orrs	r3, r2
 800968a:	d102      	bne.n	8009692 <_printf_float+0x29a>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07d9      	lsls	r1, r3, #31
 8009690:	d5d8      	bpl.n	8009644 <_printf_float+0x24c>
 8009692:	ee18 3a10 	vmov	r3, s16
 8009696:	4652      	mov	r2, sl
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	f43f af09 	beq.w	80094b6 <_printf_float+0xbe>
 80096a4:	f04f 0900 	mov.w	r9, #0
 80096a8:	f104 0a1a 	add.w	sl, r4, #26
 80096ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ae:	425b      	negs	r3, r3
 80096b0:	454b      	cmp	r3, r9
 80096b2:	dc01      	bgt.n	80096b8 <_printf_float+0x2c0>
 80096b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b6:	e792      	b.n	80095de <_printf_float+0x1e6>
 80096b8:	2301      	movs	r3, #1
 80096ba:	4652      	mov	r2, sl
 80096bc:	4631      	mov	r1, r6
 80096be:	4628      	mov	r0, r5
 80096c0:	47b8      	blx	r7
 80096c2:	3001      	adds	r0, #1
 80096c4:	f43f aef7 	beq.w	80094b6 <_printf_float+0xbe>
 80096c8:	f109 0901 	add.w	r9, r9, #1
 80096cc:	e7ee      	b.n	80096ac <_printf_float+0x2b4>
 80096ce:	bf00      	nop
 80096d0:	7fefffff 	.word	0x7fefffff
 80096d4:	0800df04 	.word	0x0800df04
 80096d8:	0800df08 	.word	0x0800df08
 80096dc:	0800df0c 	.word	0x0800df0c
 80096e0:	0800df10 	.word	0x0800df10
 80096e4:	0800df14 	.word	0x0800df14
 80096e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ec:	429a      	cmp	r2, r3
 80096ee:	bfa8      	it	ge
 80096f0:	461a      	movge	r2, r3
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	4691      	mov	r9, r2
 80096f6:	dc37      	bgt.n	8009768 <_printf_float+0x370>
 80096f8:	f04f 0b00 	mov.w	fp, #0
 80096fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009700:	f104 021a 	add.w	r2, r4, #26
 8009704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009706:	9305      	str	r3, [sp, #20]
 8009708:	eba3 0309 	sub.w	r3, r3, r9
 800970c:	455b      	cmp	r3, fp
 800970e:	dc33      	bgt.n	8009778 <_printf_float+0x380>
 8009710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009714:	429a      	cmp	r2, r3
 8009716:	db3b      	blt.n	8009790 <_printf_float+0x398>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07da      	lsls	r2, r3, #31
 800971c:	d438      	bmi.n	8009790 <_printf_float+0x398>
 800971e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009722:	eba2 0903 	sub.w	r9, r2, r3
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	1ad2      	subs	r2, r2, r3
 800972a:	4591      	cmp	r9, r2
 800972c:	bfa8      	it	ge
 800972e:	4691      	movge	r9, r2
 8009730:	f1b9 0f00 	cmp.w	r9, #0
 8009734:	dc35      	bgt.n	80097a2 <_printf_float+0x3aa>
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800973e:	f104 0a1a 	add.w	sl, r4, #26
 8009742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	eba3 0309 	sub.w	r3, r3, r9
 800974c:	4543      	cmp	r3, r8
 800974e:	f77f af79 	ble.w	8009644 <_printf_float+0x24c>
 8009752:	2301      	movs	r3, #1
 8009754:	4652      	mov	r2, sl
 8009756:	4631      	mov	r1, r6
 8009758:	4628      	mov	r0, r5
 800975a:	47b8      	blx	r7
 800975c:	3001      	adds	r0, #1
 800975e:	f43f aeaa 	beq.w	80094b6 <_printf_float+0xbe>
 8009762:	f108 0801 	add.w	r8, r8, #1
 8009766:	e7ec      	b.n	8009742 <_printf_float+0x34a>
 8009768:	4613      	mov	r3, r2
 800976a:	4631      	mov	r1, r6
 800976c:	4642      	mov	r2, r8
 800976e:	4628      	mov	r0, r5
 8009770:	47b8      	blx	r7
 8009772:	3001      	adds	r0, #1
 8009774:	d1c0      	bne.n	80096f8 <_printf_float+0x300>
 8009776:	e69e      	b.n	80094b6 <_printf_float+0xbe>
 8009778:	2301      	movs	r3, #1
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	9205      	str	r2, [sp, #20]
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f ae97 	beq.w	80094b6 <_printf_float+0xbe>
 8009788:	9a05      	ldr	r2, [sp, #20]
 800978a:	f10b 0b01 	add.w	fp, fp, #1
 800978e:	e7b9      	b.n	8009704 <_printf_float+0x30c>
 8009790:	ee18 3a10 	vmov	r3, s16
 8009794:	4652      	mov	r2, sl
 8009796:	4631      	mov	r1, r6
 8009798:	4628      	mov	r0, r5
 800979a:	47b8      	blx	r7
 800979c:	3001      	adds	r0, #1
 800979e:	d1be      	bne.n	800971e <_printf_float+0x326>
 80097a0:	e689      	b.n	80094b6 <_printf_float+0xbe>
 80097a2:	9a05      	ldr	r2, [sp, #20]
 80097a4:	464b      	mov	r3, r9
 80097a6:	4442      	add	r2, r8
 80097a8:	4631      	mov	r1, r6
 80097aa:	4628      	mov	r0, r5
 80097ac:	47b8      	blx	r7
 80097ae:	3001      	adds	r0, #1
 80097b0:	d1c1      	bne.n	8009736 <_printf_float+0x33e>
 80097b2:	e680      	b.n	80094b6 <_printf_float+0xbe>
 80097b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b6:	2a01      	cmp	r2, #1
 80097b8:	dc01      	bgt.n	80097be <_printf_float+0x3c6>
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d53a      	bpl.n	8009834 <_printf_float+0x43c>
 80097be:	2301      	movs	r3, #1
 80097c0:	4642      	mov	r2, r8
 80097c2:	4631      	mov	r1, r6
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae74 	beq.w	80094b6 <_printf_float+0xbe>
 80097ce:	ee18 3a10 	vmov	r3, s16
 80097d2:	4652      	mov	r2, sl
 80097d4:	4631      	mov	r1, r6
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b8      	blx	r7
 80097da:	3001      	adds	r0, #1
 80097dc:	f43f ae6b 	beq.w	80094b6 <_printf_float+0xbe>
 80097e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097e4:	2200      	movs	r2, #0
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80097ec:	f7f7 f98c 	bl	8000b08 <__aeabi_dcmpeq>
 80097f0:	b9d8      	cbnz	r0, 800982a <_printf_float+0x432>
 80097f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097f6:	f108 0201 	add.w	r2, r8, #1
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	d10e      	bne.n	8009822 <_printf_float+0x42a>
 8009804:	e657      	b.n	80094b6 <_printf_float+0xbe>
 8009806:	2301      	movs	r3, #1
 8009808:	4652      	mov	r2, sl
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	f43f ae50 	beq.w	80094b6 <_printf_float+0xbe>
 8009816:	f108 0801 	add.w	r8, r8, #1
 800981a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981c:	3b01      	subs	r3, #1
 800981e:	4543      	cmp	r3, r8
 8009820:	dcf1      	bgt.n	8009806 <_printf_float+0x40e>
 8009822:	464b      	mov	r3, r9
 8009824:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009828:	e6da      	b.n	80095e0 <_printf_float+0x1e8>
 800982a:	f04f 0800 	mov.w	r8, #0
 800982e:	f104 0a1a 	add.w	sl, r4, #26
 8009832:	e7f2      	b.n	800981a <_printf_float+0x422>
 8009834:	2301      	movs	r3, #1
 8009836:	4642      	mov	r2, r8
 8009838:	e7df      	b.n	80097fa <_printf_float+0x402>
 800983a:	2301      	movs	r3, #1
 800983c:	464a      	mov	r2, r9
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f ae36 	beq.w	80094b6 <_printf_float+0xbe>
 800984a:	f108 0801 	add.w	r8, r8, #1
 800984e:	68e3      	ldr	r3, [r4, #12]
 8009850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009852:	1a5b      	subs	r3, r3, r1
 8009854:	4543      	cmp	r3, r8
 8009856:	dcf0      	bgt.n	800983a <_printf_float+0x442>
 8009858:	e6f8      	b.n	800964c <_printf_float+0x254>
 800985a:	f04f 0800 	mov.w	r8, #0
 800985e:	f104 0919 	add.w	r9, r4, #25
 8009862:	e7f4      	b.n	800984e <_printf_float+0x456>

08009864 <_printf_common>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	4616      	mov	r6, r2
 800986a:	4699      	mov	r9, r3
 800986c:	688a      	ldr	r2, [r1, #8]
 800986e:	690b      	ldr	r3, [r1, #16]
 8009870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009874:	4293      	cmp	r3, r2
 8009876:	bfb8      	it	lt
 8009878:	4613      	movlt	r3, r2
 800987a:	6033      	str	r3, [r6, #0]
 800987c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009880:	4607      	mov	r7, r0
 8009882:	460c      	mov	r4, r1
 8009884:	b10a      	cbz	r2, 800988a <_printf_common+0x26>
 8009886:	3301      	adds	r3, #1
 8009888:	6033      	str	r3, [r6, #0]
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	0699      	lsls	r1, r3, #26
 800988e:	bf42      	ittt	mi
 8009890:	6833      	ldrmi	r3, [r6, #0]
 8009892:	3302      	addmi	r3, #2
 8009894:	6033      	strmi	r3, [r6, #0]
 8009896:	6825      	ldr	r5, [r4, #0]
 8009898:	f015 0506 	ands.w	r5, r5, #6
 800989c:	d106      	bne.n	80098ac <_printf_common+0x48>
 800989e:	f104 0a19 	add.w	sl, r4, #25
 80098a2:	68e3      	ldr	r3, [r4, #12]
 80098a4:	6832      	ldr	r2, [r6, #0]
 80098a6:	1a9b      	subs	r3, r3, r2
 80098a8:	42ab      	cmp	r3, r5
 80098aa:	dc26      	bgt.n	80098fa <_printf_common+0x96>
 80098ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098b0:	1e13      	subs	r3, r2, #0
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	bf18      	it	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	0692      	lsls	r2, r2, #26
 80098ba:	d42b      	bmi.n	8009914 <_printf_common+0xb0>
 80098bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098c0:	4649      	mov	r1, r9
 80098c2:	4638      	mov	r0, r7
 80098c4:	47c0      	blx	r8
 80098c6:	3001      	adds	r0, #1
 80098c8:	d01e      	beq.n	8009908 <_printf_common+0xa4>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6922      	ldr	r2, [r4, #16]
 80098ce:	f003 0306 	and.w	r3, r3, #6
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	bf02      	ittt	eq
 80098d6:	68e5      	ldreq	r5, [r4, #12]
 80098d8:	6833      	ldreq	r3, [r6, #0]
 80098da:	1aed      	subeq	r5, r5, r3
 80098dc:	68a3      	ldr	r3, [r4, #8]
 80098de:	bf0c      	ite	eq
 80098e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098e4:	2500      	movne	r5, #0
 80098e6:	4293      	cmp	r3, r2
 80098e8:	bfc4      	itt	gt
 80098ea:	1a9b      	subgt	r3, r3, r2
 80098ec:	18ed      	addgt	r5, r5, r3
 80098ee:	2600      	movs	r6, #0
 80098f0:	341a      	adds	r4, #26
 80098f2:	42b5      	cmp	r5, r6
 80098f4:	d11a      	bne.n	800992c <_printf_common+0xc8>
 80098f6:	2000      	movs	r0, #0
 80098f8:	e008      	b.n	800990c <_printf_common+0xa8>
 80098fa:	2301      	movs	r3, #1
 80098fc:	4652      	mov	r2, sl
 80098fe:	4649      	mov	r1, r9
 8009900:	4638      	mov	r0, r7
 8009902:	47c0      	blx	r8
 8009904:	3001      	adds	r0, #1
 8009906:	d103      	bne.n	8009910 <_printf_common+0xac>
 8009908:	f04f 30ff 	mov.w	r0, #4294967295
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	3501      	adds	r5, #1
 8009912:	e7c6      	b.n	80098a2 <_printf_common+0x3e>
 8009914:	18e1      	adds	r1, r4, r3
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	2030      	movs	r0, #48	; 0x30
 800991a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800991e:	4422      	add	r2, r4
 8009920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009928:	3302      	adds	r3, #2
 800992a:	e7c7      	b.n	80098bc <_printf_common+0x58>
 800992c:	2301      	movs	r3, #1
 800992e:	4622      	mov	r2, r4
 8009930:	4649      	mov	r1, r9
 8009932:	4638      	mov	r0, r7
 8009934:	47c0      	blx	r8
 8009936:	3001      	adds	r0, #1
 8009938:	d0e6      	beq.n	8009908 <_printf_common+0xa4>
 800993a:	3601      	adds	r6, #1
 800993c:	e7d9      	b.n	80098f2 <_printf_common+0x8e>
	...

08009940 <_printf_i>:
 8009940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	7e0f      	ldrb	r7, [r1, #24]
 8009946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009948:	2f78      	cmp	r7, #120	; 0x78
 800994a:	4691      	mov	r9, r2
 800994c:	4680      	mov	r8, r0
 800994e:	460c      	mov	r4, r1
 8009950:	469a      	mov	sl, r3
 8009952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009956:	d807      	bhi.n	8009968 <_printf_i+0x28>
 8009958:	2f62      	cmp	r7, #98	; 0x62
 800995a:	d80a      	bhi.n	8009972 <_printf_i+0x32>
 800995c:	2f00      	cmp	r7, #0
 800995e:	f000 80d4 	beq.w	8009b0a <_printf_i+0x1ca>
 8009962:	2f58      	cmp	r7, #88	; 0x58
 8009964:	f000 80c0 	beq.w	8009ae8 <_printf_i+0x1a8>
 8009968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800996c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009970:	e03a      	b.n	80099e8 <_printf_i+0xa8>
 8009972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009976:	2b15      	cmp	r3, #21
 8009978:	d8f6      	bhi.n	8009968 <_printf_i+0x28>
 800997a:	a101      	add	r1, pc, #4	; (adr r1, 8009980 <_printf_i+0x40>)
 800997c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009980:	080099d9 	.word	0x080099d9
 8009984:	080099ed 	.word	0x080099ed
 8009988:	08009969 	.word	0x08009969
 800998c:	08009969 	.word	0x08009969
 8009990:	08009969 	.word	0x08009969
 8009994:	08009969 	.word	0x08009969
 8009998:	080099ed 	.word	0x080099ed
 800999c:	08009969 	.word	0x08009969
 80099a0:	08009969 	.word	0x08009969
 80099a4:	08009969 	.word	0x08009969
 80099a8:	08009969 	.word	0x08009969
 80099ac:	08009af1 	.word	0x08009af1
 80099b0:	08009a19 	.word	0x08009a19
 80099b4:	08009aab 	.word	0x08009aab
 80099b8:	08009969 	.word	0x08009969
 80099bc:	08009969 	.word	0x08009969
 80099c0:	08009b13 	.word	0x08009b13
 80099c4:	08009969 	.word	0x08009969
 80099c8:	08009a19 	.word	0x08009a19
 80099cc:	08009969 	.word	0x08009969
 80099d0:	08009969 	.word	0x08009969
 80099d4:	08009ab3 	.word	0x08009ab3
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099e8:	2301      	movs	r3, #1
 80099ea:	e09f      	b.n	8009b2c <_printf_i+0x1ec>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	0607      	lsls	r7, r0, #24
 80099f2:	f103 0104 	add.w	r1, r3, #4
 80099f6:	6029      	str	r1, [r5, #0]
 80099f8:	d501      	bpl.n	80099fe <_printf_i+0xbe>
 80099fa:	681e      	ldr	r6, [r3, #0]
 80099fc:	e003      	b.n	8009a06 <_printf_i+0xc6>
 80099fe:	0646      	lsls	r6, r0, #25
 8009a00:	d5fb      	bpl.n	80099fa <_printf_i+0xba>
 8009a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	da03      	bge.n	8009a12 <_printf_i+0xd2>
 8009a0a:	232d      	movs	r3, #45	; 0x2d
 8009a0c:	4276      	negs	r6, r6
 8009a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a12:	485a      	ldr	r0, [pc, #360]	; (8009b7c <_printf_i+0x23c>)
 8009a14:	230a      	movs	r3, #10
 8009a16:	e012      	b.n	8009a3e <_printf_i+0xfe>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	1d19      	adds	r1, r3, #4
 8009a1e:	6029      	str	r1, [r5, #0]
 8009a20:	0605      	lsls	r5, r0, #24
 8009a22:	d501      	bpl.n	8009a28 <_printf_i+0xe8>
 8009a24:	681e      	ldr	r6, [r3, #0]
 8009a26:	e002      	b.n	8009a2e <_printf_i+0xee>
 8009a28:	0641      	lsls	r1, r0, #25
 8009a2a:	d5fb      	bpl.n	8009a24 <_printf_i+0xe4>
 8009a2c:	881e      	ldrh	r6, [r3, #0]
 8009a2e:	4853      	ldr	r0, [pc, #332]	; (8009b7c <_printf_i+0x23c>)
 8009a30:	2f6f      	cmp	r7, #111	; 0x6f
 8009a32:	bf0c      	ite	eq
 8009a34:	2308      	moveq	r3, #8
 8009a36:	230a      	movne	r3, #10
 8009a38:	2100      	movs	r1, #0
 8009a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a3e:	6865      	ldr	r5, [r4, #4]
 8009a40:	60a5      	str	r5, [r4, #8]
 8009a42:	2d00      	cmp	r5, #0
 8009a44:	bfa2      	ittt	ge
 8009a46:	6821      	ldrge	r1, [r4, #0]
 8009a48:	f021 0104 	bicge.w	r1, r1, #4
 8009a4c:	6021      	strge	r1, [r4, #0]
 8009a4e:	b90e      	cbnz	r6, 8009a54 <_printf_i+0x114>
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	d04b      	beq.n	8009aec <_printf_i+0x1ac>
 8009a54:	4615      	mov	r5, r2
 8009a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8009a5e:	5dc7      	ldrb	r7, [r0, r7]
 8009a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a64:	4637      	mov	r7, r6
 8009a66:	42bb      	cmp	r3, r7
 8009a68:	460e      	mov	r6, r1
 8009a6a:	d9f4      	bls.n	8009a56 <_printf_i+0x116>
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d10b      	bne.n	8009a88 <_printf_i+0x148>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	07de      	lsls	r6, r3, #31
 8009a74:	d508      	bpl.n	8009a88 <_printf_i+0x148>
 8009a76:	6923      	ldr	r3, [r4, #16]
 8009a78:	6861      	ldr	r1, [r4, #4]
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	bfde      	ittt	le
 8009a7e:	2330      	movle	r3, #48	; 0x30
 8009a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a88:	1b52      	subs	r2, r2, r5
 8009a8a:	6122      	str	r2, [r4, #16]
 8009a8c:	f8cd a000 	str.w	sl, [sp]
 8009a90:	464b      	mov	r3, r9
 8009a92:	aa03      	add	r2, sp, #12
 8009a94:	4621      	mov	r1, r4
 8009a96:	4640      	mov	r0, r8
 8009a98:	f7ff fee4 	bl	8009864 <_printf_common>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d14a      	bne.n	8009b36 <_printf_i+0x1f6>
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	b004      	add	sp, #16
 8009aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	f043 0320 	orr.w	r3, r3, #32
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	4833      	ldr	r0, [pc, #204]	; (8009b80 <_printf_i+0x240>)
 8009ab4:	2778      	movs	r7, #120	; 0x78
 8009ab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	6829      	ldr	r1, [r5, #0]
 8009abe:	061f      	lsls	r7, r3, #24
 8009ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ac4:	d402      	bmi.n	8009acc <_printf_i+0x18c>
 8009ac6:	065f      	lsls	r7, r3, #25
 8009ac8:	bf48      	it	mi
 8009aca:	b2b6      	uxthmi	r6, r6
 8009acc:	07df      	lsls	r7, r3, #31
 8009ace:	bf48      	it	mi
 8009ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8009ad4:	6029      	str	r1, [r5, #0]
 8009ad6:	bf48      	it	mi
 8009ad8:	6023      	strmi	r3, [r4, #0]
 8009ada:	b91e      	cbnz	r6, 8009ae4 <_printf_i+0x1a4>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	f023 0320 	bic.w	r3, r3, #32
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	e7a7      	b.n	8009a38 <_printf_i+0xf8>
 8009ae8:	4824      	ldr	r0, [pc, #144]	; (8009b7c <_printf_i+0x23c>)
 8009aea:	e7e4      	b.n	8009ab6 <_printf_i+0x176>
 8009aec:	4615      	mov	r5, r2
 8009aee:	e7bd      	b.n	8009a6c <_printf_i+0x12c>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	6826      	ldr	r6, [r4, #0]
 8009af4:	6961      	ldr	r1, [r4, #20]
 8009af6:	1d18      	adds	r0, r3, #4
 8009af8:	6028      	str	r0, [r5, #0]
 8009afa:	0635      	lsls	r5, r6, #24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	d501      	bpl.n	8009b04 <_printf_i+0x1c4>
 8009b00:	6019      	str	r1, [r3, #0]
 8009b02:	e002      	b.n	8009b0a <_printf_i+0x1ca>
 8009b04:	0670      	lsls	r0, r6, #25
 8009b06:	d5fb      	bpl.n	8009b00 <_printf_i+0x1c0>
 8009b08:	8019      	strh	r1, [r3, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	4615      	mov	r5, r2
 8009b10:	e7bc      	b.n	8009a8c <_printf_i+0x14c>
 8009b12:	682b      	ldr	r3, [r5, #0]
 8009b14:	1d1a      	adds	r2, r3, #4
 8009b16:	602a      	str	r2, [r5, #0]
 8009b18:	681d      	ldr	r5, [r3, #0]
 8009b1a:	6862      	ldr	r2, [r4, #4]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7f6 fb76 	bl	8000210 <memchr>
 8009b24:	b108      	cbz	r0, 8009b2a <_printf_i+0x1ea>
 8009b26:	1b40      	subs	r0, r0, r5
 8009b28:	6060      	str	r0, [r4, #4]
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b34:	e7aa      	b.n	8009a8c <_printf_i+0x14c>
 8009b36:	6923      	ldr	r3, [r4, #16]
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	47d0      	blx	sl
 8009b40:	3001      	adds	r0, #1
 8009b42:	d0ad      	beq.n	8009aa0 <_printf_i+0x160>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	079b      	lsls	r3, r3, #30
 8009b48:	d413      	bmi.n	8009b72 <_printf_i+0x232>
 8009b4a:	68e0      	ldr	r0, [r4, #12]
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	4298      	cmp	r0, r3
 8009b50:	bfb8      	it	lt
 8009b52:	4618      	movlt	r0, r3
 8009b54:	e7a6      	b.n	8009aa4 <_printf_i+0x164>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4632      	mov	r2, r6
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	47d0      	blx	sl
 8009b60:	3001      	adds	r0, #1
 8009b62:	d09d      	beq.n	8009aa0 <_printf_i+0x160>
 8009b64:	3501      	adds	r5, #1
 8009b66:	68e3      	ldr	r3, [r4, #12]
 8009b68:	9903      	ldr	r1, [sp, #12]
 8009b6a:	1a5b      	subs	r3, r3, r1
 8009b6c:	42ab      	cmp	r3, r5
 8009b6e:	dcf2      	bgt.n	8009b56 <_printf_i+0x216>
 8009b70:	e7eb      	b.n	8009b4a <_printf_i+0x20a>
 8009b72:	2500      	movs	r5, #0
 8009b74:	f104 0619 	add.w	r6, r4, #25
 8009b78:	e7f5      	b.n	8009b66 <_printf_i+0x226>
 8009b7a:	bf00      	nop
 8009b7c:	0800df16 	.word	0x0800df16
 8009b80:	0800df27 	.word	0x0800df27

08009b84 <std>:
 8009b84:	2300      	movs	r3, #0
 8009b86:	b510      	push	{r4, lr}
 8009b88:	4604      	mov	r4, r0
 8009b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b92:	6083      	str	r3, [r0, #8]
 8009b94:	8181      	strh	r1, [r0, #12]
 8009b96:	6643      	str	r3, [r0, #100]	; 0x64
 8009b98:	81c2      	strh	r2, [r0, #14]
 8009b9a:	6183      	str	r3, [r0, #24]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	305c      	adds	r0, #92	; 0x5c
 8009ba2:	f000 fa57 	bl	800a054 <memset>
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <std+0x58>)
 8009ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8009baa:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <std+0x5c>)
 8009bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bae:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <std+0x60>)
 8009bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <std+0x64>)
 8009bb4:	6323      	str	r3, [r4, #48]	; 0x30
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <std+0x68>)
 8009bb8:	6224      	str	r4, [r4, #32]
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d006      	beq.n	8009bcc <std+0x48>
 8009bbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009bc2:	4294      	cmp	r4, r2
 8009bc4:	d002      	beq.n	8009bcc <std+0x48>
 8009bc6:	33d0      	adds	r3, #208	; 0xd0
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d105      	bne.n	8009bd8 <std+0x54>
 8009bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd4:	f000 baec 	b.w	800a1b0 <__retarget_lock_init_recursive>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	08009e71 	.word	0x08009e71
 8009be0:	08009e93 	.word	0x08009e93
 8009be4:	08009ecb 	.word	0x08009ecb
 8009be8:	08009eef 	.word	0x08009eef
 8009bec:	20000520 	.word	0x20000520

08009bf0 <stdio_exit_handler>:
 8009bf0:	4a02      	ldr	r2, [pc, #8]	; (8009bfc <stdio_exit_handler+0xc>)
 8009bf2:	4903      	ldr	r1, [pc, #12]	; (8009c00 <stdio_exit_handler+0x10>)
 8009bf4:	4803      	ldr	r0, [pc, #12]	; (8009c04 <stdio_exit_handler+0x14>)
 8009bf6:	f000 b87b 	b.w	8009cf0 <_fwalk_sglue>
 8009bfa:	bf00      	nop
 8009bfc:	20000018 	.word	0x20000018
 8009c00:	0800bca9 	.word	0x0800bca9
 8009c04:	20000024 	.word	0x20000024

08009c08 <cleanup_stdio>:
 8009c08:	6841      	ldr	r1, [r0, #4]
 8009c0a:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <cleanup_stdio+0x34>)
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	4604      	mov	r4, r0
 8009c12:	d001      	beq.n	8009c18 <cleanup_stdio+0x10>
 8009c14:	f002 f848 	bl	800bca8 <_fflush_r>
 8009c18:	68a1      	ldr	r1, [r4, #8]
 8009c1a:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <cleanup_stdio+0x38>)
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	d002      	beq.n	8009c26 <cleanup_stdio+0x1e>
 8009c20:	4620      	mov	r0, r4
 8009c22:	f002 f841 	bl	800bca8 <_fflush_r>
 8009c26:	68e1      	ldr	r1, [r4, #12]
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <cleanup_stdio+0x3c>)
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	d004      	beq.n	8009c38 <cleanup_stdio+0x30>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c34:	f002 b838 	b.w	800bca8 <_fflush_r>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000520 	.word	0x20000520
 8009c40:	20000588 	.word	0x20000588
 8009c44:	200005f0 	.word	0x200005f0

08009c48 <global_stdio_init.part.0>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <global_stdio_init.part.0+0x30>)
 8009c4c:	4c0b      	ldr	r4, [pc, #44]	; (8009c7c <global_stdio_init.part.0+0x34>)
 8009c4e:	4a0c      	ldr	r2, [pc, #48]	; (8009c80 <global_stdio_init.part.0+0x38>)
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	2200      	movs	r2, #0
 8009c56:	2104      	movs	r1, #4
 8009c58:	f7ff ff94 	bl	8009b84 <std>
 8009c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c60:	2201      	movs	r2, #1
 8009c62:	2109      	movs	r1, #9
 8009c64:	f7ff ff8e 	bl	8009b84 <std>
 8009c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c72:	2112      	movs	r1, #18
 8009c74:	f7ff bf86 	b.w	8009b84 <std>
 8009c78:	20000658 	.word	0x20000658
 8009c7c:	20000520 	.word	0x20000520
 8009c80:	08009bf1 	.word	0x08009bf1

08009c84 <__sfp_lock_acquire>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__sfp_lock_acquire+0x8>)
 8009c86:	f000 ba94 	b.w	800a1b2 <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	20000661 	.word	0x20000661

08009c90 <__sfp_lock_release>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__sfp_lock_release+0x8>)
 8009c92:	f000 ba8f 	b.w	800a1b4 <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	20000661 	.word	0x20000661

08009c9c <__sinit>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	f7ff fff0 	bl	8009c84 <__sfp_lock_acquire>
 8009ca4:	6a23      	ldr	r3, [r4, #32]
 8009ca6:	b11b      	cbz	r3, 8009cb0 <__sinit+0x14>
 8009ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cac:	f7ff bff0 	b.w	8009c90 <__sfp_lock_release>
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <__sinit+0x28>)
 8009cb2:	6223      	str	r3, [r4, #32]
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <__sinit+0x2c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f5      	bne.n	8009ca8 <__sinit+0xc>
 8009cbc:	f7ff ffc4 	bl	8009c48 <global_stdio_init.part.0>
 8009cc0:	e7f2      	b.n	8009ca8 <__sinit+0xc>
 8009cc2:	bf00      	nop
 8009cc4:	08009c09 	.word	0x08009c09
 8009cc8:	20000658 	.word	0x20000658

08009ccc <fiprintf>:
 8009ccc:	b40e      	push	{r1, r2, r3}
 8009cce:	b503      	push	{r0, r1, lr}
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	ab03      	add	r3, sp, #12
 8009cd4:	4805      	ldr	r0, [pc, #20]	; (8009cec <fiprintf+0x20>)
 8009cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	f001 fe43 	bl	800b968 <_vfiprintf_r>
 8009ce2:	b002      	add	sp, #8
 8009ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce8:	b003      	add	sp, #12
 8009cea:	4770      	bx	lr
 8009cec:	20000070 	.word	0x20000070

08009cf0 <_fwalk_sglue>:
 8009cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	4688      	mov	r8, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	2600      	movs	r6, #0
 8009cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d00:	f1b9 0901 	subs.w	r9, r9, #1
 8009d04:	d505      	bpl.n	8009d12 <_fwalk_sglue+0x22>
 8009d06:	6824      	ldr	r4, [r4, #0]
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	d1f7      	bne.n	8009cfc <_fwalk_sglue+0xc>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d12:	89ab      	ldrh	r3, [r5, #12]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d907      	bls.n	8009d28 <_fwalk_sglue+0x38>
 8009d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	d003      	beq.n	8009d28 <_fwalk_sglue+0x38>
 8009d20:	4629      	mov	r1, r5
 8009d22:	4638      	mov	r0, r7
 8009d24:	47c0      	blx	r8
 8009d26:	4306      	orrs	r6, r0
 8009d28:	3568      	adds	r5, #104	; 0x68
 8009d2a:	e7e9      	b.n	8009d00 <_fwalk_sglue+0x10>

08009d2c <iprintf>:
 8009d2c:	b40f      	push	{r0, r1, r2, r3}
 8009d2e:	b507      	push	{r0, r1, r2, lr}
 8009d30:	4906      	ldr	r1, [pc, #24]	; (8009d4c <iprintf+0x20>)
 8009d32:	ab04      	add	r3, sp, #16
 8009d34:	6808      	ldr	r0, [r1, #0]
 8009d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3a:	6881      	ldr	r1, [r0, #8]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	f001 fe13 	bl	800b968 <_vfiprintf_r>
 8009d42:	b003      	add	sp, #12
 8009d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d48:	b004      	add	sp, #16
 8009d4a:	4770      	bx	lr
 8009d4c:	20000070 	.word	0x20000070

08009d50 <_puts_r>:
 8009d50:	6a03      	ldr	r3, [r0, #32]
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	6884      	ldr	r4, [r0, #8]
 8009d56:	4605      	mov	r5, r0
 8009d58:	460e      	mov	r6, r1
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_puts_r+0x10>
 8009d5c:	f7ff ff9e 	bl	8009c9c <__sinit>
 8009d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_puts_r+0x22>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	0598      	lsls	r0, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_puts_r+0x22>
 8009d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6e:	f000 fa20 	bl	800a1b2 <__retarget_lock_acquire_recursive>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	0719      	lsls	r1, r3, #28
 8009d76:	d513      	bpl.n	8009da0 <_puts_r+0x50>
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	b18b      	cbz	r3, 8009da0 <_puts_r+0x50>
 8009d7c:	3e01      	subs	r6, #1
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d84:	3b01      	subs	r3, #1
 8009d86:	60a3      	str	r3, [r4, #8]
 8009d88:	b9e9      	cbnz	r1, 8009dc6 <_puts_r+0x76>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	da2e      	bge.n	8009dec <_puts_r+0x9c>
 8009d8e:	4622      	mov	r2, r4
 8009d90:	210a      	movs	r1, #10
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 f8af 	bl	8009ef6 <__swbuf_r>
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d007      	beq.n	8009dac <_puts_r+0x5c>
 8009d9c:	250a      	movs	r5, #10
 8009d9e:	e007      	b.n	8009db0 <_puts_r+0x60>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4628      	mov	r0, r5
 8009da4:	f000 f8e4 	bl	8009f70 <__swsetup_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d0e7      	beq.n	8009d7c <_puts_r+0x2c>
 8009dac:	f04f 35ff 	mov.w	r5, #4294967295
 8009db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db2:	07da      	lsls	r2, r3, #31
 8009db4:	d405      	bmi.n	8009dc2 <_puts_r+0x72>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	059b      	lsls	r3, r3, #22
 8009dba:	d402      	bmi.n	8009dc2 <_puts_r+0x72>
 8009dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dbe:	f000 f9f9 	bl	800a1b4 <__retarget_lock_release_recursive>
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da04      	bge.n	8009dd4 <_puts_r+0x84>
 8009dca:	69a2      	ldr	r2, [r4, #24]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	dc06      	bgt.n	8009dde <_puts_r+0x8e>
 8009dd0:	290a      	cmp	r1, #10
 8009dd2:	d004      	beq.n	8009dde <_puts_r+0x8e>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	6022      	str	r2, [r4, #0]
 8009dda:	7019      	strb	r1, [r3, #0]
 8009ddc:	e7cf      	b.n	8009d7e <_puts_r+0x2e>
 8009dde:	4622      	mov	r2, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f888 	bl	8009ef6 <__swbuf_r>
 8009de6:	3001      	adds	r0, #1
 8009de8:	d1c9      	bne.n	8009d7e <_puts_r+0x2e>
 8009dea:	e7df      	b.n	8009dac <_puts_r+0x5c>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	250a      	movs	r5, #10
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	701d      	strb	r5, [r3, #0]
 8009df6:	e7db      	b.n	8009db0 <_puts_r+0x60>

08009df8 <puts>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <puts+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f7ff bfa7 	b.w	8009d50 <_puts_r>
 8009e02:	bf00      	nop
 8009e04:	20000070 	.word	0x20000070

08009e08 <sniprintf>:
 8009e08:	b40c      	push	{r2, r3}
 8009e0a:	b530      	push	{r4, r5, lr}
 8009e0c:	4b17      	ldr	r3, [pc, #92]	; (8009e6c <sniprintf+0x64>)
 8009e0e:	1e0c      	subs	r4, r1, #0
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	da08      	bge.n	8009e28 <sniprintf+0x20>
 8009e16:	238b      	movs	r3, #139	; 0x8b
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1e:	b01d      	add	sp, #116	; 0x74
 8009e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e24:	b002      	add	sp, #8
 8009e26:	4770      	bx	lr
 8009e28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e30:	bf14      	ite	ne
 8009e32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e36:	4623      	moveq	r3, r4
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	9307      	str	r3, [sp, #28]
 8009e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e40:	9002      	str	r0, [sp, #8]
 8009e42:	9006      	str	r0, [sp, #24]
 8009e44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e4a:	ab21      	add	r3, sp, #132	; 0x84
 8009e4c:	a902      	add	r1, sp, #8
 8009e4e:	4628      	mov	r0, r5
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	f001 fc61 	bl	800b718 <_svfiprintf_r>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	bfbc      	itt	lt
 8009e5a:	238b      	movlt	r3, #139	; 0x8b
 8009e5c:	602b      	strlt	r3, [r5, #0]
 8009e5e:	2c00      	cmp	r4, #0
 8009e60:	d0dd      	beq.n	8009e1e <sniprintf+0x16>
 8009e62:	9b02      	ldr	r3, [sp, #8]
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	e7d9      	b.n	8009e1e <sniprintf+0x16>
 8009e6a:	bf00      	nop
 8009e6c:	20000070 	.word	0x20000070

08009e70 <__sread>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	460c      	mov	r4, r1
 8009e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e78:	f000 f93c 	bl	800a0f4 <_read_r>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	bfab      	itete	ge
 8009e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e82:	89a3      	ldrhlt	r3, [r4, #12]
 8009e84:	181b      	addge	r3, r3, r0
 8009e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e8a:	bfac      	ite	ge
 8009e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e8e:	81a3      	strhlt	r3, [r4, #12]
 8009e90:	bd10      	pop	{r4, pc}

08009e92 <__swrite>:
 8009e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	461f      	mov	r7, r3
 8009e98:	898b      	ldrh	r3, [r1, #12]
 8009e9a:	05db      	lsls	r3, r3, #23
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	d505      	bpl.n	8009eb0 <__swrite+0x1e>
 8009ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f000 f910 	bl	800a0d0 <_lseek_r>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec6:	f000 b937 	b.w	800a138 <_write_r>

08009eca <__sseek>:
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	460c      	mov	r4, r1
 8009ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed2:	f000 f8fd 	bl	800a0d0 <_lseek_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	bf15      	itete	ne
 8009edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ee6:	81a3      	strheq	r3, [r4, #12]
 8009ee8:	bf18      	it	ne
 8009eea:	81a3      	strhne	r3, [r4, #12]
 8009eec:	bd10      	pop	{r4, pc}

08009eee <__sclose>:
 8009eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef2:	f000 b8dd 	b.w	800a0b0 <_close_r>

08009ef6 <__swbuf_r>:
 8009ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef8:	460e      	mov	r6, r1
 8009efa:	4614      	mov	r4, r2
 8009efc:	4605      	mov	r5, r0
 8009efe:	b118      	cbz	r0, 8009f08 <__swbuf_r+0x12>
 8009f00:	6a03      	ldr	r3, [r0, #32]
 8009f02:	b90b      	cbnz	r3, 8009f08 <__swbuf_r+0x12>
 8009f04:	f7ff feca 	bl	8009c9c <__sinit>
 8009f08:	69a3      	ldr	r3, [r4, #24]
 8009f0a:	60a3      	str	r3, [r4, #8]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	071a      	lsls	r2, r3, #28
 8009f10:	d525      	bpl.n	8009f5e <__swbuf_r+0x68>
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	b31b      	cbz	r3, 8009f5e <__swbuf_r+0x68>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	6922      	ldr	r2, [r4, #16]
 8009f1a:	1a98      	subs	r0, r3, r2
 8009f1c:	6963      	ldr	r3, [r4, #20]
 8009f1e:	b2f6      	uxtb	r6, r6
 8009f20:	4283      	cmp	r3, r0
 8009f22:	4637      	mov	r7, r6
 8009f24:	dc04      	bgt.n	8009f30 <__swbuf_r+0x3a>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f001 febd 	bl	800bca8 <_fflush_r>
 8009f2e:	b9e0      	cbnz	r0, 8009f6a <__swbuf_r+0x74>
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	701e      	strb	r6, [r3, #0]
 8009f3e:	6962      	ldr	r2, [r4, #20]
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d004      	beq.n	8009f50 <__swbuf_r+0x5a>
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	07db      	lsls	r3, r3, #31
 8009f4a:	d506      	bpl.n	8009f5a <__swbuf_r+0x64>
 8009f4c:	2e0a      	cmp	r6, #10
 8009f4e:	d104      	bne.n	8009f5a <__swbuf_r+0x64>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f001 fea8 	bl	800bca8 <_fflush_r>
 8009f58:	b938      	cbnz	r0, 8009f6a <__swbuf_r+0x74>
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f805 	bl	8009f70 <__swsetup_r>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0d5      	beq.n	8009f16 <__swbuf_r+0x20>
 8009f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6e:	e7f4      	b.n	8009f5a <__swbuf_r+0x64>

08009f70 <__swsetup_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <__swsetup_r+0xac>)
 8009f74:	4605      	mov	r5, r0
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	460c      	mov	r4, r1
 8009f7a:	b118      	cbz	r0, 8009f84 <__swsetup_r+0x14>
 8009f7c:	6a03      	ldr	r3, [r0, #32]
 8009f7e:	b90b      	cbnz	r3, 8009f84 <__swsetup_r+0x14>
 8009f80:	f7ff fe8c 	bl	8009c9c <__sinit>
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8a:	0718      	lsls	r0, r3, #28
 8009f8c:	d422      	bmi.n	8009fd4 <__swsetup_r+0x64>
 8009f8e:	06d9      	lsls	r1, r3, #27
 8009f90:	d407      	bmi.n	8009fa2 <__swsetup_r+0x32>
 8009f92:	2309      	movs	r3, #9
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e034      	b.n	800a00c <__swsetup_r+0x9c>
 8009fa2:	0758      	lsls	r0, r3, #29
 8009fa4:	d512      	bpl.n	8009fcc <__swsetup_r+0x5c>
 8009fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa8:	b141      	cbz	r1, 8009fbc <__swsetup_r+0x4c>
 8009faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fae:	4299      	cmp	r1, r3
 8009fb0:	d002      	beq.n	8009fb8 <__swsetup_r+0x48>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 ff8e 	bl	800aed4 <_free_r>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6363      	str	r3, [r4, #52]	; 0x34
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0308 	orr.w	r3, r3, #8
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	b94b      	cbnz	r3, 8009fec <__swsetup_r+0x7c>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe2:	d003      	beq.n	8009fec <__swsetup_r+0x7c>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f001 feac 	bl	800bd44 <__smakebuf_r>
 8009fec:	89a0      	ldrh	r0, [r4, #12]
 8009fee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ff2:	f010 0301 	ands.w	r3, r0, #1
 8009ff6:	d00a      	beq.n	800a00e <__swsetup_r+0x9e>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60a3      	str	r3, [r4, #8]
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	425b      	negs	r3, r3
 800a000:	61a3      	str	r3, [r4, #24]
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	b943      	cbnz	r3, 800a018 <__swsetup_r+0xa8>
 800a006:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a00a:	d1c4      	bne.n	8009f96 <__swsetup_r+0x26>
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	0781      	lsls	r1, r0, #30
 800a010:	bf58      	it	pl
 800a012:	6963      	ldrpl	r3, [r4, #20]
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	e7f4      	b.n	800a002 <__swsetup_r+0x92>
 800a018:	2000      	movs	r0, #0
 800a01a:	e7f7      	b.n	800a00c <__swsetup_r+0x9c>
 800a01c:	20000070 	.word	0x20000070

0800a020 <memmove>:
 800a020:	4288      	cmp	r0, r1
 800a022:	b510      	push	{r4, lr}
 800a024:	eb01 0402 	add.w	r4, r1, r2
 800a028:	d902      	bls.n	800a030 <memmove+0x10>
 800a02a:	4284      	cmp	r4, r0
 800a02c:	4623      	mov	r3, r4
 800a02e:	d807      	bhi.n	800a040 <memmove+0x20>
 800a030:	1e43      	subs	r3, r0, #1
 800a032:	42a1      	cmp	r1, r4
 800a034:	d008      	beq.n	800a048 <memmove+0x28>
 800a036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a03e:	e7f8      	b.n	800a032 <memmove+0x12>
 800a040:	4402      	add	r2, r0
 800a042:	4601      	mov	r1, r0
 800a044:	428a      	cmp	r2, r1
 800a046:	d100      	bne.n	800a04a <memmove+0x2a>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a052:	e7f7      	b.n	800a044 <memmove+0x24>

0800a054 <memset>:
 800a054:	4402      	add	r2, r0
 800a056:	4603      	mov	r3, r0
 800a058:	4293      	cmp	r3, r2
 800a05a:	d100      	bne.n	800a05e <memset+0xa>
 800a05c:	4770      	bx	lr
 800a05e:	f803 1b01 	strb.w	r1, [r3], #1
 800a062:	e7f9      	b.n	800a058 <memset+0x4>

0800a064 <strcat>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4602      	mov	r2, r0
 800a068:	7814      	ldrb	r4, [r2, #0]
 800a06a:	4613      	mov	r3, r2
 800a06c:	3201      	adds	r2, #1
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d1fa      	bne.n	800a068 <strcat+0x4>
 800a072:	3b01      	subs	r3, #1
 800a074:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a078:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a07c:	2a00      	cmp	r2, #0
 800a07e:	d1f9      	bne.n	800a074 <strcat+0x10>
 800a080:	bd10      	pop	{r4, pc}

0800a082 <strncpy>:
 800a082:	b510      	push	{r4, lr}
 800a084:	3901      	subs	r1, #1
 800a086:	4603      	mov	r3, r0
 800a088:	b132      	cbz	r2, 800a098 <strncpy+0x16>
 800a08a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a08e:	f803 4b01 	strb.w	r4, [r3], #1
 800a092:	3a01      	subs	r2, #1
 800a094:	2c00      	cmp	r4, #0
 800a096:	d1f7      	bne.n	800a088 <strncpy+0x6>
 800a098:	441a      	add	r2, r3
 800a09a:	2100      	movs	r1, #0
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d100      	bne.n	800a0a2 <strncpy+0x20>
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0a6:	e7f9      	b.n	800a09c <strncpy+0x1a>

0800a0a8 <_localeconv_r>:
 800a0a8:	4800      	ldr	r0, [pc, #0]	; (800a0ac <_localeconv_r+0x4>)
 800a0aa:	4770      	bx	lr
 800a0ac:	20000164 	.word	0x20000164

0800a0b0 <_close_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_close_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f9 f9c7 	bl	800344e <_close>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_close_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_close_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	2000065c 	.word	0x2000065c

0800a0d0 <_lseek_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_lseek_r+0x20>)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f9 f9dc 	bl	800349c <_lseek>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_lseek_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_lseek_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	2000065c 	.word	0x2000065c

0800a0f4 <_read_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_read_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f9 f96a 	bl	80033dc <_read>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_read_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_read_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	2000065c 	.word	0x2000065c

0800a118 <_sbrk_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_sbrk_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f9 f9c8 	bl	80034b8 <_sbrk>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_sbrk_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_sbrk_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	2000065c 	.word	0x2000065c

0800a138 <_write_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_write_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f9 f965 	bl	8003416 <_write>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_write_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_write_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	2000065c 	.word	0x2000065c

0800a15c <__errno>:
 800a15c:	4b01      	ldr	r3, [pc, #4]	; (800a164 <__errno+0x8>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000070 	.word	0x20000070

0800a168 <__libc_init_array>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4d0d      	ldr	r5, [pc, #52]	; (800a1a0 <__libc_init_array+0x38>)
 800a16c:	4c0d      	ldr	r4, [pc, #52]	; (800a1a4 <__libc_init_array+0x3c>)
 800a16e:	1b64      	subs	r4, r4, r5
 800a170:	10a4      	asrs	r4, r4, #2
 800a172:	2600      	movs	r6, #0
 800a174:	42a6      	cmp	r6, r4
 800a176:	d109      	bne.n	800a18c <__libc_init_array+0x24>
 800a178:	4d0b      	ldr	r5, [pc, #44]	; (800a1a8 <__libc_init_array+0x40>)
 800a17a:	4c0c      	ldr	r4, [pc, #48]	; (800a1ac <__libc_init_array+0x44>)
 800a17c:	f001 fef0 	bl	800bf60 <_init>
 800a180:	1b64      	subs	r4, r4, r5
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	2600      	movs	r6, #0
 800a186:	42a6      	cmp	r6, r4
 800a188:	d105      	bne.n	800a196 <__libc_init_array+0x2e>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a190:	4798      	blx	r3
 800a192:	3601      	adds	r6, #1
 800a194:	e7ee      	b.n	800a174 <__libc_init_array+0xc>
 800a196:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19a:	4798      	blx	r3
 800a19c:	3601      	adds	r6, #1
 800a19e:	e7f2      	b.n	800a186 <__libc_init_array+0x1e>
 800a1a0:	0800e240 	.word	0x0800e240
 800a1a4:	0800e240 	.word	0x0800e240
 800a1a8:	0800e240 	.word	0x0800e240
 800a1ac:	0800e244 	.word	0x0800e244

0800a1b0 <__retarget_lock_init_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_acquire_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__retarget_lock_release_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <memcpy>:
 800a1b6:	440a      	add	r2, r1
 800a1b8:	4291      	cmp	r1, r2
 800a1ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1be:	d100      	bne.n	800a1c2 <memcpy+0xc>
 800a1c0:	4770      	bx	lr
 800a1c2:	b510      	push	{r4, lr}
 800a1c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1cc:	4291      	cmp	r1, r2
 800a1ce:	d1f9      	bne.n	800a1c4 <memcpy+0xe>
 800a1d0:	bd10      	pop	{r4, pc}

0800a1d2 <abort>:
 800a1d2:	b508      	push	{r3, lr}
 800a1d4:	2006      	movs	r0, #6
 800a1d6:	f001 fe19 	bl	800be0c <raise>
 800a1da:	2001      	movs	r0, #1
 800a1dc:	f7f9 f8f4 	bl	80033c8 <_exit>

0800a1e0 <quorem>:
 800a1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	6903      	ldr	r3, [r0, #16]
 800a1e6:	690c      	ldr	r4, [r1, #16]
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	db7e      	blt.n	800a2ec <quorem+0x10c>
 800a1ee:	3c01      	subs	r4, #1
 800a1f0:	f101 0814 	add.w	r8, r1, #20
 800a1f4:	f100 0514 	add.w	r5, r0, #20
 800a1f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a206:	3301      	adds	r3, #1
 800a208:	429a      	cmp	r2, r3
 800a20a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a20e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a212:	fbb2 f6f3 	udiv	r6, r2, r3
 800a216:	d331      	bcc.n	800a27c <quorem+0x9c>
 800a218:	f04f 0e00 	mov.w	lr, #0
 800a21c:	4640      	mov	r0, r8
 800a21e:	46ac      	mov	ip, r5
 800a220:	46f2      	mov	sl, lr
 800a222:	f850 2b04 	ldr.w	r2, [r0], #4
 800a226:	b293      	uxth	r3, r2
 800a228:	fb06 e303 	mla	r3, r6, r3, lr
 800a22c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a230:	0c1a      	lsrs	r2, r3, #16
 800a232:	b29b      	uxth	r3, r3
 800a234:	ebaa 0303 	sub.w	r3, sl, r3
 800a238:	f8dc a000 	ldr.w	sl, [ip]
 800a23c:	fa13 f38a 	uxtah	r3, r3, sl
 800a240:	fb06 220e 	mla	r2, r6, lr, r2
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	9b00      	ldr	r3, [sp, #0]
 800a248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a24c:	b292      	uxth	r2, r2
 800a24e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a256:	f8bd 3000 	ldrh.w	r3, [sp]
 800a25a:	4581      	cmp	r9, r0
 800a25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a260:	f84c 3b04 	str.w	r3, [ip], #4
 800a264:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a268:	d2db      	bcs.n	800a222 <quorem+0x42>
 800a26a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a26e:	b92b      	cbnz	r3, 800a27c <quorem+0x9c>
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	3b04      	subs	r3, #4
 800a274:	429d      	cmp	r5, r3
 800a276:	461a      	mov	r2, r3
 800a278:	d32c      	bcc.n	800a2d4 <quorem+0xf4>
 800a27a:	613c      	str	r4, [r7, #16]
 800a27c:	4638      	mov	r0, r7
 800a27e:	f001 f8f1 	bl	800b464 <__mcmp>
 800a282:	2800      	cmp	r0, #0
 800a284:	db22      	blt.n	800a2cc <quorem+0xec>
 800a286:	3601      	adds	r6, #1
 800a288:	4629      	mov	r1, r5
 800a28a:	2000      	movs	r0, #0
 800a28c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a290:	f8d1 c000 	ldr.w	ip, [r1]
 800a294:	b293      	uxth	r3, r2
 800a296:	1ac3      	subs	r3, r0, r3
 800a298:	0c12      	lsrs	r2, r2, #16
 800a29a:	fa13 f38c 	uxtah	r3, r3, ip
 800a29e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a2a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2ac:	45c1      	cmp	r9, r8
 800a2ae:	f841 3b04 	str.w	r3, [r1], #4
 800a2b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2b6:	d2e9      	bcs.n	800a28c <quorem+0xac>
 800a2b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2c0:	b922      	cbnz	r2, 800a2cc <quorem+0xec>
 800a2c2:	3b04      	subs	r3, #4
 800a2c4:	429d      	cmp	r5, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	d30a      	bcc.n	800a2e0 <quorem+0x100>
 800a2ca:	613c      	str	r4, [r7, #16]
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	b003      	add	sp, #12
 800a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d4:	6812      	ldr	r2, [r2, #0]
 800a2d6:	3b04      	subs	r3, #4
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d1ce      	bne.n	800a27a <quorem+0x9a>
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	e7c9      	b.n	800a274 <quorem+0x94>
 800a2e0:	6812      	ldr	r2, [r2, #0]
 800a2e2:	3b04      	subs	r3, #4
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	d1f0      	bne.n	800a2ca <quorem+0xea>
 800a2e8:	3c01      	subs	r4, #1
 800a2ea:	e7eb      	b.n	800a2c4 <quorem+0xe4>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	e7ee      	b.n	800a2ce <quorem+0xee>

0800a2f0 <_dtoa_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ed2d 8b04 	vpush	{d8-d9}
 800a2f8:	69c5      	ldr	r5, [r0, #28]
 800a2fa:	b093      	sub	sp, #76	; 0x4c
 800a2fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a300:	ec57 6b10 	vmov	r6, r7, d0
 800a304:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a308:	9107      	str	r1, [sp, #28]
 800a30a:	4604      	mov	r4, r0
 800a30c:	920a      	str	r2, [sp, #40]	; 0x28
 800a30e:	930d      	str	r3, [sp, #52]	; 0x34
 800a310:	b975      	cbnz	r5, 800a330 <_dtoa_r+0x40>
 800a312:	2010      	movs	r0, #16
 800a314:	f7fe ff14 	bl	8009140 <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	61e0      	str	r0, [r4, #28]
 800a31c:	b920      	cbnz	r0, 800a328 <_dtoa_r+0x38>
 800a31e:	4bae      	ldr	r3, [pc, #696]	; (800a5d8 <_dtoa_r+0x2e8>)
 800a320:	21ef      	movs	r1, #239	; 0xef
 800a322:	48ae      	ldr	r0, [pc, #696]	; (800a5dc <_dtoa_r+0x2ec>)
 800a324:	f7fe feee 	bl	8009104 <__assert_func>
 800a328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a32c:	6005      	str	r5, [r0, #0]
 800a32e:	60c5      	str	r5, [r0, #12]
 800a330:	69e3      	ldr	r3, [r4, #28]
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	b151      	cbz	r1, 800a34c <_dtoa_r+0x5c>
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	604a      	str	r2, [r1, #4]
 800a33a:	2301      	movs	r3, #1
 800a33c:	4093      	lsls	r3, r2
 800a33e:	608b      	str	r3, [r1, #8]
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fe53 	bl	800afec <_Bfree>
 800a346:	69e3      	ldr	r3, [r4, #28]
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	1e3b      	subs	r3, r7, #0
 800a34e:	bfbb      	ittet	lt
 800a350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a354:	9303      	strlt	r3, [sp, #12]
 800a356:	2300      	movge	r3, #0
 800a358:	2201      	movlt	r2, #1
 800a35a:	bfac      	ite	ge
 800a35c:	f8c8 3000 	strge.w	r3, [r8]
 800a360:	f8c8 2000 	strlt.w	r2, [r8]
 800a364:	4b9e      	ldr	r3, [pc, #632]	; (800a5e0 <_dtoa_r+0x2f0>)
 800a366:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a36a:	ea33 0308 	bics.w	r3, r3, r8
 800a36e:	d11b      	bne.n	800a3a8 <_dtoa_r+0xb8>
 800a370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a372:	f242 730f 	movw	r3, #9999	; 0x270f
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a37c:	4333      	orrs	r3, r6
 800a37e:	f000 8593 	beq.w	800aea8 <_dtoa_r+0xbb8>
 800a382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a384:	b963      	cbnz	r3, 800a3a0 <_dtoa_r+0xb0>
 800a386:	4b97      	ldr	r3, [pc, #604]	; (800a5e4 <_dtoa_r+0x2f4>)
 800a388:	e027      	b.n	800a3da <_dtoa_r+0xea>
 800a38a:	4b97      	ldr	r3, [pc, #604]	; (800a5e8 <_dtoa_r+0x2f8>)
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	9800      	ldr	r0, [sp, #0]
 800a396:	b013      	add	sp, #76	; 0x4c
 800a398:	ecbd 8b04 	vpop	{d8-d9}
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	4b90      	ldr	r3, [pc, #576]	; (800a5e4 <_dtoa_r+0x2f4>)
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	3303      	adds	r3, #3
 800a3a6:	e7f3      	b.n	800a390 <_dtoa_r+0xa0>
 800a3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	ec51 0b17 	vmov	r0, r1, d7
 800a3b2:	eeb0 8a47 	vmov.f32	s16, s14
 800a3b6:	eef0 8a67 	vmov.f32	s17, s15
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f7f6 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 800a3c0:	4681      	mov	r9, r0
 800a3c2:	b160      	cbz	r0, 800a3de <_dtoa_r+0xee>
 800a3c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 8568 	beq.w	800aea2 <_dtoa_r+0xbb2>
 800a3d2:	4b86      	ldr	r3, [pc, #536]	; (800a5ec <_dtoa_r+0x2fc>)
 800a3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	e7da      	b.n	800a394 <_dtoa_r+0xa4>
 800a3de:	aa10      	add	r2, sp, #64	; 0x40
 800a3e0:	a911      	add	r1, sp, #68	; 0x44
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a3e8:	eef0 0a68 	vmov.f32	s1, s17
 800a3ec:	f001 f8e0 	bl	800b5b0 <__d2b>
 800a3f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	d07f      	beq.n	800a4fa <_dtoa_r+0x20a>
 800a3fa:	ee18 3a90 	vmov	r3, s17
 800a3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a402:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a406:	ec51 0b18 	vmov	r0, r1, d8
 800a40a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a40e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a412:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a416:	4619      	mov	r1, r3
 800a418:	2200      	movs	r2, #0
 800a41a:	4b75      	ldr	r3, [pc, #468]	; (800a5f0 <_dtoa_r+0x300>)
 800a41c:	f7f5 ff54 	bl	80002c8 <__aeabi_dsub>
 800a420:	a367      	add	r3, pc, #412	; (adr r3, 800a5c0 <_dtoa_r+0x2d0>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f7f6 f907 	bl	8000638 <__aeabi_dmul>
 800a42a:	a367      	add	r3, pc, #412	; (adr r3, 800a5c8 <_dtoa_r+0x2d8>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f5 ff4c 	bl	80002cc <__adddf3>
 800a434:	4606      	mov	r6, r0
 800a436:	4628      	mov	r0, r5
 800a438:	460f      	mov	r7, r1
 800a43a:	f7f6 f893 	bl	8000564 <__aeabi_i2d>
 800a43e:	a364      	add	r3, pc, #400	; (adr r3, 800a5d0 <_dtoa_r+0x2e0>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f7f6 f8f8 	bl	8000638 <__aeabi_dmul>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4630      	mov	r0, r6
 800a44e:	4639      	mov	r1, r7
 800a450:	f7f5 ff3c 	bl	80002cc <__adddf3>
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	f7f6 fb9e 	bl	8000b98 <__aeabi_d2iz>
 800a45c:	2200      	movs	r2, #0
 800a45e:	4683      	mov	fp, r0
 800a460:	2300      	movs	r3, #0
 800a462:	4630      	mov	r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	f7f6 fb59 	bl	8000b1c <__aeabi_dcmplt>
 800a46a:	b148      	cbz	r0, 800a480 <_dtoa_r+0x190>
 800a46c:	4658      	mov	r0, fp
 800a46e:	f7f6 f879 	bl	8000564 <__aeabi_i2d>
 800a472:	4632      	mov	r2, r6
 800a474:	463b      	mov	r3, r7
 800a476:	f7f6 fb47 	bl	8000b08 <__aeabi_dcmpeq>
 800a47a:	b908      	cbnz	r0, 800a480 <_dtoa_r+0x190>
 800a47c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a480:	f1bb 0f16 	cmp.w	fp, #22
 800a484:	d857      	bhi.n	800a536 <_dtoa_r+0x246>
 800a486:	4b5b      	ldr	r3, [pc, #364]	; (800a5f4 <_dtoa_r+0x304>)
 800a488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	ec51 0b18 	vmov	r0, r1, d8
 800a494:	f7f6 fb42 	bl	8000b1c <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d04e      	beq.n	800a53a <_dtoa_r+0x24a>
 800a49c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4a6:	1b5b      	subs	r3, r3, r5
 800a4a8:	1e5a      	subs	r2, r3, #1
 800a4aa:	bf45      	ittet	mi
 800a4ac:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4b0:	9305      	strmi	r3, [sp, #20]
 800a4b2:	2300      	movpl	r3, #0
 800a4b4:	2300      	movmi	r3, #0
 800a4b6:	9206      	str	r2, [sp, #24]
 800a4b8:	bf54      	ite	pl
 800a4ba:	9305      	strpl	r3, [sp, #20]
 800a4bc:	9306      	strmi	r3, [sp, #24]
 800a4be:	f1bb 0f00 	cmp.w	fp, #0
 800a4c2:	db3c      	blt.n	800a53e <_dtoa_r+0x24e>
 800a4c4:	9b06      	ldr	r3, [sp, #24]
 800a4c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a4ca:	445b      	add	r3, fp
 800a4cc:	9306      	str	r3, [sp, #24]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	9308      	str	r3, [sp, #32]
 800a4d2:	9b07      	ldr	r3, [sp, #28]
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d868      	bhi.n	800a5aa <_dtoa_r+0x2ba>
 800a4d8:	2b05      	cmp	r3, #5
 800a4da:	bfc4      	itt	gt
 800a4dc:	3b04      	subgt	r3, #4
 800a4de:	9307      	strgt	r3, [sp, #28]
 800a4e0:	9b07      	ldr	r3, [sp, #28]
 800a4e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a4e6:	bfcc      	ite	gt
 800a4e8:	2500      	movgt	r5, #0
 800a4ea:	2501      	movle	r5, #1
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	f200 8085 	bhi.w	800a5fc <_dtoa_r+0x30c>
 800a4f2:	e8df f003 	tbb	[pc, r3]
 800a4f6:	3b2e      	.short	0x3b2e
 800a4f8:	5839      	.short	0x5839
 800a4fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4fe:	441d      	add	r5, r3
 800a500:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a504:	2b20      	cmp	r3, #32
 800a506:	bfc1      	itttt	gt
 800a508:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a50c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a510:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a514:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a518:	bfd6      	itet	le
 800a51a:	f1c3 0320 	rsble	r3, r3, #32
 800a51e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a522:	fa06 f003 	lslle.w	r0, r6, r3
 800a526:	f7f6 f80d 	bl	8000544 <__aeabi_ui2d>
 800a52a:	2201      	movs	r2, #1
 800a52c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a530:	3d01      	subs	r5, #1
 800a532:	920e      	str	r2, [sp, #56]	; 0x38
 800a534:	e76f      	b.n	800a416 <_dtoa_r+0x126>
 800a536:	2301      	movs	r3, #1
 800a538:	e7b3      	b.n	800a4a2 <_dtoa_r+0x1b2>
 800a53a:	900c      	str	r0, [sp, #48]	; 0x30
 800a53c:	e7b2      	b.n	800a4a4 <_dtoa_r+0x1b4>
 800a53e:	9b05      	ldr	r3, [sp, #20]
 800a540:	eba3 030b 	sub.w	r3, r3, fp
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	f1cb 0300 	rsb	r3, fp, #0
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	2300      	movs	r3, #0
 800a54e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a550:	e7bf      	b.n	800a4d2 <_dtoa_r+0x1e2>
 800a552:	2300      	movs	r3, #0
 800a554:	9309      	str	r3, [sp, #36]	; 0x24
 800a556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc52      	bgt.n	800a602 <_dtoa_r+0x312>
 800a55c:	2301      	movs	r3, #1
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	461a      	mov	r2, r3
 800a564:	920a      	str	r2, [sp, #40]	; 0x28
 800a566:	e00b      	b.n	800a580 <_dtoa_r+0x290>
 800a568:	2301      	movs	r3, #1
 800a56a:	e7f3      	b.n	800a554 <_dtoa_r+0x264>
 800a56c:	2300      	movs	r3, #0
 800a56e:	9309      	str	r3, [sp, #36]	; 0x24
 800a570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a572:	445b      	add	r3, fp
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	3301      	adds	r3, #1
 800a578:	2b01      	cmp	r3, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	bfb8      	it	lt
 800a57e:	2301      	movlt	r3, #1
 800a580:	69e0      	ldr	r0, [r4, #28]
 800a582:	2100      	movs	r1, #0
 800a584:	2204      	movs	r2, #4
 800a586:	f102 0614 	add.w	r6, r2, #20
 800a58a:	429e      	cmp	r6, r3
 800a58c:	d93d      	bls.n	800a60a <_dtoa_r+0x31a>
 800a58e:	6041      	str	r1, [r0, #4]
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fceb 	bl	800af6c <_Balloc>
 800a596:	9000      	str	r0, [sp, #0]
 800a598:	2800      	cmp	r0, #0
 800a59a:	d139      	bne.n	800a610 <_dtoa_r+0x320>
 800a59c:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <_dtoa_r+0x308>)
 800a59e:	4602      	mov	r2, r0
 800a5a0:	f240 11af 	movw	r1, #431	; 0x1af
 800a5a4:	e6bd      	b.n	800a322 <_dtoa_r+0x32>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e7e1      	b.n	800a56e <_dtoa_r+0x27e>
 800a5aa:	2501      	movs	r5, #1
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	9509      	str	r5, [sp, #36]	; 0x24
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2312      	movs	r3, #18
 800a5be:	e7d1      	b.n	800a564 <_dtoa_r+0x274>
 800a5c0:	636f4361 	.word	0x636f4361
 800a5c4:	3fd287a7 	.word	0x3fd287a7
 800a5c8:	8b60c8b3 	.word	0x8b60c8b3
 800a5cc:	3fc68a28 	.word	0x3fc68a28
 800a5d0:	509f79fb 	.word	0x509f79fb
 800a5d4:	3fd34413 	.word	0x3fd34413
 800a5d8:	0800df45 	.word	0x0800df45
 800a5dc:	0800df5c 	.word	0x0800df5c
 800a5e0:	7ff00000 	.word	0x7ff00000
 800a5e4:	0800df41 	.word	0x0800df41
 800a5e8:	0800df38 	.word	0x0800df38
 800a5ec:	0800df15 	.word	0x0800df15
 800a5f0:	3ff80000 	.word	0x3ff80000
 800a5f4:	0800e048 	.word	0x0800e048
 800a5f8:	0800dfb4 	.word	0x0800dfb4
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	e7d7      	b.n	800a5b2 <_dtoa_r+0x2c2>
 800a602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	e7ba      	b.n	800a580 <_dtoa_r+0x290>
 800a60a:	3101      	adds	r1, #1
 800a60c:	0052      	lsls	r2, r2, #1
 800a60e:	e7ba      	b.n	800a586 <_dtoa_r+0x296>
 800a610:	69e3      	ldr	r3, [r4, #28]
 800a612:	9a00      	ldr	r2, [sp, #0]
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	9b04      	ldr	r3, [sp, #16]
 800a618:	2b0e      	cmp	r3, #14
 800a61a:	f200 80a8 	bhi.w	800a76e <_dtoa_r+0x47e>
 800a61e:	2d00      	cmp	r5, #0
 800a620:	f000 80a5 	beq.w	800a76e <_dtoa_r+0x47e>
 800a624:	f1bb 0f00 	cmp.w	fp, #0
 800a628:	dd38      	ble.n	800a69c <_dtoa_r+0x3ac>
 800a62a:	4bc0      	ldr	r3, [pc, #768]	; (800a92c <_dtoa_r+0x63c>)
 800a62c:	f00b 020f 	and.w	r2, fp, #15
 800a630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a638:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a63c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a640:	d019      	beq.n	800a676 <_dtoa_r+0x386>
 800a642:	4bbb      	ldr	r3, [pc, #748]	; (800a930 <_dtoa_r+0x640>)
 800a644:	ec51 0b18 	vmov	r0, r1, d8
 800a648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a64c:	f7f6 f91e 	bl	800088c <__aeabi_ddiv>
 800a650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a654:	f008 080f 	and.w	r8, r8, #15
 800a658:	2503      	movs	r5, #3
 800a65a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a930 <_dtoa_r+0x640>
 800a65e:	f1b8 0f00 	cmp.w	r8, #0
 800a662:	d10a      	bne.n	800a67a <_dtoa_r+0x38a>
 800a664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a668:	4632      	mov	r2, r6
 800a66a:	463b      	mov	r3, r7
 800a66c:	f7f6 f90e 	bl	800088c <__aeabi_ddiv>
 800a670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a674:	e02b      	b.n	800a6ce <_dtoa_r+0x3de>
 800a676:	2502      	movs	r5, #2
 800a678:	e7ef      	b.n	800a65a <_dtoa_r+0x36a>
 800a67a:	f018 0f01 	tst.w	r8, #1
 800a67e:	d008      	beq.n	800a692 <_dtoa_r+0x3a2>
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a688:	f7f5 ffd6 	bl	8000638 <__aeabi_dmul>
 800a68c:	3501      	adds	r5, #1
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a696:	f109 0908 	add.w	r9, r9, #8
 800a69a:	e7e0      	b.n	800a65e <_dtoa_r+0x36e>
 800a69c:	f000 809f 	beq.w	800a7de <_dtoa_r+0x4ee>
 800a6a0:	f1cb 0600 	rsb	r6, fp, #0
 800a6a4:	4ba1      	ldr	r3, [pc, #644]	; (800a92c <_dtoa_r+0x63c>)
 800a6a6:	4fa2      	ldr	r7, [pc, #648]	; (800a930 <_dtoa_r+0x640>)
 800a6a8:	f006 020f 	and.w	r2, r6, #15
 800a6ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	ec51 0b18 	vmov	r0, r1, d8
 800a6b8:	f7f5 ffbe 	bl	8000638 <__aeabi_dmul>
 800a6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c0:	1136      	asrs	r6, r6, #4
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2502      	movs	r5, #2
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d17e      	bne.n	800a7c8 <_dtoa_r+0x4d8>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1d0      	bne.n	800a670 <_dtoa_r+0x380>
 800a6ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8084 	beq.w	800a7e2 <_dtoa_r+0x4f2>
 800a6da:	4b96      	ldr	r3, [pc, #600]	; (800a934 <_dtoa_r+0x644>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f6 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d07b      	beq.n	800a7e2 <_dtoa_r+0x4f2>
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d078      	beq.n	800a7e2 <_dtoa_r+0x4f2>
 800a6f0:	9b01      	ldr	r3, [sp, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd39      	ble.n	800a76a <_dtoa_r+0x47a>
 800a6f6:	4b90      	ldr	r3, [pc, #576]	; (800a938 <_dtoa_r+0x648>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 ff9b 	bl	8000638 <__aeabi_dmul>
 800a702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a706:	9e01      	ldr	r6, [sp, #4]
 800a708:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a70c:	3501      	adds	r5, #1
 800a70e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a712:	4628      	mov	r0, r5
 800a714:	f7f5 ff26 	bl	8000564 <__aeabi_i2d>
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	f7f5 ff8c 	bl	8000638 <__aeabi_dmul>
 800a720:	4b86      	ldr	r3, [pc, #536]	; (800a93c <_dtoa_r+0x64c>)
 800a722:	2200      	movs	r2, #0
 800a724:	f7f5 fdd2 	bl	80002cc <__adddf3>
 800a728:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	2e00      	cmp	r6, #0
 800a734:	d158      	bne.n	800a7e8 <_dtoa_r+0x4f8>
 800a736:	4b82      	ldr	r3, [pc, #520]	; (800a940 <_dtoa_r+0x650>)
 800a738:	2200      	movs	r2, #0
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fdc3 	bl	80002c8 <__aeabi_dsub>
 800a742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a746:	4680      	mov	r8, r0
 800a748:	4689      	mov	r9, r1
 800a74a:	f7f6 fa05 	bl	8000b58 <__aeabi_dcmpgt>
 800a74e:	2800      	cmp	r0, #0
 800a750:	f040 8296 	bne.w	800ac80 <_dtoa_r+0x990>
 800a754:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a758:	4640      	mov	r0, r8
 800a75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a75e:	4649      	mov	r1, r9
 800a760:	f7f6 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800a764:	2800      	cmp	r0, #0
 800a766:	f040 8289 	bne.w	800ac7c <_dtoa_r+0x98c>
 800a76a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a770:	2b00      	cmp	r3, #0
 800a772:	f2c0 814e 	blt.w	800aa12 <_dtoa_r+0x722>
 800a776:	f1bb 0f0e 	cmp.w	fp, #14
 800a77a:	f300 814a 	bgt.w	800aa12 <_dtoa_r+0x722>
 800a77e:	4b6b      	ldr	r3, [pc, #428]	; (800a92c <_dtoa_r+0x63c>)
 800a780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a784:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f280 80dc 	bge.w	800a948 <_dtoa_r+0x658>
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f300 80d8 	bgt.w	800a948 <_dtoa_r+0x658>
 800a798:	f040 826f 	bne.w	800ac7a <_dtoa_r+0x98a>
 800a79c:	4b68      	ldr	r3, [pc, #416]	; (800a940 <_dtoa_r+0x650>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 ff48 	bl	8000638 <__aeabi_dmul>
 800a7a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ac:	f7f6 f9ca 	bl	8000b44 <__aeabi_dcmpge>
 800a7b0:	9e04      	ldr	r6, [sp, #16]
 800a7b2:	4637      	mov	r7, r6
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	f040 8245 	bne.w	800ac44 <_dtoa_r+0x954>
 800a7ba:	9d00      	ldr	r5, [sp, #0]
 800a7bc:	2331      	movs	r3, #49	; 0x31
 800a7be:	f805 3b01 	strb.w	r3, [r5], #1
 800a7c2:	f10b 0b01 	add.w	fp, fp, #1
 800a7c6:	e241      	b.n	800ac4c <_dtoa_r+0x95c>
 800a7c8:	07f2      	lsls	r2, r6, #31
 800a7ca:	d505      	bpl.n	800a7d8 <_dtoa_r+0x4e8>
 800a7cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d0:	f7f5 ff32 	bl	8000638 <__aeabi_dmul>
 800a7d4:	3501      	adds	r5, #1
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	1076      	asrs	r6, r6, #1
 800a7da:	3708      	adds	r7, #8
 800a7dc:	e773      	b.n	800a6c6 <_dtoa_r+0x3d6>
 800a7de:	2502      	movs	r5, #2
 800a7e0:	e775      	b.n	800a6ce <_dtoa_r+0x3de>
 800a7e2:	9e04      	ldr	r6, [sp, #16]
 800a7e4:	465f      	mov	r7, fp
 800a7e6:	e792      	b.n	800a70e <_dtoa_r+0x41e>
 800a7e8:	9900      	ldr	r1, [sp, #0]
 800a7ea:	4b50      	ldr	r3, [pc, #320]	; (800a92c <_dtoa_r+0x63c>)
 800a7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7f0:	4431      	add	r1, r6
 800a7f2:	9102      	str	r1, [sp, #8]
 800a7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7f6:	eeb0 9a47 	vmov.f32	s18, s14
 800a7fa:	eef0 9a67 	vmov.f32	s19, s15
 800a7fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a802:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a806:	2900      	cmp	r1, #0
 800a808:	d044      	beq.n	800a894 <_dtoa_r+0x5a4>
 800a80a:	494e      	ldr	r1, [pc, #312]	; (800a944 <_dtoa_r+0x654>)
 800a80c:	2000      	movs	r0, #0
 800a80e:	f7f6 f83d 	bl	800088c <__aeabi_ddiv>
 800a812:	ec53 2b19 	vmov	r2, r3, d9
 800a816:	f7f5 fd57 	bl	80002c8 <__aeabi_dsub>
 800a81a:	9d00      	ldr	r5, [sp, #0]
 800a81c:	ec41 0b19 	vmov	d9, r0, r1
 800a820:	4649      	mov	r1, r9
 800a822:	4640      	mov	r0, r8
 800a824:	f7f6 f9b8 	bl	8000b98 <__aeabi_d2iz>
 800a828:	4606      	mov	r6, r0
 800a82a:	f7f5 fe9b 	bl	8000564 <__aeabi_i2d>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4640      	mov	r0, r8
 800a834:	4649      	mov	r1, r9
 800a836:	f7f5 fd47 	bl	80002c8 <__aeabi_dsub>
 800a83a:	3630      	adds	r6, #48	; 0x30
 800a83c:	f805 6b01 	strb.w	r6, [r5], #1
 800a840:	ec53 2b19 	vmov	r2, r3, d9
 800a844:	4680      	mov	r8, r0
 800a846:	4689      	mov	r9, r1
 800a848:	f7f6 f968 	bl	8000b1c <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d164      	bne.n	800a91a <_dtoa_r+0x62a>
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	4937      	ldr	r1, [pc, #220]	; (800a934 <_dtoa_r+0x644>)
 800a856:	2000      	movs	r0, #0
 800a858:	f7f5 fd36 	bl	80002c8 <__aeabi_dsub>
 800a85c:	ec53 2b19 	vmov	r2, r3, d9
 800a860:	f7f6 f95c 	bl	8000b1c <__aeabi_dcmplt>
 800a864:	2800      	cmp	r0, #0
 800a866:	f040 80b6 	bne.w	800a9d6 <_dtoa_r+0x6e6>
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	429d      	cmp	r5, r3
 800a86e:	f43f af7c 	beq.w	800a76a <_dtoa_r+0x47a>
 800a872:	4b31      	ldr	r3, [pc, #196]	; (800a938 <_dtoa_r+0x648>)
 800a874:	ec51 0b19 	vmov	r0, r1, d9
 800a878:	2200      	movs	r2, #0
 800a87a:	f7f5 fedd 	bl	8000638 <__aeabi_dmul>
 800a87e:	4b2e      	ldr	r3, [pc, #184]	; (800a938 <_dtoa_r+0x648>)
 800a880:	ec41 0b19 	vmov	d9, r0, r1
 800a884:	2200      	movs	r2, #0
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f5 fed5 	bl	8000638 <__aeabi_dmul>
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	e7c5      	b.n	800a820 <_dtoa_r+0x530>
 800a894:	ec51 0b17 	vmov	r0, r1, d7
 800a898:	f7f5 fece 	bl	8000638 <__aeabi_dmul>
 800a89c:	9b02      	ldr	r3, [sp, #8]
 800a89e:	9d00      	ldr	r5, [sp, #0]
 800a8a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8a2:	ec41 0b19 	vmov	d9, r0, r1
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	f7f6 f975 	bl	8000b98 <__aeabi_d2iz>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	f7f5 fe58 	bl	8000564 <__aeabi_i2d>
 800a8b4:	3630      	adds	r6, #48	; 0x30
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f5 fd03 	bl	80002c8 <__aeabi_dsub>
 800a8c2:	f805 6b01 	strb.w	r6, [r5], #1
 800a8c6:	9b02      	ldr	r3, [sp, #8]
 800a8c8:	429d      	cmp	r5, r3
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	d124      	bne.n	800a91e <_dtoa_r+0x62e>
 800a8d4:	4b1b      	ldr	r3, [pc, #108]	; (800a944 <_dtoa_r+0x654>)
 800a8d6:	ec51 0b19 	vmov	r0, r1, d9
 800a8da:	f7f5 fcf7 	bl	80002cc <__adddf3>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f6 f937 	bl	8000b58 <__aeabi_dcmpgt>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d173      	bne.n	800a9d6 <_dtoa_r+0x6e6>
 800a8ee:	ec53 2b19 	vmov	r2, r3, d9
 800a8f2:	4914      	ldr	r1, [pc, #80]	; (800a944 <_dtoa_r+0x654>)
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	f7f5 fce7 	bl	80002c8 <__aeabi_dsub>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4640      	mov	r0, r8
 800a900:	4649      	mov	r1, r9
 800a902:	f7f6 f90b 	bl	8000b1c <__aeabi_dcmplt>
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f af2f 	beq.w	800a76a <_dtoa_r+0x47a>
 800a90c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a90e:	1e6b      	subs	r3, r5, #1
 800a910:	930f      	str	r3, [sp, #60]	; 0x3c
 800a912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a916:	2b30      	cmp	r3, #48	; 0x30
 800a918:	d0f8      	beq.n	800a90c <_dtoa_r+0x61c>
 800a91a:	46bb      	mov	fp, r7
 800a91c:	e04a      	b.n	800a9b4 <_dtoa_r+0x6c4>
 800a91e:	4b06      	ldr	r3, [pc, #24]	; (800a938 <_dtoa_r+0x648>)
 800a920:	f7f5 fe8a 	bl	8000638 <__aeabi_dmul>
 800a924:	4680      	mov	r8, r0
 800a926:	4689      	mov	r9, r1
 800a928:	e7bd      	b.n	800a8a6 <_dtoa_r+0x5b6>
 800a92a:	bf00      	nop
 800a92c:	0800e048 	.word	0x0800e048
 800a930:	0800e020 	.word	0x0800e020
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	40240000 	.word	0x40240000
 800a93c:	401c0000 	.word	0x401c0000
 800a940:	40140000 	.word	0x40140000
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a94c:	9d00      	ldr	r5, [sp, #0]
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 ff99 	bl	800088c <__aeabi_ddiv>
 800a95a:	f7f6 f91d 	bl	8000b98 <__aeabi_d2iz>
 800a95e:	9001      	str	r0, [sp, #4]
 800a960:	f7f5 fe00 	bl	8000564 <__aeabi_i2d>
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	f7f5 fe66 	bl	8000638 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f5 fca8 	bl	80002c8 <__aeabi_dsub>
 800a978:	9e01      	ldr	r6, [sp, #4]
 800a97a:	9f04      	ldr	r7, [sp, #16]
 800a97c:	3630      	adds	r6, #48	; 0x30
 800a97e:	f805 6b01 	strb.w	r6, [r5], #1
 800a982:	9e00      	ldr	r6, [sp, #0]
 800a984:	1bae      	subs	r6, r5, r6
 800a986:	42b7      	cmp	r7, r6
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	d134      	bne.n	800a9f8 <_dtoa_r+0x708>
 800a98e:	f7f5 fc9d 	bl	80002cc <__adddf3>
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	f7f6 f8dd 	bl	8000b58 <__aeabi_dcmpgt>
 800a99e:	b9c8      	cbnz	r0, 800a9d4 <_dtoa_r+0x6e4>
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f6 f8ae 	bl	8000b08 <__aeabi_dcmpeq>
 800a9ac:	b110      	cbz	r0, 800a9b4 <_dtoa_r+0x6c4>
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	07db      	lsls	r3, r3, #31
 800a9b2:	d40f      	bmi.n	800a9d4 <_dtoa_r+0x6e4>
 800a9b4:	4651      	mov	r1, sl
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fb18 	bl	800afec <_Bfree>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9c0:	702b      	strb	r3, [r5, #0]
 800a9c2:	f10b 0301 	add.w	r3, fp, #1
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f43f ace2 	beq.w	800a394 <_dtoa_r+0xa4>
 800a9d0:	601d      	str	r5, [r3, #0]
 800a9d2:	e4df      	b.n	800a394 <_dtoa_r+0xa4>
 800a9d4:	465f      	mov	r7, fp
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	461d      	mov	r5, r3
 800a9da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9de:	2a39      	cmp	r2, #57	; 0x39
 800a9e0:	d106      	bne.n	800a9f0 <_dtoa_r+0x700>
 800a9e2:	9a00      	ldr	r2, [sp, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d1f7      	bne.n	800a9d8 <_dtoa_r+0x6e8>
 800a9e8:	9900      	ldr	r1, [sp, #0]
 800a9ea:	2230      	movs	r2, #48	; 0x30
 800a9ec:	3701      	adds	r7, #1
 800a9ee:	700a      	strb	r2, [r1, #0]
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	e790      	b.n	800a91a <_dtoa_r+0x62a>
 800a9f8:	4ba3      	ldr	r3, [pc, #652]	; (800ac88 <_dtoa_r+0x998>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fe1c 	bl	8000638 <__aeabi_dmul>
 800aa00:	2200      	movs	r2, #0
 800aa02:	2300      	movs	r3, #0
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	f7f6 f87e 	bl	8000b08 <__aeabi_dcmpeq>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d09e      	beq.n	800a94e <_dtoa_r+0x65e>
 800aa10:	e7d0      	b.n	800a9b4 <_dtoa_r+0x6c4>
 800aa12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa14:	2a00      	cmp	r2, #0
 800aa16:	f000 80ca 	beq.w	800abae <_dtoa_r+0x8be>
 800aa1a:	9a07      	ldr	r2, [sp, #28]
 800aa1c:	2a01      	cmp	r2, #1
 800aa1e:	f300 80ad 	bgt.w	800ab7c <_dtoa_r+0x88c>
 800aa22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa24:	2a00      	cmp	r2, #0
 800aa26:	f000 80a5 	beq.w	800ab74 <_dtoa_r+0x884>
 800aa2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa2e:	9e08      	ldr	r6, [sp, #32]
 800aa30:	9d05      	ldr	r5, [sp, #20]
 800aa32:	9a05      	ldr	r2, [sp, #20]
 800aa34:	441a      	add	r2, r3
 800aa36:	9205      	str	r2, [sp, #20]
 800aa38:	9a06      	ldr	r2, [sp, #24]
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	441a      	add	r2, r3
 800aa3e:	4620      	mov	r0, r4
 800aa40:	9206      	str	r2, [sp, #24]
 800aa42:	f000 fb89 	bl	800b158 <__i2b>
 800aa46:	4607      	mov	r7, r0
 800aa48:	b165      	cbz	r5, 800aa64 <_dtoa_r+0x774>
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dd09      	ble.n	800aa64 <_dtoa_r+0x774>
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	9a05      	ldr	r2, [sp, #20]
 800aa54:	bfa8      	it	ge
 800aa56:	462b      	movge	r3, r5
 800aa58:	1ad2      	subs	r2, r2, r3
 800aa5a:	9205      	str	r2, [sp, #20]
 800aa5c:	9a06      	ldr	r2, [sp, #24]
 800aa5e:	1aed      	subs	r5, r5, r3
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	9306      	str	r3, [sp, #24]
 800aa64:	9b08      	ldr	r3, [sp, #32]
 800aa66:	b1f3      	cbz	r3, 800aaa6 <_dtoa_r+0x7b6>
 800aa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 80a3 	beq.w	800abb6 <_dtoa_r+0x8c6>
 800aa70:	2e00      	cmp	r6, #0
 800aa72:	dd10      	ble.n	800aa96 <_dtoa_r+0x7a6>
 800aa74:	4639      	mov	r1, r7
 800aa76:	4632      	mov	r2, r6
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fc2d 	bl	800b2d8 <__pow5mult>
 800aa7e:	4652      	mov	r2, sl
 800aa80:	4601      	mov	r1, r0
 800aa82:	4607      	mov	r7, r0
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fb7d 	bl	800b184 <__multiply>
 800aa8a:	4651      	mov	r1, sl
 800aa8c:	4680      	mov	r8, r0
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 faac 	bl	800afec <_Bfree>
 800aa94:	46c2      	mov	sl, r8
 800aa96:	9b08      	ldr	r3, [sp, #32]
 800aa98:	1b9a      	subs	r2, r3, r6
 800aa9a:	d004      	beq.n	800aaa6 <_dtoa_r+0x7b6>
 800aa9c:	4651      	mov	r1, sl
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 fc1a 	bl	800b2d8 <__pow5mult>
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fb55 	bl	800b158 <__i2b>
 800aaae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	4606      	mov	r6, r0
 800aab4:	f340 8081 	ble.w	800abba <_dtoa_r+0x8ca>
 800aab8:	461a      	mov	r2, r3
 800aaba:	4601      	mov	r1, r0
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fc0b 	bl	800b2d8 <__pow5mult>
 800aac2:	9b07      	ldr	r3, [sp, #28]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	4606      	mov	r6, r0
 800aac8:	dd7a      	ble.n	800abc0 <_dtoa_r+0x8d0>
 800aaca:	f04f 0800 	mov.w	r8, #0
 800aace:	6933      	ldr	r3, [r6, #16]
 800aad0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aad4:	6918      	ldr	r0, [r3, #16]
 800aad6:	f000 faf1 	bl	800b0bc <__hi0bits>
 800aada:	f1c0 0020 	rsb	r0, r0, #32
 800aade:	9b06      	ldr	r3, [sp, #24]
 800aae0:	4418      	add	r0, r3
 800aae2:	f010 001f 	ands.w	r0, r0, #31
 800aae6:	f000 8094 	beq.w	800ac12 <_dtoa_r+0x922>
 800aaea:	f1c0 0320 	rsb	r3, r0, #32
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	f340 8085 	ble.w	800abfe <_dtoa_r+0x90e>
 800aaf4:	9b05      	ldr	r3, [sp, #20]
 800aaf6:	f1c0 001c 	rsb	r0, r0, #28
 800aafa:	4403      	add	r3, r0
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	4403      	add	r3, r0
 800ab02:	4405      	add	r5, r0
 800ab04:	9306      	str	r3, [sp, #24]
 800ab06:	9b05      	ldr	r3, [sp, #20]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dd05      	ble.n	800ab18 <_dtoa_r+0x828>
 800ab0c:	4651      	mov	r1, sl
 800ab0e:	461a      	mov	r2, r3
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fc3b 	bl	800b38c <__lshift>
 800ab16:	4682      	mov	sl, r0
 800ab18:	9b06      	ldr	r3, [sp, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dd05      	ble.n	800ab2a <_dtoa_r+0x83a>
 800ab1e:	4631      	mov	r1, r6
 800ab20:	461a      	mov	r2, r3
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fc32 	bl	800b38c <__lshift>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d072      	beq.n	800ac16 <_dtoa_r+0x926>
 800ab30:	4631      	mov	r1, r6
 800ab32:	4650      	mov	r0, sl
 800ab34:	f000 fc96 	bl	800b464 <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	da6c      	bge.n	800ac16 <_dtoa_r+0x926>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4651      	mov	r1, sl
 800ab40:	220a      	movs	r2, #10
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 fa74 	bl	800b030 <__multadd>
 800ab48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab4e:	4682      	mov	sl, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 81b0 	beq.w	800aeb6 <_dtoa_r+0xbc6>
 800ab56:	2300      	movs	r3, #0
 800ab58:	4639      	mov	r1, r7
 800ab5a:	220a      	movs	r2, #10
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 fa67 	bl	800b030 <__multadd>
 800ab62:	9b01      	ldr	r3, [sp, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	4607      	mov	r7, r0
 800ab68:	f300 8096 	bgt.w	800ac98 <_dtoa_r+0x9a8>
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	dc59      	bgt.n	800ac26 <_dtoa_r+0x936>
 800ab72:	e091      	b.n	800ac98 <_dtoa_r+0x9a8>
 800ab74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab7a:	e758      	b.n	800aa2e <_dtoa_r+0x73e>
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	1e5e      	subs	r6, r3, #1
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	42b3      	cmp	r3, r6
 800ab84:	bfbf      	itttt	lt
 800ab86:	9b08      	ldrlt	r3, [sp, #32]
 800ab88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ab8a:	9608      	strlt	r6, [sp, #32]
 800ab8c:	1af3      	sublt	r3, r6, r3
 800ab8e:	bfb4      	ite	lt
 800ab90:	18d2      	addlt	r2, r2, r3
 800ab92:	1b9e      	subge	r6, r3, r6
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	bfbc      	itt	lt
 800ab98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ab9a:	2600      	movlt	r6, #0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfb7      	itett	lt
 800aba0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aba4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aba8:	1a9d      	sublt	r5, r3, r2
 800abaa:	2300      	movlt	r3, #0
 800abac:	e741      	b.n	800aa32 <_dtoa_r+0x742>
 800abae:	9e08      	ldr	r6, [sp, #32]
 800abb0:	9d05      	ldr	r5, [sp, #20]
 800abb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abb4:	e748      	b.n	800aa48 <_dtoa_r+0x758>
 800abb6:	9a08      	ldr	r2, [sp, #32]
 800abb8:	e770      	b.n	800aa9c <_dtoa_r+0x7ac>
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	dc19      	bgt.n	800abf4 <_dtoa_r+0x904>
 800abc0:	9b02      	ldr	r3, [sp, #8]
 800abc2:	b9bb      	cbnz	r3, 800abf4 <_dtoa_r+0x904>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abca:	b99b      	cbnz	r3, 800abf4 <_dtoa_r+0x904>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abd2:	0d1b      	lsrs	r3, r3, #20
 800abd4:	051b      	lsls	r3, r3, #20
 800abd6:	b183      	cbz	r3, 800abfa <_dtoa_r+0x90a>
 800abd8:	9b05      	ldr	r3, [sp, #20]
 800abda:	3301      	adds	r3, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	3301      	adds	r3, #1
 800abe2:	9306      	str	r3, [sp, #24]
 800abe4:	f04f 0801 	mov.w	r8, #1
 800abe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abea:	2b00      	cmp	r3, #0
 800abec:	f47f af6f 	bne.w	800aace <_dtoa_r+0x7de>
 800abf0:	2001      	movs	r0, #1
 800abf2:	e774      	b.n	800aade <_dtoa_r+0x7ee>
 800abf4:	f04f 0800 	mov.w	r8, #0
 800abf8:	e7f6      	b.n	800abe8 <_dtoa_r+0x8f8>
 800abfa:	4698      	mov	r8, r3
 800abfc:	e7f4      	b.n	800abe8 <_dtoa_r+0x8f8>
 800abfe:	d082      	beq.n	800ab06 <_dtoa_r+0x816>
 800ac00:	9a05      	ldr	r2, [sp, #20]
 800ac02:	331c      	adds	r3, #28
 800ac04:	441a      	add	r2, r3
 800ac06:	9205      	str	r2, [sp, #20]
 800ac08:	9a06      	ldr	r2, [sp, #24]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	441d      	add	r5, r3
 800ac0e:	9206      	str	r2, [sp, #24]
 800ac10:	e779      	b.n	800ab06 <_dtoa_r+0x816>
 800ac12:	4603      	mov	r3, r0
 800ac14:	e7f4      	b.n	800ac00 <_dtoa_r+0x910>
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc37      	bgt.n	800ac8c <_dtoa_r+0x99c>
 800ac1c:	9b07      	ldr	r3, [sp, #28]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	dd34      	ble.n	800ac8c <_dtoa_r+0x99c>
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	b963      	cbnz	r3, 800ac44 <_dtoa_r+0x954>
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	2205      	movs	r2, #5
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f9fe 	bl	800b030 <__multadd>
 800ac34:	4601      	mov	r1, r0
 800ac36:	4606      	mov	r6, r0
 800ac38:	4650      	mov	r0, sl
 800ac3a:	f000 fc13 	bl	800b464 <__mcmp>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f73f adbb 	bgt.w	800a7ba <_dtoa_r+0x4ca>
 800ac44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac46:	9d00      	ldr	r5, [sp, #0]
 800ac48:	ea6f 0b03 	mvn.w	fp, r3
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	4631      	mov	r1, r6
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f9ca 	bl	800afec <_Bfree>
 800ac58:	2f00      	cmp	r7, #0
 800ac5a:	f43f aeab 	beq.w	800a9b4 <_dtoa_r+0x6c4>
 800ac5e:	f1b8 0f00 	cmp.w	r8, #0
 800ac62:	d005      	beq.n	800ac70 <_dtoa_r+0x980>
 800ac64:	45b8      	cmp	r8, r7
 800ac66:	d003      	beq.n	800ac70 <_dtoa_r+0x980>
 800ac68:	4641      	mov	r1, r8
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 f9be 	bl	800afec <_Bfree>
 800ac70:	4639      	mov	r1, r7
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f9ba 	bl	800afec <_Bfree>
 800ac78:	e69c      	b.n	800a9b4 <_dtoa_r+0x6c4>
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	e7e1      	b.n	800ac44 <_dtoa_r+0x954>
 800ac80:	46bb      	mov	fp, r7
 800ac82:	4637      	mov	r7, r6
 800ac84:	e599      	b.n	800a7ba <_dtoa_r+0x4ca>
 800ac86:	bf00      	nop
 800ac88:	40240000 	.word	0x40240000
 800ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80c8 	beq.w	800ae24 <_dtoa_r+0xb34>
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	dd05      	ble.n	800aca8 <_dtoa_r+0x9b8>
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fb73 	bl	800b38c <__lshift>
 800aca6:	4607      	mov	r7, r0
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	d05b      	beq.n	800ad66 <_dtoa_r+0xa76>
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 f95b 	bl	800af6c <_Balloc>
 800acb6:	4605      	mov	r5, r0
 800acb8:	b928      	cbnz	r0, 800acc6 <_dtoa_r+0x9d6>
 800acba:	4b83      	ldr	r3, [pc, #524]	; (800aec8 <_dtoa_r+0xbd8>)
 800acbc:	4602      	mov	r2, r0
 800acbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800acc2:	f7ff bb2e 	b.w	800a322 <_dtoa_r+0x32>
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	f107 010c 	add.w	r1, r7, #12
 800acd0:	300c      	adds	r0, #12
 800acd2:	f7ff fa70 	bl	800a1b6 <memcpy>
 800acd6:	2201      	movs	r2, #1
 800acd8:	4629      	mov	r1, r5
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 fb56 	bl	800b38c <__lshift>
 800ace0:	9b00      	ldr	r3, [sp, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acea:	4413      	add	r3, r2
 800acec:	9308      	str	r3, [sp, #32]
 800acee:	9b02      	ldr	r3, [sp, #8]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	46b8      	mov	r8, r7
 800acf6:	9306      	str	r3, [sp, #24]
 800acf8:	4607      	mov	r7, r0
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	4631      	mov	r1, r6
 800acfe:	3b01      	subs	r3, #1
 800ad00:	4650      	mov	r0, sl
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	f7ff fa6c 	bl	800a1e0 <quorem>
 800ad08:	4641      	mov	r1, r8
 800ad0a:	9002      	str	r0, [sp, #8]
 800ad0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad10:	4650      	mov	r0, sl
 800ad12:	f000 fba7 	bl	800b464 <__mcmp>
 800ad16:	463a      	mov	r2, r7
 800ad18:	9005      	str	r0, [sp, #20]
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fbbd 	bl	800b49c <__mdiff>
 800ad22:	68c2      	ldr	r2, [r0, #12]
 800ad24:	4605      	mov	r5, r0
 800ad26:	bb02      	cbnz	r2, 800ad6a <_dtoa_r+0xa7a>
 800ad28:	4601      	mov	r1, r0
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f000 fb9a 	bl	800b464 <__mcmp>
 800ad30:	4602      	mov	r2, r0
 800ad32:	4629      	mov	r1, r5
 800ad34:	4620      	mov	r0, r4
 800ad36:	9209      	str	r2, [sp, #36]	; 0x24
 800ad38:	f000 f958 	bl	800afec <_Bfree>
 800ad3c:	9b07      	ldr	r3, [sp, #28]
 800ad3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad40:	9d04      	ldr	r5, [sp, #16]
 800ad42:	ea43 0102 	orr.w	r1, r3, r2
 800ad46:	9b06      	ldr	r3, [sp, #24]
 800ad48:	4319      	orrs	r1, r3
 800ad4a:	d110      	bne.n	800ad6e <_dtoa_r+0xa7e>
 800ad4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad50:	d029      	beq.n	800ada6 <_dtoa_r+0xab6>
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd02      	ble.n	800ad5e <_dtoa_r+0xa6e>
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	f883 9000 	strb.w	r9, [r3]
 800ad64:	e774      	b.n	800ac50 <_dtoa_r+0x960>
 800ad66:	4638      	mov	r0, r7
 800ad68:	e7ba      	b.n	800ace0 <_dtoa_r+0x9f0>
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	e7e1      	b.n	800ad32 <_dtoa_r+0xa42>
 800ad6e:	9b05      	ldr	r3, [sp, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	db04      	blt.n	800ad7e <_dtoa_r+0xa8e>
 800ad74:	9907      	ldr	r1, [sp, #28]
 800ad76:	430b      	orrs	r3, r1
 800ad78:	9906      	ldr	r1, [sp, #24]
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	d120      	bne.n	800adc0 <_dtoa_r+0xad0>
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	dded      	ble.n	800ad5e <_dtoa_r+0xa6e>
 800ad82:	4651      	mov	r1, sl
 800ad84:	2201      	movs	r2, #1
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 fb00 	bl	800b38c <__lshift>
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4682      	mov	sl, r0
 800ad90:	f000 fb68 	bl	800b464 <__mcmp>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	dc03      	bgt.n	800ada0 <_dtoa_r+0xab0>
 800ad98:	d1e1      	bne.n	800ad5e <_dtoa_r+0xa6e>
 800ad9a:	f019 0f01 	tst.w	r9, #1
 800ad9e:	d0de      	beq.n	800ad5e <_dtoa_r+0xa6e>
 800ada0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ada4:	d1d8      	bne.n	800ad58 <_dtoa_r+0xa68>
 800ada6:	9a01      	ldr	r2, [sp, #4]
 800ada8:	2339      	movs	r3, #57	; 0x39
 800adaa:	7013      	strb	r3, [r2, #0]
 800adac:	462b      	mov	r3, r5
 800adae:	461d      	mov	r5, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adb6:	2a39      	cmp	r2, #57	; 0x39
 800adb8:	d06c      	beq.n	800ae94 <_dtoa_r+0xba4>
 800adba:	3201      	adds	r2, #1
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e747      	b.n	800ac50 <_dtoa_r+0x960>
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	dd07      	ble.n	800add4 <_dtoa_r+0xae4>
 800adc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adc8:	d0ed      	beq.n	800ada6 <_dtoa_r+0xab6>
 800adca:	9a01      	ldr	r2, [sp, #4]
 800adcc:	f109 0301 	add.w	r3, r9, #1
 800add0:	7013      	strb	r3, [r2, #0]
 800add2:	e73d      	b.n	800ac50 <_dtoa_r+0x960>
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	9a08      	ldr	r2, [sp, #32]
 800add8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800addc:	4293      	cmp	r3, r2
 800adde:	d043      	beq.n	800ae68 <_dtoa_r+0xb78>
 800ade0:	4651      	mov	r1, sl
 800ade2:	2300      	movs	r3, #0
 800ade4:	220a      	movs	r2, #10
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 f922 	bl	800b030 <__multadd>
 800adec:	45b8      	cmp	r8, r7
 800adee:	4682      	mov	sl, r0
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	f04f 020a 	mov.w	r2, #10
 800adf8:	4641      	mov	r1, r8
 800adfa:	4620      	mov	r0, r4
 800adfc:	d107      	bne.n	800ae0e <_dtoa_r+0xb1e>
 800adfe:	f000 f917 	bl	800b030 <__multadd>
 800ae02:	4680      	mov	r8, r0
 800ae04:	4607      	mov	r7, r0
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	e775      	b.n	800acfa <_dtoa_r+0xa0a>
 800ae0e:	f000 f90f 	bl	800b030 <__multadd>
 800ae12:	4639      	mov	r1, r7
 800ae14:	4680      	mov	r8, r0
 800ae16:	2300      	movs	r3, #0
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f908 	bl	800b030 <__multadd>
 800ae20:	4607      	mov	r7, r0
 800ae22:	e7f0      	b.n	800ae06 <_dtoa_r+0xb16>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	9301      	str	r3, [sp, #4]
 800ae28:	9d00      	ldr	r5, [sp, #0]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4650      	mov	r0, sl
 800ae2e:	f7ff f9d7 	bl	800a1e0 <quorem>
 800ae32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	f805 9b01 	strb.w	r9, [r5], #1
 800ae3c:	1aea      	subs	r2, r5, r3
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	4293      	cmp	r3, r2
 800ae42:	dd07      	ble.n	800ae54 <_dtoa_r+0xb64>
 800ae44:	4651      	mov	r1, sl
 800ae46:	2300      	movs	r3, #0
 800ae48:	220a      	movs	r2, #10
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 f8f0 	bl	800b030 <__multadd>
 800ae50:	4682      	mov	sl, r0
 800ae52:	e7ea      	b.n	800ae2a <_dtoa_r+0xb3a>
 800ae54:	9b01      	ldr	r3, [sp, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	bfc8      	it	gt
 800ae5a:	461d      	movgt	r5, r3
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	bfd8      	it	le
 800ae60:	2501      	movle	r5, #1
 800ae62:	441d      	add	r5, r3
 800ae64:	f04f 0800 	mov.w	r8, #0
 800ae68:	4651      	mov	r1, sl
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fa8d 	bl	800b38c <__lshift>
 800ae72:	4631      	mov	r1, r6
 800ae74:	4682      	mov	sl, r0
 800ae76:	f000 faf5 	bl	800b464 <__mcmp>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	dc96      	bgt.n	800adac <_dtoa_r+0xabc>
 800ae7e:	d102      	bne.n	800ae86 <_dtoa_r+0xb96>
 800ae80:	f019 0f01 	tst.w	r9, #1
 800ae84:	d192      	bne.n	800adac <_dtoa_r+0xabc>
 800ae86:	462b      	mov	r3, r5
 800ae88:	461d      	mov	r5, r3
 800ae8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae8e:	2a30      	cmp	r2, #48	; 0x30
 800ae90:	d0fa      	beq.n	800ae88 <_dtoa_r+0xb98>
 800ae92:	e6dd      	b.n	800ac50 <_dtoa_r+0x960>
 800ae94:	9a00      	ldr	r2, [sp, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d189      	bne.n	800adae <_dtoa_r+0xabe>
 800ae9a:	f10b 0b01 	add.w	fp, fp, #1
 800ae9e:	2331      	movs	r3, #49	; 0x31
 800aea0:	e796      	b.n	800add0 <_dtoa_r+0xae0>
 800aea2:	4b0a      	ldr	r3, [pc, #40]	; (800aecc <_dtoa_r+0xbdc>)
 800aea4:	f7ff ba99 	b.w	800a3da <_dtoa_r+0xea>
 800aea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f47f aa6d 	bne.w	800a38a <_dtoa_r+0x9a>
 800aeb0:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <_dtoa_r+0xbe0>)
 800aeb2:	f7ff ba92 	b.w	800a3da <_dtoa_r+0xea>
 800aeb6:	9b01      	ldr	r3, [sp, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dcb5      	bgt.n	800ae28 <_dtoa_r+0xb38>
 800aebc:	9b07      	ldr	r3, [sp, #28]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	f73f aeb1 	bgt.w	800ac26 <_dtoa_r+0x936>
 800aec4:	e7b0      	b.n	800ae28 <_dtoa_r+0xb38>
 800aec6:	bf00      	nop
 800aec8:	0800dfb4 	.word	0x0800dfb4
 800aecc:	0800df14 	.word	0x0800df14
 800aed0:	0800df38 	.word	0x0800df38

0800aed4 <_free_r>:
 800aed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d044      	beq.n	800af64 <_free_r+0x90>
 800aeda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aede:	9001      	str	r0, [sp, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f1a1 0404 	sub.w	r4, r1, #4
 800aee6:	bfb8      	it	lt
 800aee8:	18e4      	addlt	r4, r4, r3
 800aeea:	f7fe f9d9 	bl	80092a0 <__malloc_lock>
 800aeee:	4a1e      	ldr	r2, [pc, #120]	; (800af68 <_free_r+0x94>)
 800aef0:	9801      	ldr	r0, [sp, #4]
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	b933      	cbnz	r3, 800af04 <_free_r+0x30>
 800aef6:	6063      	str	r3, [r4, #4]
 800aef8:	6014      	str	r4, [r2, #0]
 800aefa:	b003      	add	sp, #12
 800aefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af00:	f7fe b9d4 	b.w	80092ac <__malloc_unlock>
 800af04:	42a3      	cmp	r3, r4
 800af06:	d908      	bls.n	800af1a <_free_r+0x46>
 800af08:	6825      	ldr	r5, [r4, #0]
 800af0a:	1961      	adds	r1, r4, r5
 800af0c:	428b      	cmp	r3, r1
 800af0e:	bf01      	itttt	eq
 800af10:	6819      	ldreq	r1, [r3, #0]
 800af12:	685b      	ldreq	r3, [r3, #4]
 800af14:	1949      	addeq	r1, r1, r5
 800af16:	6021      	streq	r1, [r4, #0]
 800af18:	e7ed      	b.n	800aef6 <_free_r+0x22>
 800af1a:	461a      	mov	r2, r3
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	b10b      	cbz	r3, 800af24 <_free_r+0x50>
 800af20:	42a3      	cmp	r3, r4
 800af22:	d9fa      	bls.n	800af1a <_free_r+0x46>
 800af24:	6811      	ldr	r1, [r2, #0]
 800af26:	1855      	adds	r5, r2, r1
 800af28:	42a5      	cmp	r5, r4
 800af2a:	d10b      	bne.n	800af44 <_free_r+0x70>
 800af2c:	6824      	ldr	r4, [r4, #0]
 800af2e:	4421      	add	r1, r4
 800af30:	1854      	adds	r4, r2, r1
 800af32:	42a3      	cmp	r3, r4
 800af34:	6011      	str	r1, [r2, #0]
 800af36:	d1e0      	bne.n	800aefa <_free_r+0x26>
 800af38:	681c      	ldr	r4, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	6053      	str	r3, [r2, #4]
 800af3e:	440c      	add	r4, r1
 800af40:	6014      	str	r4, [r2, #0]
 800af42:	e7da      	b.n	800aefa <_free_r+0x26>
 800af44:	d902      	bls.n	800af4c <_free_r+0x78>
 800af46:	230c      	movs	r3, #12
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	e7d6      	b.n	800aefa <_free_r+0x26>
 800af4c:	6825      	ldr	r5, [r4, #0]
 800af4e:	1961      	adds	r1, r4, r5
 800af50:	428b      	cmp	r3, r1
 800af52:	bf04      	itt	eq
 800af54:	6819      	ldreq	r1, [r3, #0]
 800af56:	685b      	ldreq	r3, [r3, #4]
 800af58:	6063      	str	r3, [r4, #4]
 800af5a:	bf04      	itt	eq
 800af5c:	1949      	addeq	r1, r1, r5
 800af5e:	6021      	streq	r1, [r4, #0]
 800af60:	6054      	str	r4, [r2, #4]
 800af62:	e7ca      	b.n	800aefa <_free_r+0x26>
 800af64:	b003      	add	sp, #12
 800af66:	bd30      	pop	{r4, r5, pc}
 800af68:	20000518 	.word	0x20000518

0800af6c <_Balloc>:
 800af6c:	b570      	push	{r4, r5, r6, lr}
 800af6e:	69c6      	ldr	r6, [r0, #28]
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	b976      	cbnz	r6, 800af94 <_Balloc+0x28>
 800af76:	2010      	movs	r0, #16
 800af78:	f7fe f8e2 	bl	8009140 <malloc>
 800af7c:	4602      	mov	r2, r0
 800af7e:	61e0      	str	r0, [r4, #28]
 800af80:	b920      	cbnz	r0, 800af8c <_Balloc+0x20>
 800af82:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <_Balloc+0x78>)
 800af84:	4818      	ldr	r0, [pc, #96]	; (800afe8 <_Balloc+0x7c>)
 800af86:	216b      	movs	r1, #107	; 0x6b
 800af88:	f7fe f8bc 	bl	8009104 <__assert_func>
 800af8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af90:	6006      	str	r6, [r0, #0]
 800af92:	60c6      	str	r6, [r0, #12]
 800af94:	69e6      	ldr	r6, [r4, #28]
 800af96:	68f3      	ldr	r3, [r6, #12]
 800af98:	b183      	cbz	r3, 800afbc <_Balloc+0x50>
 800af9a:	69e3      	ldr	r3, [r4, #28]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afa2:	b9b8      	cbnz	r0, 800afd4 <_Balloc+0x68>
 800afa4:	2101      	movs	r1, #1
 800afa6:	fa01 f605 	lsl.w	r6, r1, r5
 800afaa:	1d72      	adds	r2, r6, #5
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 ff6a 	bl	800be88 <_calloc_r>
 800afb4:	b160      	cbz	r0, 800afd0 <_Balloc+0x64>
 800afb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afba:	e00e      	b.n	800afda <_Balloc+0x6e>
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	2104      	movs	r1, #4
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 ff61 	bl	800be88 <_calloc_r>
 800afc6:	69e3      	ldr	r3, [r4, #28]
 800afc8:	60f0      	str	r0, [r6, #12]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e4      	bne.n	800af9a <_Balloc+0x2e>
 800afd0:	2000      	movs	r0, #0
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	6802      	ldr	r2, [r0, #0]
 800afd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afda:	2300      	movs	r3, #0
 800afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afe0:	e7f7      	b.n	800afd2 <_Balloc+0x66>
 800afe2:	bf00      	nop
 800afe4:	0800df45 	.word	0x0800df45
 800afe8:	0800dfc5 	.word	0x0800dfc5

0800afec <_Bfree>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	69c6      	ldr	r6, [r0, #28]
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b976      	cbnz	r6, 800b014 <_Bfree+0x28>
 800aff6:	2010      	movs	r0, #16
 800aff8:	f7fe f8a2 	bl	8009140 <malloc>
 800affc:	4602      	mov	r2, r0
 800affe:	61e8      	str	r0, [r5, #28]
 800b000:	b920      	cbnz	r0, 800b00c <_Bfree+0x20>
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <_Bfree+0x3c>)
 800b004:	4809      	ldr	r0, [pc, #36]	; (800b02c <_Bfree+0x40>)
 800b006:	218f      	movs	r1, #143	; 0x8f
 800b008:	f7fe f87c 	bl	8009104 <__assert_func>
 800b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b010:	6006      	str	r6, [r0, #0]
 800b012:	60c6      	str	r6, [r0, #12]
 800b014:	b13c      	cbz	r4, 800b026 <_Bfree+0x3a>
 800b016:	69eb      	ldr	r3, [r5, #28]
 800b018:	6862      	ldr	r2, [r4, #4]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b020:	6021      	str	r1, [r4, #0]
 800b022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	0800df45 	.word	0x0800df45
 800b02c:	0800dfc5 	.word	0x0800dfc5

0800b030 <__multadd>:
 800b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b034:	690d      	ldr	r5, [r1, #16]
 800b036:	4607      	mov	r7, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	461e      	mov	r6, r3
 800b03c:	f101 0c14 	add.w	ip, r1, #20
 800b040:	2000      	movs	r0, #0
 800b042:	f8dc 3000 	ldr.w	r3, [ip]
 800b046:	b299      	uxth	r1, r3
 800b048:	fb02 6101 	mla	r1, r2, r1, r6
 800b04c:	0c1e      	lsrs	r6, r3, #16
 800b04e:	0c0b      	lsrs	r3, r1, #16
 800b050:	fb02 3306 	mla	r3, r2, r6, r3
 800b054:	b289      	uxth	r1, r1
 800b056:	3001      	adds	r0, #1
 800b058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b05c:	4285      	cmp	r5, r0
 800b05e:	f84c 1b04 	str.w	r1, [ip], #4
 800b062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b066:	dcec      	bgt.n	800b042 <__multadd+0x12>
 800b068:	b30e      	cbz	r6, 800b0ae <__multadd+0x7e>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc19      	bgt.n	800b0a4 <__multadd+0x74>
 800b070:	6861      	ldr	r1, [r4, #4]
 800b072:	4638      	mov	r0, r7
 800b074:	3101      	adds	r1, #1
 800b076:	f7ff ff79 	bl	800af6c <_Balloc>
 800b07a:	4680      	mov	r8, r0
 800b07c:	b928      	cbnz	r0, 800b08a <__multadd+0x5a>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <__multadd+0x84>)
 800b082:	480d      	ldr	r0, [pc, #52]	; (800b0b8 <__multadd+0x88>)
 800b084:	21ba      	movs	r1, #186	; 0xba
 800b086:	f7fe f83d 	bl	8009104 <__assert_func>
 800b08a:	6922      	ldr	r2, [r4, #16]
 800b08c:	3202      	adds	r2, #2
 800b08e:	f104 010c 	add.w	r1, r4, #12
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	300c      	adds	r0, #12
 800b096:	f7ff f88e 	bl	800a1b6 <memcpy>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ffa5 	bl	800afec <_Bfree>
 800b0a2:	4644      	mov	r4, r8
 800b0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	615e      	str	r6, [r3, #20]
 800b0ac:	6125      	str	r5, [r4, #16]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	0800dfb4 	.word	0x0800dfb4
 800b0b8:	0800dfc5 	.word	0x0800dfc5

0800b0bc <__hi0bits>:
 800b0bc:	0c03      	lsrs	r3, r0, #16
 800b0be:	041b      	lsls	r3, r3, #16
 800b0c0:	b9d3      	cbnz	r3, 800b0f8 <__hi0bits+0x3c>
 800b0c2:	0400      	lsls	r0, r0, #16
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0ca:	bf04      	itt	eq
 800b0cc:	0200      	lsleq	r0, r0, #8
 800b0ce:	3308      	addeq	r3, #8
 800b0d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0d4:	bf04      	itt	eq
 800b0d6:	0100      	lsleq	r0, r0, #4
 800b0d8:	3304      	addeq	r3, #4
 800b0da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0de:	bf04      	itt	eq
 800b0e0:	0080      	lsleq	r0, r0, #2
 800b0e2:	3302      	addeq	r3, #2
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	db05      	blt.n	800b0f4 <__hi0bits+0x38>
 800b0e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0ec:	f103 0301 	add.w	r3, r3, #1
 800b0f0:	bf08      	it	eq
 800b0f2:	2320      	moveq	r3, #32
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4770      	bx	lr
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e7e4      	b.n	800b0c6 <__hi0bits+0xa>

0800b0fc <__lo0bits>:
 800b0fc:	6803      	ldr	r3, [r0, #0]
 800b0fe:	f013 0207 	ands.w	r2, r3, #7
 800b102:	d00c      	beq.n	800b11e <__lo0bits+0x22>
 800b104:	07d9      	lsls	r1, r3, #31
 800b106:	d422      	bmi.n	800b14e <__lo0bits+0x52>
 800b108:	079a      	lsls	r2, r3, #30
 800b10a:	bf49      	itett	mi
 800b10c:	085b      	lsrmi	r3, r3, #1
 800b10e:	089b      	lsrpl	r3, r3, #2
 800b110:	6003      	strmi	r3, [r0, #0]
 800b112:	2201      	movmi	r2, #1
 800b114:	bf5c      	itt	pl
 800b116:	6003      	strpl	r3, [r0, #0]
 800b118:	2202      	movpl	r2, #2
 800b11a:	4610      	mov	r0, r2
 800b11c:	4770      	bx	lr
 800b11e:	b299      	uxth	r1, r3
 800b120:	b909      	cbnz	r1, 800b126 <__lo0bits+0x2a>
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	2210      	movs	r2, #16
 800b126:	b2d9      	uxtb	r1, r3
 800b128:	b909      	cbnz	r1, 800b12e <__lo0bits+0x32>
 800b12a:	3208      	adds	r2, #8
 800b12c:	0a1b      	lsrs	r3, r3, #8
 800b12e:	0719      	lsls	r1, r3, #28
 800b130:	bf04      	itt	eq
 800b132:	091b      	lsreq	r3, r3, #4
 800b134:	3204      	addeq	r2, #4
 800b136:	0799      	lsls	r1, r3, #30
 800b138:	bf04      	itt	eq
 800b13a:	089b      	lsreq	r3, r3, #2
 800b13c:	3202      	addeq	r2, #2
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	d403      	bmi.n	800b14a <__lo0bits+0x4e>
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	f102 0201 	add.w	r2, r2, #1
 800b148:	d003      	beq.n	800b152 <__lo0bits+0x56>
 800b14a:	6003      	str	r3, [r0, #0]
 800b14c:	e7e5      	b.n	800b11a <__lo0bits+0x1e>
 800b14e:	2200      	movs	r2, #0
 800b150:	e7e3      	b.n	800b11a <__lo0bits+0x1e>
 800b152:	2220      	movs	r2, #32
 800b154:	e7e1      	b.n	800b11a <__lo0bits+0x1e>
	...

0800b158 <__i2b>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	2101      	movs	r1, #1
 800b15e:	f7ff ff05 	bl	800af6c <_Balloc>
 800b162:	4602      	mov	r2, r0
 800b164:	b928      	cbnz	r0, 800b172 <__i2b+0x1a>
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <__i2b+0x24>)
 800b168:	4805      	ldr	r0, [pc, #20]	; (800b180 <__i2b+0x28>)
 800b16a:	f240 1145 	movw	r1, #325	; 0x145
 800b16e:	f7fd ffc9 	bl	8009104 <__assert_func>
 800b172:	2301      	movs	r3, #1
 800b174:	6144      	str	r4, [r0, #20]
 800b176:	6103      	str	r3, [r0, #16]
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	bf00      	nop
 800b17c:	0800dfb4 	.word	0x0800dfb4
 800b180:	0800dfc5 	.word	0x0800dfc5

0800b184 <__multiply>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	4691      	mov	r9, r2
 800b18a:	690a      	ldr	r2, [r1, #16]
 800b18c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	bfb8      	it	lt
 800b194:	460b      	movlt	r3, r1
 800b196:	460c      	mov	r4, r1
 800b198:	bfbc      	itt	lt
 800b19a:	464c      	movlt	r4, r9
 800b19c:	4699      	movlt	r9, r3
 800b19e:	6927      	ldr	r7, [r4, #16]
 800b1a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	6861      	ldr	r1, [r4, #4]
 800b1a8:	eb07 060a 	add.w	r6, r7, sl
 800b1ac:	42b3      	cmp	r3, r6
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	bfb8      	it	lt
 800b1b2:	3101      	addlt	r1, #1
 800b1b4:	f7ff feda 	bl	800af6c <_Balloc>
 800b1b8:	b930      	cbnz	r0, 800b1c8 <__multiply+0x44>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	4b44      	ldr	r3, [pc, #272]	; (800b2d0 <__multiply+0x14c>)
 800b1be:	4845      	ldr	r0, [pc, #276]	; (800b2d4 <__multiply+0x150>)
 800b1c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b1c4:	f7fd ff9e 	bl	8009104 <__assert_func>
 800b1c8:	f100 0514 	add.w	r5, r0, #20
 800b1cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4543      	cmp	r3, r8
 800b1d6:	d321      	bcc.n	800b21c <__multiply+0x98>
 800b1d8:	f104 0314 	add.w	r3, r4, #20
 800b1dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1e0:	f109 0314 	add.w	r3, r9, #20
 800b1e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1e8:	9202      	str	r2, [sp, #8]
 800b1ea:	1b3a      	subs	r2, r7, r4
 800b1ec:	3a15      	subs	r2, #21
 800b1ee:	f022 0203 	bic.w	r2, r2, #3
 800b1f2:	3204      	adds	r2, #4
 800b1f4:	f104 0115 	add.w	r1, r4, #21
 800b1f8:	428f      	cmp	r7, r1
 800b1fa:	bf38      	it	cc
 800b1fc:	2204      	movcc	r2, #4
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	9a02      	ldr	r2, [sp, #8]
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	429a      	cmp	r2, r3
 800b206:	d80c      	bhi.n	800b222 <__multiply+0x9e>
 800b208:	2e00      	cmp	r6, #0
 800b20a:	dd03      	ble.n	800b214 <__multiply+0x90>
 800b20c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b210:	2b00      	cmp	r3, #0
 800b212:	d05b      	beq.n	800b2cc <__multiply+0x148>
 800b214:	6106      	str	r6, [r0, #16]
 800b216:	b005      	add	sp, #20
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	f843 2b04 	str.w	r2, [r3], #4
 800b220:	e7d8      	b.n	800b1d4 <__multiply+0x50>
 800b222:	f8b3 a000 	ldrh.w	sl, [r3]
 800b226:	f1ba 0f00 	cmp.w	sl, #0
 800b22a:	d024      	beq.n	800b276 <__multiply+0xf2>
 800b22c:	f104 0e14 	add.w	lr, r4, #20
 800b230:	46a9      	mov	r9, r5
 800b232:	f04f 0c00 	mov.w	ip, #0
 800b236:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b23a:	f8d9 1000 	ldr.w	r1, [r9]
 800b23e:	fa1f fb82 	uxth.w	fp, r2
 800b242:	b289      	uxth	r1, r1
 800b244:	fb0a 110b 	mla	r1, sl, fp, r1
 800b248:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b24c:	f8d9 2000 	ldr.w	r2, [r9]
 800b250:	4461      	add	r1, ip
 800b252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b256:	fb0a c20b 	mla	r2, sl, fp, ip
 800b25a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b25e:	b289      	uxth	r1, r1
 800b260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b264:	4577      	cmp	r7, lr
 800b266:	f849 1b04 	str.w	r1, [r9], #4
 800b26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b26e:	d8e2      	bhi.n	800b236 <__multiply+0xb2>
 800b270:	9a01      	ldr	r2, [sp, #4]
 800b272:	f845 c002 	str.w	ip, [r5, r2]
 800b276:	9a03      	ldr	r2, [sp, #12]
 800b278:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b27c:	3304      	adds	r3, #4
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	d021      	beq.n	800b2c8 <__multiply+0x144>
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	f104 0c14 	add.w	ip, r4, #20
 800b28a:	46ae      	mov	lr, r5
 800b28c:	f04f 0a00 	mov.w	sl, #0
 800b290:	f8bc b000 	ldrh.w	fp, [ip]
 800b294:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b298:	fb09 220b 	mla	r2, r9, fp, r2
 800b29c:	4452      	add	r2, sl
 800b29e:	b289      	uxth	r1, r1
 800b2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b2b4:	fb09 110a 	mla	r1, r9, sl, r1
 800b2b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b2bc:	4567      	cmp	r7, ip
 800b2be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2c2:	d8e5      	bhi.n	800b290 <__multiply+0x10c>
 800b2c4:	9a01      	ldr	r2, [sp, #4]
 800b2c6:	50a9      	str	r1, [r5, r2]
 800b2c8:	3504      	adds	r5, #4
 800b2ca:	e799      	b.n	800b200 <__multiply+0x7c>
 800b2cc:	3e01      	subs	r6, #1
 800b2ce:	e79b      	b.n	800b208 <__multiply+0x84>
 800b2d0:	0800dfb4 	.word	0x0800dfb4
 800b2d4:	0800dfc5 	.word	0x0800dfc5

0800b2d8 <__pow5mult>:
 800b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2dc:	4615      	mov	r5, r2
 800b2de:	f012 0203 	ands.w	r2, r2, #3
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	460f      	mov	r7, r1
 800b2e6:	d007      	beq.n	800b2f8 <__pow5mult+0x20>
 800b2e8:	4c25      	ldr	r4, [pc, #148]	; (800b380 <__pow5mult+0xa8>)
 800b2ea:	3a01      	subs	r2, #1
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2f2:	f7ff fe9d 	bl	800b030 <__multadd>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	10ad      	asrs	r5, r5, #2
 800b2fa:	d03d      	beq.n	800b378 <__pow5mult+0xa0>
 800b2fc:	69f4      	ldr	r4, [r6, #28]
 800b2fe:	b97c      	cbnz	r4, 800b320 <__pow5mult+0x48>
 800b300:	2010      	movs	r0, #16
 800b302:	f7fd ff1d 	bl	8009140 <malloc>
 800b306:	4602      	mov	r2, r0
 800b308:	61f0      	str	r0, [r6, #28]
 800b30a:	b928      	cbnz	r0, 800b318 <__pow5mult+0x40>
 800b30c:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <__pow5mult+0xac>)
 800b30e:	481e      	ldr	r0, [pc, #120]	; (800b388 <__pow5mult+0xb0>)
 800b310:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b314:	f7fd fef6 	bl	8009104 <__assert_func>
 800b318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	60c4      	str	r4, [r0, #12]
 800b320:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b328:	b94c      	cbnz	r4, 800b33e <__pow5mult+0x66>
 800b32a:	f240 2171 	movw	r1, #625	; 0x271
 800b32e:	4630      	mov	r0, r6
 800b330:	f7ff ff12 	bl	800b158 <__i2b>
 800b334:	2300      	movs	r3, #0
 800b336:	f8c8 0008 	str.w	r0, [r8, #8]
 800b33a:	4604      	mov	r4, r0
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	07eb      	lsls	r3, r5, #31
 800b344:	d50a      	bpl.n	800b35c <__pow5mult+0x84>
 800b346:	4639      	mov	r1, r7
 800b348:	4622      	mov	r2, r4
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff1a 	bl	800b184 <__multiply>
 800b350:	4639      	mov	r1, r7
 800b352:	4680      	mov	r8, r0
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff fe49 	bl	800afec <_Bfree>
 800b35a:	4647      	mov	r7, r8
 800b35c:	106d      	asrs	r5, r5, #1
 800b35e:	d00b      	beq.n	800b378 <__pow5mult+0xa0>
 800b360:	6820      	ldr	r0, [r4, #0]
 800b362:	b938      	cbnz	r0, 800b374 <__pow5mult+0x9c>
 800b364:	4622      	mov	r2, r4
 800b366:	4621      	mov	r1, r4
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff ff0b 	bl	800b184 <__multiply>
 800b36e:	6020      	str	r0, [r4, #0]
 800b370:	f8c0 9000 	str.w	r9, [r0]
 800b374:	4604      	mov	r4, r0
 800b376:	e7e4      	b.n	800b342 <__pow5mult+0x6a>
 800b378:	4638      	mov	r0, r7
 800b37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37e:	bf00      	nop
 800b380:	0800e110 	.word	0x0800e110
 800b384:	0800df45 	.word	0x0800df45
 800b388:	0800dfc5 	.word	0x0800dfc5

0800b38c <__lshift>:
 800b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	460c      	mov	r4, r1
 800b392:	6849      	ldr	r1, [r1, #4]
 800b394:	6923      	ldr	r3, [r4, #16]
 800b396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	4607      	mov	r7, r0
 800b39e:	4691      	mov	r9, r2
 800b3a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3a4:	f108 0601 	add.w	r6, r8, #1
 800b3a8:	42b3      	cmp	r3, r6
 800b3aa:	db0b      	blt.n	800b3c4 <__lshift+0x38>
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff fddd 	bl	800af6c <_Balloc>
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	b948      	cbnz	r0, 800b3ca <__lshift+0x3e>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	4b28      	ldr	r3, [pc, #160]	; (800b45c <__lshift+0xd0>)
 800b3ba:	4829      	ldr	r0, [pc, #164]	; (800b460 <__lshift+0xd4>)
 800b3bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b3c0:	f7fd fea0 	bl	8009104 <__assert_func>
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	e7ee      	b.n	800b3a8 <__lshift+0x1c>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f100 0114 	add.w	r1, r0, #20
 800b3d0:	f100 0210 	add.w	r2, r0, #16
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	4553      	cmp	r3, sl
 800b3d8:	db33      	blt.n	800b442 <__lshift+0xb6>
 800b3da:	6920      	ldr	r0, [r4, #16]
 800b3dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3e0:	f104 0314 	add.w	r3, r4, #20
 800b3e4:	f019 091f 	ands.w	r9, r9, #31
 800b3e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3f0:	d02b      	beq.n	800b44a <__lshift+0xbe>
 800b3f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3f6:	468a      	mov	sl, r1
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b400:	4310      	orrs	r0, r2
 800b402:	f84a 0b04 	str.w	r0, [sl], #4
 800b406:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40a:	459c      	cmp	ip, r3
 800b40c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b410:	d8f3      	bhi.n	800b3fa <__lshift+0x6e>
 800b412:	ebac 0304 	sub.w	r3, ip, r4
 800b416:	3b15      	subs	r3, #21
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	3304      	adds	r3, #4
 800b41e:	f104 0015 	add.w	r0, r4, #21
 800b422:	4584      	cmp	ip, r0
 800b424:	bf38      	it	cc
 800b426:	2304      	movcc	r3, #4
 800b428:	50ca      	str	r2, [r1, r3]
 800b42a:	b10a      	cbz	r2, 800b430 <__lshift+0xa4>
 800b42c:	f108 0602 	add.w	r6, r8, #2
 800b430:	3e01      	subs	r6, #1
 800b432:	4638      	mov	r0, r7
 800b434:	612e      	str	r6, [r5, #16]
 800b436:	4621      	mov	r1, r4
 800b438:	f7ff fdd8 	bl	800afec <_Bfree>
 800b43c:	4628      	mov	r0, r5
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	f842 0f04 	str.w	r0, [r2, #4]!
 800b446:	3301      	adds	r3, #1
 800b448:	e7c5      	b.n	800b3d6 <__lshift+0x4a>
 800b44a:	3904      	subs	r1, #4
 800b44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b450:	f841 2f04 	str.w	r2, [r1, #4]!
 800b454:	459c      	cmp	ip, r3
 800b456:	d8f9      	bhi.n	800b44c <__lshift+0xc0>
 800b458:	e7ea      	b.n	800b430 <__lshift+0xa4>
 800b45a:	bf00      	nop
 800b45c:	0800dfb4 	.word	0x0800dfb4
 800b460:	0800dfc5 	.word	0x0800dfc5

0800b464 <__mcmp>:
 800b464:	b530      	push	{r4, r5, lr}
 800b466:	6902      	ldr	r2, [r0, #16]
 800b468:	690c      	ldr	r4, [r1, #16]
 800b46a:	1b12      	subs	r2, r2, r4
 800b46c:	d10e      	bne.n	800b48c <__mcmp+0x28>
 800b46e:	f100 0314 	add.w	r3, r0, #20
 800b472:	3114      	adds	r1, #20
 800b474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b47c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b484:	42a5      	cmp	r5, r4
 800b486:	d003      	beq.n	800b490 <__mcmp+0x2c>
 800b488:	d305      	bcc.n	800b496 <__mcmp+0x32>
 800b48a:	2201      	movs	r2, #1
 800b48c:	4610      	mov	r0, r2
 800b48e:	bd30      	pop	{r4, r5, pc}
 800b490:	4283      	cmp	r3, r0
 800b492:	d3f3      	bcc.n	800b47c <__mcmp+0x18>
 800b494:	e7fa      	b.n	800b48c <__mcmp+0x28>
 800b496:	f04f 32ff 	mov.w	r2, #4294967295
 800b49a:	e7f7      	b.n	800b48c <__mcmp+0x28>

0800b49c <__mdiff>:
 800b49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4690      	mov	r8, r2
 800b4aa:	f7ff ffdb 	bl	800b464 <__mcmp>
 800b4ae:	1e05      	subs	r5, r0, #0
 800b4b0:	d110      	bne.n	800b4d4 <__mdiff+0x38>
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff fd59 	bl	800af6c <_Balloc>
 800b4ba:	b930      	cbnz	r0, 800b4ca <__mdiff+0x2e>
 800b4bc:	4b3a      	ldr	r3, [pc, #232]	; (800b5a8 <__mdiff+0x10c>)
 800b4be:	4602      	mov	r2, r0
 800b4c0:	f240 2137 	movw	r1, #567	; 0x237
 800b4c4:	4839      	ldr	r0, [pc, #228]	; (800b5ac <__mdiff+0x110>)
 800b4c6:	f7fd fe1d 	bl	8009104 <__assert_func>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d4:	bfa4      	itt	ge
 800b4d6:	4643      	movge	r3, r8
 800b4d8:	46a0      	movge	r8, r4
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4e0:	bfa6      	itte	ge
 800b4e2:	461c      	movge	r4, r3
 800b4e4:	2500      	movge	r5, #0
 800b4e6:	2501      	movlt	r5, #1
 800b4e8:	f7ff fd40 	bl	800af6c <_Balloc>
 800b4ec:	b920      	cbnz	r0, 800b4f8 <__mdiff+0x5c>
 800b4ee:	4b2e      	ldr	r3, [pc, #184]	; (800b5a8 <__mdiff+0x10c>)
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	f240 2145 	movw	r1, #581	; 0x245
 800b4f6:	e7e5      	b.n	800b4c4 <__mdiff+0x28>
 800b4f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4fc:	6926      	ldr	r6, [r4, #16]
 800b4fe:	60c5      	str	r5, [r0, #12]
 800b500:	f104 0914 	add.w	r9, r4, #20
 800b504:	f108 0514 	add.w	r5, r8, #20
 800b508:	f100 0e14 	add.w	lr, r0, #20
 800b50c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b514:	f108 0210 	add.w	r2, r8, #16
 800b518:	46f2      	mov	sl, lr
 800b51a:	2100      	movs	r1, #0
 800b51c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b524:	fa11 f88b 	uxtah	r8, r1, fp
 800b528:	b299      	uxth	r1, r3
 800b52a:	0c1b      	lsrs	r3, r3, #16
 800b52c:	eba8 0801 	sub.w	r8, r8, r1
 800b530:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b534:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b538:	fa1f f888 	uxth.w	r8, r8
 800b53c:	1419      	asrs	r1, r3, #16
 800b53e:	454e      	cmp	r6, r9
 800b540:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b544:	f84a 3b04 	str.w	r3, [sl], #4
 800b548:	d8e8      	bhi.n	800b51c <__mdiff+0x80>
 800b54a:	1b33      	subs	r3, r6, r4
 800b54c:	3b15      	subs	r3, #21
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	3304      	adds	r3, #4
 800b554:	3415      	adds	r4, #21
 800b556:	42a6      	cmp	r6, r4
 800b558:	bf38      	it	cc
 800b55a:	2304      	movcc	r3, #4
 800b55c:	441d      	add	r5, r3
 800b55e:	4473      	add	r3, lr
 800b560:	469e      	mov	lr, r3
 800b562:	462e      	mov	r6, r5
 800b564:	4566      	cmp	r6, ip
 800b566:	d30e      	bcc.n	800b586 <__mdiff+0xea>
 800b568:	f10c 0203 	add.w	r2, ip, #3
 800b56c:	1b52      	subs	r2, r2, r5
 800b56e:	f022 0203 	bic.w	r2, r2, #3
 800b572:	3d03      	subs	r5, #3
 800b574:	45ac      	cmp	ip, r5
 800b576:	bf38      	it	cc
 800b578:	2200      	movcc	r2, #0
 800b57a:	4413      	add	r3, r2
 800b57c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b580:	b17a      	cbz	r2, 800b5a2 <__mdiff+0x106>
 800b582:	6107      	str	r7, [r0, #16]
 800b584:	e7a4      	b.n	800b4d0 <__mdiff+0x34>
 800b586:	f856 8b04 	ldr.w	r8, [r6], #4
 800b58a:	fa11 f288 	uxtah	r2, r1, r8
 800b58e:	1414      	asrs	r4, r2, #16
 800b590:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b594:	b292      	uxth	r2, r2
 800b596:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b59a:	f84e 2b04 	str.w	r2, [lr], #4
 800b59e:	1421      	asrs	r1, r4, #16
 800b5a0:	e7e0      	b.n	800b564 <__mdiff+0xc8>
 800b5a2:	3f01      	subs	r7, #1
 800b5a4:	e7ea      	b.n	800b57c <__mdiff+0xe0>
 800b5a6:	bf00      	nop
 800b5a8:	0800dfb4 	.word	0x0800dfb4
 800b5ac:	0800dfc5 	.word	0x0800dfc5

0800b5b0 <__d2b>:
 800b5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	ec59 8b10 	vmov	r8, r9, d0
 800b5bc:	4616      	mov	r6, r2
 800b5be:	f7ff fcd5 	bl	800af6c <_Balloc>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b930      	cbnz	r0, 800b5d4 <__d2b+0x24>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	4b24      	ldr	r3, [pc, #144]	; (800b65c <__d2b+0xac>)
 800b5ca:	4825      	ldr	r0, [pc, #148]	; (800b660 <__d2b+0xb0>)
 800b5cc:	f240 310f 	movw	r1, #783	; 0x30f
 800b5d0:	f7fd fd98 	bl	8009104 <__assert_func>
 800b5d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5dc:	bb2d      	cbnz	r5, 800b62a <__d2b+0x7a>
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800b5e4:	d026      	beq.n	800b634 <__d2b+0x84>
 800b5e6:	4668      	mov	r0, sp
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	f7ff fd87 	bl	800b0fc <__lo0bits>
 800b5ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5f2:	b1e8      	cbz	r0, 800b630 <__d2b+0x80>
 800b5f4:	f1c0 0320 	rsb	r3, r0, #32
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	40c2      	lsrs	r2, r0
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	9b01      	ldr	r3, [sp, #4]
 800b606:	61a3      	str	r3, [r4, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	bf14      	ite	ne
 800b60c:	2202      	movne	r2, #2
 800b60e:	2201      	moveq	r2, #1
 800b610:	6122      	str	r2, [r4, #16]
 800b612:	b1bd      	cbz	r5, 800b644 <__d2b+0x94>
 800b614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b618:	4405      	add	r5, r0
 800b61a:	603d      	str	r5, [r7, #0]
 800b61c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b620:	6030      	str	r0, [r6, #0]
 800b622:	4620      	mov	r0, r4
 800b624:	b003      	add	sp, #12
 800b626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b62e:	e7d6      	b.n	800b5de <__d2b+0x2e>
 800b630:	6161      	str	r1, [r4, #20]
 800b632:	e7e7      	b.n	800b604 <__d2b+0x54>
 800b634:	a801      	add	r0, sp, #4
 800b636:	f7ff fd61 	bl	800b0fc <__lo0bits>
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	6163      	str	r3, [r4, #20]
 800b63e:	3020      	adds	r0, #32
 800b640:	2201      	movs	r2, #1
 800b642:	e7e5      	b.n	800b610 <__d2b+0x60>
 800b644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b64c:	6038      	str	r0, [r7, #0]
 800b64e:	6918      	ldr	r0, [r3, #16]
 800b650:	f7ff fd34 	bl	800b0bc <__hi0bits>
 800b654:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b658:	e7e2      	b.n	800b620 <__d2b+0x70>
 800b65a:	bf00      	nop
 800b65c:	0800dfb4 	.word	0x0800dfb4
 800b660:	0800dfc5 	.word	0x0800dfc5

0800b664 <__ssputs_r>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	688e      	ldr	r6, [r1, #8]
 800b66a:	461f      	mov	r7, r3
 800b66c:	42be      	cmp	r6, r7
 800b66e:	680b      	ldr	r3, [r1, #0]
 800b670:	4682      	mov	sl, r0
 800b672:	460c      	mov	r4, r1
 800b674:	4690      	mov	r8, r2
 800b676:	d82c      	bhi.n	800b6d2 <__ssputs_r+0x6e>
 800b678:	898a      	ldrh	r2, [r1, #12]
 800b67a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b67e:	d026      	beq.n	800b6ce <__ssputs_r+0x6a>
 800b680:	6965      	ldr	r5, [r4, #20]
 800b682:	6909      	ldr	r1, [r1, #16]
 800b684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b688:	eba3 0901 	sub.w	r9, r3, r1
 800b68c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b690:	1c7b      	adds	r3, r7, #1
 800b692:	444b      	add	r3, r9
 800b694:	106d      	asrs	r5, r5, #1
 800b696:	429d      	cmp	r5, r3
 800b698:	bf38      	it	cc
 800b69a:	461d      	movcc	r5, r3
 800b69c:	0553      	lsls	r3, r2, #21
 800b69e:	d527      	bpl.n	800b6f0 <__ssputs_r+0x8c>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7fd fd7d 	bl	80091a0 <_malloc_r>
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	b360      	cbz	r0, 800b704 <__ssputs_r+0xa0>
 800b6aa:	6921      	ldr	r1, [r4, #16]
 800b6ac:	464a      	mov	r2, r9
 800b6ae:	f7fe fd82 	bl	800a1b6 <memcpy>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	6126      	str	r6, [r4, #16]
 800b6c0:	6165      	str	r5, [r4, #20]
 800b6c2:	444e      	add	r6, r9
 800b6c4:	eba5 0509 	sub.w	r5, r5, r9
 800b6c8:	6026      	str	r6, [r4, #0]
 800b6ca:	60a5      	str	r5, [r4, #8]
 800b6cc:	463e      	mov	r6, r7
 800b6ce:	42be      	cmp	r6, r7
 800b6d0:	d900      	bls.n	800b6d4 <__ssputs_r+0x70>
 800b6d2:	463e      	mov	r6, r7
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	4641      	mov	r1, r8
 800b6da:	f7fe fca1 	bl	800a020 <memmove>
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	1b9b      	subs	r3, r3, r6
 800b6e2:	60a3      	str	r3, [r4, #8]
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	4433      	add	r3, r6
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	f000 fbf1 	bl	800bed8 <_realloc_r>
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1e0      	bne.n	800b6be <__ssputs_r+0x5a>
 800b6fc:	6921      	ldr	r1, [r4, #16]
 800b6fe:	4650      	mov	r0, sl
 800b700:	f7ff fbe8 	bl	800aed4 <_free_r>
 800b704:	230c      	movs	r3, #12
 800b706:	f8ca 3000 	str.w	r3, [sl]
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	e7e9      	b.n	800b6ec <__ssputs_r+0x88>

0800b718 <_svfiprintf_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4698      	mov	r8, r3
 800b71e:	898b      	ldrh	r3, [r1, #12]
 800b720:	061b      	lsls	r3, r3, #24
 800b722:	b09d      	sub	sp, #116	; 0x74
 800b724:	4607      	mov	r7, r0
 800b726:	460d      	mov	r5, r1
 800b728:	4614      	mov	r4, r2
 800b72a:	d50e      	bpl.n	800b74a <_svfiprintf_r+0x32>
 800b72c:	690b      	ldr	r3, [r1, #16]
 800b72e:	b963      	cbnz	r3, 800b74a <_svfiprintf_r+0x32>
 800b730:	2140      	movs	r1, #64	; 0x40
 800b732:	f7fd fd35 	bl	80091a0 <_malloc_r>
 800b736:	6028      	str	r0, [r5, #0]
 800b738:	6128      	str	r0, [r5, #16]
 800b73a:	b920      	cbnz	r0, 800b746 <_svfiprintf_r+0x2e>
 800b73c:	230c      	movs	r3, #12
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	e0d0      	b.n	800b8e8 <_svfiprintf_r+0x1d0>
 800b746:	2340      	movs	r3, #64	; 0x40
 800b748:	616b      	str	r3, [r5, #20]
 800b74a:	2300      	movs	r3, #0
 800b74c:	9309      	str	r3, [sp, #36]	; 0x24
 800b74e:	2320      	movs	r3, #32
 800b750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b754:	f8cd 800c 	str.w	r8, [sp, #12]
 800b758:	2330      	movs	r3, #48	; 0x30
 800b75a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b900 <_svfiprintf_r+0x1e8>
 800b75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b762:	f04f 0901 	mov.w	r9, #1
 800b766:	4623      	mov	r3, r4
 800b768:	469a      	mov	sl, r3
 800b76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76e:	b10a      	cbz	r2, 800b774 <_svfiprintf_r+0x5c>
 800b770:	2a25      	cmp	r2, #37	; 0x25
 800b772:	d1f9      	bne.n	800b768 <_svfiprintf_r+0x50>
 800b774:	ebba 0b04 	subs.w	fp, sl, r4
 800b778:	d00b      	beq.n	800b792 <_svfiprintf_r+0x7a>
 800b77a:	465b      	mov	r3, fp
 800b77c:	4622      	mov	r2, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	4638      	mov	r0, r7
 800b782:	f7ff ff6f 	bl	800b664 <__ssputs_r>
 800b786:	3001      	adds	r0, #1
 800b788:	f000 80a9 	beq.w	800b8de <_svfiprintf_r+0x1c6>
 800b78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b78e:	445a      	add	r2, fp
 800b790:	9209      	str	r2, [sp, #36]	; 0x24
 800b792:	f89a 3000 	ldrb.w	r3, [sl]
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 80a1 	beq.w	800b8de <_svfiprintf_r+0x1c6>
 800b79c:	2300      	movs	r3, #0
 800b79e:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a6:	f10a 0a01 	add.w	sl, sl, #1
 800b7aa:	9304      	str	r3, [sp, #16]
 800b7ac:	9307      	str	r3, [sp, #28]
 800b7ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7b4:	4654      	mov	r4, sl
 800b7b6:	2205      	movs	r2, #5
 800b7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7bc:	4850      	ldr	r0, [pc, #320]	; (800b900 <_svfiprintf_r+0x1e8>)
 800b7be:	f7f4 fd27 	bl	8000210 <memchr>
 800b7c2:	9a04      	ldr	r2, [sp, #16]
 800b7c4:	b9d8      	cbnz	r0, 800b7fe <_svfiprintf_r+0xe6>
 800b7c6:	06d0      	lsls	r0, r2, #27
 800b7c8:	bf44      	itt	mi
 800b7ca:	2320      	movmi	r3, #32
 800b7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d0:	0711      	lsls	r1, r2, #28
 800b7d2:	bf44      	itt	mi
 800b7d4:	232b      	movmi	r3, #43	; 0x2b
 800b7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7da:	f89a 3000 	ldrb.w	r3, [sl]
 800b7de:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e0:	d015      	beq.n	800b80e <_svfiprintf_r+0xf6>
 800b7e2:	9a07      	ldr	r2, [sp, #28]
 800b7e4:	4654      	mov	r4, sl
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f04f 0c0a 	mov.w	ip, #10
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f2:	3b30      	subs	r3, #48	; 0x30
 800b7f4:	2b09      	cmp	r3, #9
 800b7f6:	d94d      	bls.n	800b894 <_svfiprintf_r+0x17c>
 800b7f8:	b1b0      	cbz	r0, 800b828 <_svfiprintf_r+0x110>
 800b7fa:	9207      	str	r2, [sp, #28]
 800b7fc:	e014      	b.n	800b828 <_svfiprintf_r+0x110>
 800b7fe:	eba0 0308 	sub.w	r3, r0, r8
 800b802:	fa09 f303 	lsl.w	r3, r9, r3
 800b806:	4313      	orrs	r3, r2
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	46a2      	mov	sl, r4
 800b80c:	e7d2      	b.n	800b7b4 <_svfiprintf_r+0x9c>
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	1d19      	adds	r1, r3, #4
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	9103      	str	r1, [sp, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfbb      	ittet	lt
 800b81a:	425b      	neglt	r3, r3
 800b81c:	f042 0202 	orrlt.w	r2, r2, #2
 800b820:	9307      	strge	r3, [sp, #28]
 800b822:	9307      	strlt	r3, [sp, #28]
 800b824:	bfb8      	it	lt
 800b826:	9204      	strlt	r2, [sp, #16]
 800b828:	7823      	ldrb	r3, [r4, #0]
 800b82a:	2b2e      	cmp	r3, #46	; 0x2e
 800b82c:	d10c      	bne.n	800b848 <_svfiprintf_r+0x130>
 800b82e:	7863      	ldrb	r3, [r4, #1]
 800b830:	2b2a      	cmp	r3, #42	; 0x2a
 800b832:	d134      	bne.n	800b89e <_svfiprintf_r+0x186>
 800b834:	9b03      	ldr	r3, [sp, #12]
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	9203      	str	r2, [sp, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	bfb8      	it	lt
 800b840:	f04f 33ff 	movlt.w	r3, #4294967295
 800b844:	3402      	adds	r4, #2
 800b846:	9305      	str	r3, [sp, #20]
 800b848:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b910 <_svfiprintf_r+0x1f8>
 800b84c:	7821      	ldrb	r1, [r4, #0]
 800b84e:	2203      	movs	r2, #3
 800b850:	4650      	mov	r0, sl
 800b852:	f7f4 fcdd 	bl	8000210 <memchr>
 800b856:	b138      	cbz	r0, 800b868 <_svfiprintf_r+0x150>
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	eba0 000a 	sub.w	r0, r0, sl
 800b85e:	2240      	movs	r2, #64	; 0x40
 800b860:	4082      	lsls	r2, r0
 800b862:	4313      	orrs	r3, r2
 800b864:	3401      	adds	r4, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86c:	4825      	ldr	r0, [pc, #148]	; (800b904 <_svfiprintf_r+0x1ec>)
 800b86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b872:	2206      	movs	r2, #6
 800b874:	f7f4 fccc 	bl	8000210 <memchr>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d038      	beq.n	800b8ee <_svfiprintf_r+0x1d6>
 800b87c:	4b22      	ldr	r3, [pc, #136]	; (800b908 <_svfiprintf_r+0x1f0>)
 800b87e:	bb1b      	cbnz	r3, 800b8c8 <_svfiprintf_r+0x1b0>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	3307      	adds	r3, #7
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	3308      	adds	r3, #8
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88e:	4433      	add	r3, r6
 800b890:	9309      	str	r3, [sp, #36]	; 0x24
 800b892:	e768      	b.n	800b766 <_svfiprintf_r+0x4e>
 800b894:	fb0c 3202 	mla	r2, ip, r2, r3
 800b898:	460c      	mov	r4, r1
 800b89a:	2001      	movs	r0, #1
 800b89c:	e7a6      	b.n	800b7ec <_svfiprintf_r+0xd4>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	3401      	adds	r4, #1
 800b8a2:	9305      	str	r3, [sp, #20]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f04f 0c0a 	mov.w	ip, #10
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b0:	3a30      	subs	r2, #48	; 0x30
 800b8b2:	2a09      	cmp	r2, #9
 800b8b4:	d903      	bls.n	800b8be <_svfiprintf_r+0x1a6>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0c6      	beq.n	800b848 <_svfiprintf_r+0x130>
 800b8ba:	9105      	str	r1, [sp, #20]
 800b8bc:	e7c4      	b.n	800b848 <_svfiprintf_r+0x130>
 800b8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e7f0      	b.n	800b8aa <_svfiprintf_r+0x192>
 800b8c8:	ab03      	add	r3, sp, #12
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <_svfiprintf_r+0x1f4>)
 800b8d0:	a904      	add	r1, sp, #16
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f7fd fd90 	bl	80093f8 <_printf_float>
 800b8d8:	1c42      	adds	r2, r0, #1
 800b8da:	4606      	mov	r6, r0
 800b8dc:	d1d6      	bne.n	800b88c <_svfiprintf_r+0x174>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	065b      	lsls	r3, r3, #25
 800b8e2:	f53f af2d 	bmi.w	800b740 <_svfiprintf_r+0x28>
 800b8e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8e8:	b01d      	add	sp, #116	; 0x74
 800b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <_svfiprintf_r+0x1f4>)
 800b8f6:	a904      	add	r1, sp, #16
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7fe f821 	bl	8009940 <_printf_i>
 800b8fe:	e7eb      	b.n	800b8d8 <_svfiprintf_r+0x1c0>
 800b900:	0800e11c 	.word	0x0800e11c
 800b904:	0800e126 	.word	0x0800e126
 800b908:	080093f9 	.word	0x080093f9
 800b90c:	0800b665 	.word	0x0800b665
 800b910:	0800e122 	.word	0x0800e122

0800b914 <__sfputc_r>:
 800b914:	6893      	ldr	r3, [r2, #8]
 800b916:	3b01      	subs	r3, #1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	b410      	push	{r4}
 800b91c:	6093      	str	r3, [r2, #8]
 800b91e:	da08      	bge.n	800b932 <__sfputc_r+0x1e>
 800b920:	6994      	ldr	r4, [r2, #24]
 800b922:	42a3      	cmp	r3, r4
 800b924:	db01      	blt.n	800b92a <__sfputc_r+0x16>
 800b926:	290a      	cmp	r1, #10
 800b928:	d103      	bne.n	800b932 <__sfputc_r+0x1e>
 800b92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92e:	f7fe bae2 	b.w	8009ef6 <__swbuf_r>
 800b932:	6813      	ldr	r3, [r2, #0]
 800b934:	1c58      	adds	r0, r3, #1
 800b936:	6010      	str	r0, [r2, #0]
 800b938:	7019      	strb	r1, [r3, #0]
 800b93a:	4608      	mov	r0, r1
 800b93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <__sfputs_r>:
 800b942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	4614      	mov	r4, r2
 800b94a:	18d5      	adds	r5, r2, r3
 800b94c:	42ac      	cmp	r4, r5
 800b94e:	d101      	bne.n	800b954 <__sfputs_r+0x12>
 800b950:	2000      	movs	r0, #0
 800b952:	e007      	b.n	800b964 <__sfputs_r+0x22>
 800b954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b958:	463a      	mov	r2, r7
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff ffda 	bl	800b914 <__sfputc_r>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d1f3      	bne.n	800b94c <__sfputs_r+0xa>
 800b964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b968 <_vfiprintf_r>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	460d      	mov	r5, r1
 800b96e:	b09d      	sub	sp, #116	; 0x74
 800b970:	4614      	mov	r4, r2
 800b972:	4698      	mov	r8, r3
 800b974:	4606      	mov	r6, r0
 800b976:	b118      	cbz	r0, 800b980 <_vfiprintf_r+0x18>
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b90b      	cbnz	r3, 800b980 <_vfiprintf_r+0x18>
 800b97c:	f7fe f98e 	bl	8009c9c <__sinit>
 800b980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b982:	07d9      	lsls	r1, r3, #31
 800b984:	d405      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	059a      	lsls	r2, r3, #22
 800b98a:	d402      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98e:	f7fe fc10 	bl	800a1b2 <__retarget_lock_acquire_recursive>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	071b      	lsls	r3, r3, #28
 800b996:	d501      	bpl.n	800b99c <_vfiprintf_r+0x34>
 800b998:	692b      	ldr	r3, [r5, #16]
 800b99a:	b99b      	cbnz	r3, 800b9c4 <_vfiprintf_r+0x5c>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7fe fae6 	bl	8009f70 <__swsetup_r>
 800b9a4:	b170      	cbz	r0, 800b9c4 <_vfiprintf_r+0x5c>
 800b9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a8:	07dc      	lsls	r4, r3, #31
 800b9aa:	d504      	bpl.n	800b9b6 <_vfiprintf_r+0x4e>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	b01d      	add	sp, #116	; 0x74
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	0598      	lsls	r0, r3, #22
 800b9ba:	d4f7      	bmi.n	800b9ac <_vfiprintf_r+0x44>
 800b9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9be:	f7fe fbf9 	bl	800a1b4 <__retarget_lock_release_recursive>
 800b9c2:	e7f3      	b.n	800b9ac <_vfiprintf_r+0x44>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9d2:	2330      	movs	r3, #48	; 0x30
 800b9d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb88 <_vfiprintf_r+0x220>
 800b9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9dc:	f04f 0901 	mov.w	r9, #1
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	469a      	mov	sl, r3
 800b9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e8:	b10a      	cbz	r2, 800b9ee <_vfiprintf_r+0x86>
 800b9ea:	2a25      	cmp	r2, #37	; 0x25
 800b9ec:	d1f9      	bne.n	800b9e2 <_vfiprintf_r+0x7a>
 800b9ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f2:	d00b      	beq.n	800ba0c <_vfiprintf_r+0xa4>
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	4622      	mov	r2, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ffa1 	bl	800b942 <__sfputs_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	f000 80a9 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba08:	445a      	add	r2, fp
 800ba0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80a1 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba20:	f10a 0a01 	add.w	sl, sl, #1
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	9307      	str	r3, [sp, #28]
 800ba28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba2e:	4654      	mov	r4, sl
 800ba30:	2205      	movs	r2, #5
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	4854      	ldr	r0, [pc, #336]	; (800bb88 <_vfiprintf_r+0x220>)
 800ba38:	f7f4 fbea 	bl	8000210 <memchr>
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	b9d8      	cbnz	r0, 800ba78 <_vfiprintf_r+0x110>
 800ba40:	06d1      	lsls	r1, r2, #27
 800ba42:	bf44      	itt	mi
 800ba44:	2320      	movmi	r3, #32
 800ba46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4a:	0713      	lsls	r3, r2, #28
 800ba4c:	bf44      	itt	mi
 800ba4e:	232b      	movmi	r3, #43	; 0x2b
 800ba50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba54:	f89a 3000 	ldrb.w	r3, [sl]
 800ba58:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5a:	d015      	beq.n	800ba88 <_vfiprintf_r+0x120>
 800ba5c:	9a07      	ldr	r2, [sp, #28]
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2000      	movs	r0, #0
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4621      	mov	r1, r4
 800ba68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6c:	3b30      	subs	r3, #48	; 0x30
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d94d      	bls.n	800bb0e <_vfiprintf_r+0x1a6>
 800ba72:	b1b0      	cbz	r0, 800baa2 <_vfiprintf_r+0x13a>
 800ba74:	9207      	str	r2, [sp, #28]
 800ba76:	e014      	b.n	800baa2 <_vfiprintf_r+0x13a>
 800ba78:	eba0 0308 	sub.w	r3, r0, r8
 800ba7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba80:	4313      	orrs	r3, r2
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	46a2      	mov	sl, r4
 800ba86:	e7d2      	b.n	800ba2e <_vfiprintf_r+0xc6>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	1d19      	adds	r1, r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	9103      	str	r1, [sp, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfbb      	ittet	lt
 800ba94:	425b      	neglt	r3, r3
 800ba96:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9a:	9307      	strge	r3, [sp, #28]
 800ba9c:	9307      	strlt	r3, [sp, #28]
 800ba9e:	bfb8      	it	lt
 800baa0:	9204      	strlt	r2, [sp, #16]
 800baa2:	7823      	ldrb	r3, [r4, #0]
 800baa4:	2b2e      	cmp	r3, #46	; 0x2e
 800baa6:	d10c      	bne.n	800bac2 <_vfiprintf_r+0x15a>
 800baa8:	7863      	ldrb	r3, [r4, #1]
 800baaa:	2b2a      	cmp	r3, #42	; 0x2a
 800baac:	d134      	bne.n	800bb18 <_vfiprintf_r+0x1b0>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	1d1a      	adds	r2, r3, #4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	9203      	str	r2, [sp, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	bfb8      	it	lt
 800baba:	f04f 33ff 	movlt.w	r3, #4294967295
 800babe:	3402      	adds	r4, #2
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb98 <_vfiprintf_r+0x230>
 800bac6:	7821      	ldrb	r1, [r4, #0]
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	f7f4 fba0 	bl	8000210 <memchr>
 800bad0:	b138      	cbz	r0, 800bae2 <_vfiprintf_r+0x17a>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	eba0 000a 	sub.w	r0, r0, sl
 800bad8:	2240      	movs	r2, #64	; 0x40
 800bada:	4082      	lsls	r2, r0
 800badc:	4313      	orrs	r3, r2
 800bade:	3401      	adds	r4, #1
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae6:	4829      	ldr	r0, [pc, #164]	; (800bb8c <_vfiprintf_r+0x224>)
 800bae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baec:	2206      	movs	r2, #6
 800baee:	f7f4 fb8f 	bl	8000210 <memchr>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d03f      	beq.n	800bb76 <_vfiprintf_r+0x20e>
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <_vfiprintf_r+0x228>)
 800baf8:	bb1b      	cbnz	r3, 800bb42 <_vfiprintf_r+0x1da>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	3307      	adds	r3, #7
 800bafe:	f023 0307 	bic.w	r3, r3, #7
 800bb02:	3308      	adds	r3, #8
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	443b      	add	r3, r7
 800bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0c:	e768      	b.n	800b9e0 <_vfiprintf_r+0x78>
 800bb0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb12:	460c      	mov	r4, r1
 800bb14:	2001      	movs	r0, #1
 800bb16:	e7a6      	b.n	800ba66 <_vfiprintf_r+0xfe>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	3401      	adds	r4, #1
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	f04f 0c0a 	mov.w	ip, #10
 800bb24:	4620      	mov	r0, r4
 800bb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2a:	3a30      	subs	r2, #48	; 0x30
 800bb2c:	2a09      	cmp	r2, #9
 800bb2e:	d903      	bls.n	800bb38 <_vfiprintf_r+0x1d0>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0c6      	beq.n	800bac2 <_vfiprintf_r+0x15a>
 800bb34:	9105      	str	r1, [sp, #20]
 800bb36:	e7c4      	b.n	800bac2 <_vfiprintf_r+0x15a>
 800bb38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e7f0      	b.n	800bb24 <_vfiprintf_r+0x1bc>
 800bb42:	ab03      	add	r3, sp, #12
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	462a      	mov	r2, r5
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb4a:	a904      	add	r1, sp, #16
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7fd fc53 	bl	80093f8 <_printf_float>
 800bb52:	4607      	mov	r7, r0
 800bb54:	1c78      	adds	r0, r7, #1
 800bb56:	d1d6      	bne.n	800bb06 <_vfiprintf_r+0x19e>
 800bb58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5a:	07d9      	lsls	r1, r3, #31
 800bb5c:	d405      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	059a      	lsls	r2, r3, #22
 800bb62:	d402      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb66:	f7fe fb25 	bl	800a1b4 <__retarget_lock_release_recursive>
 800bb6a:	89ab      	ldrh	r3, [r5, #12]
 800bb6c:	065b      	lsls	r3, r3, #25
 800bb6e:	f53f af1d 	bmi.w	800b9ac <_vfiprintf_r+0x44>
 800bb72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb74:	e71c      	b.n	800b9b0 <_vfiprintf_r+0x48>
 800bb76:	ab03      	add	r3, sp, #12
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb7e:	a904      	add	r1, sp, #16
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7fd fedd 	bl	8009940 <_printf_i>
 800bb86:	e7e4      	b.n	800bb52 <_vfiprintf_r+0x1ea>
 800bb88:	0800e11c 	.word	0x0800e11c
 800bb8c:	0800e126 	.word	0x0800e126
 800bb90:	080093f9 	.word	0x080093f9
 800bb94:	0800b943 	.word	0x0800b943
 800bb98:	0800e122 	.word	0x0800e122

0800bb9c <__sflush_r>:
 800bb9c:	898a      	ldrh	r2, [r1, #12]
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	4605      	mov	r5, r0
 800bba4:	0710      	lsls	r0, r2, #28
 800bba6:	460c      	mov	r4, r1
 800bba8:	d458      	bmi.n	800bc5c <__sflush_r+0xc0>
 800bbaa:	684b      	ldr	r3, [r1, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dc05      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dc02      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	d0f9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbc8:	682f      	ldr	r7, [r5, #0]
 800bbca:	6a21      	ldr	r1, [r4, #32]
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	d032      	beq.n	800bc36 <__sflush_r+0x9a>
 800bbd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	075a      	lsls	r2, r3, #29
 800bbd6:	d505      	bpl.n	800bbe4 <__sflush_r+0x48>
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	1ac0      	subs	r0, r0, r3
 800bbdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbde:	b10b      	cbz	r3, 800bbe4 <__sflush_r+0x48>
 800bbe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe2:	1ac0      	subs	r0, r0, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbea:	6a21      	ldr	r1, [r4, #32]
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b0      	blx	r6
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	d106      	bne.n	800bc04 <__sflush_r+0x68>
 800bbf6:	6829      	ldr	r1, [r5, #0]
 800bbf8:	291d      	cmp	r1, #29
 800bbfa:	d82b      	bhi.n	800bc54 <__sflush_r+0xb8>
 800bbfc:	4a29      	ldr	r2, [pc, #164]	; (800bca4 <__sflush_r+0x108>)
 800bbfe:	410a      	asrs	r2, r1
 800bc00:	07d6      	lsls	r6, r2, #31
 800bc02:	d427      	bmi.n	800bc54 <__sflush_r+0xb8>
 800bc04:	2200      	movs	r2, #0
 800bc06:	6062      	str	r2, [r4, #4]
 800bc08:	04d9      	lsls	r1, r3, #19
 800bc0a:	6922      	ldr	r2, [r4, #16]
 800bc0c:	6022      	str	r2, [r4, #0]
 800bc0e:	d504      	bpl.n	800bc1a <__sflush_r+0x7e>
 800bc10:	1c42      	adds	r2, r0, #1
 800bc12:	d101      	bne.n	800bc18 <__sflush_r+0x7c>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b903      	cbnz	r3, 800bc1a <__sflush_r+0x7e>
 800bc18:	6560      	str	r0, [r4, #84]	; 0x54
 800bc1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1c:	602f      	str	r7, [r5, #0]
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	d0c9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc26:	4299      	cmp	r1, r3
 800bc28:	d002      	beq.n	800bc30 <__sflush_r+0x94>
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f7ff f952 	bl	800aed4 <_free_r>
 800bc30:	2000      	movs	r0, #0
 800bc32:	6360      	str	r0, [r4, #52]	; 0x34
 800bc34:	e7c0      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc36:	2301      	movs	r3, #1
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b0      	blx	r6
 800bc3c:	1c41      	adds	r1, r0, #1
 800bc3e:	d1c8      	bne.n	800bbd2 <__sflush_r+0x36>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0c5      	beq.n	800bbd2 <__sflush_r+0x36>
 800bc46:	2b1d      	cmp	r3, #29
 800bc48:	d001      	beq.n	800bc4e <__sflush_r+0xb2>
 800bc4a:	2b16      	cmp	r3, #22
 800bc4c:	d101      	bne.n	800bc52 <__sflush_r+0xb6>
 800bc4e:	602f      	str	r7, [r5, #0]
 800bc50:	e7b1      	b.n	800bbb6 <__sflush_r+0x1a>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7ad      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc5c:	690f      	ldr	r7, [r1, #16]
 800bc5e:	2f00      	cmp	r7, #0
 800bc60:	d0a9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc62:	0793      	lsls	r3, r2, #30
 800bc64:	680e      	ldr	r6, [r1, #0]
 800bc66:	bf08      	it	eq
 800bc68:	694b      	ldreq	r3, [r1, #20]
 800bc6a:	600f      	str	r7, [r1, #0]
 800bc6c:	bf18      	it	ne
 800bc6e:	2300      	movne	r3, #0
 800bc70:	eba6 0807 	sub.w	r8, r6, r7
 800bc74:	608b      	str	r3, [r1, #8]
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	dd9c      	ble.n	800bbb6 <__sflush_r+0x1a>
 800bc7c:	6a21      	ldr	r1, [r4, #32]
 800bc7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc80:	4643      	mov	r3, r8
 800bc82:	463a      	mov	r2, r7
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b0      	blx	r6
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	dc06      	bgt.n	800bc9a <__sflush_r+0xfe>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e78e      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc9a:	4407      	add	r7, r0
 800bc9c:	eba8 0800 	sub.w	r8, r8, r0
 800bca0:	e7e9      	b.n	800bc76 <__sflush_r+0xda>
 800bca2:	bf00      	nop
 800bca4:	dfbffffe 	.word	0xdfbffffe

0800bca8 <_fflush_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	690b      	ldr	r3, [r1, #16]
 800bcac:	4605      	mov	r5, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b913      	cbnz	r3, 800bcb8 <_fflush_r+0x10>
 800bcb2:	2500      	movs	r5, #0
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	b118      	cbz	r0, 800bcc2 <_fflush_r+0x1a>
 800bcba:	6a03      	ldr	r3, [r0, #32]
 800bcbc:	b90b      	cbnz	r3, 800bcc2 <_fflush_r+0x1a>
 800bcbe:	f7fd ffed 	bl	8009c9c <__sinit>
 800bcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0f3      	beq.n	800bcb2 <_fflush_r+0xa>
 800bcca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bccc:	07d0      	lsls	r0, r2, #31
 800bcce:	d404      	bmi.n	800bcda <_fflush_r+0x32>
 800bcd0:	0599      	lsls	r1, r3, #22
 800bcd2:	d402      	bmi.n	800bcda <_fflush_r+0x32>
 800bcd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcd6:	f7fe fa6c 	bl	800a1b2 <__retarget_lock_acquire_recursive>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	4621      	mov	r1, r4
 800bcde:	f7ff ff5d 	bl	800bb9c <__sflush_r>
 800bce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bce4:	07da      	lsls	r2, r3, #31
 800bce6:	4605      	mov	r5, r0
 800bce8:	d4e4      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	059b      	lsls	r3, r3, #22
 800bcee:	d4e1      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf2:	f7fe fa5f 	bl	800a1b4 <__retarget_lock_release_recursive>
 800bcf6:	e7dd      	b.n	800bcb4 <_fflush_r+0xc>

0800bcf8 <__swhatbuf_r>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	b096      	sub	sp, #88	; 0x58
 800bd04:	4615      	mov	r5, r2
 800bd06:	461e      	mov	r6, r3
 800bd08:	da0d      	bge.n	800bd26 <__swhatbuf_r+0x2e>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd10:	f04f 0100 	mov.w	r1, #0
 800bd14:	bf0c      	ite	eq
 800bd16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd1a:	2340      	movne	r3, #64	; 0x40
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	6031      	str	r1, [r6, #0]
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	b016      	add	sp, #88	; 0x58
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	466a      	mov	r2, sp
 800bd28:	f000 f878 	bl	800be1c <_fstat_r>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dbec      	blt.n	800bd0a <__swhatbuf_r+0x12>
 800bd30:	9901      	ldr	r1, [sp, #4]
 800bd32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd3a:	4259      	negs	r1, r3
 800bd3c:	4159      	adcs	r1, r3
 800bd3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd42:	e7eb      	b.n	800bd1c <__swhatbuf_r+0x24>

0800bd44 <__smakebuf_r>:
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd48:	079d      	lsls	r5, r3, #30
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	d507      	bpl.n	800bd60 <__smakebuf_r+0x1c>
 800bd50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6163      	str	r3, [r4, #20]
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	ab01      	add	r3, sp, #4
 800bd62:	466a      	mov	r2, sp
 800bd64:	f7ff ffc8 	bl	800bcf8 <__swhatbuf_r>
 800bd68:	9900      	ldr	r1, [sp, #0]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7fd fa17 	bl	80091a0 <_malloc_r>
 800bd72:	b948      	cbnz	r0, 800bd88 <__smakebuf_r+0x44>
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	059a      	lsls	r2, r3, #22
 800bd7a:	d4ef      	bmi.n	800bd5c <__smakebuf_r+0x18>
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	f043 0302 	orr.w	r3, r3, #2
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	e7e3      	b.n	800bd50 <__smakebuf_r+0xc>
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	6020      	str	r0, [r4, #0]
 800bd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	9b00      	ldr	r3, [sp, #0]
 800bd94:	6163      	str	r3, [r4, #20]
 800bd96:	9b01      	ldr	r3, [sp, #4]
 800bd98:	6120      	str	r0, [r4, #16]
 800bd9a:	b15b      	cbz	r3, 800bdb4 <__smakebuf_r+0x70>
 800bd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda0:	4630      	mov	r0, r6
 800bda2:	f000 f84d 	bl	800be40 <_isatty_r>
 800bda6:	b128      	cbz	r0, 800bdb4 <__smakebuf_r+0x70>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	f043 0301 	orr.w	r3, r3, #1
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	431d      	orrs	r5, r3
 800bdb8:	81a5      	strh	r5, [r4, #12]
 800bdba:	e7cf      	b.n	800bd5c <__smakebuf_r+0x18>

0800bdbc <_raise_r>:
 800bdbc:	291f      	cmp	r1, #31
 800bdbe:	b538      	push	{r3, r4, r5, lr}
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	d904      	bls.n	800bdd0 <_raise_r+0x14>
 800bdc6:	2316      	movs	r3, #22
 800bdc8:	6003      	str	r3, [r0, #0]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bdd2:	b112      	cbz	r2, 800bdda <_raise_r+0x1e>
 800bdd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd8:	b94b      	cbnz	r3, 800bdee <_raise_r+0x32>
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f852 	bl	800be84 <_getpid_r>
 800bde0:	462a      	mov	r2, r5
 800bde2:	4601      	mov	r1, r0
 800bde4:	4620      	mov	r0, r4
 800bde6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdea:	f000 b839 	b.w	800be60 <_kill_r>
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d00a      	beq.n	800be08 <_raise_r+0x4c>
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	d103      	bne.n	800bdfe <_raise_r+0x42>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	2001      	movs	r0, #1
 800bdfc:	e7e7      	b.n	800bdce <_raise_r+0x12>
 800bdfe:	2400      	movs	r4, #0
 800be00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be04:	4628      	mov	r0, r5
 800be06:	4798      	blx	r3
 800be08:	2000      	movs	r0, #0
 800be0a:	e7e0      	b.n	800bdce <_raise_r+0x12>

0800be0c <raise>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <raise+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f7ff bfd3 	b.w	800bdbc <_raise_r>
 800be16:	bf00      	nop
 800be18:	20000070 	.word	0x20000070

0800be1c <_fstat_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_fstat_r+0x20>)
 800be20:	2300      	movs	r3, #0
 800be22:	4604      	mov	r4, r0
 800be24:	4608      	mov	r0, r1
 800be26:	4611      	mov	r1, r2
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	f7f7 fb1c 	bl	8003466 <_fstat>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d102      	bne.n	800be38 <_fstat_r+0x1c>
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	b103      	cbz	r3, 800be38 <_fstat_r+0x1c>
 800be36:	6023      	str	r3, [r4, #0]
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	bf00      	nop
 800be3c:	2000065c 	.word	0x2000065c

0800be40 <_isatty_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d06      	ldr	r5, [pc, #24]	; (800be5c <_isatty_r+0x1c>)
 800be44:	2300      	movs	r3, #0
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	602b      	str	r3, [r5, #0]
 800be4c:	f7f7 fb1b 	bl	8003486 <_isatty>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d102      	bne.n	800be5a <_isatty_r+0x1a>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b103      	cbz	r3, 800be5a <_isatty_r+0x1a>
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	2000065c 	.word	0x2000065c

0800be60 <_kill_r>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4d07      	ldr	r5, [pc, #28]	; (800be80 <_kill_r+0x20>)
 800be64:	2300      	movs	r3, #0
 800be66:	4604      	mov	r4, r0
 800be68:	4608      	mov	r0, r1
 800be6a:	4611      	mov	r1, r2
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	f7f7 fa9b 	bl	80033a8 <_kill>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	d102      	bne.n	800be7c <_kill_r+0x1c>
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	b103      	cbz	r3, 800be7c <_kill_r+0x1c>
 800be7a:	6023      	str	r3, [r4, #0]
 800be7c:	bd38      	pop	{r3, r4, r5, pc}
 800be7e:	bf00      	nop
 800be80:	2000065c 	.word	0x2000065c

0800be84 <_getpid_r>:
 800be84:	f7f7 ba88 	b.w	8003398 <_getpid>

0800be88 <_calloc_r>:
 800be88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be8a:	fba1 2402 	umull	r2, r4, r1, r2
 800be8e:	b94c      	cbnz	r4, 800bea4 <_calloc_r+0x1c>
 800be90:	4611      	mov	r1, r2
 800be92:	9201      	str	r2, [sp, #4]
 800be94:	f7fd f984 	bl	80091a0 <_malloc_r>
 800be98:	9a01      	ldr	r2, [sp, #4]
 800be9a:	4605      	mov	r5, r0
 800be9c:	b930      	cbnz	r0, 800beac <_calloc_r+0x24>
 800be9e:	4628      	mov	r0, r5
 800bea0:	b003      	add	sp, #12
 800bea2:	bd30      	pop	{r4, r5, pc}
 800bea4:	220c      	movs	r2, #12
 800bea6:	6002      	str	r2, [r0, #0]
 800bea8:	2500      	movs	r5, #0
 800beaa:	e7f8      	b.n	800be9e <_calloc_r+0x16>
 800beac:	4621      	mov	r1, r4
 800beae:	f7fe f8d1 	bl	800a054 <memset>
 800beb2:	e7f4      	b.n	800be9e <_calloc_r+0x16>

0800beb4 <__ascii_mbtowc>:
 800beb4:	b082      	sub	sp, #8
 800beb6:	b901      	cbnz	r1, 800beba <__ascii_mbtowc+0x6>
 800beb8:	a901      	add	r1, sp, #4
 800beba:	b142      	cbz	r2, 800bece <__ascii_mbtowc+0x1a>
 800bebc:	b14b      	cbz	r3, 800bed2 <__ascii_mbtowc+0x1e>
 800bebe:	7813      	ldrb	r3, [r2, #0]
 800bec0:	600b      	str	r3, [r1, #0]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	1e10      	subs	r0, r2, #0
 800bec6:	bf18      	it	ne
 800bec8:	2001      	movne	r0, #1
 800beca:	b002      	add	sp, #8
 800becc:	4770      	bx	lr
 800bece:	4610      	mov	r0, r2
 800bed0:	e7fb      	b.n	800beca <__ascii_mbtowc+0x16>
 800bed2:	f06f 0001 	mvn.w	r0, #1
 800bed6:	e7f8      	b.n	800beca <__ascii_mbtowc+0x16>

0800bed8 <_realloc_r>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	4680      	mov	r8, r0
 800bede:	4614      	mov	r4, r2
 800bee0:	460e      	mov	r6, r1
 800bee2:	b921      	cbnz	r1, 800beee <_realloc_r+0x16>
 800bee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	4611      	mov	r1, r2
 800beea:	f7fd b959 	b.w	80091a0 <_malloc_r>
 800beee:	b92a      	cbnz	r2, 800befc <_realloc_r+0x24>
 800bef0:	f7fe fff0 	bl	800aed4 <_free_r>
 800bef4:	4625      	mov	r5, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	f000 f828 	bl	800bf50 <_malloc_usable_size_r>
 800bf00:	4284      	cmp	r4, r0
 800bf02:	4607      	mov	r7, r0
 800bf04:	d802      	bhi.n	800bf0c <_realloc_r+0x34>
 800bf06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf0a:	d812      	bhi.n	800bf32 <_realloc_r+0x5a>
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7fd f946 	bl	80091a0 <_malloc_r>
 800bf14:	4605      	mov	r5, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0ed      	beq.n	800bef6 <_realloc_r+0x1e>
 800bf1a:	42bc      	cmp	r4, r7
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4631      	mov	r1, r6
 800bf20:	bf28      	it	cs
 800bf22:	463a      	movcs	r2, r7
 800bf24:	f7fe f947 	bl	800a1b6 <memcpy>
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	f7fe ffd2 	bl	800aed4 <_free_r>
 800bf30:	e7e1      	b.n	800bef6 <_realloc_r+0x1e>
 800bf32:	4635      	mov	r5, r6
 800bf34:	e7df      	b.n	800bef6 <_realloc_r+0x1e>

0800bf36 <__ascii_wctomb>:
 800bf36:	b149      	cbz	r1, 800bf4c <__ascii_wctomb+0x16>
 800bf38:	2aff      	cmp	r2, #255	; 0xff
 800bf3a:	bf85      	ittet	hi
 800bf3c:	238a      	movhi	r3, #138	; 0x8a
 800bf3e:	6003      	strhi	r3, [r0, #0]
 800bf40:	700a      	strbls	r2, [r1, #0]
 800bf42:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf46:	bf98      	it	ls
 800bf48:	2001      	movls	r0, #1
 800bf4a:	4770      	bx	lr
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	4770      	bx	lr

0800bf50 <_malloc_usable_size_r>:
 800bf50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf54:	1f18      	subs	r0, r3, #4
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	bfbc      	itt	lt
 800bf5a:	580b      	ldrlt	r3, [r1, r0]
 800bf5c:	18c0      	addlt	r0, r0, r3
 800bf5e:	4770      	bx	lr

0800bf60 <_init>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr

0800bf6c <_fini>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr
