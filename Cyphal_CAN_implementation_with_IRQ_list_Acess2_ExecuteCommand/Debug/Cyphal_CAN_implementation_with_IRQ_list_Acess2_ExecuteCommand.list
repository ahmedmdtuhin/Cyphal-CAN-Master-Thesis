
Cyphal_CAN_implementation_with_IRQ_list_Acess2_ExecuteCommand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011318  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003798  080114e8  080114e8  000214e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c80  08014c80  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014c80  08014c80  00024c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c88  08014c88  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c88  08014c88  00024c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014c8c  08014c8c  00024c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08014c90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200001e0  08014e70  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  08014e70  00030a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e429  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9f  00000000  00000000  0003e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00040420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008db  00000000  00000000  00040ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023196  00000000  00000000  000417cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9d1  00000000  00000000  00064961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d50c9  00000000  00000000  00073332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb4  00000000  00000000  001483fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080114d0 	.word	0x080114d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080114d0 	.word	0x080114d0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bf28      	it	cs
 8000f16:	4613      	movcs	r3, r2
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffe3 	bl	8000f04 <nunavutChooseMin>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ffdb 	bl	8000f04 <nunavutChooseMin>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d105      	bne.n	8000f78 <nunavutCopyBits+0x20>
 8000f6c:	4b91      	ldr	r3, [pc, #580]	; (80011b4 <nunavutCopyBits+0x25c>)
 8000f6e:	4a92      	ldr	r2, [pc, #584]	; (80011b8 <nunavutCopyBits+0x260>)
 8000f70:	217f      	movs	r1, #127	; 0x7f
 8000f72:	4892      	ldr	r0, [pc, #584]	; (80011bc <nunavutCopyBits+0x264>)
 8000f74:	f00d fdce 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d105      	bne.n	8000f8a <nunavutCopyBits+0x32>
 8000f7e:	4b90      	ldr	r3, [pc, #576]	; (80011c0 <nunavutCopyBits+0x268>)
 8000f80:	4a8d      	ldr	r2, [pc, #564]	; (80011b8 <nunavutCopyBits+0x260>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	488d      	ldr	r0, [pc, #564]	; (80011bc <nunavutCopyBits+0x264>)
 8000f86:	f00d fdc5 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d105      	bne.n	8000f9e <nunavutCopyBits+0x46>
 8000f92:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <nunavutCopyBits+0x26c>)
 8000f94:	4a88      	ldr	r2, [pc, #544]	; (80011b8 <nunavutCopyBits+0x260>)
 8000f96:	2181      	movs	r1, #129	; 0x81
 8000f98:	4888      	ldr	r0, [pc, #544]	; (80011bc <nunavutCopyBits+0x264>)
 8000f9a:	f00d fdbb 	bl	800eb14 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8000f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d14f      	bne.n	8001048 <nunavutCopyBits+0xf0>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d14a      	bne.n	8001048 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fd2:	f00e fbf6 	bl	800f7c2 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8000fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80df 	beq.w	80011aa <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff0:	4413      	add	r3, r2
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff8:	4413      	add	r3, r2
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001000:	2b07      	cmp	r3, #7
 8001002:	d905      	bls.n	8001010 <nunavutCopyBits+0xb8>
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <nunavutCopyBits+0x270>)
 8001006:	4a6c      	ldr	r2, [pc, #432]	; (80011b8 <nunavutCopyBits+0x260>)
 8001008:	2190      	movs	r1, #144	; 0x90
 800100a:	486c      	ldr	r0, [pc, #432]	; (80011bc <nunavutCopyBits+0x264>)
 800100c:	f00d fd82 	bl	800eb14 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8001010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3b01      	subs	r3, #1
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102a:	43db      	mvns	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4013      	ands	r3, r2
 8001030:	b2da      	uxtb	r2, r3
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	7819      	ldrb	r1, [r3, #0]
 8001036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800103a:	400b      	ands	r3, r1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	701a      	strb	r2, [r3, #0]
    {
 8001046:	e0b0      	b.n	80011aa <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 8001060:	6a3a      	ldr	r2, [r7, #32]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	d210      	bcs.n	800108a <nunavutCopyBits+0x132>
 8001068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	3308      	adds	r3, #8
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	6a3a      	ldr	r2, [r7, #32]
 8001074:	4413      	add	r3, r2
 8001076:	461a      	mov	r2, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	429a      	cmp	r2, r3
 800107c:	d905      	bls.n	800108a <nunavutCopyBits+0x132>
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <nunavutCopyBits+0x274>)
 8001080:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <nunavutCopyBits+0x260>)
 8001082:	219f      	movs	r1, #159	; 0x9f
 8001084:	484d      	ldr	r0, [pc, #308]	; (80011bc <nunavutCopyBits+0x264>)
 8001086:	f00d fd45 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 800108a:	6a3a      	ldr	r2, [r7, #32]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	429a      	cmp	r2, r3
 8001090:	d97d      	bls.n	800118e <nunavutCopyBits+0x236>
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	3308      	adds	r3, #8
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d972      	bls.n	800118e <nunavutCopyBits+0x236>
 80010a8:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <nunavutCopyBits+0x278>)
 80010aa:	4a43      	ldr	r2, [pc, #268]	; (80011b8 <nunavutCopyBits+0x260>)
 80010ac:	21a0      	movs	r1, #160	; 0xa0
 80010ae:	4843      	ldr	r0, [pc, #268]	; (80011bc <nunavutCopyBits+0x264>)
 80010b0:	f00d fd30 	bl	800eb14 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80010b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80010be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80010c8:	7dba      	ldrb	r2, [r7, #22]
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	bf38      	it	cc
 80010d0:	4613      	movcc	r3, r2
 80010d2:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80010d4:	7d7b      	ldrb	r3, [r7, #21]
 80010d6:	f1c3 0008 	rsb	r0, r3, #8
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff ff0f 	bl	8000f04 <nunavutChooseMin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 80010ea:	7d3b      	ldrb	r3, [r7, #20]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <nunavutCopyBits+0x1a4>
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <nunavutCopyBits+0x27c>)
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <nunavutCopyBits+0x260>)
 80010f4:	21a7      	movs	r1, #167	; 0xa7
 80010f6:	4831      	ldr	r0, [pc, #196]	; (80011bc <nunavutCopyBits+0x264>)
 80010f8:	f00d fd0c 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 80010fc:	7d3b      	ldrb	r3, [r7, #20]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d905      	bls.n	800110e <nunavutCopyBits+0x1b6>
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <nunavutCopyBits+0x280>)
 8001104:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <nunavutCopyBits+0x260>)
 8001106:	21a8      	movs	r1, #168	; 0xa8
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <nunavutCopyBits+0x264>)
 800110a:	f00d fd03 	bl	800eb14 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 8001120:	7cfb      	ldrb	r3, [r7, #19]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <nunavutCopyBits+0x1da>
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <nunavutCopyBits+0x284>)
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <nunavutCopyBits+0x260>)
 800112a:	21ab      	movs	r1, #171	; 0xab
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <nunavutCopyBits+0x264>)
 800112e:	f00d fcf1 	bl	800eb14 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	6a3a      	ldr	r2, [r7, #32]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	fa42 f303 	asr.w	r3, r2, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	4413      	add	r3, r2
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	43db      	mvns	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4013      	ands	r3, r2
 8001162:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001164:	7cba      	ldrb	r2, [r7, #18]
 8001166:	7cfb      	ldrb	r3, [r7, #19]
 8001168:	4013      	ands	r3, r2
 800116a:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 800116c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	4413      	add	r3, r2
 8001174:	7c79      	ldrb	r1, [r7, #17]
 8001176:	7c3a      	ldrb	r2, [r7, #16]
 8001178:	430a      	orrs	r2, r1
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800117e:	7d3b      	ldrb	r3, [r7, #20]
 8001180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001182:	4413      	add	r3, r2
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8001186:	7d3b      	ldrb	r3, [r7, #20]
 8001188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118a:	4413      	add	r3, r2
 800118c:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001192:	429a      	cmp	r2, r3
 8001194:	d88e      	bhi.n	80010b4 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119a:	429a      	cmp	r2, r3
 800119c:	d006      	beq.n	80011ac <nunavutCopyBits+0x254>
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <nunavutCopyBits+0x288>)
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <nunavutCopyBits+0x260>)
 80011a2:	21b9      	movs	r1, #185	; 0xb9
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <nunavutCopyBits+0x264>)
 80011a6:	f00d fcb5 	bl	800eb14 <__assert_func>
    {
 80011aa:	bf00      	nop
    }
}
 80011ac:	bf00      	nop
 80011ae:	3748      	adds	r7, #72	; 0x48
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080114e8 	.word	0x080114e8
 80011b8:	08013b08 	.word	0x08013b08
 80011bc:	080114fc 	.word	0x080114fc
 80011c0:	0801157c 	.word	0x0801157c
 80011c4:	08011590 	.word	0x08011590
 80011c8:	0801159c 	.word	0x0801159c
 80011cc:	080115ac 	.word	0x080115ac
 80011d0:	08011618 	.word	0x08011618
 80011d4:	08011684 	.word	0x08011684
 80011d8:	08011690 	.word	0x08011690
 80011dc:	0801169c 	.word	0x0801169c
 80011e0:	080116a8 	.word	0x080116a8

080011e4 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(output != NULL);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <nunavutGetBits+0x20>
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <nunavutGetBits+0x74>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <nunavutGetBits+0x78>)
 80011fc:	21c9      	movs	r1, #201	; 0xc9
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <nunavutGetBits+0x7c>)
 8001200:	f00d fc88 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(buf != NULL);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <nunavutGetBits+0x32>
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <nunavutGetBits+0x80>)
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <nunavutGetBits+0x78>)
 800120e:	21ca      	movs	r1, #202	; 0xca
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <nunavutGetBits+0x7c>)
 8001212:	f00d fc7f 	bl	800eb14 <__assert_func>
    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fe82 	bl	8000f24 <nunavutSaturateBufferFragmentBitLength>
 8001220:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	18d0      	adds	r0, r2, r3
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	3307      	adds	r3, #7
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	461a      	mov	r2, r3
 8001238:	2100      	movs	r1, #0
 800123a:	f00e fadc 	bl	800f7f6 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	2100      	movs	r1, #0
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff fe85 	bl	8000f58 <nunavutCopyBits>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	080116bc 	.word	0x080116bc
 800125c:	08013d14 	.word	0x08013d14
 8001260:	080114fc 	.word	0x080114fc
 8001264:	080116d4 	.word	0x080116d4

08001268 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <nunavutSetUxx+0x1e>
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <nunavutSetUxx+0xfc>)
 800127c:	4a3a      	ldr	r2, [pc, #232]	; (8001368 <nunavutSetUxx+0x100>)
 800127e:	21f7      	movs	r1, #247	; 0xf7
 8001280:	483a      	ldr	r0, [pc, #232]	; (800136c <nunavutSetUxx+0x104>)
 8001282:	f00d fc47 	bl	800eb14 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	00da      	lsls	r2, r3, #3
 800128a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	440b      	add	r3, r1
 8001292:	429a      	cmp	r2, r3
 8001294:	d202      	bcs.n	800129c <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001296:	f06f 0302 	mvn.w	r3, #2
 800129a:	e05f      	b.n	800135c <nunavutSetUxx+0xf4>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 800129c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe2e 	bl	8000f04 <nunavutChooseMin>
 80012a8:	61f8      	str	r0, [r7, #28]
    const uint8_t tmp[sizeof(uint64_t)] = {
        (uint8_t)((value >> 0U) & 0xFFU),
 80012aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012ae:	753b      	strb	r3, [r7, #20]
        (uint8_t)((value >> 8U) & 0xFFU),
 80012b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	0a02      	lsrs	r2, r0, #8
 80012be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012c2:	0a0b      	lsrs	r3, r1, #8
 80012c4:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012c6:	757b      	strb	r3, [r7, #21]
        (uint8_t)((value >> 16U) & 0xFFU),
 80012c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	0c02      	lsrs	r2, r0, #16
 80012d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012da:	0c0b      	lsrs	r3, r1, #16
 80012dc:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012de:	75bb      	strb	r3, [r7, #22]
        (uint8_t)((value >> 24U) & 0xFFU),
 80012e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	0e02      	lsrs	r2, r0, #24
 80012ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012f2:	0e0b      	lsrs	r3, r1, #24
 80012f4:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012f6:	75fb      	strb	r3, [r7, #23]
        (uint8_t)((value >> 32U) & 0xFFU),
 80012f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	000a      	movs	r2, r1
 8001306:	2300      	movs	r3, #0
 8001308:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800130a:	763b      	strb	r3, [r7, #24]
        (uint8_t)((value >> 40U) & 0xFFU),
 800130c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	0a0a      	lsrs	r2, r1, #8
 800131a:	2300      	movs	r3, #0
 800131c:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800131e:	767b      	strb	r3, [r7, #25]
        (uint8_t)((value >> 48U) & 0xFFU),
 8001320:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	0c0a      	lsrs	r2, r1, #16
 800132e:	2300      	movs	r3, #0
 8001330:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001332:	76bb      	strb	r3, [r7, #26]
        (uint8_t)((value >> 56U) & 0xFFU),
 8001334:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	0e0a      	lsrs	r2, r1, #24
 8001342:	2300      	movs	r3, #0
 8001344:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001346:	76fb      	strb	r3, [r7, #27]
    };
    nunavutCopyBits(buf, off_bits, saturated_len_bits, &tmp[0], 0U);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fdff 	bl	8000f58 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	080116d4 	.word	0x080116d4
 8001368:	08013af8 	.word	0x08013af8
 800136c:	080114fc 	.word	0x080114fc

08001370 <nunavutSetIxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const int64_t value,
    const uint8_t len_bits)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af04      	add	r7, sp, #16
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    // The naive sign conversion is safe and portable according to the C standard:
    // 6.3.1.3.3: if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more
    // than the maximum value that can be represented in the new type until the value is in the range of the new type.
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, (uint64_t) value, len_bits);
 800137c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001380:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001384:	9102      	str	r1, [sp, #8]
 8001386:	e9cd 2300 	strd	r2, r3, [sp]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ff6a 	bl	8001268 <nunavutSetUxx>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <nunavutGetU8>:

static inline uint8_t nunavutGetU8(const uint8_t* const buf,
                                   const size_t buf_size_bytes,
                                   const size_t off_bits,
                                   const uint8_t len_bits)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <nunavutGetU8+0x22>
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <nunavutGetU8+0x70>)
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <nunavutGetU8+0x74>)
 80013b8:	f240 113b 	movw	r1, #315	; 0x13b
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <nunavutGetU8+0x78>)
 80013be:	f00d fba9 	bl	800eb14 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 8U));
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	2108      	movs	r1, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd9c 	bl	8000f04 <nunavutChooseMin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f7ff fda6 	bl	8000f24 <nunavutSaturateBufferFragmentBitLength>
 80013d8:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint8_t) * 8U));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d906      	bls.n	80013ee <nunavutGetU8+0x4e>
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <nunavutGetU8+0x7c>)
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <nunavutGetU8+0x74>)
 80013e4:	f240 113d 	movw	r1, #317	; 0x13d
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <nunavutGetU8+0x78>)
 80013ea:	f00d fb93 	bl	800eb14 <__assert_func>
    uint8_t val = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	74fb      	strb	r3, [r7, #19]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80013f2:	f107 0013 	add.w	r0, r7, #19
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2100      	movs	r1, #0
 8001400:	f7ff fdaa 	bl	8000f58 <nunavutCopyBits>
    return val;
 8001404:	7cfb      	ldrb	r3, [r7, #19]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	080116d4 	.word	0x080116d4
 8001414:	08013e14 	.word	0x08013e14
 8001418:	080114fc 	.word	0x080114fc
 800141c:	080116e8 	.word	0x080116e8

08001420 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <nunavutGetU16+0x22>
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <nunavutGetU16+0x7c>)
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <nunavutGetU16+0x80>)
 8001438:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800143c:	4819      	ldr	r0, [pc, #100]	; (80014a4 <nunavutGetU16+0x84>)
 800143e:	f00d fb69 	bl	800eb14 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	2110      	movs	r1, #16
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd5c 	bl	8000f04 <nunavutChooseMin>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f7ff fd66 	bl	8000f24 <nunavutSaturateBufferFragmentBitLength>
 8001458:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint16_t) * 8U));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b10      	cmp	r3, #16
 800145e:	d906      	bls.n	800146e <nunavutGetU16+0x4e>
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <nunavutGetU16+0x88>)
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <nunavutGetU16+0x80>)
 8001464:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <nunavutGetU16+0x84>)
 800146a:	f00d fb53 	bl	800eb14 <__assert_func>
    uint8_t tmp[sizeof(uint16_t)] = {0};
 800146e:	2300      	movs	r3, #0
 8001470:	823b      	strh	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 8001472:	f107 0010 	add.w	r0, r7, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	2100      	movs	r1, #0
 8001480:	f7ff fd6a 	bl	8000f58 <nunavutCopyBits>
    return (uint16_t)(tmp[0] | (uint16_t)(((uint16_t) tmp[1]) << 8U));
 8001484:	7c3b      	ldrb	r3, [r7, #16]
 8001486:	b29a      	uxth	r2, r3
 8001488:	7c7b      	ldrb	r3, [r7, #17]
 800148a:	b29b      	uxth	r3, r3
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29b      	uxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b29b      	uxth	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080116d4 	.word	0x080116d4
 80014a0:	08013b48 	.word	0x08013b48
 80014a4:	080114fc 	.word	0x080114fc
 80014a8:	08011708 	.word	0x08011708

080014ac <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <nunavutGetU32+0x22>
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <nunavutGetU32+0x84>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <nunavutGetU32+0x88>)
 80014c4:	f240 1155 	movw	r1, #341	; 0x155
 80014c8:	481b      	ldr	r0, [pc, #108]	; (8001538 <nunavutGetU32+0x8c>)
 80014ca:	f00d fb23 	bl	800eb14 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	2120      	movs	r1, #32
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fd16 	bl	8000f04 <nunavutChooseMin>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f7ff fd20 	bl	8000f24 <nunavutSaturateBufferFragmentBitLength>
 80014e4:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint32_t) * 8U));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d906      	bls.n	80014fa <nunavutGetU32+0x4e>
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <nunavutGetU32+0x90>)
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <nunavutGetU32+0x88>)
 80014f0:	f240 1157 	movw	r1, #343	; 0x157
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <nunavutGetU32+0x8c>)
 80014f6:	f00d fb0d 	bl	800eb14 <__assert_func>
    uint8_t tmp[sizeof(uint32_t)] = {0};
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 80014fe:	f107 0010 	add.w	r0, r7, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	2100      	movs	r1, #0
 800150c:	f7ff fd24 	bl	8000f58 <nunavutCopyBits>
    return (uint32_t)(tmp[0] | ((uint32_t) tmp[1] << 8U) | ((uint32_t) tmp[2] << 16U) | ((uint32_t) tmp[3] << 24U));
 8001510:	7c3b      	ldrb	r3, [r7, #16]
 8001512:	461a      	mov	r2, r3
 8001514:	7c7b      	ldrb	r3, [r7, #17]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	431a      	orrs	r2, r3
 800151a:	7cbb      	ldrb	r3, [r7, #18]
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	4313      	orrs	r3, r2
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	080116d4 	.word	0x080116d4
 8001534:	08013d9c 	.word	0x08013d9c
 8001538:	080114fc 	.word	0x080114fc
 800153c:	08011728 	.word	0x08011728

08001540 <nunavutGetU64>:

static inline uint64_t nunavutGetU64(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001544:	b0a4      	sub	sp, #144	; 0x90
 8001546:	af02      	add	r7, sp, #8
 8001548:	6778      	str	r0, [r7, #116]	; 0x74
 800154a:	6739      	str	r1, [r7, #112]	; 0x70
 800154c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800154e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    NUNAVUT_ASSERT(buf != NULL);
 8001552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <nunavutGetU64+0x26>
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <nunavutGetU64+0x1c8>)
 800155a:	4a6c      	ldr	r2, [pc, #432]	; (800170c <nunavutGetU64+0x1cc>)
 800155c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001560:	486b      	ldr	r0, [pc, #428]	; (8001710 <nunavutGetU64+0x1d0>)
 8001562:	f00d fad7 	bl	800eb14 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 64U));
 8001566:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fcc9 	bl	8000f04 <nunavutChooseMin>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001578:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800157a:	f7ff fcd3 	bl	8000f24 <nunavutSaturateBufferFragmentBitLength>
 800157e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    NUNAVUT_ASSERT(bits <= (sizeof(uint64_t) * 8U));
 8001582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001586:	2b40      	cmp	r3, #64	; 0x40
 8001588:	d906      	bls.n	8001598 <nunavutGetU64+0x58>
 800158a:	4b62      	ldr	r3, [pc, #392]	; (8001714 <nunavutGetU64+0x1d4>)
 800158c:	4a5f      	ldr	r2, [pc, #380]	; (800170c <nunavutGetU64+0x1cc>)
 800158e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8001592:	485f      	ldr	r0, [pc, #380]	; (8001710 <nunavutGetU64+0x1d0>)
 8001594:	f00d fabe 	bl	800eb14 <__assert_func>
    uint8_t tmp[sizeof(uint64_t)] = {0};
 8001598:	2300      	movs	r3, #0
 800159a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 80015a2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80015a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80015b0:	2100      	movs	r1, #0
 80015b2:	f7ff fcd1 	bl	8000f58 <nunavutCopyBits>
    return (uint64_t)(tmp[0] |
 80015b6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2200      	movs	r2, #0
 80015be:	663b      	str	r3, [r7, #96]	; 0x60
 80015c0:	667a      	str	r2, [r7, #100]	; 0x64
                      ((uint64_t) tmp[1] << 8U) |
 80015c2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	461c      	mov	r4, r3
 80015cc:	4615      	mov	r5, r2
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	022b      	lsls	r3, r5, #8
 80015d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80015dc:	0222      	lsls	r2, r4, #8
    return (uint64_t)(tmp[0] |
 80015de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015e2:	4621      	mov	r1, r4
 80015e4:	ea41 0a02 	orr.w	sl, r1, r2
 80015e8:	4629      	mov	r1, r5
 80015ea:	ea41 0b03 	orr.w	fp, r1, r3
                      ((uint64_t) tmp[2] << 16U) |
 80015ee:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80015f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001606:	4629      	mov	r1, r5
 8001608:	040b      	lsls	r3, r1, #16
 800160a:	4621      	mov	r1, r4
 800160c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001610:	4621      	mov	r1, r4
 8001612:	040a      	lsls	r2, r1, #16
                      ((uint64_t) tmp[1] << 8U) |
 8001614:	ea4a 0102 	orr.w	r1, sl, r2
 8001618:	6539      	str	r1, [r7, #80]	; 0x50
 800161a:	ea4b 0303 	orr.w	r3, fp, r3
 800161e:	657b      	str	r3, [r7, #84]	; 0x54
                      ((uint64_t) tmp[3] << 24U) |
 8001620:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2200      	movs	r2, #0
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
 800162a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800162c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001630:	460b      	mov	r3, r1
 8001632:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001636:	460b      	mov	r3, r1
 8001638:	ea4f 6803 	mov.w	r8, r3, lsl #24
                      ((uint64_t) tmp[2] << 16U) |
 800163c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001640:	460b      	mov	r3, r1
 8001642:	ea43 0308 	orr.w	r3, r3, r8
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
 8001648:	4613      	mov	r3, r2
 800164a:	ea43 0309 	orr.w	r3, r3, r9
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
                      ((uint64_t) tmp[4] << 32U) |
 8001650:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2200      	movs	r2, #0
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
 800165a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001666:	000b      	movs	r3, r1
 8001668:	2200      	movs	r2, #0
                      ((uint64_t) tmp[3] << 24U) |
 800166a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800166e:	4621      	mov	r1, r4
 8001670:	4311      	orrs	r1, r2
 8001672:	6339      	str	r1, [r7, #48]	; 0x30
 8001674:	4629      	mov	r1, r5
 8001676:	4319      	orrs	r1, r3
 8001678:	6379      	str	r1, [r7, #52]	; 0x34
                      ((uint64_t) tmp[5] << 40U) |
 800167a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2200      	movs	r2, #0
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
 8001684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001690:	020b      	lsls	r3, r1, #8
 8001692:	2200      	movs	r2, #0
                      ((uint64_t) tmp[4] << 32U) |
 8001694:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001698:	4621      	mov	r1, r4
 800169a:	4311      	orrs	r1, r2
 800169c:	6239      	str	r1, [r7, #32]
 800169e:	4629      	mov	r1, r5
 80016a0:	4319      	orrs	r1, r3
 80016a2:	6279      	str	r1, [r7, #36]	; 0x24
                      ((uint64_t) tmp[6] << 48U) |
 80016a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	61fa      	str	r2, [r7, #28]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	040b      	lsls	r3, r1, #16
 80016bc:	2200      	movs	r2, #0
                      ((uint64_t) tmp[5] << 40U) |
 80016be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016c2:	4621      	mov	r1, r4
 80016c4:	4311      	orrs	r1, r2
 80016c6:	6139      	str	r1, [r7, #16]
 80016c8:	4629      	mov	r1, r5
 80016ca:	4319      	orrs	r1, r3
 80016cc:	6179      	str	r1, [r7, #20]
                      ((uint64_t) tmp[7] << 56U));
 80016ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	060b      	lsls	r3, r1, #24
 80016e6:	2200      	movs	r2, #0
    return (uint64_t)(tmp[0] |
 80016e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016ec:	4621      	mov	r1, r4
 80016ee:	4311      	orrs	r1, r2
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	4629      	mov	r1, r5
 80016f4:	4319      	orrs	r1, r3
 80016f6:	6079      	str	r1, [r7, #4]
 80016f8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	3788      	adds	r7, #136	; 0x88
 8001702:	46bd      	mov	sp, r7
 8001704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001708:	080116d4 	.word	0x080116d4
 800170c:	08013d58 	.word	0x08013d58
 8001710:	080114fc 	.word	0x080114fc
 8001714:	08011748 	.word	0x08011748

08001718 <nunavutGetI8>:

static inline int8_t nunavutGetI8(const uint8_t* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const uint8_t len_bits)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 8U);
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2108      	movs	r1, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fbe9 	bl	8000f04 <nunavutChooseMin>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]
    uint8_t       val = nunavutGetU8(buf, buf_size_bytes, off_bits, sat);
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff fe2f 	bl	80013a0 <nunavutGetU8>
 8001742:	4603      	mov	r3, r0
 8001744:	75bb      	strb	r3, [r7, #22]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <nunavutGetI8+0x6e>
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	2200      	movs	r2, #0
 8001750:	4698      	mov	r8, r3
 8001752:	4691      	mov	r9, r2
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1c3 0120 	rsb	r1, r3, #32
 800175c:	f1a3 0220 	sub.w	r2, r3, #32
 8001760:	fa28 f403 	lsr.w	r4, r8, r3
 8001764:	fa09 f101 	lsl.w	r1, r9, r1
 8001768:	430c      	orrs	r4, r1
 800176a:	fa29 f202 	lsr.w	r2, r9, r2
 800176e:	4314      	orrs	r4, r2
 8001770:	fa29 f503 	lsr.w	r5, r9, r3
 8001774:	f004 0a01 	and.w	sl, r4, #1
 8001778:	f04f 0b00 	mov.w	fp, #0
 800177c:	ea5a 030b 	orrs.w	r3, sl, fp
 8001780:	d001      	beq.n	8001786 <nunavutGetI8+0x6e>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <nunavutGetI8+0x70>
 8001786:	2300      	movs	r3, #0
 8001788:	757b      	strb	r3, [r7, #21]
 800178a:	7d7b      	ldrb	r3, [r7, #21]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	757b      	strb	r3, [r7, #21]
    val = ((sat < 8U) && neg) ? (uint8_t)(val | ~((1U << sat) - 1U)) : val;  // Sign extension
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b07      	cmp	r3, #7
 8001796:	d80d      	bhi.n	80017b4 <nunavutGetI8+0x9c>
 8001798:	7d7b      	ldrb	r3, [r7, #21]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <nunavutGetI8+0x9c>
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	425b      	negs	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	7dbb      	ldrb	r3, [r7, #22]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e000      	b.n	80017b6 <nunavutGetI8+0x9e>
 80017b4:	7dbb      	ldrb	r3, [r7, #22]
 80017b6:	75bb      	strb	r3, [r7, #22]
    return neg ? (int8_t)((-(int8_t)(uint8_t) ~val) - 1) : (int8_t) val;
 80017b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017c6 <nunavutGetI16>:

static inline int16_t nunavutGetI16(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 80017c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 16U);
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fb92 	bl	8000f04 <nunavutChooseMin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
    uint16_t      val = nunavutGetU16(buf, buf_size_bytes, off_bits, sat);
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff fe18 	bl	8001420 <nunavutGetU16>
 80017f0:	4603      	mov	r3, r0
 80017f2:	82bb      	strh	r3, [r7, #20]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01c      	beq.n	8001834 <nunavutGetI16+0x6e>
 80017fa:	8abb      	ldrh	r3, [r7, #20]
 80017fc:	2200      	movs	r2, #0
 80017fe:	4698      	mov	r8, r3
 8001800:	4691      	mov	r9, r2
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	3b01      	subs	r3, #1
 8001806:	f1c3 0120 	rsb	r1, r3, #32
 800180a:	f1a3 0220 	sub.w	r2, r3, #32
 800180e:	fa28 f403 	lsr.w	r4, r8, r3
 8001812:	fa09 f101 	lsl.w	r1, r9, r1
 8001816:	430c      	orrs	r4, r1
 8001818:	fa29 f202 	lsr.w	r2, r9, r2
 800181c:	4314      	orrs	r4, r2
 800181e:	fa29 f503 	lsr.w	r5, r9, r3
 8001822:	f004 0a01 	and.w	sl, r4, #1
 8001826:	f04f 0b00 	mov.w	fp, #0
 800182a:	ea5a 030b 	orrs.w	r3, sl, fp
 800182e:	d001      	beq.n	8001834 <nunavutGetI16+0x6e>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <nunavutGetI16+0x70>
 8001834:	2300      	movs	r3, #0
 8001836:	74fb      	strb	r3, [r7, #19]
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	74fb      	strb	r3, [r7, #19]
    val = ((sat < 16U) && neg) ? (uint16_t)(val | ~((1U << sat) - 1U)) : val;  // Sign extension
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	d80d      	bhi.n	8001862 <nunavutGetI16+0x9c>
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <nunavutGetI16+0x9c>
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2201      	movs	r2, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	b29b      	uxth	r3, r3
 8001856:	425b      	negs	r3, r3
 8001858:	b29a      	uxth	r2, r3
 800185a:	8abb      	ldrh	r3, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	e000      	b.n	8001864 <nunavutGetI16+0x9e>
 8001862:	8abb      	ldrh	r3, [r7, #20]
 8001864:	82bb      	strh	r3, [r7, #20]
    return neg ? (int16_t)((-(int16_t)(uint16_t) ~val) - 1) : (int16_t) val;
 8001866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001874 <nunavutGetI32>:

static inline int32_t nunavutGetI32(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 32U);
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2120      	movs	r1, #32
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb3b 	bl	8000f04 <nunavutChooseMin>
 800188e:	4603      	mov	r3, r0
 8001890:	77fb      	strb	r3, [r7, #31]
    uint32_t      val = nunavutGetU32(buf, buf_size_bytes, off_bits, sat);
 8001892:	7ffb      	ldrb	r3, [r7, #31]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff fe07 	bl	80014ac <nunavutGetU32>
 800189e:	61b8      	str	r0, [r7, #24]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 80018a0:	7ffb      	ldrb	r3, [r7, #31]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01c      	beq.n	80018e0 <nunavutGetI32+0x6c>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2200      	movs	r2, #0
 80018aa:	4698      	mov	r8, r3
 80018ac:	4691      	mov	r9, r2
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	f1c3 0120 	rsb	r1, r3, #32
 80018b6:	f1a3 0220 	sub.w	r2, r3, #32
 80018ba:	fa28 f403 	lsr.w	r4, r8, r3
 80018be:	fa09 f101 	lsl.w	r1, r9, r1
 80018c2:	430c      	orrs	r4, r1
 80018c4:	fa29 f202 	lsr.w	r2, r9, r2
 80018c8:	4314      	orrs	r4, r2
 80018ca:	fa29 f503 	lsr.w	r5, r9, r3
 80018ce:	f004 0a01 	and.w	sl, r4, #1
 80018d2:	f04f 0b00 	mov.w	fp, #0
 80018d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80018da:	d001      	beq.n	80018e0 <nunavutGetI32+0x6c>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <nunavutGetI32+0x6e>
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
    val = ((sat < 32U) && neg) ? (uint32_t)(val | ~((1UL << sat) - 1U)) : val;  // Sign extension
 80018ec:	7ffb      	ldrb	r3, [r7, #31]
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	d80a      	bhi.n	8001908 <nunavutGetI32+0x94>
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <nunavutGetI32+0x94>
 80018f8:	7ffb      	ldrb	r3, [r7, #31]
 80018fa:	2201      	movs	r2, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	425a      	negs	r2, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	e000      	b.n	800190a <nunavutGetI32+0x96>
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	61bb      	str	r3, [r7, #24]
    return neg ? (int32_t)((-(int32_t) ~val) - 1) : (int32_t) val;
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001918 <nunavutGetI64>:

static inline int64_t nunavutGetI64(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 8001918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191c:	b08f      	sub	sp, #60	; 0x3c
 800191e:	af00      	add	r7, sp, #0
 8001920:	61f8      	str	r0, [r7, #28]
 8001922:	61b9      	str	r1, [r7, #24]
 8001924:	617a      	str	r2, [r7, #20]
 8001926:	74fb      	strb	r3, [r7, #19]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 64U);
 8001928:	7cfb      	ldrb	r3, [r7, #19]
 800192a:	2140      	movs	r1, #64	; 0x40
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fae9 	bl	8000f04 <nunavutChooseMin>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint64_t      val = nunavutGetU64(buf, buf_size_bytes, off_bits, sat);
 8001938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	69f8      	ldr	r0, [r7, #28]
 8001942:	f7ff fdfd 	bl	8001540 <nunavutGetU64>
 8001946:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 800194a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01e      	beq.n	8001990 <nunavutGetI64+0x78>
 8001952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800195c:	f1c0 0620 	rsb	r6, r0, #32
 8001960:	f1a0 0120 	sub.w	r1, r0, #32
 8001964:	fa22 f400 	lsr.w	r4, r2, r0
 8001968:	fa03 f606 	lsl.w	r6, r3, r6
 800196c:	4334      	orrs	r4, r6
 800196e:	fa23 f101 	lsr.w	r1, r3, r1
 8001972:	430c      	orrs	r4, r1
 8001974:	fa23 f500 	lsr.w	r5, r3, r0
 8001978:	f004 0301 	and.w	r3, r4, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001986:	460b      	mov	r3, r1
 8001988:	4313      	orrs	r3, r2
 800198a:	d001      	beq.n	8001990 <nunavutGetI64+0x78>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <nunavutGetI64+0x7a>
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    val = ((sat < 64U) && neg) ? (uint64_t)(val | ~((1ULL << sat) - 1U)) : val;  // Sign extension
 80019a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019a6:	2b3f      	cmp	r3, #63	; 0x3f
 80019a8:	d82b      	bhi.n	8001a02 <nunavutGetI64+0xea>
 80019aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d027      	beq.n	8001a02 <nunavutGetI64+0xea>
 80019b2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80019b6:	f04f 0201 	mov.w	r2, #1
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f1a1 0420 	sub.w	r4, r1, #32
 80019c2:	f1c1 0020 	rsb	r0, r1, #32
 80019c6:	fa03 f901 	lsl.w	r9, r3, r1
 80019ca:	fa02 f404 	lsl.w	r4, r2, r4
 80019ce:	ea49 0904 	orr.w	r9, r9, r4
 80019d2:	fa22 f000 	lsr.w	r0, r2, r0
 80019d6:	ea49 0900 	orr.w	r9, r9, r0
 80019da:	fa02 f801 	lsl.w	r8, r2, r1
 80019de:	2300      	movs	r3, #0
 80019e0:	f1d8 0200 	rsbs	r2, r8, #0
 80019e4:	603a      	str	r2, [r7, #0]
 80019e6:	eb63 0309 	sbc.w	r3, r3, r9
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f4:	4621      	mov	r1, r4
 80019f6:	ea41 0a02 	orr.w	sl, r1, r2
 80019fa:	4629      	mov	r1, r5
 80019fc:	ea41 0b03 	orr.w	fp, r1, r3
 8001a00:	e001      	b.n	8001a06 <nunavutGetI64+0xee>
 8001a02:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001a06:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    return neg ? (int64_t)((-(int64_t) ~val) - 1) : (int64_t) val;
 8001a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	373c      	adds	r7, #60	; 0x3c
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001a1c <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b08b      	sub	sp, #44	; 0x2c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <nunavutFloat16Pack+0xb4>)
 8001a28:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8001a2a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001a2e:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8001a30:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8001a34:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8001a36:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8001a3a:	613b      	str	r3, [r7, #16]
    in.real = value;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a46:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d313      	bcc.n	8001a84 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8001a66:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8001a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a6c:	e023      	b.n	8001ab6 <nunavutFloat16Pack+0x9a>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d902      	bls.n	8001a7c <nunavutFloat16Pack+0x60>
 8001a76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a7a:	e001      	b.n	8001a80 <nunavutFloat16Pack+0x64>
 8001a7c:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001a80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a82:	e018      	b.n	8001ab6 <nunavutFloat16Pack+0x9a>
        }
    }
    else
    {
        in.bits &= round_mask;
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8001a8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d901      	bls.n	8001ab0 <nunavutFloat16Pack+0x94>
        {
            in.bits = f16inf.bits;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 8001ac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	372c      	adds	r7, #44	; 0x2c
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	fffff000 	.word	0xfffff000

08001ad4 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8001ade:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 8001ae2:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8001ae4:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8001ae8:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	035a      	lsls	r2, r3, #13
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <nunavutFloat16Unpack+0x6c>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8001af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8001b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	db03      	blt.n	8001b1e <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8001b1c:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	041b      	lsls	r3, r3, #16
 8001b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
    return out.real;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	ee07 3a90 	vmov	s15, r3
}
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	0fffe000 	.word	0x0fffe000

08001b44 <nunavutSetF16>:
static inline int8_t nunavutSetF16(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const float value)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	ed87 0a00 	vstr	s0, [r7]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, nunavutFloat16Pack(value), 16U);
 8001b54:	ed97 0a00 	vldr	s0, [r7]
 8001b58:	f7ff ff60 	bl	8001a1c <nunavutFloat16Pack>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2200      	movs	r2, #0
 8001b62:	461c      	mov	r4, r3
 8001b64:	4615      	mov	r5, r2
 8001b66:	2310      	movs	r3, #16
 8001b68:	9302      	str	r3, [sp, #8]
 8001b6a:	e9cd 4500 	strd	r4, r5, [sp]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff fb78 	bl	8001268 <nunavutSetUxx>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}

08001b82 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8001b8e:	2310      	movs	r3, #16
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff fc43 	bl	8001420 <nunavutGetU16>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff99 	bl	8001ad4 <nunavutFloat16Unpack>
 8001ba2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <nunavutSetF32>:
static inline int8_t nunavutSetF32(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const float value)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	ed87 0a00 	vstr	s0, [r7]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        float fl;
        uint32_t in;
    } const tmp = {value};  // NOSONAR
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	617b      	str	r3, [r7, #20]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, tmp.in, sizeof(tmp) * 8U);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	461c      	mov	r4, r3
 8001bca:	4615      	mov	r5, r2
 8001bcc:	2320      	movs	r3, #32
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fb45 	bl	8001268 <nunavutSetUxx>
 8001bde:	4603      	mov	r3, r0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}

08001be8 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff fc56 	bl	80014ac <nunavutGetU32>
 8001c00:	4603      	mov	r3, r0
 8001c02:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	ee07 3a90 	vmov	s15, r3
}
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <nunavutSetF64>:
static inline int8_t nunavutSetF64(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const double value)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        double fl;
        uint64_t in;
    } const tmp = {value};  // NOSONAR
 8001c20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, tmp.in, sizeof(tmp) * 8U);
 8001c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c2c:	2140      	movs	r1, #64	; 0x40
 8001c2e:	9102      	str	r1, [sp, #8]
 8001c30:	e9cd 2300 	strd	r2, r3, [sp]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fb15 	bl	8001268 <nunavutSetUxx>
 8001c3e:	4603      	mov	r3, r0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <nunavutGetF64>:

static inline double nunavutGetF64(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint64_t in;
        double fl;
    } const tmp = {nunavutGetU64(buf, buf_size_bytes, off_bits, 64U)};
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fc70 	bl	8001540 <nunavutGetU64>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return tmp.fl;
 8001c68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <uavcan_register_Name_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_serialize_(
    const uavcan_register_Name_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b092      	sub	sp, #72	; 0x48
 8001c7e:	af04      	add	r7, sp, #16
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24
 8001c82:	6239      	str	r1, [r7, #32]
 8001c84:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <uavcan_register_Name_1_0_serialize_+0x20>
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <uavcan_register_Name_1_0_serialize_+0x20>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <uavcan_register_Name_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001c98:	f06f 0301 	mvn.w	r3, #1
 8001c9c:	e0f5      	b.n	8001e8a <uavcan_register_Name_1_0_serialize_+0x212>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cac:	d202      	bcs.n	8001cb4 <uavcan_register_Name_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001cae:	f06f 0302 	mvn.w	r3, #2
 8001cb2:	e0ea      	b.n	8001e8a <uavcan_register_Name_1_0_serialize_+0x212>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated uint8[<=255] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <uavcan_register_Name_1_0_serialize_+0x56>
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001cc4:	4a74      	ldr	r2, [pc, #464]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001cc6:	2181      	movs	r1, #129	; 0x81
 8001cc8:	4874      	ldr	r0, [pc, #464]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001cca:	f00c ff23 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	617a      	str	r2, [r7, #20]
 8001cd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	f513 6800 	adds.w	r8, r3, #2048	; 0x800
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	f143 0900 	adc.w	r9, r3, #0
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	2200      	movs	r2, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	60fa      	str	r2, [r7, #12]
 8001cf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4543      	cmp	r3, r8
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	eb73 0309 	sbcs.w	r3, r3, r9
 8001cfe:	d205      	bcs.n	8001d0c <uavcan_register_Name_1_0_serialize_+0x94>
 8001d00:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <uavcan_register_Name_1_0_serialize_+0x228>)
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d04:	2182      	movs	r1, #130	; 0x82
 8001d06:	4865      	ldr	r0, [pc, #404]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d08:	f00c ff04 	bl	800eb14 <__assert_func>
        if (obj->name.count > 255)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d902      	bls.n	8001d1c <uavcan_register_Name_1_0_serialize_+0xa4>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001d16:	f06f 0309 	mvn.w	r3, #9
 8001d1a:	e0b6      	b.n	8001e8a <uavcan_register_Name_1_0_serialize_+0x212>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	6a3a      	ldr	r2, [r7, #32]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	3308      	adds	r3, #8
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <uavcan_register_Name_1_0_serialize_+0xd2>
 8001d3e:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001d40:	4a55      	ldr	r2, [pc, #340]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d42:	218a      	movs	r1, #138	; 0x8a
 8001d44:	4855      	ldr	r0, [pc, #340]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d46:	f00c fee5 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4e:	e033      	b.n	8001db8 <uavcan_register_Name_1_0_serialize_+0x140>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <uavcan_register_Name_1_0_serialize_+0xee>
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d5e:	218d      	movs	r1, #141	; 0x8d
 8001d60:	484e      	ldr	r0, [pc, #312]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d62:	f00c fed7 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	2200      	movs	r2, #0
 8001d6a:	469a      	mov	sl, r3
 8001d6c:	4693      	mov	fp, r2
 8001d6e:	f11a 0408 	adds.w	r4, sl, #8
 8001d72:	f14b 0500 	adc.w	r5, fp, #0
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d84:	460b      	mov	r3, r1
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	4613      	mov	r3, r2
 8001d8a:	41ab      	sbcs	r3, r5
 8001d8c:	d205      	bcs.n	8001d9a <uavcan_register_Name_1_0_serialize_+0x122>
 8001d8e:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <uavcan_register_Name_1_0_serialize_+0x22c>)
 8001d90:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d92:	218e      	movs	r1, #142	; 0x8e
 8001d94:	4841      	ldr	r0, [pc, #260]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d96:	f00c febd 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->name.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	4413      	add	r3, r2
 8001da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da6:	440a      	add	r2, r1
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	3308      	adds	r3, #8
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	3301      	adds	r3, #1
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3c5      	bcc.n	8001d50 <uavcan_register_Name_1_0_serialize_+0xd8>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03a      	beq.n	8001e44 <uavcan_register_Name_1_0_serialize_+0x1cc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f1c3 0308 	rsb	r3, r3, #8
 8001ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <uavcan_register_Name_1_0_serialize_+0x17c>
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <uavcan_register_Name_1_0_serialize_+0x230>)
 8001dea:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001dec:	2197      	movs	r1, #151	; 0x97
 8001dee:	482b      	ldr	r0, [pc, #172]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001df0:	f00c fe90 	bl	800eb14 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9cd 2300 	strd	r2, r3, [sp]
 8001e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0a:	6a38      	ldr	r0, [r7, #32]
 8001e0c:	f7ff fa2c 	bl	8001268 <nunavutSetUxx>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err0_ < 0)
 8001e16:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da02      	bge.n	8001e24 <uavcan_register_Name_1_0_serialize_+0x1ac>
        {
            return _err0_;
 8001e1e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001e22:	e032      	b.n	8001e8a <uavcan_register_Name_1_0_serialize_+0x212>
        }
        offset_bits += _pad0_;
 8001e24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e2a:	4413      	add	r3, r2
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <uavcan_register_Name_1_0_serialize_+0x1cc>
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e3c:	219e      	movs	r1, #158	; 0x9e
 8001e3e:	4817      	ldr	r0, [pc, #92]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e40:	f00c fe68 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	2b07      	cmp	r3, #7
 8001e48:	d805      	bhi.n	8001e56 <uavcan_register_Name_1_0_serialize_+0x1de>
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <uavcan_register_Name_1_0_serialize_+0x234>)
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e4e:	21a1      	movs	r1, #161	; 0xa1
 8001e50:	4812      	ldr	r0, [pc, #72]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e52:	f00c fe5f 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 8001e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e5c:	d905      	bls.n	8001e6a <uavcan_register_Name_1_0_serialize_+0x1f2>
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <uavcan_register_Name_1_0_serialize_+0x238>)
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e62:	21a2      	movs	r1, #162	; 0xa2
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e66:	f00c fe55 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <uavcan_register_Name_1_0_serialize_+0x208>
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e78:	21a3      	movs	r1, #163	; 0xa3
 8001e7a:	4808      	ldr	r0, [pc, #32]	; (8001e9c <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e7c:	f00c fe4a 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e94:	08011768 	.word	0x08011768
 8001e98:	08013c10 	.word	0x08013c10
 8001e9c:	08011780 	.word	0x08011780
 8001ea0:	080117fc 	.word	0x080117fc
 8001ea4:	08011830 	.word	0x08011830
 8001ea8:	08011860 	.word	0x08011860
 8001eac:	0801186c 	.word	0x0801186c
 8001eb0:	08011880 	.word	0x08011880

08001eb4 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <uavcan_register_Name_1_0_deserialize_+0x26>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <uavcan_register_Name_1_0_deserialize_+0x26>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001eda:	f06f 0301 	mvn.w	r3, #1
 8001ede:	e093      	b.n	8002008 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    if (buffer == NULL)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <uavcan_register_Name_1_0_deserialize_+0x15c>)
 8001ee8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <uavcan_register_Name_1_0_deserialize_+0x5c>
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001f06:	4a44      	ldr	r2, [pc, #272]	; (8002018 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001f08:	21ca      	movs	r1, #202	; 0xca
 8001f0a:	4844      	ldr	r0, [pc, #272]	; (800201c <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001f0c:	f00c fe02 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3308      	adds	r3, #8
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d309      	bcc.n	8001f2e <uavcan_register_Name_1_0_deserialize_+0x7a>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001f2c:	e003      	b.n	8001f36 <uavcan_register_Name_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->name.count = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	61fb      	str	r3, [r7, #28]
    if (out_obj->name.count > 255U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d902      	bls.n	8001f4c <uavcan_register_Name_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001f46:	f06f 0309 	mvn.w	r3, #9
 8001f4a:	e05d      	b.n	8002008 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <uavcan_register_Name_1_0_deserialize_+0xae>
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001f5a:	21d9      	movs	r1, #217	; 0xd9
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001f5e:	f00c fdd9 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e025      	b.n	8001fb4 <uavcan_register_Name_1_0_deserialize_+0x100>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <uavcan_register_Name_1_0_deserialize_+0xca>
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001f74:	4a28      	ldr	r2, [pc, #160]	; (8002018 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001f76:	21dc      	movs	r1, #220	; 0xdc
 8001f78:	4828      	ldr	r0, [pc, #160]	; (800201c <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001f7a:	f00c fdcb 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d30a      	bcc.n	8001f9e <uavcan_register_Name_1_0_deserialize_+0xea>
        {
            out_obj->name.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	7819      	ldrb	r1, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	460a      	mov	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e004      	b.n	8001fa8 <uavcan_register_Name_1_0_deserialize_+0xf4>
        }
        else
        {
            out_obj->name.elements[_index1_] = 0U;
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	3308      	adds	r3, #8
 8001fac:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3d3      	bcc.n	8001f68 <uavcan_register_Name_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	f023 0307 	bic.w	r3, r3, #7
 8001fc8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <uavcan_register_Name_1_0_deserialize_+0x12c>
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001fd8:	21e8      	movs	r1, #232	; 0xe8
 8001fda:	4810      	ldr	r0, [pc, #64]	; (800201c <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001fdc:	f00c fd9a 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	69f8      	ldr	r0, [r7, #28]
 8001fe4:	f7fe ff8e 	bl	8000f04 <nunavutChooseMin>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d205      	bcs.n	8002006 <uavcan_register_Name_1_0_deserialize_+0x152>
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <uavcan_register_Name_1_0_deserialize_+0x16c>)
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001ffe:	21ea      	movs	r1, #234	; 0xea
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <uavcan_register_Name_1_0_deserialize_+0x168>)
 8002002:	f00c fd87 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08011898 	.word	0x08011898
 8002014:	08011768 	.word	0x08011768
 8002018:	08013bb8 	.word	0x08013bb8
 800201c:	08011780 	.word	0x08011780
 8002020:	0801189c 	.word	0x0801189c

08002024 <uavcan_register_List_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Request_1_0_deserialize_(
    uavcan_register_List_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <uavcan_register_List_Request_1_0_deserialize_+0x26>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <uavcan_register_List_Request_1_0_deserialize_+0x26>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <uavcan_register_List_Request_1_0_deserialize_+0x2c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <uavcan_register_List_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800204a:	f06f 0301 	mvn.w	r3, #1
 800204e:	e048      	b.n	80020e2 <uavcan_register_List_Request_1_0_deserialize_+0xbe>
    }
    if (buffer == NULL)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <uavcan_register_List_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <uavcan_register_List_Request_1_0_deserialize_+0xc8>)
 8002058:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
    // saturated uint16 index
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <uavcan_register_List_Request_1_0_deserialize_+0x5c>
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 8002078:	21bf      	movs	r1, #191	; 0xbf
 800207a:	481f      	ldr	r0, [pc, #124]	; (80020f8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 800207c:	f00c fd4a 	bl	800eb14 <__assert_func>
    out_obj->index = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8002080:	2310      	movs	r3, #16
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	69f9      	ldr	r1, [r7, #28]
 8002086:	68b8      	ldr	r0, [r7, #8]
 8002088:	f7ff f9ca 	bl	8001420 <nunavutGetU16>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	801a      	strh	r2, [r3, #0]
    offset_bits += 16U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3310      	adds	r3, #16
 8002098:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3307      	adds	r3, #7
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <uavcan_register_List_Request_1_0_deserialize_+0x96>
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 80020b0:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 80020b2:	21c3      	movs	r1, #195	; 0xc3
 80020b4:	4810      	ldr	r0, [pc, #64]	; (80020f8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 80020b6:	f00c fd2d 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f7fe ff21 	bl	8000f04 <nunavutChooseMin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d205      	bcs.n	80020e0 <uavcan_register_List_Request_1_0_deserialize_+0xbc>
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <uavcan_register_List_Request_1_0_deserialize_+0xd8>)
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 80020d8:	21c5      	movs	r1, #197	; 0xc5
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 80020dc:	f00c fd1a 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	08011898 	.word	0x08011898
 80020f0:	08011768 	.word	0x08011768
 80020f4:	08013b18 	.word	0x08013b18
 80020f8:	080118c8 	.word	0x080118c8
 80020fc:	0801189c 	.word	0x0801189c

08002100 <uavcan_register_List_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_serialize_(
    const uavcan_register_List_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b08c      	sub	sp, #48	; 0x30
 8002106:	af04      	add	r7, sp, #16
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <uavcan_register_List_Response_1_0_serialize_+0x20>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <uavcan_register_List_Response_1_0_serialize_+0x20>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <uavcan_register_List_Response_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002120:	f06f 0301 	mvn.w	r3, #1
 8002124:	e0f7      	b.n	8002316 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002134:	d202      	bcs.n	800213c <uavcan_register_List_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002136:	f06f 0302 	mvn.w	r3, #2
 800213a:	e0ec      	b.n	8002316 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    {   // uavcan.register.Name.1.0 name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <uavcan_register_List_Response_1_0_serialize_+0x58>
 800214a:	4b75      	ldr	r3, [pc, #468]	; (8002320 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 800214c:	4a75      	ldr	r2, [pc, #468]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 800214e:	f240 1111 	movw	r1, #273	; 0x111
 8002152:	4875      	ldr	r0, [pc, #468]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002154:	f00c fcde 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <uavcan_register_List_Response_1_0_serialize_+0x70>
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8002164:	4a6f      	ldr	r2, [pc, #444]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002166:	f44f 7189 	mov.w	r1, #274	; 0x112
 800216a:	486f      	ldr	r0, [pc, #444]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800216c:	f00c fcd2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2200      	movs	r2, #0
 8002174:	469a      	mov	sl, r3
 8002176:	4693      	mov	fp, r2
 8002178:	f51a 6400 	adds.w	r4, sl, #2048	; 0x800
 800217c:	f14b 0500 	adc.w	r5, fp, #0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	2200      	movs	r2, #0
 8002186:	4698      	mov	r8, r3
 8002188:	4691      	mov	r9, r2
 800218a:	45a0      	cmp	r8, r4
 800218c:	eb79 0305 	sbcs.w	r3, r9, r5
 8002190:	d206      	bcs.n	80021a0 <uavcan_register_List_Response_1_0_serialize_+0xa0>
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <uavcan_register_List_Response_1_0_serialize_+0x22c>)
 8002194:	4a63      	ldr	r2, [pc, #396]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002196:	f240 1113 	movw	r1, #275	; 0x113
 800219a:	4863      	ldr	r0, [pc, #396]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800219c:	f00c fcba 	bl	800eb14 <__assert_func>
        size_t _size_bytes0_ = 256UL;  // Nested object (max) size, in bytes.
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <uavcan_register_List_Response_1_0_serialize_+0xbe>
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 80021b2:	4a5c      	ldr	r2, [pc, #368]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80021b4:	f240 1115 	movw	r1, #277	; 0x115
 80021b8:	485b      	ldr	r0, [pc, #364]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80021ba:	f00c fcab 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d206      	bcs.n	80021da <uavcan_register_List_Response_1_0_serialize_+0xda>
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <uavcan_register_List_Response_1_0_serialize_+0x230>)
 80021ce:	4a55      	ldr	r2, [pc, #340]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80021d0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80021d4:	4854      	ldr	r0, [pc, #336]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80021d6:	f00c fc9d 	bl	800eb14 <__assert_func>
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 80021da:	68f8      	ldr	r0, [r7, #12]
            &obj->name, &buffer[offset_bits / 8U], &_size_bytes0_);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 80021e4:	f107 0210 	add.w	r2, r7, #16
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff fd45 	bl	8001c78 <uavcan_register_Name_1_0_serialize_>
 80021ee:	4603      	mov	r3, r0
 80021f0:	75fb      	strb	r3, [r7, #23]
        if (_err2_ < 0)
 80021f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da02      	bge.n	8002200 <uavcan_register_List_Response_1_0_serialize_+0x100>
        {
            return _err2_;
 80021fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021fe:	e08a      	b.n	8002316 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) >= 8ULL);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	2b07      	cmp	r3, #7
 8002206:	d806      	bhi.n	8002216 <uavcan_register_List_Response_1_0_serialize_+0x116>
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <uavcan_register_List_Response_1_0_serialize_+0x234>)
 800220a:	4a46      	ldr	r2, [pc, #280]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 800220c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002210:	4845      	ldr	r0, [pc, #276]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002212:	f00c fc7f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) <= 2048ULL);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800221e:	d906      	bls.n	800222e <uavcan_register_List_Response_1_0_serialize_+0x12e>
 8002220:	4b45      	ldr	r3, [pc, #276]	; (8002338 <uavcan_register_List_Response_1_0_serialize_+0x238>)
 8002222:	4a40      	ldr	r2, [pc, #256]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002224:	f240 111f 	movw	r1, #287	; 0x11f
 8002228:	483f      	ldr	r0, [pc, #252]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800222a:	f00c fc73 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	429a      	cmp	r2, r3
 8002240:	d906      	bls.n	8002250 <uavcan_register_List_Response_1_0_serialize_+0x150>
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <uavcan_register_List_Response_1_0_serialize_+0x23c>)
 8002244:	4a37      	ldr	r2, [pc, #220]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002246:	f240 1121 	movw	r1, #289	; 0x121
 800224a:	4837      	ldr	r0, [pc, #220]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800224c:	f00c fc62 	bl	800eb14 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	2b00      	cmp	r3, #0
 8002258:	d037      	beq.n	80022ca <uavcan_register_List_Response_1_0_serialize_+0x1ca>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f1c3 0308 	rsb	r3, r3, #8
 8002268:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad1_ > 0);
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <uavcan_register_List_Response_1_0_serialize_+0x17e>
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <uavcan_register_List_Response_1_0_serialize_+0x240>)
 8002272:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002274:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002278:	482b      	ldr	r0, [pc, #172]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800227a:	f00c fc4b 	bl	800eb14 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800227e:	7dbb      	ldrb	r3, [r7, #22]
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9cd 2300 	strd	r2, r3, [sp]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	69b9      	ldr	r1, [r7, #24]
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f7fe ffe8 	bl	8001268 <nunavutSetUxx>
 8002298:	4603      	mov	r3, r0
 800229a:	757b      	strb	r3, [r7, #21]
        if (_err3_ < 0)
 800229c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da02      	bge.n	80022aa <uavcan_register_List_Response_1_0_serialize_+0x1aa>
        {
            return _err3_;
 80022a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022a8:	e035      	b.n	8002316 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        offset_bits += _pad1_;
 80022aa:	7dbb      	ldrb	r3, [r7, #22]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <uavcan_register_List_Response_1_0_serialize_+0x1ca>
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80022c0:	f240 112d 	movw	r1, #301	; 0x12d
 80022c4:	4818      	ldr	r0, [pc, #96]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80022c6:	f00c fc25 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b07      	cmp	r3, #7
 80022ce:	d806      	bhi.n	80022de <uavcan_register_List_Response_1_0_serialize_+0x1de>
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <uavcan_register_List_Response_1_0_serialize_+0x244>)
 80022d2:	4a14      	ldr	r2, [pc, #80]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80022d4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80022d8:	4813      	ldr	r0, [pc, #76]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80022da:	f00c fc1b 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e4:	d906      	bls.n	80022f4 <uavcan_register_List_Response_1_0_serialize_+0x1f4>
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <uavcan_register_List_Response_1_0_serialize_+0x248>)
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80022ea:	f240 1131 	movw	r1, #305	; 0x131
 80022ee:	480e      	ldr	r0, [pc, #56]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80022f0:	f00c fc10 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <uavcan_register_List_Response_1_0_serialize_+0x20c>
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002302:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002308:	f00c fc04 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002320:	08011768 	.word	0x08011768
 8002324:	08013be0 	.word	0x08013be0
 8002328:	080118c8 	.word	0x080118c8
 800232c:	080117fc 	.word	0x080117fc
 8002330:	08011944 	.word	0x08011944
 8002334:	0801197c 	.word	0x0801197c
 8002338:	0801199c 	.word	0x0801199c
 800233c:	080119bc 	.word	0x080119bc
 8002340:	080119e4 	.word	0x080119e4
 8002344:	0801186c 	.word	0x0801186c
 8002348:	08011880 	.word	0x08011880

0800234c <uavcan_register_List_Response_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_deserialize_(
    uavcan_register_List_Response_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <uavcan_register_List_Response_1_0_deserialize_+0x26>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <uavcan_register_List_Response_1_0_deserialize_+0x26>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002372:	f06f 0301 	mvn.w	r3, #1
 8002376:	e078      	b.n	800246a <uavcan_register_List_Response_1_0_deserialize_+0x11e>
    }
    if (buffer == NULL)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <uavcan_register_List_Response_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <uavcan_register_List_Response_1_0_deserialize_+0x128>)
 8002380:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <uavcan_register_List_Response_1_0_deserialize_+0x5e>
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 800239e:	4a37      	ldr	r2, [pc, #220]	; (800247c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 80023a0:	f240 1159 	movw	r1, #345	; 0x159
 80023a4:	4836      	ldr	r0, [pc, #216]	; (8002480 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 80023a6:	f00c fbb5 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <uavcan_register_List_Response_1_0_deserialize_+0x76>
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 80023b8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80023bc:	4830      	ldr	r0, [pc, #192]	; (8002480 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 80023be:	f00c fba9 	bl	800eb14 <__assert_func>
    {
        size_t _size_bytes1_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fd9b 	bl	8000f04 <nunavutChooseMin>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <uavcan_register_List_Response_1_0_deserialize_+0xa2>
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 80023e2:	4a26      	ldr	r2, [pc, #152]	; (800247c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 80023e4:	f240 115d 	movw	r1, #349	; 0x15d
 80023e8:	4825      	ldr	r0, [pc, #148]	; (8002480 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 80023ea:	f00c fb93 	bl	800eb14 <__assert_func>
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80023ee:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes1_);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	f107 0214 	add.w	r2, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7ff fd59 	bl	8001eb4 <uavcan_register_Name_1_0_deserialize_>
 8002402:	4603      	mov	r3, r0
 8002404:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8002406:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800240a:	2b00      	cmp	r3, #0
 800240c:	da02      	bge.n	8002414 <uavcan_register_List_Response_1_0_deserialize_+0xc8>
        {
            return _err4_;
 800240e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002412:	e02a      	b.n	800246a <uavcan_register_List_Response_1_0_deserialize_+0x11e>
        }
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested serialized representation.
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3307      	adds	r3, #7
 8002422:	f023 0307 	bic.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <uavcan_register_List_Response_1_0_deserialize_+0xf4>
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8002436:	f240 1167 	movw	r1, #359	; 0x167
 800243a:	4811      	ldr	r0, [pc, #68]	; (8002480 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 800243c:	f00c fb6a 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002440:	6a39      	ldr	r1, [r7, #32]
 8002442:	69f8      	ldr	r0, [r7, #28]
 8002444:	f7fe fd5e 	bl	8000f04 <nunavutChooseMin>
 8002448:	4603      	mov	r3, r0
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	429a      	cmp	r2, r3
 8002458:	d206      	bcs.n	8002468 <uavcan_register_List_Response_1_0_deserialize_+0x11c>
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <uavcan_register_List_Response_1_0_deserialize_+0x138>)
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 800245e:	f240 1169 	movw	r1, #361	; 0x169
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8002464:	f00c fb56 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	08011898 	.word	0x08011898
 8002478:	08011768 	.word	0x08011768
 800247c:	08013b88 	.word	0x08013b88
 8002480:	080118c8 	.word	0x080118c8
 8002484:	0801189c 	.word	0x0801189c

08002488 <uavcan_register_List_Response_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_List_Response_1_0_initialize_(uavcan_register_List_Response_1_0* const out_obj)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <uavcan_register_List_Response_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_List_Response_1_0_deserialize_(out_obj, &buf, &size_bytes);
 800249e:	f107 0210 	add.w	r2, r7, #16
 80024a2:	f107 030f 	add.w	r3, r7, #15
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff4f 	bl	800234c <uavcan_register_List_Response_1_0_deserialize_>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80024b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da06      	bge.n	80024c8 <uavcan_register_List_Response_1_0_initialize_+0x40>
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <uavcan_register_List_Response_1_0_initialize_+0x48>)
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <uavcan_register_List_Response_1_0_initialize_+0x4c>)
 80024be:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <uavcan_register_List_Response_1_0_initialize_+0x50>)
 80024c4:	f00c fb26 	bl	800eb14 <__assert_func>
        (void) err;
    }
}
 80024c8:	bf00      	nop
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	080119f0 	.word	0x080119f0
 80024d4:	08013b58 	.word	0x08013b58
 80024d8:	080118c8 	.word	0x080118c8

080024dc <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b08c      	sub	sp, #48	; 0x30
 80024e2:	af04      	add	r7, sp, #16
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <uavcan_node_Health_1_0_serialize_+0x20>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <uavcan_node_Health_1_0_serialize_+0x20>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80024fc:	f06f 0301 	mvn.w	r3, #1
 8002500:	e092      	b.n	8002628 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	2b07      	cmp	r3, #7
 800250e:	d802      	bhi.n	8002516 <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002510:	f06f 0302 	mvn.w	r3, #2
 8002514:	e088      	b.n	8002628 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <uavcan_node_Health_1_0_serialize_+0x54>
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002526:	4a44      	ldr	r2, [pc, #272]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002528:	2185      	movs	r1, #133	; 0x85
 800252a:	4844      	ldr	r0, [pc, #272]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 800252c:	f00c faf2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2200      	movs	r2, #0
 8002534:	469a      	mov	sl, r3
 8002536:	4693      	mov	fp, r2
 8002538:	f11a 0402 	adds.w	r4, sl, #2
 800253c:	f14b 0500 	adc.w	r5, fp, #0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	2200      	movs	r2, #0
 8002546:	4698      	mov	r8, r3
 8002548:	4691      	mov	r9, r2
 800254a:	45a0      	cmp	r8, r4
 800254c:	eb79 0305 	sbcs.w	r3, r9, r5
 8002550:	d205      	bcs.n	800255e <uavcan_node_Health_1_0_serialize_+0x82>
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <uavcan_node_Health_1_0_serialize_+0x164>)
 8002554:	4a38      	ldr	r2, [pc, #224]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002556:	2186      	movs	r1, #134	; 0x86
 8002558:	4838      	ldr	r0, [pc, #224]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 800255a:	f00c fadb 	bl	800eb14 <__assert_func>
        uint8_t _sat0_ = obj->value;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002564:	7efb      	ldrb	r3, [r7, #27]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d901      	bls.n	800256e <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 800256a:	2303      	movs	r3, #3
 800256c:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	7efa      	ldrb	r2, [r7, #27]
 8002578:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3302      	adds	r3, #2
 800257e:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	2b00      	cmp	r3, #0
 8002588:	d035      	beq.n	80025f6 <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f1c3 0308 	rsb	r3, r3, #8
 8002598:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <uavcan_node_Health_1_0_serialize_+0xd0>
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <uavcan_node_Health_1_0_serialize_+0x168>)
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80025a4:	2192      	movs	r1, #146	; 0x92
 80025a6:	4825      	ldr	r0, [pc, #148]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 80025a8:	f00c fab4 	bl	800eb14 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9cd 2300 	strd	r2, r3, [sp]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	6979      	ldr	r1, [r7, #20]
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f7fe fe51 	bl	8001268 <nunavutSetUxx>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80025ca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da02      	bge.n	80025d8 <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 80025d2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80025d6:	e027      	b.n	8002628 <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <uavcan_node_Health_1_0_serialize_+0x11a>
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <uavcan_node_Health_1_0_serialize_+0x158>)
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80025ee:	2199      	movs	r1, #153	; 0x99
 80025f0:	4812      	ldr	r0, [pc, #72]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 80025f2:	f00c fa8f 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d005      	beq.n	8002608 <uavcan_node_Health_1_0_serialize_+0x12c>
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <uavcan_node_Health_1_0_serialize_+0x16c>)
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002600:	219c      	movs	r1, #156	; 0x9c
 8002602:	480e      	ldr	r0, [pc, #56]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 8002604:	f00c fa86 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <uavcan_node_Health_1_0_serialize_+0x142>
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002614:	4a08      	ldr	r2, [pc, #32]	; (8002638 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002616:	219d      	movs	r1, #157	; 0x9d
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <uavcan_node_Health_1_0_serialize_+0x160>)
 800261a:	f00c fa7b 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002632:	bf00      	nop
 8002634:	08011768 	.word	0x08011768
 8002638:	08013ab4 	.word	0x08013ab4
 800263c:	080119fc 	.word	0x080119fc
 8002640:	08011a74 	.word	0x08011a74
 8002644:	08011860 	.word	0x08011860
 8002648:	08011aa4 	.word	0x08011aa4

0800264c <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b08c      	sub	sp, #48	; 0x30
 8002652:	af04      	add	r7, sp, #16
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <uavcan_node_Mode_1_0_serialize_+0x20>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <uavcan_node_Mode_1_0_serialize_+0x20>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800266c:	f06f 0301 	mvn.w	r3, #1
 8002670:	e092      	b.n	8002798 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	2b07      	cmp	r3, #7
 800267e:	d802      	bhi.n	8002686 <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002680:	f06f 0302 	mvn.w	r3, #2
 8002684:	e088      	b.n	8002798 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <uavcan_node_Mode_1_0_serialize_+0x54>
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002696:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002698:	2185      	movs	r1, #133	; 0x85
 800269a:	4844      	ldr	r0, [pc, #272]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 800269c:	f00c fa3a 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2200      	movs	r2, #0
 80026a4:	469a      	mov	sl, r3
 80026a6:	4693      	mov	fp, r2
 80026a8:	f11a 0403 	adds.w	r4, sl, #3
 80026ac:	f14b 0500 	adc.w	r5, fp, #0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	2200      	movs	r2, #0
 80026b6:	4698      	mov	r8, r3
 80026b8:	4691      	mov	r9, r2
 80026ba:	45a0      	cmp	r8, r4
 80026bc:	eb79 0305 	sbcs.w	r3, r9, r5
 80026c0:	d205      	bcs.n	80026ce <uavcan_node_Mode_1_0_serialize_+0x82>
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <uavcan_node_Mode_1_0_serialize_+0x164>)
 80026c4:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80026c6:	2186      	movs	r1, #134	; 0x86
 80026c8:	4838      	ldr	r0, [pc, #224]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 80026ca:	f00c fa23 	bl	800eb14 <__assert_func>
        uint8_t _sat0_ = obj->value;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 80026d4:	7efb      	ldrb	r3, [r7, #27]
 80026d6:	2b07      	cmp	r3, #7
 80026d8:	d901      	bls.n	80026de <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 80026da:	2307      	movs	r3, #7
 80026dc:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	4413      	add	r3, r2
 80026e6:	7efa      	ldrb	r2, [r7, #27]
 80026e8:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3303      	adds	r3, #3
 80026ee:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d035      	beq.n	8002766 <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f1c3 0308 	rsb	r3, r3, #8
 8002708:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <uavcan_node_Mode_1_0_serialize_+0xd0>
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002714:	2192      	movs	r1, #146	; 0x92
 8002716:	4825      	ldr	r0, [pc, #148]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002718:	f00c f9fc 	bl	800eb14 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9cd 2300 	strd	r2, r3, [sp]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	6979      	ldr	r1, [r7, #20]
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd99 	bl	8001268 <nunavutSetUxx>
 8002736:	4603      	mov	r3, r0
 8002738:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 800273a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800273e:	2b00      	cmp	r3, #0
 8002740:	da02      	bge.n	8002748 <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 8002742:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002746:	e027      	b.n	8002798 <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <uavcan_node_Mode_1_0_serialize_+0x11a>
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <uavcan_node_Mode_1_0_serialize_+0x158>)
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800275e:	2199      	movs	r1, #153	; 0x99
 8002760:	4812      	ldr	r0, [pc, #72]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002762:	f00c f9d7 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d005      	beq.n	8002778 <uavcan_node_Mode_1_0_serialize_+0x12c>
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <uavcan_node_Mode_1_0_serialize_+0x16c>)
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002770:	219c      	movs	r1, #156	; 0x9c
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002774:	f00c f9ce 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <uavcan_node_Mode_1_0_serialize_+0x142>
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002786:	219d      	movs	r1, #157	; 0x9d
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <uavcan_node_Mode_1_0_serialize_+0x160>)
 800278a:	f00c f9c3 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	08011768 	.word	0x08011768
 80027a8:	08013ad8 	.word	0x08013ad8
 80027ac:	08011ab8 	.word	0x08011ab8
 80027b0:	08011b30 	.word	0x08011b30
 80027b4:	08011860 	.word	0x08011860
 80027b8:	08011aa4 	.word	0x08011aa4

080027bc <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b0a4      	sub	sp, #144	; 0x90
 80027c2:	af04      	add	r7, sp, #16
 80027c4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80027c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80027c8:	657a      	str	r2, [r7, #84]	; 0x54
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80027ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 80027d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027dc:	f06f 0301 	mvn.w	r3, #1
 80027e0:	e273      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	67bb      	str	r3, [r7, #120]	; 0x78
    if ((8U * (size_t) capacity_bytes) < 56UL)
 80027e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	2b37      	cmp	r3, #55	; 0x37
 80027ee:	d802      	bhi.n	80027f6 <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80027f0:	f06f 0302 	mvn.w	r3, #2
 80027f4:	e269      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80027fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8002804:	4ba8      	ldr	r3, [pc, #672]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002806:	4aa9      	ldr	r2, [pc, #676]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002808:	218a      	movs	r1, #138	; 0x8a
 800280a:	48a9      	ldr	r0, [pc, #676]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800280c:	f00c f982 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8002810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002812:	2200      	movs	r2, #0
 8002814:	4698      	mov	r8, r3
 8002816:	4691      	mov	r9, r2
 8002818:	f118 0420 	adds.w	r4, r8, #32
 800281c:	f149 0500 	adc.w	r5, r9, #0
 8002820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	2200      	movs	r2, #0
 8002826:	469a      	mov	sl, r3
 8002828:	4693      	mov	fp, r2
 800282a:	45a2      	cmp	sl, r4
 800282c:	eb7b 0305 	sbcs.w	r3, fp, r5
 8002830:	d205      	bcs.n	800283e <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 8002832:	4ba0      	ldr	r3, [pc, #640]	; (8002ab4 <uavcan_node_Heartbeat_1_0_serialize_+0x2f8>)
 8002834:	4a9d      	ldr	r2, [pc, #628]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002836:	218b      	movs	r1, #139	; 0x8b
 8002838:	489d      	ldr	r0, [pc, #628]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800283a:	f00c f96b 	bl	800eb14 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->uptime, 32U);
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
 8002846:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002848:	2320      	movs	r3, #32
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002850:	e9cd 3400 	strd	r3, r4, [sp]
 8002854:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002856:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002858:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800285a:	f7fe fd05 	bl	8001268 <nunavutSetUxx>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (_err0_ < 0)
 8002864:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8002868:	2b00      	cmp	r3, #0
 800286a:	da02      	bge.n	8002872 <uavcan_node_Heartbeat_1_0_serialize_+0xb6>
        {
            return _err0_;
 800286c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8002870:	e22b      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += 32U;
 8002872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002874:	3320      	adds	r3, #32
 8002876:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03a      	beq.n	80028f8 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f1c3 0308 	rsb	r3, r3, #8
 8002890:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002894:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <uavcan_node_Heartbeat_1_0_serialize_+0xec>
 800289c:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <uavcan_node_Heartbeat_1_0_serialize_+0x2fc>)
 800289e:	4a83      	ldr	r2, [pc, #524]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80028a0:	2197      	movs	r1, #151	; 0x97
 80028a2:	4883      	ldr	r0, [pc, #524]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80028a4:	f00c f936 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9cd 2300 	strd	r2, r3, [sp]
 80028ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80028be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028c0:	f7fe fcd2 	bl	8001268 <nunavutSetUxx>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        if (_err1_ < 0)
 80028ca:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da02      	bge.n	80028d8 <uavcan_node_Heartbeat_1_0_serialize_+0x11c>
        {
            return _err1_;
 80028d2:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 80028d6:	e1f8      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad0_;
 80028d8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80028dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028de:	4413      	add	r3, r2
 80028e0:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80028e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
 80028ec:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 80028ee:	4a6f      	ldr	r2, [pc, #444]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80028f0:	219e      	movs	r1, #158	; 0x9e
 80028f2:	486f      	ldr	r0, [pc, #444]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80028f4:	f00c f90e 	bl	800eb14 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80028f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <uavcan_node_Heartbeat_1_0_serialize_+0x152>
 8002902:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002904:	4a69      	ldr	r2, [pc, #420]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002906:	21a1      	movs	r1, #161	; 0xa1
 8002908:	4869      	ldr	r0, [pc, #420]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800290a:	f00c f903 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800290e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <uavcan_node_Heartbeat_1_0_serialize_+0x168>
 8002918:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800291a:	4a64      	ldr	r2, [pc, #400]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800291c:	21a2      	movs	r1, #162	; 0xa2
 800291e:	4864      	ldr	r0, [pc, #400]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002920:	f00c f8f8 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002926:	2200      	movs	r2, #0
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
 800292a:	647a      	str	r2, [r7, #68]	; 0x44
 800292c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002930:	460b      	mov	r3, r1
 8002932:	3308      	adds	r3, #8
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
 8002936:	4613      	mov	r3, r2
 8002938:	f143 0300 	adc.w	r3, r3, #0
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	2200      	movs	r2, #0
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
 8002946:	637a      	str	r2, [r7, #52]	; 0x34
 8002948:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800294c:	4623      	mov	r3, r4
 800294e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002952:	4602      	mov	r2, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	462b      	mov	r3, r5
 8002958:	460a      	mov	r2, r1
 800295a:	4193      	sbcs	r3, r2
 800295c:	d205      	bcs.n	800296a <uavcan_node_Heartbeat_1_0_serialize_+0x1ae>
 800295e:	4b57      	ldr	r3, [pc, #348]	; (8002abc <uavcan_node_Heartbeat_1_0_serialize_+0x300>)
 8002960:	4a52      	ldr	r2, [pc, #328]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002962:	21a3      	movs	r1, #163	; 0xa3
 8002964:	4852      	ldr	r0, [pc, #328]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002966:	f00c f8d5 	bl	800eb14 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 800296a:	2301      	movs	r3, #1
 800296c:	66bb      	str	r3, [r7, #104]	; 0x68
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800296e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <uavcan_node_Heartbeat_1_0_serialize_+0x1c8>
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800297a:	4a4c      	ldr	r2, [pc, #304]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800297c:	21a5      	movs	r1, #165	; 0xa5
 800297e:	484c      	ldr	r0, [pc, #304]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002980:	f00c f8c8 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8002984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298a:	4413      	add	r3, r2
 800298c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800298e:	429a      	cmp	r2, r3
 8002990:	d205      	bcs.n	800299e <uavcan_node_Heartbeat_1_0_serialize_+0x1e2>
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <uavcan_node_Heartbeat_1_0_serialize_+0x304>)
 8002994:	4a45      	ldr	r2, [pc, #276]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002996:	21a6      	movs	r1, #166	; 0xa6
 8002998:	4845      	ldr	r0, [pc, #276]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800299a:	f00c f8bb 	bl	800eb14 <__assert_func>
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 800299e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a0:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 80029a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a8:	1899      	adds	r1, r3, r2
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 80029aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7ff fd94 	bl	80024dc <uavcan_node_Health_1_0_serialize_>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        if (_err2_ < 0)
 80029ba:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da02      	bge.n	80029c8 <uavcan_node_Heartbeat_1_0_serialize_+0x20c>
        {
            return _err2_;
 80029c2:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80029c6:	e180      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 80029c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d005      	beq.n	80029dc <uavcan_node_Heartbeat_1_0_serialize_+0x220>
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <uavcan_node_Heartbeat_1_0_serialize_+0x308>)
 80029d2:	4a36      	ldr	r2, [pc, #216]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80029d4:	21ae      	movs	r1, #174	; 0xae
 80029d6:	4836      	ldr	r0, [pc, #216]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80029d8:	f00c f89c 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80029dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029e2:	4413      	add	r3, r2
 80029e4:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80029e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d905      	bls.n	80029fc <uavcan_node_Heartbeat_1_0_serialize_+0x240>
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80029f2:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80029f4:	21b0      	movs	r1, #176	; 0xb0
 80029f6:	482e      	ldr	r0, [pc, #184]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80029f8:	f00c f88c 	bl	800eb14 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80029fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03a      	beq.n	8002a7c <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f1c3 0308 	rsb	r3, r3, #8
 8002a14:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        NUNAVUT_ASSERT(_pad1_ > 0);
 8002a18:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <uavcan_node_Heartbeat_1_0_serialize_+0x270>
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a24:	21b5      	movs	r1, #181	; 0xb5
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a28:	f00c f874 	bl	800eb14 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002a2c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a40:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a44:	f7fe fc10 	bl	8001268 <nunavutSetUxx>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if (_err3_ < 0)
 8002a4e:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da02      	bge.n	8002a5c <uavcan_node_Heartbeat_1_0_serialize_+0x2a0>
        {
            return _err3_;
 8002a56:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002a5a:	e136      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad1_;
 8002a5c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a62:	4413      	add	r3, r2
 8002a64:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a74:	21bc      	movs	r1, #188	; 0xbc
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a78:	f00c f84c 	bl	800eb14 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002a7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <uavcan_node_Heartbeat_1_0_serialize_+0x2d6>
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a8a:	21bf      	movs	r1, #191	; 0xbf
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a8e:	f00c f841 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d019      	beq.n	8002ad0 <uavcan_node_Heartbeat_1_0_serialize_+0x314>
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002a9e:	4a03      	ldr	r2, [pc, #12]	; (8002aac <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002aa0:	21c0      	movs	r1, #192	; 0xc0
 8002aa2:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002aa4:	f00c f836 	bl	800eb14 <__assert_func>
 8002aa8:	08011768 	.word	0x08011768
 8002aac:	08013a8c 	.word	0x08013a8c
 8002ab0:	08011b60 	.word	0x08011b60
 8002ab4:	08011bdc 	.word	0x08011bdc
 8002ab8:	08011860 	.word	0x08011860
 8002abc:	08011830 	.word	0x08011830
 8002ac0:	08011944 	.word	0x08011944
 8002ac4:	08011c0c 	.word	0x08011c0c
 8002ac8:	080119bc 	.word	0x080119bc
 8002acc:	080119e4 	.word	0x080119e4
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002adc:	460b      	mov	r3, r1
 8002ade:	3308      	adds	r3, #8
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	f143 0300 	adc.w	r3, r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	2200      	movs	r2, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	61fa      	str	r2, [r7, #28]
 8002af4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002af8:	4623      	mov	r3, r4
 8002afa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002afe:	4602      	mov	r2, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	462b      	mov	r3, r5
 8002b04:	460a      	mov	r2, r1
 8002b06:	4193      	sbcs	r3, r2
 8002b08:	d205      	bcs.n	8002b16 <uavcan_node_Heartbeat_1_0_serialize_+0x35a>
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8002b0c:	4a72      	ldr	r2, [pc, #456]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b0e:	21c1      	movs	r1, #193	; 0xc1
 8002b10:	4872      	ldr	r0, [pc, #456]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b12:	f00b ffff 	bl	800eb14 <__assert_func>
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002b16:	2301      	movs	r3, #1
 8002b18:	667b      	str	r3, [r7, #100]	; 0x64
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <uavcan_node_Heartbeat_1_0_serialize_+0x374>
 8002b24:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002b26:	4a6c      	ldr	r2, [pc, #432]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b28:	21c3      	movs	r1, #195	; 0xc3
 8002b2a:	486c      	ldr	r0, [pc, #432]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b2c:	f00b fff2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8002b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b36:	4413      	add	r3, r2
 8002b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d205      	bcs.n	8002b4a <uavcan_node_Heartbeat_1_0_serialize_+0x38e>
 8002b3e:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <uavcan_node_Heartbeat_1_0_serialize_+0x528>)
 8002b40:	4a65      	ldr	r2, [pc, #404]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b42:	21c4      	movs	r1, #196	; 0xc4
 8002b44:	4865      	ldr	r0, [pc, #404]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b46:	f00b ffe5 	bl	800eb14 <__assert_func>
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4c:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b54:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8002b56:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7ff fd76 	bl	800264c <uavcan_node_Mode_1_0_serialize_>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        if (_err4_ < 0)
 8002b66:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da02      	bge.n	8002b74 <uavcan_node_Heartbeat_1_0_serialize_+0x3b8>
        {
            return _err4_;
 8002b6e:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8002b72:	e0aa      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8002b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d005      	beq.n	8002b88 <uavcan_node_Heartbeat_1_0_serialize_+0x3cc>
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <uavcan_node_Heartbeat_1_0_serialize_+0x52c>)
 8002b7e:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b80:	21cc      	movs	r1, #204	; 0xcc
 8002b82:	4856      	ldr	r0, [pc, #344]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b84:	f00b ffc6 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b8e:	4413      	add	r3, r2
 8002b90:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d905      	bls.n	8002ba8 <uavcan_node_Heartbeat_1_0_serialize_+0x3ec>
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <uavcan_node_Heartbeat_1_0_serialize_+0x530>)
 8002b9e:	4a4e      	ldr	r2, [pc, #312]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002ba0:	21ce      	movs	r1, #206	; 0xce
 8002ba2:	484e      	ldr	r0, [pc, #312]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002ba4:	f00b ffb6 	bl	800eb14 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <uavcan_node_Heartbeat_1_0_serialize_+0x402>
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002bb4:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002bb6:	21d1      	movs	r1, #209	; 0xd1
 8002bb8:	4848      	ldr	r0, [pc, #288]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002bba:	f00b ffab 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	617a      	str	r2, [r7, #20]
 8002bc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	3308      	adds	r3, #8
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	f143 0300 	adc.w	r3, r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be6:	4623      	mov	r3, r4
 8002be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bec:	4602      	mov	r2, r0
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	4193      	sbcs	r3, r2
 8002bf6:	d205      	bcs.n	8002c04 <uavcan_node_Heartbeat_1_0_serialize_+0x448>
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8002bfa:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002bfc:	21d2      	movs	r1, #210	; 0xd2
 8002bfe:	4837      	ldr	r0, [pc, #220]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002c00:	f00b ff88 	bl	800eb14 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c06:	08db      	lsrs	r3, r3, #3
 8002c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c0a:	4413      	add	r3, r2
 8002c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c0e:	7992      	ldrb	r2, [r2, #6]
 8002c10:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c14:	3308      	adds	r3, #8
 8002c16:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03a      	beq.n	8002c98 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f1c3 0308 	rsb	r3, r3, #8
 8002c30:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(_pad2_ > 0);
 8002c34:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <uavcan_node_Heartbeat_1_0_serialize_+0x48c>
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <uavcan_node_Heartbeat_1_0_serialize_+0x534>)
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002c40:	21da      	movs	r1, #218	; 0xda
 8002c42:	4826      	ldr	r0, [pc, #152]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002c44:	f00b ff66 	bl	800eb14 <__assert_func>
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002c48:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002c4c:	9302      	str	r3, [sp, #8]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9cd 2300 	strd	r2, r3, [sp]
 8002c5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002c5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c60:	f7fe fb02 	bl	8001268 <nunavutSetUxx>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if (_err5_ < 0)
 8002c6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da02      	bge.n	8002c78 <uavcan_node_Heartbeat_1_0_serialize_+0x4bc>
        {
            return _err5_;
 8002c72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c76:	e028      	b.n	8002cca <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad2_;
 8002c78:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002c7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c7e:	4413      	add	r3, r2
 8002c80:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002c90:	21e1      	movs	r1, #225	; 0xe1
 8002c92:	4812      	ldr	r0, [pc, #72]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002c94:	f00b ff3e 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8002c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9a:	2b38      	cmp	r3, #56	; 0x38
 8002c9c:	d005      	beq.n	8002caa <uavcan_node_Heartbeat_1_0_serialize_+0x4ee>
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <uavcan_node_Heartbeat_1_0_serialize_+0x538>)
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002ca2:	21e4      	movs	r1, #228	; 0xe4
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002ca6:	f00b ff35 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <uavcan_node_Heartbeat_1_0_serialize_+0x504>
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002cb8:	21e5      	movs	r1, #229	; 0xe5
 8002cba:	4808      	ldr	r0, [pc, #32]	; (8002cdc <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002cbc:	f00b ff2a 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3780      	adds	r7, #128	; 0x80
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd4:	08011830 	.word	0x08011830
 8002cd8:	08013a8c 	.word	0x08013a8c
 8002cdc:	08011b60 	.word	0x08011b60
 8002ce0:	08011768 	.word	0x08011768
 8002ce4:	08011c2c 	.word	0x08011c2c
 8002ce8:	08011c64 	.word	0x08011c64
 8002cec:	080119bc 	.word	0x080119bc
 8002cf0:	08011c84 	.word	0x08011c84
 8002cf4:	08011c90 	.word	0x08011c90

08002cf8 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b092      	sub	sp, #72	; 0x48
 8002cfe:	af04      	add	r7, sp, #16
 8002d00:	6278      	str	r0, [r7, #36]	; 0x24
 8002d02:	6239      	str	r1, [r7, #32]
 8002d04:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <uavcan_primitive_array_Real64_1_0_serialize_+0x20>
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <uavcan_primitive_array_Real64_1_0_serialize_+0x20>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <uavcan_primitive_array_Real64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d18:	f06f 0301 	mvn.w	r3, #1
 8002d1c:	e107      	b.n	8002f2e <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	f640 0207 	movw	r2, #2055	; 0x807
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d802      	bhi.n	8002d36 <uavcan_primitive_array_Real64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002d30:	f06f 0302 	mvn.w	r3, #2
 8002d34:	e0fb      	b.n	8002f2e <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <uavcan_primitive_array_Real64_1_0_serialize_+0x58>
 8002d44:	4b7c      	ldr	r3, [pc, #496]	; (8002f38 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002d46:	4a7d      	ldr	r2, [pc, #500]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	487d      	ldr	r0, [pc, #500]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002d4c:	f00b fee2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	2200      	movs	r2, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	617a      	str	r2, [r7, #20]
 8002d58:	f640 0308 	movw	r3, #2056	; 0x808
 8002d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d60:	4602      	mov	r2, r0
 8002d62:	eb12 0803 	adds.w	r8, r2, r3
 8002d66:	460b      	mov	r3, r1
 8002d68:	f143 0900 	adc.w	r9, r3, #0
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	2200      	movs	r2, #0
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	60fa      	str	r2, [r7, #12]
 8002d76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4543      	cmp	r3, r8
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb73 0309 	sbcs.w	r3, r3, r9
 8002d84:	d205      	bcs.n	8002d92 <uavcan_primitive_array_Real64_1_0_serialize_+0x9a>
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <uavcan_primitive_array_Real64_1_0_serialize_+0x24c>)
 8002d88:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002d8a:	2181      	movs	r1, #129	; 0x81
 8002d8c:	486c      	ldr	r0, [pc, #432]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002d8e:	f00b fec1 	bl	800eb14 <__assert_func>
        if (obj->value.count > 32)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d902      	bls.n	8002da2 <uavcan_primitive_array_Real64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002d9c:	f06f 0309 	mvn.w	r3, #9
 8002da0:	e0c5      	b.n	8002f2e <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	4413      	add	r3, r2
 8002db0:	b2ca      	uxtb	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db6:	3308      	adds	r3, #8
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <uavcan_primitive_array_Real64_1_0_serialize_+0xd8>
 8002dc4:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002dc6:	4a5d      	ldr	r2, [pc, #372]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002dc8:	2189      	movs	r1, #137	; 0x89
 8002dca:	485d      	ldr	r0, [pc, #372]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002dcc:	f00b fea2 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd4:	e041      	b.n	8002e5a <uavcan_primitive_array_Real64_1_0_serialize_+0x162>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <uavcan_primitive_array_Real64_1_0_serialize_+0xf4>
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002de2:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002de4:	218c      	movs	r1, #140	; 0x8c
 8002de6:	4856      	ldr	r0, [pc, #344]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002de8:	f00b fe94 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	2200      	movs	r2, #0
 8002df0:	469a      	mov	sl, r3
 8002df2:	4693      	mov	fp, r2
 8002df4:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 8002df8:	f14b 0500 	adc.w	r5, fp, #0
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	2200      	movs	r2, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	4613      	mov	r3, r2
 8002e10:	41ab      	sbcs	r3, r5
 8002e12:	d205      	bcs.n	8002e20 <uavcan_primitive_array_Real64_1_0_serialize_+0x128>
 8002e14:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <uavcan_primitive_array_Real64_1_0_serialize_+0x250>)
 8002e16:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002e18:	218d      	movs	r1, #141	; 0x8d
 8002e1a:	4849      	ldr	r0, [pc, #292]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002e1c:	f00b fe7a 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- assume the native representation of float64 is conformant.
            static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
            const int8_t _err0_ = nunavutSetF64(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_]);
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e34:	6a38      	ldr	r0, [r7, #32]
 8002e36:	f7fe feed 	bl	8001c14 <nunavutSetF64>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 8002e40:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da02      	bge.n	8002e4e <uavcan_primitive_array_Real64_1_0_serialize_+0x156>
            {
                return _err0_;
 8002e48:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8002e4c:	e06f      	b.n	8002f2e <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
            }
            offset_bits += 64U;
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	3340      	adds	r3, #64	; 0x40
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3301      	adds	r3, #1
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3b7      	bcc.n	8002dd6 <uavcan_primitive_array_Real64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d03a      	beq.n	8002ee6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f1c3 0308 	rsb	r3, r3, #8
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <uavcan_primitive_array_Real64_1_0_serialize_+0x19e>
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <uavcan_primitive_array_Real64_1_0_serialize_+0x254>)
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002e8e:	219b      	movs	r1, #155	; 0x9b
 8002e90:	482b      	ldr	r0, [pc, #172]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002e92:	f00b fe3f 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eac:	6a38      	ldr	r0, [r7, #32]
 8002eae:	f7fe f9db 	bl	8001268 <nunavutSetUxx>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8002eb8:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da02      	bge.n	8002ec6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ce>
        {
            return _err1_;
 8002ec0:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8002ec4:	e033      	b.n	8002f2e <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
        }
        offset_bits += _pad0_;
 8002ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ecc:	4413      	add	r3, r2
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ee>
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002ede:	21a2      	movs	r1, #162	; 0xa2
 8002ee0:	4817      	ldr	r0, [pc, #92]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002ee2:	f00b fe17 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d805      	bhi.n	8002ef8 <uavcan_primitive_array_Real64_1_0_serialize_+0x200>
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <uavcan_primitive_array_Real64_1_0_serialize_+0x258>)
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002ef0:	21a5      	movs	r1, #165	; 0xa5
 8002ef2:	4813      	ldr	r0, [pc, #76]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002ef4:	f00b fe0e 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	f640 0208 	movw	r2, #2056	; 0x808
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d905      	bls.n	8002f0e <uavcan_primitive_array_Real64_1_0_serialize_+0x216>
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <uavcan_primitive_array_Real64_1_0_serialize_+0x25c>)
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f06:	21a6      	movs	r1, #166	; 0xa6
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f0a:	f00b fe03 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <uavcan_primitive_array_Real64_1_0_serialize_+0x22c>
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f1c:	21a7      	movs	r1, #167	; 0xa7
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f20:	f00b fdf8 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3738      	adds	r7, #56	; 0x38
 8002f32:	46bd      	mov	sp, r7
 8002f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f38:	08011768 	.word	0x08011768
 8002f3c:	080142d4 	.word	0x080142d4
 8002f40:	08011ca8 	.word	0x08011ca8
 8002f44:	08011d2c 	.word	0x08011d2c
 8002f48:	08011d60 	.word	0x08011d60
 8002f4c:	08011860 	.word	0x08011860
 8002f50:	0801186c 	.word	0x0801186c
 8002f54:	08011d90 	.word	0x08011d90

08002f58 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f7e:	f06f 0301 	mvn.w	r3, #1
 8002f82:	e08b      	b.n	800309c <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x14c>)
 8002f8c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8002faa:	4a40      	ldr	r2, [pc, #256]	; (80030ac <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8002fac:	21ce      	movs	r1, #206	; 0xce
 8002fae:	4840      	ldr	r0, [pc, #256]	; (80030b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8002fb0:	f00b fdb0 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d309      	bcc.n	8002fd2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002fd0:	e003      	b.n	8002fda <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d902      	bls.n	8002ff0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002fea:	f06f 0309 	mvn.w	r3, #9
 8002fee:	e055      	b.n	800309c <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8002ffe:	21dd      	movs	r1, #221	; 0xdd
 8003000:	482b      	ldr	r0, [pc, #172]	; (80030b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8003002:	f00b fd87 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e01d      	b.n	8003048 <uavcan_primitive_array_Real64_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <uavcan_primitive_array_Real64_1_0_deserialize_+0xca>
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 800301a:	21e0      	movs	r1, #224	; 0xe0
 800301c:	4824      	ldr	r0, [pc, #144]	; (80030b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 800301e:	f00b fd79 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF64(&buffer[0], capacity_bytes, offset_bits);
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f7fe fe0e 	bl	8001c48 <nunavutGetF64>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	00c9      	lsls	r1, r1, #3
 8003036:	4401      	add	r1, r0
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3340      	adds	r3, #64	; 0x40
 8003040:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3301      	adds	r3, #1
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3db      	bcc.n	800300c <uavcan_primitive_array_Real64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3307      	adds	r3, #7
 8003058:	f023 0307 	bic.w	r3, r3, #7
 800305c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11c>
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 800306c:	21e5      	movs	r1, #229	; 0xe5
 800306e:	4810      	ldr	r0, [pc, #64]	; (80030b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8003070:	f00b fd50 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003074:	6939      	ldr	r1, [r7, #16]
 8003076:	69f8      	ldr	r0, [r7, #28]
 8003078:	f7fd ff44 	bl	8000f04 <nunavutChooseMin>
 800307c:	4603      	mov	r3, r0
 800307e:	08da      	lsrs	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	429a      	cmp	r2, r3
 800308c:	d205      	bcs.n	800309a <uavcan_primitive_array_Real64_1_0_deserialize_+0x142>
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x15c>)
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8003092:	21e7      	movs	r1, #231	; 0xe7
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8003096:	f00b fd3d 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	08011898 	.word	0x08011898
 80030a8:	08011768 	.word	0x08011768
 80030ac:	08013ef4 	.word	0x08013ef4
 80030b0:	08011ca8 	.word	0x08011ca8
 80030b4:	0801189c 	.word	0x0801189c

080030b8 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030d6:	f06f 0301 	mvn.w	r3, #1
 80030da:	e003      	b.n	80030e4 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }
    *inout_buffer_size_bytes = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003116:	f06f 0301 	mvn.w	r3, #1
 800311a:	e008      	b.n	800312e <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8003124:	60bb      	str	r3, [r7, #8]
    }
    *inout_buffer_size_bytes = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	08011898 	.word	0x08011898

08003140 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b094      	sub	sp, #80	; 0x50
 8003146:	af04      	add	r7, sp, #16
 8003148:	62f8      	str	r0, [r7, #44]	; 0x2c
 800314a:	62b9      	str	r1, [r7, #40]	; 0x28
 800314c:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <uavcan_primitive_String_1_0_serialize_+0x20>
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <uavcan_primitive_String_1_0_serialize_+0x20>
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <uavcan_primitive_String_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003160:	f06f 0301 	mvn.w	r3, #1
 8003164:	e108      	b.n	8003378 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003174:	d202      	bcs.n	800317c <uavcan_primitive_String_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003176:	f06f 0302 	mvn.w	r3, #2
 800317a:	e0fd      	b.n	8003378 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <uavcan_primitive_String_1_0_serialize_+0x56>
 800318a:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <uavcan_primitive_String_1_0_serialize_+0x244>)
 800318c:	4a7e      	ldr	r2, [pc, #504]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 800318e:	2181      	movs	r1, #129	; 0x81
 8003190:	487e      	ldr	r0, [pc, #504]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003192:	f00b fcbf 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	2200      	movs	r2, #0
 800319a:	469a      	mov	sl, r3
 800319c:	4693      	mov	fp, r2
 800319e:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 80031a2:	f14b 0900 	adc.w	r9, fp, #0
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	2200      	movs	r2, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	61fa      	str	r2, [r7, #28]
 80031b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031b4:	460b      	mov	r3, r1
 80031b6:	4543      	cmp	r3, r8
 80031b8:	4613      	mov	r3, r2
 80031ba:	eb73 0309 	sbcs.w	r3, r3, r9
 80031be:	d205      	bcs.n	80031cc <uavcan_primitive_String_1_0_serialize_+0x8c>
 80031c0:	4b73      	ldr	r3, [pc, #460]	; (8003390 <uavcan_primitive_String_1_0_serialize_+0x250>)
 80031c2:	4a71      	ldr	r2, [pc, #452]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80031c4:	2182      	movs	r1, #130	; 0x82
 80031c6:	4871      	ldr	r0, [pc, #452]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80031c8:	f00b fca4 	bl	800eb14 <__assert_func>
        if (obj->value.count > 256)
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d902      	bls.n	80031de <uavcan_primitive_String_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80031d8:	f06f 0309 	mvn.w	r3, #9
 80031dc:	e0cc      	b.n	8003378 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80031e4:	2200      	movs	r2, #0
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	617a      	str	r2, [r7, #20]
 80031ea:	2310      	movs	r3, #16
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031f2:	e9cd 2300 	strd	r2, r3, [sp]
 80031f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fc:	f7fe f834 	bl	8001268 <nunavutSetUxx>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 8003206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800320a:	2b00      	cmp	r3, #0
 800320c:	da02      	bge.n	8003214 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 800320e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003212:	e0b1      	b.n	8003378 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8003214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003216:	3310      	adds	r3, #16
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <uavcan_primitive_String_1_0_serialize_+0xf0>
 8003224:	4b57      	ldr	r3, [pc, #348]	; (8003384 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003226:	4a58      	ldr	r2, [pc, #352]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003228:	218e      	movs	r1, #142	; 0x8e
 800322a:	4858      	ldr	r0, [pc, #352]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800322c:	f00b fc72 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003230:	2300      	movs	r3, #0
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
 8003234:	e037      	b.n	80032a6 <uavcan_primitive_String_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <uavcan_primitive_String_1_0_serialize_+0x10c>
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003242:	4a51      	ldr	r2, [pc, #324]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003244:	2191      	movs	r1, #145	; 0x91
 8003246:	4851      	ldr	r0, [pc, #324]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003248:	f00b fc64 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	2200      	movs	r2, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	60fa      	str	r2, [r7, #12]
 8003254:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003258:	460b      	mov	r3, r1
 800325a:	f113 0408 	adds.w	r4, r3, #8
 800325e:	4613      	mov	r3, r2
 8003260:	f143 0500 	adc.w	r5, r3, #0
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	2200      	movs	r2, #0
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003272:	460b      	mov	r3, r1
 8003274:	42a3      	cmp	r3, r4
 8003276:	4613      	mov	r3, r2
 8003278:	41ab      	sbcs	r3, r5
 800327a:	d205      	bcs.n	8003288 <uavcan_primitive_String_1_0_serialize_+0x148>
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <uavcan_primitive_String_1_0_serialize_+0x254>)
 800327e:	4a42      	ldr	r2, [pc, #264]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003280:	2192      	movs	r1, #146	; 0x92
 8003282:	4842      	ldr	r0, [pc, #264]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003284:	f00b fc46 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	4413      	add	r3, r2
 8003290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003294:	440a      	add	r2, r1
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 800329a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329c:	3308      	adds	r3, #8
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	3301      	adds	r3, #1
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d3c1      	bcc.n	8003236 <uavcan_primitive_String_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80032b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03a      	beq.n	8003332 <uavcan_primitive_String_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f1c3 0308 	rsb	r3, r3, #8
 80032ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80032ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <uavcan_primitive_String_1_0_serialize_+0x1a2>
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <uavcan_primitive_String_1_0_serialize_+0x258>)
 80032d8:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80032da:	219b      	movs	r1, #155	; 0x9b
 80032dc:	482b      	ldr	r0, [pc, #172]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80032de:	f00b fc19 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80032e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032e6:	9302      	str	r3, [sp, #8]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9cd 2300 	strd	r2, r3, [sp]
 80032f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032fa:	f7fd ffb5 	bl	8001268 <nunavutSetUxx>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 8003304:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003308:	2b00      	cmp	r3, #0
 800330a:	da02      	bge.n	8003312 <uavcan_primitive_String_1_0_serialize_+0x1d2>
        {
            return _err1_;
 800330c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003310:	e032      	b.n	8003378 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 8003312:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003318:	4413      	add	r3, r2
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <uavcan_primitive_String_1_0_serialize_+0x1f2>
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 800332a:	21a2      	movs	r1, #162	; 0xa2
 800332c:	4817      	ldr	r0, [pc, #92]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800332e:	f00b fbf1 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d805      	bhi.n	8003344 <uavcan_primitive_String_1_0_serialize_+0x204>
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <uavcan_primitive_String_1_0_serialize_+0x25c>)
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 800333c:	21a5      	movs	r1, #165	; 0xa5
 800333e:	4813      	ldr	r0, [pc, #76]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003340:	f00b fbe8 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800334a:	d905      	bls.n	8003358 <uavcan_primitive_String_1_0_serialize_+0x218>
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <uavcan_primitive_String_1_0_serialize_+0x260>)
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003350:	21a6      	movs	r1, #166	; 0xa6
 8003352:	480e      	ldr	r0, [pc, #56]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003354:	f00b fbde 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <uavcan_primitive_String_1_0_serialize_+0x22e>
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003364:	4a08      	ldr	r2, [pc, #32]	; (8003388 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003366:	21a7      	movs	r1, #167	; 0xa7
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800336a:	f00b fbd3 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3740      	adds	r7, #64	; 0x40
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	08011768 	.word	0x08011768
 8003388:	080140d0 	.word	0x080140d0
 800338c:	08011da8 	.word	0x08011da8
 8003390:	08011e28 	.word	0x08011e28
 8003394:	08011830 	.word	0x08011830
 8003398:	08011860 	.word	0x08011860
 800339c:	08011e5c 	.word	0x08011e5c
 80033a0:	08011e74 	.word	0x08011e74

080033a4 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <uavcan_primitive_String_1_0_deserialize_+0x26>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <uavcan_primitive_String_1_0_deserialize_+0x26>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033ca:	f06f 0301 	mvn.w	r3, #1
 80033ce:	e08c      	b.n	80034ea <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <uavcan_primitive_String_1_0_deserialize_+0x150>)
 80033d8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <uavcan_primitive_String_1_0_deserialize_+0x5c>
 80033f4:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 80033f6:	4a41      	ldr	r2, [pc, #260]	; (80034fc <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80033f8:	21ce      	movs	r1, #206	; 0xce
 80033fa:	4841      	ldr	r0, [pc, #260]	; (8003500 <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80033fc:	f00b fb8a 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003400:	2310      	movs	r3, #16
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f7fe f80a 	bl	8001420 <nunavutGetU16>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3310      	adds	r3, #16
 800341a:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d902      	bls.n	800342e <uavcan_primitive_String_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003428:	f06f 0309 	mvn.w	r3, #9
 800342c:	e05d      	b.n	80034ea <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <uavcan_primitive_String_1_0_deserialize_+0xa0>
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 800343a:	4a30      	ldr	r2, [pc, #192]	; (80034fc <uavcan_primitive_String_1_0_deserialize_+0x158>)
 800343c:	21d6      	movs	r1, #214	; 0xd6
 800343e:	4830      	ldr	r0, [pc, #192]	; (8003500 <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8003440:	f00b fb68 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e025      	b.n	8003496 <uavcan_primitive_String_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <uavcan_primitive_String_1_0_deserialize_+0xbc>
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8003458:	21d9      	movs	r1, #217	; 0xd9
 800345a:	4829      	ldr	r0, [pc, #164]	; (8003500 <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 800345c:	f00b fb5a 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3308      	adds	r3, #8
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	429a      	cmp	r2, r3
 8003468:	d30a      	bcc.n	8003480 <uavcan_primitive_String_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	7819      	ldrb	r1, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4413      	add	r3, r2
 800347a:	460a      	mov	r2, r1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e004      	b.n	800348a <uavcan_primitive_String_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3308      	adds	r3, #8
 800348e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	3301      	adds	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3d3      	bcc.n	800344a <uavcan_primitive_String_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3307      	adds	r3, #7
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <uavcan_primitive_String_1_0_deserialize_+0x11e>
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80034ba:	21e5      	movs	r1, #229	; 0xe5
 80034bc:	4810      	ldr	r0, [pc, #64]	; (8003500 <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80034be:	f00b fb29 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	69f8      	ldr	r0, [r7, #28]
 80034c6:	f7fd fd1d 	bl	8000f04 <nunavutChooseMin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d205      	bcs.n	80034e8 <uavcan_primitive_String_1_0_deserialize_+0x144>
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <uavcan_primitive_String_1_0_deserialize_+0x160>)
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80034e0:	21e7      	movs	r1, #231	; 0xe7
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80034e4:	f00b fb16 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	08011898 	.word	0x08011898
 80034f8:	08011768 	.word	0x08011768
 80034fc:	08013c8c 	.word	0x08013c8c
 8003500:	08011da8 	.word	0x08011da8
 8003504:	0801189c 	.word	0x0801189c

08003508 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b094      	sub	sp, #80	; 0x50
 800350e:	af04      	add	r7, sp, #16
 8003510:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003512:	62b9      	str	r1, [r7, #40]	; 0x28
 8003514:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <uavcan_primitive_Unstructured_1_0_serialize_+0x20>
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <uavcan_primitive_Unstructured_1_0_serialize_+0x20>
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <uavcan_primitive_Unstructured_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003528:	f06f 0301 	mvn.w	r3, #1
 800352c:	e108      	b.n	8003740 <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800353c:	d202      	bcs.n	8003544 <uavcan_primitive_Unstructured_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800353e:	f06f 0302 	mvn.w	r3, #2
 8003542:	e0fd      	b.n	8003740 <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <uavcan_primitive_Unstructured_1_0_serialize_+0x56>
 8003552:	4b7e      	ldr	r3, [pc, #504]	; (800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 8003554:	4a7e      	ldr	r2, [pc, #504]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003556:	2181      	movs	r1, #129	; 0x81
 8003558:	487e      	ldr	r0, [pc, #504]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 800355a:	f00b fadb 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2200      	movs	r2, #0
 8003562:	469a      	mov	sl, r3
 8003564:	4693      	mov	fp, r2
 8003566:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 800356a:	f14b 0900 	adc.w	r9, fp, #0
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	2200      	movs	r2, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	61fa      	str	r2, [r7, #28]
 8003578:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800357c:	460b      	mov	r3, r1
 800357e:	4543      	cmp	r3, r8
 8003580:	4613      	mov	r3, r2
 8003582:	eb73 0309 	sbcs.w	r3, r3, r9
 8003586:	d205      	bcs.n	8003594 <uavcan_primitive_Unstructured_1_0_serialize_+0x8c>
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <uavcan_primitive_Unstructured_1_0_serialize_+0x250>)
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800358c:	2182      	movs	r1, #130	; 0x82
 800358e:	4871      	ldr	r0, [pc, #452]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003590:	f00b fac0 	bl	800eb14 <__assert_func>
        if (obj->value.count > 256)
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800359a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359e:	d902      	bls.n	80035a6 <uavcan_primitive_Unstructured_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035a0:	f06f 0309 	mvn.w	r3, #9
 80035a4:	e0cc      	b.n	8003740 <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035ac:	2200      	movs	r2, #0
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	617a      	str	r2, [r7, #20]
 80035b2:	2310      	movs	r3, #16
 80035b4:	9302      	str	r3, [sp, #8]
 80035b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ba:	e9cd 2300 	strd	r2, r3, [sp]
 80035be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035c4:	f7fd fe50 	bl	8001268 <nunavutSetUxx>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 80035ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da02      	bge.n	80035dc <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 80035d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035da:	e0b1      	b.n	8003740 <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	3310      	adds	r3, #16
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <uavcan_primitive_Unstructured_1_0_serialize_+0xf0>
 80035ec:	4b57      	ldr	r3, [pc, #348]	; (800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 80035ee:	4a58      	ldr	r2, [pc, #352]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 80035f0:	218e      	movs	r1, #142	; 0x8e
 80035f2:	4858      	ldr	r0, [pc, #352]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 80035f4:	f00b fa8e 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	e037      	b.n	800366e <uavcan_primitive_Unstructured_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <uavcan_primitive_Unstructured_1_0_serialize_+0x10c>
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 800360a:	4a51      	ldr	r2, [pc, #324]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800360c:	2191      	movs	r1, #145	; 0x91
 800360e:	4851      	ldr	r0, [pc, #324]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003610:	f00b fa80 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	2200      	movs	r2, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003620:	460b      	mov	r3, r1
 8003622:	f113 0408 	adds.w	r4, r3, #8
 8003626:	4613      	mov	r3, r2
 8003628:	f143 0500 	adc.w	r5, r3, #0
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	2200      	movs	r2, #0
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	e9d7 1200 	ldrd	r1, r2, [r7]
 800363a:	460b      	mov	r3, r1
 800363c:	42a3      	cmp	r3, r4
 800363e:	4613      	mov	r3, r2
 8003640:	41ab      	sbcs	r3, r5
 8003642:	d205      	bcs.n	8003650 <uavcan_primitive_Unstructured_1_0_serialize_+0x148>
 8003644:	4b45      	ldr	r3, [pc, #276]	; (800375c <uavcan_primitive_Unstructured_1_0_serialize_+0x254>)
 8003646:	4a42      	ldr	r2, [pc, #264]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003648:	2192      	movs	r1, #146	; 0x92
 800364a:	4842      	ldr	r0, [pc, #264]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 800364c:	f00b fa62 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003656:	4413      	add	r3, r2
 8003658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800365a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365c:	440a      	add	r2, r1
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	3308      	adds	r3, #8
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	3301      	adds	r3, #1
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003676:	429a      	cmp	r2, r3
 8003678:	d3c1      	bcc.n	80035fe <uavcan_primitive_Unstructured_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03a      	beq.n	80036fa <uavcan_primitive_Unstructured_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f1c3 0308 	rsb	r3, r3, #8
 8003692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 8003696:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <uavcan_primitive_Unstructured_1_0_serialize_+0x1a2>
 800369e:	4b30      	ldr	r3, [pc, #192]	; (8003760 <uavcan_primitive_Unstructured_1_0_serialize_+0x258>)
 80036a0:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 80036a2:	219b      	movs	r1, #155	; 0x9b
 80036a4:	482b      	ldr	r0, [pc, #172]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 80036a6:	f00b fa35 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9cd 2300 	strd	r2, r3, [sp]
 80036bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c2:	f7fd fdd1 	bl	8001268 <nunavutSetUxx>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 80036cc:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da02      	bge.n	80036da <uavcan_primitive_Unstructured_1_0_serialize_+0x1d2>
        {
            return _err1_;
 80036d4:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036d8:	e032      	b.n	8003740 <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 80036da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80036de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e0:	4413      	add	r3, r2
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <uavcan_primitive_Unstructured_1_0_serialize_+0x1f2>
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 80036f2:	21a2      	movs	r1, #162	; 0xa2
 80036f4:	4817      	ldr	r0, [pc, #92]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 80036f6:	f00b fa0d 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d805      	bhi.n	800370c <uavcan_primitive_Unstructured_1_0_serialize_+0x204>
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <uavcan_primitive_Unstructured_1_0_serialize_+0x25c>)
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003704:	21a5      	movs	r1, #165	; 0xa5
 8003706:	4813      	ldr	r0, [pc, #76]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003708:	f00b fa04 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003712:	d905      	bls.n	8003720 <uavcan_primitive_Unstructured_1_0_serialize_+0x218>
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <uavcan_primitive_Unstructured_1_0_serialize_+0x260>)
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003718:	21a6      	movs	r1, #166	; 0xa6
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 800371c:	f00b f9fa 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <uavcan_primitive_Unstructured_1_0_serialize_+0x22e>
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800372e:	21a7      	movs	r1, #167	; 0xa7
 8003730:	4808      	ldr	r0, [pc, #32]	; (8003754 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003732:	f00b f9ef 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3740      	adds	r7, #64	; 0x40
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374a:	bf00      	nop
 800374c:	08011768 	.word	0x08011768
 8003750:	080140f8 	.word	0x080140f8
 8003754:	08011e8c 	.word	0x08011e8c
 8003758:	08011e28 	.word	0x08011e28
 800375c:	08011830 	.word	0x08011830
 8003760:	08011860 	.word	0x08011860
 8003764:	08011e5c 	.word	0x08011e5c
 8003768:	08011e74 	.word	0x08011e74

0800376c <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003792:	f06f 0301 	mvn.w	r3, #1
 8003796:	e08c      	b.n	80038b2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <uavcan_primitive_Unstructured_1_0_deserialize_+0x150>)
 80037a0:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x5c>
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 80037be:	4a41      	ldr	r2, [pc, #260]	; (80038c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 80037c0:	21ce      	movs	r1, #206	; 0xce
 80037c2:	4841      	ldr	r0, [pc, #260]	; (80038c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 80037c4:	f00b f9a6 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80037c8:	2310      	movs	r3, #16
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f7fd fe26 	bl	8001420 <nunavutGetU16>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3310      	adds	r3, #16
 80037e2:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d902      	bls.n	80037f6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80037f0:	f06f 0309 	mvn.w	r3, #9
 80037f4:	e05d      	b.n	80038b2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <uavcan_primitive_Unstructured_1_0_deserialize_+0xa0>
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 8003802:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 8003804:	21d6      	movs	r1, #214	; 0xd6
 8003806:	4830      	ldr	r0, [pc, #192]	; (80038c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 8003808:	f00b f984 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e025      	b.n	800385e <uavcan_primitive_Unstructured_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 800381e:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 8003820:	21d9      	movs	r1, #217	; 0xd9
 8003822:	4829      	ldr	r0, [pc, #164]	; (80038c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 8003824:	f00b f976 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3308      	adds	r3, #8
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d30a      	bcc.n	8003848 <uavcan_primitive_Unstructured_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	7819      	ldrb	r1, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e004      	b.n	8003852 <uavcan_primitive_Unstructured_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4413      	add	r3, r2
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3308      	adds	r3, #8
 8003856:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	3301      	adds	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	429a      	cmp	r2, r3
 8003868:	d3d3      	bcc.n	8003812 <uavcan_primitive_Unstructured_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3307      	adds	r3, #7
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <uavcan_primitive_Unstructured_1_0_deserialize_+0x11e>
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 8003880:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 8003882:	21e5      	movs	r1, #229	; 0xe5
 8003884:	4810      	ldr	r0, [pc, #64]	; (80038c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 8003886:	f00b f945 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800388a:	6939      	ldr	r1, [r7, #16]
 800388c:	69f8      	ldr	r0, [r7, #28]
 800388e:	f7fd fb39 	bl	8000f04 <nunavutChooseMin>
 8003892:	4603      	mov	r3, r0
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d205      	bcs.n	80038b0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x144>
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <uavcan_primitive_Unstructured_1_0_deserialize_+0x160>)
 80038a6:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 80038a8:	21e7      	movs	r1, #231	; 0xe7
 80038aa:	4807      	ldr	r0, [pc, #28]	; (80038c8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 80038ac:	f00b f932 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08011898 	.word	0x08011898
 80038c0:	08011768 	.word	0x08011768
 80038c4:	08013cb8 	.word	0x08013cb8
 80038c8:	08011e8c 	.word	0x08011e8c
 80038cc:	0801189c 	.word	0x0801189c

080038d0 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b08e      	sub	sp, #56	; 0x38
 80038d6:	af04      	add	r7, sp, #16
 80038d8:	6178      	str	r0, [r7, #20]
 80038da:	6139      	str	r1, [r7, #16]
 80038dc:	60fa      	str	r2, [r7, #12]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <uavcan_primitive_array_Bit_1_0_serialize_+0x20>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <uavcan_primitive_array_Bit_1_0_serialize_+0x20>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <uavcan_primitive_array_Bit_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038f0:	f06f 0301 	mvn.w	r3, #1
 80038f4:	e0cd      	b.n	8003a92 <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003904:	d202      	bcs.n	800390c <uavcan_primitive_array_Bit_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003906:	f06f 0302 	mvn.w	r3, #2
 800390a:	e0c2      	b.n	8003a92 <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <uavcan_primitive_array_Bit_1_0_serialize_+0x56>
 800391a:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 800391c:	4a60      	ldr	r2, [pc, #384]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 800391e:	2182      	movs	r1, #130	; 0x82
 8003920:	4860      	ldr	r0, [pc, #384]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003922:	f00b f8f7 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	2200      	movs	r2, #0
 800392a:	469a      	mov	sl, r3
 800392c:	4693      	mov	fp, r2
 800392e:	f51a 6401 	adds.w	r4, sl, #2064	; 0x810
 8003932:	f14b 0500 	adc.w	r5, fp, #0
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	2200      	movs	r2, #0
 800393c:	4698      	mov	r8, r3
 800393e:	4691      	mov	r9, r2
 8003940:	45a0      	cmp	r8, r4
 8003942:	eb79 0305 	sbcs.w	r3, r9, r5
 8003946:	d205      	bcs.n	8003954 <uavcan_primitive_array_Bit_1_0_serialize_+0x84>
 8003948:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d8>)
 800394a:	4a55      	ldr	r2, [pc, #340]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 800394c:	2183      	movs	r1, #131	; 0x83
 800394e:	4855      	ldr	r0, [pc, #340]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003950:	f00b f8e0 	bl	800eb14 <__assert_func>
        if (obj->value.count > 2048)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d902      	bls.n	8003966 <uavcan_primitive_array_Bit_1_0_serialize_+0x96>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003960:	f06f 0309 	mvn.w	r3, #9
 8003964:	e095      	b.n	8003a92 <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800396c:	2200      	movs	r2, #0
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	2310      	movs	r3, #16
 8003974:	9302      	str	r3, [sp, #8]
 8003976:	e9d7 3400 	ldrd	r3, r4, [r7]
 800397a:	e9cd 3400 	strd	r3, r4, [sp]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	6a39      	ldr	r1, [r7, #32]
 8003982:	6938      	ldr	r0, [r7, #16]
 8003984:	f7fd fc70 	bl	8001268 <nunavutSetUxx>
 8003988:	4603      	mov	r3, r0
 800398a:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 800398c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da02      	bge.n	800399a <uavcan_primitive_array_Bit_1_0_serialize_+0xca>
        {
            return _err0_;
 8003994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003998:	e07b      	b.n	8003a92 <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        offset_bits += 16U;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	3310      	adds	r3, #16
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <uavcan_primitive_array_Bit_1_0_serialize_+0xe6>
 80039aa:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 80039ac:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 80039ae:	218f      	movs	r1, #143	; 0x8f
 80039b0:	483c      	ldr	r0, [pc, #240]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 80039b2:	f00b f8af 	bl	800eb14 <__assert_func>
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2100      	movs	r1, #0
 80039c0:	9100      	str	r1, [sp, #0]
 80039c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c4:	6938      	ldr	r0, [r7, #16]
 80039c6:	f7fd fac7 	bl	8000f58 <nunavutCopyBits>
        offset_bits += obj->value.count;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	4413      	add	r3, r2
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d035      	beq.n	8003a4c <uavcan_primitive_array_Bit_1_0_serialize_+0x17c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f1c3 0308 	rsb	r3, r3, #8
 80039ee:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
 80039f0:	7fbb      	ldrb	r3, [r7, #30]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <uavcan_primitive_array_Bit_1_0_serialize_+0x132>
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <uavcan_primitive_array_Bit_1_0_serialize_+0x1dc>)
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 80039fa:	2197      	movs	r1, #151	; 0x97
 80039fc:	4829      	ldr	r0, [pc, #164]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 80039fe:	f00b f889 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a02:	7fbb      	ldrb	r3, [r7, #30]
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	6a39      	ldr	r1, [r7, #32]
 8003a16:	6938      	ldr	r0, [r7, #16]
 8003a18:	f7fd fc26 	bl	8001268 <nunavutSetUxx>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003a20:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da02      	bge.n	8003a2e <uavcan_primitive_array_Bit_1_0_serialize_+0x15e>
        {
            return _err1_;
 8003a28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a2c:	e031      	b.n	8003a92 <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        offset_bits += _pad0_;
 8003a2e:	7fbb      	ldrb	r3, [r7, #30]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	4413      	add	r3, r2
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <uavcan_primitive_array_Bit_1_0_serialize_+0x17c>
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a44:	219e      	movs	r1, #158	; 0x9e
 8003a46:	4817      	ldr	r0, [pc, #92]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a48:	f00b f864 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d805      	bhi.n	8003a5e <uavcan_primitive_array_Bit_1_0_serialize_+0x18e>
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e0>)
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a56:	21a1      	movs	r1, #161	; 0xa1
 8003a58:	4812      	ldr	r0, [pc, #72]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a5a:	f00b f85b 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003a64:	d905      	bls.n	8003a72 <uavcan_primitive_array_Bit_1_0_serialize_+0x1a2>
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e4>)
 8003a68:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a6a:	21a2      	movs	r1, #162	; 0xa2
 8003a6c:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a6e:	f00b f851 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <uavcan_primitive_array_Bit_1_0_serialize_+0x1b8>
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a80:	21a3      	movs	r1, #163	; 0xa3
 8003a82:	4808      	ldr	r0, [pc, #32]	; (8003aa4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a84:	f00b f846 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9c:	08011768 	.word	0x08011768
 8003aa0:	08014128 	.word	0x08014128
 8003aa4:	08011f10 	.word	0x08011f10
 8003aa8:	08011e28 	.word	0x08011e28
 8003aac:	08011860 	.word	0x08011860
 8003ab0:	08011e5c 	.word	0x08011e5c
 8003ab4:	08011e74 	.word	0x08011e74

08003ab8 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ade:	f06f 0301 	mvn.w	r3, #1
 8003ae2:	e06d      	b.n	8003bc0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x108>
    }
    if (buffer == NULL)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x110>)
 8003aec:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <uavcan_primitive_array_Bit_1_0_deserialize_+0x5c>
 8003b08:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003b0a:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003b0c:	21ca      	movs	r1, #202	; 0xca
 8003b0e:	4831      	ldr	r0, [pc, #196]	; (8003bd4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003b10:	f00b f800 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003b14:	2310      	movs	r3, #16
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	69f9      	ldr	r1, [r7, #28]
 8003b1a:	68b8      	ldr	r0, [r7, #8]
 8003b1c:	f7fd fc80 	bl	8001420 <nunavutGetU16>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3310      	adds	r3, #16
 8003b2e:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3a:	d902      	bls.n	8003b42 <uavcan_primitive_array_Bit_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b3c:	f06f 0309 	mvn.w	r3, #9
 8003b40:	e03e      	b.n	8003bc0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x108>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <uavcan_primitive_array_Bit_1_0_deserialize_+0xa0>
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003b50:	21d2      	movs	r1, #210	; 0xd2
 8003b52:	4820      	ldr	r0, [pc, #128]	; (8003bd4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003b54:	f00a ffde 	bl	800eb14 <__assert_func>
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	f7fd fb3c 	bl	80011e4 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3307      	adds	r3, #7
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <uavcan_primitive_array_Bit_1_0_deserialize_+0xe0>
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003b90:	21d6      	movs	r1, #214	; 0xd6
 8003b92:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003b94:	f00a ffbe 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7fd f9b2 	bl	8000f04 <nunavutChooseMin>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d205      	bcs.n	8003bbe <uavcan_primitive_array_Bit_1_0_deserialize_+0x106>
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x120>)
 8003bb4:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003bb6:	21d8      	movs	r1, #216	; 0xd8
 8003bb8:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003bba:	f00a ffab 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	08011898 	.word	0x08011898
 8003bcc:	08011768 	.word	0x08011768
 8003bd0:	08013ce8 	.word	0x08013ce8
 8003bd4:	08011f10 	.word	0x08011f10
 8003bd8:	0801189c 	.word	0x0801189c

08003bdc <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b094      	sub	sp, #80	; 0x50
 8003be2:	af04      	add	r7, sp, #16
 8003be4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003be6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003be8:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <uavcan_primitive_array_Integer16_1_0_serialize_+0x20>
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <uavcan_primitive_array_Integer16_1_0_serialize_+0x20>
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <uavcan_primitive_array_Integer16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003bfc:	f06f 0301 	mvn.w	r3, #1
 8003c00:	e10d      	b.n	8003e1e <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	f640 0307 	movw	r3, #2055	; 0x807
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d802      	bhi.n	8003c1a <uavcan_primitive_array_Integer16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003c14:	f06f 0302 	mvn.w	r3, #2
 8003c18:	e101      	b.n	8003e1e <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <uavcan_primitive_array_Integer16_1_0_serialize_+0x58>
 8003c28:	4b7f      	ldr	r3, [pc, #508]	; (8003e28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003c2a:	4a80      	ldr	r2, [pc, #512]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003c2c:	2181      	movs	r1, #129	; 0x81
 8003c2e:	4880      	ldr	r0, [pc, #512]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003c30:	f00a ff70 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	2200      	movs	r2, #0
 8003c38:	469a      	mov	sl, r3
 8003c3a:	4693      	mov	fp, r2
 8003c3c:	f640 0308 	movw	r3, #2056	; 0x808
 8003c40:	eb1a 0803 	adds.w	r8, sl, r3
 8003c44:	f14b 0900 	adc.w	r9, fp, #0
 8003c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c56:	460b      	mov	r3, r1
 8003c58:	4543      	cmp	r3, r8
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	eb73 0309 	sbcs.w	r3, r3, r9
 8003c60:	d205      	bcs.n	8003c6e <uavcan_primitive_array_Integer16_1_0_serialize_+0x92>
 8003c62:	4b74      	ldr	r3, [pc, #464]	; (8003e34 <uavcan_primitive_array_Integer16_1_0_serialize_+0x258>)
 8003c64:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003c66:	2182      	movs	r1, #130	; 0x82
 8003c68:	4871      	ldr	r0, [pc, #452]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003c6a:	f00a ff53 	bl	800eb14 <__assert_func>
        if (obj->value.count > 128)
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d902      	bls.n	8003c7e <uavcan_primitive_array_Integer16_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c78:	f06f 0309 	mvn.w	r3, #9
 8003c7c:	e0cf      	b.n	8003e1e <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b2ca      	uxtb	r2, r1
 8003c8e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	3308      	adds	r3, #8
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <uavcan_primitive_array_Integer16_1_0_serialize_+0xd0>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003ca2:	4a62      	ldr	r2, [pc, #392]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003ca4:	218a      	movs	r1, #138	; 0x8a
 8003ca6:	4862      	ldr	r0, [pc, #392]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003ca8:	f00a ff34 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003cac:	2300      	movs	r3, #0
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb0:	e04b      	b.n	8003d4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x16e>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xec>
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003cbe:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003cc0:	218d      	movs	r1, #141	; 0x8d
 8003cc2:	485b      	ldr	r0, [pc, #364]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003cc4:	f00a ff26 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2200      	movs	r2, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	617a      	str	r2, [r7, #20]
 8003cd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	f113 0410 	adds.w	r4, r3, #16
 8003cda:	4613      	mov	r3, r2
 8003cdc:	f143 0500 	adc.w	r5, r3, #0
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	60fa      	str	r2, [r7, #12]
 8003cea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	41ab      	sbcs	r3, r5
 8003cf6:	d205      	bcs.n	8003d04 <uavcan_primitive_array_Integer16_1_0_serialize_+0x128>
 8003cf8:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <uavcan_primitive_array_Integer16_1_0_serialize_+0x25c>)
 8003cfa:	4a4c      	ldr	r2, [pc, #304]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003cfc:	218e      	movs	r1, #142	; 0x8e
 8003cfe:	484c      	ldr	r0, [pc, #304]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003d00:	f00a ff08 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 16U);
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	17da      	asrs	r2, r3, #31
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	2310      	movs	r3, #16
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d26:	f7fd fb23 	bl	8001370 <nunavutSetIxx>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8003d30:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da02      	bge.n	8003d3e <uavcan_primitive_array_Integer16_1_0_serialize_+0x162>
            {
                return _err0_;
 8003d38:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003d3c:	e06f      	b.n	8003e1e <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
            }
            offset_bits += 16U;
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d40:	3310      	adds	r3, #16
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	3301      	adds	r3, #1
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d3ad      	bcc.n	8003cb2 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03a      	beq.n	8003dd6 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1fa>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f1c3 0308 	rsb	r3, r3, #8
 8003d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8003d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1aa>
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <uavcan_primitive_array_Integer16_1_0_serialize_+0x260>)
 8003d7c:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003d7e:	219b      	movs	r1, #155	; 0x9b
 8003d80:	482b      	ldr	r0, [pc, #172]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003d82:	f00a fec7 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9cd 2300 	strd	r2, r3, [sp]
 8003d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	f7fd fa63 	bl	8001268 <nunavutSetUxx>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 8003da8:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da02      	bge.n	8003db6 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1da>
        {
            return _err1_;
 8003db0:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003db4:	e033      	b.n	8003e1e <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
        }
        offset_bits += _pad0_;
 8003db6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dbc:	4413      	add	r3, r2
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1fa>
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003dce:	21a2      	movs	r1, #162	; 0xa2
 8003dd0:	4817      	ldr	r0, [pc, #92]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003dd2:	f00a fe9f 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	2b07      	cmp	r3, #7
 8003dda:	d805      	bhi.n	8003de8 <uavcan_primitive_array_Integer16_1_0_serialize_+0x20c>
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <uavcan_primitive_array_Integer16_1_0_serialize_+0x264>)
 8003dde:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003de0:	21a5      	movs	r1, #165	; 0xa5
 8003de2:	4813      	ldr	r0, [pc, #76]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003de4:	f00a fe96 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8003de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dea:	f640 0208 	movw	r2, #2056	; 0x808
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d905      	bls.n	8003dfe <uavcan_primitive_array_Integer16_1_0_serialize_+0x222>
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <uavcan_primitive_array_Integer16_1_0_serialize_+0x268>)
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003df6:	21a6      	movs	r1, #166	; 0xa6
 8003df8:	480d      	ldr	r0, [pc, #52]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003dfa:	f00a fe8b 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <uavcan_primitive_array_Integer16_1_0_serialize_+0x238>
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003e0c:	21a7      	movs	r1, #167	; 0xa7
 8003e0e:	4808      	ldr	r0, [pc, #32]	; (8003e30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003e10:	f00a fe80 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3740      	adds	r7, #64	; 0x40
 8003e22:	46bd      	mov	sp, r7
 8003e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e28:	08011768 	.word	0x08011768
 8003e2c:	080141b4 	.word	0x080141b4
 8003e30:	08011f90 	.word	0x08011f90
 8003e34:	08011d2c 	.word	0x08011d2c
 8003e38:	08012018 	.word	0x08012018
 8003e3c:	08011860 	.word	0x08011860
 8003e40:	0801186c 	.word	0x0801186c
 8003e44:	08011d90 	.word	0x08011d90

08003e48 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e6e:	f06f 0301 	mvn.w	r3, #1
 8003e72:	e08a      	b.n	8003f8a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x142>
    }
    if (buffer == NULL)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e7a:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x14c>)
 8003e7c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x5c>
 8003e98:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003e9a:	4a40      	ldr	r2, [pc, #256]	; (8003f9c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003e9c:	21ce      	movs	r1, #206	; 0xce
 8003e9e:	4840      	ldr	r0, [pc, #256]	; (8003fa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003ea0:	f00a fe38 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d309      	bcc.n	8003ec2 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	08db      	lsrs	r3, r3, #3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ec0:	e003      	b.n	8003eca <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d902      	bls.n	8003ee0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003eda:	f06f 0309 	mvn.w	r3, #9
 8003ede:	e054      	b.n	8003f8a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x142>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xae>
 8003eea:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003eee:	21dd      	movs	r1, #221	; 0xdd
 8003ef0:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003ef2:	f00a fe0f 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e01c      	b.n	8003f36 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xee>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xca>
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f0a:	21e0      	movs	r1, #224	; 0xe0
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f0e:	f00a fe01 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003f12:	2310      	movs	r3, #16
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	6979      	ldr	r1, [r7, #20]
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	f7fd fc54 	bl	80017c6 <nunavutGetI16>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4619      	mov	r1, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        offset_bits += 16U;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3310      	adds	r3, #16
 8003f2e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d3dc      	bcc.n	8003efc <uavcan_primitive_array_Integer16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3307      	adds	r3, #7
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x11a>
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f5a:	21e5      	movs	r1, #229	; 0xe5
 8003f5c:	4810      	ldr	r0, [pc, #64]	; (8003fa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f5e:	f00a fdd9 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	69f8      	ldr	r0, [r7, #28]
 8003f66:	f7fc ffcd 	bl	8000f04 <nunavutChooseMin>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d205      	bcs.n	8003f88 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x140>
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x15c>)
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f80:	21e7      	movs	r1, #231	; 0xe7
 8003f82:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f84:	f00a fdc6 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	08011898 	.word	0x08011898
 8003f98:	08011768 	.word	0x08011768
 8003f9c:	08013dac 	.word	0x08013dac
 8003fa0:	08011f90 	.word	0x08011f90
 8003fa4:	0801189c 	.word	0x0801189c

08003fa8 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b094      	sub	sp, #80	; 0x50
 8003fae:	af04      	add	r7, sp, #16
 8003fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003fb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fb4:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x20>
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x20>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <uavcan_primitive_array_Integer32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003fc8:	f06f 0301 	mvn.w	r3, #1
 8003fcc:	e10c      	b.n	80041e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	00da      	lsls	r2, r3, #3
 8003fd8:	f640 0307 	movw	r3, #2055	; 0x807
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d802      	bhi.n	8003fe6 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003fe0:	f06f 0302 	mvn.w	r3, #2
 8003fe4:	e100      	b.n	80041e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <uavcan_primitive_array_Integer32_1_0_serialize_+0x58>
 8003ff4:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 8003ff6:	4a80      	ldr	r2, [pc, #512]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8003ff8:	2181      	movs	r1, #129	; 0x81
 8003ffa:	4880      	ldr	r0, [pc, #512]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8003ffc:	f00a fd8a 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2200      	movs	r2, #0
 8004004:	469a      	mov	sl, r3
 8004006:	4693      	mov	fp, r2
 8004008:	f640 0308 	movw	r3, #2056	; 0x808
 800400c:	eb1a 0803 	adds.w	r8, sl, r3
 8004010:	f14b 0900 	adc.w	r9, fp, #0
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	2200      	movs	r2, #0
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	61fa      	str	r2, [r7, #28]
 800401e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004022:	460b      	mov	r3, r1
 8004024:	4543      	cmp	r3, r8
 8004026:	4613      	mov	r3, r2
 8004028:	eb73 0309 	sbcs.w	r3, r3, r9
 800402c:	d205      	bcs.n	800403a <uavcan_primitive_array_Integer32_1_0_serialize_+0x92>
 800402e:	4b74      	ldr	r3, [pc, #464]	; (8004200 <uavcan_primitive_array_Integer32_1_0_serialize_+0x258>)
 8004030:	4a71      	ldr	r2, [pc, #452]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004032:	2182      	movs	r1, #130	; 0x82
 8004034:	4871      	ldr	r0, [pc, #452]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004036:	f00a fd6d 	bl	800eb14 <__assert_func>
        if (obj->value.count > 64)
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d902      	bls.n	800404a <uavcan_primitive_array_Integer32_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004044:	f06f 0309 	mvn.w	r3, #9
 8004048:	e0ce      	b.n	80041e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	08db      	lsrs	r3, r3, #3
 8004054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004056:	4413      	add	r3, r2
 8004058:	b2ca      	uxtb	r2, r1
 800405a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	3308      	adds	r3, #8
 8004060:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd0>
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 800406e:	4a62      	ldr	r2, [pc, #392]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004070:	218a      	movs	r1, #138	; 0x8a
 8004072:	4862      	ldr	r0, [pc, #392]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004074:	f00a fd4e 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004078:	2300      	movs	r3, #0
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
 800407c:	e04a      	b.n	8004114 <uavcan_primitive_array_Integer32_1_0_serialize_+0x16c>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <uavcan_primitive_array_Integer32_1_0_serialize_+0xec>
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 800408a:	4a5b      	ldr	r2, [pc, #364]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 800408c:	218d      	movs	r1, #141	; 0x8d
 800408e:	485b      	ldr	r0, [pc, #364]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004090:	f00a fd40 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	2200      	movs	r2, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	617a      	str	r2, [r7, #20]
 800409c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040a0:	460b      	mov	r3, r1
 80040a2:	f113 0420 	adds.w	r4, r3, #32
 80040a6:	4613      	mov	r3, r2
 80040a8:	f143 0500 	adc.w	r5, r3, #0
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	2200      	movs	r2, #0
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	60fa      	str	r2, [r7, #12]
 80040b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040ba:	460b      	mov	r3, r1
 80040bc:	42a3      	cmp	r3, r4
 80040be:	4613      	mov	r3, r2
 80040c0:	41ab      	sbcs	r3, r5
 80040c2:	d205      	bcs.n	80040d0 <uavcan_primitive_array_Integer32_1_0_serialize_+0x128>
 80040c4:	4b4f      	ldr	r3, [pc, #316]	; (8004204 <uavcan_primitive_array_Integer32_1_0_serialize_+0x25c>)
 80040c6:	4a4c      	ldr	r2, [pc, #304]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80040c8:	218e      	movs	r1, #142	; 0x8e
 80040ca:	484c      	ldr	r0, [pc, #304]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80040cc:	f00a fd22 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 32U);
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	17da      	asrs	r2, r3, #31
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	2320      	movs	r3, #32
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e6:	e9cd 2300 	strd	r2, r3, [sp]
 80040ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f0:	f7fd f93e 	bl	8001370 <nunavutSetIxx>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 80040fa:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da02      	bge.n	8004108 <uavcan_primitive_array_Integer32_1_0_serialize_+0x160>
            {
                return _err0_;
 8004102:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004106:	e06f      	b.n	80041e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
            }
            offset_bits += 32U;
 8004108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410a:	3320      	adds	r3, #32
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	3301      	adds	r3, #1
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800411a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411c:	429a      	cmp	r2, r3
 800411e:	d3ae      	bcc.n	800407e <uavcan_primitive_array_Integer32_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03a      	beq.n	80041a0 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1f8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800412a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f1c3 0308 	rsb	r3, r3, #8
 8004138:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 800413c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1a8>
 8004144:	4b30      	ldr	r3, [pc, #192]	; (8004208 <uavcan_primitive_array_Integer32_1_0_serialize_+0x260>)
 8004146:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004148:	219b      	movs	r1, #155	; 0x9b
 800414a:	482c      	ldr	r0, [pc, #176]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 800414c:	f00a fce2 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9cd 2300 	strd	r2, r3, [sp]
 8004162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004168:	f7fd f87e 	bl	8001268 <nunavutSetUxx>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 8004172:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004176:	2b00      	cmp	r3, #0
 8004178:	da02      	bge.n	8004180 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1d8>
        {
            return _err1_;
 800417a:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800417e:	e033      	b.n	80041e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
        }
        offset_bits += _pad0_;
 8004180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004186:	4413      	add	r3, r2
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1f8>
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004198:	21a2      	movs	r1, #162	; 0xa2
 800419a:	4818      	ldr	r0, [pc, #96]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 800419c:	f00a fcba 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	2b07      	cmp	r3, #7
 80041a4:	d805      	bhi.n	80041b2 <uavcan_primitive_array_Integer32_1_0_serialize_+0x20a>
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <uavcan_primitive_array_Integer32_1_0_serialize_+0x264>)
 80041a8:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041aa:	21a5      	movs	r1, #165	; 0xa5
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041ae:	f00a fcb1 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	f640 0208 	movw	r2, #2056	; 0x808
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d905      	bls.n	80041c8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x220>
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <uavcan_primitive_array_Integer32_1_0_serialize_+0x268>)
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041c0:	21a6      	movs	r1, #166	; 0xa6
 80041c2:	480e      	ldr	r0, [pc, #56]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041c4:	f00a fca6 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <uavcan_primitive_array_Integer32_1_0_serialize_+0x236>
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 80041d4:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041d6:	21a7      	movs	r1, #167	; 0xa7
 80041d8:	4808      	ldr	r0, [pc, #32]	; (80041fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041da:	f00a fc9b 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3740      	adds	r7, #64	; 0x40
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	08011768 	.word	0x08011768
 80041f8:	08014184 	.word	0x08014184
 80041fc:	08012048 	.word	0x08012048
 8004200:	08011d2c 	.word	0x08011d2c
 8004204:	08011bdc 	.word	0x08011bdc
 8004208:	08011860 	.word	0x08011860
 800420c:	0801186c 	.word	0x0801186c
 8004210:	08011d90 	.word	0x08011d90

08004214 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800423a:	f06f 0301 	mvn.w	r3, #1
 800423e:	e089      	b.n	8004354 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004246:	4b45      	ldr	r3, [pc, #276]	; (800435c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x148>)
 8004248:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x5c>
 8004264:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004268:	21ce      	movs	r1, #206	; 0xce
 800426a:	483f      	ldr	r0, [pc, #252]	; (8004368 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 800426c:	f00a fc52 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3308      	adds	r3, #8
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	429a      	cmp	r2, r3
 8004278:	d309      	bcc.n	800428e <uavcan_primitive_array_Integer32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800428c:	e003      	b.n	8004296 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3308      	adds	r3, #8
 800429a:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d902      	bls.n	80042ac <uavcan_primitive_array_Integer32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042a6:	f06f 0309 	mvn.w	r3, #9
 80042aa:	e053      	b.n	8004354 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x140>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xae>
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 80042b8:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 80042ba:	21dd      	movs	r1, #221	; 0xdd
 80042bc:	482a      	ldr	r0, [pc, #168]	; (8004368 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 80042be:	f00a fc29 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e01b      	b.n	8004300 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <uavcan_primitive_array_Integer32_1_0_deserialize_+0xca>
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 80042d6:	21e0      	movs	r1, #224	; 0xe0
 80042d8:	4823      	ldr	r0, [pc, #140]	; (8004368 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 80042da:	f00a fc1b 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI32(&buffer[0], capacity_bytes, offset_bits, 32);
 80042de:	2320      	movs	r3, #32
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	68b8      	ldr	r0, [r7, #8]
 80042e6:	f7fd fac5 	bl	8001874 <nunavutGetI32>
 80042ea:	4601      	mov	r1, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        offset_bits += 32U;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3320      	adds	r3, #32
 80042f8:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	3301      	adds	r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	429a      	cmp	r2, r3
 800430a:	d3dd      	bcc.n	80042c8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3307      	adds	r3, #7
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x118>
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 8004322:	4a10      	ldr	r2, [pc, #64]	; (8004364 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004324:	21e5      	movs	r1, #229	; 0xe5
 8004326:	4810      	ldr	r0, [pc, #64]	; (8004368 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 8004328:	f00a fbf4 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800432c:	6939      	ldr	r1, [r7, #16]
 800432e:	69f8      	ldr	r0, [r7, #28]
 8004330:	f7fc fde8 	bl	8000f04 <nunavutChooseMin>
 8004334:	4603      	mov	r3, r0
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	429a      	cmp	r2, r3
 8004344:	d205      	bcs.n	8004352 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x13e>
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x158>)
 8004348:	4a06      	ldr	r2, [pc, #24]	; (8004364 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 800434a:	21e7      	movs	r1, #231	; 0xe7
 800434c:	4806      	ldr	r0, [pc, #24]	; (8004368 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 800434e:	f00a fbe1 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	08011898 	.word	0x08011898
 8004360:	08011768 	.word	0x08011768
 8004364:	08013d68 	.word	0x08013d68
 8004368:	08012048 	.word	0x08012048
 800436c:	0801189c 	.word	0x0801189c

08004370 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b092      	sub	sp, #72	; 0x48
 8004376:	af04      	add	r7, sp, #16
 8004378:	6278      	str	r0, [r7, #36]	; 0x24
 800437a:	6239      	str	r1, [r7, #32]
 800437c:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <uavcan_primitive_array_Integer64_1_0_serialize_+0x20>
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <uavcan_primitive_array_Integer64_1_0_serialize_+0x20>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <uavcan_primitive_array_Integer64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004390:	f06f 0301 	mvn.w	r3, #1
 8004394:	e109      	b.n	80045aa <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	f640 0207 	movw	r2, #2055	; 0x807
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d802      	bhi.n	80043ae <uavcan_primitive_array_Integer64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80043a8:	f06f 0302 	mvn.w	r3, #2
 80043ac:	e0fd      	b.n	80045aa <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x58>
 80043bc:	4b7d      	ldr	r3, [pc, #500]	; (80045b4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 80043be:	4a7e      	ldr	r2, [pc, #504]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 80043c0:	2181      	movs	r1, #129	; 0x81
 80043c2:	487e      	ldr	r0, [pc, #504]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 80043c4:	f00a fba6 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	2200      	movs	r2, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	617a      	str	r2, [r7, #20]
 80043d0:	f640 0308 	movw	r3, #2056	; 0x808
 80043d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043d8:	4602      	mov	r2, r0
 80043da:	eb12 0803 	adds.w	r8, r2, r3
 80043de:	460b      	mov	r3, r1
 80043e0:	f143 0900 	adc.w	r9, r3, #0
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	2200      	movs	r2, #0
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	60fa      	str	r2, [r7, #12]
 80043ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043f2:	460b      	mov	r3, r1
 80043f4:	4543      	cmp	r3, r8
 80043f6:	4613      	mov	r3, r2
 80043f8:	eb73 0309 	sbcs.w	r3, r3, r9
 80043fc:	d205      	bcs.n	800440a <uavcan_primitive_array_Integer64_1_0_serialize_+0x9a>
 80043fe:	4b70      	ldr	r3, [pc, #448]	; (80045c0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x250>)
 8004400:	4a6d      	ldr	r2, [pc, #436]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004402:	2182      	movs	r1, #130	; 0x82
 8004404:	486d      	ldr	r0, [pc, #436]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004406:	f00a fb85 	bl	800eb14 <__assert_func>
        if (obj->value.count > 32)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004410:	2b20      	cmp	r3, #32
 8004412:	d902      	bls.n	800441a <uavcan_primitive_array_Integer64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004414:	f06f 0309 	mvn.w	r3, #9
 8004418:	e0c7      	b.n	80045aa <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	08db      	lsrs	r3, r3, #3
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	4413      	add	r3, r2
 8004428:	b2ca      	uxtb	r2, r1
 800442a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	3308      	adds	r3, #8
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd8>
 800443c:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 800443e:	4a5e      	ldr	r2, [pc, #376]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004440:	218a      	movs	r1, #138	; 0x8a
 8004442:	485e      	ldr	r0, [pc, #376]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004444:	f00a fb66 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004448:	2300      	movs	r3, #0
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
 800444c:	e043      	b.n	80044d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <uavcan_primitive_array_Integer64_1_0_serialize_+0xf4>
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 800445a:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800445c:	218d      	movs	r1, #141	; 0x8d
 800445e:	4857      	ldr	r0, [pc, #348]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004460:	f00a fb58 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	2200      	movs	r2, #0
 8004468:	469a      	mov	sl, r3
 800446a:	4693      	mov	fp, r2
 800446c:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 8004470:	f14b 0500 	adc.w	r5, fp, #0
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	2200      	movs	r2, #0
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004482:	460b      	mov	r3, r1
 8004484:	42a3      	cmp	r3, r4
 8004486:	4613      	mov	r3, r2
 8004488:	41ab      	sbcs	r3, r5
 800448a:	d205      	bcs.n	8004498 <uavcan_primitive_array_Integer64_1_0_serialize_+0x128>
 800448c:	4b4d      	ldr	r3, [pc, #308]	; (80045c4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x254>)
 800448e:	4a4a      	ldr	r2, [pc, #296]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004490:	218e      	movs	r1, #142	; 0x8e
 8004492:	484a      	ldr	r0, [pc, #296]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004494:	f00a fb3e 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 64U);
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	9102      	str	r1, [sp, #8]
 80044a8:	e9cd 2300 	strd	r2, r3, [sp]
 80044ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b0:	6a38      	ldr	r0, [r7, #32]
 80044b2:	f7fc ff5d 	bl	8001370 <nunavutSetIxx>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 80044bc:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da02      	bge.n	80044ca <uavcan_primitive_array_Integer64_1_0_serialize_+0x15a>
            {
                return _err0_;
 80044c4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80044c8:	e06f      	b.n	80045aa <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
            }
            offset_bits += 64U;
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	3340      	adds	r3, #64	; 0x40
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3301      	adds	r3, #1
 80044d4:	633b      	str	r3, [r7, #48]	; 0x30
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044de:	429a      	cmp	r2, r3
 80044e0:	d3b5      	bcc.n	800444e <uavcan_primitive_array_Integer64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d03a      	beq.n	8004562 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f1c3 0308 	rsb	r3, r3, #8
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 80044fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1a2>
 8004506:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x258>)
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800450a:	219b      	movs	r1, #155	; 0x9b
 800450c:	482b      	ldr	r0, [pc, #172]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800450e:	f00a fb01 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004516:	9302      	str	r3, [sp, #8]
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9cd 2300 	strd	r2, r3, [sp]
 8004524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004528:	6a38      	ldr	r0, [r7, #32]
 800452a:	f7fc fe9d 	bl	8001268 <nunavutSetUxx>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8004534:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004538:	2b00      	cmp	r3, #0
 800453a:	da02      	bge.n	8004542 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1d2>
        {
            return _err1_;
 800453c:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004540:	e033      	b.n	80045aa <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
        }
        offset_bits += _pad0_;
 8004542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004548:	4413      	add	r3, r2
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1f2>
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800455a:	21a2      	movs	r1, #162	; 0xa2
 800455c:	4817      	ldr	r0, [pc, #92]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800455e:	f00a fad9 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	2b07      	cmp	r3, #7
 8004566:	d805      	bhi.n	8004574 <uavcan_primitive_array_Integer64_1_0_serialize_+0x204>
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <uavcan_primitive_array_Integer64_1_0_serialize_+0x25c>)
 800456a:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800456c:	21a5      	movs	r1, #165	; 0xa5
 800456e:	4813      	ldr	r0, [pc, #76]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004570:	f00a fad0 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	f640 0208 	movw	r2, #2056	; 0x808
 800457a:	4293      	cmp	r3, r2
 800457c:	d905      	bls.n	800458a <uavcan_primitive_array_Integer64_1_0_serialize_+0x21a>
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x260>)
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004582:	21a6      	movs	r1, #166	; 0xa6
 8004584:	480d      	ldr	r0, [pc, #52]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004586:	f00a fac5 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x230>
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004598:	21a7      	movs	r1, #167	; 0xa7
 800459a:	4808      	ldr	r0, [pc, #32]	; (80045bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800459c:	f00a faba 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3738      	adds	r7, #56	; 0x38
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b4:	08011768 	.word	0x08011768
 80045b8:	08014154 	.word	0x08014154
 80045bc:	080120d0 	.word	0x080120d0
 80045c0:	08011d2c 	.word	0x08011d2c
 80045c4:	08011d60 	.word	0x08011d60
 80045c8:	08011860 	.word	0x08011860
 80045cc:	0801186c 	.word	0x0801186c
 80045d0:	08011d90 	.word	0x08011d90

080045d4 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80045fa:	f06f 0301 	mvn.w	r3, #1
 80045fe:	e08c      	b.n	800471a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x150>)
 8004608:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x5c>
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 8004628:	21ce      	movs	r1, #206	; 0xce
 800462a:	4841      	ldr	r0, [pc, #260]	; (8004730 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 800462c:	f00a fa72 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3308      	adds	r3, #8
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	429a      	cmp	r2, r3
 8004638:	d309      	bcc.n	800464e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800464c:	e003      	b.n	8004656 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3308      	adds	r3, #8
 800465a:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004662:	2b20      	cmp	r3, #32
 8004664:	d902      	bls.n	800466c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004666:	f06f 0309 	mvn.w	r3, #9
 800466a:	e056      	b.n	800471a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xae>
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 8004678:	4a2c      	ldr	r2, [pc, #176]	; (800472c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 800467a:	21dd      	movs	r1, #221	; 0xdd
 800467c:	482c      	ldr	r0, [pc, #176]	; (8004730 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 800467e:	f00a fa49 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e01e      	b.n	80046c6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <uavcan_primitive_array_Integer64_1_0_deserialize_+0xca>
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 8004696:	21e0      	movs	r1, #224	; 0xe0
 8004698:	4825      	ldr	r0, [pc, #148]	; (8004730 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 800469a:	f00a fa3b 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI64(&buffer[0], capacity_bytes, offset_bits, 64);
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f7fd f937 	bl	8001918 <nunavutGetI64>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	00c9      	lsls	r1, r1, #3
 80046b4:	4401      	add	r1, r0
 80046b6:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3340      	adds	r3, #64	; 0x40
 80046be:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3da      	bcc.n	8004688 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3307      	adds	r3, #7
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x11e>
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 80046e8:	4a10      	ldr	r2, [pc, #64]	; (800472c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 80046ea:	21e5      	movs	r1, #229	; 0xe5
 80046ec:	4810      	ldr	r0, [pc, #64]	; (8004730 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 80046ee:	f00a fa11 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80046f2:	6939      	ldr	r1, [r7, #16]
 80046f4:	69f8      	ldr	r0, [r7, #28]
 80046f6:	f7fc fc05 	bl	8000f04 <nunavutChooseMin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	08da      	lsrs	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	d205      	bcs.n	8004718 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x144>
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x160>)
 800470e:	4a07      	ldr	r2, [pc, #28]	; (800472c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 8004710:	21e7      	movs	r1, #231	; 0xe7
 8004712:	4807      	ldr	r0, [pc, #28]	; (8004730 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 8004714:	f00a f9fe 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	08011898 	.word	0x08011898
 8004728:	08011768 	.word	0x08011768
 800472c:	08013d24 	.word	0x08013d24
 8004730:	080120d0 	.word	0x080120d0
 8004734:	0801189c 	.word	0x0801189c

08004738 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b094      	sub	sp, #80	; 0x50
 800473e:	af04      	add	r7, sp, #16
 8004740:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004742:	62b9      	str	r1, [r7, #40]	; 0x28
 8004744:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <uavcan_primitive_array_Integer8_1_0_serialize_+0x20>
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <uavcan_primitive_array_Integer8_1_0_serialize_+0x20>
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <uavcan_primitive_array_Integer8_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004758:	f06f 0301 	mvn.w	r3, #1
 800475c:	e10a      	b.n	8004974 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800476c:	d202      	bcs.n	8004774 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800476e:	f06f 0302 	mvn.w	r3, #2
 8004772:	e0ff      	b.n	8004974 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <uavcan_primitive_array_Integer8_1_0_serialize_+0x56>
 8004782:	4b7f      	ldr	r3, [pc, #508]	; (8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 8004784:	4a7f      	ldr	r2, [pc, #508]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004786:	2181      	movs	r1, #129	; 0x81
 8004788:	487f      	ldr	r0, [pc, #508]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800478a:	f00a f9c3 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2200      	movs	r2, #0
 8004792:	469a      	mov	sl, r3
 8004794:	4693      	mov	fp, r2
 8004796:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 800479a:	f14b 0900 	adc.w	r9, fp, #0
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	2200      	movs	r2, #0
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	61fa      	str	r2, [r7, #28]
 80047a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047ac:	460b      	mov	r3, r1
 80047ae:	4543      	cmp	r3, r8
 80047b0:	4613      	mov	r3, r2
 80047b2:	eb73 0309 	sbcs.w	r3, r3, r9
 80047b6:	d205      	bcs.n	80047c4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x8c>
 80047b8:	4b74      	ldr	r3, [pc, #464]	; (800498c <uavcan_primitive_array_Integer8_1_0_serialize_+0x254>)
 80047ba:	4a72      	ldr	r2, [pc, #456]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 80047bc:	2182      	movs	r1, #130	; 0x82
 80047be:	4872      	ldr	r0, [pc, #456]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 80047c0:	f00a f9a8 	bl	800eb14 <__assert_func>
        if (obj->value.count > 256)
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ce:	d902      	bls.n	80047d6 <uavcan_primitive_array_Integer8_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80047d0:	f06f 0309 	mvn.w	r3, #9
 80047d4:	e0ce      	b.n	8004974 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047dc:	2200      	movs	r2, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	617a      	str	r2, [r7, #20]
 80047e2:	2310      	movs	r3, #16
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047ea:	e9cd 2300 	strd	r2, r3, [sp]
 80047ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f4:	f7fc fd38 	bl	8001268 <nunavutSetUxx>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 80047fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004802:	2b00      	cmp	r3, #0
 8004804:	da02      	bge.n	800480c <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800480a:	e0b3      	b.n	8004974 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        offset_bits += 16U;
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	3310      	adds	r3, #16
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <uavcan_primitive_array_Integer8_1_0_serialize_+0xf0>
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 800481e:	4a59      	ldr	r2, [pc, #356]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004820:	218e      	movs	r1, #142	; 0x8e
 8004822:	4859      	ldr	r0, [pc, #356]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004824:	f00a f976 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004828:	2300      	movs	r3, #0
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
 800482c:	e039      	b.n	80048a2 <uavcan_primitive_array_Integer8_1_0_serialize_+0x16a>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <uavcan_primitive_array_Integer8_1_0_serialize_+0x10c>
 8004838:	4b51      	ldr	r3, [pc, #324]	; (8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 800483a:	4a52      	ldr	r2, [pc, #328]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 800483c:	2191      	movs	r1, #145	; 0x91
 800483e:	4852      	ldr	r0, [pc, #328]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004840:	f00a f968 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8004844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004846:	2200      	movs	r2, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004850:	460b      	mov	r3, r1
 8004852:	f113 0408 	adds.w	r4, r3, #8
 8004856:	4613      	mov	r3, r2
 8004858:	f143 0500 	adc.w	r5, r3, #0
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	2200      	movs	r2, #0
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	e9d7 1200 	ldrd	r1, r2, [r7]
 800486a:	460b      	mov	r3, r1
 800486c:	42a3      	cmp	r3, r4
 800486e:	4613      	mov	r3, r2
 8004870:	41ab      	sbcs	r3, r5
 8004872:	d205      	bcs.n	8004880 <uavcan_primitive_array_Integer8_1_0_serialize_+0x148>
 8004874:	4b46      	ldr	r3, [pc, #280]	; (8004990 <uavcan_primitive_array_Integer8_1_0_serialize_+0x258>)
 8004876:	4a43      	ldr	r2, [pc, #268]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004878:	2192      	movs	r1, #146	; 0x92
 800487a:	4843      	ldr	r0, [pc, #268]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800487c:	f00a f94a 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8004880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	4413      	add	r3, r2
 8004886:	f993 1000 	ldrsb.w	r1, [r3]
 800488a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004890:	4413      	add	r3, r2
 8004892:	b2ca      	uxtb	r2, r1
 8004894:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 8004896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004898:	3308      	adds	r3, #8
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	3301      	adds	r3, #1
 80048a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80048a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3bf      	bcc.n	800482e <uavcan_primitive_array_Integer8_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d03a      	beq.n	800492e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1f6>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f1c3 0308 	rsb	r3, r3, #8
 80048c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80048ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <uavcan_primitive_array_Integer8_1_0_serialize_+0x1a6>
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <uavcan_primitive_array_Integer8_1_0_serialize_+0x25c>)
 80048d4:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 80048d6:	219b      	movs	r1, #155	; 0x9b
 80048d8:	482b      	ldr	r0, [pc, #172]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 80048da:	f00a f91b 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80048de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048e2:	9302      	str	r3, [sp, #8]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9cd 2300 	strd	r2, r3, [sp]
 80048f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f6:	f7fc fcb7 	bl	8001268 <nunavutSetUxx>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 8004900:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004904:	2b00      	cmp	r3, #0
 8004906:	da02      	bge.n	800490e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1d6>
        {
            return _err1_;
 8004908:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800490c:	e032      	b.n	8004974 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        offset_bits += _pad0_;
 800490e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004914:	4413      	add	r3, r2
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1f6>
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 8004924:	4a17      	ldr	r2, [pc, #92]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004926:	21a2      	movs	r1, #162	; 0xa2
 8004928:	4817      	ldr	r0, [pc, #92]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800492a:	f00a f8f3 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	2b0f      	cmp	r3, #15
 8004932:	d805      	bhi.n	8004940 <uavcan_primitive_array_Integer8_1_0_serialize_+0x208>
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <uavcan_primitive_array_Integer8_1_0_serialize_+0x260>)
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004938:	21a5      	movs	r1, #165	; 0xa5
 800493a:	4813      	ldr	r0, [pc, #76]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800493c:	f00a f8ea 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8004940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004942:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004946:	d905      	bls.n	8004954 <uavcan_primitive_array_Integer8_1_0_serialize_+0x21c>
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <uavcan_primitive_array_Integer8_1_0_serialize_+0x264>)
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 800494c:	21a6      	movs	r1, #166	; 0xa6
 800494e:	480e      	ldr	r0, [pc, #56]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004950:	f00a f8e0 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <uavcan_primitive_array_Integer8_1_0_serialize_+0x232>
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004962:	21a7      	movs	r1, #167	; 0xa7
 8004964:	4808      	ldr	r0, [pc, #32]	; (8004988 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004966:	f00a f8d5 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	08da      	lsrs	r2, r3, #3
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3740      	adds	r7, #64	; 0x40
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497e:	bf00      	nop
 8004980:	08011768 	.word	0x08011768
 8004984:	080141e4 	.word	0x080141e4
 8004988:	08012158 	.word	0x08012158
 800498c:	08011e28 	.word	0x08011e28
 8004990:	08011830 	.word	0x08011830
 8004994:	08011860 	.word	0x08011860
 8004998:	08011e5c 	.word	0x08011e5c
 800499c:	08011e74 	.word	0x08011e74

080049a0 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80049c6:	f06f 0301 	mvn.w	r3, #1
 80049ca:	e084      	b.n	8004ad6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x136>
    }
    if (buffer == NULL)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80049d2:	4b43      	ldr	r3, [pc, #268]	; (8004ae0 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x140>)
 80049d4:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <uavcan_primitive_array_Integer8_1_0_deserialize_+0x5c>
 80049f0:	4b3c      	ldr	r3, [pc, #240]	; (8004ae4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 80049f2:	4a3d      	ldr	r2, [pc, #244]	; (8004ae8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 80049f4:	21ce      	movs	r1, #206	; 0xce
 80049f6:	483d      	ldr	r0, [pc, #244]	; (8004aec <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 80049f8:	f00a f88c 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80049fc:	2310      	movs	r3, #16
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	6979      	ldr	r1, [r7, #20]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fc fd0c 	bl	8001420 <nunavutGetU16>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3310      	adds	r3, #16
 8004a16:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a22:	d902      	bls.n	8004a2a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a24:	f06f 0309 	mvn.w	r3, #9
 8004a28:	e055      	b.n	8004ad6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x136>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xa0>
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004a36:	4a2c      	ldr	r2, [pc, #176]	; (8004ae8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004a38:	21d6      	movs	r1, #214	; 0xd6
 8004a3a:	482c      	ldr	r0, [pc, #176]	; (8004aec <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004a3c:	f00a f86a 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e01d      	b.n	8004a82 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xe2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004a52:	4a25      	ldr	r2, [pc, #148]	; (8004ae8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004a54:	21d9      	movs	r1, #217	; 0xd9
 8004a56:	4825      	ldr	r0, [pc, #148]	; (8004aec <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004a58:	f00a f85c 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI8(&buffer[0], capacity_bytes, offset_bits, 8);
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	68b8      	ldr	r0, [r7, #8]
 8004a64:	f7fc fe58 	bl	8001718 <nunavutGetI8>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	4413      	add	r3, r2
 8004a72:	460a      	mov	r2, r1
 8004a74:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3db      	bcc.n	8004a46 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3307      	adds	r3, #7
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <uavcan_primitive_array_Integer8_1_0_deserialize_+0x10e>
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004aa6:	21de      	movs	r1, #222	; 0xde
 8004aa8:	4810      	ldr	r0, [pc, #64]	; (8004aec <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004aaa:	f00a f833 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	69f8      	ldr	r0, [r7, #28]
 8004ab2:	f7fc fa27 	bl	8000f04 <nunavutChooseMin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d205      	bcs.n	8004ad4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x134>
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x150>)
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004acc:	21e0      	movs	r1, #224	; 0xe0
 8004ace:	4807      	ldr	r0, [pc, #28]	; (8004aec <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004ad0:	f00a f820 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08011898 	.word	0x08011898
 8004ae4:	08011768 	.word	0x08011768
 8004ae8:	08013de0 	.word	0x08013de0
 8004aec:	08012158 	.word	0x08012158
 8004af0:	0801189c 	.word	0x0801189c

08004af4 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af8:	b094      	sub	sp, #80	; 0x50
 8004afa:	af04      	add	r7, sp, #16
 8004afc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004afe:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b00:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <uavcan_primitive_array_Natural16_1_0_serialize_+0x20>
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <uavcan_primitive_array_Natural16_1_0_serialize_+0x20>
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <uavcan_primitive_array_Natural16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b14:	f06f 0301 	mvn.w	r3, #1
 8004b18:	e10d      	b.n	8004d36 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	00da      	lsls	r2, r3, #3
 8004b24:	f640 0307 	movw	r3, #2055	; 0x807
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d802      	bhi.n	8004b32 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004b2c:	f06f 0302 	mvn.w	r3, #2
 8004b30:	e101      	b.n	8004d36 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <uavcan_primitive_array_Natural16_1_0_serialize_+0x58>
 8004b40:	4b7f      	ldr	r3, [pc, #508]	; (8004d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004b42:	4a80      	ldr	r2, [pc, #512]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004b44:	2181      	movs	r1, #129	; 0x81
 8004b46:	4880      	ldr	r0, [pc, #512]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004b48:	f009 ffe4 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4e:	2200      	movs	r2, #0
 8004b50:	469a      	mov	sl, r3
 8004b52:	4693      	mov	fp, r2
 8004b54:	f640 0308 	movw	r3, #2056	; 0x808
 8004b58:	eb1a 0803 	adds.w	r8, sl, r3
 8004b5c:	f14b 0900 	adc.w	r9, fp, #0
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	2200      	movs	r2, #0
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4543      	cmp	r3, r8
 8004b72:	4613      	mov	r3, r2
 8004b74:	eb73 0309 	sbcs.w	r3, r3, r9
 8004b78:	d205      	bcs.n	8004b86 <uavcan_primitive_array_Natural16_1_0_serialize_+0x92>
 8004b7a:	4b74      	ldr	r3, [pc, #464]	; (8004d4c <uavcan_primitive_array_Natural16_1_0_serialize_+0x258>)
 8004b7c:	4a71      	ldr	r2, [pc, #452]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004b7e:	2182      	movs	r1, #130	; 0x82
 8004b80:	4871      	ldr	r0, [pc, #452]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004b82:	f009 ffc7 	bl	800eb14 <__assert_func>
        if (obj->value.count > 128)
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d902      	bls.n	8004b96 <uavcan_primitive_array_Natural16_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004b90:	f06f 0309 	mvn.w	r3, #9
 8004b94:	e0cf      	b.n	8004d36 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba2:	4413      	add	r3, r2
 8004ba4:	b2ca      	uxtb	r2, r1
 8004ba6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	3308      	adds	r3, #8
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd0>
 8004bb8:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004bba:	4a62      	ldr	r2, [pc, #392]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004bbc:	218a      	movs	r1, #138	; 0x8a
 8004bbe:	4862      	ldr	r0, [pc, #392]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004bc0:	f009 ffa8 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc8:	e04b      	b.n	8004c62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x16e>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <uavcan_primitive_array_Natural16_1_0_serialize_+0xec>
 8004bd4:	4b5a      	ldr	r3, [pc, #360]	; (8004d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004bd6:	4a5b      	ldr	r2, [pc, #364]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004bd8:	218d      	movs	r1, #141	; 0x8d
 8004bda:	485b      	ldr	r0, [pc, #364]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004bdc:	f009 ff9a 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	2200      	movs	r2, #0
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	617a      	str	r2, [r7, #20]
 8004be8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bec:	460b      	mov	r3, r1
 8004bee:	f113 0410 	adds.w	r4, r3, #16
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	f143 0500 	adc.w	r5, r3, #0
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	60fa      	str	r2, [r7, #12]
 8004c02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c06:	460b      	mov	r3, r1
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	41ab      	sbcs	r3, r5
 8004c0e:	d205      	bcs.n	8004c1c <uavcan_primitive_array_Natural16_1_0_serialize_+0x128>
 8004c10:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <uavcan_primitive_array_Natural16_1_0_serialize_+0x25c>)
 8004c12:	4a4c      	ldr	r2, [pc, #304]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004c14:	218e      	movs	r1, #142	; 0x8e
 8004c16:	484c      	ldr	r0, [pc, #304]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004c18:	f009 ff7c 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 16U);
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2200      	movs	r2, #0
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c34:	e9cd 2300 	strd	r2, r3, [sp]
 8004c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3e:	f7fc fb13 	bl	8001268 <nunavutSetUxx>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8004c48:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da02      	bge.n	8004c56 <uavcan_primitive_array_Natural16_1_0_serialize_+0x162>
            {
                return _err0_;
 8004c50:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004c54:	e06f      	b.n	8004d36 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
            }
            offset_bits += 16U;
 8004c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c58:	3310      	adds	r3, #16
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	3301      	adds	r3, #1
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3ad      	bcc.n	8004bca <uavcan_primitive_array_Natural16_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d03a      	beq.n	8004cee <uavcan_primitive_array_Natural16_1_0_serialize_+0x1fa>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f1c3 0308 	rsb	r3, r3, #8
 8004c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8004c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <uavcan_primitive_array_Natural16_1_0_serialize_+0x1aa>
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <uavcan_primitive_array_Natural16_1_0_serialize_+0x260>)
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004c96:	219b      	movs	r1, #155	; 0x9b
 8004c98:	482b      	ldr	r0, [pc, #172]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004c9a:	f009 ff3b 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ca2:	9302      	str	r3, [sp, #8]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9cd 2300 	strd	r2, r3, [sp]
 8004cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f7fc fad7 	bl	8001268 <nunavutSetUxx>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 8004cc0:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da02      	bge.n	8004cce <uavcan_primitive_array_Natural16_1_0_serialize_+0x1da>
        {
            return _err1_;
 8004cc8:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004ccc:	e033      	b.n	8004d36 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
        }
        offset_bits += _pad0_;
 8004cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cd4:	4413      	add	r3, r2
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <uavcan_primitive_array_Natural16_1_0_serialize_+0x1fa>
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004ce6:	21a2      	movs	r1, #162	; 0xa2
 8004ce8:	4817      	ldr	r0, [pc, #92]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004cea:	f009 ff13 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8004cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	d805      	bhi.n	8004d00 <uavcan_primitive_array_Natural16_1_0_serialize_+0x20c>
 8004cf4:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <uavcan_primitive_array_Natural16_1_0_serialize_+0x264>)
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004cf8:	21a5      	movs	r1, #165	; 0xa5
 8004cfa:	4813      	ldr	r0, [pc, #76]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004cfc:	f009 ff0a 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8004d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d02:	f640 0208 	movw	r2, #2056	; 0x808
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d905      	bls.n	8004d16 <uavcan_primitive_array_Natural16_1_0_serialize_+0x222>
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <uavcan_primitive_array_Natural16_1_0_serialize_+0x268>)
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d0e:	21a6      	movs	r1, #166	; 0xa6
 8004d10:	480d      	ldr	r0, [pc, #52]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d12:	f009 feff 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <uavcan_primitive_array_Natural16_1_0_serialize_+0x238>
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d24:	21a7      	movs	r1, #167	; 0xa7
 8004d26:	4808      	ldr	r0, [pc, #32]	; (8004d48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d28:	f009 fef4 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2e:	08da      	lsrs	r2, r3, #3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3740      	adds	r7, #64	; 0x40
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d40:	08011768 	.word	0x08011768
 8004d44:	08014274 	.word	0x08014274
 8004d48:	080121e0 	.word	0x080121e0
 8004d4c:	08011d2c 	.word	0x08011d2c
 8004d50:	08012018 	.word	0x08012018
 8004d54:	08011860 	.word	0x08011860
 8004d58:	0801186c 	.word	0x0801186c
 8004d5c:	08011d90 	.word	0x08011d90

08004d60 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d86:	f06f 0301 	mvn.w	r3, #1
 8004d8a:	e08a      	b.n	8004ea2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x142>
    }
    if (buffer == NULL)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004d92:	4b46      	ldr	r3, [pc, #280]	; (8004eac <uavcan_primitive_array_Natural16_1_0_deserialize_+0x14c>)
 8004d94:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x5c>
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004db2:	4a40      	ldr	r2, [pc, #256]	; (8004eb4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004db4:	21ce      	movs	r1, #206	; 0xce
 8004db6:	4840      	ldr	r0, [pc, #256]	; (8004eb8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004db8:	f009 feac 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d309      	bcc.n	8004dda <uavcan_primitive_array_Natural16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004dd8:	e003      	b.n	8004de2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3308      	adds	r3, #8
 8004de6:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d902      	bls.n	8004df8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004df2:	f06f 0309 	mvn.w	r3, #9
 8004df6:	e054      	b.n	8004ea2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x142>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xae>
 8004e02:	4b2b      	ldr	r3, [pc, #172]	; (8004eb0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e04:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e06:	21dd      	movs	r1, #221	; 0xdd
 8004e08:	482b      	ldr	r0, [pc, #172]	; (8004eb8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e0a:	f009 fe83 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e01c      	b.n	8004e4e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xee>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <uavcan_primitive_array_Natural16_1_0_deserialize_+0xca>
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e20:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e22:	21e0      	movs	r1, #224	; 0xe0
 8004e24:	4824      	ldr	r0, [pc, #144]	; (8004eb8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e26:	f009 fe75 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	6979      	ldr	r1, [r7, #20]
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f7fc faf5 	bl	8001420 <nunavutGetU16>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4619      	mov	r1, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        offset_bits += 16U;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3310      	adds	r3, #16
 8004e46:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3dc      	bcc.n	8004e14 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x11a>
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e70:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e72:	21e5      	movs	r1, #229	; 0xe5
 8004e74:	4810      	ldr	r0, [pc, #64]	; (8004eb8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e76:	f009 fe4d 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	69f8      	ldr	r0, [r7, #28]
 8004e7e:	f7fc f841 	bl	8000f04 <nunavutChooseMin>
 8004e82:	4603      	mov	r3, r0
 8004e84:	08da      	lsrs	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d205      	bcs.n	8004ea0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x140>
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x15c>)
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e98:	21e7      	movs	r1, #231	; 0xe7
 8004e9a:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e9c:	f009 fe3a 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	08011898 	.word	0x08011898
 8004eb0:	08011768 	.word	0x08011768
 8004eb4:	08013e8c 	.word	0x08013e8c
 8004eb8:	080121e0 	.word	0x080121e0
 8004ebc:	0801189c 	.word	0x0801189c

08004ec0 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec4:	b094      	sub	sp, #80	; 0x50
 8004ec6:	af04      	add	r7, sp, #16
 8004ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004eca:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ecc:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x20>
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x20>
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <uavcan_primitive_array_Natural32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004ee0:	f06f 0301 	mvn.w	r3, #1
 8004ee4:	e10c      	b.n	8005100 <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	00da      	lsls	r2, r3, #3
 8004ef0:	f640 0307 	movw	r3, #2055	; 0x807
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d802      	bhi.n	8004efe <uavcan_primitive_array_Natural32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004ef8:	f06f 0302 	mvn.w	r3, #2
 8004efc:	e100      	b.n	8005100 <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <uavcan_primitive_array_Natural32_1_0_serialize_+0x58>
 8004f0c:	4b7f      	ldr	r3, [pc, #508]	; (800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004f0e:	4a80      	ldr	r2, [pc, #512]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004f10:	2181      	movs	r1, #129	; 0x81
 8004f12:	4880      	ldr	r0, [pc, #512]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004f14:	f009 fdfe 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	469a      	mov	sl, r3
 8004f1e:	4693      	mov	fp, r2
 8004f20:	f640 0308 	movw	r3, #2056	; 0x808
 8004f24:	eb1a 0803 	adds.w	r8, sl, r3
 8004f28:	f14b 0900 	adc.w	r9, fp, #0
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	2200      	movs	r2, #0
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	61fa      	str	r2, [r7, #28]
 8004f36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4543      	cmp	r3, r8
 8004f3e:	4613      	mov	r3, r2
 8004f40:	eb73 0309 	sbcs.w	r3, r3, r9
 8004f44:	d205      	bcs.n	8004f52 <uavcan_primitive_array_Natural32_1_0_serialize_+0x92>
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <uavcan_primitive_array_Natural32_1_0_serialize_+0x258>)
 8004f48:	4a71      	ldr	r2, [pc, #452]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004f4a:	2182      	movs	r1, #130	; 0x82
 8004f4c:	4871      	ldr	r0, [pc, #452]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004f4e:	f009 fde1 	bl	800eb14 <__assert_func>
        if (obj->value.count > 64)
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d902      	bls.n	8004f62 <uavcan_primitive_array_Natural32_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004f5c:	f06f 0309 	mvn.w	r3, #9
 8004f60:	e0ce      	b.n	8005100 <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6e:	4413      	add	r3, r2
 8004f70:	b2ca      	uxtb	r2, r1
 8004f72:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f76:	3308      	adds	r3, #8
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd0>
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004f86:	4a62      	ldr	r2, [pc, #392]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004f88:	218a      	movs	r1, #138	; 0x8a
 8004f8a:	4862      	ldr	r0, [pc, #392]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004f8c:	f009 fdc2 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004f90:	2300      	movs	r3, #0
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f94:	e04a      	b.n	800502c <uavcan_primitive_array_Natural32_1_0_serialize_+0x16c>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <uavcan_primitive_array_Natural32_1_0_serialize_+0xec>
 8004fa0:	4b5a      	ldr	r3, [pc, #360]	; (800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004fa2:	4a5b      	ldr	r2, [pc, #364]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004fa4:	218d      	movs	r1, #141	; 0x8d
 8004fa6:	485b      	ldr	r0, [pc, #364]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004fa8:	f009 fdb4 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	2200      	movs	r2, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	617a      	str	r2, [r7, #20]
 8004fb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	f113 0420 	adds.w	r4, r3, #32
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	f143 0500 	adc.w	r5, r3, #0
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	60fa      	str	r2, [r7, #12]
 8004fce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	41ab      	sbcs	r3, r5
 8004fda:	d205      	bcs.n	8004fe8 <uavcan_primitive_array_Natural32_1_0_serialize_+0x128>
 8004fdc:	4b4f      	ldr	r3, [pc, #316]	; (800511c <uavcan_primitive_array_Natural32_1_0_serialize_+0x25c>)
 8004fde:	4a4c      	ldr	r2, [pc, #304]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004fe0:	218e      	movs	r1, #142	; 0x8e
 8004fe2:	484c      	ldr	r0, [pc, #304]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004fe4:	f009 fd96 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 32U);
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	9302      	str	r3, [sp, #8]
 8004ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffe:	e9cd 2300 	strd	r2, r3, [sp]
 8005002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005004:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005008:	f7fc f92e 	bl	8001268 <nunavutSetUxx>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8005012:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8005016:	2b00      	cmp	r3, #0
 8005018:	da02      	bge.n	8005020 <uavcan_primitive_array_Natural32_1_0_serialize_+0x160>
            {
                return _err0_;
 800501a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800501e:	e06f      	b.n	8005100 <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
            }
            offset_bits += 32U;
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	3320      	adds	r3, #32
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	3301      	adds	r3, #1
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005034:	429a      	cmp	r2, r3
 8005036:	d3ae      	bcc.n	8004f96 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03a      	beq.n	80050b8 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1f8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f1c3 0308 	rsb	r3, r3, #8
 8005050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1a8>
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <uavcan_primitive_array_Natural32_1_0_serialize_+0x260>)
 800505e:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8005060:	219b      	movs	r1, #155	; 0x9b
 8005062:	482c      	ldr	r0, [pc, #176]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8005064:	f009 fd56 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800506c:	9302      	str	r3, [sp, #8]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9cd 2300 	strd	r2, r3, [sp]
 800507a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800507c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800507e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005080:	f7fc f8f2 	bl	8001268 <nunavutSetUxx>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 800508a:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800508e:	2b00      	cmp	r3, #0
 8005090:	da02      	bge.n	8005098 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1d8>
        {
            return _err1_;
 8005092:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8005096:	e033      	b.n	8005100 <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
        }
        offset_bits += _pad0_;
 8005098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800509c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800509e:	4413      	add	r3, r2
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80050a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1f8>
 80050ac:	4b17      	ldr	r3, [pc, #92]	; (800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050b0:	21a2      	movs	r1, #162	; 0xa2
 80050b2:	4818      	ldr	r0, [pc, #96]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050b4:	f009 fd2e 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	2b07      	cmp	r3, #7
 80050bc:	d805      	bhi.n	80050ca <uavcan_primitive_array_Natural32_1_0_serialize_+0x20a>
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <uavcan_primitive_array_Natural32_1_0_serialize_+0x264>)
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050c2:	21a5      	movs	r1, #165	; 0xa5
 80050c4:	4813      	ldr	r0, [pc, #76]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050c6:	f009 fd25 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	f640 0208 	movw	r2, #2056	; 0x808
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d905      	bls.n	80050e0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x220>
 80050d4:	4b14      	ldr	r3, [pc, #80]	; (8005128 <uavcan_primitive_array_Natural32_1_0_serialize_+0x268>)
 80050d6:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050d8:	21a6      	movs	r1, #166	; 0xa6
 80050da:	480e      	ldr	r0, [pc, #56]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050dc:	f009 fd1a 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <uavcan_primitive_array_Natural32_1_0_serialize_+0x236>
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050ee:	21a7      	movs	r1, #167	; 0xa7
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050f2:	f009 fd0f 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	08da      	lsrs	r2, r3, #3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3740      	adds	r7, #64	; 0x40
 8005104:	46bd      	mov	sp, r7
 8005106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800510a:	bf00      	nop
 800510c:	08011768 	.word	0x08011768
 8005110:	08014244 	.word	0x08014244
 8005114:	08012268 	.word	0x08012268
 8005118:	08011d2c 	.word	0x08011d2c
 800511c:	08011bdc 	.word	0x08011bdc
 8005120:	08011860 	.word	0x08011860
 8005124:	0801186c 	.word	0x0801186c
 8005128:	08011d90 	.word	0x08011d90

0800512c <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005152:	f06f 0301 	mvn.w	r3, #1
 8005156:	e089      	b.n	800526c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800515e:	4b45      	ldr	r3, [pc, #276]	; (8005274 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x148>)
 8005160:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x5c>
 800517c:	4b3e      	ldr	r3, [pc, #248]	; (8005278 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 800517e:	4a3f      	ldr	r2, [pc, #252]	; (800527c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 8005180:	21ce      	movs	r1, #206	; 0xce
 8005182:	483f      	ldr	r0, [pc, #252]	; (8005280 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 8005184:	f009 fcc6 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	3308      	adds	r3, #8
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	d309      	bcc.n	80051a6 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051a4:	e003      	b.n	80051ae <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3308      	adds	r3, #8
 80051b2:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d902      	bls.n	80051c4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80051be:	f06f 0309 	mvn.w	r3, #9
 80051c2:	e053      	b.n	800526c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x140>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <uavcan_primitive_array_Natural32_1_0_deserialize_+0xae>
 80051ce:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 80051d2:	21dd      	movs	r1, #221	; 0xdd
 80051d4:	482a      	ldr	r0, [pc, #168]	; (8005280 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 80051d6:	f009 fc9d 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80051da:	2300      	movs	r3, #0
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e01b      	b.n	8005218 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xca>
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 80051ec:	4a23      	ldr	r2, [pc, #140]	; (800527c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 80051ee:	21e0      	movs	r1, #224	; 0xe0
 80051f0:	4823      	ldr	r0, [pc, #140]	; (8005280 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 80051f2:	f009 fc8f 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 80051f6:	2320      	movs	r3, #32
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	68b8      	ldr	r0, [r7, #8]
 80051fe:	f7fc f955 	bl	80014ac <nunavutGetU32>
 8005202:	4601      	mov	r1, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        offset_bits += 32U;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3320      	adds	r3, #32
 8005210:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	d3dd      	bcc.n	80051e0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3307      	adds	r3, #7
 8005228:	f023 0307 	bic.w	r3, r3, #7
 800522c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x118>
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 800523a:	4a10      	ldr	r2, [pc, #64]	; (800527c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 800523c:	21e5      	movs	r1, #229	; 0xe5
 800523e:	4810      	ldr	r0, [pc, #64]	; (8005280 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 8005240:	f009 fc68 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005244:	6939      	ldr	r1, [r7, #16]
 8005246:	69f8      	ldr	r0, [r7, #28]
 8005248:	f7fb fe5c 	bl	8000f04 <nunavutChooseMin>
 800524c:	4603      	mov	r3, r0
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	429a      	cmp	r2, r3
 800525c:	d205      	bcs.n	800526a <uavcan_primitive_array_Natural32_1_0_deserialize_+0x13e>
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x158>)
 8005260:	4a06      	ldr	r2, [pc, #24]	; (800527c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 8005262:	21e7      	movs	r1, #231	; 0xe7
 8005264:	4806      	ldr	r0, [pc, #24]	; (8005280 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 8005266:	f009 fc55 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08011898 	.word	0x08011898
 8005278:	08011768 	.word	0x08011768
 800527c:	08013e58 	.word	0x08013e58
 8005280:	08012268 	.word	0x08012268
 8005284:	0801189c 	.word	0x0801189c

08005288 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b092      	sub	sp, #72	; 0x48
 800528e:	af04      	add	r7, sp, #16
 8005290:	6278      	str	r0, [r7, #36]	; 0x24
 8005292:	6239      	str	r1, [r7, #32]
 8005294:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x20>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x20>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <uavcan_primitive_array_Natural64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80052a8:	f06f 0301 	mvn.w	r3, #1
 80052ac:	e109      	b.n	80054c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	f640 0207 	movw	r2, #2055	; 0x807
 80052bc:	4293      	cmp	r3, r2
 80052be:	d802      	bhi.n	80052c6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80052c0:	f06f 0302 	mvn.w	r3, #2
 80052c4:	e0fd      	b.n	80054c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x58>
 80052d4:	4b7d      	ldr	r3, [pc, #500]	; (80054cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 80052d6:	4a7e      	ldr	r2, [pc, #504]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80052d8:	2181      	movs	r1, #129	; 0x81
 80052da:	487e      	ldr	r0, [pc, #504]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80052dc:	f009 fc1a 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	2200      	movs	r2, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	617a      	str	r2, [r7, #20]
 80052e8:	f640 0308 	movw	r3, #2056	; 0x808
 80052ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052f0:	4602      	mov	r2, r0
 80052f2:	eb12 0803 	adds.w	r8, r2, r3
 80052f6:	460b      	mov	r3, r1
 80052f8:	f143 0900 	adc.w	r9, r3, #0
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	2200      	movs	r2, #0
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	60fa      	str	r2, [r7, #12]
 8005306:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800530a:	460b      	mov	r3, r1
 800530c:	4543      	cmp	r3, r8
 800530e:	4613      	mov	r3, r2
 8005310:	eb73 0309 	sbcs.w	r3, r3, r9
 8005314:	d205      	bcs.n	8005322 <uavcan_primitive_array_Natural64_1_0_serialize_+0x9a>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x250>)
 8005318:	4a6d      	ldr	r2, [pc, #436]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 800531a:	2182      	movs	r1, #130	; 0x82
 800531c:	486d      	ldr	r0, [pc, #436]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 800531e:	f009 fbf9 	bl	800eb14 <__assert_func>
        if (obj->value.count > 32)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005328:	2b20      	cmp	r3, #32
 800532a:	d902      	bls.n	8005332 <uavcan_primitive_array_Natural64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800532c:	f06f 0309 	mvn.w	r3, #9
 8005330:	e0c7      	b.n	80054c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	4413      	add	r3, r2
 8005340:	b2ca      	uxtb	r2, r1
 8005342:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	3308      	adds	r3, #8
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <uavcan_primitive_array_Natural64_1_0_serialize_+0xd8>
 8005354:	4b5d      	ldr	r3, [pc, #372]	; (80054cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 8005356:	4a5e      	ldr	r2, [pc, #376]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005358:	218a      	movs	r1, #138	; 0x8a
 800535a:	485e      	ldr	r0, [pc, #376]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 800535c:	f009 fbda 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005360:	2300      	movs	r3, #0
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
 8005364:	e043      	b.n	80053ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <uavcan_primitive_array_Natural64_1_0_serialize_+0xf4>
 8005370:	4b56      	ldr	r3, [pc, #344]	; (80054cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 8005372:	4a57      	ldr	r2, [pc, #348]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005374:	218d      	movs	r1, #141	; 0x8d
 8005376:	4857      	ldr	r0, [pc, #348]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005378:	f009 fbcc 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	2200      	movs	r2, #0
 8005380:	469a      	mov	sl, r3
 8005382:	4693      	mov	fp, r2
 8005384:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 8005388:	f14b 0500 	adc.w	r5, fp, #0
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	2200      	movs	r2, #0
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	e9d7 1200 	ldrd	r1, r2, [r7]
 800539a:	460b      	mov	r3, r1
 800539c:	42a3      	cmp	r3, r4
 800539e:	4613      	mov	r3, r2
 80053a0:	41ab      	sbcs	r3, r5
 80053a2:	d205      	bcs.n	80053b0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x128>
 80053a4:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <uavcan_primitive_array_Natural64_1_0_serialize_+0x254>)
 80053a6:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80053a8:	218e      	movs	r1, #142	; 0x8e
 80053aa:	484a      	ldr	r0, [pc, #296]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80053ac:	f009 fbb2 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 64U);
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	2140      	movs	r1, #64	; 0x40
 80053be:	9102      	str	r1, [sp, #8]
 80053c0:	e9cd 2300 	strd	r2, r3, [sp]
 80053c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c8:	6a38      	ldr	r0, [r7, #32]
 80053ca:	f7fb ff4d 	bl	8001268 <nunavutSetUxx>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 80053d4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da02      	bge.n	80053e2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x15a>
            {
                return _err0_;
 80053dc:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80053e0:	e06f      	b.n	80054c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
            }
            offset_bits += 64U;
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	3340      	adds	r3, #64	; 0x40
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	3301      	adds	r3, #1
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d3b5      	bcc.n	8005366 <uavcan_primitive_array_Natural64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	2b00      	cmp	r3, #0
 8005402:	d03a      	beq.n	800547a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f1c3 0308 	rsb	r3, r3, #8
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1a2>
 800541e:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x258>)
 8005420:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005422:	219b      	movs	r1, #155	; 0x9b
 8005424:	482b      	ldr	r0, [pc, #172]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005426:	f009 fb75 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800542a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800542e:	9302      	str	r3, [sp, #8]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9cd 2300 	strd	r2, r3, [sp]
 800543c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005440:	6a38      	ldr	r0, [r7, #32]
 8005442:	f7fb ff11 	bl	8001268 <nunavutSetUxx>
 8005446:	4603      	mov	r3, r0
 8005448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 800544c:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8005450:	2b00      	cmp	r3, #0
 8005452:	da02      	bge.n	800545a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8005454:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8005458:	e033      	b.n	80054c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
        }
        offset_bits += _pad0_;
 800545a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005460:	4413      	add	r3, r2
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1f2>
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005472:	21a2      	movs	r1, #162	; 0xa2
 8005474:	4817      	ldr	r0, [pc, #92]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005476:	f009 fb4d 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	2b07      	cmp	r3, #7
 800547e:	d805      	bhi.n	800548c <uavcan_primitive_array_Natural64_1_0_serialize_+0x204>
 8005480:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x25c>)
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005484:	21a5      	movs	r1, #165	; 0xa5
 8005486:	4813      	ldr	r0, [pc, #76]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005488:	f009 fb44 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	f640 0208 	movw	r2, #2056	; 0x808
 8005492:	4293      	cmp	r3, r2
 8005494:	d905      	bls.n	80054a2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x21a>
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x260>)
 8005498:	4a0d      	ldr	r2, [pc, #52]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 800549a:	21a6      	movs	r1, #166	; 0xa6
 800549c:	480d      	ldr	r0, [pc, #52]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 800549e:	f009 fb39 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x230>
 80054ac:	4b07      	ldr	r3, [pc, #28]	; (80054cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 80054ae:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80054b0:	21a7      	movs	r1, #167	; 0xa7
 80054b2:	4808      	ldr	r0, [pc, #32]	; (80054d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80054b4:	f009 fb2e 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	08da      	lsrs	r2, r3, #3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3738      	adds	r7, #56	; 0x38
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054cc:	08011768 	.word	0x08011768
 80054d0:	08014214 	.word	0x08014214
 80054d4:	080122f0 	.word	0x080122f0
 80054d8:	08011d2c 	.word	0x08011d2c
 80054dc:	08011d60 	.word	0x08011d60
 80054e0:	08011860 	.word	0x08011860
 80054e4:	0801186c 	.word	0x0801186c
 80054e8:	08011d90 	.word	0x08011d90

080054ec <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005512:	f06f 0301 	mvn.w	r3, #1
 8005516:	e08c      	b.n	8005632 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x150>)
 8005520:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x5c>
 800553c:	4b40      	ldr	r3, [pc, #256]	; (8005640 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 800553e:	4a41      	ldr	r2, [pc, #260]	; (8005644 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 8005540:	21ce      	movs	r1, #206	; 0xce
 8005542:	4841      	ldr	r0, [pc, #260]	; (8005648 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005544:	f009 fae6 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3308      	adds	r3, #8
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d309      	bcc.n	8005566 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4413      	add	r3, r2
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005564:	e003      	b.n	800556e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3308      	adds	r3, #8
 8005572:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800557a:	2b20      	cmp	r3, #32
 800557c:	d902      	bls.n	8005584 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800557e:	f06f 0309 	mvn.w	r3, #9
 8005582:	e056      	b.n	8005632 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <uavcan_primitive_array_Natural64_1_0_deserialize_+0xae>
 800558e:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 8005590:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 8005592:	21dd      	movs	r1, #221	; 0xdd
 8005594:	482c      	ldr	r0, [pc, #176]	; (8005648 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005596:	f009 fabd 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e01e      	b.n	80055de <uavcan_primitive_array_Natural64_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xca>
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 80055ae:	21e0      	movs	r1, #224	; 0xe0
 80055b0:	4825      	ldr	r0, [pc, #148]	; (8005648 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 80055b2:	f009 faaf 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU64(&buffer[0], capacity_bytes, offset_bits, 64);
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f7fb ffbf 	bl	8001540 <nunavutGetU64>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	00c9      	lsls	r1, r1, #3
 80055cc:	4401      	add	r1, r0
 80055ce:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3340      	adds	r3, #64	; 0x40
 80055d6:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	3301      	adds	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3da      	bcc.n	80055a0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3307      	adds	r3, #7
 80055ee:	f023 0307 	bic.w	r3, r3, #7
 80055f2:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x11e>
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 8005600:	4a10      	ldr	r2, [pc, #64]	; (8005644 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 8005602:	21e5      	movs	r1, #229	; 0xe5
 8005604:	4810      	ldr	r0, [pc, #64]	; (8005648 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005606:	f009 fa85 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	69f8      	ldr	r0, [r7, #28]
 800560e:	f7fb fc79 	bl	8000f04 <nunavutChooseMin>
 8005612:	4603      	mov	r3, r0
 8005614:	08da      	lsrs	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	d205      	bcs.n	8005630 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x144>
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x160>)
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 8005628:	21e7      	movs	r1, #231	; 0xe7
 800562a:	4807      	ldr	r0, [pc, #28]	; (8005648 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 800562c:	f009 fa72 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	08011898 	.word	0x08011898
 8005640:	08011768 	.word	0x08011768
 8005644:	08013e24 	.word	0x08013e24
 8005648:	080122f0 	.word	0x080122f0
 800564c:	0801189c 	.word	0x0801189c

08005650 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b094      	sub	sp, #80	; 0x50
 8005656:	af04      	add	r7, sp, #16
 8005658:	62f8      	str	r0, [r7, #44]	; 0x2c
 800565a:	62b9      	str	r1, [r7, #40]	; 0x28
 800565c:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <uavcan_primitive_array_Natural8_1_0_serialize_+0x20>
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <uavcan_primitive_array_Natural8_1_0_serialize_+0x20>
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <uavcan_primitive_array_Natural8_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005670:	f06f 0301 	mvn.w	r3, #1
 8005674:	e108      	b.n	8005888 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8005684:	d202      	bcs.n	800568c <uavcan_primitive_array_Natural8_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005686:	f06f 0302 	mvn.w	r3, #2
 800568a:	e0fd      	b.n	8005888 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <uavcan_primitive_array_Natural8_1_0_serialize_+0x56>
 800569a:	4b7e      	ldr	r3, [pc, #504]	; (8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 800569c:	4a7e      	ldr	r2, [pc, #504]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 800569e:	2181      	movs	r1, #129	; 0x81
 80056a0:	487e      	ldr	r0, [pc, #504]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80056a2:	f009 fa37 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	2200      	movs	r2, #0
 80056aa:	469a      	mov	sl, r3
 80056ac:	4693      	mov	fp, r2
 80056ae:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 80056b2:	f14b 0900 	adc.w	r9, fp, #0
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	2200      	movs	r2, #0
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	61fa      	str	r2, [r7, #28]
 80056c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80056c4:	460b      	mov	r3, r1
 80056c6:	4543      	cmp	r3, r8
 80056c8:	4613      	mov	r3, r2
 80056ca:	eb73 0309 	sbcs.w	r3, r3, r9
 80056ce:	d205      	bcs.n	80056dc <uavcan_primitive_array_Natural8_1_0_serialize_+0x8c>
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x250>)
 80056d2:	4a71      	ldr	r2, [pc, #452]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 80056d4:	2182      	movs	r1, #130	; 0x82
 80056d6:	4871      	ldr	r0, [pc, #452]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80056d8:	f009 fa1c 	bl	800eb14 <__assert_func>
        if (obj->value.count > 256)
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e6:	d902      	bls.n	80056ee <uavcan_primitive_array_Natural8_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80056e8:	f06f 0309 	mvn.w	r3, #9
 80056ec:	e0cc      	b.n	8005888 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80056f4:	2200      	movs	r2, #0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	617a      	str	r2, [r7, #20]
 80056fa:	2310      	movs	r3, #16
 80056fc:	9302      	str	r3, [sp, #8]
 80056fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005702:	e9cd 2300 	strd	r2, r3, [sp]
 8005706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005708:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800570a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570c:	f7fb fdac 	bl	8001268 <nunavutSetUxx>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 8005716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800571a:	2b00      	cmp	r3, #0
 800571c:	da02      	bge.n	8005724 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 800571e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005722:	e0b1      	b.n	8005888 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8005724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005726:	3310      	adds	r3, #16
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <uavcan_primitive_array_Natural8_1_0_serialize_+0xf0>
 8005734:	4b57      	ldr	r3, [pc, #348]	; (8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005736:	4a58      	ldr	r2, [pc, #352]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005738:	218e      	movs	r1, #142	; 0x8e
 800573a:	4858      	ldr	r0, [pc, #352]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800573c:	f009 f9ea 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005740:	2300      	movs	r3, #0
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
 8005744:	e037      	b.n	80057b6 <uavcan_primitive_array_Natural8_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <uavcan_primitive_array_Natural8_1_0_serialize_+0x10c>
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005752:	4a51      	ldr	r2, [pc, #324]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005754:	2191      	movs	r1, #145	; 0x91
 8005756:	4851      	ldr	r0, [pc, #324]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005758:	f009 f9dc 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	2200      	movs	r2, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005768:	460b      	mov	r3, r1
 800576a:	f113 0408 	adds.w	r4, r3, #8
 800576e:	4613      	mov	r3, r2
 8005770:	f143 0500 	adc.w	r5, r3, #0
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	2200      	movs	r2, #0
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005782:	460b      	mov	r3, r1
 8005784:	42a3      	cmp	r3, r4
 8005786:	4613      	mov	r3, r2
 8005788:	41ab      	sbcs	r3, r5
 800578a:	d205      	bcs.n	8005798 <uavcan_primitive_array_Natural8_1_0_serialize_+0x148>
 800578c:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x254>)
 800578e:	4a42      	ldr	r2, [pc, #264]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005790:	2192      	movs	r1, #146	; 0x92
 8005792:	4842      	ldr	r0, [pc, #264]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005794:	f009 f9be 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	08db      	lsrs	r3, r3, #3
 800579c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579e:	4413      	add	r3, r2
 80057a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a4:	440a      	add	r2, r1
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	3308      	adds	r3, #8
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	3301      	adds	r3, #1
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80057bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3c1      	bcc.n	8005746 <uavcan_primitive_array_Natural8_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d03a      	beq.n	8005842 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f1c3 0308 	rsb	r3, r3, #8
 80057da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80057de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1a2>
 80057e6:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x258>)
 80057e8:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 80057ea:	219b      	movs	r1, #155	; 0x9b
 80057ec:	482b      	ldr	r0, [pc, #172]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80057ee:	f009 f991 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80057f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9cd 2300 	strd	r2, r3, [sp]
 8005804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005806:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f7fb fd2d 	bl	8001268 <nunavutSetUxx>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 8005814:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8005818:	2b00      	cmp	r3, #0
 800581a:	da02      	bge.n	8005822 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1d2>
        {
            return _err1_;
 800581c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8005820:	e032      	b.n	8005888 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 8005822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005828:	4413      	add	r3, r2
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1f2>
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 800583a:	21a2      	movs	r1, #162	; 0xa2
 800583c:	4817      	ldr	r0, [pc, #92]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800583e:	f009 f969 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 8005842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005844:	2b0f      	cmp	r3, #15
 8005846:	d805      	bhi.n	8005854 <uavcan_primitive_array_Natural8_1_0_serialize_+0x204>
 8005848:	4b18      	ldr	r3, [pc, #96]	; (80058ac <uavcan_primitive_array_Natural8_1_0_serialize_+0x25c>)
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 800584c:	21a5      	movs	r1, #165	; 0xa5
 800584e:	4813      	ldr	r0, [pc, #76]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005850:	f009 f960 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800585a:	d905      	bls.n	8005868 <uavcan_primitive_array_Natural8_1_0_serialize_+0x218>
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x260>)
 800585e:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005860:	21a6      	movs	r1, #166	; 0xa6
 8005862:	480e      	ldr	r0, [pc, #56]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005864:	f009 f956 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <uavcan_primitive_array_Natural8_1_0_serialize_+0x22e>
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005876:	21a7      	movs	r1, #167	; 0xa7
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800587a:	f009 f94b 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	08da      	lsrs	r2, r3, #3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3740      	adds	r7, #64	; 0x40
 800588c:	46bd      	mov	sp, r7
 800588e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005892:	bf00      	nop
 8005894:	08011768 	.word	0x08011768
 8005898:	080142a4 	.word	0x080142a4
 800589c:	08012378 	.word	0x08012378
 80058a0:	08011e28 	.word	0x08011e28
 80058a4:	08011830 	.word	0x08011830
 80058a8:	08011860 	.word	0x08011860
 80058ac:	08011e5c 	.word	0x08011e5c
 80058b0:	08011e74 	.word	0x08011e74

080058b4 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80058da:	f06f 0301 	mvn.w	r3, #1
 80058de:	e08c      	b.n	80059fa <uavcan_primitive_array_Natural8_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x150>)
 80058e8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x5c>
 8005904:	4b40      	ldr	r3, [pc, #256]	; (8005a08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 8005906:	4a41      	ldr	r2, [pc, #260]	; (8005a0c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005908:	21ce      	movs	r1, #206	; 0xce
 800590a:	4841      	ldr	r0, [pc, #260]	; (8005a10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 800590c:	f009 f902 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8005910:	2310      	movs	r3, #16
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	68b8      	ldr	r0, [r7, #8]
 8005918:	f7fb fd82 	bl	8001420 <nunavutGetU16>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3310      	adds	r3, #16
 800592a:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005936:	d902      	bls.n	800593e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005938:	f06f 0309 	mvn.w	r3, #9
 800593c:	e05d      	b.n	80059fa <uavcan_primitive_array_Natural8_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xa0>
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 800594a:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 800594c:	21d6      	movs	r1, #214	; 0xd6
 800594e:	4830      	ldr	r0, [pc, #192]	; (8005a10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 8005950:	f009 f8e0 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e025      	b.n	80059a6 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>
 8005964:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 8005966:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005968:	21d9      	movs	r1, #217	; 0xd9
 800596a:	4829      	ldr	r0, [pc, #164]	; (8005a10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 800596c:	f009 f8d2 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3308      	adds	r3, #8
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d30a      	bcc.n	8005990 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	7819      	ldrb	r1, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	4413      	add	r3, r2
 800598a:	460a      	mov	r2, r1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e004      	b.n	800599a <uavcan_primitive_array_Natural8_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	4413      	add	r3, r2
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3308      	adds	r3, #8
 800599e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d3d3      	bcc.n	800595a <uavcan_primitive_array_Natural8_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3307      	adds	r3, #7
 80059b6:	f023 0307 	bic.w	r3, r3, #7
 80059ba:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x11e>
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 80059c8:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 80059ca:	21e5      	movs	r1, #229	; 0xe5
 80059cc:	4810      	ldr	r0, [pc, #64]	; (8005a10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 80059ce:	f009 f8a1 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80059d2:	6939      	ldr	r1, [r7, #16]
 80059d4:	69f8      	ldr	r0, [r7, #28]
 80059d6:	f7fb fa95 	bl	8000f04 <nunavutChooseMin>
 80059da:	4603      	mov	r3, r0
 80059dc:	08da      	lsrs	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d205      	bcs.n	80059f8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x144>
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x160>)
 80059ee:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 80059f0:	21e7      	movs	r1, #231	; 0xe7
 80059f2:	4807      	ldr	r0, [pc, #28]	; (8005a10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 80059f4:	f009 f88e 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	08011898 	.word	0x08011898
 8005a08:	08011768 	.word	0x08011768
 8005a0c:	08013ec0 	.word	0x08013ec0
 8005a10:	08012378 	.word	0x08012378
 8005a14:	0801189c 	.word	0x0801189c

08005a18 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b094      	sub	sp, #80	; 0x50
 8005a1e:	af04      	add	r7, sp, #16
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24
 8005a22:	6239      	str	r1, [r7, #32]
 8005a24:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <uavcan_primitive_array_Real16_1_0_serialize_+0x20>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <uavcan_primitive_array_Real16_1_0_serialize_+0x20>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <uavcan_primitive_array_Real16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005a38:	f06f 0301 	mvn.w	r3, #1
 8005a3c:	e130      	b.n	8005ca0 <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	f640 0207 	movw	r2, #2055	; 0x807
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d802      	bhi.n	8005a56 <uavcan_primitive_array_Real16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005a50:	f06f 0302 	mvn.w	r3, #2
 8005a54:	e124      	b.n	8005ca0 <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <uavcan_primitive_array_Real16_1_0_serialize_+0x58>
 8005a64:	4b91      	ldr	r3, [pc, #580]	; (8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005a66:	4a92      	ldr	r2, [pc, #584]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	4892      	ldr	r0, [pc, #584]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005a6c:	f009 f852 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	2200      	movs	r2, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	617a      	str	r2, [r7, #20]
 8005a78:	f640 0308 	movw	r3, #2056	; 0x808
 8005a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a80:	4602      	mov	r2, r0
 8005a82:	eb12 0803 	adds.w	r8, r2, r3
 8005a86:	460b      	mov	r3, r1
 8005a88:	f143 0900 	adc.w	r9, r3, #0
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	2200      	movs	r2, #0
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	60fa      	str	r2, [r7, #12]
 8005a96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4543      	cmp	r3, r8
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	eb73 0309 	sbcs.w	r3, r3, r9
 8005aa4:	d205      	bcs.n	8005ab2 <uavcan_primitive_array_Real16_1_0_serialize_+0x9a>
 8005aa6:	4b84      	ldr	r3, [pc, #528]	; (8005cb8 <uavcan_primitive_array_Real16_1_0_serialize_+0x2a0>)
 8005aa8:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005aaa:	2181      	movs	r1, #129	; 0x81
 8005aac:	4881      	ldr	r0, [pc, #516]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005aae:	f009 f831 	bl	800eb14 <__assert_func>
        if (obj->value.count > 128)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d902      	bls.n	8005ac2 <uavcan_primitive_array_Real16_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005abc:	f06f 0309 	mvn.w	r3, #9
 8005ac0:	e0ee      	b.n	8005ca0 <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	08db      	lsrs	r3, r3, #3
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	4413      	add	r3, r2
 8005ad0:	b2ca      	uxtb	r2, r1
 8005ad2:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
 8005ae4:	4b71      	ldr	r3, [pc, #452]	; (8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005ae6:	4a72      	ldr	r2, [pc, #456]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005ae8:	2189      	movs	r1, #137	; 0x89
 8005aea:	4872      	ldr	r0, [pc, #456]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005aec:	f009 f812 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005af0:	2300      	movs	r3, #0
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af4:	e06a      	b.n	8005bcc <uavcan_primitive_array_Real16_1_0_serialize_+0x1b4>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <uavcan_primitive_array_Real16_1_0_serialize_+0xf4>
 8005b00:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005b02:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005b04:	218c      	movs	r1, #140	; 0x8c
 8005b06:	486b      	ldr	r0, [pc, #428]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005b08:	f009 f804 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	469a      	mov	sl, r3
 8005b12:	4693      	mov	fp, r2
 8005b14:	f11a 0410 	adds.w	r4, sl, #16
 8005b18:	f14b 0500 	adc.w	r5, fp, #0
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	2200      	movs	r2, #0
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	4613      	mov	r3, r2
 8005b30:	41ab      	sbcs	r3, r5
 8005b32:	d205      	bcs.n	8005b40 <uavcan_primitive_array_Real16_1_0_serialize_+0x128>
 8005b34:	4b61      	ldr	r3, [pc, #388]	; (8005cbc <uavcan_primitive_array_Real16_1_0_serialize_+0x2a4>)
 8005b36:	4a5e      	ldr	r2, [pc, #376]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005b38:	218d      	movs	r1, #141	; 0x8d
 8005b3a:	485e      	ldr	r0, [pc, #376]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005b3c:	f008 ffea 	bl	800eb14 <__assert_func>
            float _sat0_ = obj->value.elements[_index0_];
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
            if (isfinite(_sat0_))
 8005b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b50:	eef0 7ae7 	vabs.f32	s15, s15
 8005b54:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005cc0 <uavcan_primitive_array_Real16_1_0_serialize_+0x2a8>
 8005b58:	eef4 7a47 	vcmp.f32	s15, s14
 8005b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b60:	bf8c      	ite	hi
 8005b62:	2301      	movhi	r3, #1
 8005b64:	2300      	movls	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d015      	beq.n	8005b9e <uavcan_primitive_array_Real16_1_0_serialize_+0x186>
            {
                if (_sat0_ < ((float) -65504.0))
 8005b72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b76:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005cc4 <uavcan_primitive_array_Real16_1_0_serialize_+0x2ac>
 8005b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	d501      	bpl.n	8005b88 <uavcan_primitive_array_Real16_1_0_serialize_+0x170>
                {
                    _sat0_ = ((float) -65504.0);
 8005b84:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <uavcan_primitive_array_Real16_1_0_serialize_+0x2b0>)
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (_sat0_ > ((float) 65504.0))
 8005b88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b8c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x2b4>
 8005b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	dd01      	ble.n	8005b9e <uavcan_primitive_array_Real16_1_0_serialize_+0x186>
                {
                    _sat0_ = ((float) 65504.0);
 8005b9a:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <uavcan_primitive_array_Real16_1_0_serialize_+0x2b8>)
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }
            const int8_t _err0_ = nunavutSetF16(&buffer[0], capacity_bytes, offset_bits, _sat0_);
 8005b9e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8005ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ba6:	6a38      	ldr	r0, [r7, #32]
 8005ba8:	f7fb ffcc 	bl	8001b44 <nunavutSetF16>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if (_err0_ < 0)
 8005bb2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	da02      	bge.n	8005bc0 <uavcan_primitive_array_Real16_1_0_serialize_+0x1a8>
            {
                return _err0_;
 8005bba:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005bbe:	e06f      	b.n	8005ca0 <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
            }
            offset_bits += 16U;
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc2:	3310      	adds	r3, #16
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	3301      	adds	r3, #1
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d38e      	bcc.n	8005af6 <uavcan_primitive_array_Real16_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d03a      	beq.n	8005c58 <uavcan_primitive_array_Real16_1_0_serialize_+0x240>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f1c3 0308 	rsb	r3, r3, #8
 8005bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <uavcan_primitive_array_Real16_1_0_serialize_+0x1f0>
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <uavcan_primitive_array_Real16_1_0_serialize_+0x2bc>)
 8005bfe:	4a2c      	ldr	r2, [pc, #176]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c00:	21a5      	movs	r1, #165	; 0xa5
 8005c02:	482c      	ldr	r0, [pc, #176]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c04:	f008 ff86 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9cd 2300 	strd	r2, r3, [sp]
 8005c1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1e:	6a38      	ldr	r0, [r7, #32]
 8005c20:	f7fb fb22 	bl	8001268 <nunavutSetUxx>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (_err1_ < 0)
 8005c2a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da02      	bge.n	8005c38 <uavcan_primitive_array_Real16_1_0_serialize_+0x220>
        {
            return _err1_;
 8005c32:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005c36:	e033      	b.n	8005ca0 <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
        }
        offset_bits += _pad0_;
 8005c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c3e:	4413      	add	r3, r2
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <uavcan_primitive_array_Real16_1_0_serialize_+0x240>
 8005c4c:	4b17      	ldr	r3, [pc, #92]	; (8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c50:	21ac      	movs	r1, #172	; 0xac
 8005c52:	4818      	ldr	r0, [pc, #96]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c54:	f008 ff5e 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2b07      	cmp	r3, #7
 8005c5c:	d805      	bhi.n	8005c6a <uavcan_primitive_array_Real16_1_0_serialize_+0x252>
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x2c0>)
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c62:	21af      	movs	r1, #175	; 0xaf
 8005c64:	4813      	ldr	r0, [pc, #76]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c66:	f008 ff55 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6c:	f640 0208 	movw	r2, #2056	; 0x808
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d905      	bls.n	8005c80 <uavcan_primitive_array_Real16_1_0_serialize_+0x268>
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x2c4>)
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c78:	21b0      	movs	r1, #176	; 0xb0
 8005c7a:	480e      	ldr	r0, [pc, #56]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c7c:	f008 ff4a 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <uavcan_primitive_array_Real16_1_0_serialize_+0x27e>
 8005c8a:	4b08      	ldr	r3, [pc, #32]	; (8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005c8c:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c8e:	21b1      	movs	r1, #177	; 0xb1
 8005c90:	4808      	ldr	r0, [pc, #32]	; (8005cb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c92:	f008 ff3f 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3740      	adds	r7, #64	; 0x40
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	08011768 	.word	0x08011768
 8005cb0:	08014334 	.word	0x08014334
 8005cb4:	08012400 	.word	0x08012400
 8005cb8:	08011d2c 	.word	0x08011d2c
 8005cbc:	08012018 	.word	0x08012018
 8005cc0:	7f7fffff 	.word	0x7f7fffff
 8005cc4:	c77fe000 	.word	0xc77fe000
 8005cc8:	c77fe000 	.word	0xc77fe000
 8005ccc:	477fe000 	.word	0x477fe000
 8005cd0:	477fe000 	.word	0x477fe000
 8005cd4:	08011860 	.word	0x08011860
 8005cd8:	0801186c 	.word	0x0801186c
 8005cdc:	08011d90 	.word	0x08011d90

08005ce0 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d006      	beq.n	8005d06 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005d06:	f06f 0301 	mvn.w	r3, #1
 8005d0a:	e08b      	b.n	8005e24 <uavcan_primitive_array_Real16_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005d12:	4b46      	ldr	r3, [pc, #280]	; (8005e2c <uavcan_primitive_array_Real16_1_0_deserialize_+0x14c>)
 8005d14:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <uavcan_primitive_array_Real16_1_0_deserialize_+0x5c>
 8005d30:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005d34:	21d8      	movs	r1, #216	; 0xd8
 8005d36:	4840      	ldr	r0, [pc, #256]	; (8005e38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005d38:	f008 feec 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d309      	bcc.n	8005d5a <uavcan_primitive_array_Real16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08db      	lsrs	r3, r3, #3
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005d58:	e003      	b.n	8005d62 <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3308      	adds	r3, #8
 8005d66:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d902      	bls.n	8005d78 <uavcan_primitive_array_Real16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005d72:	f06f 0309 	mvn.w	r3, #9
 8005d76:	e055      	b.n	8005e24 <uavcan_primitive_array_Real16_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005d84:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005d86:	21e7      	movs	r1, #231	; 0xe7
 8005d88:	482b      	ldr	r0, [pc, #172]	; (8005e38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005d8a:	f008 fec3 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e01d      	b.n	8005dd0 <uavcan_primitive_array_Real16_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <uavcan_primitive_array_Real16_1_0_deserialize_+0xca>
 8005d9e:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005da0:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005da2:	21ea      	movs	r1, #234	; 0xea
 8005da4:	4824      	ldr	r0, [pc, #144]	; (8005e38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005da6:	f008 feb5 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	68b8      	ldr	r0, [r7, #8]
 8005db0:	f7fb fee7 	bl	8001b82 <nunavutGetF16>
 8005db4:	eef0 7a40 	vmov.f32	s15, s0
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d3db      	bcc.n	8005d94 <uavcan_primitive_array_Real16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3307      	adds	r3, #7
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <uavcan_primitive_array_Real16_1_0_deserialize_+0x11c>
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005df4:	21ef      	movs	r1, #239	; 0xef
 8005df6:	4810      	ldr	r0, [pc, #64]	; (8005e38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005df8:	f008 fe8c 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005dfc:	6939      	ldr	r1, [r7, #16]
 8005dfe:	69f8      	ldr	r0, [r7, #28]
 8005e00:	f7fb f880 	bl	8000f04 <nunavutChooseMin>
 8005e04:	4603      	mov	r3, r0
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d205      	bcs.n	8005e22 <uavcan_primitive_array_Real16_1_0_deserialize_+0x142>
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <uavcan_primitive_array_Real16_1_0_deserialize_+0x15c>)
 8005e18:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005e1a:	21f1      	movs	r1, #241	; 0xf1
 8005e1c:	4806      	ldr	r0, [pc, #24]	; (8005e38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005e1e:	f008 fe79 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	08011898 	.word	0x08011898
 8005e30:	08011768 	.word	0x08011768
 8005e34:	08013f54 	.word	0x08013f54
 8005e38:	08012400 	.word	0x08012400
 8005e3c:	0801189c 	.word	0x0801189c

08005e40 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b092      	sub	sp, #72	; 0x48
 8005e46:	af04      	add	r7, sp, #16
 8005e48:	6278      	str	r0, [r7, #36]	; 0x24
 8005e4a:	6239      	str	r1, [r7, #32]
 8005e4c:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <uavcan_primitive_array_Real32_1_0_serialize_+0x20>
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <uavcan_primitive_array_Real32_1_0_serialize_+0x20>
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <uavcan_primitive_array_Real32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005e60:	f06f 0301 	mvn.w	r3, #1
 8005e64:	e107      	b.n	8006076 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	f640 0207 	movw	r2, #2055	; 0x807
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d802      	bhi.n	8005e7e <uavcan_primitive_array_Real32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005e78:	f06f 0302 	mvn.w	r3, #2
 8005e7c:	e0fb      	b.n	8006076 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <uavcan_primitive_array_Real32_1_0_serialize_+0x58>
 8005e8c:	4b7c      	ldr	r3, [pc, #496]	; (8006080 <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005e8e:	4a7d      	ldr	r2, [pc, #500]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	487d      	ldr	r0, [pc, #500]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005e94:	f008 fe3e 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	617a      	str	r2, [r7, #20]
 8005ea0:	f640 0308 	movw	r3, #2056	; 0x808
 8005ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	eb12 0803 	adds.w	r8, r2, r3
 8005eae:	460b      	mov	r3, r1
 8005eb0:	f143 0900 	adc.w	r9, r3, #0
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	2200      	movs	r2, #0
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	60fa      	str	r2, [r7, #12]
 8005ebe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4543      	cmp	r3, r8
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb73 0309 	sbcs.w	r3, r3, r9
 8005ecc:	d205      	bcs.n	8005eda <uavcan_primitive_array_Real32_1_0_serialize_+0x9a>
 8005ece:	4b6f      	ldr	r3, [pc, #444]	; (800608c <uavcan_primitive_array_Real32_1_0_serialize_+0x24c>)
 8005ed0:	4a6c      	ldr	r2, [pc, #432]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005ed2:	2181      	movs	r1, #129	; 0x81
 8005ed4:	486c      	ldr	r0, [pc, #432]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005ed6:	f008 fe1d 	bl	800eb14 <__assert_func>
        if (obj->value.count > 64)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d902      	bls.n	8005eea <uavcan_primitive_array_Real32_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005ee4:	f06f 0309 	mvn.w	r3, #9
 8005ee8:	e0c5      	b.n	8006076 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	08db      	lsrs	r3, r3, #3
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	b2ca      	uxtb	r2, r1
 8005efa:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	3308      	adds	r3, #8
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <uavcan_primitive_array_Real32_1_0_serialize_+0xd8>
 8005f0c:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005f0e:	4a5d      	ldr	r2, [pc, #372]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f10:	2189      	movs	r1, #137	; 0x89
 8005f12:	485d      	ldr	r0, [pc, #372]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f14:	f008 fdfe 	bl	800eb14 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1c:	e041      	b.n	8005fa2 <uavcan_primitive_array_Real32_1_0_serialize_+0x162>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <uavcan_primitive_array_Real32_1_0_serialize_+0xf4>
 8005f28:	4b55      	ldr	r3, [pc, #340]	; (8006080 <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005f2a:	4a56      	ldr	r2, [pc, #344]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f2c:	218c      	movs	r1, #140	; 0x8c
 8005f2e:	4856      	ldr	r0, [pc, #344]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f30:	f008 fdf0 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	2200      	movs	r2, #0
 8005f38:	469a      	mov	sl, r3
 8005f3a:	4693      	mov	fp, r2
 8005f3c:	f11a 0420 	adds.w	r4, sl, #32
 8005f40:	f14b 0500 	adc.w	r5, fp, #0
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	2200      	movs	r2, #0
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f52:	460b      	mov	r3, r1
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	4613      	mov	r3, r2
 8005f58:	41ab      	sbcs	r3, r5
 8005f5a:	d205      	bcs.n	8005f68 <uavcan_primitive_array_Real32_1_0_serialize_+0x128>
 8005f5c:	4b4c      	ldr	r3, [pc, #304]	; (8006090 <uavcan_primitive_array_Real32_1_0_serialize_+0x250>)
 8005f5e:	4a49      	ldr	r2, [pc, #292]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f60:	218d      	movs	r1, #141	; 0x8d
 8005f62:	4849      	ldr	r0, [pc, #292]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f64:	f008 fdd6 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- assume the native representation of float32 is conformant.
            static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
            const int8_t _err0_ = nunavutSetF32(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_]);
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	edd3 7a00 	vldr	s15, [r3]
 8005f74:	eeb0 0a67 	vmov.f32	s0, s15
 8005f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f7c:	6a38      	ldr	r0, [r7, #32]
 8005f7e:	f7fb fe17 	bl	8001bb0 <nunavutSetF32>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 8005f88:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da02      	bge.n	8005f96 <uavcan_primitive_array_Real32_1_0_serialize_+0x156>
            {
                return _err0_;
 8005f90:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8005f94:	e06f      	b.n	8006076 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
            }
            offset_bits += 32U;
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	3320      	adds	r3, #32
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d3b7      	bcc.n	8005f1e <uavcan_primitive_array_Real32_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d03a      	beq.n	800602e <uavcan_primitive_array_Real32_1_0_serialize_+0x1ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f1c3 0308 	rsb	r3, r3, #8
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <uavcan_primitive_array_Real32_1_0_serialize_+0x19e>
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <uavcan_primitive_array_Real32_1_0_serialize_+0x254>)
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005fd6:	219b      	movs	r1, #155	; 0x9b
 8005fd8:	482b      	ldr	r0, [pc, #172]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005fda:	f008 fd9b 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9cd 2300 	strd	r2, r3, [sp]
 8005ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff4:	6a38      	ldr	r0, [r7, #32]
 8005ff6:	f7fb f937 	bl	8001268 <nunavutSetUxx>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8006000:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8006004:	2b00      	cmp	r3, #0
 8006006:	da02      	bge.n	800600e <uavcan_primitive_array_Real32_1_0_serialize_+0x1ce>
        {
            return _err1_;
 8006008:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800600c:	e033      	b.n	8006076 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
        }
        offset_bits += _pad0_;
 800600e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006014:	4413      	add	r3, r2
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <uavcan_primitive_array_Real32_1_0_serialize_+0x1ee>
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006026:	21a2      	movs	r1, #162	; 0xa2
 8006028:	4817      	ldr	r0, [pc, #92]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 800602a:	f008 fd73 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	2b07      	cmp	r3, #7
 8006032:	d805      	bhi.n	8006040 <uavcan_primitive_array_Real32_1_0_serialize_+0x200>
 8006034:	4b18      	ldr	r3, [pc, #96]	; (8006098 <uavcan_primitive_array_Real32_1_0_serialize_+0x258>)
 8006036:	4a13      	ldr	r2, [pc, #76]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006038:	21a5      	movs	r1, #165	; 0xa5
 800603a:	4813      	ldr	r0, [pc, #76]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 800603c:	f008 fd6a 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	f640 0208 	movw	r2, #2056	; 0x808
 8006046:	4293      	cmp	r3, r2
 8006048:	d905      	bls.n	8006056 <uavcan_primitive_array_Real32_1_0_serialize_+0x216>
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <uavcan_primitive_array_Real32_1_0_serialize_+0x25c>)
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 800604e:	21a6      	movs	r1, #166	; 0xa6
 8006050:	480d      	ldr	r0, [pc, #52]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006052:	f008 fd5f 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <uavcan_primitive_array_Real32_1_0_serialize_+0x22c>
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006064:	21a7      	movs	r1, #167	; 0xa7
 8006066:	4808      	ldr	r0, [pc, #32]	; (8006088 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006068:	f008 fd54 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	08da      	lsrs	r2, r3, #3
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3738      	adds	r7, #56	; 0x38
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006080:	08011768 	.word	0x08011768
 8006084:	08014304 	.word	0x08014304
 8006088:	08012484 	.word	0x08012484
 800608c:	08011d2c 	.word	0x08011d2c
 8006090:	08011bdc 	.word	0x08011bdc
 8006094:	08011860 	.word	0x08011860
 8006098:	0801186c 	.word	0x0801186c
 800609c:	08011d90 	.word	0x08011d90

080060a0 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d006      	beq.n	80060c6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80060c6:	f06f 0301 	mvn.w	r3, #1
 80060ca:	e08b      	b.n	80061e4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80060d2:	4b46      	ldr	r3, [pc, #280]	; (80061ec <uavcan_primitive_array_Real32_1_0_deserialize_+0x14c>)
 80060d4:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <uavcan_primitive_array_Real32_1_0_deserialize_+0x5c>
 80060f0:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 80060f2:	4a40      	ldr	r2, [pc, #256]	; (80061f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 80060f4:	21ce      	movs	r1, #206	; 0xce
 80060f6:	4840      	ldr	r0, [pc, #256]	; (80061f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 80060f8:	f008 fd0c 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	3308      	adds	r3, #8
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	429a      	cmp	r2, r3
 8006104:	d309      	bcc.n	800611a <uavcan_primitive_array_Real32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4413      	add	r3, r2
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006118:	e003      	b.n	8006122 <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3308      	adds	r3, #8
 8006126:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d902      	bls.n	8006138 <uavcan_primitive_array_Real32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8006132:	f06f 0309 	mvn.w	r3, #9
 8006136:	e055      	b.n	80061e4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <uavcan_primitive_array_Real32_1_0_deserialize_+0xae>
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 8006144:	4a2b      	ldr	r2, [pc, #172]	; (80061f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 8006146:	21dd      	movs	r1, #221	; 0xdd
 8006148:	482b      	ldr	r0, [pc, #172]	; (80061f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 800614a:	f008 fce3 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e01d      	b.n	8006190 <uavcan_primitive_array_Real32_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <uavcan_primitive_array_Real32_1_0_deserialize_+0xca>
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 8006162:	21e0      	movs	r1, #224	; 0xe0
 8006164:	4824      	ldr	r0, [pc, #144]	; (80061f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 8006166:	f008 fcd5 	bl	800eb14 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	68b8      	ldr	r0, [r7, #8]
 8006170:	f7fb fd3a 	bl	8001be8 <nunavutGetF32>
 8006174:	eef0 7a40 	vmov.f32	s15, s0
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 32U;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	3320      	adds	r3, #32
 8006188:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	3301      	adds	r3, #1
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d3db      	bcc.n	8006154 <uavcan_primitive_array_Real32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	3307      	adds	r3, #7
 80061a0:	f023 0307 	bic.w	r3, r3, #7
 80061a4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <uavcan_primitive_array_Real32_1_0_deserialize_+0x11c>
 80061b0:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 80061b2:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 80061b4:	21e5      	movs	r1, #229	; 0xe5
 80061b6:	4810      	ldr	r0, [pc, #64]	; (80061f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 80061b8:	f008 fcac 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80061bc:	6939      	ldr	r1, [r7, #16]
 80061be:	69f8      	ldr	r0, [r7, #28]
 80061c0:	f7fa fea0 	bl	8000f04 <nunavutChooseMin>
 80061c4:	4603      	mov	r3, r0
 80061c6:	08da      	lsrs	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d205      	bcs.n	80061e2 <uavcan_primitive_array_Real32_1_0_deserialize_+0x142>
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <uavcan_primitive_array_Real32_1_0_deserialize_+0x15c>)
 80061d8:	4a06      	ldr	r2, [pc, #24]	; (80061f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 80061da:	21e7      	movs	r1, #231	; 0xe7
 80061dc:	4806      	ldr	r0, [pc, #24]	; (80061f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 80061de:	f008 fc99 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	08011898 	.word	0x08011898
 80061f0:	08011768 	.word	0x08011768
 80061f4:	08013f24 	.word	0x08013f24
 80061f8:	08012484 	.word	0x08012484
 80061fc:	0801189c 	.word	0x0801189c

08006200 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b0ec      	sub	sp, #432	; 0x1b0
 8006206:	af04      	add	r7, sp, #16
 8006208:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
 800620c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8006210:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8006214:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <uavcan_register_Value_1_0_serialize_+0x2c>
 800621c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <uavcan_register_Value_1_0_serialize_+0x2c>
 8006224:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <uavcan_register_Value_1_0_serialize_+0x34>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800622c:	f06f 0301 	mvn.w	r3, #1
 8006230:	f001 bb89 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8006234:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 800623e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006242:	00da      	lsls	r2, r3, #3
 8006244:	f640 0317 	movw	r3, #2071	; 0x817
 8006248:	429a      	cmp	r2, r3
 800624a:	d803      	bhi.n	8006254 <uavcan_register_Value_1_0_serialize_+0x54>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800624c:	f06f 0302 	mvn.w	r3, #2
 8006250:	f001 bb79 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 800625a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800625e:	08da      	lsrs	r2, r3, #3
 8006260:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006264:	441a      	add	r2, r3
 8006266:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800626a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800626e:	7013      	strb	r3, [r2, #0]
        offset_bits += 8U;
 8006270:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006274:	3308      	adds	r3, #8
 8006276:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    }
    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 800627a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800627e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006282:	2b00      	cmp	r3, #0
 8006284:	d17c      	bne.n	8006380 <uavcan_register_Value_1_0_serialize_+0x180>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006286:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <uavcan_register_Value_1_0_serialize_+0x9e>
 8006292:	4bc1      	ldr	r3, [pc, #772]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006294:	4ac1      	ldr	r2, [pc, #772]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006296:	21be      	movs	r1, #190	; 0xbe
 8006298:	48c1      	ldr	r0, [pc, #772]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800629a:	f008 fc3b 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800629e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <uavcan_register_Value_1_0_serialize_+0xb6>
 80062aa:	4bbb      	ldr	r3, [pc, #748]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 80062ac:	4abb      	ldr	r2, [pc, #748]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062ae:	21bf      	movs	r1, #191	; 0xbf
 80062b0:	48bb      	ldr	r0, [pc, #748]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062b2:	f008 fc2f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
 80062b6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d905      	bls.n	80062d0 <uavcan_register_Value_1_0_serialize_+0xd0>
 80062c4:	4bb7      	ldr	r3, [pc, #732]	; (80065a4 <uavcan_register_Value_1_0_serialize_+0x3a4>)
 80062c6:	4ab5      	ldr	r2, [pc, #724]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062c8:	21c0      	movs	r1, #192	; 0xc0
 80062ca:	48b5      	ldr	r0, [pc, #724]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062cc:	f008 fc22 	bl	800eb14 <__assert_func>
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80062d6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <uavcan_register_Value_1_0_serialize_+0xee>
 80062e2:	4bad      	ldr	r3, [pc, #692]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 80062e4:	4aad      	ldr	r2, [pc, #692]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062e6:	21c2      	movs	r1, #194	; 0xc2
 80062e8:	48ad      	ldr	r0, [pc, #692]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062ea:	f008 fc13 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 80062ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062f2:	08da      	lsrs	r2, r3, #3
 80062f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80062f8:	4413      	add	r3, r2
 80062fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80062fe:	429a      	cmp	r2, r3
 8006300:	d205      	bcs.n	800630e <uavcan_register_Value_1_0_serialize_+0x10e>
 8006302:	4ba9      	ldr	r3, [pc, #676]	; (80065a8 <uavcan_register_Value_1_0_serialize_+0x3a8>)
 8006304:	4aa5      	ldr	r2, [pc, #660]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006306:	21c3      	movs	r1, #195	; 0xc3
 8006308:	48a5      	ldr	r0, [pc, #660]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800630a:	f008 fc03 	bl	800eb14 <__assert_func>
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800630e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 8006312:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006316:	08db      	lsrs	r3, r3, #3
 8006318:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800631c:	4413      	add	r3, r2
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800631e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8006322:	4619      	mov	r1, r3
 8006324:	f7fc fec8 	bl	80030b8 <uavcan_primitive_Empty_1_0_serialize_>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
        if (_err0_ < 0)
 800632e:	f997 3189 	ldrsb.w	r3, [r7, #393]	; 0x189
 8006332:	2b00      	cmp	r3, #0
 8006334:	da03      	bge.n	800633e <uavcan_register_Value_1_0_serialize_+0x13e>
        {
            return _err0_;
 8006336:	f997 3189 	ldrsb.w	r3, [r7, #393]	; 0x189
 800633a:	f001 bb04 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
 800633e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <uavcan_register_Value_1_0_serialize_+0x154>
 8006348:	4b98      	ldr	r3, [pc, #608]	; (80065ac <uavcan_register_Value_1_0_serialize_+0x3ac>)
 800634a:	4a94      	ldr	r2, [pc, #592]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 800634c:	21cb      	movs	r1, #203	; 0xcb
 800634e:	4894      	ldr	r0, [pc, #592]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006350:	f008 fbe0 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8006354:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800635e:	4413      	add	r3, r2
 8006360:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006364:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800636e:	429a      	cmp	r2, r3
 8006370:	f241 8273 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006374:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <uavcan_register_Value_1_0_serialize_+0x3b0>)
 8006376:	4a89      	ldr	r2, [pc, #548]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006378:	21cd      	movs	r1, #205	; 0xcd
 800637a:	4889      	ldr	r0, [pc, #548]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800637c:	f008 fbca 	bl	800eb14 <__assert_func>
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8006380:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006384:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006388:	2b01      	cmp	r3, #1
 800638a:	f040 80a1 	bne.w	80064d0 <uavcan_register_Value_1_0_serialize_+0x2d0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800638e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <uavcan_register_Value_1_0_serialize_+0x1a6>
 800639a:	4b7f      	ldr	r3, [pc, #508]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 800639c:	4a7f      	ldr	r2, [pc, #508]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 800639e:	21d1      	movs	r1, #209	; 0xd1
 80063a0:	487f      	ldr	r0, [pc, #508]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80063a2:	f008 fbb7 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80063a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <uavcan_register_Value_1_0_serialize_+0x1be>
 80063b2:	4b79      	ldr	r3, [pc, #484]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 80063b4:	4a79      	ldr	r2, [pc, #484]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80063b6:	21d2      	movs	r1, #210	; 0xd2
 80063b8:	4879      	ldr	r0, [pc, #484]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80063ba:	f008 fbab 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80063be:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80063c8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80063cc:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80063d0:	460b      	mov	r3, r1
 80063d2:	f513 6401 	adds.w	r4, r3, #2064	; 0x810
 80063d6:	4613      	mov	r3, r2
 80063d8:	f143 0500 	adc.w	r5, r3, #0
 80063dc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063e8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80063ec:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80063f0:	460b      	mov	r3, r1
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	4613      	mov	r3, r2
 80063f6:	41ab      	sbcs	r3, r5
 80063f8:	d205      	bcs.n	8006406 <uavcan_register_Value_1_0_serialize_+0x206>
 80063fa:	4b6e      	ldr	r3, [pc, #440]	; (80065b4 <uavcan_register_Value_1_0_serialize_+0x3b4>)
 80063fc:	4a67      	ldr	r2, [pc, #412]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80063fe:	21d3      	movs	r1, #211	; 0xd3
 8006400:	4867      	ldr	r0, [pc, #412]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006402:	f008 fb87 	bl	800eb14 <__assert_func>
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8006406:	f44f 7381 	mov.w	r3, #258	; 0x102
 800640a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800640e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <uavcan_register_Value_1_0_serialize_+0x226>
 800641a:	4b5f      	ldr	r3, [pc, #380]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 800641c:	4a5f      	ldr	r2, [pc, #380]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 800641e:	21d5      	movs	r1, #213	; 0xd5
 8006420:	485f      	ldr	r0, [pc, #380]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006422:	f008 fb77 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8006426:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800642a:	08da      	lsrs	r2, r3, #3
 800642c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8006430:	4413      	add	r3, r2
 8006432:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006436:	429a      	cmp	r2, r3
 8006438:	d205      	bcs.n	8006446 <uavcan_register_Value_1_0_serialize_+0x246>
 800643a:	4b5f      	ldr	r3, [pc, #380]	; (80065b8 <uavcan_register_Value_1_0_serialize_+0x3b8>)
 800643c:	4a57      	ldr	r2, [pc, #348]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 800643e:	21d6      	movs	r1, #214	; 0xd6
 8006440:	4857      	ldr	r0, [pc, #348]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006442:	f008 fb67 	bl	800eb14 <__assert_func>
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8006446:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 800644a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800644e:	08db      	lsrs	r3, r3, #3
 8006450:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006454:	4413      	add	r3, r2
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8006456:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800645a:	4619      	mov	r1, r3
 800645c:	f7fc fe70 	bl	8003140 <uavcan_primitive_String_1_0_serialize_>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
        if (_err1_ < 0)
 8006466:	f997 318a 	ldrsb.w	r3, [r7, #394]	; 0x18a
 800646a:	2b00      	cmp	r3, #0
 800646c:	da03      	bge.n	8006476 <uavcan_register_Value_1_0_serialize_+0x276>
        {
            return _err1_;
 800646e:	f997 318a 	ldrsb.w	r3, [r7, #394]	; 0x18a
 8006472:	f001 ba68 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
 8006476:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d805      	bhi.n	800648c <uavcan_register_Value_1_0_serialize_+0x28c>
 8006480:	4b4e      	ldr	r3, [pc, #312]	; (80065bc <uavcan_register_Value_1_0_serialize_+0x3bc>)
 8006482:	4a46      	ldr	r2, [pc, #280]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006484:	21de      	movs	r1, #222	; 0xde
 8006486:	4846      	ldr	r0, [pc, #280]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006488:	f008 fb44 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
 800648c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006496:	d905      	bls.n	80064a4 <uavcan_register_Value_1_0_serialize_+0x2a4>
 8006498:	4b49      	ldr	r3, [pc, #292]	; (80065c0 <uavcan_register_Value_1_0_serialize_+0x3c0>)
 800649a:	4a40      	ldr	r2, [pc, #256]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 800649c:	21df      	movs	r1, #223	; 0xdf
 800649e:	4840      	ldr	r0, [pc, #256]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064a0:	f008 fb38 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80064a4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80064ae:	4413      	add	r3, r2
 80064b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80064b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80064be:	429a      	cmp	r2, r3
 80064c0:	f241 81cb 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 80064c4:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <uavcan_register_Value_1_0_serialize_+0x3b0>)
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80064c8:	21e1      	movs	r1, #225	; 0xe1
 80064ca:	4835      	ldr	r0, [pc, #212]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064cc:	f008 fb22 	bl	800eb14 <__assert_func>
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 80064d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80064d4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80064d8:	2b02      	cmp	r3, #2
 80064da:	f040 80ba 	bne.w	8006652 <uavcan_register_Value_1_0_serialize_+0x452>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80064de:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <uavcan_register_Value_1_0_serialize_+0x2f6>
 80064ea:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 80064ec:	4a2b      	ldr	r2, [pc, #172]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 80064ee:	21e5      	movs	r1, #229	; 0xe5
 80064f0:	482b      	ldr	r0, [pc, #172]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064f2:	f008 fb0f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80064f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <uavcan_register_Value_1_0_serialize_+0x30e>
 8006502:	4b25      	ldr	r3, [pc, #148]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006504:	4a25      	ldr	r2, [pc, #148]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006506:	21e6      	movs	r1, #230	; 0xe6
 8006508:	4825      	ldr	r0, [pc, #148]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800650a:	f008 fb03 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800650e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006518:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800651c:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8006520:	460b      	mov	r3, r1
 8006522:	f513 6801 	adds.w	r8, r3, #2064	; 0x810
 8006526:	4613      	mov	r3, r2
 8006528:	f143 0900 	adc.w	r9, r3, #0
 800652c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006538:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800653c:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8006540:	460b      	mov	r3, r1
 8006542:	4543      	cmp	r3, r8
 8006544:	4613      	mov	r3, r2
 8006546:	eb73 0309 	sbcs.w	r3, r3, r9
 800654a:	d205      	bcs.n	8006558 <uavcan_register_Value_1_0_serialize_+0x358>
 800654c:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <uavcan_register_Value_1_0_serialize_+0x3b4>)
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006550:	21e7      	movs	r1, #231	; 0xe7
 8006552:	4813      	ldr	r0, [pc, #76]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006554:	f008 fade 	bl	800eb14 <__assert_func>
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8006558:	f44f 7381 	mov.w	r3, #258	; 0x102
 800655c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006560:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <uavcan_register_Value_1_0_serialize_+0x378>
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <uavcan_register_Value_1_0_serialize_+0x398>)
 800656e:	4a0b      	ldr	r2, [pc, #44]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006570:	21e9      	movs	r1, #233	; 0xe9
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006574:	f008 face 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
 8006578:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800657c:	08da      	lsrs	r2, r3, #3
 800657e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006582:	4413      	add	r3, r2
 8006584:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006588:	429a      	cmp	r2, r3
 800658a:	d21d      	bcs.n	80065c8 <uavcan_register_Value_1_0_serialize_+0x3c8>
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x3c4>)
 800658e:	4a03      	ldr	r2, [pc, #12]	; (800659c <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006590:	21ea      	movs	r1, #234	; 0xea
 8006592:	4803      	ldr	r0, [pc, #12]	; (80065a0 <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006594:	f008 fabe 	bl	800eb14 <__assert_func>
 8006598:	08011768 	.word	0x08011768
 800659c:	080140a8 	.word	0x080140a8
 80065a0:	08012508 	.word	0x08012508
 80065a4:	08012584 	.word	0x08012584
 80065a8:	08011944 	.word	0x08011944
 80065ac:	080125b4 	.word	0x080125b4
 80065b0:	080119bc 	.word	0x080119bc
 80065b4:	08011e28 	.word	0x08011e28
 80065b8:	08011c2c 	.word	0x08011c2c
 80065bc:	080125d4 	.word	0x080125d4
 80065c0:	080125f4 	.word	0x080125f4
 80065c4:	08012614 	.word	0x08012614
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80065c8:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 80065cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80065d0:	08db      	lsrs	r3, r3, #3
 80065d2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80065d6:	4413      	add	r3, r2
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80065d8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80065dc:	4619      	mov	r1, r3
 80065de:	f7fc ff93 	bl	8003508 <uavcan_primitive_Unstructured_1_0_serialize_>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
        if (_err2_ < 0)
 80065e8:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da03      	bge.n	80065f8 <uavcan_register_Value_1_0_serialize_+0x3f8>
        {
            return _err2_;
 80065f0:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 80065f4:	f001 b9a7 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
 80065f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	2b0f      	cmp	r3, #15
 8006600:	d805      	bhi.n	800660e <uavcan_register_Value_1_0_serialize_+0x40e>
 8006602:	4bc7      	ldr	r3, [pc, #796]	; (8006920 <uavcan_register_Value_1_0_serialize_+0x720>)
 8006604:	4ac7      	ldr	r2, [pc, #796]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006606:	21f2      	movs	r1, #242	; 0xf2
 8006608:	48c7      	ldr	r0, [pc, #796]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 800660a:	f008 fa83 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
 800660e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006618:	d905      	bls.n	8006626 <uavcan_register_Value_1_0_serialize_+0x426>
 800661a:	4bc4      	ldr	r3, [pc, #784]	; (800692c <uavcan_register_Value_1_0_serialize_+0x72c>)
 800661c:	4ac1      	ldr	r2, [pc, #772]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 800661e:	21f3      	movs	r1, #243	; 0xf3
 8006620:	48c1      	ldr	r0, [pc, #772]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006622:	f008 fa77 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8006626:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006630:	4413      	add	r3, r2
 8006632:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006636:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006640:	429a      	cmp	r2, r3
 8006642:	f241 810a 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006646:	4bba      	ldr	r3, [pc, #744]	; (8006930 <uavcan_register_Value_1_0_serialize_+0x730>)
 8006648:	4ab6      	ldr	r2, [pc, #728]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 800664a:	21f5      	movs	r1, #245	; 0xf5
 800664c:	48b6      	ldr	r0, [pc, #728]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 800664e:	f008 fa61 	bl	800eb14 <__assert_func>
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8006652:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006656:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800665a:	2b03      	cmp	r3, #3
 800665c:	f040 80a5 	bne.w	80067aa <uavcan_register_Value_1_0_serialize_+0x5aa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006660:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <uavcan_register_Value_1_0_serialize_+0x478>
 800666c:	4bb1      	ldr	r3, [pc, #708]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 800666e:	4aad      	ldr	r2, [pc, #692]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006670:	21f9      	movs	r1, #249	; 0xf9
 8006672:	48ad      	ldr	r0, [pc, #692]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006674:	f008 fa4e 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006678:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <uavcan_register_Value_1_0_serialize_+0x490>
 8006684:	4bab      	ldr	r3, [pc, #684]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 8006686:	4aa7      	ldr	r2, [pc, #668]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006688:	21fa      	movs	r1, #250	; 0xfa
 800668a:	48a7      	ldr	r0, [pc, #668]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 800668c:	f008 fa42 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8006690:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006694:	2200      	movs	r2, #0
 8006696:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800669a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800669e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80066a2:	460b      	mov	r3, r1
 80066a4:	f513 6a01 	adds.w	sl, r3, #2064	; 0x810
 80066a8:	4613      	mov	r3, r2
 80066aa:	f143 0b00 	adc.w	fp, r3, #0
 80066ae:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066ba:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80066be:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80066c2:	460b      	mov	r3, r1
 80066c4:	4553      	cmp	r3, sl
 80066c6:	4613      	mov	r3, r2
 80066c8:	eb73 030b 	sbcs.w	r3, r3, fp
 80066cc:	d205      	bcs.n	80066da <uavcan_register_Value_1_0_serialize_+0x4da>
 80066ce:	4b9a      	ldr	r3, [pc, #616]	; (8006938 <uavcan_register_Value_1_0_serialize_+0x738>)
 80066d0:	4a94      	ldr	r2, [pc, #592]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80066d2:	21fb      	movs	r1, #251	; 0xfb
 80066d4:	4894      	ldr	r0, [pc, #592]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80066d6:	f008 fa1d 	bl	800eb14 <__assert_func>
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 80066da:	f44f 7381 	mov.w	r3, #258	; 0x102
 80066de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80066e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <uavcan_register_Value_1_0_serialize_+0x4fa>
 80066ee:	4b91      	ldr	r3, [pc, #580]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 80066f0:	4a8c      	ldr	r2, [pc, #560]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80066f2:	21fd      	movs	r1, #253	; 0xfd
 80066f4:	488c      	ldr	r0, [pc, #560]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80066f6:	f008 fa0d 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
 80066fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80066fe:	08da      	lsrs	r2, r3, #3
 8006700:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006704:	4413      	add	r3, r2
 8006706:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800670a:	429a      	cmp	r2, r3
 800670c:	d205      	bcs.n	800671a <uavcan_register_Value_1_0_serialize_+0x51a>
 800670e:	4b8b      	ldr	r3, [pc, #556]	; (800693c <uavcan_register_Value_1_0_serialize_+0x73c>)
 8006710:	4a84      	ldr	r2, [pc, #528]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006712:	21fe      	movs	r1, #254	; 0xfe
 8006714:	4884      	ldr	r0, [pc, #528]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006716:	f008 f9fd 	bl	800eb14 <__assert_func>
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800671a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 800671e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006728:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800672a:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800672e:	4619      	mov	r1, r3
 8006730:	f7fd f8ce 	bl	80038d0 <uavcan_primitive_array_Bit_1_0_serialize_>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
        if (_err3_ < 0)
 800673a:	f997 318c 	ldrsb.w	r3, [r7, #396]	; 0x18c
 800673e:	2b00      	cmp	r3, #0
 8006740:	da03      	bge.n	800674a <uavcan_register_Value_1_0_serialize_+0x54a>
        {
            return _err3_;
 8006742:	f997 318c 	ldrsb.w	r3, [r7, #396]	; 0x18c
 8006746:	f001 b8fe 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
 800674a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	2b0f      	cmp	r3, #15
 8006752:	d806      	bhi.n	8006762 <uavcan_register_Value_1_0_serialize_+0x562>
 8006754:	4b7a      	ldr	r3, [pc, #488]	; (8006940 <uavcan_register_Value_1_0_serialize_+0x740>)
 8006756:	4a73      	ldr	r2, [pc, #460]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006758:	f44f 7183 	mov.w	r1, #262	; 0x106
 800675c:	4872      	ldr	r0, [pc, #456]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 800675e:	f008 f9d9 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
 8006762:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800676c:	d906      	bls.n	800677c <uavcan_register_Value_1_0_serialize_+0x57c>
 800676e:	4b75      	ldr	r3, [pc, #468]	; (8006944 <uavcan_register_Value_1_0_serialize_+0x744>)
 8006770:	4a6c      	ldr	r2, [pc, #432]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006772:	f240 1107 	movw	r1, #263	; 0x107
 8006776:	486c      	ldr	r0, [pc, #432]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006778:	f008 f9cc 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 800677c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006786:	4413      	add	r3, r2
 8006788:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800678c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006796:	429a      	cmp	r2, r3
 8006798:	f241 805f 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 800679c:	4b64      	ldr	r3, [pc, #400]	; (8006930 <uavcan_register_Value_1_0_serialize_+0x730>)
 800679e:	4a61      	ldr	r2, [pc, #388]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80067a0:	f240 1109 	movw	r1, #265	; 0x109
 80067a4:	4860      	ldr	r0, [pc, #384]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067a6:	f008 f9b5 	bl	800eb14 <__assert_func>
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80067aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80067ae:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	f040 80d0 	bne.w	8006958 <uavcan_register_Value_1_0_serialize_+0x758>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80067b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d006      	beq.n	80067d2 <uavcan_register_Value_1_0_serialize_+0x5d2>
 80067c4:	4b5b      	ldr	r3, [pc, #364]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 80067c6:	4a57      	ldr	r2, [pc, #348]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80067c8:	f240 110d 	movw	r1, #269	; 0x10d
 80067cc:	4856      	ldr	r0, [pc, #344]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067ce:	f008 f9a1 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80067d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <uavcan_register_Value_1_0_serialize_+0x5ec>
 80067de:	4b55      	ldr	r3, [pc, #340]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 80067e0:	4a50      	ldr	r2, [pc, #320]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80067e2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80067e6:	4850      	ldr	r0, [pc, #320]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067e8:	f008 f994 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80067ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80067fa:	f640 0308 	movw	r3, #2056	; 0x808
 80067fe:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8006802:	4602      	mov	r2, r0
 8006804:	18d3      	adds	r3, r2, r3
 8006806:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800680a:	460b      	mov	r3, r1
 800680c:	f143 0300 	adc.w	r3, r3, #0
 8006810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006814:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006820:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006824:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8006828:	4623      	mov	r3, r4
 800682a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800682e:	4602      	mov	r2, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	462b      	mov	r3, r5
 8006834:	460a      	mov	r2, r1
 8006836:	4193      	sbcs	r3, r2
 8006838:	d206      	bcs.n	8006848 <uavcan_register_Value_1_0_serialize_+0x648>
 800683a:	4b43      	ldr	r3, [pc, #268]	; (8006948 <uavcan_register_Value_1_0_serialize_+0x748>)
 800683c:	4a39      	ldr	r2, [pc, #228]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 800683e:	f240 110f 	movw	r1, #271	; 0x10f
 8006842:	4839      	ldr	r0, [pc, #228]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006844:	f008 f966 	bl	800eb14 <__assert_func>
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8006848:	f240 1301 	movw	r3, #257	; 0x101
 800684c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006850:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <uavcan_register_Value_1_0_serialize_+0x66a>
 800685c:	4b35      	ldr	r3, [pc, #212]	; (8006934 <uavcan_register_Value_1_0_serialize_+0x734>)
 800685e:	4a31      	ldr	r2, [pc, #196]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006860:	f240 1111 	movw	r1, #273	; 0x111
 8006864:	4830      	ldr	r0, [pc, #192]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006866:	f008 f955 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
 800686a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800686e:	08da      	lsrs	r2, r3, #3
 8006870:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006874:	4413      	add	r3, r2
 8006876:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800687a:	429a      	cmp	r2, r3
 800687c:	d206      	bcs.n	800688c <uavcan_register_Value_1_0_serialize_+0x68c>
 800687e:	4b33      	ldr	r3, [pc, #204]	; (800694c <uavcan_register_Value_1_0_serialize_+0x74c>)
 8006880:	4a28      	ldr	r2, [pc, #160]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006882:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006886:	4828      	ldr	r0, [pc, #160]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006888:	f008 f944 	bl	800eb14 <__assert_func>
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 800688c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 8006890:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800689a:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 800689c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80068a0:	4619      	mov	r1, r3
 80068a2:	f7fd fd65 	bl	8004370 <uavcan_primitive_array_Integer64_1_0_serialize_>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
        if (_err4_ < 0)
 80068ac:	f997 318d 	ldrsb.w	r3, [r7, #397]	; 0x18d
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da03      	bge.n	80068bc <uavcan_register_Value_1_0_serialize_+0x6bc>
        {
            return _err4_;
 80068b4:	f997 318d 	ldrsb.w	r3, [r7, #397]	; 0x18d
 80068b8:	f001 b845 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
 80068bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	2b07      	cmp	r3, #7
 80068c4:	d806      	bhi.n	80068d4 <uavcan_register_Value_1_0_serialize_+0x6d4>
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x750>)
 80068c8:	4a16      	ldr	r2, [pc, #88]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80068ca:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80068ce:	4816      	ldr	r0, [pc, #88]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80068d0:	f008 f920 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
 80068d4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	f640 0208 	movw	r2, #2056	; 0x808
 80068de:	4293      	cmp	r3, r2
 80068e0:	d906      	bls.n	80068f0 <uavcan_register_Value_1_0_serialize_+0x6f0>
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x754>)
 80068e4:	4a0f      	ldr	r2, [pc, #60]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 80068e6:	f240 111b 	movw	r1, #283	; 0x11b
 80068ea:	480f      	ldr	r0, [pc, #60]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 80068ec:	f008 f912 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80068f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80068fa:	4413      	add	r3, r2
 80068fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006900:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800690a:	429a      	cmp	r2, r3
 800690c:	f240 87a5 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <uavcan_register_Value_1_0_serialize_+0x730>)
 8006912:	4a04      	ldr	r2, [pc, #16]	; (8006924 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006914:	f240 111d 	movw	r1, #285	; 0x11d
 8006918:	4803      	ldr	r0, [pc, #12]	; (8006928 <uavcan_register_Value_1_0_serialize_+0x728>)
 800691a:	f008 f8fb 	bl	800eb14 <__assert_func>
 800691e:	bf00      	nop
 8006920:	0801264c 	.word	0x0801264c
 8006924:	080140a8 	.word	0x080140a8
 8006928:	08012508 	.word	0x08012508
 800692c:	0801266c 	.word	0x0801266c
 8006930:	080119bc 	.word	0x080119bc
 8006934:	08011768 	.word	0x08011768
 8006938:	08011e28 	.word	0x08011e28
 800693c:	0801268c 	.word	0x0801268c
 8006940:	080126c4 	.word	0x080126c4
 8006944:	080126e4 	.word	0x080126e4
 8006948:	08011d2c 	.word	0x08011d2c
 800694c:	08012704 	.word	0x08012704
 8006950:	0801273c 	.word	0x0801273c
 8006954:	0801275c 	.word	0x0801275c
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8006958:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800695c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006960:	2b05      	cmp	r3, #5
 8006962:	f040 80b3 	bne.w	8006acc <uavcan_register_Value_1_0_serialize_+0x8cc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006966:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <uavcan_register_Value_1_0_serialize_+0x780>
 8006972:	4bc4      	ldr	r3, [pc, #784]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006974:	4ac4      	ldr	r2, [pc, #784]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006976:	f240 1121 	movw	r1, #289	; 0x121
 800697a:	48c4      	ldr	r0, [pc, #784]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 800697c:	f008 f8ca 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006980:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <uavcan_register_Value_1_0_serialize_+0x79a>
 800698c:	4bbd      	ldr	r3, [pc, #756]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 800698e:	4abe      	ldr	r2, [pc, #760]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006990:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006994:	48bd      	ldr	r0, [pc, #756]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006996:	f008 f8bd 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 800699a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069a4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069a8:	f640 0308 	movw	r3, #2056	; 0x808
 80069ac:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80069b0:	4602      	mov	r2, r0
 80069b2:	18d3      	adds	r3, r2, r3
 80069b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069b8:	460b      	mov	r3, r1
 80069ba:	f143 0300 	adc.w	r3, r3, #0
 80069be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069c2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80069d6:	4623      	mov	r3, r4
 80069d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069dc:	4602      	mov	r2, r0
 80069de:	4293      	cmp	r3, r2
 80069e0:	462b      	mov	r3, r5
 80069e2:	460a      	mov	r2, r1
 80069e4:	4193      	sbcs	r3, r2
 80069e6:	d206      	bcs.n	80069f6 <uavcan_register_Value_1_0_serialize_+0x7f6>
 80069e8:	4ba9      	ldr	r3, [pc, #676]	; (8006c90 <uavcan_register_Value_1_0_serialize_+0xa90>)
 80069ea:	4aa7      	ldr	r2, [pc, #668]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 80069ec:	f240 1123 	movw	r1, #291	; 0x123
 80069f0:	48a6      	ldr	r0, [pc, #664]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 80069f2:	f008 f88f 	bl	800eb14 <__assert_func>
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 80069f6:	f240 1301 	movw	r3, #257	; 0x101
 80069fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80069fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <uavcan_register_Value_1_0_serialize_+0x818>
 8006a0a:	4b9e      	ldr	r3, [pc, #632]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006a0c:	4a9e      	ldr	r2, [pc, #632]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a0e:	f240 1125 	movw	r1, #293	; 0x125
 8006a12:	489e      	ldr	r0, [pc, #632]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a14:	f008 f87e 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
 8006a18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a1c:	08da      	lsrs	r2, r3, #3
 8006a1e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a22:	4413      	add	r3, r2
 8006a24:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d206      	bcs.n	8006a3a <uavcan_register_Value_1_0_serialize_+0x83a>
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <uavcan_register_Value_1_0_serialize_+0xa94>)
 8006a2e:	4a96      	ldr	r2, [pc, #600]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a30:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006a34:	4895      	ldr	r0, [pc, #596]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a36:	f008 f86d 	bl	800eb14 <__assert_func>
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8006a3a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8006a3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006a48:	4413      	add	r3, r2
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8006a4a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f7fd faaa 	bl	8003fa8 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
        if (_err5_ < 0)
 8006a5a:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da03      	bge.n	8006a6a <uavcan_register_Value_1_0_serialize_+0x86a>
        {
            return _err5_;
 8006a62:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8006a66:	f000 bf6e 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
 8006a6a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	2b07      	cmp	r3, #7
 8006a72:	d806      	bhi.n	8006a82 <uavcan_register_Value_1_0_serialize_+0x882>
 8006a74:	4b88      	ldr	r3, [pc, #544]	; (8006c98 <uavcan_register_Value_1_0_serialize_+0xa98>)
 8006a76:	4a84      	ldr	r2, [pc, #528]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a78:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8006a7c:	4883      	ldr	r0, [pc, #524]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a7e:	f008 f849 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
 8006a82:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	f640 0208 	movw	r2, #2056	; 0x808
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d906      	bls.n	8006a9e <uavcan_register_Value_1_0_serialize_+0x89e>
 8006a90:	4b82      	ldr	r3, [pc, #520]	; (8006c9c <uavcan_register_Value_1_0_serialize_+0xa9c>)
 8006a92:	4a7d      	ldr	r2, [pc, #500]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a94:	f240 112f 	movw	r1, #303	; 0x12f
 8006a98:	487c      	ldr	r0, [pc, #496]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a9a:	f008 f83b 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8006a9e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006aae:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	f240 86ce 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006abe:	4b78      	ldr	r3, [pc, #480]	; (8006ca0 <uavcan_register_Value_1_0_serialize_+0xaa0>)
 8006ac0:	4a71      	ldr	r2, [pc, #452]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006ac2:	f240 1131 	movw	r1, #305	; 0x131
 8006ac6:	4871      	ldr	r0, [pc, #452]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006ac8:	f008 f824 	bl	800eb14 <__assert_func>
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8006acc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006ad0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	f040 80b3 	bne.w	8006c40 <uavcan_register_Value_1_0_serialize_+0xa40>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006ada:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <uavcan_register_Value_1_0_serialize_+0x8f4>
 8006ae6:	4b67      	ldr	r3, [pc, #412]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006ae8:	4a67      	ldr	r2, [pc, #412]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006aea:	f240 1135 	movw	r1, #309	; 0x135
 8006aee:	4867      	ldr	r0, [pc, #412]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006af0:	f008 f810 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006af4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d006      	beq.n	8006b0e <uavcan_register_Value_1_0_serialize_+0x90e>
 8006b00:	4b60      	ldr	r3, [pc, #384]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006b02:	4a61      	ldr	r2, [pc, #388]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b04:	f44f 719b 	mov.w	r1, #310	; 0x136
 8006b08:	4860      	ldr	r0, [pc, #384]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b0a:	f008 f803 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006b0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b1c:	f640 0308 	movw	r3, #2056	; 0x808
 8006b20:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006b24:	4602      	mov	r2, r0
 8006b26:	18d3      	adds	r3, r2, r3
 8006b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	f143 0300 	adc.w	r3, r3, #0
 8006b32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b36:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b42:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b46:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b50:	4602      	mov	r2, r0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	462b      	mov	r3, r5
 8006b56:	460a      	mov	r2, r1
 8006b58:	4193      	sbcs	r3, r2
 8006b5a:	d206      	bcs.n	8006b6a <uavcan_register_Value_1_0_serialize_+0x96a>
 8006b5c:	4b4c      	ldr	r3, [pc, #304]	; (8006c90 <uavcan_register_Value_1_0_serialize_+0xa90>)
 8006b5e:	4a4a      	ldr	r2, [pc, #296]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b60:	f240 1137 	movw	r1, #311	; 0x137
 8006b64:	4849      	ldr	r0, [pc, #292]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b66:	f007 ffd5 	bl	800eb14 <__assert_func>
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8006b6a:	f240 1301 	movw	r3, #257	; 0x101
 8006b6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006b72:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <uavcan_register_Value_1_0_serialize_+0x98c>
 8006b7e:	4b41      	ldr	r3, [pc, #260]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006b80:	4a41      	ldr	r2, [pc, #260]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b82:	f240 1139 	movw	r1, #313	; 0x139
 8006b86:	4841      	ldr	r0, [pc, #260]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b88:	f007 ffc4 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
 8006b8c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b90:	08da      	lsrs	r2, r3, #3
 8006b92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006b96:	4413      	add	r3, r2
 8006b98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d206      	bcs.n	8006bae <uavcan_register_Value_1_0_serialize_+0x9ae>
 8006ba0:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <uavcan_register_Value_1_0_serialize_+0xaa4>)
 8006ba2:	4a39      	ldr	r2, [pc, #228]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006ba4:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8006ba8:	4838      	ldr	r0, [pc, #224]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006baa:	f007 ffb3 	bl	800eb14 <__assert_func>
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8006bae:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8006bb2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006bb6:	08db      	lsrs	r3, r3, #3
 8006bb8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006bbc:	4413      	add	r3, r2
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8006bbe:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f7fd f80a 	bl	8003bdc <uavcan_primitive_array_Integer16_1_0_serialize_>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
        if (_err6_ < 0)
 8006bce:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da03      	bge.n	8006bde <uavcan_register_Value_1_0_serialize_+0x9de>
        {
            return _err6_;
 8006bd6:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8006bda:	f000 beb4 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
 8006bde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	2b07      	cmp	r3, #7
 8006be6:	d806      	bhi.n	8006bf6 <uavcan_register_Value_1_0_serialize_+0x9f6>
 8006be8:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <uavcan_register_Value_1_0_serialize_+0xaa8>)
 8006bea:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006bec:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006bf0:	4826      	ldr	r0, [pc, #152]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006bf2:	f007 ff8f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
 8006bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	f640 0208 	movw	r2, #2056	; 0x808
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d906      	bls.n	8006c12 <uavcan_register_Value_1_0_serialize_+0xa12>
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <uavcan_register_Value_1_0_serialize_+0xaac>)
 8006c06:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c08:	f240 1143 	movw	r1, #323	; 0x143
 8006c0c:	481f      	ldr	r0, [pc, #124]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c0e:	f007 ff81 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8006c12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006c22:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	f240 8614 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <uavcan_register_Value_1_0_serialize_+0xaa0>)
 8006c34:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c36:	f240 1145 	movw	r1, #325	; 0x145
 8006c3a:	4814      	ldr	r0, [pc, #80]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c3c:	f007 ff6a 	bl	800eb14 <__assert_func>
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8006c40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006c44:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006c48:	2b07      	cmp	r3, #7
 8006c4a:	f040 80c8 	bne.w	8006dde <uavcan_register_Value_1_0_serialize_+0xbde>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006c4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <uavcan_register_Value_1_0_serialize_+0xa68>
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c5e:	f240 1149 	movw	r1, #329	; 0x149
 8006c62:	480a      	ldr	r0, [pc, #40]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c64:	f007 ff56 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006c68:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01d      	beq.n	8006cb0 <uavcan_register_Value_1_0_serialize_+0xab0>
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006c76:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c78:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006c7c:	4803      	ldr	r0, [pc, #12]	; (8006c8c <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c7e:	f007 ff49 	bl	800eb14 <__assert_func>
 8006c82:	bf00      	nop
 8006c84:	08011768 	.word	0x08011768
 8006c88:	080140a8 	.word	0x080140a8
 8006c8c:	08012508 	.word	0x08012508
 8006c90:	08011d2c 	.word	0x08011d2c
 8006c94:	0801277c 	.word	0x0801277c
 8006c98:	080127b4 	.word	0x080127b4
 8006c9c:	080127d4 	.word	0x080127d4
 8006ca0:	080119bc 	.word	0x080119bc
 8006ca4:	080127f4 	.word	0x080127f4
 8006ca8:	0801282c 	.word	0x0801282c
 8006cac:	0801284c 	.word	0x0801284c
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8006cb0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	f513 6301 	adds.w	r3, r3, #2064	; 0x810
 8006cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ccc:	4613      	mov	r3, r2
 8006cce:	f143 0300 	adc.w	r3, r3, #0
 8006cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cd6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ce2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ce6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8006cea:	4623      	mov	r3, r4
 8006cec:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	4193      	sbcs	r3, r2
 8006cfa:	d206      	bcs.n	8006d0a <uavcan_register_Value_1_0_serialize_+0xb0a>
 8006cfc:	4bc4      	ldr	r3, [pc, #784]	; (8007010 <uavcan_register_Value_1_0_serialize_+0xe10>)
 8006cfe:	4ac5      	ldr	r2, [pc, #788]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d00:	f240 114b 	movw	r1, #331	; 0x14b
 8006d04:	48c4      	ldr	r0, [pc, #784]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d06:	f007 ff05 	bl	800eb14 <__assert_func>
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8006d0a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006d0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006d12:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <uavcan_register_Value_1_0_serialize_+0xb2c>
 8006d1e:	4bbf      	ldr	r3, [pc, #764]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006d20:	4abc      	ldr	r2, [pc, #752]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d22:	f240 114d 	movw	r1, #333	; 0x14d
 8006d26:	48bc      	ldr	r0, [pc, #752]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d28:	f007 fef4 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
 8006d2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d30:	08da      	lsrs	r2, r3, #3
 8006d32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d36:	4413      	add	r3, r2
 8006d38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d206      	bcs.n	8006d4e <uavcan_register_Value_1_0_serialize_+0xb4e>
 8006d40:	4bb7      	ldr	r3, [pc, #732]	; (8007020 <uavcan_register_Value_1_0_serialize_+0xe20>)
 8006d42:	4ab4      	ldr	r2, [pc, #720]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d44:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8006d48:	48b3      	ldr	r0, [pc, #716]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d4a:	f007 fee3 	bl	800eb14 <__assert_func>
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8006d4e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8006d52:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006d5c:	4413      	add	r3, r2
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8006d5e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006d62:	4619      	mov	r1, r3
 8006d64:	f7fd fce8 	bl	8004738 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
        if (_err7_ < 0)
 8006d6e:	f997 3190 	ldrsb.w	r3, [r7, #400]	; 0x190
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da03      	bge.n	8006d7e <uavcan_register_Value_1_0_serialize_+0xb7e>
        {
            return _err7_;
 8006d76:	f997 3190 	ldrsb.w	r3, [r7, #400]	; 0x190
 8006d7a:	f000 bde4 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
 8006d7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	2b0f      	cmp	r3, #15
 8006d86:	d806      	bhi.n	8006d96 <uavcan_register_Value_1_0_serialize_+0xb96>
 8006d88:	4ba6      	ldr	r3, [pc, #664]	; (8007024 <uavcan_register_Value_1_0_serialize_+0xe24>)
 8006d8a:	4aa2      	ldr	r2, [pc, #648]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d8c:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8006d90:	48a1      	ldr	r0, [pc, #644]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d92:	f007 febf 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
 8006d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006da0:	d906      	bls.n	8006db0 <uavcan_register_Value_1_0_serialize_+0xbb0>
 8006da2:	4ba1      	ldr	r3, [pc, #644]	; (8007028 <uavcan_register_Value_1_0_serialize_+0xe28>)
 8006da4:	4a9b      	ldr	r2, [pc, #620]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006da6:	f240 1157 	movw	r1, #343	; 0x157
 8006daa:	489b      	ldr	r0, [pc, #620]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006dac:	f007 feb2 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8006db0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006dc0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	f240 8545 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006dd0:	4b96      	ldr	r3, [pc, #600]	; (800702c <uavcan_register_Value_1_0_serialize_+0xe2c>)
 8006dd2:	4a90      	ldr	r2, [pc, #576]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006dd4:	f240 1159 	movw	r1, #345	; 0x159
 8006dd8:	488f      	ldr	r0, [pc, #572]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006dda:	f007 fe9b 	bl	800eb14 <__assert_func>
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8006dde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006de2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	f040 80b3 	bne.w	8006f52 <uavcan_register_Value_1_0_serialize_+0xd52>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006dec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <uavcan_register_Value_1_0_serialize_+0xc06>
 8006df8:	4b88      	ldr	r3, [pc, #544]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006dfa:	4a86      	ldr	r2, [pc, #536]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006dfc:	f240 115d 	movw	r1, #349	; 0x15d
 8006e00:	4885      	ldr	r0, [pc, #532]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e02:	f007 fe87 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006e06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <uavcan_register_Value_1_0_serialize_+0xc20>
 8006e12:	4b82      	ldr	r3, [pc, #520]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006e14:	4a7f      	ldr	r2, [pc, #508]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e16:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006e1a:	487f      	ldr	r0, [pc, #508]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e1c:	f007 fe7a 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006e20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e2e:	f640 0308 	movw	r3, #2056	; 0x808
 8006e32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e36:	4602      	mov	r2, r0
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e3e:	460b      	mov	r3, r1
 8006e40:	f143 0300 	adc.w	r3, r3, #0
 8006e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e48:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e58:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e62:	4602      	mov	r2, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	462b      	mov	r3, r5
 8006e68:	460a      	mov	r2, r1
 8006e6a:	4193      	sbcs	r3, r2
 8006e6c:	d206      	bcs.n	8006e7c <uavcan_register_Value_1_0_serialize_+0xc7c>
 8006e6e:	4b70      	ldr	r3, [pc, #448]	; (8007030 <uavcan_register_Value_1_0_serialize_+0xe30>)
 8006e70:	4a68      	ldr	r2, [pc, #416]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e72:	f240 115f 	movw	r1, #351	; 0x15f
 8006e76:	4868      	ldr	r0, [pc, #416]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e78:	f007 fe4c 	bl	800eb14 <__assert_func>
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8006e7c:	f240 1301 	movw	r3, #257	; 0x101
 8006e80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006e84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <uavcan_register_Value_1_0_serialize_+0xc9e>
 8006e90:	4b62      	ldr	r3, [pc, #392]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006e92:	4a60      	ldr	r2, [pc, #384]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e94:	f240 1161 	movw	r1, #353	; 0x161
 8006e98:	485f      	ldr	r0, [pc, #380]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e9a:	f007 fe3b 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
 8006e9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d206      	bcs.n	8006ec0 <uavcan_register_Value_1_0_serialize_+0xcc0>
 8006eb2:	4b60      	ldr	r3, [pc, #384]	; (8007034 <uavcan_register_Value_1_0_serialize_+0xe34>)
 8006eb4:	4a57      	ldr	r2, [pc, #348]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006eb6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006eba:	4857      	ldr	r0, [pc, #348]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006ebc:	f007 fe2a 	bl	800eb14 <__assert_func>
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8006ec0:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8006ec4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006ece:	4413      	add	r3, r2
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8006ed0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	f7fe f9d7 	bl	8005288 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
        if (_err8_ < 0)
 8006ee0:	f997 3191 	ldrsb.w	r3, [r7, #401]	; 0x191
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da03      	bge.n	8006ef0 <uavcan_register_Value_1_0_serialize_+0xcf0>
        {
            return _err8_;
 8006ee8:	f997 3191 	ldrsb.w	r3, [r7, #401]	; 0x191
 8006eec:	f000 bd2b 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
 8006ef0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	2b07      	cmp	r3, #7
 8006ef8:	d806      	bhi.n	8006f08 <uavcan_register_Value_1_0_serialize_+0xd08>
 8006efa:	4b4f      	ldr	r3, [pc, #316]	; (8007038 <uavcan_register_Value_1_0_serialize_+0xe38>)
 8006efc:	4a45      	ldr	r2, [pc, #276]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006efe:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8006f02:	4845      	ldr	r0, [pc, #276]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f04:	f007 fe06 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
 8006f08:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	f640 0208 	movw	r2, #2056	; 0x808
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d906      	bls.n	8006f24 <uavcan_register_Value_1_0_serialize_+0xd24>
 8006f16:	4b49      	ldr	r3, [pc, #292]	; (800703c <uavcan_register_Value_1_0_serialize_+0xe3c>)
 8006f18:	4a3e      	ldr	r2, [pc, #248]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f1a:	f240 116b 	movw	r1, #363	; 0x16b
 8006f1e:	483e      	ldr	r0, [pc, #248]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f20:	f007 fdf8 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8006f24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006f2e:	4413      	add	r3, r2
 8006f30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006f34:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f240 848b 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8006f44:	4b39      	ldr	r3, [pc, #228]	; (800702c <uavcan_register_Value_1_0_serialize_+0xe2c>)
 8006f46:	4a33      	ldr	r2, [pc, #204]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f48:	f240 116d 	movw	r1, #365	; 0x16d
 8006f4c:	4832      	ldr	r0, [pc, #200]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f4e:	f007 fde1 	bl	800eb14 <__assert_func>
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8006f52:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f56:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	f040 80ca 	bne.w	80070f4 <uavcan_register_Value_1_0_serialize_+0xef4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006f60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d006      	beq.n	8006f7a <uavcan_register_Value_1_0_serialize_+0xd7a>
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006f6e:	4a29      	ldr	r2, [pc, #164]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f70:	f240 1171 	movw	r1, #369	; 0x171
 8006f74:	4828      	ldr	r0, [pc, #160]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f76:	f007 fdcd 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006f7a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d006      	beq.n	8006f94 <uavcan_register_Value_1_0_serialize_+0xd94>
 8006f86:	4b25      	ldr	r3, [pc, #148]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f8a:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8006f8e:	4822      	ldr	r0, [pc, #136]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f90:	f007 fdc0 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006f94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fa2:	f640 0308 	movw	r3, #2056	; 0x808
 8006fa6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006faa:	4602      	mov	r2, r0
 8006fac:	18d3      	adds	r3, r2, r3
 8006fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	f143 0300 	adc.w	r3, r3, #0
 8006fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fbc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006fcc:	4623      	mov	r3, r4
 8006fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	462b      	mov	r3, r5
 8006fd8:	460a      	mov	r2, r1
 8006fda:	4193      	sbcs	r3, r2
 8006fdc:	d206      	bcs.n	8006fec <uavcan_register_Value_1_0_serialize_+0xdec>
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <uavcan_register_Value_1_0_serialize_+0xe30>)
 8006fe0:	4a0c      	ldr	r2, [pc, #48]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006fe2:	f240 1173 	movw	r1, #371	; 0x173
 8006fe6:	480c      	ldr	r0, [pc, #48]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006fe8:	f007 fd94 	bl	800eb14 <__assert_func>
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8006fec:	f240 1301 	movw	r3, #257	; 0x101
 8006ff0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006ff4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01f      	beq.n	8007040 <uavcan_register_Value_1_0_serialize_+0xe40>
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8007002:	4a04      	ldr	r2, [pc, #16]	; (8007014 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8007004:	f240 1175 	movw	r1, #373	; 0x175
 8007008:	4803      	ldr	r0, [pc, #12]	; (8007018 <uavcan_register_Value_1_0_serialize_+0xe18>)
 800700a:	f007 fd83 	bl	800eb14 <__assert_func>
 800700e:	bf00      	nop
 8007010:	08011e28 	.word	0x08011e28
 8007014:	080140a8 	.word	0x080140a8
 8007018:	08012508 	.word	0x08012508
 800701c:	08011768 	.word	0x08011768
 8007020:	0801286c 	.word	0x0801286c
 8007024:	080128a4 	.word	0x080128a4
 8007028:	080128c4 	.word	0x080128c4
 800702c:	080119bc 	.word	0x080119bc
 8007030:	08011d2c 	.word	0x08011d2c
 8007034:	080128e4 	.word	0x080128e4
 8007038:	0801291c 	.word	0x0801291c
 800703c:	0801293c 	.word	0x0801293c
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
 8007040:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007044:	08da      	lsrs	r2, r3, #3
 8007046:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800704a:	4413      	add	r3, r2
 800704c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007050:	429a      	cmp	r2, r3
 8007052:	d206      	bcs.n	8007062 <uavcan_register_Value_1_0_serialize_+0xe62>
 8007054:	4bc7      	ldr	r3, [pc, #796]	; (8007374 <uavcan_register_Value_1_0_serialize_+0x1174>)
 8007056:	4ac8      	ldr	r2, [pc, #800]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007058:	f44f 71bb 	mov.w	r1, #374	; 0x176
 800705c:	48c7      	ldr	r0, [pc, #796]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 800705e:	f007 fd59 	bl	800eb14 <__assert_func>
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8007062:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8007066:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007070:	4413      	add	r3, r2
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8007072:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8007076:	4619      	mov	r1, r3
 8007078:	f7fd ff22 	bl	8004ec0 <uavcan_primitive_array_Natural32_1_0_serialize_>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
        if (_err9_ < 0)
 8007082:	f997 3192 	ldrsb.w	r3, [r7, #402]	; 0x192
 8007086:	2b00      	cmp	r3, #0
 8007088:	da03      	bge.n	8007092 <uavcan_register_Value_1_0_serialize_+0xe92>
        {
            return _err9_;
 800708a:	f997 3192 	ldrsb.w	r3, [r7, #402]	; 0x192
 800708e:	f000 bc5a 	b.w	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
 8007092:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	2b07      	cmp	r3, #7
 800709a:	d806      	bhi.n	80070aa <uavcan_register_Value_1_0_serialize_+0xeaa>
 800709c:	4bb8      	ldr	r3, [pc, #736]	; (8007380 <uavcan_register_Value_1_0_serialize_+0x1180>)
 800709e:	4ab6      	ldr	r2, [pc, #728]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80070a0:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80070a4:	48b5      	ldr	r0, [pc, #724]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80070a6:	f007 fd35 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
 80070aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	f640 0208 	movw	r2, #2056	; 0x808
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d906      	bls.n	80070c6 <uavcan_register_Value_1_0_serialize_+0xec6>
 80070b8:	4bb2      	ldr	r3, [pc, #712]	; (8007384 <uavcan_register_Value_1_0_serialize_+0x1184>)
 80070ba:	4aaf      	ldr	r2, [pc, #700]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80070bc:	f240 117f 	movw	r1, #383	; 0x17f
 80070c0:	48ae      	ldr	r0, [pc, #696]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80070c2:	f007 fd27 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 80070c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80070d0:	4413      	add	r3, r2
 80070d2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80070d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	f240 83ba 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 80070e6:	4ba8      	ldr	r3, [pc, #672]	; (8007388 <uavcan_register_Value_1_0_serialize_+0x1188>)
 80070e8:	4aa3      	ldr	r2, [pc, #652]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80070ea:	f240 1181 	movw	r1, #385	; 0x181
 80070ee:	48a3      	ldr	r0, [pc, #652]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80070f0:	f007 fd10 	bl	800eb14 <__assert_func>
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80070f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80070f8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80070fc:	2b0a      	cmp	r3, #10
 80070fe:	f040 80ac 	bne.w	800725a <uavcan_register_Value_1_0_serialize_+0x105a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007102:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b00      	cmp	r3, #0
 800710c:	d006      	beq.n	800711c <uavcan_register_Value_1_0_serialize_+0xf1c>
 800710e:	4b9f      	ldr	r3, [pc, #636]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 8007110:	4a99      	ldr	r2, [pc, #612]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007112:	f240 1185 	movw	r1, #389	; 0x185
 8007116:	4899      	ldr	r0, [pc, #612]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007118:	f007 fcfc 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800711c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <uavcan_register_Value_1_0_serialize_+0xf36>
 8007128:	4b98      	ldr	r3, [pc, #608]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 800712a:	4a93      	ldr	r2, [pc, #588]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800712c:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8007130:	4892      	ldr	r0, [pc, #584]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007132:	f007 fcef 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8007136:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800713a:	2200      	movs	r2, #0
 800713c:	673b      	str	r3, [r7, #112]	; 0x70
 800713e:	677a      	str	r2, [r7, #116]	; 0x74
 8007140:	f640 0308 	movw	r3, #2056	; 0x808
 8007144:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007148:	4602      	mov	r2, r0
 800714a:	18d3      	adds	r3, r2, r3
 800714c:	66bb      	str	r3, [r7, #104]	; 0x68
 800714e:	460b      	mov	r3, r1
 8007150:	f143 0300 	adc.w	r3, r3, #0
 8007154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007156:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	2200      	movs	r2, #0
 800715e:	663b      	str	r3, [r7, #96]	; 0x60
 8007160:	667a      	str	r2, [r7, #100]	; 0x64
 8007162:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007166:	4623      	mov	r3, r4
 8007168:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800716c:	4602      	mov	r2, r0
 800716e:	4293      	cmp	r3, r2
 8007170:	462b      	mov	r3, r5
 8007172:	460a      	mov	r2, r1
 8007174:	4193      	sbcs	r3, r2
 8007176:	d206      	bcs.n	8007186 <uavcan_register_Value_1_0_serialize_+0xf86>
 8007178:	4b85      	ldr	r3, [pc, #532]	; (8007390 <uavcan_register_Value_1_0_serialize_+0x1190>)
 800717a:	4a7f      	ldr	r2, [pc, #508]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800717c:	f240 1187 	movw	r1, #391	; 0x187
 8007180:	487e      	ldr	r0, [pc, #504]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007182:	f007 fcc7 	bl	800eb14 <__assert_func>
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8007186:	f240 1301 	movw	r3, #257	; 0x101
 800718a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800718e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <uavcan_register_Value_1_0_serialize_+0xfa8>
 800719a:	4b7c      	ldr	r3, [pc, #496]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 800719c:	4a76      	ldr	r2, [pc, #472]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800719e:	f240 1189 	movw	r1, #393	; 0x189
 80071a2:	4876      	ldr	r0, [pc, #472]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80071a4:	f007 fcb6 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
 80071a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80071ac:	08da      	lsrs	r2, r3, #3
 80071ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80071b2:	4413      	add	r3, r2
 80071b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d206      	bcs.n	80071ca <uavcan_register_Value_1_0_serialize_+0xfca>
 80071bc:	4b75      	ldr	r3, [pc, #468]	; (8007394 <uavcan_register_Value_1_0_serialize_+0x1194>)
 80071be:	4a6e      	ldr	r2, [pc, #440]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80071c0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80071c4:	486d      	ldr	r0, [pc, #436]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80071c6:	f007 fca5 	bl	800eb14 <__assert_func>
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80071ca:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 80071ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80071d2:	08db      	lsrs	r3, r3, #3
 80071d4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80071d8:	4413      	add	r3, r2
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80071da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80071de:	4619      	mov	r1, r3
 80071e0:	f7fd fc88 	bl	8004af4 <uavcan_primitive_array_Natural16_1_0_serialize_>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
        if (_err10_ < 0)
 80071ea:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	da02      	bge.n	80071f8 <uavcan_register_Value_1_0_serialize_+0xff8>
        {
            return _err10_;
 80071f2:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 80071f6:	e3a6      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
 80071f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	2b07      	cmp	r3, #7
 8007200:	d806      	bhi.n	8007210 <uavcan_register_Value_1_0_serialize_+0x1010>
 8007202:	4b65      	ldr	r3, [pc, #404]	; (8007398 <uavcan_register_Value_1_0_serialize_+0x1198>)
 8007204:	4a5c      	ldr	r2, [pc, #368]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007206:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800720a:	485c      	ldr	r0, [pc, #368]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 800720c:	f007 fc82 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
 8007210:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	f640 0208 	movw	r2, #2056	; 0x808
 800721a:	4293      	cmp	r3, r2
 800721c:	d906      	bls.n	800722c <uavcan_register_Value_1_0_serialize_+0x102c>
 800721e:	4b5f      	ldr	r3, [pc, #380]	; (800739c <uavcan_register_Value_1_0_serialize_+0x119c>)
 8007220:	4a55      	ldr	r2, [pc, #340]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007222:	f240 1193 	movw	r1, #403	; 0x193
 8007226:	4855      	ldr	r0, [pc, #340]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007228:	f007 fc74 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 800722c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007236:	4413      	add	r3, r2
 8007238:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800723c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007246:	429a      	cmp	r2, r3
 8007248:	f240 8307 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 800724c:	4b4e      	ldr	r3, [pc, #312]	; (8007388 <uavcan_register_Value_1_0_serialize_+0x1188>)
 800724e:	4a4a      	ldr	r2, [pc, #296]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007250:	f240 1195 	movw	r1, #405	; 0x195
 8007254:	4849      	ldr	r0, [pc, #292]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007256:	f007 fc5d 	bl	800eb14 <__assert_func>
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 800725a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800725e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007262:	2b0b      	cmp	r3, #11
 8007264:	f040 80c6 	bne.w	80073f4 <uavcan_register_Value_1_0_serialize_+0x11f4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007268:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	2b00      	cmp	r3, #0
 8007272:	d006      	beq.n	8007282 <uavcan_register_Value_1_0_serialize_+0x1082>
 8007274:	4b45      	ldr	r3, [pc, #276]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 8007276:	4a40      	ldr	r2, [pc, #256]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007278:	f240 1199 	movw	r1, #409	; 0x199
 800727c:	483f      	ldr	r0, [pc, #252]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 800727e:	f007 fc49 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007282:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b00      	cmp	r3, #0
 800728c:	d006      	beq.n	800729c <uavcan_register_Value_1_0_serialize_+0x109c>
 800728e:	4b3f      	ldr	r3, [pc, #252]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 8007290:	4a39      	ldr	r2, [pc, #228]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007292:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8007296:	4839      	ldr	r0, [pc, #228]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007298:	f007 fc3c 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800729c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072a0:	2200      	movs	r2, #0
 80072a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80072a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80072a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80072aa:	460b      	mov	r3, r1
 80072ac:	f513 6301 	adds.w	r3, r3, #2064	; 0x810
 80072b0:	653b      	str	r3, [r7, #80]	; 0x50
 80072b2:	4613      	mov	r3, r2
 80072b4:	f143 0300 	adc.w	r3, r3, #0
 80072b8:	657b      	str	r3, [r7, #84]	; 0x54
 80072ba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	2200      	movs	r2, #0
 80072c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072c6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80072ca:	4623      	mov	r3, r4
 80072cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072d0:	4602      	mov	r2, r0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	462b      	mov	r3, r5
 80072d6:	460a      	mov	r2, r1
 80072d8:	4193      	sbcs	r3, r2
 80072da:	d206      	bcs.n	80072ea <uavcan_register_Value_1_0_serialize_+0x10ea>
 80072dc:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <uavcan_register_Value_1_0_serialize_+0x11a0>)
 80072de:	4a26      	ldr	r2, [pc, #152]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80072e0:	f240 119b 	movw	r1, #411	; 0x19b
 80072e4:	4825      	ldr	r0, [pc, #148]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 80072e6:	f007 fc15 	bl	800eb14 <__assert_func>
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 80072ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80072ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80072f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <uavcan_register_Value_1_0_serialize_+0x110c>
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <uavcan_register_Value_1_0_serialize_+0x118c>)
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007302:	f240 119d 	movw	r1, #413	; 0x19d
 8007306:	481d      	ldr	r0, [pc, #116]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007308:	f007 fc04 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
 800730c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007310:	08da      	lsrs	r2, r3, #3
 8007312:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007316:	4413      	add	r3, r2
 8007318:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800731c:	429a      	cmp	r2, r3
 800731e:	d206      	bcs.n	800732e <uavcan_register_Value_1_0_serialize_+0x112e>
 8007320:	4b20      	ldr	r3, [pc, #128]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x11a4>)
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007324:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8007328:	4814      	ldr	r0, [pc, #80]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 800732a:	f007 fbf3 	bl	800eb14 <__assert_func>
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 800732e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8007332:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007336:	08db      	lsrs	r3, r3, #3
 8007338:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800733c:	4413      	add	r3, r2
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 800733e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8007342:	4619      	mov	r1, r3
 8007344:	f7fe f984 	bl	8005650 <uavcan_primitive_array_Natural8_1_0_serialize_>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
        if (_err11_ < 0)
 800734e:	f997 3194 	ldrsb.w	r3, [r7, #404]	; 0x194
 8007352:	2b00      	cmp	r3, #0
 8007354:	da02      	bge.n	800735c <uavcan_register_Value_1_0_serialize_+0x115c>
        {
            return _err11_;
 8007356:	f997 3194 	ldrsb.w	r3, [r7, #404]	; 0x194
 800735a:	e2f4      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
 800735c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	2b0f      	cmp	r3, #15
 8007364:	d822      	bhi.n	80073ac <uavcan_register_Value_1_0_serialize_+0x11ac>
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x11a8>)
 8007368:	4a03      	ldr	r2, [pc, #12]	; (8007378 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800736a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800736e:	4803      	ldr	r0, [pc, #12]	; (800737c <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007370:	f007 fbd0 	bl	800eb14 <__assert_func>
 8007374:	0801295c 	.word	0x0801295c
 8007378:	080140a8 	.word	0x080140a8
 800737c:	08012508 	.word	0x08012508
 8007380:	08012994 	.word	0x08012994
 8007384:	080129b4 	.word	0x080129b4
 8007388:	080119bc 	.word	0x080119bc
 800738c:	08011768 	.word	0x08011768
 8007390:	08011d2c 	.word	0x08011d2c
 8007394:	080129d4 	.word	0x080129d4
 8007398:	08012a0c 	.word	0x08012a0c
 800739c:	08012a2c 	.word	0x08012a2c
 80073a0:	08011e28 	.word	0x08011e28
 80073a4:	08012a50 	.word	0x08012a50
 80073a8:	08012a88 	.word	0x08012a88
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
 80073ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80073b6:	d906      	bls.n	80073c6 <uavcan_register_Value_1_0_serialize_+0x11c6>
 80073b8:	4bc1      	ldr	r3, [pc, #772]	; (80076c0 <uavcan_register_Value_1_0_serialize_+0x14c0>)
 80073ba:	4ac2      	ldr	r2, [pc, #776]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80073bc:	f240 11a7 	movw	r1, #423	; 0x1a7
 80073c0:	48c1      	ldr	r0, [pc, #772]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80073c2:	f007 fba7 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 80073c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80073d0:	4413      	add	r3, r2
 80073d2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80073d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	f240 823a 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 80073e6:	4bb9      	ldr	r3, [pc, #740]	; (80076cc <uavcan_register_Value_1_0_serialize_+0x14cc>)
 80073e8:	4ab6      	ldr	r2, [pc, #728]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80073ea:	f240 11a9 	movw	r1, #425	; 0x1a9
 80073ee:	48b6      	ldr	r0, [pc, #728]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80073f0:	f007 fb90 	bl	800eb14 <__assert_func>
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80073f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80073f8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80073fc:	2b0c      	cmp	r3, #12
 80073fe:	f040 80ac 	bne.w	800755a <uavcan_register_Value_1_0_serialize_+0x135a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007402:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d006      	beq.n	800741c <uavcan_register_Value_1_0_serialize_+0x121c>
 800740e:	4bb0      	ldr	r3, [pc, #704]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 8007410:	4aac      	ldr	r2, [pc, #688]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007412:	f240 11ad 	movw	r1, #429	; 0x1ad
 8007416:	48ac      	ldr	r0, [pc, #688]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007418:	f007 fb7c 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800741c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <uavcan_register_Value_1_0_serialize_+0x1236>
 8007428:	4ba9      	ldr	r3, [pc, #676]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 800742a:	4aa6      	ldr	r2, [pc, #664]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800742c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007430:	48a5      	ldr	r0, [pc, #660]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007432:	f007 fb6f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8007436:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800743a:	2200      	movs	r2, #0
 800743c:	643b      	str	r3, [r7, #64]	; 0x40
 800743e:	647a      	str	r2, [r7, #68]	; 0x44
 8007440:	f640 0308 	movw	r3, #2056	; 0x808
 8007444:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007448:	4602      	mov	r2, r0
 800744a:	18d3      	adds	r3, r2, r3
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
 800744e:	460b      	mov	r3, r1
 8007450:	f143 0300 	adc.w	r3, r3, #0
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007456:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	2200      	movs	r2, #0
 800745e:	633b      	str	r3, [r7, #48]	; 0x30
 8007460:	637a      	str	r2, [r7, #52]	; 0x34
 8007462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007466:	4623      	mov	r3, r4
 8007468:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800746c:	4602      	mov	r2, r0
 800746e:	4293      	cmp	r3, r2
 8007470:	462b      	mov	r3, r5
 8007472:	460a      	mov	r2, r1
 8007474:	4193      	sbcs	r3, r2
 8007476:	d206      	bcs.n	8007486 <uavcan_register_Value_1_0_serialize_+0x1286>
 8007478:	4b96      	ldr	r3, [pc, #600]	; (80076d4 <uavcan_register_Value_1_0_serialize_+0x14d4>)
 800747a:	4a92      	ldr	r2, [pc, #584]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800747c:	f240 11af 	movw	r1, #431	; 0x1af
 8007480:	4891      	ldr	r0, [pc, #580]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007482:	f007 fb47 	bl	800eb14 <__assert_func>
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8007486:	f240 1301 	movw	r3, #257	; 0x101
 800748a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800748e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <uavcan_register_Value_1_0_serialize_+0x12a8>
 800749a:	4b8d      	ldr	r3, [pc, #564]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 800749c:	4a89      	ldr	r2, [pc, #548]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800749e:	f240 11b1 	movw	r1, #433	; 0x1b1
 80074a2:	4889      	ldr	r0, [pc, #548]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80074a4:	f007 fb36 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
 80074a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80074ac:	08da      	lsrs	r2, r3, #3
 80074ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80074b2:	4413      	add	r3, r2
 80074b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d206      	bcs.n	80074ca <uavcan_register_Value_1_0_serialize_+0x12ca>
 80074bc:	4b86      	ldr	r3, [pc, #536]	; (80076d8 <uavcan_register_Value_1_0_serialize_+0x14d8>)
 80074be:	4a81      	ldr	r2, [pc, #516]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80074c0:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80074c4:	4880      	ldr	r0, [pc, #512]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80074c6:	f007 fb25 	bl	800eb14 <__assert_func>
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 80074ca:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 80074ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80074d8:	4413      	add	r3, r2
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 80074da:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80074de:	4619      	mov	r1, r3
 80074e0:	f7fb fc0a 	bl	8002cf8 <uavcan_primitive_array_Real64_1_0_serialize_>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
        if (_err12_ < 0)
 80074ea:	f997 3195 	ldrsb.w	r3, [r7, #405]	; 0x195
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da02      	bge.n	80074f8 <uavcan_register_Value_1_0_serialize_+0x12f8>
        {
            return _err12_;
 80074f2:	f997 3195 	ldrsb.w	r3, [r7, #405]	; 0x195
 80074f6:	e226      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
 80074f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	2b07      	cmp	r3, #7
 8007500:	d806      	bhi.n	8007510 <uavcan_register_Value_1_0_serialize_+0x1310>
 8007502:	4b76      	ldr	r3, [pc, #472]	; (80076dc <uavcan_register_Value_1_0_serialize_+0x14dc>)
 8007504:	4a6f      	ldr	r2, [pc, #444]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007506:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800750a:	486f      	ldr	r0, [pc, #444]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800750c:	f007 fb02 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
 8007510:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	f640 0208 	movw	r2, #2056	; 0x808
 800751a:	4293      	cmp	r3, r2
 800751c:	d906      	bls.n	800752c <uavcan_register_Value_1_0_serialize_+0x132c>
 800751e:	4b70      	ldr	r3, [pc, #448]	; (80076e0 <uavcan_register_Value_1_0_serialize_+0x14e0>)
 8007520:	4a68      	ldr	r2, [pc, #416]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007522:	f240 11bb 	movw	r1, #443	; 0x1bb
 8007526:	4868      	ldr	r0, [pc, #416]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007528:	f007 faf4 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 800752c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007536:	4413      	add	r3, r2
 8007538:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800753c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007546:	429a      	cmp	r2, r3
 8007548:	f240 8187 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 800754c:	4b5f      	ldr	r3, [pc, #380]	; (80076cc <uavcan_register_Value_1_0_serialize_+0x14cc>)
 800754e:	4a5d      	ldr	r2, [pc, #372]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007550:	f240 11bd 	movw	r1, #445	; 0x1bd
 8007554:	485c      	ldr	r0, [pc, #368]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007556:	f007 fadd 	bl	800eb14 <__assert_func>
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 800755a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800755e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007562:	2b0d      	cmp	r3, #13
 8007564:	f040 80c4 	bne.w	80076f0 <uavcan_register_Value_1_0_serialize_+0x14f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007568:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <uavcan_register_Value_1_0_serialize_+0x1382>
 8007574:	4b56      	ldr	r3, [pc, #344]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 8007576:	4a53      	ldr	r2, [pc, #332]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007578:	f240 11c1 	movw	r1, #449	; 0x1c1
 800757c:	4852      	ldr	r0, [pc, #328]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800757e:	f007 fac9 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007582:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d006      	beq.n	800759c <uavcan_register_Value_1_0_serialize_+0x139c>
 800758e:	4b50      	ldr	r3, [pc, #320]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 8007590:	4a4c      	ldr	r2, [pc, #304]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007592:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8007596:	484c      	ldr	r0, [pc, #304]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007598:	f007 fabc 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 800759c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80075a0:	2200      	movs	r2, #0
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075a6:	f640 0308 	movw	r3, #2056	; 0x808
 80075aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075ae:	4602      	mov	r2, r0
 80075b0:	18d3      	adds	r3, r2, r3
 80075b2:	623b      	str	r3, [r7, #32]
 80075b4:	460b      	mov	r3, r1
 80075b6:	f143 0300 	adc.w	r3, r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
 80075bc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	2200      	movs	r2, #0
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	61fa      	str	r2, [r7, #28]
 80075c8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80075cc:	4623      	mov	r3, r4
 80075ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075d2:	4602      	mov	r2, r0
 80075d4:	4293      	cmp	r3, r2
 80075d6:	462b      	mov	r3, r5
 80075d8:	460a      	mov	r2, r1
 80075da:	4193      	sbcs	r3, r2
 80075dc:	d206      	bcs.n	80075ec <uavcan_register_Value_1_0_serialize_+0x13ec>
 80075de:	4b3d      	ldr	r3, [pc, #244]	; (80076d4 <uavcan_register_Value_1_0_serialize_+0x14d4>)
 80075e0:	4a38      	ldr	r2, [pc, #224]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80075e2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80075e6:	4838      	ldr	r0, [pc, #224]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80075e8:	f007 fa94 	bl	800eb14 <__assert_func>
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 80075ec:	f240 1301 	movw	r3, #257	; 0x101
 80075f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80075f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <uavcan_register_Value_1_0_serialize_+0x140e>
 8007600:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <uavcan_register_Value_1_0_serialize_+0x14d0>)
 8007602:	4a30      	ldr	r2, [pc, #192]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007604:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007608:	482f      	ldr	r0, [pc, #188]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800760a:	f007 fa83 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
 800760e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007612:	08da      	lsrs	r2, r3, #3
 8007614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007618:	4413      	add	r3, r2
 800761a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800761e:	429a      	cmp	r2, r3
 8007620:	d206      	bcs.n	8007630 <uavcan_register_Value_1_0_serialize_+0x1430>
 8007622:	4b30      	ldr	r3, [pc, #192]	; (80076e4 <uavcan_register_Value_1_0_serialize_+0x14e4>)
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007626:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800762a:	4827      	ldr	r0, [pc, #156]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800762c:	f007 fa72 	bl	800eb14 <__assert_func>
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8007630:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8007634:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007638:	08db      	lsrs	r3, r3, #3
 800763a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800763e:	4413      	add	r3, r2
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8007640:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8007644:	4619      	mov	r1, r3
 8007646:	f7fe fbfb 	bl	8005e40 <uavcan_primitive_array_Real32_1_0_serialize_>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
        if (_err13_ < 0)
 8007650:	f997 3196 	ldrsb.w	r3, [r7, #406]	; 0x196
 8007654:	2b00      	cmp	r3, #0
 8007656:	da02      	bge.n	800765e <uavcan_register_Value_1_0_serialize_+0x145e>
        {
            return _err13_;
 8007658:	f997 3196 	ldrsb.w	r3, [r7, #406]	; 0x196
 800765c:	e173      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
 800765e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	2b07      	cmp	r3, #7
 8007666:	d806      	bhi.n	8007676 <uavcan_register_Value_1_0_serialize_+0x1476>
 8007668:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <uavcan_register_Value_1_0_serialize_+0x14e8>)
 800766a:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800766c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8007670:	4815      	ldr	r0, [pc, #84]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007672:	f007 fa4f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
 8007676:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	f640 0208 	movw	r2, #2056	; 0x808
 8007680:	4293      	cmp	r3, r2
 8007682:	d906      	bls.n	8007692 <uavcan_register_Value_1_0_serialize_+0x1492>
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <uavcan_register_Value_1_0_serialize_+0x14ec>)
 8007686:	4a0f      	ldr	r2, [pc, #60]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007688:	f240 11cf 	movw	r1, #463	; 0x1cf
 800768c:	480e      	ldr	r0, [pc, #56]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800768e:	f007 fa41 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8007692:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800769c:	4413      	add	r3, r2
 800769e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80076a2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f240 80d4 	bls.w	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <uavcan_register_Value_1_0_serialize_+0x14cc>)
 80076b4:	4a03      	ldr	r2, [pc, #12]	; (80076c4 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80076b6:	f240 11d1 	movw	r1, #465	; 0x1d1
 80076ba:	4803      	ldr	r0, [pc, #12]	; (80076c8 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80076bc:	f007 fa2a 	bl	800eb14 <__assert_func>
 80076c0:	08012aa8 	.word	0x08012aa8
 80076c4:	080140a8 	.word	0x080140a8
 80076c8:	08012508 	.word	0x08012508
 80076cc:	080119bc 	.word	0x080119bc
 80076d0:	08011768 	.word	0x08011768
 80076d4:	08011d2c 	.word	0x08011d2c
 80076d8:	08012acc 	.word	0x08012acc
 80076dc:	08012b04 	.word	0x08012b04
 80076e0:	08012b24 	.word	0x08012b24
 80076e4:	08012b48 	.word	0x08012b48
 80076e8:	08012b80 	.word	0x08012b80
 80076ec:	08012ba0 	.word	0x08012ba0
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80076f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80076f4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80076f8:	2b0e      	cmp	r3, #14
 80076fa:	f040 80ab 	bne.w	8007854 <uavcan_register_Value_1_0_serialize_+0x1654>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80076fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <uavcan_register_Value_1_0_serialize_+0x1518>
 800770a:	4b92      	ldr	r3, [pc, #584]	; (8007954 <uavcan_register_Value_1_0_serialize_+0x1754>)
 800770c:	4a92      	ldr	r2, [pc, #584]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800770e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8007712:	4892      	ldr	r0, [pc, #584]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007714:	f007 f9fe 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007718:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <uavcan_register_Value_1_0_serialize_+0x1532>
 8007724:	4b8b      	ldr	r3, [pc, #556]	; (8007954 <uavcan_register_Value_1_0_serialize_+0x1754>)
 8007726:	4a8c      	ldr	r2, [pc, #560]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007728:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800772c:	488b      	ldr	r0, [pc, #556]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 800772e:	f007 f9f1 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8007732:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007736:	2200      	movs	r2, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	617a      	str	r2, [r7, #20]
 800773c:	f640 0308 	movw	r3, #2056	; 0x808
 8007740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007744:	4602      	mov	r2, r0
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	460b      	mov	r3, r1
 800774c:	f143 0300 	adc.w	r3, r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	2200      	movs	r2, #0
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007762:	4623      	mov	r3, r4
 8007764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007768:	4602      	mov	r2, r0
 800776a:	4293      	cmp	r3, r2
 800776c:	462b      	mov	r3, r5
 800776e:	460a      	mov	r2, r1
 8007770:	4193      	sbcs	r3, r2
 8007772:	d206      	bcs.n	8007782 <uavcan_register_Value_1_0_serialize_+0x1582>
 8007774:	4b7a      	ldr	r3, [pc, #488]	; (8007960 <uavcan_register_Value_1_0_serialize_+0x1760>)
 8007776:	4a78      	ldr	r2, [pc, #480]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007778:	f240 11d7 	movw	r1, #471	; 0x1d7
 800777c:	4877      	ldr	r0, [pc, #476]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 800777e:	f007 f9c9 	bl	800eb14 <__assert_func>
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8007782:	f240 1301 	movw	r3, #257	; 0x101
 8007786:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800778a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <uavcan_register_Value_1_0_serialize_+0x15a4>
 8007796:	4b6f      	ldr	r3, [pc, #444]	; (8007954 <uavcan_register_Value_1_0_serialize_+0x1754>)
 8007798:	4a6f      	ldr	r2, [pc, #444]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800779a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800779e:	486f      	ldr	r0, [pc, #444]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 80077a0:	f007 f9b8 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
 80077a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80077a8:	08da      	lsrs	r2, r3, #3
 80077aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80077ae:	4413      	add	r3, r2
 80077b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d206      	bcs.n	80077c6 <uavcan_register_Value_1_0_serialize_+0x15c6>
 80077b8:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <uavcan_register_Value_1_0_serialize_+0x1764>)
 80077ba:	4a67      	ldr	r2, [pc, #412]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80077bc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80077c0:	4866      	ldr	r0, [pc, #408]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 80077c2:	f007 f9a7 	bl	800eb14 <__assert_func>
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80077c6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 80077ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80077ce:	08db      	lsrs	r3, r3, #3
 80077d0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80077d4:	4413      	add	r3, r2
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80077d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80077da:	4619      	mov	r1, r3
 80077dc:	f7fe f91c 	bl	8005a18 <uavcan_primitive_array_Real16_1_0_serialize_>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
        if (_err14_ < 0)
 80077e6:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da02      	bge.n	80077f4 <uavcan_register_Value_1_0_serialize_+0x15f4>
        {
            return _err14_;
 80077ee:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 80077f2:	e0a8      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
 80077f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	2b07      	cmp	r3, #7
 80077fc:	d806      	bhi.n	800780c <uavcan_register_Value_1_0_serialize_+0x160c>
 80077fe:	4b5a      	ldr	r3, [pc, #360]	; (8007968 <uavcan_register_Value_1_0_serialize_+0x1768>)
 8007800:	4a55      	ldr	r2, [pc, #340]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007802:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007806:	4855      	ldr	r0, [pc, #340]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007808:	f007 f984 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
 800780c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	f640 0208 	movw	r2, #2056	; 0x808
 8007816:	4293      	cmp	r3, r2
 8007818:	d906      	bls.n	8007828 <uavcan_register_Value_1_0_serialize_+0x1628>
 800781a:	4b54      	ldr	r3, [pc, #336]	; (800796c <uavcan_register_Value_1_0_serialize_+0x176c>)
 800781c:	4a4e      	ldr	r2, [pc, #312]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800781e:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007822:	484e      	ldr	r0, [pc, #312]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007824:	f007 f976 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8007828:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007832:	4413      	add	r3, r2
 8007834:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007838:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007842:	429a      	cmp	r2, r3
 8007844:	d909      	bls.n	800785a <uavcan_register_Value_1_0_serialize_+0x165a>
 8007846:	4b4a      	ldr	r3, [pc, #296]	; (8007970 <uavcan_register_Value_1_0_serialize_+0x1770>)
 8007848:	4a43      	ldr	r2, [pc, #268]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800784a:	f240 11e5 	movw	r1, #485	; 0x1e5
 800784e:	4843      	ldr	r0, [pc, #268]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007850:	f007 f960 	bl	800eb14 <__assert_func>
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8007854:	f06f 030a 	mvn.w	r3, #10
 8007858:	e075      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800785a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b00      	cmp	r3, #0
 8007864:	d043      	beq.n	80078ee <uavcan_register_Value_1_0_serialize_+0x16ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8007866:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f1c3 0308 	rsb	r3, r3, #8
 8007876:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
        NUNAVUT_ASSERT(_pad0_ > 0);
 800787a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <uavcan_register_Value_1_0_serialize_+0x1690>
 8007882:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <uavcan_register_Value_1_0_serialize_+0x1774>)
 8007884:	4a34      	ldr	r2, [pc, #208]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007886:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800788a:	4834      	ldr	r0, [pc, #208]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 800788c:	f007 f942 	bl	800eb14 <__assert_func>
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8007890:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	f04f 0300 	mov.w	r3, #0
 800789e:	e9cd 2300 	strd	r2, r3, [sp]
 80078a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80078a6:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80078aa:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80078ae:	f7f9 fcdb 	bl	8001268 <nunavutSetUxx>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
        if (_err15_ < 0)
 80078b8:	f997 3187 	ldrsb.w	r3, [r7, #391]	; 0x187
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da02      	bge.n	80078c6 <uavcan_register_Value_1_0_serialize_+0x16c6>
        {
            return _err15_;
 80078c0:	f997 3187 	ldrsb.w	r3, [r7, #391]	; 0x187
 80078c4:	e03f      	b.n	8007946 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        offset_bits += _pad0_;
 80078c6:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80078ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80078ce:	4413      	add	r3, r2
 80078d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80078d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <uavcan_register_Value_1_0_serialize_+0x16ee>
 80078e0:	4b1c      	ldr	r3, [pc, #112]	; (8007954 <uavcan_register_Value_1_0_serialize_+0x1754>)
 80078e2:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80078e4:	f240 11f5 	movw	r1, #501	; 0x1f5
 80078e8:	481c      	ldr	r0, [pc, #112]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 80078ea:	f007 f913 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80078ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80078f2:	2b07      	cmp	r3, #7
 80078f4:	d806      	bhi.n	8007904 <uavcan_register_Value_1_0_serialize_+0x1704>
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <uavcan_register_Value_1_0_serialize_+0x1778>)
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80078fa:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80078fe:	4817      	ldr	r0, [pc, #92]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007900:	f007 f908 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);
 8007904:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007908:	f640 0218 	movw	r2, #2072	; 0x818
 800790c:	4293      	cmp	r3, r2
 800790e:	d906      	bls.n	800791e <uavcan_register_Value_1_0_serialize_+0x171e>
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <uavcan_register_Value_1_0_serialize_+0x177c>)
 8007912:	4a11      	ldr	r2, [pc, #68]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007914:	f240 11f9 	movw	r1, #505	; 0x1f9
 8007918:	4810      	ldr	r0, [pc, #64]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 800791a:	f007 f8fb 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800791e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <uavcan_register_Value_1_0_serialize_+0x1738>
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <uavcan_register_Value_1_0_serialize_+0x1754>)
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800792e:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8007932:	480a      	ldr	r0, [pc, #40]	; (800795c <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007934:	f007 f8ee 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8007938:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800793c:	08da      	lsrs	r2, r3, #3
 800793e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007942:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800794c:	46bd      	mov	sp, r7
 800794e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007952:	bf00      	nop
 8007954:	08011768 	.word	0x08011768
 8007958:	080140a8 	.word	0x080140a8
 800795c:	08012508 	.word	0x08012508
 8007960:	08011d2c 	.word	0x08011d2c
 8007964:	08012bc4 	.word	0x08012bc4
 8007968:	08012bfc 	.word	0x08012bfc
 800796c:	08012c1c 	.word	0x08012c1c
 8007970:	080119bc 	.word	0x080119bc
 8007974:	08011860 	.word	0x08011860
 8007978:	0801186c 	.word	0x0801186c
 800797c:	08012c40 	.word	0x08012c40

08007980 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b09a      	sub	sp, #104	; 0x68
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <uavcan_register_Value_1_0_deserialize_+0x26>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <uavcan_register_Value_1_0_deserialize_+0x26>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d107      	bne.n	80079ae <uavcan_register_Value_1_0_deserialize_+0x2e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <uavcan_register_Value_1_0_deserialize_+0x2e>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80079a6:	f06f 0301 	mvn.w	r3, #1
 80079aa:	f000 bce9 	b.w	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
    }
    if (buffer == NULL)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <uavcan_register_Value_1_0_deserialize_+0x38>
    {
        buffer = (const uint8_t*)"";
 80079b4:	4bab      	ldr	r3, [pc, #684]	; (8007c64 <uavcan_register_Value_1_0_deserialize_+0x2e4>)
 80079b6:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80079be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	667b      	str	r3, [r7, #100]	; 0x64
    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80079c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ca:	3308      	adds	r3, #8
 80079cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d308      	bcc.n	80079e4 <uavcan_register_Value_1_0_deserialize_+0x64>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 80079d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d4:	08db      	lsrs	r3, r3, #3
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80079e2:	e003      	b.n	80079ec <uavcan_register_Value_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->_tag_ = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 80079ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ee:	3308      	adds	r3, #8
 80079f0:	667b      	str	r3, [r7, #100]	; 0x64
    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d149      	bne.n	8007a90 <uavcan_register_Value_1_0_deserialize_+0x110>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80079fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d006      	beq.n	8007a14 <uavcan_register_Value_1_0_deserialize_+0x94>
 8007a06:	4b98      	ldr	r3, [pc, #608]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a08:	4a98      	ldr	r2, [pc, #608]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a0a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8007a0e:	4898      	ldr	r0, [pc, #608]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a10:	f007 f880 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <uavcan_register_Value_1_0_deserialize_+0xac>
 8007a1e:	4b92      	ldr	r3, [pc, #584]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a20:	4a92      	ldr	r2, [pc, #584]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a22:	f240 212d 	movw	r1, #557	; 0x22d
 8007a26:	4892      	ldr	r0, [pc, #584]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a28:	f007 f874 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f9 fa66 	bl	8000f04 <nunavutChooseMin>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d006      	beq.n	8007a58 <uavcan_register_Value_1_0_deserialize_+0xd8>
 8007a4a:	4b87      	ldr	r3, [pc, #540]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a4c:	4a87      	ldr	r2, [pc, #540]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a4e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007a52:	4887      	ldr	r0, [pc, #540]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a54:	f007 f85e 	bl	800eb14 <__assert_func>
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8007a58:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8007a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a5c:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7fb fb42 	bl	80030f0 <uavcan_primitive_Empty_1_0_deserialize_>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 8007a72:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da03      	bge.n	8007a82 <uavcan_register_Value_1_0_deserialize_+0x102>
            {
                return _err16_;
 8007a7a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8007a7e:	f000 bc7f 	b.w	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8007a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a88:	4413      	add	r3, r2
 8007a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8007a8c:	f000 bc52 	b.w	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d149      	bne.n	8007b2e <uavcan_register_Value_1_0_deserialize_+0x1ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <uavcan_register_Value_1_0_deserialize_+0x132>
 8007aa4:	4b70      	ldr	r3, [pc, #448]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007aa6:	4a71      	ldr	r2, [pc, #452]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007aa8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8007aac:	4870      	ldr	r0, [pc, #448]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007aae:	f007 f831 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <uavcan_register_Value_1_0_deserialize_+0x14a>
 8007abc:	4b6a      	ldr	r3, [pc, #424]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007abe:	4a6b      	ldr	r2, [pc, #428]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007ac0:	f240 213d 	movw	r1, #573	; 0x23d
 8007ac4:	486a      	ldr	r0, [pc, #424]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007ac6:	f007 f825 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7f9 fa17 	bl	8000f04 <nunavutChooseMin>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <uavcan_register_Value_1_0_deserialize_+0x176>
 8007ae8:	4b5f      	ldr	r3, [pc, #380]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007aea:	4a60      	ldr	r2, [pc, #384]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007aec:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007af0:	485f      	ldr	r0, [pc, #380]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007af2:	f007 f80f 	bl	800eb14 <__assert_func>
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8007af6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8007af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afa:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007b04:	4619      	mov	r1, r3
 8007b06:	f7fb fc4d 	bl	80033a4 <uavcan_primitive_String_1_0_deserialize_>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8007b10:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da03      	bge.n	8007b20 <uavcan_register_Value_1_0_deserialize_+0x1a0>
            {
                return _err17_;
 8007b18:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8007b1c:	f000 bc30 	b.w	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8007b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b26:	4413      	add	r3, r2
 8007b28:	667b      	str	r3, [r7, #100]	; 0x64
 8007b2a:	f000 bc03 	b.w	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d147      	bne.n	8007bc8 <uavcan_register_Value_1_0_deserialize_+0x248>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d006      	beq.n	8007b50 <uavcan_register_Value_1_0_deserialize_+0x1d0>
 8007b42:	4b49      	ldr	r3, [pc, #292]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b44:	4a49      	ldr	r2, [pc, #292]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b46:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8007b4a:	4849      	ldr	r0, [pc, #292]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b4c:	f006 ffe2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <uavcan_register_Value_1_0_deserialize_+0x1e8>
 8007b5a:	4b43      	ldr	r3, [pc, #268]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b5c:	4a43      	ldr	r2, [pc, #268]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b5e:	f240 214d 	movw	r1, #589	; 0x24d
 8007b62:	4843      	ldr	r0, [pc, #268]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b64:	f006 ffd6 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	08db      	lsrs	r3, r3, #3
 8007b6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f9 f9c8 	bl	8000f04 <nunavutChooseMin>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <uavcan_register_Value_1_0_deserialize_+0x214>
 8007b86:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b88:	4a38      	ldr	r2, [pc, #224]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b8a:	f44f 7114 	mov.w	r1, #592	; 0x250
 8007b8e:	4838      	ldr	r0, [pc, #224]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b90:	f006 ffc0 	bl	800eb14 <__assert_func>
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8007b94:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8007b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b98:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f7fb fde2 	bl	800376c <uavcan_primitive_Unstructured_1_0_deserialize_>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8007bae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	da02      	bge.n	8007bbc <uavcan_register_Value_1_0_deserialize_+0x23c>
            {
                return _err18_;
 8007bb6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bba:	e3e1      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bc2:	4413      	add	r3, r2
 8007bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bc6:	e3b5      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d150      	bne.n	8007c74 <uavcan_register_Value_1_0_deserialize_+0x2f4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <uavcan_register_Value_1_0_deserialize_+0x26a>
 8007bdc:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007bde:	4a23      	ldr	r2, [pc, #140]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007be0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8007be4:	4822      	ldr	r0, [pc, #136]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007be6:	f006 ff95 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <uavcan_register_Value_1_0_deserialize_+0x282>
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007bf6:	4a1d      	ldr	r2, [pc, #116]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007bf8:	f240 215d 	movw	r1, #605	; 0x25d
 8007bfc:	481c      	ldr	r0, [pc, #112]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007bfe:	f006 ff89 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7f9 f97b 	bl	8000f04 <nunavutChooseMin>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <uavcan_register_Value_1_0_deserialize_+0x2ae>
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007c22:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007c24:	f44f 7118 	mov.w	r1, #608	; 0x260
 8007c28:	4811      	ldr	r0, [pc, #68]	; (8007c70 <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007c2a:	f006 ff73 	bl	800eb14 <__assert_func>
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8007c2e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8007c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c32:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	4413      	add	r3, r2
 8007c38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f7fb ff3b 	bl	8003ab8 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 8007c48:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da02      	bge.n	8007c56 <uavcan_register_Value_1_0_deserialize_+0x2d6>
            {
                return _err19_;
 8007c50:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8007c54:	e394      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8007c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c5c:	4413      	add	r3, r2
 8007c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c60:	e368      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
 8007c62:	bf00      	nop
 8007c64:	08011898 	.word	0x08011898
 8007c68:	08011768 	.word	0x08011768
 8007c6c:	08013c64 	.word	0x08013c64
 8007c70:	08012508 	.word	0x08012508
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d147      	bne.n	8007d0e <uavcan_register_Value_1_0_deserialize_+0x38e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d006      	beq.n	8007c96 <uavcan_register_Value_1_0_deserialize_+0x316>
 8007c88:	4bae      	ldr	r3, [pc, #696]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007c8a:	4aaf      	ldr	r2, [pc, #700]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007c8c:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007c90:	48ae      	ldr	r0, [pc, #696]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007c92:	f006 ff3f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <uavcan_register_Value_1_0_deserialize_+0x32e>
 8007ca0:	4ba8      	ldr	r3, [pc, #672]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007ca2:	4aa9      	ldr	r2, [pc, #676]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007ca4:	f240 216d 	movw	r1, #621	; 0x26d
 8007ca8:	48a8      	ldr	r0, [pc, #672]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007caa:	f006 ff33 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7f9 f925 	bl	8000f04 <nunavutChooseMin>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <uavcan_register_Value_1_0_deserialize_+0x35a>
 8007ccc:	4b9d      	ldr	r3, [pc, #628]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007cce:	4a9e      	ldr	r2, [pc, #632]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007cd0:	f44f 711c 	mov.w	r1, #624	; 0x270
 8007cd4:	489d      	ldr	r0, [pc, #628]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007cd6:	f006 ff1d 	bl	800eb14 <__assert_func>
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8007cda:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8007cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cde:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7fc fc73 	bl	80045d4 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8007cf4:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da02      	bge.n	8007d02 <uavcan_register_Value_1_0_deserialize_+0x382>
            {
                return _err20_;
 8007cfc:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8007d00:	e33e      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d08:	4413      	add	r3, r2
 8007d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8007d0c:	e312      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d147      	bne.n	8007da8 <uavcan_register_Value_1_0_deserialize_+0x428>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d006      	beq.n	8007d30 <uavcan_register_Value_1_0_deserialize_+0x3b0>
 8007d22:	4b88      	ldr	r3, [pc, #544]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d24:	4a88      	ldr	r2, [pc, #544]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d26:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007d2a:	4888      	ldr	r0, [pc, #544]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d2c:	f006 fef2 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <uavcan_register_Value_1_0_deserialize_+0x3c8>
 8007d3a:	4b82      	ldr	r3, [pc, #520]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d3c:	4a82      	ldr	r2, [pc, #520]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d3e:	f240 217d 	movw	r1, #637	; 0x27d
 8007d42:	4882      	ldr	r0, [pc, #520]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d44:	f006 fee6 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	08db      	lsrs	r3, r3, #3
 8007d4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f9 f8d8 	bl	8000f04 <nunavutChooseMin>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <uavcan_register_Value_1_0_deserialize_+0x3f4>
 8007d66:	4b77      	ldr	r3, [pc, #476]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d68:	4a77      	ldr	r2, [pc, #476]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d6a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d6e:	4877      	ldr	r0, [pc, #476]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d70:	f006 fed0 	bl	800eb14 <__assert_func>
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8007d74:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8007d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d78:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007d82:	4619      	mov	r1, r3
 8007d84:	f7fc fa46 	bl	8004214 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8007d8e:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da02      	bge.n	8007d9c <uavcan_register_Value_1_0_deserialize_+0x41c>
            {
                return _err21_;
 8007d96:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8007d9a:	e2f1      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007da2:	4413      	add	r3, r2
 8007da4:	667b      	str	r3, [r7, #100]	; 0x64
 8007da6:	e2c5      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d147      	bne.n	8007e42 <uavcan_register_Value_1_0_deserialize_+0x4c2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <uavcan_register_Value_1_0_deserialize_+0x44a>
 8007dbc:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007dbe:	4a62      	ldr	r2, [pc, #392]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007dc0:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8007dc4:	4861      	ldr	r0, [pc, #388]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007dc6:	f006 fea5 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <uavcan_register_Value_1_0_deserialize_+0x462>
 8007dd4:	4b5b      	ldr	r3, [pc, #364]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007dd6:	4a5c      	ldr	r2, [pc, #368]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007dd8:	f240 218d 	movw	r1, #653	; 0x28d
 8007ddc:	485b      	ldr	r0, [pc, #364]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007dde:	f006 fe99 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de4:	08db      	lsrs	r3, r3, #3
 8007de6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f9 f88b 	bl	8000f04 <nunavutChooseMin>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <uavcan_register_Value_1_0_deserialize_+0x48e>
 8007e00:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e02:	4a51      	ldr	r2, [pc, #324]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e04:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007e08:	4850      	ldr	r0, [pc, #320]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e0a:	f006 fe83 	bl	800eb14 <__assert_func>
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8007e0e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8007e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e12:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	4413      	add	r3, r2
 8007e18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f7fc f813 	bl	8003e48 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 8007e28:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	da02      	bge.n	8007e36 <uavcan_register_Value_1_0_deserialize_+0x4b6>
            {
                return _err22_;
 8007e30:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007e34:	e2a4      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e3c:	4413      	add	r3, r2
 8007e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e40:	e278      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007e48:	2b07      	cmp	r3, #7
 8007e4a:	d147      	bne.n	8007edc <uavcan_register_Value_1_0_deserialize_+0x55c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <uavcan_register_Value_1_0_deserialize_+0x4e4>
 8007e56:	4b3b      	ldr	r3, [pc, #236]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e58:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e5a:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8007e5e:	483b      	ldr	r0, [pc, #236]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e60:	f006 fe58 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d006      	beq.n	8007e7c <uavcan_register_Value_1_0_deserialize_+0x4fc>
 8007e6e:	4b35      	ldr	r3, [pc, #212]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e70:	4a35      	ldr	r2, [pc, #212]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e72:	f240 219d 	movw	r1, #669	; 0x29d
 8007e76:	4835      	ldr	r0, [pc, #212]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e78:	f006 fe4c 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f9 f83e 	bl	8000f04 <nunavutChooseMin>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <uavcan_register_Value_1_0_deserialize_+0x528>
 8007e9a:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e9c:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e9e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8007ea2:	482a      	ldr	r0, [pc, #168]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007ea4:	f006 fe36 	bl	800eb14 <__assert_func>
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8007ea8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8007eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eac:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f7fc fd72 	bl	80049a0 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8007ec2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da02      	bge.n	8007ed0 <uavcan_register_Value_1_0_deserialize_+0x550>
            {
                return _err23_;
 8007eca:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8007ece:	e257      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ed6:	4413      	add	r3, r2
 8007ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8007eda:	e22b      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d14e      	bne.n	8007f84 <uavcan_register_Value_1_0_deserialize_+0x604>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <uavcan_register_Value_1_0_deserialize_+0x57e>
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007ef4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8007ef8:	4814      	ldr	r0, [pc, #80]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007efa:	f006 fe0b 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <uavcan_register_Value_1_0_deserialize_+0x596>
 8007f08:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007f0a:	4a0f      	ldr	r2, [pc, #60]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007f0c:	f240 21ad 	movw	r1, #685	; 0x2ad
 8007f10:	480e      	ldr	r0, [pc, #56]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007f12:	f006 fdff 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f18:	08db      	lsrs	r3, r3, #3
 8007f1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7f8 fff1 	bl	8000f04 <nunavutChooseMin>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00d      	beq.n	8007f50 <uavcan_register_Value_1_0_deserialize_+0x5d0>
 8007f34:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007f36:	4a04      	ldr	r2, [pc, #16]	; (8007f48 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007f38:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8007f3c:	4803      	ldr	r0, [pc, #12]	; (8007f4c <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007f3e:	f006 fde9 	bl	800eb14 <__assert_func>
 8007f42:	bf00      	nop
 8007f44:	08011768 	.word	0x08011768
 8007f48:	08013c64 	.word	0x08013c64
 8007f4c:	08012508 	.word	0x08012508
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8007f50:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8007f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f54:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f7fd fac4 	bl	80054ec <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8007f6a:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	da02      	bge.n	8007f78 <uavcan_register_Value_1_0_deserialize_+0x5f8>
            {
                return _err24_;
 8007f72:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8007f76:	e203      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f7e:	4413      	add	r3, r2
 8007f80:	667b      	str	r3, [r7, #100]	; 0x64
 8007f82:	e1d7      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d147      	bne.n	800801e <uavcan_register_Value_1_0_deserialize_+0x69e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <uavcan_register_Value_1_0_deserialize_+0x626>
 8007f98:	4bae      	ldr	r3, [pc, #696]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8007f9a:	4aaf      	ldr	r2, [pc, #700]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8007f9c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007fa0:	48ae      	ldr	r0, [pc, #696]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8007fa2:	f006 fdb7 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <uavcan_register_Value_1_0_deserialize_+0x63e>
 8007fb0:	4ba8      	ldr	r3, [pc, #672]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8007fb2:	4aa9      	ldr	r2, [pc, #676]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8007fb4:	f240 21bd 	movw	r1, #701	; 0x2bd
 8007fb8:	48a8      	ldr	r0, [pc, #672]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8007fba:	f006 fdab 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc0:	08db      	lsrs	r3, r3, #3
 8007fc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 ff9d 	bl	8000f04 <nunavutChooseMin>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <uavcan_register_Value_1_0_deserialize_+0x66a>
 8007fdc:	4b9d      	ldr	r3, [pc, #628]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8007fde:	4a9e      	ldr	r2, [pc, #632]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8007fe0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8007fe4:	489d      	ldr	r0, [pc, #628]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8007fe6:	f006 fd95 	bl	800eb14 <__assert_func>
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8007fea:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8007fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fee:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7fd f897 	bl	800512c <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 8008004:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8008008:	2b00      	cmp	r3, #0
 800800a:	da02      	bge.n	8008012 <uavcan_register_Value_1_0_deserialize_+0x692>
            {
                return _err25_;
 800800c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8008010:	e1b6      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008018:	4413      	add	r3, r2
 800801a:	667b      	str	r3, [r7, #100]	; 0x64
 800801c:	e18a      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008024:	2b0a      	cmp	r3, #10
 8008026:	d147      	bne.n	80080b8 <uavcan_register_Value_1_0_deserialize_+0x738>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b00      	cmp	r3, #0
 8008030:	d006      	beq.n	8008040 <uavcan_register_Value_1_0_deserialize_+0x6c0>
 8008032:	4b88      	ldr	r3, [pc, #544]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008034:	4a88      	ldr	r2, [pc, #544]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008036:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800803a:	4888      	ldr	r0, [pc, #544]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800803c:	f006 fd6a 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d006      	beq.n	8008058 <uavcan_register_Value_1_0_deserialize_+0x6d8>
 800804a:	4b82      	ldr	r3, [pc, #520]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 800804c:	4a82      	ldr	r2, [pc, #520]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800804e:	f240 21cd 	movw	r1, #717	; 0x2cd
 8008052:	4882      	ldr	r0, [pc, #520]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008054:	f006 fd5e 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800805e:	4618      	mov	r0, r3
 8008060:	f7f8 ff50 	bl	8000f04 <nunavutChooseMin>
 8008064:	4602      	mov	r2, r0
 8008066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800806c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d006      	beq.n	8008084 <uavcan_register_Value_1_0_deserialize_+0x704>
 8008076:	4b77      	ldr	r3, [pc, #476]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008078:	4a77      	ldr	r2, [pc, #476]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800807a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800807e:	4877      	ldr	r0, [pc, #476]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008080:	f006 fd48 	bl	800eb14 <__assert_func>
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8008084:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8008086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008088:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	f107 0220 	add.w	r2, r7, #32
 8008092:	4619      	mov	r1, r3
 8008094:	f7fc fe64 	bl	8004d60 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 800809e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da02      	bge.n	80080ac <uavcan_register_Value_1_0_deserialize_+0x72c>
            {
                return _err26_;
 80080a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080aa:	e169      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080b2:	4413      	add	r3, r2
 80080b4:	667b      	str	r3, [r7, #100]	; 0x64
 80080b6:	e13d      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80080be:	2b0b      	cmp	r3, #11
 80080c0:	d147      	bne.n	8008152 <uavcan_register_Value_1_0_deserialize_+0x7d2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80080c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <uavcan_register_Value_1_0_deserialize_+0x75a>
 80080cc:	4b61      	ldr	r3, [pc, #388]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80080ce:	4a62      	ldr	r2, [pc, #392]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80080d0:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80080d4:	4861      	ldr	r0, [pc, #388]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80080d6:	f006 fd1d 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80080da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d006      	beq.n	80080f2 <uavcan_register_Value_1_0_deserialize_+0x772>
 80080e4:	4b5b      	ldr	r3, [pc, #364]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80080e6:	4a5c      	ldr	r2, [pc, #368]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80080e8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80080ec:	485b      	ldr	r0, [pc, #364]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80080ee:	f006 fd11 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80080f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f4:	08db      	lsrs	r3, r3, #3
 80080f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f8 ff03 	bl	8000f04 <nunavutChooseMin>
 80080fe:	4602      	mov	r2, r0
 8008100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	2b00      	cmp	r3, #0
 800810e:	d006      	beq.n	800811e <uavcan_register_Value_1_0_deserialize_+0x79e>
 8008110:	4b50      	ldr	r3, [pc, #320]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008112:	4a51      	ldr	r2, [pc, #324]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008114:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8008118:	4850      	ldr	r0, [pc, #320]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800811a:	f006 fcfb 	bl	800eb14 <__assert_func>
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800811e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8008120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008122:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4413      	add	r3, r2
 8008128:	f107 021c 	add.w	r2, r7, #28
 800812c:	4619      	mov	r1, r3
 800812e:	f7fd fbc1 	bl	80058b4 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 8008138:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800813c:	2b00      	cmp	r3, #0
 800813e:	da02      	bge.n	8008146 <uavcan_register_Value_1_0_deserialize_+0x7c6>
            {
                return _err27_;
 8008140:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8008144:	e11c      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800814c:	4413      	add	r3, r2
 800814e:	667b      	str	r3, [r7, #100]	; 0x64
 8008150:	e0f0      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008158:	2b0c      	cmp	r3, #12
 800815a:	d147      	bne.n	80081ec <uavcan_register_Value_1_0_deserialize_+0x86c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800815c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d006      	beq.n	8008174 <uavcan_register_Value_1_0_deserialize_+0x7f4>
 8008166:	4b3b      	ldr	r3, [pc, #236]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008168:	4a3b      	ldr	r2, [pc, #236]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800816a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800816e:	483b      	ldr	r0, [pc, #236]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008170:	f006 fcd0 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d006      	beq.n	800818c <uavcan_register_Value_1_0_deserialize_+0x80c>
 800817e:	4b35      	ldr	r3, [pc, #212]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008180:	4a35      	ldr	r2, [pc, #212]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008182:	f240 21ed 	movw	r1, #749	; 0x2ed
 8008186:	4835      	ldr	r0, [pc, #212]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008188:	f006 fcc4 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800818c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818e:	08db      	lsrs	r3, r3, #3
 8008190:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008192:	4618      	mov	r0, r3
 8008194:	f7f8 feb6 	bl	8000f04 <nunavutChooseMin>
 8008198:	4602      	mov	r2, r0
 800819a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d006      	beq.n	80081b8 <uavcan_register_Value_1_0_deserialize_+0x838>
 80081aa:	4b2a      	ldr	r3, [pc, #168]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80081ac:	4a2a      	ldr	r2, [pc, #168]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80081ae:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80081b2:	482a      	ldr	r0, [pc, #168]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80081b4:	f006 fcae 	bl	800eb14 <__assert_func>
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80081b8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80081ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081bc:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	4413      	add	r3, r2
 80081c2:	f107 0218 	add.w	r2, r7, #24
 80081c6:	4619      	mov	r1, r3
 80081c8:	f7fa fec6 	bl	8002f58 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 80081d2:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da02      	bge.n	80081e0 <uavcan_register_Value_1_0_deserialize_+0x860>
            {
                return _err28_;
 80081da:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80081de:	e0cf      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081e6:	4413      	add	r3, r2
 80081e8:	667b      	str	r3, [r7, #100]	; 0x64
 80081ea:	e0a3      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80081f2:	2b0d      	cmp	r3, #13
 80081f4:	d14e      	bne.n	8008294 <uavcan_register_Value_1_0_deserialize_+0x914>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80081f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <uavcan_register_Value_1_0_deserialize_+0x88e>
 8008200:	4b14      	ldr	r3, [pc, #80]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008204:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8008208:	4814      	ldr	r0, [pc, #80]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800820a:	f006 fc83 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800820e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	2b00      	cmp	r3, #0
 8008216:	d006      	beq.n	8008226 <uavcan_register_Value_1_0_deserialize_+0x8a6>
 8008218:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 800821a:	4a0f      	ldr	r2, [pc, #60]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800821c:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008220:	480e      	ldr	r0, [pc, #56]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008222:	f006 fc77 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800822c:	4618      	mov	r0, r3
 800822e:	f7f8 fe69 	bl	8000f04 <nunavutChooseMin>
 8008232:	4602      	mov	r2, r0
 8008234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008236:	1a9b      	subs	r3, r3, r2
 8008238:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800823a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <uavcan_register_Value_1_0_deserialize_+0x8e0>
 8008244:	4b03      	ldr	r3, [pc, #12]	; (8008254 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008246:	4a04      	ldr	r2, [pc, #16]	; (8008258 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008248:	f44f 7140 	mov.w	r1, #768	; 0x300
 800824c:	4803      	ldr	r0, [pc, #12]	; (800825c <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800824e:	f006 fc61 	bl	800eb14 <__assert_func>
 8008252:	bf00      	nop
 8008254:	08011768 	.word	0x08011768
 8008258:	08013c64 	.word	0x08013c64
 800825c:	08012508 	.word	0x08012508
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8008260:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 8008262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008264:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	f107 0214 	add.w	r2, r7, #20
 800826e:	4619      	mov	r1, r3
 8008270:	f7fd ff16 	bl	80060a0 <uavcan_primitive_array_Real32_1_0_deserialize_>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 800827a:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800827e:	2b00      	cmp	r3, #0
 8008280:	da02      	bge.n	8008288 <uavcan_register_Value_1_0_deserialize_+0x908>
            {
                return _err29_;
 8008282:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8008286:	e07b      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800828e:	4413      	add	r3, r2
 8008290:	667b      	str	r3, [r7, #100]	; 0x64
 8008292:	e04f      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800829a:	2b0e      	cmp	r3, #14
 800829c:	d147      	bne.n	800832e <uavcan_register_Value_1_0_deserialize_+0x9ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800829e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <uavcan_register_Value_1_0_deserialize_+0x936>
 80082a8:	4b37      	ldr	r3, [pc, #220]	; (8008388 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 80082aa:	4a38      	ldr	r2, [pc, #224]	; (800838c <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80082ac:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80082b0:	4837      	ldr	r0, [pc, #220]	; (8008390 <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80082b2:	f006 fc2f 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80082b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <uavcan_register_Value_1_0_deserialize_+0x94e>
 80082c0:	4b31      	ldr	r3, [pc, #196]	; (8008388 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 80082c2:	4a32      	ldr	r2, [pc, #200]	; (800838c <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80082c4:	f240 310d 	movw	r1, #781	; 0x30d
 80082c8:	4831      	ldr	r0, [pc, #196]	; (8008390 <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80082ca:	f006 fc23 	bl	800eb14 <__assert_func>
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80082ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082d0:	08db      	lsrs	r3, r3, #3
 80082d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f8 fe15 	bl	8000f04 <nunavutChooseMin>
 80082da:	4602      	mov	r2, r0
 80082dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80082e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <uavcan_register_Value_1_0_deserialize_+0x97a>
 80082ec:	4b26      	ldr	r3, [pc, #152]	; (8008388 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 80082ee:	4a27      	ldr	r2, [pc, #156]	; (800838c <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80082f0:	f44f 7144 	mov.w	r1, #784	; 0x310
 80082f4:	4826      	ldr	r0, [pc, #152]	; (8008390 <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80082f6:	f006 fc0d 	bl	800eb14 <__assert_func>
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 80082fa:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	4413      	add	r3, r2
 8008304:	f107 0210 	add.w	r2, r7, #16
 8008308:	4619      	mov	r1, r3
 800830a:	f7fd fce9 	bl	8005ce0 <uavcan_primitive_array_Real16_1_0_deserialize_>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8008314:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8008318:	2b00      	cmp	r3, #0
 800831a:	da02      	bge.n	8008322 <uavcan_register_Value_1_0_deserialize_+0x9a2>
            {
                return _err30_;
 800831c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8008320:	e02e      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008328:	4413      	add	r3, r2
 800832a:	667b      	str	r3, [r7, #100]	; 0x64
 800832c:	e002      	b.n	8008334 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 800832e:	f06f 030a 	mvn.w	r3, #10
 8008332:	e025      	b.n	8008380 <uavcan_register_Value_1_0_deserialize_+0xa00>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008336:	3307      	adds	r3, #7
 8008338:	f023 0307 	bic.w	r3, r3, #7
 800833c:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800833e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	2b00      	cmp	r3, #0
 8008346:	d006      	beq.n	8008356 <uavcan_register_Value_1_0_deserialize_+0x9d6>
 8008348:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 800834a:	4a10      	ldr	r2, [pc, #64]	; (800838c <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 800834c:	f240 311f 	movw	r1, #799	; 0x31f
 8008350:	480f      	ldr	r0, [pc, #60]	; (8008390 <uavcan_register_Value_1_0_deserialize_+0xa10>)
 8008352:	f006 fbdf 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8008356:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008358:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800835a:	f7f8 fdd3 	bl	8000f04 <nunavutChooseMin>
 800835e:	4603      	mov	r3, r0
 8008360:	08da      	lsrs	r2, r3, #3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800836c:	429a      	cmp	r2, r3
 800836e:	d206      	bcs.n	800837e <uavcan_register_Value_1_0_deserialize_+0x9fe>
 8008370:	4b08      	ldr	r3, [pc, #32]	; (8008394 <uavcan_register_Value_1_0_deserialize_+0xa14>)
 8008372:	4a06      	ldr	r2, [pc, #24]	; (800838c <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 8008374:	f240 3121 	movw	r1, #801	; 0x321
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <uavcan_register_Value_1_0_deserialize_+0xa10>)
 800837a:	f006 fbcb 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3768      	adds	r7, #104	; 0x68
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	08011768 	.word	0x08011768
 800838c:	08013c64 	.word	0x08013c64
 8008390:	08012508 	.word	0x08012508
 8008394:	0801189c 	.word	0x0801189c

08008398 <uavcan_register_Value_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_Value_1_0_initialize_(uavcan_register_Value_1_0* const out_obj)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d018      	beq.n	80083d8 <uavcan_register_Value_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_Value_1_0_deserialize_(out_obj, &buf, &size_bytes);
 80083ae:	f107 0210 	add.w	r2, r7, #16
 80083b2:	f107 030f 	add.w	r3, r7, #15
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fae1 	bl	8007980 <uavcan_register_Value_1_0_deserialize_>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80083c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da06      	bge.n	80083d8 <uavcan_register_Value_1_0_initialize_+0x40>
 80083ca:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <uavcan_register_Value_1_0_initialize_+0x48>)
 80083cc:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <uavcan_register_Value_1_0_initialize_+0x4c>)
 80083ce:	f44f 714c 	mov.w	r1, #816	; 0x330
 80083d2:	4805      	ldr	r0, [pc, #20]	; (80083e8 <uavcan_register_Value_1_0_initialize_+0x50>)
 80083d4:	f006 fb9e 	bl	800eb14 <__assert_func>
        (void) err;
    }
}
 80083d8:	bf00      	nop
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	080119f0 	.word	0x080119f0
 80083e4:	0801401c 	.word	0x0801401c
 80083e8:	08012508 	.word	0x08012508

080083ec <uavcan_register_Value_1_0_select_empty_>:
/// Mark option "empty" active without initializing it. Does nothing if @param obj is NULL.
static inline void uavcan_register_Value_1_0_select_empty_(uavcan_register_Value_1_0* const obj)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
    if (obj != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <uavcan_register_Value_1_0_select_empty_+0x16>
    {
        obj->_tag_ = 0;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <uavcan_register_Value_1_0_select_natural16_>:
    return ((obj != NULL) && (obj->_tag_ == 9));
}

/// Mark option "natural16" active without initializing it. Does nothing if @param obj is NULL.
static inline void uavcan_register_Value_1_0_select_natural16_(uavcan_register_Value_1_0* const obj)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
    if (obj != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <uavcan_register_Value_1_0_select_natural16_+0x16>
    {
        obj->_tag_ = 10;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	220a      	movs	r2, #10
 8008420:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8008430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008434:	b08c      	sub	sp, #48	; 0x30
 8008436:	af04      	add	r7, sp, #16
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x20>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x20>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8008450:	f06f 0301 	mvn.w	r3, #1
 8008454:	e099      	b.n	800858a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	2b37      	cmp	r3, #55	; 0x37
 8008462:	d802      	bhi.n	800846a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8008464:	f06f 0302 	mvn.w	r3, #2
 8008468:	e08f      	b.n	800858a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x54>
 8008478:	4b46      	ldr	r3, [pc, #280]	; (8008594 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 800847a:	4a47      	ldr	r2, [pc, #284]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 800847c:	217c      	movs	r1, #124	; 0x7c
 800847e:	4847      	ldr	r0, [pc, #284]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008480:	f006 fb48 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2200      	movs	r2, #0
 8008488:	469a      	mov	sl, r3
 800848a:	4693      	mov	fp, r2
 800848c:	f11a 0438 	adds.w	r4, sl, #56	; 0x38
 8008490:	f14b 0500 	adc.w	r5, fp, #0
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	2200      	movs	r2, #0
 800849a:	4698      	mov	r8, r3
 800849c:	4691      	mov	r9, r2
 800849e:	45a0      	cmp	r8, r4
 80084a0:	eb79 0305 	sbcs.w	r3, r9, r5
 80084a4:	d205      	bcs.n	80084b2 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x82>
 80084a6:	4b3e      	ldr	r3, [pc, #248]	; (80085a0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x170>)
 80084a8:	4a3b      	ldr	r2, [pc, #236]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 80084aa:	217d      	movs	r1, #125	; 0x7d
 80084ac:	483b      	ldr	r0, [pc, #236]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 80084ae:	f006 fb31 	bl	800eb14 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->microsecond, 56U);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	2138      	movs	r1, #56	; 0x38
 80084ba:	9102      	str	r1, [sp, #8]
 80084bc:	e9cd 2300 	strd	r2, r3, [sp]
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	69b9      	ldr	r1, [r7, #24]
 80084c4:	68b8      	ldr	r0, [r7, #8]
 80084c6:	f7f8 fecf 	bl	8001268 <nunavutSetUxx>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]
        if (_err0_ < 0)
 80084ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da02      	bge.n	80084dc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        {
            return _err0_;
 80084d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084da:	e056      	b.n	800858a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
        }
        offset_bits += 56U;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3338      	adds	r3, #56	; 0x38
 80084e0:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d035      	beq.n	8008558 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x128>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f1c3 0308 	rsb	r3, r3, #8
 80084fa:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad0_ > 0);
 80084fc:	7dbb      	ldrb	r3, [r7, #22]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xde>
 8008502:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x174>)
 8008504:	4a24      	ldr	r2, [pc, #144]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 8008506:	2188      	movs	r1, #136	; 0x88
 8008508:	4824      	ldr	r0, [pc, #144]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 800850a:	f006 fb03 	bl	800eb14 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800850e:	7dbb      	ldrb	r3, [r7, #22]
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	e9cd 2300 	strd	r2, r3, [sp]
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	69b9      	ldr	r1, [r7, #24]
 8008522:	68b8      	ldr	r0, [r7, #8]
 8008524:	f7f8 fea0 	bl	8001268 <nunavutSetUxx>
 8008528:	4603      	mov	r3, r0
 800852a:	757b      	strb	r3, [r7, #21]
        if (_err1_ < 0)
 800852c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008530:	2b00      	cmp	r3, #0
 8008532:	da02      	bge.n	800853a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x10a>
        {
            return _err1_;
 8008534:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008538:	e027      	b.n	800858a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
        }
        offset_bits += _pad0_;
 800853a:	7dbb      	ldrb	r3, [r7, #22]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x128>
 800854c:	4b11      	ldr	r3, [pc, #68]	; (8008594 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 800854e:	4a12      	ldr	r2, [pc, #72]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 8008550:	218f      	movs	r1, #143	; 0x8f
 8008552:	4812      	ldr	r0, [pc, #72]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008554:	f006 fade 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b38      	cmp	r3, #56	; 0x38
 800855c:	d005      	beq.n	800856a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x13a>
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x178>)
 8008560:	4a0d      	ldr	r2, [pc, #52]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 8008562:	2192      	movs	r1, #146	; 0x92
 8008564:	480d      	ldr	r0, [pc, #52]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008566:	f006 fad5 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	2b00      	cmp	r3, #0
 8008572:	d005      	beq.n	8008580 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x150>
 8008574:	4b07      	ldr	r3, [pc, #28]	; (8008594 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 8008576:	4a08      	ldr	r2, [pc, #32]	; (8008598 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 8008578:	2193      	movs	r1, #147	; 0x93
 800857a:	4808      	ldr	r0, [pc, #32]	; (800859c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 800857c:	f006 faca 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	08da      	lsrs	r2, r3, #3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008594:	08011768 	.word	0x08011768
 8008598:	08014074 	.word	0x08014074
 800859c:	08012c58 	.word	0x08012c58
 80085a0:	08012ce0 	.word	0x08012ce0
 80085a4:	08011860 	.word	0x08011860
 80085a8:	08011c90 	.word	0x08011c90

080085ac <uavcan_time_SynchronizedTimestamp_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
    uavcan_time_SynchronizedTimestamp_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d009      	beq.n	80085d2 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x26>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x26>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x2c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80085d2:	f06f 0301 	mvn.w	r3, #1
 80085d6:	e049      	b.n	800866c <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xc0>
    }
    if (buffer == NULL)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80085de:	4b25      	ldr	r3, [pc, #148]	; (8008674 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xc8>)
 80085e0:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
    // truncated uint56 microsecond
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x5c>
 80085fc:	4b1e      	ldr	r3, [pc, #120]	; (8008678 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xcc>)
 80085fe:	4a1f      	ldr	r2, [pc, #124]	; (800867c <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 8008600:	21ba      	movs	r1, #186	; 0xba
 8008602:	481f      	ldr	r0, [pc, #124]	; (8008680 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 8008604:	f006 fa86 	bl	800eb14 <__assert_func>
    out_obj->microsecond = nunavutGetU64(&buffer[0], capacity_bytes, offset_bits, 56);
 8008608:	2338      	movs	r3, #56	; 0x38
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	68b8      	ldr	r0, [r7, #8]
 8008610:	f7f8 ff96 	bl	8001540 <nunavutGetU64>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	e9c1 2300 	strd	r2, r3, [r1]
    offset_bits += 56U;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	3338      	adds	r3, #56	; 0x38
 8008622:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3307      	adds	r3, #7
 8008628:	f023 0307 	bic.w	r3, r3, #7
 800862c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x98>
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xcc>)
 800863a:	4a10      	ldr	r2, [pc, #64]	; (800867c <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 800863c:	21be      	movs	r1, #190	; 0xbe
 800863e:	4810      	ldr	r0, [pc, #64]	; (8008680 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 8008640:	f006 fa68 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	6978      	ldr	r0, [r7, #20]
 8008648:	f7f8 fc5c 	bl	8000f04 <nunavutChooseMin>
 800864c:	4603      	mov	r3, r0
 800864e:	08da      	lsrs	r2, r3, #3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	429a      	cmp	r2, r3
 800865c:	d205      	bcs.n	800866a <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xbe>
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd8>)
 8008660:	4a06      	ldr	r2, [pc, #24]	; (800867c <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 8008662:	21c0      	movs	r1, #192	; 0xc0
 8008664:	4806      	ldr	r0, [pc, #24]	; (8008680 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 8008666:	f006 fa55 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	08011898 	.word	0x08011898
 8008678:	08011768 	.word	0x08011768
 800867c:	08013fe8 	.word	0x08013fe8
 8008680:	08012c58 	.word	0x08012c58
 8008684:	0801189c 	.word	0x0801189c

08008688 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80086ae:	f06f 0301 	mvn.w	r3, #1
 80086b2:	e0bf      	b.n	8008834 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
    }
    if (buffer == NULL)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80086ba:	4b60      	ldr	r3, [pc, #384]	; (800883c <uavcan_register_Access_Request_1_0_deserialize_+0x1b4>)
 80086bc:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f003 0307 	and.w	r3, r3, #7
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <uavcan_register_Access_Request_1_0_deserialize_+0x5c>
 80086d8:	4b59      	ldr	r3, [pc, #356]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80086da:	4a5a      	ldr	r2, [pc, #360]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 80086dc:	21ec      	movs	r1, #236	; 0xec
 80086de:	485a      	ldr	r0, [pc, #360]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 80086e0:	f006 fa18 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <uavcan_register_Access_Request_1_0_deserialize_+0x72>
 80086ee:	4b54      	ldr	r3, [pc, #336]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80086f0:	4a54      	ldr	r2, [pc, #336]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 80086f2:	21ed      	movs	r1, #237	; 0xed
 80086f4:	4854      	ldr	r0, [pc, #336]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 80086f6:	f006 fa0d 	bl	800eb14 <__assert_func>
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	08db      	lsrs	r3, r3, #3
 80086fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008700:	4618      	mov	r0, r3
 8008702:	f7f8 fbff 	bl	8000f04 <nunavutChooseMin>
 8008706:	4602      	mov	r2, r0
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <uavcan_register_Access_Request_1_0_deserialize_+0x9c>
 8008718:	4b49      	ldr	r3, [pc, #292]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 800871a:	4a4a      	ldr	r2, [pc, #296]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 800871c:	21f0      	movs	r1, #240	; 0xf0
 800871e:	484a      	ldr	r0, [pc, #296]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008720:	f006 f9f8 	bl	800eb14 <__assert_func>
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8008724:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	f107 0214 	add.w	r2, r7, #20
 8008732:	4619      	mov	r1, r3
 8008734:	f7f9 fbbe 	bl	8001eb4 <uavcan_register_Name_1_0_deserialize_>
 8008738:	4603      	mov	r3, r0
 800873a:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 800873c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da02      	bge.n	800874a <uavcan_register_Access_Request_1_0_deserialize_+0xc2>
        {
            return _err4_;
 8008744:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008748:	e074      	b.n	8008834 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	3307      	adds	r3, #7
 8008758:	f023 0307 	bic.w	r3, r3, #7
 800875c:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <uavcan_register_Access_Request_1_0_deserialize_+0xec>
 8008768:	4b35      	ldr	r3, [pc, #212]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 800876a:	4a36      	ldr	r2, [pc, #216]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 800876c:	21fb      	movs	r1, #251	; 0xfb
 800876e:	4836      	ldr	r0, [pc, #216]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008770:	f006 f9d0 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <uavcan_register_Access_Request_1_0_deserialize_+0x102>
 800877e:	4b30      	ldr	r3, [pc, #192]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 8008780:	4a30      	ldr	r2, [pc, #192]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008782:	21fc      	movs	r1, #252	; 0xfc
 8008784:	4830      	ldr	r0, [pc, #192]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008786:	f006 f9c5 	bl	800eb14 <__assert_func>
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	08db      	lsrs	r3, r3, #3
 800878e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f7f8 fbb7 	bl	8000f04 <nunavutChooseMin>
 8008796:	4602      	mov	r2, r0
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <uavcan_register_Access_Request_1_0_deserialize_+0x12c>
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80087aa:	4a26      	ldr	r2, [pc, #152]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 80087ac:	21ff      	movs	r1, #255	; 0xff
 80087ae:	4826      	ldr	r0, [pc, #152]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 80087b0:	f006 f9b0 	bl	800eb14 <__assert_func>
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	f107 0210 	add.w	r2, r7, #16
 80087c6:	4619      	mov	r1, r3
 80087c8:	f7ff f8da 	bl	8007980 <uavcan_register_Value_1_0_deserialize_>
 80087cc:	4603      	mov	r3, r0
 80087ce:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 80087d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	da02      	bge.n	80087de <uavcan_register_Access_Request_1_0_deserialize_+0x156>
        {
            return _err5_;
 80087d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80087dc:	e02a      	b.n	8008834 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3307      	adds	r3, #7
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <uavcan_register_Access_Request_1_0_deserialize_+0x182>
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80087fe:	4a11      	ldr	r2, [pc, #68]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008800:	f240 1109 	movw	r1, #265	; 0x109
 8008804:	4810      	ldr	r0, [pc, #64]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008806:	f006 f985 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800880a:	6a39      	ldr	r1, [r7, #32]
 800880c:	69f8      	ldr	r0, [r7, #28]
 800880e:	f7f8 fb79 	bl	8000f04 <nunavutChooseMin>
 8008812:	4603      	mov	r3, r0
 8008814:	08da      	lsrs	r2, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008820:	429a      	cmp	r2, r3
 8008822:	d206      	bcs.n	8008832 <uavcan_register_Access_Request_1_0_deserialize_+0x1aa>
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <uavcan_register_Access_Request_1_0_deserialize_+0x1c4>)
 8008826:	4a07      	ldr	r2, [pc, #28]	; (8008844 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008828:	f240 110b 	movw	r1, #267	; 0x10b
 800882c:	4806      	ldr	r0, [pc, #24]	; (8008848 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 800882e:	f006 f971 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3728      	adds	r7, #40	; 0x28
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	08011898 	.word	0x08011898
 8008840:	08011768 	.word	0x08011768
 8008844:	08013c34 	.word	0x08013c34
 8008848:	08012d10 	.word	0x08012d10
 800884c:	0801189c 	.word	0x0801189c

08008850 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8008850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008854:	b0a6      	sub	sp, #152	; 0x98
 8008856:	af04      	add	r7, sp, #16
 8008858:	66f8      	str	r0, [r7, #108]	; 0x6c
 800885a:	66b9      	str	r1, [r7, #104]	; 0x68
 800885c:	667a      	str	r2, [r7, #100]	; 0x64
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <uavcan_register_Access_Response_1_0_serialize_+0x20>
 8008864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <uavcan_register_Access_Response_1_0_serialize_+0x20>
 800886a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <uavcan_register_Access_Response_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8008870:	f06f 0301 	mvn.w	r3, #1
 8008874:	e2f8      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8008876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 800887e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008882:	00da      	lsls	r2, r3, #3
 8008884:	f640 0357 	movw	r3, #2135	; 0x857
 8008888:	429a      	cmp	r2, r3
 800888a:	d802      	bhi.n	8008892 <uavcan_register_Access_Response_1_0_serialize_+0x42>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800888c:	f06f 0302 	mvn.w	r3, #2
 8008890:	e2ea      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d006      	beq.n	80088b2 <uavcan_register_Access_Response_1_0_serialize_+0x62>
 80088a4:	4bc2      	ldr	r3, [pc, #776]	; (8008bb0 <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80088a6:	4ac3      	ldr	r2, [pc, #780]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80088a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80088ac:	48c2      	ldr	r0, [pc, #776]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80088ae:	f006 f931 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80088b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <uavcan_register_Access_Response_1_0_serialize_+0x7c>
 80088be:	4bbc      	ldr	r3, [pc, #752]	; (8008bb0 <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80088c0:	4abc      	ldr	r2, [pc, #752]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80088c2:	f240 1161 	movw	r1, #353	; 0x161
 80088c6:	48bc      	ldr	r0, [pc, #752]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80088c8:	f006 f924 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d0:	2200      	movs	r2, #0
 80088d2:	4698      	mov	r8, r3
 80088d4:	4691      	mov	r9, r2
 80088d6:	f118 0438 	adds.w	r4, r8, #56	; 0x38
 80088da:	f149 0500 	adc.w	r5, r9, #0
 80088de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	2200      	movs	r2, #0
 80088e6:	469a      	mov	sl, r3
 80088e8:	4693      	mov	fp, r2
 80088ea:	45a2      	cmp	sl, r4
 80088ec:	eb7b 0305 	sbcs.w	r3, fp, r5
 80088f0:	d206      	bcs.n	8008900 <uavcan_register_Access_Response_1_0_serialize_+0xb0>
 80088f2:	4bb2      	ldr	r3, [pc, #712]	; (8008bbc <uavcan_register_Access_Response_1_0_serialize_+0x36c>)
 80088f4:	4aaf      	ldr	r2, [pc, #700]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80088f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80088fa:	48af      	ldr	r0, [pc, #700]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80088fc:	f006 f90a 	bl	800eb14 <__assert_func>
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8008900:	2307      	movs	r3, #7
 8008902:	677b      	str	r3, [r7, #116]	; 0x74
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	2b00      	cmp	r3, #0
 800890e:	d006      	beq.n	800891e <uavcan_register_Access_Response_1_0_serialize_+0xce>
 8008910:	4ba7      	ldr	r3, [pc, #668]	; (8008bb0 <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 8008912:	4aa8      	ldr	r2, [pc, #672]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008914:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8008918:	48a7      	ldr	r0, [pc, #668]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 800891a:	f006 f8fb 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
 800891e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008922:	08da      	lsrs	r2, r3, #3
 8008924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008926:	441a      	add	r2, r3
 8008928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800892c:	4293      	cmp	r3, r2
 800892e:	d206      	bcs.n	800893e <uavcan_register_Access_Response_1_0_serialize_+0xee>
 8008930:	4ba3      	ldr	r3, [pc, #652]	; (8008bc0 <uavcan_register_Access_Response_1_0_serialize_+0x370>)
 8008932:	4aa0      	ldr	r2, [pc, #640]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008934:	f240 1165 	movw	r1, #357	; 0x165
 8008938:	489f      	ldr	r0, [pc, #636]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 800893a:	f006 f8eb 	bl	800eb14 <__assert_func>
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800893e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8008940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008944:	08da      	lsrs	r2, r3, #3
 8008946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008948:	1899      	adds	r1, r3, r2
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800894a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800894e:	461a      	mov	r2, r3
 8008950:	f7ff fd6e 	bl	8008430 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if (_err6_ < 0)
 800895a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800895e:	2b00      	cmp	r3, #0
 8008960:	da02      	bge.n	8008968 <uavcan_register_Access_Response_1_0_serialize_+0x118>
        {
            return _err6_;
 8008962:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8008966:	e27f      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
 8008968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	2b38      	cmp	r3, #56	; 0x38
 800896e:	d006      	beq.n	800897e <uavcan_register_Access_Response_1_0_serialize_+0x12e>
 8008970:	4b94      	ldr	r3, [pc, #592]	; (8008bc4 <uavcan_register_Access_Response_1_0_serialize_+0x374>)
 8008972:	4a90      	ldr	r2, [pc, #576]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008974:	f240 116d 	movw	r1, #365	; 0x16d
 8008978:	488f      	ldr	r0, [pc, #572]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 800897a:	f006 f8cb 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800897e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008980:	00da      	lsls	r2, r3, #3
 8008982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008986:	4413      	add	r3, r2
 8008988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800898c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008990:	00da      	lsls	r2, r3, #3
 8008992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008996:	4293      	cmp	r3, r2
 8008998:	d906      	bls.n	80089a8 <uavcan_register_Access_Response_1_0_serialize_+0x158>
 800899a:	4b8b      	ldr	r3, [pc, #556]	; (8008bc8 <uavcan_register_Access_Response_1_0_serialize_+0x378>)
 800899c:	4a85      	ldr	r2, [pc, #532]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 800899e:	f240 116f 	movw	r1, #367	; 0x16f
 80089a2:	4885      	ldr	r0, [pc, #532]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80089a4:	f006 f8b6 	bl	800eb14 <__assert_func>
    }
    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80089a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <uavcan_register_Access_Response_1_0_serialize_+0x172>
 80089b4:	4b7e      	ldr	r3, [pc, #504]	; (8008bb0 <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80089b6:	4a7f      	ldr	r2, [pc, #508]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80089b8:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80089bc:	487e      	ldr	r0, [pc, #504]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80089be:	f006 f8a9 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
 80089c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c6:	2200      	movs	r2, #0
 80089c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80089cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80089d0:	460b      	mov	r3, r1
 80089d2:	3301      	adds	r3, #1
 80089d4:	653b      	str	r3, [r7, #80]	; 0x50
 80089d6:	4613      	mov	r3, r2
 80089d8:	f143 0300 	adc.w	r3, r3, #0
 80089dc:	657b      	str	r3, [r7, #84]	; 0x54
 80089de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	2200      	movs	r2, #0
 80089e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089ea:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80089ee:	4623      	mov	r3, r4
 80089f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80089f4:	4602      	mov	r2, r0
 80089f6:	4293      	cmp	r3, r2
 80089f8:	462b      	mov	r3, r5
 80089fa:	460a      	mov	r2, r1
 80089fc:	4193      	sbcs	r3, r2
 80089fe:	d206      	bcs.n	8008a0e <uavcan_register_Access_Response_1_0_serialize_+0x1be>
 8008a00:	4b72      	ldr	r3, [pc, #456]	; (8008bcc <uavcan_register_Access_Response_1_0_serialize_+0x37c>)
 8008a02:	4a6c      	ldr	r2, [pc, #432]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008a04:	f240 1173 	movw	r1, #371	; 0x173
 8008a08:	486b      	ldr	r0, [pc, #428]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008a0a:	f006 f883 	bl	800eb14 <__assert_func>
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8008a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a10:	7a1b      	ldrb	r3, [r3, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <uavcan_register_Access_Response_1_0_serialize_+0x1ca>
 8008a16:	2101      	movs	r1, #1
 8008a18:	e000      	b.n	8008a1c <uavcan_register_Access_Response_1_0_serialize_+0x1cc>
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a20:	08da      	lsrs	r2, r3, #3
 8008a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a24:	441a      	add	r2, r3
 8008a26:	460b      	mov	r3, r1
 8008a28:	7013      	strb	r3, [r2, #0]
        offset_bits += 1U;
 8008a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
 8008a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a38:	2200      	movs	r2, #0
 8008a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a3c:	647a      	str	r2, [r7, #68]	; 0x44
 8008a3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a42:	460b      	mov	r3, r1
 8008a44:	3301      	adds	r3, #1
 8008a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a48:	4613      	mov	r3, r2
 8008a4a:	f143 0300 	adc.w	r3, r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	2200      	movs	r2, #0
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30
 8008a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8008a5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a60:	4623      	mov	r3, r4
 8008a62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a66:	4602      	mov	r2, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	460a      	mov	r2, r1
 8008a6e:	4193      	sbcs	r3, r2
 8008a70:	d206      	bcs.n	8008a80 <uavcan_register_Access_Response_1_0_serialize_+0x230>
 8008a72:	4b56      	ldr	r3, [pc, #344]	; (8008bcc <uavcan_register_Access_Response_1_0_serialize_+0x37c>)
 8008a74:	4a4f      	ldr	r2, [pc, #316]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008a76:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008a7a:	484f      	ldr	r0, [pc, #316]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008a7c:	f006 f84a 	bl	800eb14 <__assert_func>
        if (obj->persistent)
 8008a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a82:	7a5b      	ldrb	r3, [r3, #9]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d016      	beq.n	8008ab6 <uavcan_register_Access_Response_1_0_serialize_+0x266>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8008a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a90:	4413      	add	r3, r2
 8008a92:	7818      	ldrb	r0, [r3, #0]
 8008a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a98:	f003 0207 	and.w	r2, r3, #7
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4093      	lsls	r3, r2
 8008aa0:	b2d9      	uxtb	r1, r3
 8008aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aa6:	08da      	lsrs	r2, r3, #3
 8008aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aaa:	441a      	add	r2, r3
 8008aac:	ea40 0301 	orr.w	r3, r0, r1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	7013      	strb	r3, [r2, #0]
 8008ab4:	e017      	b.n	8008ae6 <uavcan_register_Access_Response_1_0_serialize_+0x296>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8008ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008abe:	4413      	add	r3, r2
 8008ac0:	7818      	ldrb	r0, [r3, #0]
 8008ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac6:	f003 0207 	and.w	r2, r3, #7
 8008aca:	2301      	movs	r3, #1
 8008acc:	4093      	lsls	r3, r2
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	b2d9      	uxtb	r1, r3
 8008ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad8:	08da      	lsrs	r2, r3, #3
 8008ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008adc:	441a      	add	r2, r3
 8008ade:	ea00 0301 	and.w	r3, r0, r1
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	7013      	strb	r3, [r2, #0]
        }
        offset_bits += 1U;
 8008ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aea:	3301      	adds	r3, #1
 8008aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
 8008af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af4:	2200      	movs	r2, #0
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008afa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008afe:	460b      	mov	r3, r1
 8008b00:	3306      	adds	r3, #6
 8008b02:	623b      	str	r3, [r7, #32]
 8008b04:	4613      	mov	r3, r2
 8008b06:	f143 0300 	adc.w	r3, r3, #0
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	2200      	movs	r2, #0
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	61fa      	str	r2, [r7, #28]
 8008b18:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b22:	4602      	mov	r2, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	462b      	mov	r3, r5
 8008b28:	460a      	mov	r2, r1
 8008b2a:	4193      	sbcs	r3, r2
 8008b2c:	d206      	bcs.n	8008b3c <uavcan_register_Access_Response_1_0_serialize_+0x2ec>
 8008b2e:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <uavcan_register_Access_Response_1_0_serialize_+0x380>)
 8008b30:	4a20      	ldr	r2, [pc, #128]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008b32:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8008b36:	4820      	ldr	r0, [pc, #128]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008b38:	f005 ffec 	bl	800eb14 <__assert_func>
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8008b3c:	2306      	movs	r3, #6
 8008b3e:	9302      	str	r3, [sp, #8]
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	e9cd 2300 	strd	r2, r3, [sp]
 8008b4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b50:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008b54:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008b56:	f7f8 fb87 	bl	8001268 <nunavutSetUxx>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        if (_err7_ < 0)
 8008b60:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	da02      	bge.n	8008b6e <uavcan_register_Access_Response_1_0_serialize_+0x31e>
        {
            return _err7_;
 8008b68:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8008b6c:	e17c      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += 6UL;
 8008b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b72:	3306      	adds	r3, #6
 8008b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8008b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d057      	beq.n	8008c34 <uavcan_register_Access_Response_1_0_serialize_+0x3e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8008b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f1c3 0308 	rsb	r3, r3, #8
 8008b94:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        NUNAVUT_ASSERT(_pad2_ > 0);
 8008b98:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11b      	bne.n	8008bd8 <uavcan_register_Access_Response_1_0_serialize_+0x388>
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <uavcan_register_Access_Response_1_0_serialize_+0x384>)
 8008ba2:	4a04      	ldr	r2, [pc, #16]	; (8008bb4 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008ba4:	f240 118f 	movw	r1, #399	; 0x18f
 8008ba8:	4803      	ldr	r0, [pc, #12]	; (8008bb8 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008baa:	f005 ffb3 	bl	800eb14 <__assert_func>
 8008bae:	bf00      	nop
 8008bb0:	08011768 	.word	0x08011768
 8008bb4:	08014044 	.word	0x08014044
 8008bb8:	08012d10 	.word	0x08012d10
 8008bbc:	08012ce0 	.word	0x08012ce0
 8008bc0:	08012704 	.word	0x08012704
 8008bc4:	08012d8c 	.word	0x08012d8c
 8008bc8:	080119bc 	.word	0x080119bc
 8008bcc:	08012dac 	.word	0x08012dac
 8008bd0:	08012ddc 	.word	0x08012ddc
 8008bd4:	08011c84 	.word	0x08011c84
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8008bd8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008bdc:	9302      	str	r3, [sp, #8]
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	f04f 0300 	mov.w	r3, #0
 8008be6:	e9cd 2300 	strd	r2, r3, [sp]
 8008bea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008bee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008bf2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008bf4:	f7f8 fb38 	bl	8001268 <nunavutSetUxx>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        if (_err8_ < 0)
 8008bfe:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da02      	bge.n	8008c0c <uavcan_register_Access_Response_1_0_serialize_+0x3bc>
        {
            return _err8_;
 8008c06:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8008c0a:	e12d      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += _pad2_;
 8008c0c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008c10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c14:	4413      	add	r3, r2
 8008c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d006      	beq.n	8008c34 <uavcan_register_Access_Response_1_0_serialize_+0x3e4>
 8008c26:	4b93      	ldr	r3, [pc, #588]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c28:	4a93      	ldr	r2, [pc, #588]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c2a:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8008c2e:	4893      	ldr	r0, [pc, #588]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c30:	f005 ff70 	bl	800eb14 <__assert_func>
    }
    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <uavcan_register_Access_Response_1_0_serialize_+0x3fe>
 8008c40:	4b8c      	ldr	r3, [pc, #560]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c42:	4a8d      	ldr	r2, [pc, #564]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c44:	f240 1199 	movw	r1, #409	; 0x199
 8008c48:	488c      	ldr	r0, [pc, #560]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c4a:	f005 ff63 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <uavcan_register_Access_Response_1_0_serialize_+0x418>
 8008c5a:	4b86      	ldr	r3, [pc, #536]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c5c:	4a86      	ldr	r2, [pc, #536]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c5e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008c62:	4886      	ldr	r0, [pc, #536]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c64:	f005 ff56 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
 8008c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	617a      	str	r2, [r7, #20]
 8008c72:	f640 0318 	movw	r3, #2072	; 0x818
 8008c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	18d3      	adds	r3, r2, r3
 8008c7e:	60bb      	str	r3, [r7, #8]
 8008c80:	460b      	mov	r3, r1
 8008c82:	f143 0300 	adc.w	r3, r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	2200      	movs	r2, #0
 8008c90:	603b      	str	r3, [r7, #0]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c98:	4623      	mov	r3, r4
 8008c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	4193      	sbcs	r3, r2
 8008ca8:	d206      	bcs.n	8008cb8 <uavcan_register_Access_Response_1_0_serialize_+0x468>
 8008caa:	4b75      	ldr	r3, [pc, #468]	; (8008e80 <uavcan_register_Access_Response_1_0_serialize_+0x630>)
 8008cac:	4a72      	ldr	r2, [pc, #456]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008cae:	f240 119b 	movw	r1, #411	; 0x19b
 8008cb2:	4872      	ldr	r0, [pc, #456]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008cb4:	f005 ff2e 	bl	800eb14 <__assert_func>
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8008cb8:	f240 1303 	movw	r3, #259	; 0x103
 8008cbc:	673b      	str	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d006      	beq.n	8008cd8 <uavcan_register_Access_Response_1_0_serialize_+0x488>
 8008cca:	4b6a      	ldr	r3, [pc, #424]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008ccc:	4a6a      	ldr	r2, [pc, #424]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008cce:	f240 119d 	movw	r1, #413	; 0x19d
 8008cd2:	486a      	ldr	r0, [pc, #424]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008cd4:	f005 ff1e 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
 8008cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cdc:	08da      	lsrs	r2, r3, #3
 8008cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d206      	bcs.n	8008cf8 <uavcan_register_Access_Response_1_0_serialize_+0x4a8>
 8008cea:	4b66      	ldr	r3, [pc, #408]	; (8008e84 <uavcan_register_Access_Response_1_0_serialize_+0x634>)
 8008cec:	4a62      	ldr	r2, [pc, #392]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008cee:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8008cf2:	4862      	ldr	r0, [pc, #392]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008cf4:	f005 ff0e 	bl	800eb14 <__assert_func>
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8008cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfa:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8008cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d02:	08db      	lsrs	r3, r3, #3
 8008d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d06:	4413      	add	r3, r2
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8008d08:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f7fd fa77 	bl	8006200 <uavcan_register_Value_1_0_serialize_>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        if (_err9_ < 0)
 8008d18:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	da02      	bge.n	8008d26 <uavcan_register_Access_Response_1_0_serialize_+0x4d6>
        {
            return _err9_;
 8008d20:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8008d24:	e0a0      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
 8008d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	2b07      	cmp	r3, #7
 8008d2c:	d806      	bhi.n	8008d3c <uavcan_register_Access_Response_1_0_serialize_+0x4ec>
 8008d2e:	4b56      	ldr	r3, [pc, #344]	; (8008e88 <uavcan_register_Access_Response_1_0_serialize_+0x638>)
 8008d30:	4a51      	ldr	r2, [pc, #324]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d32:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8008d36:	4851      	ldr	r0, [pc, #324]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d38:	f005 feec 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
 8008d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	f640 0218 	movw	r2, #2072	; 0x818
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d906      	bls.n	8008d56 <uavcan_register_Access_Response_1_0_serialize_+0x506>
 8008d48:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <uavcan_register_Access_Response_1_0_serialize_+0x63c>)
 8008d4a:	4a4b      	ldr	r2, [pc, #300]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d4c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8008d50:	484a      	ldr	r0, [pc, #296]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d52:	f005 fedf 	bl	800eb14 <__assert_func>
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8008d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d5e:	4413      	add	r3, r2
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8008d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d906      	bls.n	8008d80 <uavcan_register_Access_Response_1_0_serialize_+0x530>
 8008d72:	4b47      	ldr	r3, [pc, #284]	; (8008e90 <uavcan_register_Access_Response_1_0_serialize_+0x640>)
 8008d74:	4a40      	ldr	r2, [pc, #256]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d76:	f240 11a9 	movw	r1, #425	; 0x1a9
 8008d7a:	4840      	ldr	r0, [pc, #256]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d7c:	f005 feca 	bl	800eb14 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8008d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d042      	beq.n	8008e12 <uavcan_register_Access_Response_1_0_serialize_+0x5c2>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8008d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	f1c3 0308 	rsb	r3, r3, #8
 8008d9c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
        NUNAVUT_ASSERT(_pad3_ > 0);
 8008da0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <uavcan_register_Access_Response_1_0_serialize_+0x566>
 8008da8:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x644>)
 8008daa:	4a33      	ldr	r2, [pc, #204]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008dac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008db0:	4832      	ldr	r0, [pc, #200]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008db2:	f005 feaf 	bl	800eb14 <__assert_func>
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8008db6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	e9cd 2300 	strd	r2, r3, [sp]
 8008dc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dcc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008dd0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008dd2:	f7f8 fa49 	bl	8001268 <nunavutSetUxx>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        if (_err10_ < 0)
 8008ddc:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da02      	bge.n	8008dea <uavcan_register_Access_Response_1_0_serialize_+0x59a>
        {
            return _err10_;
 8008de4:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8008de8:	e03e      	b.n	8008e68 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += _pad3_;
 8008dea:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008dee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008df2:	4413      	add	r3, r2
 8008df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d006      	beq.n	8008e12 <uavcan_register_Access_Response_1_0_serialize_+0x5c2>
 8008e04:	4b1b      	ldr	r3, [pc, #108]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008e06:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e08:	f240 11b5 	movw	r1, #437	; 0x1b5
 8008e0c:	481b      	ldr	r0, [pc, #108]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e0e:	f005 fe81 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 72ULL);
 8008e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e16:	2b47      	cmp	r3, #71	; 0x47
 8008e18:	d806      	bhi.n	8008e28 <uavcan_register_Access_Response_1_0_serialize_+0x5d8>
 8008e1a:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <uavcan_register_Access_Response_1_0_serialize_+0x648>)
 8008e1c:	4a16      	ldr	r2, [pc, #88]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e1e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008e22:	4816      	ldr	r0, [pc, #88]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e24:	f005 fe76 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);
 8008e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e2c:	f640 0258 	movw	r2, #2136	; 0x858
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d906      	bls.n	8008e42 <uavcan_register_Access_Response_1_0_serialize_+0x5f2>
 8008e34:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <uavcan_register_Access_Response_1_0_serialize_+0x64c>)
 8008e36:	4a10      	ldr	r2, [pc, #64]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e38:	f240 11b9 	movw	r1, #441	; 0x1b9
 8008e3c:	480f      	ldr	r0, [pc, #60]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e3e:	f005 fe69 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d006      	beq.n	8008e5c <uavcan_register_Access_Response_1_0_serialize_+0x60c>
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008e50:	4a09      	ldr	r2, [pc, #36]	; (8008e78 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e52:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8008e56:	4809      	ldr	r0, [pc, #36]	; (8008e7c <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e58:	f005 fe5c 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8008e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e60:	08da      	lsrs	r2, r3, #3
 8008e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e64:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3788      	adds	r7, #136	; 0x88
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e72:	bf00      	nop
 8008e74:	08011768 	.word	0x08011768
 8008e78:	08014044 	.word	0x08014044
 8008e7c:	08012d10 	.word	0x08012d10
 8008e80:	08012e0c 	.word	0x08012e0c
 8008e84:	0801277c 	.word	0x0801277c
 8008e88:	080127b4 	.word	0x080127b4
 8008e8c:	08012e40 	.word	0x08012e40
 8008e90:	080119bc 	.word	0x080119bc
 8008e94:	08012e60 	.word	0x08012e60
 8008e98:	08012e6c 	.word	0x08012e6c
 8008e9c:	08012e84 	.word	0x08012e84

08008ea0 <uavcan_register_Access_Response_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_deserialize_(
    uavcan_register_Access_Response_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <uavcan_register_Access_Response_1_0_deserialize_+0x26>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <uavcan_register_Access_Response_1_0_deserialize_+0x26>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <uavcan_register_Access_Response_1_0_deserialize_+0x2c>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <uavcan_register_Access_Response_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8008ec6:	f06f 0301 	mvn.w	r3, #1
 8008eca:	e10c      	b.n	80090e6 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
    }
    if (buffer == NULL)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <uavcan_register_Access_Response_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8008ed2:	4b87      	ldr	r3, [pc, #540]	; (80090f0 <uavcan_register_Access_Response_1_0_deserialize_+0x250>)
 8008ed4:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61fb      	str	r3, [r7, #28]
    // uavcan.time.SynchronizedTimestamp.1.0 timestamp
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <uavcan_register_Access_Response_1_0_deserialize_+0x5e>
 8008ef0:	4b80      	ldr	r3, [pc, #512]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008ef2:	4a81      	ldr	r2, [pc, #516]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008ef4:	f240 11e1 	movw	r1, #481	; 0x1e1
 8008ef8:	4880      	ldr	r0, [pc, #512]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008efa:	f005 fe0b 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <uavcan_register_Access_Response_1_0_deserialize_+0x76>
 8008f08:	4b7a      	ldr	r3, [pc, #488]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f0a:	4a7b      	ldr	r2, [pc, #492]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f0c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008f10:	487a      	ldr	r0, [pc, #488]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f12:	f005 fdff 	bl	800eb14 <__assert_func>
    {
        size_t _size_bytes6_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	08db      	lsrs	r3, r3, #3
 8008f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f7 fff1 	bl	8000f04 <nunavutChooseMin>
 8008f22:	4602      	mov	r2, r0
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <uavcan_register_Access_Response_1_0_deserialize_+0xa2>
 8008f34:	4b6f      	ldr	r3, [pc, #444]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f36:	4a70      	ldr	r2, [pc, #448]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f38:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008f3c:	486f      	ldr	r0, [pc, #444]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f3e:	f005 fde9 	bl	800eb14 <__assert_func>
        const int8_t _err11_ = uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
 8008f42:	68f8      	ldr	r0, [r7, #12]
            &out_obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes6_);
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	08db      	lsrs	r3, r3, #3
        const int8_t _err11_ = uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f107 0214 	add.w	r2, r7, #20
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7ff fb2b 	bl	80085ac <uavcan_time_SynchronizedTimestamp_1_0_deserialize_>
 8008f56:	4603      	mov	r3, r0
 8008f58:	76fb      	strb	r3, [r7, #27]
        if (_err11_ < 0)
 8008f5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da02      	bge.n	8008f68 <uavcan_register_Access_Response_1_0_deserialize_+0xc8>
        {
            return _err11_;
 8008f62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f66:	e0be      	b.n	80090e6 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
        }
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested serialized representation.
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	61fb      	str	r3, [r7, #28]
    }
    // saturated bool mutable
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <uavcan_register_Access_Response_1_0_deserialize_+0xea>
 8008f7c:	4b5d      	ldr	r3, [pc, #372]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f7e:	4a5e      	ldr	r2, [pc, #376]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f80:	f240 11ef 	movw	r1, #495	; 0x1ef
 8008f84:	485d      	ldr	r0, [pc, #372]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f86:	f005 fdc5 	bl	800eb14 <__assert_func>
    if (offset_bits < capacity_bits)
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d20e      	bcs.n	8008fb0 <uavcan_register_Access_Response_1_0_deserialize_+0x110>
    {
        out_obj->_mutable = (buffer[offset_bits / 8U] & 1U) != 0U;
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	08db      	lsrs	r3, r3, #3
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	4413      	add	r3, r2
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf14      	ite	ne
 8008fa4:	2301      	movne	r3, #1
 8008fa6:	2300      	moveq	r3, #0
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	721a      	strb	r2, [r3, #8]
 8008fae:	e002      	b.n	8008fb6 <uavcan_register_Access_Response_1_0_deserialize_+0x116>
    }
    else
    {
        out_obj->_mutable = false;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	721a      	strb	r2, [r3, #8]
    }
    offset_bits += 1U;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	61fb      	str	r3, [r7, #28]
    // saturated bool persistent
    if (offset_bits < capacity_bits)
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d214      	bcs.n	8008fee <uavcan_register_Access_Response_1_0_deserialize_+0x14e>
    {
        out_obj->persistent = (buffer[offset_bits / 8U] & (1U << (offset_bits % 8U))) != 0U;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4413      	add	r3, r2
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf14      	ite	ne
 8008fe2:	2301      	movne	r3, #1
 8008fe4:	2300      	moveq	r3, #0
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	725a      	strb	r2, [r3, #9]
 8008fec:	e002      	b.n	8008ff4 <uavcan_register_Access_Response_1_0_deserialize_+0x154>
    }
    else
    {
        out_obj->persistent = false;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	725a      	strb	r2, [r3, #9]
    }
    offset_bits += 1U;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	61fb      	str	r3, [r7, #28]
    // void6
    offset_bits += 6;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	3306      	adds	r3, #6
 8008ffe:	61fb      	str	r3, [r7, #28]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	3307      	adds	r3, #7
 8009004:	f023 0307 	bic.w	r3, r3, #7
 8009008:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <uavcan_register_Access_Response_1_0_deserialize_+0x182>
 8009014:	4b37      	ldr	r3, [pc, #220]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8009016:	4a38      	ldr	r2, [pc, #224]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8009018:	f240 2107 	movw	r1, #519	; 0x207
 800901c:	4837      	ldr	r0, [pc, #220]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 800901e:	f005 fd79 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <uavcan_register_Access_Response_1_0_deserialize_+0x19a>
 800902c:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 800902e:	4a32      	ldr	r2, [pc, #200]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8009030:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009034:	4831      	ldr	r0, [pc, #196]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8009036:	f005 fd6d 	bl	800eb14 <__assert_func>
    {
        size_t _size_bytes7_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	08db      	lsrs	r3, r3, #3
 800903e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 ff5f 	bl	8000f04 <nunavutChooseMin>
 8009046:	4602      	mov	r2, r0
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	1a9b      	subs	r3, r3, r2
 800904c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <uavcan_register_Access_Response_1_0_deserialize_+0x1c6>
 8009058:	4b26      	ldr	r3, [pc, #152]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 800905a:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 800905c:	f240 210b 	movw	r1, #523	; 0x20b
 8009060:	4826      	ldr	r0, [pc, #152]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8009062:	f005 fd57 	bl	800eb14 <__assert_func>
        const int8_t _err12_ = uavcan_register_Value_1_0_deserialize_(
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f103 0010 	add.w	r0, r3, #16
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes7_);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	08db      	lsrs	r3, r3, #3
        const int8_t _err12_ = uavcan_register_Value_1_0_deserialize_(
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	4413      	add	r3, r2
 8009074:	f107 0210 	add.w	r2, r7, #16
 8009078:	4619      	mov	r1, r3
 800907a:	f7fe fc81 	bl	8007980 <uavcan_register_Value_1_0_deserialize_>
 800907e:	4603      	mov	r3, r0
 8009080:	76bb      	strb	r3, [r7, #26]
        if (_err12_ < 0)
 8009082:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009086:	2b00      	cmp	r3, #0
 8009088:	da02      	bge.n	8009090 <uavcan_register_Access_Response_1_0_deserialize_+0x1f0>
        {
            return _err12_;
 800908a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800908e:	e02a      	b.n	80090e6 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
        }
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested serialized representation.
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3307      	adds	r3, #7
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d006      	beq.n	80090bc <uavcan_register_Access_Response_1_0_deserialize_+0x21c>
 80090ae:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 80090b0:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 80090b2:	f240 2115 	movw	r1, #533	; 0x215
 80090b6:	4811      	ldr	r0, [pc, #68]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 80090b8:	f005 fd2c 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80090bc:	6a39      	ldr	r1, [r7, #32]
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	f7f7 ff20 	bl	8000f04 <nunavutChooseMin>
 80090c4:	4603      	mov	r3, r0
 80090c6:	08da      	lsrs	r2, r3, #3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d206      	bcs.n	80090e4 <uavcan_register_Access_Response_1_0_deserialize_+0x244>
 80090d6:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <uavcan_register_Access_Response_1_0_deserialize_+0x260>)
 80090d8:	4a07      	ldr	r2, [pc, #28]	; (80090f8 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 80090da:	f240 2117 	movw	r1, #535	; 0x217
 80090de:	4807      	ldr	r0, [pc, #28]	; (80090fc <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 80090e0:	f005 fd18 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08011898 	.word	0x08011898
 80090f4:	08011768 	.word	0x08011768
 80090f8:	08013fb4 	.word	0x08013fb4
 80090fc:	08012d10 	.word	0x08012d10
 8009100:	0801189c 	.word	0x0801189c

08009104 <uavcan_register_Access_Response_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_Access_Response_1_0_initialize_(uavcan_register_Access_Response_1_0* const out_obj)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d018      	beq.n	8009144 <uavcan_register_Access_Response_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_Access_Response_1_0_deserialize_(out_obj, &buf, &size_bytes);
 800911a:	f107 0210 	add.w	r2, r7, #16
 800911e:	f107 030f 	add.w	r3, r7, #15
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7ff febb 	bl	8008ea0 <uavcan_register_Access_Response_1_0_deserialize_>
 800912a:	4603      	mov	r3, r0
 800912c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 800912e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009132:	2b00      	cmp	r3, #0
 8009134:	da06      	bge.n	8009144 <uavcan_register_Access_Response_1_0_initialize_+0x40>
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <uavcan_register_Access_Response_1_0_initialize_+0x48>)
 8009138:	4a05      	ldr	r2, [pc, #20]	; (8009150 <uavcan_register_Access_Response_1_0_initialize_+0x4c>)
 800913a:	f240 2126 	movw	r1, #550	; 0x226
 800913e:	4805      	ldr	r0, [pc, #20]	; (8009154 <uavcan_register_Access_Response_1_0_initialize_+0x50>)
 8009140:	f005 fce8 	bl	800eb14 <__assert_func>
        (void) err;
    }
}
 8009144:	bf00      	nop
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	080119f0 	.word	0x080119f0
 8009150:	08013f84 	.word	0x08013f84
 8009154:	08012d10 	.word	0x08012d10

08009158 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Request_1_3_deserialize_(
    uavcan_node_ExecuteCommand_Request_1_3* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x26>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x26>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x2c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800917e:	f06f 0301 	mvn.w	r3, #1
 8009182:	e0b1      	b.n	80092e8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x190>
    }
    if (buffer == NULL)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800918a:	4b59      	ldr	r3, [pc, #356]	; (80092f0 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x198>)
 800918c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
    // saturated uint16 command
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x5c>
 80091a8:	4b52      	ldr	r3, [pc, #328]	; (80092f4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 80091aa:	4a53      	ldr	r2, [pc, #332]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80091ac:	21f3      	movs	r1, #243	; 0xf3
 80091ae:	4853      	ldr	r0, [pc, #332]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80091b0:	f005 fcb0 	bl	800eb14 <__assert_func>
    out_obj->command = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80091b4:	2310      	movs	r3, #16
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	6979      	ldr	r1, [r7, #20]
 80091ba:	68b8      	ldr	r0, [r7, #8]
 80091bc:	f7f8 f930 	bl	8001420 <nunavutGetU16>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	801a      	strh	r2, [r3, #0]
    offset_bits += 16U;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3310      	adds	r3, #16
 80091cc:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=255] parameter
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x8c>
 80091d8:	4b46      	ldr	r3, [pc, #280]	; (80092f4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 80091da:	4a47      	ldr	r2, [pc, #284]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80091dc:	21f7      	movs	r1, #247	; 0xf7
 80091de:	4847      	ldr	r0, [pc, #284]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80091e0:	f005 fc98 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3308      	adds	r3, #8
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d309      	bcc.n	8009202 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xaa>
    {
        out_obj->parameter.count = buffer[offset_bits / 8U] & 255U;
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8009200:	e003      	b.n	800920a <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xb2>
    }
    else
    {
        out_obj->parameter.count = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    }
    offset_bits += 8U;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3308      	adds	r3, #8
 800920e:	61fb      	str	r3, [r7, #28]
    if (out_obj->parameter.count > 255U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009216:	2bff      	cmp	r3, #255	; 0xff
 8009218:	d902      	bls.n	8009220 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xc8>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800921a:	f06f 0309 	mvn.w	r3, #9
 800921e:	e063      	b.n	80092e8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x190>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d006      	beq.n	8009238 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xe0>
 800922a:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 800922c:	4a32      	ldr	r2, [pc, #200]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 800922e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009232:	4832      	ldr	r0, [pc, #200]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 8009234:	f005 fc6e 	bl	800eb14 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->parameter.count; ++_index1_)
 8009238:	2300      	movs	r3, #0
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	e028      	b.n	8009290 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x138>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	2b00      	cmp	r3, #0
 8009246:	d006      	beq.n	8009256 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xfe>
 8009248:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 800924a:	4a2b      	ldr	r2, [pc, #172]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 800924c:	f240 1109 	movw	r1, #265	; 0x109
 8009250:	482a      	ldr	r0, [pc, #168]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 8009252:	f005 fc5f 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3308      	adds	r3, #8
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	429a      	cmp	r2, r3
 800925e:	d30b      	bcc.n	8009278 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x120>
        {
            out_obj->parameter.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	08db      	lsrs	r3, r3, #3
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	4413      	add	r3, r2
 8009268:	7819      	ldrb	r1, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	4413      	add	r3, r2
 8009270:	3304      	adds	r3, #4
 8009272:	460a      	mov	r2, r1
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	e005      	b.n	8009284 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x12c>
        }
        else
        {
            out_obj->parameter.elements[_index1_] = 0U;
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	4413      	add	r3, r2
 800927e:	3304      	adds	r3, #4
 8009280:	2200      	movs	r2, #0
 8009282:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	3308      	adds	r3, #8
 8009288:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->parameter.count; ++_index1_)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	3301      	adds	r3, #1
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	429a      	cmp	r2, r3
 800929a:	d3d0      	bcc.n	800923e <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xe6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3307      	adds	r3, #7
 80092a0:	f023 0307 	bic.w	r3, r3, #7
 80092a4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x166>
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 80092b2:	4a11      	ldr	r2, [pc, #68]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80092b4:	f240 1115 	movw	r1, #277	; 0x115
 80092b8:	4810      	ldr	r0, [pc, #64]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80092ba:	f005 fc2b 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80092be:	6939      	ldr	r1, [r7, #16]
 80092c0:	69f8      	ldr	r0, [r7, #28]
 80092c2:	f7f7 fe1f 	bl	8000f04 <nunavutChooseMin>
 80092c6:	4603      	mov	r3, r0
 80092c8:	08da      	lsrs	r2, r3, #3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d206      	bcs.n	80092e6 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x18e>
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a8>)
 80092da:	4a07      	ldr	r2, [pc, #28]	; (80092f8 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80092dc:	f240 1117 	movw	r1, #279	; 0x117
 80092e0:	4806      	ldr	r0, [pc, #24]	; (80092fc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80092e2:	f005 fc17 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3720      	adds	r7, #32
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08011898 	.word	0x08011898
 80092f4:	08011768 	.word	0x08011768
 80092f8:	08014364 	.word	0x08014364
 80092fc:	08012e9c 	.word	0x08012e9c
 8009300:	0801189c 	.word	0x0801189c

08009304 <uavcan_node_ExecuteCommand_Response_1_3_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Response_1_3_serialize_(
    const uavcan_node_ExecuteCommand_Response_1_3* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8009304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009308:	b098      	sub	sp, #96	; 0x60
 800930a:	af04      	add	r7, sp, #16
 800930c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800930e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009310:	637a      	str	r2, [r7, #52]	; 0x34
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x20>
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x20>
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8009324:	f06f 0301 	mvn.w	r3, #1
 8009328:	e137      	b.n	800959a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	647b      	str	r3, [r7, #68]	; 0x44
    if ((8U * (size_t) capacity_bytes) < 384UL)
 8009330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009338:	d202      	bcs.n	8009340 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800933a:	f06f 0302 	mvn.w	r3, #2
 800933e:	e12c      	b.n	800959a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
    {   // saturated uint8 status
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x58>
 800934e:	4b95      	ldr	r3, [pc, #596]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009350:	4a95      	ldr	r2, [pc, #596]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009352:	f240 1183 	movw	r1, #387	; 0x183
 8009356:	4895      	ldr	r0, [pc, #596]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009358:	f005 fbdc 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 800935c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935e:	2200      	movs	r2, #0
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
 8009362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009364:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009368:	460b      	mov	r3, r1
 800936a:	f113 0a08 	adds.w	sl, r3, #8
 800936e:	4613      	mov	r3, r2
 8009370:	f143 0b00 	adc.w	fp, r3, #0
 8009374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	2200      	movs	r2, #0
 800937a:	623b      	str	r3, [r7, #32]
 800937c:	627a      	str	r2, [r7, #36]	; 0x24
 800937e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009382:	460b      	mov	r3, r1
 8009384:	4553      	cmp	r3, sl
 8009386:	4613      	mov	r3, r2
 8009388:	eb73 030b 	sbcs.w	r3, r3, fp
 800938c:	d206      	bcs.n	800939c <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x98>
 800938e:	4b88      	ldr	r3, [pc, #544]	; (80095b0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2ac>)
 8009390:	4a85      	ldr	r2, [pc, #532]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009392:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8009396:	4885      	ldr	r0, [pc, #532]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009398:	f005 fbbc 	bl	800eb14 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->status);  // C std, 6.3.1.3 Signed and unsigned integers
 800939c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939e:	08db      	lsrs	r3, r3, #3
 80093a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a2:	441a      	add	r2, r3
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	7013      	strb	r3, [r2, #0]
        offset_bits += 8U;
 80093aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ac:	3308      	adds	r3, #8
 80093ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    {   // saturated uint8[<=46] output
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d006      	beq.n	80093c8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0xc4>
 80093ba:	4b7a      	ldr	r3, [pc, #488]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 80093bc:	4a7a      	ldr	r2, [pc, #488]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80093be:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80093c2:	487a      	ldr	r0, [pc, #488]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80093c4:	f005 fba6 	bl	800eb14 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 376ULL) <= (capacity_bytes * 8U));
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	2200      	movs	r2, #0
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	61fa      	str	r2, [r7, #28]
 80093d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093d4:	460b      	mov	r3, r1
 80093d6:	f513 78bc 	adds.w	r8, r3, #376	; 0x178
 80093da:	4613      	mov	r3, r2
 80093dc:	f143 0900 	adc.w	r9, r3, #0
 80093e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	2200      	movs	r2, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	617a      	str	r2, [r7, #20]
 80093ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80093ee:	460b      	mov	r3, r1
 80093f0:	4543      	cmp	r3, r8
 80093f2:	4613      	mov	r3, r2
 80093f4:	eb73 0309 	sbcs.w	r3, r3, r9
 80093f8:	d206      	bcs.n	8009408 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x104>
 80093fa:	4b6e      	ldr	r3, [pc, #440]	; (80095b4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b0>)
 80093fc:	4a6a      	ldr	r2, [pc, #424]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80093fe:	f240 118b 	movw	r1, #395	; 0x18b
 8009402:	486a      	ldr	r0, [pc, #424]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009404:	f005 fb86 	bl	800eb14 <__assert_func>
        if (obj->output.count > 46)
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	2b2e      	cmp	r3, #46	; 0x2e
 800940e:	d902      	bls.n	8009416 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x112>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8009410:	f06f 0309 	mvn.w	r3, #9
 8009414:	e0c1      	b.n	800959a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->output.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800941a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941c:	08db      	lsrs	r3, r3, #3
 800941e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009420:	4413      	add	r3, r2
 8009422:	b2ca      	uxtb	r2, r1
 8009424:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8009426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009428:	3308      	adds	r3, #8
 800942a:	64fb      	str	r3, [r7, #76]	; 0x4c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800942c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b00      	cmp	r3, #0
 8009434:	d006      	beq.n	8009444 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x140>
 8009436:	4b5b      	ldr	r3, [pc, #364]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009438:	4a5b      	ldr	r2, [pc, #364]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800943a:	f240 1193 	movw	r1, #403	; 0x193
 800943e:	485b      	ldr	r0, [pc, #364]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009440:	f005 fb68 	bl	800eb14 <__assert_func>
        for (size_t _index2_ = 0U; _index2_ < obj->output.count; ++_index2_)
 8009444:	2300      	movs	r3, #0
 8009446:	64bb      	str	r3, [r7, #72]	; 0x48
 8009448:	e03a      	b.n	80094c0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x1bc>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800944a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x15e>
 8009454:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009456:	4a54      	ldr	r2, [pc, #336]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009458:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800945c:	4853      	ldr	r0, [pc, #332]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800945e:	f005 fb59 	bl	800eb14 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8009462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009464:	2200      	movs	r2, #0
 8009466:	60bb      	str	r3, [r7, #8]
 8009468:	60fa      	str	r2, [r7, #12]
 800946a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800946e:	460b      	mov	r3, r1
 8009470:	f113 0408 	adds.w	r4, r3, #8
 8009474:	4613      	mov	r3, r2
 8009476:	f143 0500 	adc.w	r5, r3, #0
 800947a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	2200      	movs	r2, #0
 8009480:	603b      	str	r3, [r7, #0]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009488:	460b      	mov	r3, r1
 800948a:	42a3      	cmp	r3, r4
 800948c:	4613      	mov	r3, r2
 800948e:	41ab      	sbcs	r3, r5
 8009490:	d206      	bcs.n	80094a0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x19c>
 8009492:	4b47      	ldr	r3, [pc, #284]	; (80095b0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2ac>)
 8009494:	4a44      	ldr	r2, [pc, #272]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009496:	f240 1197 	movw	r1, #407	; 0x197
 800949a:	4844      	ldr	r0, [pc, #272]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800949c:	f005 fb3a 	bl	800eb14 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->output.elements[_index2_]);  // C std, 6.3.1.3 Signed and unsigned integers
 80094a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a2:	08db      	lsrs	r3, r3, #3
 80094a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a6:	4413      	add	r3, r2
 80094a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ac:	440a      	add	r2, r1
 80094ae:	3204      	adds	r2, #4
 80094b0:	7812      	ldrb	r2, [r2, #0]
 80094b2:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80094b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b6:	3308      	adds	r3, #8
 80094b8:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (size_t _index2_ = 0U; _index2_ < obj->output.count; ++_index2_)
 80094ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094bc:	3301      	adds	r3, #1
 80094be:	64bb      	str	r3, [r7, #72]	; 0x48
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d3bf      	bcc.n	800944a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x146>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80094ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03c      	beq.n	800954e <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x24a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f1c3 0308 	rsb	r3, r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        NUNAVUT_ASSERT(_pad1_ > 0);
 80094e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x1f8>
 80094ee:	4b32      	ldr	r3, [pc, #200]	; (80095b8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b4>)
 80094f0:	4a2d      	ldr	r2, [pc, #180]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80094f2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80094f6:	482d      	ldr	r0, [pc, #180]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80094f8:	f005 fb0c 	bl	800eb14 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80094fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009500:	9302      	str	r3, [sp, #8]
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	e9cd 2300 	strd	r2, r3, [sp]
 800950e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009510:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009514:	f7f7 fea8 	bl	8001268 <nunavutSetUxx>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        if (_err2_ < 0)
 800951e:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8009522:	2b00      	cmp	r3, #0
 8009524:	da02      	bge.n	800952c <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x228>
        {
            return _err2_;
 8009526:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800952a:	e036      	b.n	800959a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
        }
        offset_bits += _pad1_;
 800952c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009532:	4413      	add	r3, r2
 8009534:	64fb      	str	r3, [r7, #76]	; 0x4c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	2b00      	cmp	r3, #0
 800953e:	d006      	beq.n	800954e <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x24a>
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009542:	4a19      	ldr	r2, [pc, #100]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009544:	f240 11a7 	movw	r1, #423	; 0x1a7
 8009548:	4818      	ldr	r0, [pc, #96]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800954a:	f005 fae3 	bl	800eb14 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800954e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009550:	2b0f      	cmp	r3, #15
 8009552:	d806      	bhi.n	8009562 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x25e>
 8009554:	4b19      	ldr	r3, [pc, #100]	; (80095bc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b8>)
 8009556:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009558:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800955c:	4813      	ldr	r0, [pc, #76]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800955e:	f005 fad9 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 384ULL);
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009568:	d906      	bls.n	8009578 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x274>
 800956a:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2bc>)
 800956c:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800956e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8009572:	480e      	ldr	r0, [pc, #56]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009574:	f005 face 	bl	800eb14 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x28c>
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009584:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009586:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800958a:	4808      	ldr	r0, [pc, #32]	; (80095ac <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800958c:	f005 fac2 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8009590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009592:	08da      	lsrs	r2, r3, #3
 8009594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009596:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3750      	adds	r7, #80	; 0x50
 800959e:	46bd      	mov	sp, r7
 80095a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095a4:	08011768 	.word	0x08011768
 80095a8:	08014404 	.word	0x08014404
 80095ac:	08012e9c 	.word	0x08012e9c
 80095b0:	08011830 	.word	0x08011830
 80095b4:	08012f1c 	.word	0x08012f1c
 80095b8:	080119e4 	.word	0x080119e4
 80095bc:	08011e5c 	.word	0x08011e5c
 80095c0:	08012f4c 	.word	0x08012f4c

080095c4 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Response_1_3_deserialize_(
    uavcan_node_ExecuteCommand_Response_1_3* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x26>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d006      	beq.n	80095ea <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x26>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x2c>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80095ea:	f06f 0301 	mvn.w	r3, #1
 80095ee:	e0b5      	b.n	800975c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x198>
    }
    if (buffer == NULL)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80095f6:	4b5b      	ldr	r3, [pc, #364]	; (8009764 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a0>)
 80095f8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
    // saturated uint8 status
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	2b00      	cmp	r3, #0
 8009612:	d006      	beq.n	8009622 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x5e>
 8009614:	4b54      	ldr	r3, [pc, #336]	; (8009768 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009616:	4a55      	ldr	r2, [pc, #340]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009618:	f240 11d3 	movw	r1, #467	; 0x1d3
 800961c:	4854      	ldr	r0, [pc, #336]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 800961e:	f005 fa79 	bl	800eb14 <__assert_func>
    if ((offset_bits + 8U) <= capacity_bits)
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	3308      	adds	r3, #8
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	429a      	cmp	r2, r3
 800962a:	d307      	bcc.n	800963c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x78>
    {
        out_obj->status = buffer[offset_bits / 8U] & 255U;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	08db      	lsrs	r3, r3, #3
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	4413      	add	r3, r2
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	701a      	strb	r2, [r3, #0]
 800963a:	e002      	b.n	8009642 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x7e>
    }
    else
    {
        out_obj->status = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 8U;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	3308      	adds	r3, #8
 8009646:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=46] output
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x9c>
 8009652:	4b45      	ldr	r3, [pc, #276]	; (8009768 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009654:	4a45      	ldr	r2, [pc, #276]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009656:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800965a:	4845      	ldr	r0, [pc, #276]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 800965c:	f005 fa5a 	bl	800eb14 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	3308      	adds	r3, #8
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d308      	bcc.n	800967c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xb8>
    {
        out_obj->output.count = buffer[offset_bits / 8U] & 255U;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	08db      	lsrs	r3, r3, #3
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	635a      	str	r2, [r3, #52]	; 0x34
 800967a:	e002      	b.n	8009682 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xbe>
    }
    else
    {
        out_obj->output.count = 0U;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	635a      	str	r2, [r3, #52]	; 0x34
    }
    offset_bits += 8U;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	3308      	adds	r3, #8
 8009686:	61fb      	str	r3, [r7, #28]
    if (out_obj->output.count > 46U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968c:	2b2e      	cmp	r3, #46	; 0x2e
 800968e:	d902      	bls.n	8009696 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xd2>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8009690:	f06f 0309 	mvn.w	r3, #9
 8009694:	e062      	b.n	800975c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x198>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xea>
 80096a0:	4b31      	ldr	r3, [pc, #196]	; (8009768 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 80096a2:	4a32      	ldr	r2, [pc, #200]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 80096a4:	f240 11ed 	movw	r1, #493	; 0x1ed
 80096a8:	4831      	ldr	r0, [pc, #196]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 80096aa:	f005 fa33 	bl	800eb14 <__assert_func>
    for (size_t _index3_ = 0U; _index3_ < out_obj->output.count; ++_index3_)
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	e028      	b.n	8009706 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x142>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x108>
 80096be:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 80096c0:	4a2a      	ldr	r2, [pc, #168]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 80096c2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80096c6:	482a      	ldr	r0, [pc, #168]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 80096c8:	f005 fa24 	bl	800eb14 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3308      	adds	r3, #8
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d30b      	bcc.n	80096ee <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x12a>
        {
            out_obj->output.elements[_index3_] = buffer[offset_bits / 8U] & 255U;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	08db      	lsrs	r3, r3, #3
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	7819      	ldrb	r1, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	4413      	add	r3, r2
 80096e6:	3304      	adds	r3, #4
 80096e8:	460a      	mov	r2, r1
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	e005      	b.n	80096fa <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x136>
        }
        else
        {
            out_obj->output.elements[_index3_] = 0U;
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	4413      	add	r3, r2
 80096f4:	3304      	adds	r3, #4
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3308      	adds	r3, #8
 80096fe:	61fb      	str	r3, [r7, #28]
    for (size_t _index3_ = 0U; _index3_ < out_obj->output.count; ++_index3_)
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	3301      	adds	r3, #1
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d3d1      	bcc.n	80096b4 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xf0>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	3307      	adds	r3, #7
 8009714:	f023 0307 	bic.w	r3, r3, #7
 8009718:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	2b00      	cmp	r3, #0
 8009722:	d006      	beq.n	8009732 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x16e>
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009726:	4a11      	ldr	r2, [pc, #68]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009728:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800972c:	4810      	ldr	r0, [pc, #64]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 800972e:	f005 f9f1 	bl	800eb14 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8009732:	6939      	ldr	r1, [r7, #16]
 8009734:	69f8      	ldr	r0, [r7, #28]
 8009736:	f7f7 fbe5 	bl	8000f04 <nunavutChooseMin>
 800973a:	4603      	mov	r3, r0
 800973c:	08da      	lsrs	r2, r3, #3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	429a      	cmp	r2, r3
 800974a:	d206      	bcs.n	800975a <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x196>
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1b0>)
 800974e:	4a07      	ldr	r2, [pc, #28]	; (800976c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009750:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8009754:	4806      	ldr	r0, [pc, #24]	; (8009770 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 8009756:	f005 f9dd 	bl	800eb14 <__assert_func>
    return NUNAVUT_SUCCESS;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3720      	adds	r7, #32
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	08011898 	.word	0x08011898
 8009768:	08011768 	.word	0x08011768
 800976c:	080143cc 	.word	0x080143cc
 8009770:	08012e9c 	.word	0x08012e9c
 8009774:	0801189c 	.word	0x0801189c

08009778 <uavcan_node_ExecuteCommand_Response_1_3_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_node_ExecuteCommand_Response_1_3_initialize_(uavcan_node_ExecuteCommand_Response_1_3* const out_obj)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d018      	beq.n	80097b8 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x40>
    {
        size_t size_bytes = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_node_ExecuteCommand_Response_1_3_deserialize_(out_obj, &buf, &size_bytes);
 800978e:	f107 0210 	add.w	r2, r7, #16
 8009792:	f107 030f 	add.w	r3, r7, #15
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff13 	bl	80095c4 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80097a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	da06      	bge.n	80097b8 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x40>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x48>)
 80097ac:	4a05      	ldr	r2, [pc, #20]	; (80097c4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x4c>)
 80097ae:	f240 210d 	movw	r1, #525	; 0x20d
 80097b2:	4805      	ldr	r0, [pc, #20]	; (80097c8 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x50>)
 80097b4:	f005 f9ae 	bl	800eb14 <__assert_func>
        (void) err;
    }
}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	080119f0 	.word	0x080119f0
 80097c4:	08014398 	.word	0x08014398
 80097c8:	08012e9c 	.word	0x08012e9c

080097cc <micros>:
// Application-specific function prototypes
void process_canard_TX_queue(void);

// return useconds - not implemented yet
uint32_t micros(void)
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
  return 0;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <initCyphal>:
/* USER CODE END PFP */
static CanardRxSubscription g_reg_list_service_subscription;

void initCyphal(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af04      	add	r7, sp, #16
    /* Subscribe to Register List Service */
    int8_t result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_register_List_1_0_FIXED_PORT_ID_,
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <initCyphal+0x98>)
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	4a24      	ldr	r2, [pc, #144]	; (8009878 <initCyphal+0x9c>)
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	e9cd 2300 	strd	r2, r3, [sp]
 80097f0:	2302      	movs	r3, #2
 80097f2:	f240 1281 	movw	r2, #385	; 0x181
 80097f6:	2102      	movs	r1, #2
 80097f8:	4820      	ldr	r0, [pc, #128]	; (800987c <initCyphal+0xa0>)
 80097fa:	f003 f939 	bl	800ca70 <canardRxSubscribe>
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
                                      uavcan_register_List_Request_1_0_EXTENT_BYTES_,
                                      CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_reg_list_service_subscription);
    if (result < 0) Error_Handler();
 8009802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	da01      	bge.n	800980e <initCyphal+0x32>
 800980a:	f000 fd5e 	bl	800a2ca <Error_Handler>

    /* Subscribe to Register Access Service */
    result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_register_Access_1_0_FIXED_PORT_ID_,
 800980e:	4b1c      	ldr	r3, [pc, #112]	; (8009880 <initCyphal+0xa4>)
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <initCyphal+0x9c>)
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	e9cd 2300 	strd	r2, r3, [sp]
 800981c:	f240 2303 	movw	r3, #515	; 0x203
 8009820:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009824:	2102      	movs	r1, #2
 8009826:	4815      	ldr	r0, [pc, #84]	; (800987c <initCyphal+0xa0>)
 8009828:	f003 f922 	bl	800ca70 <canardRxSubscribe>
 800982c:	4603      	mov	r3, r0
 800982e:	71fb      	strb	r3, [r7, #7]
                               uavcan_register_Access_Request_1_0_EXTENT_BYTES_,
                               CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_reg_access_service_subscription);
    if (result < 0) Error_Handler();
 8009830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009834:	2b00      	cmp	r3, #0
 8009836:	da01      	bge.n	800983c <initCyphal+0x60>
 8009838:	f000 fd47 	bl	800a2ca <Error_Handler>

    /* Subscribe to ExecuteCommand Service */
    result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_,
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <initCyphal+0xa8>)
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	4a0d      	ldr	r2, [pc, #52]	; (8009878 <initCyphal+0x9c>)
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9cd 2300 	strd	r2, r3, [sp]
 800984a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800984e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8009852:	2102      	movs	r1, #2
 8009854:	4809      	ldr	r0, [pc, #36]	; (800987c <initCyphal+0xa0>)
 8009856:	f003 f90b 	bl	800ca70 <canardRxSubscribe>
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
                               uavcan_node_ExecuteCommand_Request_1_3_EXTENT_BYTES_,
                               CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_exec_command_service_subscription);
    if (result < 0) Error_Handler();
 800985e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	da01      	bge.n	800986a <initCyphal+0x8e>
 8009866:	f000 fd30 	bl	800a2ca <Error_Handler>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	200006c0 	.word	0x200006c0
 8009878:	001e8480 	.word	0x001e8480
 800987c:	20000224 	.word	0x20000224
 8009880:	20000488 	.word	0x20000488
 8009884:	20000260 	.word	0x20000260

08009888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009888:	b5b0      	push	{r4, r5, r7, lr}
 800988a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 800988e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009890:	f003 f9d8 	bl	800cc44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009894:	f000 f8f0 	bl	8009a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009898:	f000 f990 	bl	8009bbc <MX_GPIO_Init>
  MX_CAN1_Init();
 800989c:	f000 f958 	bl	8009b50 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80098a0:	486b      	ldr	r0, [pc, #428]	; (8009a50 <main+0x1c8>)
 80098a2:	f003 fc41 	bl	800d128 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80098a6:	2102      	movs	r1, #2
 80098a8:	4869      	ldr	r0, [pc, #420]	; (8009a50 <main+0x1c8>)
 80098aa:	f003 fe73 	bl	800d594 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef Filter;

  // accept all frames - filtration is managed by software
  Filter.FilterIdHigh = 0x0000;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
  Filter.FilterIdLow = 0x0000;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  Filter.FilterMaskIdHigh = 0x0000;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  Filter.FilterMaskIdLow = 0x0000;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  Filter.FilterBank = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80098d8:	2301      	movs	r3, #1
 80098da:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
  Filter.FilterActivation = ENABLE;
 80098de:	2301      	movs	r3, #1
 80098e0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  Filter.SlaveStartFilterBank = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 80098ea:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80098ee:	4619      	mov	r1, r3
 80098f0:	4857      	ldr	r0, [pc, #348]	; (8009a50 <main+0x1c8>)
 80098f2:	f003 fb39 	bl	800cf68 <HAL_CAN_ConfigFilter>

  // Initialization of a canard instance with the previous allocator
  canard = canardInit(&memAllocate, &memFree);
 80098f6:	4c57      	ldr	r4, [pc, #348]	; (8009a54 <main+0x1cc>)
 80098f8:	463b      	mov	r3, r7
 80098fa:	4a57      	ldr	r2, [pc, #348]	; (8009a58 <main+0x1d0>)
 80098fc:	4957      	ldr	r1, [pc, #348]	; (8009a5c <main+0x1d4>)
 80098fe:	4618      	mov	r0, r3
 8009900:	f002 ff0a 	bl	800c718 <canardInit>
 8009904:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009908:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800990c:	461d      	mov	r5, r3
 800990e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initCyphal();
 800991a:	f7ff ff5f 	bl	80097dc <initCyphal>
  canard.node_id = 96;
 800991e:	4b4d      	ldr	r3, [pc, #308]	; (8009a54 <main+0x1cc>)
 8009920:	2260      	movs	r2, #96	; 0x60
 8009922:	711a      	strb	r2, [r3, #4]

  queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
 8009924:	4c4e      	ldr	r4, [pc, #312]	; (8009a60 <main+0x1d8>)
 8009926:	463b      	mov	r3, r7
 8009928:	2208      	movs	r2, #8
 800992a:	2164      	movs	r1, #100	; 0x64
 800992c:	4618      	mov	r0, r3
 800992e:	f002 ff31 	bl	800c794 <canardTxInit>
 8009932:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009936:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800993a:	461d      	mov	r5, r3
 800993c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800993e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6023      	str	r3, [r4, #0]
                        CANARD_MTU_CAN_CLASSIC);

  CanardRxSubscription subscription; // Transfer subscription state.

  if( canardRxSubscribe((CanardInstance *const)&canard,
 8009944:	f240 6154 	movw	r1, #1620	; 0x654
 8009948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800994c:	9302      	str	r3, [sp, #8]
 800994e:	4a45      	ldr	r2, [pc, #276]	; (8009a64 <main+0x1dc>)
 8009950:	f04f 0300 	mov.w	r3, #0
 8009954:	e9cd 2300 	strd	r2, r3, [sp]
 8009958:	f240 1301 	movw	r3, #257	; 0x101
 800995c:	460a      	mov	r2, r1
 800995e:	2100      	movs	r1, #0
 8009960:	483c      	ldr	r0, [pc, #240]	; (8009a54 <main+0x1cc>)
 8009962:	f003 f885 	bl	800ca70 <canardRxSubscribe>
 8009966:	4603      	mov	r3, r0
 8009968:	2b01      	cmp	r3, #1
 800996a:	d001      	beq.n	8009970 <main+0xe8>
                        MSG_PORT_ID,
                        uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &subscription) != 1 )
                        {
                          Error_Handler();
 800996c:	f000 fcad 	bl	800a2ca <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Create a heartbeat message
    uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 8009970:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009974:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009978:	461a      	mov	r2, r3
 800997a:	2300      	movs	r3, #0
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	6053      	str	r3, [r2, #4]
 8009980:	4b39      	ldr	r3, [pc, #228]	; (8009a68 <main+0x1e0>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009988:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800998c:	601a      	str	r2, [r3, #0]
                                                .health = {uavcan_node_Health_1_0_NOMINAL},
                                                .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

    // Serialize the heartbeat message
    if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 800998e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009992:	4a36      	ldr	r2, [pc, #216]	; (8009a6c <main+0x1e4>)
 8009994:	4936      	ldr	r1, [pc, #216]	; (8009a70 <main+0x1e8>)
 8009996:	4618      	mov	r0, r3
 8009998:	f7f8 ff10 	bl	80027bc <uavcan_node_Heartbeat_1_0_serialize_>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da01      	bge.n	80099a6 <main+0x11e>
    {
      Error_Handler();
 80099a2:	f000 fc92 	bl	800a2ca <Error_Handler>
    }

    // Create a transfer for the heartbeat message
    const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
 80099a6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80099aa:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80099ae:	2204      	movs	r2, #4
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80099b6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80099ba:	2200      	movs	r2, #0
 80099bc:	705a      	strb	r2, [r3, #1]
 80099be:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80099c2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80099c6:	f641 5255 	movw	r2, #7509	; 0x1d55
 80099ca:	805a      	strh	r2, [r3, #2]
 80099cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80099d0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80099d4:	22ff      	movs	r2, #255	; 0xff
 80099d6:	711a      	strb	r2, [r3, #4]
 80099d8:	4b26      	ldr	r3, [pc, #152]	; (8009a74 <main+0x1ec>)
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80099e0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80099e4:	715a      	strb	r2, [r3, #5]
                                                      .transfer_kind = CanardTransferKindMessage,
                                                      .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
                                                      .remote_node_id = CANARD_NODE_ID_UNSET,
                                                      .transfer_id = my_message_transfer_id,};

    if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
 80099e6:	4b21      	ldr	r3, [pc, #132]	; (8009a6c <main+0x1e4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a21      	ldr	r2, [pc, #132]	; (8009a70 <main+0x1e8>)
 80099ec:	9202      	str	r2, [sp, #8]
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	f107 0320 	add.w	r3, r7, #32
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	f04f 0300 	mov.w	r3, #0
 80099fe:	4915      	ldr	r1, [pc, #84]	; (8009a54 <main+0x1cc>)
 8009a00:	4817      	ldr	r0, [pc, #92]	; (8009a60 <main+0x1d8>)
 8009a02:	f002 fee5 	bl	800c7d0 <canardTxPush>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	da01      	bge.n	8009a10 <main+0x188>
                    0,     					// Zero if transmission deadline is not limited.
                    &transfer_metadata,
                    hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
                    hbeat_ser_buf) < 0 )
                    {
                      Error_Handler();
 8009a0c:	f000 fc5d 	bl	800a2ca <Error_Handler>
                    }

    // Block for a second before generating the next transfer
    uint32_t timestamp = HAL_GetTick();
 8009a10:	f003 f97e 	bl	800cd10 <HAL_GetTick>
 8009a14:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
    while( HAL_GetTick() < timestamp + 1000u )
 8009a18:	e004      	b.n	8009a24 <main+0x19c>
    {
      process_canard_TX_queue();
 8009a1a:	f000 f91f 	bl	8009c5c <process_canard_TX_queue>
      HAL_Delay(10);
 8009a1e:	200a      	movs	r0, #10
 8009a20:	f003 f982 	bl	800cd28 <HAL_Delay>
    while( HAL_GetTick() < timestamp + 1000u )
 8009a24:	f003 f974 	bl	800cd10 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009a2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d3f1      	bcc.n	8009a1a <main+0x192>
    }

    // Increase uptime
    test_uptimeSec++;
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <main+0x1e0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <main+0x1e0>)
 8009a3e:	6013      	str	r3, [r2, #0]
    // Increment the transfer_id variable
    my_message_transfer_id++;
 8009a40:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <main+0x1ec>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <main+0x1ec>)
 8009a4a:	701a      	strb	r2, [r3, #0]
  {
 8009a4c:	e790      	b.n	8009970 <main+0xe8>
 8009a4e:	bf00      	nop
 8009a50:	200001fc 	.word	0x200001fc
 8009a54:	20000224 	.word	0x20000224
 8009a58:	0800a2b3 	.word	0x0800a2b3
 8009a5c:	0800a299 	.word	0x0800a299
 8009a60:	20000240 	.word	0x20000240
 8009a64:	001e8480 	.word	0x001e8480
 8009a68:	20000258 	.word	0x20000258
 8009a6c:	20000008 	.word	0x20000008
 8009a70:	200006b0 	.word	0x200006b0
 8009a74:	20000254 	.word	0x20000254

08009a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b094      	sub	sp, #80	; 0x50
 8009a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009a7e:	f107 031c 	add.w	r3, r7, #28
 8009a82:	2234      	movs	r2, #52	; 0x34
 8009a84:	2100      	movs	r1, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f005 feb5 	bl	800f7f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	607b      	str	r3, [r7, #4]
 8009aa0:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <SystemClock_Config+0xd0>)
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	4a28      	ldr	r2, [pc, #160]	; (8009b48 <SystemClock_Config+0xd0>)
 8009aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8009aac:	4b26      	ldr	r3, [pc, #152]	; (8009b48 <SystemClock_Config+0xd0>)
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ab8:	2300      	movs	r3, #0
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4b23      	ldr	r3, [pc, #140]	; (8009b4c <SystemClock_Config+0xd4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a22      	ldr	r2, [pc, #136]	; (8009b4c <SystemClock_Config+0xd4>)
 8009ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <SystemClock_Config+0xd4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009ad0:	603b      	str	r3, [r7, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009adc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009ae8:	2304      	movs	r3, #4
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8009aec:	23a0      	movs	r3, #160	; 0xa0
 8009aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009af0:	2302      	movs	r3, #2
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009af4:	2302      	movs	r3, #2
 8009af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009af8:	2302      	movs	r3, #2
 8009afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009afc:	f107 031c 	add.w	r3, r7, #28
 8009b00:	4618      	mov	r0, r3
 8009b02:	f004 fd69 	bl	800e5d8 <HAL_RCC_OscConfig>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009b0c:	f000 fbdd 	bl	800a2ca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009b10:	230f      	movs	r3, #15
 8009b12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b14:	2302      	movs	r3, #2
 8009b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009b1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009b20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	2105      	movs	r1, #5
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f004 fa3c 	bl	800dfac <HAL_RCC_ClockConfig>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8009b3a:	f000 fbc6 	bl	800a2ca <Error_Handler>
  }
}
 8009b3e:	bf00      	nop
 8009b40:	3750      	adds	r7, #80	; 0x50
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	40007000 	.word	0x40007000

08009b50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009b54:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b56:	4a18      	ldr	r2, [pc, #96]	; (8009bb8 <MX_CAN1_Init+0x68>)
 8009b58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8009b5a:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009b60:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009b66:	4b13      	ldr	r3, [pc, #76]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8009b6c:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b6e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8009b72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009b74:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009b7a:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b8e:	2201      	movs	r2, #1
 8009b90:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009b98:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009b9e:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <MX_CAN1_Init+0x64>)
 8009ba0:	f003 f8e6 	bl	800cd70 <HAL_CAN_Init>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8009baa:	f000 fb8e 	bl	800a2ca <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009bae:	bf00      	nop
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200001fc 	.word	0x200001fc
 8009bb8:	40006400 	.word	0x40006400

08009bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc2:	f107 030c 	add.w	r3, r7, #12
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	609a      	str	r2, [r3, #8]
 8009bce:	60da      	str	r2, [r3, #12]
 8009bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60bb      	str	r3, [r7, #8]
 8009bd6:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	6313      	str	r3, [r2, #48]	; 0x30
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	60bb      	str	r3, [r7, #8]
 8009bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bee:	2300      	movs	r3, #0
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	4b18      	ldr	r3, [pc, #96]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	4a17      	ldr	r2, [pc, #92]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8009bfe:	4b15      	ldr	r3, [pc, #84]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	4b11      	ldr	r3, [pc, #68]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	4a10      	ldr	r2, [pc, #64]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009c14:	f043 0302 	orr.w	r3, r3, #2
 8009c18:	6313      	str	r3, [r2, #48]	; 0x30
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <MX_GPIO_Init+0x98>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2120      	movs	r1, #32
 8009c2a:	480b      	ldr	r0, [pc, #44]	; (8009c58 <MX_GPIO_Init+0x9c>)
 8009c2c:	f004 f9a4 	bl	800df78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009c30:	2320      	movs	r3, #32
 8009c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c34:	2301      	movs	r3, #1
 8009c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4619      	mov	r1, r3
 8009c46:	4804      	ldr	r0, [pc, #16]	; (8009c58 <MX_GPIO_Init+0x9c>)
 8009c48:	f004 f802 	bl	800dc50 <HAL_GPIO_Init>

}
 8009c4c:	bf00      	nop
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40023800 	.word	0x40023800
 8009c58:	40020000 	.word	0x40020000

08009c5c <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
 8009c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c60:	b08b      	sub	sp, #44	; 0x2c
 8009c62:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8009c64:	2300      	movs	r3, #0
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
 8009c68:	e039      	b.n	8009cde <process_canard_TX_queue+0x82>
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	d00c      	beq.n	8009c8e <process_canard_TX_queue+0x32>
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8009c7a:	f7ff fda7 	bl	80097cc <micros>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2200      	movs	r2, #0
 8009c82:	461c      	mov	r4, r3
 8009c84:	4615      	mov	r5, r2
 8009c86:	4544      	cmp	r4, r8
 8009c88:	eb75 0309 	sbcs.w	r3, r5, r9
 8009c8c:	d21d      	bcs.n	8009cca <process_canard_TX_queue+0x6e>
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
 8009c8e:	2304      	movs	r3, #4
 8009c90:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]

      TxHeader.DLC = ti->frame.payload_size;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	61fb      	str	r3, [r7, #28]
      TxHeader.ExtId = ti->frame.extended_can_id;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	613b      	str	r3, [r7, #16]

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009caa:	1d3b      	adds	r3, r7, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f005 fe32 	bl	800f916 <memcpy>

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	1d3a      	adds	r2, r7, #4
 8009cb6:	f107 010c 	add.w	r1, r7, #12
 8009cba:	480f      	ldr	r0, [pc, #60]	; (8009cf8 <process_canard_TX_queue+0x9c>)
 8009cbc:	f003 fa78 	bl	800d1b0 <HAL_CAN_AddTxMessage>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <process_canard_TX_queue+0x6e>
      {
        break;
 8009cc6:	bf00      	nop
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}
 8009cc8:	e010      	b.n	8009cec <process_canard_TX_queue+0x90>
    canard.memory_free(&canard, canardTxPop(&queue, ti));
 8009cca:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <process_canard_TX_queue+0xa0>)
 8009ccc:	68de      	ldr	r6, [r3, #12]
 8009cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cd0:	480b      	ldr	r0, [pc, #44]	; (8009d00 <process_canard_TX_queue+0xa4>)
 8009cd2:	f002 fe1c 	bl	800c90e <canardTxPop>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4808      	ldr	r0, [pc, #32]	; (8009cfc <process_canard_TX_queue+0xa0>)
 8009cdc:	47b0      	blx	r6
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8009cde:	4808      	ldr	r0, [pc, #32]	; (8009d00 <process_canard_TX_queue+0xa4>)
 8009ce0:	f002 fe00 	bl	800c8e4 <canardTxPeek>
 8009ce4:	6278      	str	r0, [r7, #36]	; 0x24
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1be      	bne.n	8009c6a <process_canard_TX_queue+0xe>
}
 8009cec:	bf00      	nop
 8009cee:	372c      	adds	r7, #44	; 0x2c
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200001fc 	.word	0x200001fc
 8009cfc:	20000224 	.word	0x20000224
 8009d00:	20000240 	.word	0x20000240

08009d04 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d08:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8009d0c:	af04      	add	r7, sp, #16
 8009d0e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009d12:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8009d16:	6018      	str	r0, [r3, #0]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0};
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4

    /* Read the pending CAN message */
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8009d24:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8009d28:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8009d2c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009d30:	f2a3 70e4 	subw	r0, r3, #2020	; 0x7e4
 8009d34:	460b      	mov	r3, r1
 8009d36:	2100      	movs	r1, #0
 8009d38:	6800      	ldr	r0, [r0, #0]
 8009d3a:	f003 fb09 	bl	800d350 <HAL_CAN_GetRxMessage>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 8283 	bne.w	800a24c <HAL_CAN_RxFifo0MsgPendingCallback+0x548>
        return; // Error reading CAN message
    }

    /* Wrap into CanardFrame */
    CanardFrame rxf;
    rxf.extended_can_id = RxHeader.ExtId;
 8009d46:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8009d4a:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    rxf.payload_size = RxHeader.DLC;
 8009d4e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8009d52:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
    rxf.payload = RxData;
 8009d56:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8009d5a:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc

    /* Attempt to parse into a CanardRxTransfer */
    CanardRxTransfer transfer;
    if (canardRxAccept(&canard, micros(), &rxf, 0, &transfer, NULL) != 1)
 8009d5e:	f7ff fd35 	bl	80097cc <micros>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2200      	movs	r2, #0
 8009d66:	61bb      	str	r3, [r7, #24]
 8009d68:	61fa      	str	r2, [r7, #28]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8009d72:	9302      	str	r3, [sp, #8]
 8009d74:	2300      	movs	r3, #0
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d82:	48dd      	ldr	r0, [pc, #884]	; (800a0f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8009d84:	f002 fde4 	bl	800c950 <canardRxAccept>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	f040 8260 	bne.w	800a250 <HAL_CAN_RxFifo0MsgPendingCallback+0x54c>
    {
        return; // Not a valid Cyphal transfer or still incomplete
    }

    /* Identify and Handle Requests */
    if (transfer.metadata.transfer_kind == CanardTransferKindRequest)
 8009d90:	f897 37a9 	ldrb.w	r3, [r7, #1961]	; 0x7a9
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	f040 8251 	bne.w	800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x538>
    {
        /* ---- Handle Register List Request (List_1_0) ---- */
        if (transfer.metadata.port_id == uavcan_register_List_1_0_FIXED_PORT_ID_)
 8009d9a:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 8009d9e:	f240 1281 	movw	r2, #385	; 0x181
 8009da2:	4293      	cmp	r3, r2
 8009da4:	f040 8087 	bne.w	8009eb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
        {
            uavcan_register_List_Request_1_0 request;
            size_t request_payload_size = transfer.payload_size;
 8009da8:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8009dac:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0

            if (uavcan_register_List_Request_1_0_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 8009db0:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8009db4:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8009db8:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f8 f931 	bl	8002024 <uavcan_register_List_Request_1_0_deserialize_>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f2c0 8245 	blt.w	800a254 <HAL_CAN_RxFifo0MsgPendingCallback+0x550>
                return;

            uavcan_register_List_Response_1_0 response;
            uavcan_register_List_Response_1_0_initialize_(&response);
 8009dca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f8 fb5a 	bl	8002488 <uavcan_register_List_Response_1_0_initialize_>

            if (request.index < g_num_registers)
 8009dd4:	f8b7 37a4 	ldrh.w	r3, [r7, #1956]	; 0x7a4
 8009dd8:	461a      	mov	r2, r3
 8009dda:	2304      	movs	r3, #4
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d226      	bcs.n	8009e2e <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            {
                const char* reg_name = g_register_names[request.index];
 8009de0:	f8b7 37a4 	ldrh.w	r3, [r7, #1956]	; 0x7a4
 8009de4:	461a      	mov	r2, r3
 8009de6:	4bc5      	ldr	r3, [pc, #788]	; (800a0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8009de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dec:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
                size_t name_len = strlen(reg_name);
 8009df0:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	; 0x7f4
 8009df4:	f7f6 fa6c 	bl	80002d0 <strlen>
 8009df8:	f8c7 0804 	str.w	r0, [r7, #2052]	; 0x804
                if (name_len > 255U) name_len = 255U;
 8009dfc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8009e00:	2bff      	cmp	r3, #255	; 0xff
 8009e02:	d902      	bls.n	8009e0a <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
 8009e04:	23ff      	movs	r3, #255	; 0xff
 8009e06:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
                memcpy(response.name.name.elements, reg_name, name_len);
 8009e0a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009e0e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8009e12:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f005 fd7d 	bl	800f916 <memcpy>
                response.name.name.count = name_len;
 8009e1c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009e20:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009e24:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8009e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009e2c:	e006      	b.n	8009e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
            }
            else
            {
                response.name.name.count = 0U;
 8009e2e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009e32:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            }

            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_register_List_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 8009e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e40:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
            uavcan_register_List_Response_1_0_serialize_(&response, resp_payload, &resp_payload_size);
 8009e44:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8009e48:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8009e4c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7f8 f955 	bl	8002100 <uavcan_register_List_Response_1_0_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 8009e56:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 8009e5a:	f887 3794 	strb.w	r3, [r7, #1940]	; 0x794
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3795 	strb.w	r3, [r7, #1941]	; 0x795
 8009e64:	f240 1381 	movw	r3, #385	; 0x181
 8009e68:	f8a7 3796 	strh.w	r3, [r7, #1942]	; 0x796
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_register_List_1_0_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 8009e6c:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 8009e70:	f887 3798 	strb.w	r3, [r7, #1944]	; 0x798
                .transfer_id = transfer.metadata.transfer_id,
 8009e74:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 8009e78:	f887 3799 	strb.w	r3, [r7, #1945]	; 0x799
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 8009e7c:	f7ff fca6 	bl	80097cc <micros>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2200      	movs	r2, #0
 8009e84:	469a      	mov	sl, r3
 8009e86:	4693      	mov	fp, r2
 8009e88:	4b9d      	ldr	r3, [pc, #628]	; (800a100 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8009e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e8e:	613b      	str	r3, [r7, #16]
 8009e90:	f14b 0300 	adc.w	r3, fp, #0
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8009e9a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8009e9e:	9202      	str	r2, [sp, #8]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009eac:	4992      	ldr	r1, [pc, #584]	; (800a0f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8009eae:	4895      	ldr	r0, [pc, #596]	; (800a104 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8009eb0:	f002 fc8e 	bl	800c7d0 <canardTxPush>
 8009eb4:	e1c2      	b.n	800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x538>
        }

        /* ---- Handle Register Access Request (Access_1_0) ---- */
        else if (transfer.metadata.port_id == uavcan_register_Access_1_0_FIXED_PORT_ID_)
 8009eb6:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 8009eba:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009ebe:	f040 80e8 	bne.w	800a092 <HAL_CAN_RxFifo0MsgPendingCallback+0x38e>
        {
            uavcan_register_Access_Request_1_0 request;
            size_t request_payload_size = transfer.payload_size;
 8009ec2:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8009ec6:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790

            if (uavcan_register_Access_Request_1_0_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 8009eca:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8009ece:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 8009ed2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fbd6 	bl	8008688 <uavcan_register_Access_Request_1_0_deserialize_>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f2c0 81ba 	blt.w	800a258 <HAL_CAN_RxFifo0MsgPendingCallback+0x554>
                return;

            uavcan_register_Access_Response_1_0 response;
            uavcan_register_Access_Response_1_0_initialize_(&response);
 8009ee4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff f90b 	bl	8009104 <uavcan_register_Access_Response_1_0_initialize_>
            uavcan_register_Value_1_0_initialize_(&response.value);
 8009eee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009ef2:	3310      	adds	r3, #16
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fa4f 	bl	8008398 <uavcan_register_Value_1_0_initialize_>

            char reg_name[256] = {0};
 8009efa:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009efe:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	3304      	adds	r3, #4
 8009f08:	22fc      	movs	r2, #252	; 0xfc
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f005 fc72 	bl	800f7f6 <memset>
            memcpy(reg_name, request.name.name.elements, request.name.name.count);
 8009f12:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009f16:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009f1a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009f1e:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8009f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f26:	4618      	mov	r0, r3
 8009f28:	f005 fcf5 	bl	800f916 <memcpy>
            reg_name[request.name.name.count] = '\0';
 8009f2c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009f30:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009f38:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8009f3c:	f2a2 72dc 	subw	r2, r2, #2012	; 0x7dc
 8009f40:	2100      	movs	r1, #0
 8009f42:	54d1      	strb	r1, [r2, r3]

            bool is_write_request = request.value._tag_ != 0;
 8009f44:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009f48:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009f4c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bf14      	ite	ne
 8009f54:	2301      	movne	r3, #1
 8009f56:	2300      	moveq	r3, #0
 8009f58:	f887 37fb 	strb.w	r3, [r7, #2043]	; 0x7fb
            int found_index = -1;
 8009f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f60:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
            for (size_t i = 0; i < g_num_registers; i++)
 8009f64:	2300      	movs	r3, #0
 8009f66:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8009f6a:	e017      	b.n	8009f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x298>
            {
                if (strcmp(reg_name, g_register_names[i]) == 0)
 8009f6c:	4a63      	ldr	r2, [pc, #396]	; (800a0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8009f6e:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8009f72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f6 f947 	bl	8000210 <strcmp>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <HAL_CAN_RxFifo0MsgPendingCallback+0x28e>
                {
                    found_index = i;
 8009f88:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8009f8c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
                    break;
 8009f90:	e009      	b.n	8009fa6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
            for (size_t i = 0; i < g_num_registers; i++)
 8009f92:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8009f96:	3301      	adds	r3, #1
 8009f98:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d3e2      	bcc.n	8009f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
                }
            }

            if (found_index != -1)
 8009fa6:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d02e      	beq.n	800a00e <HAL_CAN_RxFifo0MsgPendingCallback+0x30a>
            {
                if (is_write_request && request.value.natural16.value.count > 0)
 8009fb0:	f897 37fb 	ldrb.w	r3, [r7, #2043]	; 0x7fb
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d012      	beq.n	8009fde <HAL_CAN_RxFifo0MsgPendingCallback+0x2da>
 8009fb8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009fbc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009fc0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <HAL_CAN_RxFifo0MsgPendingCallback+0x2da>
                {
                    g_register_values[found_index] = (uint16_t)request.value.natural16.value.elements[0];
 8009fc8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009fcc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009fd0:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
 8009fd4:	4a4c      	ldr	r2, [pc, #304]	; (800a108 <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8009fd6:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8009fda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                }

                uavcan_register_Value_1_0_select_natural16_(&response.value);
 8009fde:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009fe2:	3310      	adds	r3, #16
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fa12 	bl	800840e <uavcan_register_Value_1_0_select_natural16_>
                response.value.natural16.value.count = 1;
 8009fea:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009fee:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                response.value.natural16.value.elements[0] = g_register_values[found_index];
 8009ff8:	4a43      	ldr	r2, [pc, #268]	; (800a108 <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8009ffa:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8009ffe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a002:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a006:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a00a:	821a      	strh	r2, [r3, #16]
 800a00c:	e005      	b.n	800a01a <HAL_CAN_RxFifo0MsgPendingCallback+0x316>
            }
            else
            {
                uavcan_register_Value_1_0_select_empty_(&response.value);
 800a00e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a012:	3310      	adds	r3, #16
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe f9e9 	bl	80083ec <uavcan_register_Value_1_0_select_empty_>
            }

            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_register_Access_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 800a01a:	f240 130b 	movw	r3, #267	; 0x10b
 800a01e:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
            uavcan_register_Access_Response_1_0_serialize_(&response, resp_payload, &resp_payload_size);
 800a022:	f207 728c 	addw	r2, r7, #1932	; 0x78c
 800a026:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800a02a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fc0e 	bl	8008850 <uavcan_register_Access_Response_1_0_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 800a034:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 800a038:	f887 3784 	strb.w	r3, [r7, #1924]	; 0x784
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 3785 	strb.w	r3, [r7, #1925]	; 0x785
 800a042:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a046:	f8a7 3786 	strh.w	r3, [r7, #1926]	; 0x786
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_register_Access_1_0_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 800a04a:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 800a04e:	f887 3788 	strb.w	r3, [r7, #1928]	; 0x788
                .transfer_id = transfer.metadata.transfer_id,
 800a052:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 800a056:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 800a05a:	f7ff fbb7 	bl	80097cc <micros>
 800a05e:	4603      	mov	r3, r0
 800a060:	2200      	movs	r2, #0
 800a062:	461c      	mov	r4, r3
 800a064:	4615      	mov	r5, r2
 800a066:	4b26      	ldr	r3, [pc, #152]	; (800a100 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 800a068:	18e3      	adds	r3, r4, r3
 800a06a:	60bb      	str	r3, [r7, #8]
 800a06c:	f145 0300 	adc.w	r3, r5, #0
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	f8d7 378c 	ldr.w	r3, [r7, #1932]	; 0x78c
 800a076:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800a07a:	9202      	str	r2, [sp, #8]
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a088:	491b      	ldr	r1, [pc, #108]	; (800a0f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 800a08a:	481e      	ldr	r0, [pc, #120]	; (800a104 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 800a08c:	f002 fba0 	bl	800c7d0 <canardTxPush>
 800a090:	e0d4      	b.n	800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x538>
        }

        /* ---- Handle ExecuteCommand Request (ExecuteCommand_1_3) ---- */
        else if (transfer.metadata.port_id == uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_)
 800a092:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 800a096:	f240 12b3 	movw	r2, #435	; 0x1b3
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f040 80ce 	bne.w	800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x538>
        {
            uavcan_node_ExecuteCommand_Request_1_3 request;
            size_t request_payload_size = transfer.payload_size;
 800a0a0:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 800a0a4:	f8c7 3780 	str.w	r3, [r7, #1920]	; 0x780

            if (uavcan_node_ExecuteCommand_Request_1_3_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 800a0a8:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800a0ac:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800a0b0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff f84f 	bl	8009158 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f2c0 80cd 	blt.w	800a25c <HAL_CAN_RxFifo0MsgPendingCallback+0x558>
                return;

            uavcan_node_ExecuteCommand_Response_1_3 response;
            uavcan_node_ExecuteCommand_Response_1_3_initialize_(&response);
 800a0c2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff fb56 	bl	8009778 <uavcan_node_ExecuteCommand_Response_1_3_initialize_>

            switch (request.command)
 800a0cc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a0d0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d016      	beq.n	800a10c <HAL_CAN_RxFifo0MsgPendingCallback+0x408>
 800a0de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e2:	da5a      	bge.n	800a19a <HAL_CAN_RxFifo0MsgPendingCallback+0x496>
 800a0e4:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d03c      	beq.n	800a166 <HAL_CAN_RxFifo0MsgPendingCallback+0x462>
 800a0ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d021      	beq.n	800a138 <HAL_CAN_RxFifo0MsgPendingCallback+0x434>
 800a0f4:	e051      	b.n	800a19a <HAL_CAN_RxFifo0MsgPendingCallback+0x496>
 800a0f6:	bf00      	nop
 800a0f8:	20000224 	.word	0x20000224
 800a0fc:	08013a7c 	.word	0x08013a7c
 800a100:	000f4240 	.word	0x000f4240
 800a104:	20000240 	.word	0x20000240
 800a108:	20000000 	.word	0x20000000
            {
                case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_RESTART:
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a10c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a110:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Restarting...");
 800a118:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a11c:	3304      	adds	r3, #4
 800a11e:	4a52      	ldr	r2, [pc, #328]	; (800a268 <HAL_CAN_RxFifo0MsgPendingCallback+0x564>)
 800a120:	461c      	mov	r4, r3
 800a122:	4613      	mov	r3, r2
 800a124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a126:	c407      	stmia	r4!, {r0, r1, r2}
 800a128:	8023      	strh	r3, [r4, #0]
                    response.output.count = strlen("Restarting...");
 800a12a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a12e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a132:	220d      	movs	r2, #13
 800a134:	635a      	str	r2, [r3, #52]	; 0x34
                    // Possibly call NVIC_SystemReset() here
                    break;
 800a136:	e046      	b.n	800a1c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c2>

                case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_FACTORY_RESET:
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a138:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a13c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Factory reset...");
 800a144:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a148:	3304      	adds	r3, #4
 800a14a:	4a48      	ldr	r2, [pc, #288]	; (800a26c <HAL_CAN_RxFifo0MsgPendingCallback+0x568>)
 800a14c:	461c      	mov	r4, r3
 800a14e:	4615      	mov	r5, r2
 800a150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	7023      	strb	r3, [r4, #0]
                    response.output.count = strlen("Factory reset...");
 800a158:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a15c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a160:	2210      	movs	r2, #16
 800a162:	635a      	str	r2, [r3, #52]	; 0x34
                    // Implement your custom factory reset logic
                    break;
 800a164:	e02f      	b.n	800a1c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c2>

                case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_STORE_PERSISTENT_STATES:
                    // This is what Yakut uses when we do "yakut reg ... store".
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a166:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a16a:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Storing registers...");
 800a172:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a176:	3304      	adds	r3, #4
 800a178:	4a3d      	ldr	r2, [pc, #244]	; (800a270 <HAL_CAN_RxFifo0MsgPendingCallback+0x56c>)
 800a17a:	461c      	mov	r4, r3
 800a17c:	4615      	mov	r5, r2
 800a17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a182:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a186:	6020      	str	r0, [r4, #0]
 800a188:	3404      	adds	r4, #4
 800a18a:	7021      	strb	r1, [r4, #0]
                    response.output.count = strlen("Storing registers...");
 800a18c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a190:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a194:	2214      	movs	r2, #20
 800a196:	635a      	str	r2, [r3, #52]	; 0x34
                    // Write the code to save your g_register_values to Flash, EEPROM, etc.
                    break;
 800a198:	e015      	b.n	800a1c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c2>

                default:
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_BAD_COMMAND;
 800a19a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a19e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a1a2:	2203      	movs	r2, #3
 800a1a4:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Unknown command");
 800a1a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4a31      	ldr	r2, [pc, #196]	; (800a274 <HAL_CAN_RxFifo0MsgPendingCallback+0x570>)
 800a1ae:	461c      	mov	r4, r3
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    response.output.count = strlen("Unknown command");
 800a1b8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a1bc:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a1c0:	220f      	movs	r2, #15
 800a1c2:	635a      	str	r2, [r3, #52]	; 0x34
                    break;
 800a1c4:	bf00      	nop
            }

            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_node_ExecuteCommand_Response_1_3_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 800a1c6:	2330      	movs	r3, #48	; 0x30
 800a1c8:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
            uavcan_node_ExecuteCommand_Response_1_3_serialize_(&response, resp_payload, &resp_payload_size);
 800a1cc:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 800a1d0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800a1d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff f893 	bl	8009304 <uavcan_node_ExecuteCommand_Response_1_3_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 800a1de:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 800a1e2:	f887 3774 	strb.w	r3, [r7, #1908]	; 0x774
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3775 	strb.w	r3, [r7, #1909]	; 0x775
 800a1ec:	f240 13b3 	movw	r3, #435	; 0x1b3
 800a1f0:	f8a7 3776 	strh.w	r3, [r7, #1910]	; 0x776
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 800a1f4:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 800a1f8:	f887 3778 	strb.w	r3, [r7, #1912]	; 0x778
                .transfer_id = transfer.metadata.transfer_id,
 800a1fc:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 800a200:	f887 3779 	strb.w	r3, [r7, #1913]	; 0x779
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 800a204:	f7ff fae2 	bl	80097cc <micros>
 800a208:	4603      	mov	r3, r0
 800a20a:	2200      	movs	r2, #0
 800a20c:	4698      	mov	r8, r3
 800a20e:	4691      	mov	r9, r2
 800a210:	4b19      	ldr	r3, [pc, #100]	; (800a278 <HAL_CAN_RxFifo0MsgPendingCallback+0x574>)
 800a212:	eb18 0303 	adds.w	r3, r8, r3
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	f149 0300 	adc.w	r3, r9, #0
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	f8d7 377c 	ldr.w	r3, [r7, #1916]	; 0x77c
 800a222:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800a226:	9202      	str	r2, [sp, #8]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	f207 7374 	addw	r3, r7, #1908	; 0x774
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a234:	4911      	ldr	r1, [pc, #68]	; (800a27c <HAL_CAN_RxFifo0MsgPendingCallback+0x578>)
 800a236:	4812      	ldr	r0, [pc, #72]	; (800a280 <HAL_CAN_RxFifo0MsgPendingCallback+0x57c>)
 800a238:	f002 faca 	bl	800c7d0 <canardTxPush>
        }
    }

    /* Free memory used for payload */
    canard.memory_free(&canard, transfer.payload);
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <HAL_CAN_RxFifo0MsgPendingCallback+0x578>)
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800a244:	4611      	mov	r1, r2
 800a246:	480d      	ldr	r0, [pc, #52]	; (800a27c <HAL_CAN_RxFifo0MsgPendingCallback+0x578>)
 800a248:	4798      	blx	r3
 800a24a:	e008      	b.n	800a25e <HAL_CAN_RxFifo0MsgPendingCallback+0x55a>
        return; // Error reading CAN message
 800a24c:	bf00      	nop
 800a24e:	e006      	b.n	800a25e <HAL_CAN_RxFifo0MsgPendingCallback+0x55a>
        return; // Not a valid Cyphal transfer or still incomplete
 800a250:	bf00      	nop
 800a252:	e004      	b.n	800a25e <HAL_CAN_RxFifo0MsgPendingCallback+0x55a>
                return;
 800a254:	bf00      	nop
 800a256:	e002      	b.n	800a25e <HAL_CAN_RxFifo0MsgPendingCallback+0x55a>
                return;
 800a258:	bf00      	nop
 800a25a:	e000      	b.n	800a25e <HAL_CAN_RxFifo0MsgPendingCallback+0x55a>
                return;
 800a25c:	bf00      	nop
}
 800a25e:	f607 0708 	addw	r7, r7, #2056	; 0x808
 800a262:	46bd      	mov	sp, r7
 800a264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a268:	08012fa8 	.word	0x08012fa8
 800a26c:	08012fb8 	.word	0x08012fb8
 800a270:	08012fcc 	.word	0x08012fcc
 800a274:	08012fe4 	.word	0x08012fe4
 800a278:	000f4240 	.word	0x000f4240
 800a27c:	20000224 	.word	0x20000224
 800a280:	20000240 	.word	0x20000240

0800a284 <HAL_CAN_RxFifo1MsgPendingCallback>:


#pragma optimize=s none
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  return ;
 800a28c:	bf00      	nop
}
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <memAllocate>:

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  (void) ins;
  return malloc(amount);
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	f004 fc54 	bl	800eb50 <malloc>
 800a2a8:	4603      	mov	r3, r0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 800a2bc:	6838      	ldr	r0, [r7, #0]
 800a2be:	f004 fc4f 	bl	800eb60 <free>
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ce:	b672      	cpsid	i
}
 800a2d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a2d2:	e7fe      	b.n	800a2d2 <Error_Handler+0x8>

0800a2d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2da:	2300      	movs	r3, #0
 800a2dc:	607b      	str	r3, [r7, #4]
 800a2de:	4b10      	ldr	r3, [pc, #64]	; (800a320 <HAL_MspInit+0x4c>)
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	4a0f      	ldr	r2, [pc, #60]	; (800a320 <HAL_MspInit+0x4c>)
 800a2e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <HAL_MspInit+0x4c>)
 800a2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2f2:	607b      	str	r3, [r7, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	603b      	str	r3, [r7, #0]
 800a2fa:	4b09      	ldr	r3, [pc, #36]	; (800a320 <HAL_MspInit+0x4c>)
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	4a08      	ldr	r2, [pc, #32]	; (800a320 <HAL_MspInit+0x4c>)
 800a300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a304:	6413      	str	r3, [r2, #64]	; 0x40
 800a306:	4b06      	ldr	r3, [pc, #24]	; (800a320 <HAL_MspInit+0x4c>)
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a312:	2007      	movs	r0, #7
 800a314:	f003 fc5a 	bl	800dbcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40023800 	.word	0x40023800

0800a324 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	; 0x28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a1d      	ldr	r2, [pc, #116]	; (800a3b8 <HAL_CAN_MspInit+0x94>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d134      	bne.n	800a3b0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
 800a34a:	4b1c      	ldr	r3, [pc, #112]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	4a1b      	ldr	r2, [pc, #108]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a354:	6413      	str	r3, [r2, #64]	; 0x40
 800a356:	4b19      	ldr	r3, [pc, #100]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4a14      	ldr	r2, [pc, #80]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a36c:	f043 0301 	orr.w	r3, r3, #1
 800a370:	6313      	str	r3, [r2, #48]	; 0x30
 800a372:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <HAL_CAN_MspInit+0x98>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a37e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a384:	2302      	movs	r3, #2
 800a386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38c:	2303      	movs	r3, #3
 800a38e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a390:	2309      	movs	r3, #9
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a394:	f107 0314 	add.w	r3, r7, #20
 800a398:	4619      	mov	r1, r3
 800a39a:	4809      	ldr	r0, [pc, #36]	; (800a3c0 <HAL_CAN_MspInit+0x9c>)
 800a39c:	f003 fc58 	bl	800dc50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	2014      	movs	r0, #20
 800a3a6:	f003 fc1c 	bl	800dbe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a3aa:	2014      	movs	r0, #20
 800a3ac:	f003 fc35 	bl	800dc1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a3b0:	bf00      	nop
 800a3b2:	3728      	adds	r7, #40	; 0x28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	40006400 	.word	0x40006400
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40020000 	.word	0x40020000

0800a3c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a3c8:	e7fe      	b.n	800a3c8 <NMI_Handler+0x4>

0800a3ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a3ce:	e7fe      	b.n	800a3ce <HardFault_Handler+0x4>

0800a3d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a3d4:	e7fe      	b.n	800a3d4 <MemManage_Handler+0x4>

0800a3d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a3da:	e7fe      	b.n	800a3da <BusFault_Handler+0x4>

0800a3dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a3e0:	e7fe      	b.n	800a3e0 <UsageFault_Handler+0x4>

0800a3e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a3e6:	bf00      	nop
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a3fe:	b480      	push	{r7}
 800a400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a402:	bf00      	nop
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a410:	f002 fc6a 	bl	800cce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a414:	bf00      	nop
 800a416:	bd80      	pop	{r7, pc}

0800a418 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a41c:	4802      	ldr	r0, [pc, #8]	; (800a428 <CAN1_RX0_IRQHandler+0x10>)
 800a41e:	f003 f8df 	bl	800d5e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a422:	bf00      	nop
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	200001fc 	.word	0x200001fc

0800a42c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a42c:	b480      	push	{r7}
 800a42e:	af00      	add	r7, sp, #0
  return 1;
 800a430:	2301      	movs	r3, #1
}
 800a432:	4618      	mov	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <_kill>:

int _kill(int pid, int sig)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a446:	f005 fa39 	bl	800f8bc <__errno>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2216      	movs	r2, #22
 800a44e:	601a      	str	r2, [r3, #0]
  return -1;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <_exit>:

void _exit (int status)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a464:	f04f 31ff 	mov.w	r1, #4294967295
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ffe7 	bl	800a43c <_kill>
  while (1) {}    /* Make sure we hang here */
 800a46e:	e7fe      	b.n	800a46e <_exit+0x12>

0800a470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	e00a      	b.n	800a498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a482:	f3af 8000 	nop.w
 800a486:	4601      	mov	r1, r0
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	60ba      	str	r2, [r7, #8]
 800a48e:	b2ca      	uxtb	r2, r1
 800a490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	3301      	adds	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	dbf0      	blt.n	800a482 <_read+0x12>
  }

  return len;
 800a4a0:	687b      	ldr	r3, [r7, #4]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b086      	sub	sp, #24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e009      	b.n	800a4d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	60ba      	str	r2, [r7, #8]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	dbf1      	blt.n	800a4bc <_write+0x12>
  }
  return len;
 800a4d8:	687b      	ldr	r3, [r7, #4]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_close>:

int _close(int file)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a4ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a50a:	605a      	str	r2, [r3, #4]
  return 0;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <_isatty>:

int _isatty(int file)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a522:	2301      	movs	r3, #1
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a554:	4a14      	ldr	r2, [pc, #80]	; (800a5a8 <_sbrk+0x5c>)
 800a556:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <_sbrk+0x60>)
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a560:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <_sbrk+0x64>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <_sbrk+0x64>)
 800a56a:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <_sbrk+0x68>)
 800a56c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a56e:	4b10      	ldr	r3, [pc, #64]	; (800a5b0 <_sbrk+0x64>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4413      	add	r3, r2
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d207      	bcs.n	800a58c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a57c:	f005 f99e 	bl	800f8bc <__errno>
 800a580:	4603      	mov	r3, r0
 800a582:	220c      	movs	r2, #12
 800a584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a586:	f04f 33ff 	mov.w	r3, #4294967295
 800a58a:	e009      	b.n	800a5a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a58c:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <_sbrk+0x64>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a592:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <_sbrk+0x64>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4413      	add	r3, r2
 800a59a:	4a05      	ldr	r2, [pc, #20]	; (800a5b0 <_sbrk+0x64>)
 800a59c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a59e:	68fb      	ldr	r3, [r7, #12]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20020000 	.word	0x20020000
 800a5ac:	00000400 	.word	0x00000400
 800a5b0:	200008e8 	.word	0x200008e8
 800a5b4:	20000a40 	.word	0x20000a40

0800a5b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a5bc:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <SystemInit+0x20>)
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	4a05      	ldr	r2, [pc, #20]	; (800a5d8 <SystemInit+0x20>)
 800a5c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	e000ed00 	.word	0xe000ed00

0800a5dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a5dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a5e0:	f7ff ffea 	bl	800a5b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a5e4:	480c      	ldr	r0, [pc, #48]	; (800a618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a5e6:	490d      	ldr	r1, [pc, #52]	; (800a61c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a5e8:	4a0d      	ldr	r2, [pc, #52]	; (800a620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a5ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a5ec:	e002      	b.n	800a5f4 <LoopCopyDataInit>

0800a5ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a5ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a5f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a5f2:	3304      	adds	r3, #4

0800a5f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a5f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a5f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a5f8:	d3f9      	bcc.n	800a5ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a5fa:	4a0a      	ldr	r2, [pc, #40]	; (800a624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a5fc:	4c0a      	ldr	r4, [pc, #40]	; (800a628 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a5fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a600:	e001      	b.n	800a606 <LoopFillZerobss>

0800a602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a604:	3204      	adds	r2, #4

0800a606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a608:	d3fb      	bcc.n	800a602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800a60a:	f005 f95d 	bl	800f8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a60e:	f7ff f93b 	bl	8009888 <main>
  bx  lr    
 800a612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a61c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800a620:	08014c90 	.word	0x08014c90
  ldr r2, =_sbss
 800a624:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800a628:	20000a3c 	.word	0x20000a3c

0800a62c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a62c:	e7fe      	b.n	800a62c <ADC_IRQHandler>

0800a62e <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800a642:	e007      	b.n	800a654 <cavlFindExtremum+0x26>
    {
        result = c;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f4      	bne.n	800a644 <cavlFindExtremum+0x16>
    }
    return result;
 800a65a:	68fb      	ldr	r3, [r7, #12]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d014      	beq.n	800a6a4 <cavlPrivateRotate+0x3c>
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	f083 0301 	eor.w	r3, r3, #1
 800a680:	b2db      	uxtb	r3, r3
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <cavlPrivateRotate+0x3c>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a698:	db04      	blt.n	800a6a4 <cavlPrivateRotate+0x3c>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	dd05      	ble.n	800a6b0 <cavlPrivateRotate+0x48>
 800a6a4:	4b2a      	ldr	r3, [pc, #168]	; (800a750 <cavlPrivateRotate+0xe8>)
 800a6a6:	4a2b      	ldr	r2, [pc, #172]	; (800a754 <cavlPrivateRotate+0xec>)
 800a6a8:	2162      	movs	r1, #98	; 0x62
 800a6aa:	482b      	ldr	r0, [pc, #172]	; (800a758 <cavlPrivateRotate+0xf0>)
 800a6ac:	f004 fa32 	bl	800eb14 <__assert_func>
    Cavl* const z = x->lr[!r];
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	f083 0301 	eor.w	r3, r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00e      	beq.n	800a6e8 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	bf0c      	ite	eq
 800a6da:	2301      	moveq	r3, #1
 800a6dc:	2300      	movne	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	78fa      	ldrb	r2, [r7, #3]
 800a6fa:	f082 0201 	eor.w	r2, r2, #1
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	4610      	mov	r0, r2
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	0083      	lsls	r3, r0, #2
 800a70e:	440b      	add	r3, r1
 800a710:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	f083 0301 	eor.w	r3, r3, #1
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	f083 0301 	eor.w	r3, r3, #1
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	605a      	str	r2, [r3, #4]
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	08012ff4 	.word	0x08012ff4
 800a754:	080147b4 	.word	0x080147b4
 800a758:	0801304c 	.word	0x0801304c

0800a75c <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <cavlPrivateAdjustBalance+0x28>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	db04      	blt.n	800a784 <cavlPrivateAdjustBalance+0x28>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a780:	2b01      	cmp	r3, #1
 800a782:	dd05      	ble.n	800a790 <cavlPrivateAdjustBalance+0x34>
 800a784:	4b61      	ldr	r3, [pc, #388]	; (800a90c <cavlPrivateAdjustBalance+0x1b0>)
 800a786:	4a62      	ldr	r2, [pc, #392]	; (800a910 <cavlPrivateAdjustBalance+0x1b4>)
 800a788:	2177      	movs	r1, #119	; 0x77
 800a78a:	4862      	ldr	r0, [pc, #392]	; (800a914 <cavlPrivateAdjustBalance+0x1b8>)
 800a78c:	f004 f9c2 	bl	800eb14 <__assert_func>
    Cavl*        out    = x;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	78fa      	ldrb	r2, [r7, #3]
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	d001      	beq.n	800a7a6 <cavlPrivateAdjustBalance+0x4a>
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	e000      	b.n	800a7a8 <cavlPrivateAdjustBalance+0x4c>
 800a7a6:	22ff      	movs	r2, #255	; 0xff
 800a7a8:	4413      	add	r3, r2
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800a7ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	db04      	blt.n	800a7c2 <cavlPrivateAdjustBalance+0x66>
 800a7b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	f340 809c 	ble.w	800a8fa <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800a7c2:	7cfb      	ldrb	r3, [r7, #19]
 800a7c4:	09db      	lsrs	r3, r3, #7
 800a7c6:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800a7c8:	7cbb      	ldrb	r3, [r7, #18]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <cavlPrivateAdjustBalance+0x76>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e001      	b.n	800a7d6 <cavlPrivateAdjustBalance+0x7a>
 800a7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d6:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800a7d8:	7cbb      	ldrb	r3, [r7, #18]
 800a7da:	f083 0301 	eor.w	r3, r3, #1
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d105      	bne.n	800a7fc <cavlPrivateAdjustBalance+0xa0>
 800a7f0:	4b49      	ldr	r3, [pc, #292]	; (800a918 <cavlPrivateAdjustBalance+0x1bc>)
 800a7f2:	4a47      	ldr	r2, [pc, #284]	; (800a910 <cavlPrivateAdjustBalance+0x1b4>)
 800a7f4:	217f      	movs	r1, #127	; 0x7f
 800a7f6:	4847      	ldr	r0, [pc, #284]	; (800a914 <cavlPrivateAdjustBalance+0x1b8>)
 800a7f8:	f004 f98c 	bl	800eb14 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a802:	461a      	mov	r2, r3
 800a804:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a808:	fb02 f303 	mul.w	r3, r2, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dc1c      	bgt.n	800a84a <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800a814:	7cbb      	ldrb	r3, [r7, #18]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ff25 	bl	800a668 <cavlPrivateRotate>
            if (0 == z->bf)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d109      	bne.n	800a83c <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800a828:	7c7b      	ldrb	r3, [r7, #17]
 800a82a:	425b      	negs	r3, r3
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	b25a      	sxtb	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	7c7a      	ldrb	r2, [r7, #17]
 800a838:	731a      	strb	r2, [r3, #12]
    {
 800a83a:	e061      	b.n	800a900 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	731a      	strb	r2, [r3, #12]
    {
 800a848:	e05a      	b.n	800a900 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800a84a:	7cbb      	ldrb	r3, [r7, #18]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <cavlPrivateAdjustBalance+0x10c>
 800a85c:	4b2f      	ldr	r3, [pc, #188]	; (800a91c <cavlPrivateAdjustBalance+0x1c0>)
 800a85e:	4a2c      	ldr	r2, [pc, #176]	; (800a910 <cavlPrivateAdjustBalance+0x1b4>)
 800a860:	2192      	movs	r1, #146	; 0x92
 800a862:	482c      	ldr	r0, [pc, #176]	; (800a914 <cavlPrivateAdjustBalance+0x1b8>)
 800a864:	f004 f956 	bl	800eb14 <__assert_func>
            out = y;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800a86c:	7cbb      	ldrb	r3, [r7, #18]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bf14      	ite	ne
 800a872:	2301      	movne	r3, #1
 800a874:	2300      	moveq	r3, #0
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f083 0301 	eor.w	r3, r3, #1
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	b2db      	uxtb	r3, r3
 800a884:	4619      	mov	r1, r3
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff feee 	bl	800a668 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800a88c:	7cbb      	ldrb	r3, [r7, #18]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fee9 	bl	800a668 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a89c:	461a      	mov	r2, r3
 800a89e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a8a2:	fb02 f303 	mul.w	r3, r2, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da09      	bge.n	800a8be <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7c7a      	ldrb	r2, [r7, #17]
 800a8ae:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	731a      	strb	r2, [r3, #12]
    {
 800a8bc:	e020      	b.n	800a900 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	dd0c      	ble.n	800a8ec <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800a8de:	7c7b      	ldrb	r3, [r7, #17]
 800a8e0:	425b      	negs	r3, r3
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	b25a      	sxtb	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	731a      	strb	r2, [r3, #12]
    {
 800a8ea:	e009      	b.n	800a900 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	731a      	strb	r2, [r3, #12]
    {
 800a8f8:	e002      	b.n	800a900 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7cfa      	ldrb	r2, [r7, #19]
 800a8fe:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800a900:	697b      	ldr	r3, [r7, #20]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	08013080 	.word	0x08013080
 800a910:	08014798 	.word	0x08014798
 800a914:	0801304c 	.word	0x0801304c
 800a918:	080130b8 	.word	0x080130b8
 800a91c:	080130cc 	.word	0x080130cc

0800a920 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <cavlPrivateRetraceOnGrowth+0x18>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <cavlPrivateRetraceOnGrowth+0x24>
 800a938:	4b23      	ldr	r3, [pc, #140]	; (800a9c8 <cavlPrivateRetraceOnGrowth+0xa8>)
 800a93a:	4a24      	ldr	r2, [pc, #144]	; (800a9cc <cavlPrivateRetraceOnGrowth+0xac>)
 800a93c:	21b5      	movs	r1, #181	; 0xb5
 800a93e:	4824      	ldr	r0, [pc, #144]	; (800a9d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 800a940:	f004 f8e8 	bl	800eb14 <__assert_func>
    Cavl* c = added;      // Child
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800a94e:	e023      	b.n	800a998 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	429a      	cmp	r2, r3
 800a958:	bf0c      	ite	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	2300      	movne	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d005      	beq.n	800a97c <cavlPrivateRetraceOnGrowth+0x5c>
 800a970:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <cavlPrivateRetraceOnGrowth+0xb4>)
 800a972:	4a16      	ldr	r2, [pc, #88]	; (800a9cc <cavlPrivateRetraceOnGrowth+0xac>)
 800a974:	21bb      	movs	r1, #187	; 0xbb
 800a976:	4816      	ldr	r0, [pc, #88]	; (800a9d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 800a978:	f004 f8cc 	bl	800eb14 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	4619      	mov	r1, r3
 800a980:	6938      	ldr	r0, [r7, #16]
 800a982:	f7ff feeb 	bl	800a75c <cavlPrivateAdjustBalance>
 800a986:	6178      	str	r0, [r7, #20]
        p = c->up;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1d8      	bne.n	800a950 <cavlPrivateRetraceOnGrowth+0x30>
 800a99e:	e000      	b.n	800a9a2 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800a9a0:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <cavlPrivateRetraceOnGrowth+0x94>
 800a9a8:	4b0b      	ldr	r3, [pc, #44]	; (800a9d8 <cavlPrivateRetraceOnGrowth+0xb8>)
 800a9aa:	4a08      	ldr	r2, [pc, #32]	; (800a9cc <cavlPrivateRetraceOnGrowth+0xac>)
 800a9ac:	21c3      	movs	r1, #195	; 0xc3
 800a9ae:	4808      	ldr	r0, [pc, #32]	; (800a9d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 800a9b0:	f004 f8b0 	bl	800eb14 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <cavlPrivateRetraceOnGrowth+0x9e>
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	e000      	b.n	800a9c0 <cavlPrivateRetraceOnGrowth+0xa0>
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	080130e0 	.word	0x080130e0
 800a9cc:	0801477c 	.word	0x0801477c
 800a9d0:	0801304c 	.word	0x0801304c
 800a9d4:	0801310c 	.word	0x0801310c
 800a9d8:	0801311c 	.word	0x0801311c

0800a9dc <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	; 0x28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d065      	beq.n	800aac0 <cavlSearch+0xe4>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d062      	beq.n	800aac0 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800aa04:	e02f      	b.n	800aa66 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	4798      	blx	r3
 800aa12:	4603      	mov	r3, r0
 800aa14:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800aa16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <cavlSearch+0x4a>
            {
                out = *n;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800aa24:	e023      	b.n	800aa6e <cavlSearch+0x92>
            }
            up = *n;
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfcc      	ite	gt
 800aa38:	2301      	movgt	r3, #1
 800aa3a:	2300      	movle	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	3304      	adds	r3, #4
 800aa44:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <cavlSearch+0x8a>
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6a3a      	ldr	r2, [r7, #32]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d005      	beq.n	800aa66 <cavlSearch+0x8a>
 800aa5a:	4b1c      	ldr	r3, [pc, #112]	; (800aacc <cavlSearch+0xf0>)
 800aa5c:	4a1c      	ldr	r2, [pc, #112]	; (800aad0 <cavlSearch+0xf4>)
 800aa5e:	21db      	movs	r1, #219	; 0xdb
 800aa60:	481c      	ldr	r0, [pc, #112]	; (800aad4 <cavlSearch+0xf8>)
 800aa62:	f004 f857 	bl	800eb14 <__assert_func>
        while (*n != NULL)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1cb      	bne.n	800aa06 <cavlSearch+0x2a>
        }
        if (NULL == out)
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d125      	bne.n	800aac0 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <cavlSearch+0xa8>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68b8      	ldr	r0, [r7, #8]
 800aa7e:	4798      	blx	r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	e000      	b.n	800aa86 <cavlSearch+0xaa>
 800aa84:	2300      	movs	r3, #0
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d018      	beq.n	800aac0 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa92:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	6a3a      	ldr	r2, [r7, #32]
 800aaa4:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800aaac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaae:	f7ff ff37 	bl	800a920 <cavlPrivateRetraceOnGrowth>
 800aab2:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <cavlSearch+0xe4>
                {
                    *root = rt;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3728      	adds	r7, #40	; 0x28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	08013130 	.word	0x08013130
 800aad0:	08014770 	.word	0x08014770
 800aad4:	0801304c 	.word	0x0801304c

0800aad8 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8116 	beq.w	800ad16 <cavlRemove+0x23e>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8112 	beq.w	800ad16 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <cavlRemove+0x2e>
 800aafa:	4b89      	ldr	r3, [pc, #548]	; (800ad20 <cavlRemove+0x248>)
 800aafc:	4a89      	ldr	r2, [pc, #548]	; (800ad24 <cavlRemove+0x24c>)
 800aafe:	21f6      	movs	r1, #246	; 0xf6
 800ab00:	4889      	ldr	r0, [pc, #548]	; (800ad28 <cavlRemove+0x250>)
 800ab02:	f004 f807 	bl	800eb14 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <cavlRemove+0x4c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d005      	beq.n	800ab24 <cavlRemove+0x4c>
 800ab18:	4b84      	ldr	r3, [pc, #528]	; (800ad2c <cavlRemove+0x254>)
 800ab1a:	4a82      	ldr	r2, [pc, #520]	; (800ad24 <cavlRemove+0x24c>)
 800ab1c:	21f7      	movs	r1, #247	; 0xf7
 800ab1e:	4882      	ldr	r0, [pc, #520]	; (800ad28 <cavlRemove+0x250>)
 800ab20:	f003 fff8 	bl	800eb14 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800ab28:	2300      	movs	r3, #0
 800ab2a:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d073      	beq.n	800ac1c <cavlRemove+0x144>
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d06f      	beq.n	800ac1c <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff fd73 	bl	800a62e <cavlFindExtremum>
 800ab48:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d007      	beq.n	800ab60 <cavlRemove+0x88>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <cavlRemove+0x88>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d105      	bne.n	800ab6c <cavlRemove+0x94>
 800ab60:	4b73      	ldr	r3, [pc, #460]	; (800ad30 <cavlRemove+0x258>)
 800ab62:	4a70      	ldr	r2, [pc, #448]	; (800ad24 <cavlRemove+0x24c>)
 800ab64:	21ff      	movs	r1, #255	; 0xff
 800ab66:	4870      	ldr	r0, [pc, #448]	; (800ad28 <cavlRemove+0x250>)
 800ab68:	f003 ffd4 	bl	800eb14 <__assert_func>
            re->bf        = node->bf;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d025      	beq.n	800abdc <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d006      	beq.n	800abae <cavlRemove+0xd6>
 800aba0:	4b64      	ldr	r3, [pc, #400]	; (800ad34 <cavlRemove+0x25c>)
 800aba2:	4a60      	ldr	r2, [pc, #384]	; (800ad24 <cavlRemove+0x24c>)
 800aba4:	f44f 7183 	mov.w	r1, #262	; 0x106
 800aba8:	485f      	ldr	r0, [pc, #380]	; (800ad28 <cavlRemove+0x250>)
 800abaa:	f003 ffb3 	bl	800eb14 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	601a      	str	r2, [r3, #0]
                r             = false;
 800abd6:	2300      	movs	r3, #0
 800abd8:	76fb      	strb	r3, [r7, #27]
 800abda:	e003      	b.n	800abe4 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800abe0:	2301      	movs	r3, #1
 800abe2:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00f      	beq.n	800ac14 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	4299      	cmp	r1, r3
 800ac02:	bf0c      	ite	eq
 800ac04:	2301      	moveq	r3, #1
 800ac06:	2300      	movne	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	605a      	str	r2, [r3, #4]
        {
 800ac12:	e046      	b.n	800aca2 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	601a      	str	r2, [r3, #0]
        {
 800ac1a:	e042      	b.n	800aca2 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800ac30:	7cfb      	ldrb	r3, [r7, #19]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d006      	beq.n	800ac4c <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800ac3e:	7cfb      	ldrb	r3, [r7, #19]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d020      	beq.n	800ac94 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	bf0c      	ite	eq
 800ac5c:	2301      	moveq	r3, #1
 800ac5e:	2300      	movne	r3, #0
 800ac60:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800ac62:	7cfb      	ldrb	r3, [r7, #19]
 800ac64:	7ef8      	ldrb	r0, [r7, #27]
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	69f9      	ldr	r1, [r7, #28]
 800ac70:	0083      	lsls	r3, r0, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800ac76:	7efb      	ldrb	r3, [r7, #27]
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800ac84:	7efb      	ldrb	r3, [r7, #27]
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e006      	b.n	800aca2 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800ac94:	7cfb      	ldrb	r3, [r7, #19]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d036      	beq.n	800ad16 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800acac:	7efb      	ldrb	r3, [r7, #27]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bf14      	ite	ne
 800acb2:	2301      	movne	r3, #1
 800acb4:	2300      	moveq	r3, #0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f083 0301 	eor.w	r3, r3, #1
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	4619      	mov	r1, r3
 800acc6:	69f8      	ldr	r0, [r7, #28]
 800acc8:	f7ff fd48 	bl	800a75c <cavlPrivateAdjustBalance>
 800accc:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <cavlRemove+0x21e>
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d008      	beq.n	800acf6 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	429a      	cmp	r2, r3
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800acf4:	e7da      	b.n	800acac <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10c      	bne.n	800ad16 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <cavlRemove+0x238>
 800ad02:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <cavlRemove+0x260>)
 800ad04:	4a07      	ldr	r2, [pc, #28]	; (800ad24 <cavlRemove+0x24c>)
 800ad06:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800ad0a:	4807      	ldr	r0, [pc, #28]	; (800ad28 <cavlRemove+0x250>)
 800ad0c:	f003 ff02 	bl	800eb14 <__assert_func>
                *root = c;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800ad16:	bf00      	nop
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	08013158 	.word	0x08013158
 800ad24:	080147f8 	.word	0x080147f8
 800ad28:	0801304c 	.word	0x0801304c
 800ad2c:	08013170 	.word	0x08013170
 800ad30:	080131a0 	.word	0x080131a0
 800ad34:	080131f0 	.word	0x080131f0
 800ad38:	0801311c 	.word	0x0801311c

0800ad3c <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800ad44:	687b      	ldr	r3, [r7, #4]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
	...

0800ad54 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	460a      	mov	r2, r1
 800ad5e:	80fb      	strh	r3, [r7, #6]
 800ad60:	4613      	mov	r3, r2
 800ad62:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800ad64:	88fb      	ldrh	r3, [r7, #6]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	0a1b      	lsrs	r3, r3, #8
 800ad6e:	b299      	uxth	r1, r3
 800ad70:	797b      	ldrb	r3, [r7, #5]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	404b      	eors	r3, r1
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	4905      	ldr	r1, [pc, #20]	; (800ad90 <crcAddByte+0x3c>)
 800ad7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800ad80:	4053      	eors	r3, r2
 800ad82:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	08014448 	.word	0x08014448

0800ad94 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d108      	bne.n	800adba <crcAdd+0x26>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d005      	beq.n	800adba <crcAdd+0x26>
 800adae:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <crcAdd+0x64>)
 800adb0:	4a12      	ldr	r2, [pc, #72]	; (800adfc <crcAdd+0x68>)
 800adb2:	2189      	movs	r1, #137	; 0x89
 800adb4:	4812      	ldr	r0, [pc, #72]	; (800ae00 <crcAdd+0x6c>)
 800adb6:	f003 fead 	bl	800eb14 <__assert_func>
    TransferCRC    out = crc;
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	e00e      	b.n	800ade6 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	8bfb      	ldrh	r3, [r7, #30]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7ff ffbf 	bl	800ad54 <crcAddByte>
 800add6:	4603      	mov	r3, r0
 800add8:	83fb      	strh	r3, [r7, #30]
        ++p;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	3301      	adds	r3, #1
 800adde:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	3301      	adds	r3, #1
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	429a      	cmp	r2, r3
 800adec:	d3ec      	bcc.n	800adc8 <crcAdd+0x34>
    }
    return out;
 800adee:	8bfb      	ldrh	r3, [r7, #30]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	08013200 	.word	0x08013200
 800adfc:	080146c4 	.word	0x080146c4
 800ae00:	08013228 	.word	0x08013228

0800ae04 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	460a      	mov	r2, r1
 800ae0e:	80fb      	strh	r3, [r7, #6]
 800ae10:	4613      	mov	r3, r2
 800ae12:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800ae14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	da05      	bge.n	800ae28 <txMakeMessageSessionSpecifier+0x24>
 800ae1c:	4b0e      	ldr	r3, [pc, #56]	; (800ae58 <txMakeMessageSessionSpecifier+0x54>)
 800ae1e:	4a0f      	ldr	r2, [pc, #60]	; (800ae5c <txMakeMessageSessionSpecifier+0x58>)
 800ae20:	21ab      	movs	r1, #171	; 0xab
 800ae22:	480f      	ldr	r0, [pc, #60]	; (800ae60 <txMakeMessageSessionSpecifier+0x5c>)
 800ae24:	f003 fe76 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2e:	d305      	bcc.n	800ae3c <txMakeMessageSessionSpecifier+0x38>
 800ae30:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <txMakeMessageSessionSpecifier+0x60>)
 800ae32:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <txMakeMessageSessionSpecifier+0x58>)
 800ae34:	21ac      	movs	r1, #172	; 0xac
 800ae36:	480a      	ldr	r0, [pc, #40]	; (800ae60 <txMakeMessageSessionSpecifier+0x5c>)
 800ae38:	f003 fe6c 	bl	800eb14 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800ae3c:	88fb      	ldrh	r3, [r7, #6]
 800ae3e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800ae46:	797a      	ldrb	r2, [r7, #5]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	4313      	orrs	r3, r2
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	08013258 	.word	0x08013258
 800ae5c:	080146cc 	.word	0x080146cc
 800ae60:	08013228 	.word	0x08013228
 800ae64:	0801326c 	.word	0x0801326c

0800ae68 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	461a      	mov	r2, r3
 800ae76:	4623      	mov	r3, r4
 800ae78:	80fb      	strh	r3, [r7, #6]
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	717b      	strb	r3, [r7, #5]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	713b      	strb	r3, [r7, #4]
 800ae82:	4613      	mov	r3, r2
 800ae84:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800ae86:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da05      	bge.n	800ae9a <txMakeServiceSessionSpecifier+0x32>
 800ae8e:	4b17      	ldr	r3, [pc, #92]	; (800aeec <txMakeServiceSessionSpecifier+0x84>)
 800ae90:	4a17      	ldr	r2, [pc, #92]	; (800aef0 <txMakeServiceSessionSpecifier+0x88>)
 800ae92:	21b6      	movs	r1, #182	; 0xb6
 800ae94:	4817      	ldr	r0, [pc, #92]	; (800aef4 <txMakeServiceSessionSpecifier+0x8c>)
 800ae96:	f003 fe3d 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800ae9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da05      	bge.n	800aeae <txMakeServiceSessionSpecifier+0x46>
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <txMakeServiceSessionSpecifier+0x90>)
 800aea4:	4a12      	ldr	r2, [pc, #72]	; (800aef0 <txMakeServiceSessionSpecifier+0x88>)
 800aea6:	21b7      	movs	r1, #183	; 0xb7
 800aea8:	4812      	ldr	r0, [pc, #72]	; (800aef4 <txMakeServiceSessionSpecifier+0x8c>)
 800aeaa:	f003 fe33 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb4:	d305      	bcc.n	800aec2 <txMakeServiceSessionSpecifier+0x5a>
 800aeb6:	4b11      	ldr	r3, [pc, #68]	; (800aefc <txMakeServiceSessionSpecifier+0x94>)
 800aeb8:	4a0d      	ldr	r2, [pc, #52]	; (800aef0 <txMakeServiceSessionSpecifier+0x88>)
 800aeba:	21b8      	movs	r1, #184	; 0xb8
 800aebc:	480d      	ldr	r0, [pc, #52]	; (800aef4 <txMakeServiceSessionSpecifier+0x8c>)
 800aebe:	f003 fe29 	bl	800eb14 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800aec2:	793a      	ldrb	r2, [r7, #4]
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	01db      	lsls	r3, r3, #7
 800aec8:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800aeca:	88fb      	ldrh	r3, [r7, #6]
 800aecc:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800aece:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800aed0:	797a      	ldrb	r2, [r7, #5]
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	d002      	beq.n	800aedc <txMakeServiceSessionSpecifier+0x74>
 800aed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aeda:	e000      	b.n	800aede <txMakeServiceSessionSpecifier+0x76>
 800aedc:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800aede:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800aee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}
 800aeec:	08013258 	.word	0x08013258
 800aef0:	080146ec 	.word	0x080146ec
 800aef4:	08013228 	.word	0x08013228
 800aef8:	08013280 	.word	0x08013280
 800aefc:	08013294 	.word	0x08013294

0800af00 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b07      	cmp	r3, #7
 800af14:	d802      	bhi.n	800af1c <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800af16:	2308      	movs	r3, #8
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e014      	b.n	800af46 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	429a      	cmp	r2, r3
 800af22:	d808      	bhi.n	800af36 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800af24:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <adjustPresentationLayerMTU+0x58>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4413      	add	r3, r2
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <adjustPresentationLayerMTU+0x5c>)
 800af30:	5c9b      	ldrb	r3, [r3, r2]
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e007      	b.n	800af46 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800af36:	4a08      	ldr	r2, [pc, #32]	; (800af58 <adjustPresentationLayerMTU+0x58>)
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4413      	add	r3, r2
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <adjustPresentationLayerMTU+0x5c>)
 800af42:	5c9b      	ldrb	r3, [r3, r2]
 800af44:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3b01      	subs	r3, #1
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	08014658 	.word	0x08014658
 800af5c:	08014648 	.word	0x08014648

0800af60 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d105      	bne.n	800af80 <txMakeCANID+0x20>
 800af74:	4b60      	ldr	r3, [pc, #384]	; (800b0f8 <txMakeCANID+0x198>)
 800af76:	4a61      	ldr	r2, [pc, #388]	; (800b0fc <txMakeCANID+0x19c>)
 800af78:	21d8      	movs	r1, #216	; 0xd8
 800af7a:	4861      	ldr	r0, [pc, #388]	; (800b100 <txMakeCANID+0x1a0>)
 800af7c:	f003 fdca 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <txMakeCANID+0x32>
 800af86:	4b5f      	ldr	r3, [pc, #380]	; (800b104 <txMakeCANID+0x1a4>)
 800af88:	4a5c      	ldr	r2, [pc, #368]	; (800b0fc <txMakeCANID+0x19c>)
 800af8a:	21d9      	movs	r1, #217	; 0xd9
 800af8c:	485c      	ldr	r0, [pc, #368]	; (800b100 <txMakeCANID+0x1a0>)
 800af8e:	f003 fdc1 	bl	800eb14 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800af92:	f06f 0301 	mvn.w	r3, #1
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d157      	bne.n	800b050 <txMakeCANID+0xf0>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	791b      	ldrb	r3, [r3, #4]
 800afa4:	2bff      	cmp	r3, #255	; 0xff
 800afa6:	d153      	bne.n	800b050 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800afac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb0:	d24e      	bcs.n	800b050 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800afb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	db11      	blt.n	800afde <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	885b      	ldrh	r3, [r3, #2]
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	4611      	mov	r1, r2
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff ff1e 	bl	800ae04 <txMakeMessageSessionSpecifier>
 800afc8:	4603      	mov	r3, r0
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da75      	bge.n	800b0be <txMakeCANID+0x15e>
 800afd2:	4b4d      	ldr	r3, [pc, #308]	; (800b108 <txMakeCANID+0x1a8>)
 800afd4:	4a49      	ldr	r2, [pc, #292]	; (800b0fc <txMakeCANID+0x19c>)
 800afd6:	21e1      	movs	r1, #225	; 0xe1
 800afd8:	4849      	ldr	r0, [pc, #292]	; (800b100 <txMakeCANID+0x1a0>)
 800afda:	f003 fd9b 	bl	800eb14 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d830      	bhi.n	800b048 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d108      	bne.n	800affe <txMakeCANID+0x9e>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <txMakeCANID+0x9e>
 800aff2:	4b46      	ldr	r3, [pc, #280]	; (800b10c <txMakeCANID+0x1ac>)
 800aff4:	4a41      	ldr	r2, [pc, #260]	; (800b0fc <txMakeCANID+0x19c>)
 800aff6:	21e5      	movs	r1, #229	; 0xe5
 800aff8:	4841      	ldr	r0, [pc, #260]	; (800b100 <txMakeCANID+0x1a0>)
 800affa:	f003 fd8b 	bl	800eb14 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b006:	f7ff fec5 	bl	800ad94 <crcAdd>
 800b00a:	4603      	mov	r3, r0
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	885b      	ldrh	r3, [r3, #2]
 800b01a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff feef 	bl	800ae04 <txMakeMessageSessionSpecifier>
 800b026:	4603      	mov	r3, r0
 800b028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b02c:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b034:	d305      	bcc.n	800b042 <txMakeCANID+0xe2>
 800b036:	4b36      	ldr	r3, [pc, #216]	; (800b110 <txMakeCANID+0x1b0>)
 800b038:	4a30      	ldr	r2, [pc, #192]	; (800b0fc <txMakeCANID+0x19c>)
 800b03a:	21e8      	movs	r1, #232	; 0xe8
 800b03c:	4830      	ldr	r0, [pc, #192]	; (800b100 <txMakeCANID+0x1a0>)
 800b03e:	f003 fd69 	bl	800eb14 <__assert_func>
            out = (int32_t) spec;
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b046:	e03a      	b.n	800b0be <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800b048:	f06f 0301 	mvn.w	r3, #1
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b04e:	e036      	b.n	800b0be <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d003      	beq.n	800b060 <txMakeCANID+0x100>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d12a      	bne.n	800b0b6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	791b      	ldrb	r3, [r3, #4]
 800b064:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b066:	2b00      	cmp	r3, #0
 800b068:	db25      	blt.n	800b0b6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	885b      	ldrh	r3, [r3, #2]
 800b06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b072:	d220      	bcs.n	800b0b6 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	db18      	blt.n	800b0ae <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b084:	2b02      	cmp	r3, #2
 800b086:	bf0c      	ite	eq
 800b088:	2301      	moveq	r3, #1
 800b08a:	2300      	movne	r3, #0
 800b08c:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b092:	78fa      	ldrb	r2, [r7, #3]
 800b094:	f7ff fee8 	bl	800ae68 <txMakeServiceSessionSpecifier>
 800b098:	4603      	mov	r3, r0
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	da0f      	bge.n	800b0c2 <txMakeCANID+0x162>
 800b0a2:	4b19      	ldr	r3, [pc, #100]	; (800b108 <txMakeCANID+0x1a8>)
 800b0a4:	4a15      	ldr	r2, [pc, #84]	; (800b0fc <txMakeCANID+0x19c>)
 800b0a6:	21f9      	movs	r1, #249	; 0xf9
 800b0a8:	4815      	ldr	r0, [pc, #84]	; (800b100 <txMakeCANID+0x1a0>)
 800b0aa:	f003 fd33 	bl	800eb14 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800b0ae:	f06f 0301 	mvn.w	r3, #1
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b0b4:	e005      	b.n	800b0c2 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b0b6:	f06f 0301 	mvn.w	r3, #1
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b0bc:	e002      	b.n	800b0c4 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b0be:	bf00      	nop
 800b0c0:	e000      	b.n	800b0c4 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b0c2:	bf00      	nop
    }

    if (out >= 0)
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	db10      	blt.n	800b0ec <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	2b07      	cmp	r3, #7
 800b0d4:	d807      	bhi.n	800b0e6 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	069a      	lsls	r2, r3, #26
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e4:	e002      	b.n	800b0ec <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b0e6:	f06f 0301 	mvn.w	r3, #1
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3728      	adds	r7, #40	; 0x28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	080132a8 	.word	0x080132a8
 800b0fc:	080146b8 	.word	0x080146b8
 800b100:	08013228 	.word	0x08013228
 800b104:	080132bc 	.word	0x080132bc
 800b108:	080132d8 	.word	0x080132d8
 800b10c:	080132e4 	.word	0x080132e4
 800b110:	08013318 	.word	0x08013318

0800b114 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	461a      	mov	r2, r3
 800b122:	4623      	mov	r3, r4
 800b124:	71fb      	strb	r3, [r7, #7]
 800b126:	4603      	mov	r3, r0
 800b128:	71bb      	strb	r3, [r7, #6]
 800b12a:	460b      	mov	r3, r1
 800b12c:	717b      	strb	r3, [r7, #5]
 800b12e:	4613      	mov	r3, r2
 800b130:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d009      	beq.n	800b14c <txMakeTailByte+0x38>
 800b138:	797b      	ldrb	r3, [r7, #5]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d006      	beq.n	800b14c <txMakeTailByte+0x38>
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <txMakeTailByte+0x78>)
 800b140:	4a13      	ldr	r2, [pc, #76]	; (800b190 <txMakeTailByte+0x7c>)
 800b142:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800b146:	4813      	ldr	r0, [pc, #76]	; (800b194 <txMakeTailByte+0x80>)
 800b148:	f003 fce4 	bl	800eb14 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b14c:	79fb      	ldrb	r3, [r7, #7]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <txMakeTailByte+0x42>
 800b152:	2280      	movs	r2, #128	; 0x80
 800b154:	e000      	b.n	800b158 <txMakeTailByte+0x44>
 800b156:	2200      	movs	r2, #0
 800b158:	79bb      	ldrb	r3, [r7, #6]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <txMakeTailByte+0x4e>
 800b15e:	2340      	movs	r3, #64	; 0x40
 800b160:	e000      	b.n	800b164 <txMakeTailByte+0x50>
 800b162:	2300      	movs	r3, #0
 800b164:	4313      	orrs	r3, r2
 800b166:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800b168:	797a      	ldrb	r2, [r7, #5]
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	d001      	beq.n	800b172 <txMakeTailByte+0x5e>
 800b16e:	2220      	movs	r2, #32
 800b170:	e000      	b.n	800b174 <txMakeTailByte+0x60>
 800b172:	2200      	movs	r2, #0
 800b174:	4313      	orrs	r3, r2
 800b176:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800b178:	793b      	ldrb	r3, [r7, #4]
 800b17a:	f003 031f 	and.w	r3, r3, #31
 800b17e:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b180:	4313      	orrs	r3, r2
 800b182:	b2db      	uxtb	r3, r3
}
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd90      	pop	{r4, r7, pc}
 800b18c:	08013334 	.word	0x08013334
 800b190:	08014760 	.word	0x08014760
 800b194:	08013228 	.word	0x08013228

0800b198 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	d906      	bls.n	800b1b4 <txRoundFramePayloadSizeUp+0x1c>
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <txRoundFramePayloadSizeUp+0x4c>)
 800b1a8:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <txRoundFramePayloadSizeUp+0x50>)
 800b1aa:	f240 1123 	movw	r1, #291	; 0x123
 800b1ae:	480f      	ldr	r0, [pc, #60]	; (800b1ec <txRoundFramePayloadSizeUp+0x54>)
 800b1b0:	f003 fcb0 	bl	800eb14 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800b1b4:	4a0e      	ldr	r2, [pc, #56]	; (800b1f0 <txRoundFramePayloadSizeUp+0x58>)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b0f      	cmp	r3, #15
 800b1c2:	d906      	bls.n	800b1d2 <txRoundFramePayloadSizeUp+0x3a>
 800b1c4:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <txRoundFramePayloadSizeUp+0x5c>)
 800b1c6:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <txRoundFramePayloadSizeUp+0x50>)
 800b1c8:	f44f 7193 	mov.w	r1, #294	; 0x126
 800b1cc:	4807      	ldr	r0, [pc, #28]	; (800b1ec <txRoundFramePayloadSizeUp+0x54>)
 800b1ce:	f003 fca1 	bl	800eb14 <__assert_func>
    return CanardCANDLCToLength[y];
 800b1d2:	4a09      	ldr	r2, [pc, #36]	; (800b1f8 <txRoundFramePayloadSizeUp+0x60>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	781b      	ldrb	r3, [r3, #0]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0801335c 	.word	0x0801335c
 800b1e8:	08014730 	.word	0x08014730
 800b1ec:	08013228 	.word	0x08013228
 800b1f0:	08014658 	.word	0x08014658
 800b1f4:	080133a4 	.word	0x080133a4
 800b1f8:	08014648 	.word	0x08014648

0800b1fc <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <txAllocateQueueItem+0x22>
 800b210:	4b1f      	ldr	r3, [pc, #124]	; (800b290 <txAllocateQueueItem+0x94>)
 800b212:	4a20      	ldr	r2, [pc, #128]	; (800b294 <txAllocateQueueItem+0x98>)
 800b214:	f44f 7198 	mov.w	r1, #304	; 0x130
 800b218:	481f      	ldr	r0, [pc, #124]	; (800b298 <txAllocateQueueItem+0x9c>)
 800b21a:	f003 fc7b 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d106      	bne.n	800b232 <txAllocateQueueItem+0x36>
 800b224:	4b1d      	ldr	r3, [pc, #116]	; (800b29c <txAllocateQueueItem+0xa0>)
 800b226:	4a1b      	ldr	r2, [pc, #108]	; (800b294 <txAllocateQueueItem+0x98>)
 800b228:	f240 1131 	movw	r1, #305	; 0x131
 800b22c:	481a      	ldr	r0, [pc, #104]	; (800b298 <txAllocateQueueItem+0x9c>)
 800b22e:	f003 fc71 	bl	800eb14 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	3230      	adds	r2, #48	; 0x30
 800b23a:	4611      	mov	r1, r2
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	4798      	blx	r3
 800b240:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d01e      	beq.n	800b286 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2200      	movs	r2, #0
 800b258:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2200      	movs	r2, #0
 800b25e:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	2200      	movs	r2, #0
 800b264:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800b266:	6979      	ldr	r1, [r7, #20]
 800b268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b26c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	6a3a      	ldr	r2, [r7, #32]
 800b274:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	621a      	str	r2, [r3, #32]
    }
    return out;
 800b286:	697b      	ldr	r3, [r7, #20]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	080133ec 	.word	0x080133ec
 800b294:	0801474c 	.word	0x0801474c
 800b298:	08013228 	.word	0x08013228
 800b29c:	08013400 	.word	0x08013400

0800b2a0 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <txAVLPredicate+0x1e>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <txAVLPredicate+0x2c>
 800b2be:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <txAVLPredicate+0x48>)
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <txAVLPredicate+0x4c>)
 800b2c2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b2c6:	480a      	ldr	r0, [pc, #40]	; (800b2f0 <txAVLPredicate+0x50>)
 800b2c8:	f003 fc24 	bl	800eb14 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a1a      	ldr	r2, [r3, #32]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d301      	bcc.n	800b2dc <txAVLPredicate+0x3c>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e001      	b.n	800b2e0 <txAVLPredicate+0x40>
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	08013414 	.word	0x08013414
 800b2ec:	08014720 	.word	0x08014720
 800b2f0:	08013228 	.word	0x08013228

0800b2f4 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b08d      	sub	sp, #52	; 0x34
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <txPushSingleFrame+0x22>
 800b308:	4b5c      	ldr	r3, [pc, #368]	; (800b47c <txPushSingleFrame+0x188>)
 800b30a:	4a5d      	ldr	r2, [pc, #372]	; (800b480 <txPushSingleFrame+0x18c>)
 800b30c:	f240 1159 	movw	r1, #345	; 0x159
 800b310:	485c      	ldr	r0, [pc, #368]	; (800b484 <txPushSingleFrame+0x190>)
 800b312:	f003 fbff 	bl	800eb14 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800b316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <txPushSingleFrame+0x3c>
 800b31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <txPushSingleFrame+0x3c>
 800b322:	4b59      	ldr	r3, [pc, #356]	; (800b488 <txPushSingleFrame+0x194>)
 800b324:	4a56      	ldr	r2, [pc, #344]	; (800b480 <txPushSingleFrame+0x18c>)
 800b326:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800b32a:	4856      	ldr	r0, [pc, #344]	; (800b484 <txPushSingleFrame+0x190>)
 800b32c:	f003 fbf2 	bl	800eb14 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b332:	3301      	adds	r3, #1
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff ff2f 	bl	800b198 <txRoundFramePayloadSizeUp>
 800b33a:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800b33c:	6a3a      	ldr	r2, [r7, #32]
 800b33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b340:	429a      	cmp	r2, r3
 800b342:	d806      	bhi.n	800b352 <txPushSingleFrame+0x5e>
 800b344:	4b51      	ldr	r3, [pc, #324]	; (800b48c <txPushSingleFrame+0x198>)
 800b346:	4a4e      	ldr	r2, [pc, #312]	; (800b480 <txPushSingleFrame+0x18c>)
 800b348:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b34c:	484d      	ldr	r0, [pc, #308]	; (800b484 <txPushSingleFrame+0x190>)
 800b34e:	f003 fbe1 	bl	800eb14 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800b352:	6a3a      	ldr	r2, [r7, #32]
 800b354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	3b01      	subs	r3, #1
 800b35a:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b360:	4413      	add	r3, r2
 800b362:	3301      	adds	r3, #1
 800b364:	6a3a      	ldr	r2, [r7, #32]
 800b366:	429a      	cmp	r2, r3
 800b368:	d006      	beq.n	800b378 <txPushSingleFrame+0x84>
 800b36a:	4b49      	ldr	r3, [pc, #292]	; (800b490 <txPushSingleFrame+0x19c>)
 800b36c:	4a44      	ldr	r2, [pc, #272]	; (800b480 <txPushSingleFrame+0x18c>)
 800b36e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800b372:	4844      	ldr	r0, [pc, #272]	; (800b484 <txPushSingleFrame+0x190>)
 800b374:	f003 fbce 	bl	800eb14 <__assert_func>
    int32_t       out = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d209      	bcs.n	800b39c <txPushSingleFrame+0xa8>
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b392:	68b8      	ldr	r0, [r7, #8]
 800b394:	f7ff ff32 	bl	800b1fc <txAllocateQueueItem>
 800b398:	4603      	mov	r3, r0
 800b39a:	e000      	b.n	800b39e <txPushSingleFrame+0xaa>
 800b39c:	2300      	movs	r3, #0
    TxItem* const tqi =
 800b39e:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d054      	beq.n	800b450 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800b3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d010      	beq.n	800b3ce <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800b3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <txPushSingleFrame+0xcc>
 800b3b2:	4b38      	ldr	r3, [pc, #224]	; (800b494 <txPushSingleFrame+0x1a0>)
 800b3b4:	4a32      	ldr	r2, [pc, #200]	; (800b480 <txPushSingleFrame+0x18c>)
 800b3b6:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b3ba:	4832      	ldr	r0, [pc, #200]	; (800b484 <txPushSingleFrame+0x190>)
 800b3bc:	f003 fbaa 	bl	800eb14 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	3330      	adds	r3, #48	; 0x30
 800b3c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f004 faa4 	bl	800f916 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800b3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d0:	3330      	adds	r3, #48	; 0x30
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f004 fa0b 	bl	800f7f6 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	1e5c      	subs	r4, r3, #1
 800b3e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	f7ff fe91 	bl	800b114 <txMakeTailByte>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	4423      	add	r3, r4
 800b3fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f103 000c 	add.w	r0, r3, #12
 800b404:	69b9      	ldr	r1, [r7, #24]
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <txPushSingleFrame+0x1a4>)
 800b408:	4a24      	ldr	r2, [pc, #144]	; (800b49c <txPushSingleFrame+0x1a8>)
 800b40a:	f7ff fae7 	bl	800a9dc <cavlSearch>
 800b40e:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	429a      	cmp	r2, r3
 800b416:	d006      	beq.n	800b426 <txPushSingleFrame+0x132>
 800b418:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <txPushSingleFrame+0x1ac>)
 800b41a:	4a19      	ldr	r2, [pc, #100]	; (800b480 <txPushSingleFrame+0x18c>)
 800b41c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800b420:	4818      	ldr	r0, [pc, #96]	; (800b484 <txPushSingleFrame+0x190>)
 800b422:	f003 fb77 	bl	800eb14 <__assert_func>
        que->size++;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d906      	bls.n	800b44a <txPushSingleFrame+0x156>
 800b43c:	4b19      	ldr	r3, [pc, #100]	; (800b4a4 <txPushSingleFrame+0x1b0>)
 800b43e:	4a10      	ldr	r2, [pc, #64]	; (800b480 <txPushSingleFrame+0x18c>)
 800b440:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800b444:	480f      	ldr	r0, [pc, #60]	; (800b484 <txPushSingleFrame+0x190>)
 800b446:	f003 fb65 	bl	800eb14 <__assert_func>
        out = 1;  // One frame enqueued.
 800b44a:	2301      	movs	r3, #1
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
 800b44e:	e002      	b.n	800b456 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800b450:	f06f 0302 	mvn.w	r3, #2
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	2b00      	cmp	r3, #0
 800b45a:	db09      	blt.n	800b470 <txPushSingleFrame+0x17c>
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d006      	beq.n	800b470 <txPushSingleFrame+0x17c>
 800b462:	4b11      	ldr	r3, [pc, #68]	; (800b4a8 <txPushSingleFrame+0x1b4>)
 800b464:	4a06      	ldr	r2, [pc, #24]	; (800b480 <txPushSingleFrame+0x18c>)
 800b466:	f240 117b 	movw	r1, #379	; 0x17b
 800b46a:	4806      	ldr	r0, [pc, #24]	; (800b484 <txPushSingleFrame+0x190>)
 800b46c:	f003 fb52 	bl	800eb14 <__assert_func>
    return out;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b472:	4618      	mov	r0, r3
 800b474:	372c      	adds	r7, #44	; 0x2c
 800b476:	46bd      	mov	sp, r7
 800b478:	bd90      	pop	{r4, r7, pc}
 800b47a:	bf00      	nop
 800b47c:	080133ec 	.word	0x080133ec
 800b480:	0801470c 	.word	0x0801470c
 800b484:	08013228 	.word	0x08013228
 800b488:	08013448 	.word	0x08013448
 800b48c:	08013478 	.word	0x08013478
 800b490:	0801349c 	.word	0x0801349c
 800b494:	080134d8 	.word	0x080134d8
 800b498:	0800ad3d 	.word	0x0800ad3d
 800b49c:	0800b2a1 	.word	0x0800b2a1
 800b4a0:	080134f0 	.word	0x080134f0
 800b4a4:	08013508 	.word	0x08013508
 800b4a8:	08013524 	.word	0x08013524

0800b4ac <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800b4ac:	b590      	push	{r4, r7, lr}
 800b4ae:	b093      	sub	sp, #76	; 0x4c
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <txGenerateMultiFrameChain+0x20>
 800b4be:	4b93      	ldr	r3, [pc, #588]	; (800b70c <txGenerateMultiFrameChain+0x260>)
 800b4c0:	4a93      	ldr	r2, [pc, #588]	; (800b710 <txGenerateMultiFrameChain+0x264>)
 800b4c2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800b4c6:	4893      	ldr	r0, [pc, #588]	; (800b714 <txGenerateMultiFrameChain+0x268>)
 800b4c8:	f003 fb24 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <txGenerateMultiFrameChain+0x34>
 800b4d2:	4b91      	ldr	r3, [pc, #580]	; (800b718 <txGenerateMultiFrameChain+0x26c>)
 800b4d4:	4a8e      	ldr	r2, [pc, #568]	; (800b710 <txGenerateMultiFrameChain+0x264>)
 800b4d6:	f240 1189 	movw	r1, #393	; 0x189
 800b4da:	488e      	ldr	r0, [pc, #568]	; (800b714 <txGenerateMultiFrameChain+0x268>)
 800b4dc:	f003 fb1a 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b4e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d806      	bhi.n	800b4f6 <txGenerateMultiFrameChain+0x4a>
 800b4e8:	4b8c      	ldr	r3, [pc, #560]	; (800b71c <txGenerateMultiFrameChain+0x270>)
 800b4ea:	4a89      	ldr	r2, [pc, #548]	; (800b710 <txGenerateMultiFrameChain+0x264>)
 800b4ec:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800b4f0:	4888      	ldr	r0, [pc, #544]	; (800b714 <txGenerateMultiFrameChain+0x268>)
 800b4f2:	f003 fb0f 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800b4f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d106      	bne.n	800b50a <txGenerateMultiFrameChain+0x5e>
 800b4fc:	4b88      	ldr	r3, [pc, #544]	; (800b720 <txGenerateMultiFrameChain+0x274>)
 800b4fe:	4a84      	ldr	r2, [pc, #528]	; (800b710 <txGenerateMultiFrameChain+0x264>)
 800b500:	f240 118b 	movw	r1, #395	; 0x18b
 800b504:	4883      	ldr	r0, [pc, #524]	; (800b714 <txGenerateMultiFrameChain+0x268>)
 800b506:	f003 fb05 	bl	800eb14 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800b50a:	2300      	movs	r3, #0
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	2300      	movs	r3, #0
 800b514:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b518:	3302      	adds	r3, #2
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800b520:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b522:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b524:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b528:	f7ff fc34 	bl	800ad94 <crcAdd>
 800b52c:	4603      	mov	r3, r0
 800b52e:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800b536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b538:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800b53a:	e0d4      	b.n	800b6e6 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	3301      	adds	r3, #1
 800b540:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800b542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b546:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d908      	bls.n	800b560 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800b54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	3301      	adds	r3, #1
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fe1e 	bl	800b198 <txRoundFramePayloadSizeUp>
 800b55c:	4603      	mov	r3, r0
 800b55e:	e001      	b.n	800b564 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b56e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b570:	68b8      	ldr	r0, [r7, #8]
 800b572:	f7ff fe43 	bl	800b1fc <txAllocateQueueItem>
 800b576:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d102      	bne.n	800b584 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	e002      	b.n	800b58a <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	6a3a      	ldr	r2, [r7, #32]
 800b588:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80ae 	beq.w	800b6f2 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	3b01      	subs	r3, #1
 800b59a:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800b5a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d21c      	bcs.n	800b5e2 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800b5a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800b5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d901      	bls.n	800b5bc <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3330      	adds	r3, #48	; 0x30
 800b5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f004 f9a6 	bl	800f916 <memcpy>
            frame_offset = frame_offset + move_size;
 800b5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	4413      	add	r3, r2
 800b5d0:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800b5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	4413      	add	r3, r2
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800b5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	4413      	add	r3, r2
 800b5e0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800b5e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d343      	bcc.n	800b672 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b5ea:	e00f      	b.n	800b60c <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	4413      	add	r3, r2
 800b5f2:	3330      	adds	r3, #48	; 0x30
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800b5fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fba6 	bl	800ad54 <crcAddByte>
 800b608:	4603      	mov	r3, r0
 800b60a:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	3302      	adds	r3, #2
 800b610:	69fa      	ldr	r2, [r7, #28]
 800b612:	429a      	cmp	r2, r3
 800b614:	d8ea      	bhi.n	800b5ec <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800b616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d213      	bcs.n	800b646 <txGenerateMultiFrameChain+0x19a>
 800b61e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b622:	429a      	cmp	r2, r3
 800b624:	d10f      	bne.n	800b646 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800b626:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	b2d9      	uxtb	r1, r3
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	4413      	add	r3, r2
 800b634:	3330      	adds	r3, #48	; 0x30
 800b636:	460a      	mov	r2, r1
 800b638:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	3301      	adds	r3, #1
 800b63e:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800b640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b642:	3301      	adds	r3, #1
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800b646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d211      	bcs.n	800b672 <txGenerateMultiFrameChain+0x1c6>
 800b64e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b652:	429a      	cmp	r2, r3
 800b654:	d90d      	bls.n	800b672 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b65a:	b2d9      	uxtb	r1, r3
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	4413      	add	r3, r2
 800b660:	3330      	adds	r3, #48	; 0x30
 800b662:	460a      	mov	r2, r1
 800b664:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	3301      	adds	r3, #1
 800b66a:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800b66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66e:	3301      	adds	r3, #1
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d006      	beq.n	800b68c <txGenerateMultiFrameChain+0x1e0>
 800b67e:	4b29      	ldr	r3, [pc, #164]	; (800b724 <txGenerateMultiFrameChain+0x278>)
 800b680:	4a23      	ldr	r2, [pc, #140]	; (800b710 <txGenerateMultiFrameChain+0x264>)
 800b682:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800b686:	4823      	ldr	r0, [pc, #140]	; (800b714 <txGenerateMultiFrameChain+0x268>)
 800b688:	f003 fa44 	bl	800eb14 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	429a      	cmp	r2, r3
 800b692:	bf0c      	ite	eq
 800b694:	2301      	moveq	r3, #1
 800b696:	2300      	movne	r3, #0
 800b698:	b2d8      	uxtb	r0, r3
 800b69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	bf2c      	ite	cs
 800b6a2:	2301      	movcs	r3, #1
 800b6a4:	2300      	movcc	r3, #0
 800b6a6:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b6a8:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b6aa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b6ae:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800b6b2:	f7ff fd2f 	bl	800b114 <txMakeTailByte>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	4423      	add	r3, r4
 800b6be:	3330      	adds	r3, #48	; 0x30
 800b6c0:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800b6c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf14      	ite	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	2300      	moveq	r3, #0
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f083 0301 	eor.w	r3, r3, #1
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800b6da:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800b6e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	f4ff af26 	bcc.w	800b53c <txGenerateMultiFrameChain+0x90>
 800b6f0:	e000      	b.n	800b6f4 <txGenerateMultiFrameChain+0x248>
            break;
 800b6f2:	bf00      	nop
    }
    return out;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	461c      	mov	r4, r3
 800b6f8:	f107 0310 	add.w	r3, r7, #16
 800b6fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	3744      	adds	r7, #68	; 0x44
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd90      	pop	{r4, r7, pc}
 800b70c:	080133ec 	.word	0x080133ec
 800b710:	080147dc 	.word	0x080147dc
 800b714:	08013228 	.word	0x08013228
 800b718:	0801353c 	.word	0x0801353c
 800b71c:	08013558 	.word	0x08013558
 800b720:	080134d8 	.word	0x080134d8
 800b724:	08013580 	.word	0x08013580

0800b728 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b094      	sub	sp, #80	; 0x50
 800b72c:	af06      	add	r7, sp, #24
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <txPushMultiFrame+0x18>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d106      	bne.n	800b74e <txPushMultiFrame+0x26>
 800b740:	4b65      	ldr	r3, [pc, #404]	; (800b8d8 <txPushMultiFrame+0x1b0>)
 800b742:	4a66      	ldr	r2, [pc, #408]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b744:	f240 11ed 	movw	r1, #493	; 0x1ed
 800b748:	4865      	ldr	r0, [pc, #404]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b74a:	f003 f9e3 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <txPushMultiFrame+0x3a>
 800b754:	4b63      	ldr	r3, [pc, #396]	; (800b8e4 <txPushMultiFrame+0x1bc>)
 800b756:	4a61      	ldr	r2, [pc, #388]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b758:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800b75c:	4860      	ldr	r0, [pc, #384]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b75e:	f003 f9d9 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b762:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d806      	bhi.n	800b778 <txPushMultiFrame+0x50>
 800b76a:	4b5f      	ldr	r3, [pc, #380]	; (800b8e8 <txPushMultiFrame+0x1c0>)
 800b76c:	4a5b      	ldr	r2, [pc, #364]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b76e:	f240 11ef 	movw	r1, #495	; 0x1ef
 800b772:	485b      	ldr	r0, [pc, #364]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b774:	f003 f9ce 	bl	800eb14 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800b778:	2300      	movs	r3, #0
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b77e:	3302      	adds	r3, #2
 800b780:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800b782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4413      	add	r3, r2
 800b788:	1e5a      	subs	r2, r3, #1
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2b01      	cmp	r3, #1
 800b796:	d806      	bhi.n	800b7a6 <txPushMultiFrame+0x7e>
 800b798:	4b54      	ldr	r3, [pc, #336]	; (800b8ec <txPushMultiFrame+0x1c4>)
 800b79a:	4a50      	ldr	r2, [pc, #320]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b79c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b7a0:	484f      	ldr	r0, [pc, #316]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b7a2:	f003 f9b7 	bl	800eb14 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	441a      	add	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d87b      	bhi.n	800b8ae <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800b7b6:	f107 0010 	add.w	r0, r7, #16
 800b7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7bc:	9305      	str	r3, [sp, #20]
 800b7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b7c6:	9303      	str	r3, [sp, #12]
 800b7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ca:	9302      	str	r3, [sp, #8]
 800b7cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7d0:	e9cd 2300 	strd	r2, r3, [sp]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	f7ff fe68 	bl	800b4ac <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d051      	beq.n	800b886 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f103 000c 	add.w	r0, r3, #12
 800b7ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ee:	4b40      	ldr	r3, [pc, #256]	; (800b8f0 <txPushMultiFrame+0x1c8>)
 800b7f0:	4a40      	ldr	r2, [pc, #256]	; (800b8f4 <txPushMultiFrame+0x1cc>)
 800b7f2:	f7ff f8f3 	bl	800a9dc <cavlSearch>
 800b7f6:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d006      	beq.n	800b80e <txPushMultiFrame+0xe6>
 800b800:	4b3d      	ldr	r3, [pc, #244]	; (800b8f8 <txPushMultiFrame+0x1d0>)
 800b802:	4a36      	ldr	r2, [pc, #216]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b804:	f240 2106 	movw	r1, #518	; 0x206
 800b808:	4835      	ldr	r0, [pc, #212]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b80a:	f003 f983 	bl	800eb14 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <txPushMultiFrame+0xfc>
 800b816:	4b39      	ldr	r3, [pc, #228]	; (800b8fc <txPushMultiFrame+0x1d4>)
 800b818:	4a30      	ldr	r2, [pc, #192]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b81a:	f240 2107 	movw	r1, #519	; 0x207
 800b81e:	4830      	ldr	r0, [pc, #192]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b820:	f003 f978 	bl	800eb14 <__assert_func>
                next = next->next_in_transfer;
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1da      	bne.n	800b7e6 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b834:	429a      	cmp	r2, r3
 800b836:	d006      	beq.n	800b846 <txPushMultiFrame+0x11e>
 800b838:	4b31      	ldr	r3, [pc, #196]	; (800b900 <txPushMultiFrame+0x1d8>)
 800b83a:	4a28      	ldr	r2, [pc, #160]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b83c:	f240 210a 	movw	r1, #522	; 0x20a
 800b840:	4827      	ldr	r0, [pc, #156]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b842:	f003 f967 	bl	800eb14 <__assert_func>
            que->size += sq.size;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	441a      	add	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d906      	bls.n	800b86c <txPushMultiFrame+0x144>
 800b85e:	4b29      	ldr	r3, [pc, #164]	; (800b904 <txPushMultiFrame+0x1dc>)
 800b860:	4a1e      	ldr	r2, [pc, #120]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b862:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800b866:	481e      	ldr	r0, [pc, #120]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b868:	f003 f954 	bl	800eb14 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	da06      	bge.n	800b880 <txPushMultiFrame+0x158>
 800b872:	4b25      	ldr	r3, [pc, #148]	; (800b908 <txPushMultiFrame+0x1e0>)
 800b874:	4a19      	ldr	r2, [pc, #100]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b876:	f240 210d 	movw	r1, #525	; 0x20d
 800b87a:	4819      	ldr	r0, [pc, #100]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b87c:	f003 f94a 	bl	800eb14 <__assert_func>
            out = (int32_t) sq.size;
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	637b      	str	r3, [r7, #52]	; 0x34
 800b884:	e016      	b.n	800b8b4 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800b886:	f06f 0302 	mvn.w	r3, #2
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800b890:	e009      	b.n	800b8a6 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b89e:	68b8      	ldr	r0, [r7, #8]
 800b8a0:	4798      	blx	r3
                head = next;
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1f2      	bne.n	800b892 <txPushMultiFrame+0x16a>
 800b8ac:	e002      	b.n	800b8b4 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800b8ae:	f06f 0302 	mvn.w	r3, #2
 800b8b2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	db09      	blt.n	800b8ce <txPushMultiFrame+0x1a6>
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	dc06      	bgt.n	800b8ce <txPushMultiFrame+0x1a6>
 800b8c0:	4b12      	ldr	r3, [pc, #72]	; (800b90c <txPushMultiFrame+0x1e4>)
 800b8c2:	4a06      	ldr	r2, [pc, #24]	; (800b8dc <txPushMultiFrame+0x1b4>)
 800b8c4:	f44f 7108 	mov.w	r1, #544	; 0x220
 800b8c8:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <txPushMultiFrame+0x1b8>)
 800b8ca:	f003 f923 	bl	800eb14 <__assert_func>
    return out;
 800b8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3738      	adds	r7, #56	; 0x38
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	080135bc 	.word	0x080135bc
 800b8dc:	080147c8 	.word	0x080147c8
 800b8e0:	08013228 	.word	0x08013228
 800b8e4:	0801353c 	.word	0x0801353c
 800b8e8:	08013558 	.word	0x08013558
 800b8ec:	080135ec 	.word	0x080135ec
 800b8f0:	0800ad3d 	.word	0x0800ad3d
 800b8f4:	0800b2a1 	.word	0x0800b2a1
 800b8f8:	080135fc 	.word	0x080135fc
 800b8fc:	08013610 	.word	0x08013610
 800b900:	0801362c 	.word	0x0801362c
 800b904:	08013508 	.word	0x08013508
 800b908:	08013644 	.word	0x08013644
 800b90c:	08013668 	.word	0x08013668

0800b910 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <rxTryParseFrame+0x22>
 800b924:	4b96      	ldr	r3, [pc, #600]	; (800bb80 <rxTryParseFrame+0x270>)
 800b926:	4a97      	ldr	r2, [pc, #604]	; (800bb84 <rxTryParseFrame+0x274>)
 800b928:	f240 214f 	movw	r1, #591	; 0x24f
 800b92c:	4896      	ldr	r0, [pc, #600]	; (800bb88 <rxTryParseFrame+0x278>)
 800b92e:	f003 f8f1 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b93a:	d306      	bcc.n	800b94a <rxTryParseFrame+0x3a>
 800b93c:	4b93      	ldr	r3, [pc, #588]	; (800bb8c <rxTryParseFrame+0x27c>)
 800b93e:	4a91      	ldr	r2, [pc, #580]	; (800bb84 <rxTryParseFrame+0x274>)
 800b940:	f44f 7114 	mov.w	r1, #592	; 0x250
 800b944:	4890      	ldr	r0, [pc, #576]	; (800bb88 <rxTryParseFrame+0x278>)
 800b946:	f003 f8e5 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d106      	bne.n	800b95e <rxTryParseFrame+0x4e>
 800b950:	4b8f      	ldr	r3, [pc, #572]	; (800bb90 <rxTryParseFrame+0x280>)
 800b952:	4a8c      	ldr	r2, [pc, #560]	; (800bb84 <rxTryParseFrame+0x274>)
 800b954:	f240 2151 	movw	r1, #593	; 0x251
 800b958:	488b      	ldr	r0, [pc, #556]	; (800bb88 <rxTryParseFrame+0x278>)
 800b95a:	f003 f8db 	bl	800eb14 <__assert_func>
    bool valid = false;
 800b95e:	2300      	movs	r3, #0
 800b960:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 8105 	beq.w	800bb76 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <rxTryParseFrame+0x72>
 800b974:	4b87      	ldr	r3, [pc, #540]	; (800bb94 <rxTryParseFrame+0x284>)
 800b976:	4a83      	ldr	r2, [pc, #524]	; (800bb84 <rxTryParseFrame+0x274>)
 800b978:	f240 2155 	movw	r1, #597	; 0x255
 800b97c:	4882      	ldr	r0, [pc, #520]	; (800bb88 <rxTryParseFrame+0x278>)
 800b97e:	f003 f8c9 	bl	800eb14 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b988:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	0e9b      	lsrs	r3, r3, #26
 800b996:	b2db      	uxtb	r3, r3
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d128      	bne.n	800ba0c <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	0a1b      	lsrs	r3, r3, #8
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	22ff      	movs	r2, #255	; 0xff
 800b9e4:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <rxTryParseFrame+0xee>
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <rxTryParseFrame+0xee>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <rxTryParseFrame+0xf0>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	77fb      	strb	r3, [r7, #31]
 800ba02:	7ffb      	ldrb	r3, [r7, #31]
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	77fb      	strb	r3, [r7, #31]
 800ba0a:	e02c      	b.n	800ba66 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <rxTryParseFrame+0x10a>
 800ba16:	2202      	movs	r2, #2
 800ba18:	e000      	b.n	800ba1c <rxTryParseFrame+0x10c>
 800ba1a:	2201      	movs	r2, #1
            out->transfer_kind =
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	0b9b      	lsrs	r3, r3, #14
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	09db      	lsrs	r3, r3, #7
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d107      	bne.n	800ba5a <rxTryParseFrame+0x14a>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	7b1a      	ldrb	r2, [r3, #12]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	7b5b      	ldrb	r3, [r3, #13]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d001      	beq.n	800ba5a <rxTryParseFrame+0x14a>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e000      	b.n	800ba5c <rxTryParseFrame+0x14c>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	77fb      	strb	r3, [r7, #31]
 800ba5e:	7ffb      	ldrb	r3, [r7, #31]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	699a      	ldr	r2, [r3, #24]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	4413      	add	r3, r2
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	f003 031f 	and.w	r3, r3, #31
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800ba92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	09db      	lsrs	r3, r3, #7
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bf14      	ite	ne
 800baaa:	2301      	movne	r3, #1
 800baac:	2300      	moveq	r3, #0
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	bf14      	ite	ne
 800babe:	2301      	movne	r3, #1
 800bac0:	2300      	moveq	r3, #0
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800bac8:	7ffb      	ldrb	r3, [r7, #31]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00c      	beq.n	800bae8 <rxTryParseFrame+0x1d8>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	7bdb      	ldrb	r3, [r3, #15]
 800bad2:	f083 0301 	eor.w	r3, r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <rxTryParseFrame+0x1d4>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	7c5b      	ldrb	r3, [r3, #17]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <rxTryParseFrame+0x1d8>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e000      	b.n	800baea <rxTryParseFrame+0x1da>
 800bae8:	2300      	movs	r3, #0
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800baf4:	7ffb      	ldrb	r3, [r7, #31]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00d      	beq.n	800bb16 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	7c1b      	ldrb	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d103      	bne.n	800bb12 <rxTryParseFrame+0x202>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	7b1b      	ldrb	r3, [r3, #12]
 800bb0e:	2bff      	cmp	r3, #255	; 0xff
 800bb10:	d001      	beq.n	800bb16 <rxTryParseFrame+0x206>
        valid = valid &&
 800bb12:	2301      	movs	r3, #1
 800bb14:	e000      	b.n	800bb18 <rxTryParseFrame+0x208>
 800bb16:	2300      	movs	r3, #0
 800bb18:	77fb      	strb	r3, [r7, #31]
 800bb1a:	7ffb      	ldrb	r3, [r7, #31]
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800bb22:	7ffb      	ldrb	r3, [r7, #31]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d009      	beq.n	800bb3c <rxTryParseFrame+0x22c>
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	2b06      	cmp	r3, #6
 800bb2e:	d803      	bhi.n	800bb38 <rxTryParseFrame+0x228>
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	7c1b      	ldrb	r3, [r3, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <rxTryParseFrame+0x22c>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e000      	b.n	800bb3e <rxTryParseFrame+0x22e>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	77fb      	strb	r3, [r7, #31]
 800bb40:	7ffb      	ldrb	r3, [r7, #31]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00d      	beq.n	800bb6a <rxTryParseFrame+0x25a>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d107      	bne.n	800bb66 <rxTryParseFrame+0x256>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	7bdb      	ldrb	r3, [r3, #15]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <rxTryParseFrame+0x25a>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	7c1b      	ldrb	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <rxTryParseFrame+0x25a>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e000      	b.n	800bb6c <rxTryParseFrame+0x25c>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	77fb      	strb	r3, [r7, #31]
 800bb6e:	7ffb      	ldrb	r3, [r7, #31]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800bb76:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	08013680 	.word	0x08013680
 800bb84:	08014818 	.word	0x08014818
 800bb88:	08013228 	.word	0x08013228
 800bb8c:	08013698 	.word	0x08013698
 800bb90:	080136c8 	.word	0x080136c8
 800bb94:	080136dc 	.word	0x080136dc

0800bb98 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <rxInitTransferMetadataFromFrame+0x1e>
 800bba8:	4b19      	ldr	r3, [pc, #100]	; (800bc10 <rxInitTransferMetadataFromFrame+0x78>)
 800bbaa:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <rxInitTransferMetadataFromFrame+0x7c>)
 800bbac:	f44f 7124 	mov.w	r1, #656	; 0x290
 800bbb0:	4819      	ldr	r0, [pc, #100]	; (800bc18 <rxInitTransferMetadataFromFrame+0x80>)
 800bbb2:	f002 ffaf 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d106      	bne.n	800bbcc <rxInitTransferMetadataFromFrame+0x34>
 800bbbe:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <rxInitTransferMetadataFromFrame+0x84>)
 800bbc0:	4a14      	ldr	r2, [pc, #80]	; (800bc14 <rxInitTransferMetadataFromFrame+0x7c>)
 800bbc2:	f240 2191 	movw	r1, #657	; 0x291
 800bbc6:	4814      	ldr	r0, [pc, #80]	; (800bc18 <rxInitTransferMetadataFromFrame+0x80>)
 800bbc8:	f002 ffa4 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <rxInitTransferMetadataFromFrame+0x48>
 800bbd2:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <rxInitTransferMetadataFromFrame+0x88>)
 800bbd4:	4a0f      	ldr	r2, [pc, #60]	; (800bc14 <rxInitTransferMetadataFromFrame+0x7c>)
 800bbd6:	f240 2192 	movw	r1, #658	; 0x292
 800bbda:	480f      	ldr	r0, [pc, #60]	; (800bc18 <rxInitTransferMetadataFromFrame+0x80>)
 800bbdc:	f002 ff9a 	bl	800eb14 <__assert_func>
    out_transfer->priority       = frame->priority;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7a1a      	ldrb	r2, [r3, #8]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7a5a      	ldrb	r2, [r3, #9]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	895a      	ldrh	r2, [r3, #10]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7b1a      	ldrb	r2, [r3, #12]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7b9a      	ldrb	r2, [r3, #14]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	715a      	strb	r2, [r3, #5]
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	08013680 	.word	0x08013680
 800bc14:	080148c4 	.word	0x080148c4
 800bc18:	08013228 	.word	0x08013228
 800bc1c:	080136dc 	.word	0x080136dc
 800bc20:	080136fc 	.word	0x080136fc

0800bc24 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	460a      	mov	r2, r1
 800bc2e:	71fb      	strb	r3, [r7, #7]
 800bc30:	4613      	mov	r3, r2
 800bc32:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800bc34:	79fb      	ldrb	r3, [r7, #7]
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	d906      	bls.n	800bc48 <rxComputeTransferIDDifference+0x24>
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <rxComputeTransferIDDifference+0x6c>)
 800bc3c:	4a15      	ldr	r2, [pc, #84]	; (800bc94 <rxComputeTransferIDDifference+0x70>)
 800bc3e:	f240 219d 	movw	r1, #669	; 0x29d
 800bc42:	4815      	ldr	r0, [pc, #84]	; (800bc98 <rxComputeTransferIDDifference+0x74>)
 800bc44:	f002 ff66 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800bc48:	79bb      	ldrb	r3, [r7, #6]
 800bc4a:	2b1f      	cmp	r3, #31
 800bc4c:	d906      	bls.n	800bc5c <rxComputeTransferIDDifference+0x38>
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <rxComputeTransferIDDifference+0x78>)
 800bc50:	4a10      	ldr	r2, [pc, #64]	; (800bc94 <rxComputeTransferIDDifference+0x70>)
 800bc52:	f240 219e 	movw	r1, #670	; 0x29e
 800bc56:	4810      	ldr	r0, [pc, #64]	; (800bc98 <rxComputeTransferIDDifference+0x74>)
 800bc58:	f002 ff5c 	bl	800eb14 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	79bb      	ldrb	r3, [r7, #6]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800bc6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	da07      	bge.n	800bc82 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800bc72:	2320      	movs	r3, #32
 800bc74:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800bc76:	7b7b      	ldrb	r3, [r7, #13]
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	89fb      	ldrh	r3, [r7, #14]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800bc82:	89fb      	ldrh	r3, [r7, #14]
 800bc84:	b2db      	uxtb	r3, r3
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	08013718 	.word	0x08013718
 800bc94:	08014860 	.word	0x08014860
 800bc98:	08013228 	.word	0x08013228
 800bc9c:	08013730 	.word	0x08013730

0800bca0 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <rxSessionWritePayload+0x22>
 800bcb4:	4b67      	ldr	r3, [pc, #412]	; (800be54 <rxSessionWritePayload+0x1b4>)
 800bcb6:	4a68      	ldr	r2, [pc, #416]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bcb8:	f240 21ae 	movw	r1, #686	; 0x2ae
 800bcbc:	4867      	ldr	r0, [pc, #412]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bcbe:	f002 ff29 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <rxSessionWritePayload+0x36>
 800bcc8:	4b65      	ldr	r3, [pc, #404]	; (800be60 <rxSessionWritePayload+0x1c0>)
 800bcca:	4a63      	ldr	r2, [pc, #396]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bccc:	f240 21af 	movw	r1, #687	; 0x2af
 800bcd0:	4862      	ldr	r0, [pc, #392]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bcd2:	f002 ff1f 	bl	800eb14 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <rxSessionWritePayload+0x50>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d006      	beq.n	800bcf0 <rxSessionWritePayload+0x50>
 800bce2:	4b60      	ldr	r3, [pc, #384]	; (800be64 <rxSessionWritePayload+0x1c4>)
 800bce4:	4a5c      	ldr	r2, [pc, #368]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bce6:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800bcea:	485c      	ldr	r0, [pc, #368]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bcec:	f002 ff12 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d206      	bcs.n	800bd08 <rxSessionWritePayload+0x68>
 800bcfa:	4b5b      	ldr	r3, [pc, #364]	; (800be68 <rxSessionWritePayload+0x1c8>)
 800bcfc:	4a56      	ldr	r2, [pc, #344]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bcfe:	f240 21b1 	movw	r1, #689	; 0x2b1
 800bd02:	4856      	ldr	r0, [pc, #344]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bd04:	f002 ff06 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	68da      	ldr	r2, [r3, #12]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d906      	bls.n	800bd22 <rxSessionWritePayload+0x82>
 800bd14:	4b55      	ldr	r3, [pc, #340]	; (800be6c <rxSessionWritePayload+0x1cc>)
 800bd16:	4a50      	ldr	r2, [pc, #320]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bd18:	f240 21b2 	movw	r1, #690	; 0x2b2
 800bd1c:	484f      	ldr	r0, [pc, #316]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bd1e:	f002 fef9 	bl	800eb14 <__assert_func>

    rxs->total_payload_size += payload_size;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	689a      	ldr	r2, [r3, #8]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	441a      	add	r2, r3
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d115      	bne.n	800bd62 <rxSessionWritePayload+0xc2>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d012      	beq.n	800bd62 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d006      	beq.n	800bd52 <rxSessionWritePayload+0xb2>
 800bd44:	4b4a      	ldr	r3, [pc, #296]	; (800be70 <rxSessionWritePayload+0x1d0>)
 800bd46:	4a44      	ldr	r2, [pc, #272]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bd48:	f240 21b9 	movw	r1, #697	; 0x2b9
 800bd4c:	4843      	ldr	r0, [pc, #268]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bd4e:	f002 fee1 	bl	800eb14 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	4798      	blx	r3
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d04e      	beq.n	800be0c <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	4413      	add	r3, r2
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d229      	bcs.n	800bdd4 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d206      	bcs.n	800bd98 <rxSessionWritePayload+0xf8>
 800bd8a:	4b37      	ldr	r3, [pc, #220]	; (800be68 <rxSessionWritePayload+0x1c8>)
 800bd8c:	4a32      	ldr	r2, [pc, #200]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bd8e:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800bd92:	4832      	ldr	r0, [pc, #200]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bd94:	f002 febe 	bl	800eb14 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	4413      	add	r3, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d006      	beq.n	800bdbe <rxSessionWritePayload+0x11e>
 800bdb0:	4b30      	ldr	r3, [pc, #192]	; (800be74 <rxSessionWritePayload+0x1d4>)
 800bdb2:	4a29      	ldr	r2, [pc, #164]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bdb4:	f240 21c6 	movw	r1, #710	; 0x2c6
 800bdb8:	4828      	ldr	r0, [pc, #160]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bdba:	f002 feab 	bl	800eb14 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d306      	bcc.n	800bdd4 <rxSessionWritePayload+0x134>
 800bdc6:	4b2c      	ldr	r3, [pc, #176]	; (800be78 <rxSessionWritePayload+0x1d8>)
 800bdc8:	4a23      	ldr	r2, [pc, #140]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800bdca:	f240 21c7 	movw	r1, #711	; 0x2c7
 800bdce:	4823      	ldr	r0, [pc, #140]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800bdd0:	f002 fea0 	bl	800eb14 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	4413      	add	r3, r2
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	6a39      	ldr	r1, [r7, #32]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f003 fd97 	bl	800f916 <memcpy>
        rxs->payload_size += bytes_to_copy;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	441a      	add	r2, r3
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d219      	bcs.n	800be32 <rxSessionWritePayload+0x192>
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <rxSessionWritePayload+0x1c8>)
 800be00:	4a15      	ldr	r2, [pc, #84]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800be02:	f240 21d1 	movw	r1, #721	; 0x2d1
 800be06:	4815      	ldr	r0, [pc, #84]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800be08:	f002 fe84 	bl	800eb14 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d006      	beq.n	800be22 <rxSessionWritePayload+0x182>
 800be14:	4b16      	ldr	r3, [pc, #88]	; (800be70 <rxSessionWritePayload+0x1d0>)
 800be16:	4a10      	ldr	r2, [pc, #64]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800be18:	f240 21d5 	movw	r1, #725	; 0x2d5
 800be1c:	480f      	ldr	r0, [pc, #60]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800be1e:	f002 fe79 	bl	800eb14 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <rxSessionWritePayload+0x18e>
 800be28:	f06f 0302 	mvn.w	r3, #2
 800be2c:	e000      	b.n	800be30 <rxSessionWritePayload+0x190>
 800be2e:	2300      	movs	r3, #0
 800be30:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800be32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd06      	ble.n	800be48 <rxSessionWritePayload+0x1a8>
 800be3a:	4b10      	ldr	r3, [pc, #64]	; (800be7c <rxSessionWritePayload+0x1dc>)
 800be3c:	4a06      	ldr	r2, [pc, #24]	; (800be58 <rxSessionWritePayload+0x1b8>)
 800be3e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 800be42:	4806      	ldr	r0, [pc, #24]	; (800be5c <rxSessionWritePayload+0x1bc>)
 800be44:	f002 fe66 	bl	800eb14 <__assert_func>
    return out;
 800be48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	080133ec 	.word	0x080133ec
 800be58:	08014898 	.word	0x08014898
 800be5c:	08013228 	.word	0x08013228
 800be60:	08013748 	.word	0x08013748
 800be64:	080132e4 	.word	0x080132e4
 800be68:	0801375c 	.word	0x0801375c
 800be6c:	08013778 	.word	0x08013778
 800be70:	080137a8 	.word	0x080137a8
 800be74:	080137c0 	.word	0x080137c0
 800be78:	080137f0 	.word	0x080137f0
 800be7c:	08013810 	.word	0x08013810

0800be80 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <rxSessionRestart+0x1e>
 800be90:	4b1a      	ldr	r3, [pc, #104]	; (800befc <rxSessionRestart+0x7c>)
 800be92:	4a1b      	ldr	r2, [pc, #108]	; (800bf00 <rxSessionRestart+0x80>)
 800be94:	f240 21de 	movw	r1, #734	; 0x2de
 800be98:	481a      	ldr	r0, [pc, #104]	; (800bf04 <rxSessionRestart+0x84>)
 800be9a:	f002 fe3b 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <rxSessionRestart+0x32>
 800bea4:	4b18      	ldr	r3, [pc, #96]	; (800bf08 <rxSessionRestart+0x88>)
 800bea6:	4a16      	ldr	r2, [pc, #88]	; (800bf00 <rxSessionRestart+0x80>)
 800bea8:	f240 21df 	movw	r1, #735	; 0x2df
 800beac:	4815      	ldr	r0, [pc, #84]	; (800bf04 <rxSessionRestart+0x84>)
 800beae:	f002 fe31 	bl	800eb14 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	6912      	ldr	r2, [r2, #16]
 800beba:	4611      	mov	r1, r2
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2200      	movs	r2, #0
 800bec4:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2200      	movs	r2, #0
 800beca:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed8:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	7d9b      	ldrb	r3, [r3, #22]
 800bede:	3301      	adds	r3, #1
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f003 031f 	and.w	r3, r3, #31
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2201      	movs	r2, #1
 800bef0:	761a      	strb	r2, [r3, #24]
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	080133ec 	.word	0x080133ec
 800bf00:	080148b0 	.word	0x080148b0
 800bf04:	08013228 	.word	0x08013228
 800bf08:	08013748 	.word	0x08013748

0800bf0c <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af02      	add	r7, sp, #8
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d106      	bne.n	800bf2e <rxSessionAcceptFrame+0x22>
 800bf20:	4b81      	ldr	r3, [pc, #516]	; (800c128 <rxSessionAcceptFrame+0x21c>)
 800bf22:	4a82      	ldr	r2, [pc, #520]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf24:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800bf28:	4881      	ldr	r0, [pc, #516]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf2a:	f002 fdf3 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <rxSessionAcceptFrame+0x36>
 800bf34:	4b7f      	ldr	r3, [pc, #508]	; (800c134 <rxSessionAcceptFrame+0x228>)
 800bf36:	4a7d      	ldr	r2, [pc, #500]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf38:	f240 21f1 	movw	r1, #753	; 0x2f1
 800bf3c:	487c      	ldr	r0, [pc, #496]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf3e:	f002 fde9 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <rxSessionAcceptFrame+0x4a>
 800bf48:	4b7b      	ldr	r3, [pc, #492]	; (800c138 <rxSessionAcceptFrame+0x22c>)
 800bf4a:	4a78      	ldr	r2, [pc, #480]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf4c:	f240 21f2 	movw	r1, #754	; 0x2f2
 800bf50:	4877      	ldr	r0, [pc, #476]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf52:	f002 fddf 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <rxSessionAcceptFrame+0x60>
 800bf5e:	4b77      	ldr	r3, [pc, #476]	; (800c13c <rxSessionAcceptFrame+0x230>)
 800bf60:	4a72      	ldr	r2, [pc, #456]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf62:	f240 21f3 	movw	r1, #755	; 0x2f3
 800bf66:	4872      	ldr	r0, [pc, #456]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf68:	f002 fdd4 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7b9b      	ldrb	r3, [r3, #14]
 800bf70:	2b1f      	cmp	r3, #31
 800bf72:	d906      	bls.n	800bf82 <rxSessionAcceptFrame+0x76>
 800bf74:	4b72      	ldr	r3, [pc, #456]	; (800c140 <rxSessionAcceptFrame+0x234>)
 800bf76:	4a6d      	ldr	r2, [pc, #436]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf78:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800bf7c:	486c      	ldr	r0, [pc, #432]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf7e:	f002 fdc9 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <rxSessionAcceptFrame+0x8a>
 800bf88:	4b6e      	ldr	r3, [pc, #440]	; (800c144 <rxSessionAcceptFrame+0x238>)
 800bf8a:	4a68      	ldr	r2, [pc, #416]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800bf8c:	f240 21f5 	movw	r1, #757	; 0x2f5
 800bf90:	4867      	ldr	r0, [pc, #412]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800bf92:	f002 fdbf 	bl	800eb14 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7bdb      	ldrb	r3, [r3, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7bdb      	ldrb	r3, [r3, #15]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <rxSessionAcceptFrame+0xb2>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	7c1b      	ldrb	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <rxSessionAcceptFrame+0xb2>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <rxSessionAcceptFrame+0xb4>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75bb      	strb	r3, [r7, #22]
 800bfc2:	7dbb      	ldrb	r3, [r7, #22]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800bfca:	7dbb      	ldrb	r3, [r7, #22]
 800bfcc:	f083 0301 	eor.w	r3, r3, #1
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00c      	beq.n	800bff0 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	8a98      	ldrh	r0, [r3, #20]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6959      	ldr	r1, [r3, #20]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	699b      	ldr	r3, [r3, #24]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7fe fed6 	bl	800ad94 <crcAdd>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	695a      	ldr	r2, [r3, #20]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4613      	mov	r3, r2
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	68b9      	ldr	r1, [r7, #8]
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff fe4d 	bl	800bca0 <rxSessionWritePayload>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800c00a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da10      	bge.n	800c034 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800c012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c016:	f113 0f03 	cmn.w	r3, #3
 800c01a:	d006      	beq.n	800c02a <rxSessionAcceptFrame+0x11e>
 800c01c:	4b4a      	ldr	r3, [pc, #296]	; (800c148 <rxSessionAcceptFrame+0x23c>)
 800c01e:	4a43      	ldr	r2, [pc, #268]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800c020:	f240 3107 	movw	r1, #775	; 0x307
 800c024:	4842      	ldr	r0, [pc, #264]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800c026:	f002 fd75 	bl	800eb14 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800c02a:	68b9      	ldr	r1, [r7, #8]
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f7ff ff27 	bl	800be80 <rxSessionRestart>
 800c032:	e072      	b.n	800c11a <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7c1b      	ldrb	r3, [r3, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d05f      	beq.n	800c0fc <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800c03c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d006      	beq.n	800c052 <rxSessionAcceptFrame+0x146>
 800c044:	4b41      	ldr	r3, [pc, #260]	; (800c14c <rxSessionAcceptFrame+0x240>)
 800c046:	4a39      	ldr	r2, [pc, #228]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800c048:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800c04c:	4838      	ldr	r0, [pc, #224]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800c04e:	f002 fd61 	bl	800eb14 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800c052:	7dbb      	ldrb	r3, [r7, #22]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <rxSessionAcceptFrame+0x154>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	8a9b      	ldrh	r3, [r3, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d148      	bne.n	800c0f2 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800c060:	2301      	movs	r3, #1
 800c062:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff fd95 	bl	800bb98 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	6a39      	ldr	r1, [r7, #32]
 800c076:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	691a      	ldr	r2, [r3, #16]
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	429a      	cmp	r2, r3
 800c094:	d206      	bcs.n	800c0a4 <rxSessionAcceptFrame+0x198>
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <rxSessionAcceptFrame+0x244>)
 800c098:	4a24      	ldr	r2, [pc, #144]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800c09a:	f240 3116 	movw	r1, #790	; 0x316
 800c09e:	4824      	ldr	r0, [pc, #144]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800c0a0:	f002 fd38 	bl	800eb14 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	689a      	ldr	r2, [r3, #8]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800c0b0:	7dbb      	ldrb	r3, [r7, #22]
 800c0b2:	f083 0301 	eor.w	r3, r3, #1
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d017      	beq.n	800c0ec <rxSessionAcceptFrame+0x1e0>
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d814      	bhi.n	800c0ec <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	f1c3 0302 	rsb	r3, r3, #2
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d206      	bcs.n	800c0de <rxSessionAcceptFrame+0x1d2>
 800c0d0:	4b20      	ldr	r3, [pc, #128]	; (800c154 <rxSessionAcceptFrame+0x248>)
 800c0d2:	4a16      	ldr	r2, [pc, #88]	; (800c12c <rxSessionAcceptFrame+0x220>)
 800c0d4:	f240 311a 	movw	r1, #794	; 0x31a
 800c0d8:	4815      	ldr	r0, [pc, #84]	; (800c130 <rxSessionAcceptFrame+0x224>)
 800c0da:	f002 fd1b 	bl	800eb14 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	691a      	ldr	r2, [r3, #16]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	1e9a      	subs	r2, r3, #2
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800c0f2:	68b9      	ldr	r1, [r7, #8]
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7ff fec3 	bl	800be80 <rxSessionRestart>
 800c0fa:	e00e      	b.n	800c11a <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	7e1b      	ldrb	r3, [r3, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bf14      	ite	ne
 800c104:	2301      	movne	r3, #1
 800c106:	2300      	moveq	r3, #0
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	f083 0301 	eor.w	r3, r3, #1
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	b2da      	uxtb	r2, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800c11a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	080133ec 	.word	0x080133ec
 800c12c:	08014880 	.word	0x08014880
 800c130:	08013228 	.word	0x08013228
 800c134:	08013748 	.word	0x08013748
 800c138:	08013680 	.word	0x08013680
 800c13c:	080136dc 	.word	0x080136dc
 800c140:	0801381c 	.word	0x0801381c
 800c144:	080136fc 	.word	0x080136fc
 800c148:	08013844 	.word	0x08013844
 800c14c:	08013850 	.word	0x08013850
 800c150:	0801385c 	.word	0x0801385c
 800c154:	0801388c 	.word	0x0801388c

0800c158 <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 800c158:	b5b0      	push	{r4, r5, r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	4613      	mov	r3, r2
 800c164:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <rxSessionSynchronize+0x22>
 800c16c:	4b5c      	ldr	r3, [pc, #368]	; (800c2e0 <rxSessionSynchronize+0x188>)
 800c16e:	4a5d      	ldr	r2, [pc, #372]	; (800c2e4 <rxSessionSynchronize+0x18c>)
 800c170:	f44f 7150 	mov.w	r1, #832	; 0x340
 800c174:	485c      	ldr	r0, [pc, #368]	; (800c2e8 <rxSessionSynchronize+0x190>)
 800c176:	f002 fccd 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <rxSessionSynchronize+0x36>
 800c180:	4b5a      	ldr	r3, [pc, #360]	; (800c2ec <rxSessionSynchronize+0x194>)
 800c182:	4a58      	ldr	r2, [pc, #352]	; (800c2e4 <rxSessionSynchronize+0x18c>)
 800c184:	f240 3141 	movw	r1, #833	; 0x341
 800c188:	4857      	ldr	r0, [pc, #348]	; (800c2e8 <rxSessionSynchronize+0x190>)
 800c18a:	f002 fcc3 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	7d9b      	ldrb	r3, [r3, #22]
 800c192:	2b1f      	cmp	r3, #31
 800c194:	d906      	bls.n	800c1a4 <rxSessionSynchronize+0x4c>
 800c196:	4b56      	ldr	r3, [pc, #344]	; (800c2f0 <rxSessionSynchronize+0x198>)
 800c198:	4a52      	ldr	r2, [pc, #328]	; (800c2e4 <rxSessionSynchronize+0x18c>)
 800c19a:	f240 3142 	movw	r1, #834	; 0x342
 800c19e:	4852      	ldr	r0, [pc, #328]	; (800c2e8 <rxSessionSynchronize+0x190>)
 800c1a0:	f002 fcb8 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	7b9b      	ldrb	r3, [r3, #14]
 800c1a8:	2b1f      	cmp	r3, #31
 800c1aa:	d906      	bls.n	800c1ba <rxSessionSynchronize+0x62>
 800c1ac:	4b51      	ldr	r3, [pc, #324]	; (800c2f4 <rxSessionSynchronize+0x19c>)
 800c1ae:	4a4d      	ldr	r2, [pc, #308]	; (800c2e4 <rxSessionSynchronize+0x18c>)
 800c1b0:	f240 3143 	movw	r1, #835	; 0x343
 800c1b4:	484c      	ldr	r0, [pc, #304]	; (800c2e8 <rxSessionSynchronize+0x190>)
 800c1b6:	f002 fcad 	bl	800eb14 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	7ddb      	ldrb	r3, [r3, #23]
 800c1be:	79fa      	ldrb	r2, [r7, #7]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	bf0c      	ite	eq
 800c1c4:	2301      	moveq	r3, #1
 800c1c6:	2300      	movne	r3, #0
 800c1c8:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	7d9a      	ldrb	r2, [r3, #22]
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	7b9b      	ldrb	r3, [r3, #14]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bf0c      	ite	eq
 800c1d6:	2301      	moveq	r3, #1
 800c1d8:	2300      	movne	r3, #0
 800c1da:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	7d9a      	ldrb	r2, [r3, #22]
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	7b9b      	ldrb	r3, [r3, #14]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f7ff fd1c 	bl	800bc24 <rxComputeTransferIDDifference>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	bf8c      	ite	hi
 800c1f2:	2301      	movhi	r3, #1
 800c1f4:	2300      	movls	r3, #0
 800c1f6:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	68f9      	ldr	r1, [r7, #12]
 800c200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c204:	4290      	cmp	r0, r2
 800c206:	eb71 0303 	sbcs.w	r3, r1, r3
 800c20a:	d20f      	bcs.n	800c22c <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	1a84      	subs	r4, r0, r2
 800c21a:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c21e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c222:	42a2      	cmp	r2, r4
 800c224:	41ab      	sbcs	r3, r5
 800c226:	d201      	bcs.n	800c22c <rxSessionSynchronize+0xd4>
 800c228:	2301      	movs	r3, #1
 800c22a:	e000      	b.n	800c22e <rxSessionSynchronize+0xd6>
 800c22c:	2300      	movs	r3, #0
 800c22e:	753b      	strb	r3, [r7, #20]
 800c230:	7d3b      	ldrb	r3, [r7, #20]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 800c24c:	7d7b      	ldrb	r3, [r7, #21]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d114      	bne.n	800c27c <rxSessionSynchronize+0x124>
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 800c258:	7d3b      	ldrb	r3, [r7, #20]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10e      	bne.n	800c27c <rxSessionSynchronize+0x124>
 800c25e:	7d3b      	ldrb	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 800c264:	7d7b      	ldrb	r3, [r7, #21]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d108      	bne.n	800c27c <rxSessionSynchronize+0x124>
 800c26a:	7d3b      	ldrb	r3, [r7, #20]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d007      	beq.n	800c280 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 800c270:	7dbb      	ldrb	r3, [r7, #22]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <rxSessionSynchronize+0x128>
 800c276:	7cfb      	ldrb	r3, [r7, #19]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 800c27c:	2301      	movs	r3, #1
 800c27e:	e000      	b.n	800c282 <rxSessionSynchronize+0x12a>
 800c280:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 800c282:	74bb      	strb	r3, [r7, #18]
 800c284:	7cbb      	ldrb	r3, [r7, #18]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	7bdb      	ldrb	r3, [r3, #15]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d021      	beq.n	800c2d8 <rxSessionSynchronize+0x180>
 800c294:	7cbb      	ldrb	r3, [r7, #18]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01e      	beq.n	800c2d8 <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	7bdb      	ldrb	r3, [r3, #15]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <rxSessionSynchronize+0x158>
 800c2a2:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <rxSessionSynchronize+0x1a0>)
 800c2a4:	4a0f      	ldr	r2, [pc, #60]	; (800c2e4 <rxSessionSynchronize+0x18c>)
 800c2a6:	f240 3159 	movw	r1, #857	; 0x359
 800c2aa:	480f      	ldr	r0, [pc, #60]	; (800c2e8 <rxSessionSynchronize+0x190>)
 800c2ac:	f002 fc32 	bl	800eb14 <__assert_func>
        rxs->total_payload_size    = 0U;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2c2:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	7b9a      	ldrb	r2, [r3, #14]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	79fa      	ldrb	r2, [r7, #7]
 800c2d6:	75da      	strb	r2, [r3, #23]
    }
}
 800c2d8:	bf00      	nop
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e0:	08013748 	.word	0x08013748
 800c2e4:	08014848 	.word	0x08014848
 800c2e8:	08013228 	.word	0x08013228
 800c2ec:	08013680 	.word	0x08013680
 800c2f0:	080138c4 	.word	0x080138c4
 800c2f4:	0801381c 	.word	0x0801381c
 800c2f8:	080138ec 	.word	0x080138ec

0800c2fc <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af02      	add	r7, sp, #8
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d106      	bne.n	800c31e <rxSessionUpdate+0x22>
 800c310:	4b48      	ldr	r3, [pc, #288]	; (800c434 <rxSessionUpdate+0x138>)
 800c312:	4a49      	ldr	r2, [pc, #292]	; (800c438 <rxSessionUpdate+0x13c>)
 800c314:	f240 3172 	movw	r1, #882	; 0x372
 800c318:	4848      	ldr	r0, [pc, #288]	; (800c43c <rxSessionUpdate+0x140>)
 800c31a:	f002 fbfb 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <rxSessionUpdate+0x36>
 800c324:	4b46      	ldr	r3, [pc, #280]	; (800c440 <rxSessionUpdate+0x144>)
 800c326:	4a44      	ldr	r2, [pc, #272]	; (800c438 <rxSessionUpdate+0x13c>)
 800c328:	f240 3173 	movw	r1, #883	; 0x373
 800c32c:	4843      	ldr	r0, [pc, #268]	; (800c43c <rxSessionUpdate+0x140>)
 800c32e:	f002 fbf1 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <rxSessionUpdate+0x4a>
 800c338:	4b42      	ldr	r3, [pc, #264]	; (800c444 <rxSessionUpdate+0x148>)
 800c33a:	4a3f      	ldr	r2, [pc, #252]	; (800c438 <rxSessionUpdate+0x13c>)
 800c33c:	f44f 715d 	mov.w	r1, #884	; 0x374
 800c340:	483e      	ldr	r0, [pc, #248]	; (800c43c <rxSessionUpdate+0x140>)
 800c342:	f002 fbe7 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d106      	bne.n	800c35a <rxSessionUpdate+0x5e>
 800c34c:	4b3e      	ldr	r3, [pc, #248]	; (800c448 <rxSessionUpdate+0x14c>)
 800c34e:	4a3a      	ldr	r2, [pc, #232]	; (800c438 <rxSessionUpdate+0x13c>)
 800c350:	f240 3175 	movw	r1, #885	; 0x375
 800c354:	4839      	ldr	r0, [pc, #228]	; (800c43c <rxSessionUpdate+0x140>)
 800c356:	f002 fbdd 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	7d9b      	ldrb	r3, [r3, #22]
 800c35e:	2b1f      	cmp	r3, #31
 800c360:	d906      	bls.n	800c370 <rxSessionUpdate+0x74>
 800c362:	4b3a      	ldr	r3, [pc, #232]	; (800c44c <rxSessionUpdate+0x150>)
 800c364:	4a34      	ldr	r2, [pc, #208]	; (800c438 <rxSessionUpdate+0x13c>)
 800c366:	f240 3176 	movw	r1, #886	; 0x376
 800c36a:	4834      	ldr	r0, [pc, #208]	; (800c43c <rxSessionUpdate+0x140>)
 800c36c:	f002 fbd2 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7b9b      	ldrb	r3, [r3, #14]
 800c374:	2b1f      	cmp	r3, #31
 800c376:	d906      	bls.n	800c386 <rxSessionUpdate+0x8a>
 800c378:	4b35      	ldr	r3, [pc, #212]	; (800c450 <rxSessionUpdate+0x154>)
 800c37a:	4a2f      	ldr	r2, [pc, #188]	; (800c438 <rxSessionUpdate+0x13c>)
 800c37c:	f240 3177 	movw	r1, #887	; 0x377
 800c380:	482e      	ldr	r0, [pc, #184]	; (800c43c <rxSessionUpdate+0x140>)
 800c382:	f002 fbc7 	bl	800eb14 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 800c386:	78f9      	ldrb	r1, [r7, #3]
 800c388:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c38c:	e9cd 2300 	strd	r2, r3, [sp]
 800c390:	460a      	mov	r2, r1
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	68b8      	ldr	r0, [r7, #8]
 800c396:	f7ff fedf 	bl	800c158 <rxSessionSynchronize>
    int8_t out = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	7ddb      	ldrb	r3, [r3, #23]
 800c3a2:	78fa      	ldrb	r2, [r7, #3]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	bf0c      	ite	eq
 800c3a8:	2301      	moveq	r3, #1
 800c3aa:	2300      	movne	r3, #0
 800c3ac:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7c5a      	ldrb	r2, [r3, #17]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	7e1b      	ldrb	r3, [r3, #24]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	bf0c      	ite	eq
 800c3ba:	2301      	moveq	r3, #1
 800c3bc:	2300      	movne	r3, #0
 800c3be:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7b9a      	ldrb	r2, [r3, #14]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	7d9b      	ldrb	r3, [r3, #22]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	bf0c      	ite	eq
 800c3cc:	2301      	moveq	r3, #1
 800c3ce:	2300      	movne	r3, #0
 800c3d0:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bf0c      	ite	eq
 800c3e2:	2301      	moveq	r3, #1
 800c3e4:	2300      	movne	r3, #0
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	e006      	b.n	800c3f8 <rxSessionUpdate+0xfc>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bf14      	ite	ne
 800c3f2:	2301      	movne	r3, #1
 800c3f4:	2300      	moveq	r3, #0
 800c3f6:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 800c3f8:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 800c3fa:	7dbb      	ldrb	r3, [r7, #22]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d012      	beq.n	800c426 <rxSessionUpdate+0x12a>
 800c400:	7d7b      	ldrb	r3, [r7, #21]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00f      	beq.n	800c426 <rxSessionUpdate+0x12a>
 800c406:	7d3b      	ldrb	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00c      	beq.n	800c426 <rxSessionUpdate+0x12a>
 800c40c:	7cfb      	ldrb	r3, [r7, #19]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800c412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	68b9      	ldr	r1, [r7, #8]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff fd75 	bl	800bf0c <rxSessionAcceptFrame>
 800c422:	4603      	mov	r3, r0
 800c424:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 800c426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	080133ec 	.word	0x080133ec
 800c438:	08014838 	.word	0x08014838
 800c43c:	08013228 	.word	0x08013228
 800c440:	08013748 	.word	0x08013748
 800c444:	08013680 	.word	0x08013680
 800c448:	080136fc 	.word	0x080136fc
 800c44c:	080138c4 	.word	0x080138c4
 800c450:	0801381c 	.word	0x0801381c

0800c454 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800c454:	b5b0      	push	{r4, r5, r7, lr}
 800c456:	b08c      	sub	sp, #48	; 0x30
 800c458:	af04      	add	r7, sp, #16
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <rxAcceptFrame+0x22>
 800c468:	4b85      	ldr	r3, [pc, #532]	; (800c680 <rxAcceptFrame+0x22c>)
 800c46a:	4a86      	ldr	r2, [pc, #536]	; (800c684 <rxAcceptFrame+0x230>)
 800c46c:	f240 3196 	movw	r1, #918	; 0x396
 800c470:	4885      	ldr	r0, [pc, #532]	; (800c688 <rxAcceptFrame+0x234>)
 800c472:	f002 fb4f 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <rxAcceptFrame+0x36>
 800c47c:	4b83      	ldr	r3, [pc, #524]	; (800c68c <rxAcceptFrame+0x238>)
 800c47e:	4a81      	ldr	r2, [pc, #516]	; (800c684 <rxAcceptFrame+0x230>)
 800c480:	f240 3197 	movw	r1, #919	; 0x397
 800c484:	4880      	ldr	r0, [pc, #512]	; (800c688 <rxAcceptFrame+0x234>)
 800c486:	f002 fb45 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	8b9a      	ldrh	r2, [r3, #28]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	895b      	ldrh	r3, [r3, #10]
 800c492:	429a      	cmp	r2, r3
 800c494:	d006      	beq.n	800c4a4 <rxAcceptFrame+0x50>
 800c496:	4b7e      	ldr	r3, [pc, #504]	; (800c690 <rxAcceptFrame+0x23c>)
 800c498:	4a7a      	ldr	r2, [pc, #488]	; (800c684 <rxAcceptFrame+0x230>)
 800c49a:	f44f 7166 	mov.w	r1, #920	; 0x398
 800c49e:	487a      	ldr	r0, [pc, #488]	; (800c688 <rxAcceptFrame+0x234>)
 800c4a0:	f002 fb38 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <rxAcceptFrame+0x64>
 800c4aa:	4b7a      	ldr	r3, [pc, #488]	; (800c694 <rxAcceptFrame+0x240>)
 800c4ac:	4a75      	ldr	r2, [pc, #468]	; (800c684 <rxAcceptFrame+0x230>)
 800c4ae:	f240 3199 	movw	r1, #921	; 0x399
 800c4b2:	4875      	ldr	r0, [pc, #468]	; (800c688 <rxAcceptFrame+0x234>)
 800c4b4:	f002 fb2e 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <rxAcceptFrame+0x7a>
 800c4c0:	4b75      	ldr	r3, [pc, #468]	; (800c698 <rxAcceptFrame+0x244>)
 800c4c2:	4a70      	ldr	r2, [pc, #448]	; (800c684 <rxAcceptFrame+0x230>)
 800c4c4:	f240 319a 	movw	r1, #922	; 0x39a
 800c4c8:	486f      	ldr	r0, [pc, #444]	; (800c688 <rxAcceptFrame+0x234>)
 800c4ca:	f002 fb23 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7b9b      	ldrb	r3, [r3, #14]
 800c4d2:	2b1f      	cmp	r3, #31
 800c4d4:	d906      	bls.n	800c4e4 <rxAcceptFrame+0x90>
 800c4d6:	4b71      	ldr	r3, [pc, #452]	; (800c69c <rxAcceptFrame+0x248>)
 800c4d8:	4a6a      	ldr	r2, [pc, #424]	; (800c684 <rxAcceptFrame+0x230>)
 800c4da:	f240 319b 	movw	r1, #923	; 0x39b
 800c4de:	486a      	ldr	r0, [pc, #424]	; (800c688 <rxAcceptFrame+0x234>)
 800c4e0:	f002 fb18 	bl	800eb14 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7b5b      	ldrb	r3, [r3, #13]
 800c4e8:	2bff      	cmp	r3, #255	; 0xff
 800c4ea:	d00c      	beq.n	800c506 <rxAcceptFrame+0xb2>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	791a      	ldrb	r2, [r3, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7b5b      	ldrb	r3, [r3, #13]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d006      	beq.n	800c506 <rxAcceptFrame+0xb2>
 800c4f8:	4b69      	ldr	r3, [pc, #420]	; (800c6a0 <rxAcceptFrame+0x24c>)
 800c4fa:	4a62      	ldr	r2, [pc, #392]	; (800c684 <rxAcceptFrame+0x230>)
 800c4fc:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800c500:	4861      	ldr	r0, [pc, #388]	; (800c688 <rxAcceptFrame+0x234>)
 800c502:	f002 fb07 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <rxAcceptFrame+0xc6>
 800c50c:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <rxAcceptFrame+0x250>)
 800c50e:	4a5d      	ldr	r2, [pc, #372]	; (800c684 <rxAcceptFrame+0x230>)
 800c510:	f240 319d 	movw	r1, #925	; 0x39d
 800c514:	485c      	ldr	r0, [pc, #368]	; (800c688 <rxAcceptFrame+0x234>)
 800c516:	f002 fafd 	bl	800eb14 <__assert_func>

    int8_t out = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7b1b      	ldrb	r3, [r3, #12]
 800c522:	b25b      	sxtb	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	db6c      	blt.n	800c602 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7b1b      	ldrb	r3, [r3, #12]
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	3308      	adds	r3, #8
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d134      	bne.n	800c5a4 <rxAcceptFrame+0x150>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7bdb      	ldrb	r3, [r3, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d030      	beq.n	800c5a4 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	2120      	movs	r1, #32
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	4798      	blx	r3
 800c54c:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7b1b      	ldrb	r3, [r3, #12]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	3308      	adds	r3, #8
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d01d      	beq.n	800c5a0 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	6939      	ldr	r1, [r7, #16]
 800c56c:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2200      	movs	r2, #0
 800c574:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	2200      	movs	r2, #0
 800c57a:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	2200      	movs	r2, #0
 800c580:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c588:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7b9a      	ldrb	r2, [r3, #14]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	2201      	movs	r2, #1
 800c59c:	761a      	strb	r2, [r3, #24]
 800c59e:	e001      	b.n	800c5a4 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c5a0:	23fd      	movs	r3, #253	; 0xfd
 800c5a2:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7b1b      	ldrb	r3, [r3, #12]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d05e      	beq.n	800c674 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800c5b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d006      	beq.n	800c5cc <rxAcceptFrame+0x178>
 800c5be:	4b3a      	ldr	r3, [pc, #232]	; (800c6a8 <rxAcceptFrame+0x254>)
 800c5c0:	4a30      	ldr	r2, [pc, #192]	; (800c684 <rxAcceptFrame+0x230>)
 800c5c2:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800c5c6:	4830      	ldr	r0, [pc, #192]	; (800c688 <rxAcceptFrame+0x234>)
 800c5c8:	f002 faa4 	bl	800eb14 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	7b1b      	ldrb	r3, [r3, #12]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	6989      	ldr	r1, [r1, #24]
 800c5e4:	78fd      	ldrb	r5, [r7, #3]
 800c5e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e8:	9003      	str	r0, [sp, #12]
 800c5ea:	9102      	str	r1, [sp, #8]
 800c5ec:	e9cd 2300 	strd	r2, r3, [sp]
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f7ff fe80 	bl	800c2fc <rxSessionUpdate>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	77fb      	strb	r3, [r7, #31]
 800c600:	e038      	b.n	800c674 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7b1b      	ldrb	r3, [r3, #12]
 800c606:	2bff      	cmp	r3, #255	; 0xff
 800c608:	d006      	beq.n	800c618 <rxAcceptFrame+0x1c4>
 800c60a:	4b28      	ldr	r3, [pc, #160]	; (800c6ac <rxAcceptFrame+0x258>)
 800c60c:	4a1d      	ldr	r2, [pc, #116]	; (800c684 <rxAcceptFrame+0x230>)
 800c60e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800c612:	481d      	ldr	r0, [pc, #116]	; (800c688 <rxAcceptFrame+0x234>)
 800c614:	f002 fa7e 	bl	800eb14 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	695a      	ldr	r2, [r3, #20]
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800c620:	4293      	cmp	r3, r2
 800c622:	bf28      	it	cs
 800c624:	4613      	movcs	r3, r2
 800c626:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	69b9      	ldr	r1, [r7, #24]
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	4798      	blx	r3
 800c632:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d01a      	beq.n	800c670 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff faaa 	bl	800bb98 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c64c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	69ba      	ldr	r2, [r7, #24]
 800c654:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	4619      	mov	r1, r3
 800c664:	6978      	ldr	r0, [r7, #20]
 800c666:	f003 f956 	bl	800f916 <memcpy>
            out = 1;
 800c66a:	2301      	movs	r3, #1
 800c66c:	77fb      	strb	r3, [r7, #31]
 800c66e:	e001      	b.n	800c674 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c670:	23fd      	movs	r3, #253	; 0xfd
 800c672:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800c674:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bdb0      	pop	{r4, r5, r7, pc}
 800c680:	080133ec 	.word	0x080133ec
 800c684:	08014828 	.word	0x08014828
 800c688:	08013228 	.word	0x08013228
 800c68c:	08013908 	.word	0x08013908
 800c690:	08013924 	.word	0x08013924
 800c694:	08013680 	.word	0x08013680
 800c698:	080136dc 	.word	0x080136dc
 800c69c:	0801381c 	.word	0x0801381c
 800c6a0:	0801394c 	.word	0x0801394c
 800c6a4:	080136fc 	.word	0x080136fc
 800c6a8:	080139a4 	.word	0x080139a4
 800c6ac:	080139b0 	.word	0x080139b0

0800c6b0 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	8b9b      	ldrh	r3, [r3, #28]
 800c6c4:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800c6c6:	89fa      	ldrh	r2, [r7, #14]
 800c6c8:	89bb      	ldrh	r3, [r7, #12]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d00a      	beq.n	800c6e4 <rxSubscriptionPredicateOnPortID+0x34>
 800c6ce:	89fa      	ldrh	r2, [r7, #14]
 800c6d0:	89bb      	ldrh	r3, [r7, #12]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	bf8c      	ite	hi
 800c6d6:	2301      	movhi	r3, #1
 800c6d8:	2300      	movls	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <rxSubscriptionPredicateOnPortID+0x44>)
 800c6e0:	569b      	ldrsb	r3, [r3, r2]
 800c6e2:	e000      	b.n	800c6e6 <rxSubscriptionPredicateOnPortID+0x36>
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	08014814 	.word	0x08014814

0800c6f8 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	331c      	adds	r3, #28
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff ffd1 	bl	800c6b0 <rxSubscriptionPredicateOnPortID>
 800c70e:	4603      	mov	r3, r0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800c718:	b5b0      	push	{r4, r5, r7, lr}
 800c71a:	b08c      	sub	sp, #48	; 0x30
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <canardInit+0x20>
 800c72a:	4b16      	ldr	r3, [pc, #88]	; (800c784 <canardInit+0x6c>)
 800c72c:	4a16      	ldr	r2, [pc, #88]	; (800c788 <canardInit+0x70>)
 800c72e:	f240 4104 	movw	r1, #1028	; 0x404
 800c732:	4816      	ldr	r0, [pc, #88]	; (800c78c <canardInit+0x74>)
 800c734:	f002 f9ee 	bl	800eb14 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <canardInit+0x34>
 800c73e:	4b14      	ldr	r3, [pc, #80]	; (800c790 <canardInit+0x78>)
 800c740:	4a11      	ldr	r2, [pc, #68]	; (800c788 <canardInit+0x70>)
 800c742:	f240 4105 	movw	r1, #1029	; 0x405
 800c746:	4811      	ldr	r0, [pc, #68]	; (800c78c <canardInit+0x74>)
 800c748:	f002 f9e4 	bl	800eb14 <__assert_func>
    const CanardInstance out = {
 800c74c:	2300      	movs	r3, #0
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	23ff      	movs	r3, #255	; 0xff
 800c752:	763b      	strb	r3, [r7, #24]
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	623b      	str	r3, [r7, #32]
 800c75c:	2300      	movs	r3, #0
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
 800c760:	2300      	movs	r3, #0
 800c762:	62bb      	str	r3, [r7, #40]	; 0x28
 800c764:	2300      	movs	r3, #0
 800c766:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	461d      	mov	r5, r3
 800c76c:	f107 0414 	add.w	r4, r7, #20
 800c770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c774:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c778:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	3730      	adds	r7, #48	; 0x30
 800c780:	46bd      	mov	sp, r7
 800c782:	bdb0      	pop	{r4, r5, r7, pc}
 800c784:	080139d0 	.word	0x080139d0
 800c788:	0801469c 	.word	0x0801469c
 800c78c:	08013228 	.word	0x08013228
 800c790:	080139f0 	.word	0x080139f0

0800c794 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800c794:	b4b0      	push	{r4, r5, r7}
 800c796:	b08b      	sub	sp, #44	; 0x2c
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	617b      	str	r3, [r7, #20]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	61bb      	str	r3, [r7, #24]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	623b      	str	r3, [r7, #32]
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	461d      	mov	r5, r3
 800c7b8:	f107 0414 	add.w	r4, r7, #20
 800c7bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	602b      	str	r3, [r5, #0]
}
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	372c      	adds	r7, #44	; 0x2c
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bcb0      	pop	{r4, r5, r7}
 800c7cc:	4770      	bx	lr
	...

0800c7d0 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08e      	sub	sp, #56	; 0x38
 800c7d4:	af06      	add	r7, sp, #24
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c7de:	f06f 0301 	mvn.w	r3, #1
 800c7e2:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d062      	beq.n	800c8b0 <canardTxPush+0xe0>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d05f      	beq.n	800c8b0 <canardTxPush+0xe0>
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d05c      	beq.n	800c8b0 <canardTxPush+0xe0>
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d102      	bne.n	800c802 <canardTxPush+0x32>
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d156      	bne.n	800c8b0 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fb7a 	bl	800af00 <adjustPresentationLayerMTU>
 800c80c:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	791a      	ldrb	r2, [r3, #4]
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4613      	mov	r3, r2
 800c818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c81a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c81e:	f7fe fb9f 	bl	800af60 <txMakeCANID>
 800c822:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	db40      	blt.n	800c8ac <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800c82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d81c      	bhi.n	800c86c <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800c832:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800c834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c836:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800c838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c83a:	9103      	str	r1, [sp, #12]
 800c83c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c83e:	9102      	str	r1, [sp, #8]
 800c840:	9201      	str	r2, [sp, #4]
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c848:	68b9      	ldr	r1, [r7, #8]
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7fe fd52 	bl	800b2f4 <txPushSingleFrame>
 800c850:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	2b00      	cmp	r3, #0
 800c856:	db2b      	blt.n	800c8b0 <canardTxPush+0xe0>
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d028      	beq.n	800c8b0 <canardTxPush+0xe0>
 800c85e:	4b1c      	ldr	r3, [pc, #112]	; (800c8d0 <canardTxPush+0x100>)
 800c860:	4a1c      	ldr	r2, [pc, #112]	; (800c8d4 <canardTxPush+0x104>)
 800c862:	f240 4133 	movw	r1, #1075	; 0x433
 800c866:	481c      	ldr	r0, [pc, #112]	; (800c8d8 <canardTxPush+0x108>)
 800c868:	f002 f954 	bl	800eb14 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800c86c:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800c86e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c870:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800c872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c874:	9105      	str	r1, [sp, #20]
 800c876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c878:	9104      	str	r1, [sp, #16]
 800c87a:	9203      	str	r2, [sp, #12]
 800c87c:	9302      	str	r3, [sp, #8]
 800c87e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c882:	e9cd 2300 	strd	r2, r3, [sp]
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7fe ff4c 	bl	800b728 <txPushMultiFrame>
 800c890:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2b00      	cmp	r3, #0
 800c896:	db0b      	blt.n	800c8b0 <canardTxPush+0xe0>
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	dc08      	bgt.n	800c8b0 <canardTxPush+0xe0>
 800c89e:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <canardTxPush+0x10c>)
 800c8a0:	4a0c      	ldr	r2, [pc, #48]	; (800c8d4 <canardTxPush+0x104>)
 800c8a2:	f240 413f 	movw	r1, #1087	; 0x43f
 800c8a6:	480c      	ldr	r0, [pc, #48]	; (800c8d8 <canardTxPush+0x108>)
 800c8a8:	f002 f934 	bl	800eb14 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d106      	bne.n	800c8c4 <canardTxPush+0xf4>
 800c8b6:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <canardTxPush+0x110>)
 800c8b8:	4a06      	ldr	r2, [pc, #24]	; (800c8d4 <canardTxPush+0x104>)
 800c8ba:	f240 4147 	movw	r1, #1095	; 0x447
 800c8be:	4806      	ldr	r0, [pc, #24]	; (800c8d8 <canardTxPush+0x108>)
 800c8c0:	f002 f928 	bl	800eb14 <__assert_func>
    return out;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3720      	adds	r7, #32
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	08013524 	.word	0x08013524
 800c8d4:	080146a8 	.word	0x080146a8
 800c8d8:	08013228 	.word	0x08013228
 800c8dc:	08013668 	.word	0x08013668
 800c8e0:	08013a0c 	.word	0x08013a0c

0800c8e4 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d006      	beq.n	800c904 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd fe96 	bl	800a62e <cavlFindExtremum>
 800c902:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800c904:	68fb      	ldr	r3, [r7, #12]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d010      	beq.n	800c944 <canardTxPop+0x36>
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00d      	beq.n	800c944 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	330c      	adds	r3, #12
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	4611      	mov	r1, r2
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe f8cf 	bl	800aad8 <cavlRemove>
        que->size--;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	1e5a      	subs	r2, r3, #1
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	609a      	str	r2, [r3, #8]
    }
    return out;
 800c944:	68fb      	ldr	r3, [r7, #12]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
	...

0800c950 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b090      	sub	sp, #64	; 0x40
 800c954:	af02      	add	r7, sp, #8
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c95c:	23fe      	movs	r3, #254	; 0xfe
 800c95e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d068      	beq.n	800ca3a <canardRxAccept+0xea>
 800c968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d065      	beq.n	800ca3a <canardRxAccept+0xea>
 800c96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c970:	2b00      	cmp	r3, #0
 800c972:	d062      	beq.n	800ca3a <canardRxAccept+0xea>
 800c974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c97c:	d25d      	bcs.n	800ca3a <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c980:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800c982:	2b00      	cmp	r3, #0
 800c984:	d103      	bne.n	800c98e <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800c986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d155      	bne.n	800ca3a <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800c98e:	f107 0310 	add.w	r3, r7, #16
 800c992:	2220      	movs	r2, #32
 800c994:	2100      	movs	r1, #0
 800c996:	4618      	mov	r0, r3
 800c998:	f002 ff2d 	bl	800f7f6 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800c99c:	f107 0310 	add.w	r3, r7, #16
 800c9a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9a6:	f7fe ffb3 	bl	800b910 <rxTryParseFrame>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d041      	beq.n	800ca34 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800c9b0:	7f7b      	ldrb	r3, [r7, #29]
 800c9b2:	2bff      	cmp	r3, #255	; 0xff
 800c9b4:	d004      	beq.n	800c9c0 <canardRxAccept+0x70>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	791a      	ldrb	r2, [r3, #4]
 800c9ba:	7f7b      	ldrb	r3, [r7, #29]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d135      	bne.n	800ca2c <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800c9c0:	7e7b      	ldrb	r3, [r7, #25]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	18d0      	adds	r0, r2, r3
 800c9ca:	f107 0310 	add.w	r3, r7, #16
 800c9ce:	f103 010a 	add.w	r1, r3, #10
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	4a21      	ldr	r2, [pc, #132]	; (800ca5c <canardRxAccept+0x10c>)
 800c9d6:	f7fe f801 	bl	800a9dc <cavlSearch>
 800c9da:	6338      	str	r0, [r7, #48]	; 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 800c9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800c9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e6:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d01a      	beq.n	800ca24 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	8b9a      	ldrh	r2, [r3, #28]
 800c9f2:	8b7b      	ldrh	r3, [r7, #26]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d006      	beq.n	800ca06 <canardRxAccept+0xb6>
 800c9f8:	4b19      	ldr	r3, [pc, #100]	; (800ca60 <canardRxAccept+0x110>)
 800c9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <canardRxAccept+0x114>)
 800c9fc:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800ca00:	4819      	ldr	r0, [pc, #100]	; (800ca68 <canardRxAccept+0x118>)
 800ca02:	f002 f887 	bl	800eb14 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 800ca06:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800ca0a:	f107 0210 	add.w	r2, r7, #16
 800ca0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	460b      	mov	r3, r1
 800ca14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff fd1c 	bl	800c454 <rxAcceptFrame>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800ca22:	e00a      	b.n	800ca3a <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800ca2a:	e006      	b.n	800ca3a <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ca32:	e002      	b.n	800ca3a <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 800ca34:	2300      	movs	r3, #0
 800ca36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800ca3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	dd06      	ble.n	800ca50 <canardRxAccept+0x100>
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <canardRxAccept+0x11c>)
 800ca44:	4a07      	ldr	r2, [pc, #28]	; (800ca64 <canardRxAccept+0x114>)
 800ca46:	f240 419a 	movw	r1, #1178	; 0x49a
 800ca4a:	4807      	ldr	r0, [pc, #28]	; (800ca68 <canardRxAccept+0x118>)
 800ca4c:	f002 f862 	bl	800eb14 <__assert_func>
    return out;
 800ca50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3738      	adds	r7, #56	; 0x38
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	0800c6b1 	.word	0x0800c6b1
 800ca60:	08013a18 	.word	0x08013a18
 800ca64:	08014804 	.word	0x08014804
 800ca68:	08013228 	.word	0x08013228
 800ca6c:	08013a38 	.word	0x08013a38

0800ca70 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	607b      	str	r3, [r7, #4]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	72fb      	strb	r3, [r7, #11]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800ca82:	23fe      	movs	r3, #254	; 0xfe
 800ca84:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800ca86:	7afb      	ldrb	r3, [r7, #11]
 800ca88:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d04a      	beq.n	800cb26 <canardRxSubscribe+0xb6>
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d047      	beq.n	800cb26 <canardRxSubscribe+0xb6>
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d844      	bhi.n	800cb26 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800ca9c:	893a      	ldrh	r2, [r7, #8]
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	4619      	mov	r1, r3
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 f850 	bl	800cb48 <canardRxUnsubscribe>
 800caa8:	4603      	mov	r3, r0
 800caaa:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800caac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	db38      	blt.n	800cb26 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800cab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800caba:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	893a      	ldrh	r2, [r7, #8]
 800cac8:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800caca:	2300      	movs	r3, #0
 800cacc:	61bb      	str	r3, [r7, #24]
 800cace:	e009      	b.n	800cae4 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800cad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	3308      	adds	r3, #8
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	2200      	movs	r2, #0
 800cadc:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	3301      	adds	r3, #1
 800cae2:	61bb      	str	r3, [r7, #24]
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b7f      	cmp	r3, #127	; 0x7f
 800cae8:	d9f2      	bls.n	800cad0 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	3304      	adds	r3, #4
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	18d0      	adds	r0, r2, r3
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <canardRxSubscribe+0xc4>)
 800caf6:	4a10      	ldr	r2, [pc, #64]	; (800cb38 <canardRxSubscribe+0xc8>)
 800caf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cafa:	f7fd ff6f 	bl	800a9dc <cavlSearch>
 800cafe:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d006      	beq.n	800cb16 <canardRxSubscribe+0xa6>
 800cb08:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <canardRxSubscribe+0xcc>)
 800cb0a:	4a0d      	ldr	r2, [pc, #52]	; (800cb40 <canardRxSubscribe+0xd0>)
 800cb0c:	f240 41be 	movw	r1, #1214	; 0x4be
 800cb10:	480c      	ldr	r0, [pc, #48]	; (800cb44 <canardRxSubscribe+0xd4>)
 800cb12:	f001 ffff 	bl	800eb14 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800cb16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bfd4      	ite	le
 800cb1e:	2301      	movle	r3, #1
 800cb20:	2300      	movgt	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cb26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3720      	adds	r7, #32
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	0800ad3d 	.word	0x0800ad3d
 800cb38:	0800c6f9 	.word	0x0800c6f9
 800cb3c:	08013a44 	.word	0x08013a44
 800cb40:	080148e4 	.word	0x080148e4
 800cb44:	08013228 	.word	0x08013228

0800cb48 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	70fb      	strb	r3, [r7, #3]
 800cb54:	4613      	mov	r3, r2
 800cb56:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cb58:	23fe      	movs	r3, #254	; 0xfe
 800cb5a:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d05f      	beq.n	800cc26 <canardRxUnsubscribe+0xde>
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d85c      	bhi.n	800cc26 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800cb6c:	883b      	ldrh	r3, [r7, #0]
 800cb6e:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	3304      	adds	r3, #4
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	18d0      	adds	r0, r2, r3
 800cb7a:	f107 010e 	add.w	r1, r7, #14
 800cb7e:	2300      	movs	r3, #0
 800cb80:	4a2c      	ldr	r2, [pc, #176]	; (800cc34 <canardRxUnsubscribe+0xec>)
 800cb82:	f7fd ff2b 	bl	800a9dc <cavlSearch>
 800cb86:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d049      	beq.n	800cc22 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	3304      	adds	r3, #4
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	4413      	add	r3, r2
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fd ff9b 	bl	800aad8 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	8b9b      	ldrh	r3, [r3, #28]
 800cba6:	883a      	ldrh	r2, [r7, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d006      	beq.n	800cbba <canardRxUnsubscribe+0x72>
 800cbac:	4b22      	ldr	r3, [pc, #136]	; (800cc38 <canardRxUnsubscribe+0xf0>)
 800cbae:	4a23      	ldr	r2, [pc, #140]	; (800cc3c <canardRxUnsubscribe+0xf4>)
 800cbb0:	f240 41d3 	movw	r1, #1235	; 0x4d3
 800cbb4:	4822      	ldr	r0, [pc, #136]	; (800cc40 <canardRxUnsubscribe+0xf8>)
 800cbb6:	f001 ffad 	bl	800eb14 <__assert_func>
            out = 1;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61bb      	str	r3, [r7, #24]
 800cbc2:	e02a      	b.n	800cc1a <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	6939      	ldr	r1, [r7, #16]
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	440b      	add	r3, r1
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <canardRxUnsubscribe+0xa0>
 800cbd8:	6939      	ldr	r1, [r7, #16]
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	3308      	adds	r3, #8
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	440b      	add	r3, r1
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	e000      	b.n	800cbea <canardRxUnsubscribe+0xa2>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	6939      	ldr	r1, [r7, #16]
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	440b      	add	r3, r1
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	2200      	movs	r2, #0
 800cc12:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	3301      	adds	r3, #1
 800cc18:	61bb      	str	r3, [r7, #24]
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1e:	d9d1      	bls.n	800cbc4 <canardRxUnsubscribe+0x7c>
 800cc20:	e001      	b.n	800cc26 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cc26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	0800c6b1 	.word	0x0800c6b1
 800cc38:	08013a64 	.word	0x08013a64
 800cc3c:	080148f8 	.word	0x080148f8
 800cc40:	08013228 	.word	0x08013228

0800cc44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cc48:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <HAL_Init+0x40>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a0d      	ldr	r2, [pc, #52]	; (800cc84 <HAL_Init+0x40>)
 800cc4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cc54:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <HAL_Init+0x40>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a0a      	ldr	r2, [pc, #40]	; (800cc84 <HAL_Init+0x40>)
 800cc5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cc60:	4b08      	ldr	r3, [pc, #32]	; (800cc84 <HAL_Init+0x40>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a07      	ldr	r2, [pc, #28]	; (800cc84 <HAL_Init+0x40>)
 800cc66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cc6c:	2003      	movs	r0, #3
 800cc6e:	f000 ffad 	bl	800dbcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cc72:	2000      	movs	r0, #0
 800cc74:	f000 f808 	bl	800cc88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cc78:	f7fd fb2c 	bl	800a2d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	40023c00 	.word	0x40023c00

0800cc88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cc90:	4b12      	ldr	r3, [pc, #72]	; (800ccdc <HAL_InitTick+0x54>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	4b12      	ldr	r3, [pc, #72]	; (800cce0 <HAL_InitTick+0x58>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cc9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 ffc5 	bl	800dc36 <HAL_SYSTICK_Config>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e00e      	b.n	800ccd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b0f      	cmp	r3, #15
 800ccba:	d80a      	bhi.n	800ccd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	f000 ff8d 	bl	800dbe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ccc8:	4a06      	ldr	r2, [pc, #24]	; (800cce4 <HAL_InitTick+0x5c>)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e000      	b.n	800ccd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	2000000c 	.word	0x2000000c
 800cce0:	20000014 	.word	0x20000014
 800cce4:	20000010 	.word	0x20000010

0800cce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <HAL_IncTick+0x20>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <HAL_IncTick+0x24>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4a04      	ldr	r2, [pc, #16]	; (800cd0c <HAL_IncTick+0x24>)
 800ccfa:	6013      	str	r3, [r2, #0]
}
 800ccfc:	bf00      	nop
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	20000014 	.word	0x20000014
 800cd0c:	200008ec 	.word	0x200008ec

0800cd10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cd10:	b480      	push	{r7}
 800cd12:	af00      	add	r7, sp, #0
  return uwTick;
 800cd14:	4b03      	ldr	r3, [pc, #12]	; (800cd24 <HAL_GetTick+0x14>)
 800cd16:	681b      	ldr	r3, [r3, #0]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	200008ec 	.word	0x200008ec

0800cd28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cd30:	f7ff ffee 	bl	800cd10 <HAL_GetTick>
 800cd34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd40:	d005      	beq.n	800cd4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cd42:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <HAL_Delay+0x44>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cd4e:	bf00      	nop
 800cd50:	f7ff ffde 	bl	800cd10 <HAL_GetTick>
 800cd54:	4602      	mov	r2, r0
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d8f7      	bhi.n	800cd50 <HAL_Delay+0x28>
  {
  }
}
 800cd60:	bf00      	nop
 800cd62:	bf00      	nop
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20000014 	.word	0x20000014

0800cd70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e0ed      	b.n	800cf5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7fd fac8 	bl	800a324 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0201 	orr.w	r2, r2, #1
 800cda2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cda4:	f7ff ffb4 	bl	800cd10 <HAL_GetTick>
 800cda8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cdaa:	e012      	b.n	800cdd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cdac:	f7ff ffb0 	bl	800cd10 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b0a      	cmp	r3, #10
 800cdb8:	d90b      	bls.n	800cdd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2205      	movs	r2, #5
 800cdca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e0c5      	b.n	800cf5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0e5      	beq.n	800cdac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f022 0202 	bic.w	r2, r2, #2
 800cdee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cdf0:	f7ff ff8e 	bl	800cd10 <HAL_GetTick>
 800cdf4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cdf6:	e012      	b.n	800ce1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cdf8:	f7ff ff8a 	bl	800cd10 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b0a      	cmp	r3, #10
 800ce04:	d90b      	bls.n	800ce1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2205      	movs	r2, #5
 800ce16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e09f      	b.n	800cf5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	f003 0302 	and.w	r3, r3, #2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1e5      	bne.n	800cdf8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7e1b      	ldrb	r3, [r3, #24]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d108      	bne.n	800ce46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	e007      	b.n	800ce56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7e5b      	ldrb	r3, [r3, #25]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d108      	bne.n	800ce70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	e007      	b.n	800ce80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7e9b      	ldrb	r3, [r3, #26]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d108      	bne.n	800ce9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0220 	orr.w	r2, r2, #32
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	e007      	b.n	800ceaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f022 0220 	bic.w	r2, r2, #32
 800cea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7edb      	ldrb	r3, [r3, #27]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d108      	bne.n	800cec4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 0210 	bic.w	r2, r2, #16
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	e007      	b.n	800ced4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f042 0210 	orr.w	r2, r2, #16
 800ced2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7f1b      	ldrb	r3, [r3, #28]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d108      	bne.n	800ceee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f042 0208 	orr.w	r2, r2, #8
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	e007      	b.n	800cefe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f022 0208 	bic.w	r2, r2, #8
 800cefc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	7f5b      	ldrb	r3, [r3, #29]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d108      	bne.n	800cf18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f042 0204 	orr.w	r2, r2, #4
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	e007      	b.n	800cf28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0204 	bic.w	r2, r2, #4
 800cf26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	ea42 0103 	orr.w	r1, r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	1e5a      	subs	r2, r3, #1
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800cf80:	7cfb      	ldrb	r3, [r7, #19]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d003      	beq.n	800cf8e <HAL_CAN_ConfigFilter+0x26>
 800cf86:	7cfb      	ldrb	r3, [r7, #19]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	f040 80be 	bne.w	800d10a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800cf8e:	4b65      	ldr	r3, [pc, #404]	; (800d124 <HAL_CAN_ConfigFilter+0x1bc>)
 800cf90:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cf98:	f043 0201 	orr.w	r2, r3, #1
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cfa8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	f003 031f 	and.w	r3, r3, #31
 800cfce:	2201      	movs	r2, #1
 800cfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	43db      	mvns	r3, r3
 800cfe0:	401a      	ands	r2, r3
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d123      	bne.n	800d038 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	43db      	mvns	r3, r3
 800cffa:	401a      	ands	r2, r3
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d012:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	3248      	adds	r2, #72	; 0x48
 800d018:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d02c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d02e:	6979      	ldr	r1, [r7, #20]
 800d030:	3348      	adds	r3, #72	; 0x48
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	440b      	add	r3, r1
 800d036:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d122      	bne.n	800d086 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	431a      	orrs	r2, r3
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d060:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3248      	adds	r2, #72	; 0x48
 800d066:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d07a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d07c:	6979      	ldr	r1, [r7, #20]
 800d07e:	3348      	adds	r3, #72	; 0x48
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	440b      	add	r3, r1
 800d084:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d109      	bne.n	800d0a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	43db      	mvns	r3, r3
 800d098:	401a      	ands	r2, r3
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d0a0:	e007      	b.n	800d0b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	43db      	mvns	r3, r3
 800d0c4:	401a      	ands	r2, r3
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d0cc:	e007      	b.n	800d0de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d107      	bne.n	800d0f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0fc:	f023 0201 	bic.w	r2, r3, #1
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	e006      	b.n	800d118 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
  }
}
 800d118:	4618      	mov	r0, r3
 800d11a:	371c      	adds	r7, #28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	40006400 	.word	0x40006400

0800d128 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d12e      	bne.n	800d19a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f022 0201 	bic.w	r2, r2, #1
 800d152:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d154:	f7ff fddc 	bl	800cd10 <HAL_GetTick>
 800d158:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d15a:	e012      	b.n	800d182 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d15c:	f7ff fdd8 	bl	800cd10 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	2b0a      	cmp	r3, #10
 800d168:	d90b      	bls.n	800d182 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2205      	movs	r2, #5
 800d17a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e012      	b.n	800d1a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1e5      	bne.n	800d15c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	e006      	b.n	800d1a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
  }
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b089      	sub	sp, #36	; 0x24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
 800d1bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d1ce:	7ffb      	ldrb	r3, [r7, #31]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d003      	beq.n	800d1dc <HAL_CAN_AddTxMessage+0x2c>
 800d1d4:	7ffb      	ldrb	r3, [r7, #31]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	f040 80ad 	bne.w	800d336 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10a      	bne.n	800d1fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d105      	bne.n	800d1fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 8095 	beq.w	800d326 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	0e1b      	lsrs	r3, r3, #24
 800d200:	f003 0303 	and.w	r3, r3, #3
 800d204:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d206:	2201      	movs	r2, #1
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	409a      	lsls	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10d      	bne.n	800d234 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d222:	68f9      	ldr	r1, [r7, #12]
 800d224:	6809      	ldr	r1, [r1, #0]
 800d226:	431a      	orrs	r2, r3
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	3318      	adds	r3, #24
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	440b      	add	r3, r1
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	e00f      	b.n	800d254 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d23e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d248:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	3318      	adds	r3, #24
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	440b      	add	r3, r1
 800d252:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6819      	ldr	r1, [r3, #0]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	691a      	ldr	r2, [r3, #16]
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	3318      	adds	r3, #24
 800d260:	011b      	lsls	r3, r3, #4
 800d262:	440b      	add	r3, r1
 800d264:	3304      	adds	r3, #4
 800d266:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	7d1b      	ldrb	r3, [r3, #20]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d111      	bne.n	800d294 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	3318      	adds	r3, #24
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	4413      	add	r3, r2
 800d27c:	3304      	adds	r3, #4
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	6811      	ldr	r1, [r2, #0]
 800d284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	3318      	adds	r3, #24
 800d28c:	011b      	lsls	r3, r3, #4
 800d28e:	440b      	add	r3, r1
 800d290:	3304      	adds	r3, #4
 800d292:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3307      	adds	r3, #7
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	061a      	lsls	r2, r3, #24
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3306      	adds	r3, #6
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	041b      	lsls	r3, r3, #16
 800d2a4:	431a      	orrs	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3305      	adds	r3, #5
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	021b      	lsls	r3, r3, #8
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	3204      	adds	r2, #4
 800d2b4:	7812      	ldrb	r2, [r2, #0]
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	6811      	ldr	r1, [r2, #0]
 800d2bc:	ea43 0200 	orr.w	r2, r3, r0
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	440b      	add	r3, r1
 800d2c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800d2ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3303      	adds	r3, #3
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	061a      	lsls	r2, r3, #24
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	041b      	lsls	r3, r3, #16
 800d2dc:	431a      	orrs	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	021b      	lsls	r3, r3, #8
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	7812      	ldrb	r2, [r2, #0]
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	6811      	ldr	r1, [r2, #0]
 800d2f2:	ea43 0200 	orr.w	r2, r3, r0
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	440b      	add	r3, r1
 800d2fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d300:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	3318      	adds	r3, #24
 800d30a:	011b      	lsls	r3, r3, #4
 800d30c:	4413      	add	r3, r2
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	6811      	ldr	r1, [r2, #0]
 800d314:	f043 0201 	orr.w	r2, r3, #1
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	3318      	adds	r3, #24
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	440b      	add	r3, r1
 800d320:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	e00e      	b.n	800d344 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e006      	b.n	800d344 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
  }
}
 800d344:	4618      	mov	r0, r3
 800d346:	3724      	adds	r7, #36	; 0x24
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d364:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d003      	beq.n	800d374 <HAL_CAN_GetRxMessage+0x24>
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	2b02      	cmp	r3, #2
 800d370:	f040 8103 	bne.w	800d57a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10e      	bne.n	800d398 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f003 0303 	and.w	r3, r3, #3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d116      	bne.n	800d3b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	e0f7      	b.n	800d588 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	f003 0303 	and.w	r3, r3, #3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d107      	bne.n	800d3b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e0e8      	b.n	800d588 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	331b      	adds	r3, #27
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	4413      	add	r3, r2
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0204 	and.w	r2, r3, #4
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10c      	bne.n	800d3ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	331b      	adds	r3, #27
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	4413      	add	r3, r2
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	0d5b      	lsrs	r3, r3, #21
 800d3e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	e00b      	b.n	800d406 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	331b      	adds	r3, #27
 800d3f6:	011b      	lsls	r3, r3, #4
 800d3f8:	4413      	add	r3, r2
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	08db      	lsrs	r3, r3, #3
 800d3fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	331b      	adds	r3, #27
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 0202 	and.w	r2, r3, #2
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	331b      	adds	r3, #27
 800d424:	011b      	lsls	r3, r3, #4
 800d426:	4413      	add	r3, r2
 800d428:	3304      	adds	r3, #4
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2208      	movs	r2, #8
 800d438:	611a      	str	r2, [r3, #16]
 800d43a:	e00b      	b.n	800d454 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	331b      	adds	r3, #27
 800d444:	011b      	lsls	r3, r3, #4
 800d446:	4413      	add	r3, r2
 800d448:	3304      	adds	r3, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 020f 	and.w	r2, r3, #15
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	331b      	adds	r3, #27
 800d45c:	011b      	lsls	r3, r3, #4
 800d45e:	4413      	add	r3, r2
 800d460:	3304      	adds	r3, #4
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	0a1b      	lsrs	r3, r3, #8
 800d466:	b2da      	uxtb	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	331b      	adds	r3, #27
 800d474:	011b      	lsls	r3, r3, #4
 800d476:	4413      	add	r3, r2
 800d478:	3304      	adds	r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	0c1b      	lsrs	r3, r3, #16
 800d47e:	b29a      	uxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b2da      	uxtb	r2, r3
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	0a1a      	lsrs	r2, r3, #8
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b2d2      	uxtb	r2, r2
 800d4b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	011b      	lsls	r3, r3, #4
 800d4bc:	4413      	add	r3, r2
 800d4be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	0c1a      	lsrs	r2, r3, #16
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	b2d2      	uxtb	r2, r2
 800d4cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	011b      	lsls	r3, r3, #4
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	0e1a      	lsrs	r2, r3, #24
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	3303      	adds	r3, #3
 800d4e4:	b2d2      	uxtb	r2, r2
 800d4e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	b2d2      	uxtb	r2, r2
 800d4fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	011b      	lsls	r3, r3, #4
 800d508:	4413      	add	r3, r2
 800d50a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	0a1a      	lsrs	r2, r3, #8
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3305      	adds	r3, #5
 800d516:	b2d2      	uxtb	r2, r2
 800d518:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	4413      	add	r3, r2
 800d524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	0c1a      	lsrs	r2, r3, #16
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	3306      	adds	r3, #6
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	011b      	lsls	r3, r3, #4
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	0e1a      	lsrs	r2, r3, #24
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	3307      	adds	r3, #7
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d108      	bne.n	800d566 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f042 0220 	orr.w	r2, r2, #32
 800d562:	60da      	str	r2, [r3, #12]
 800d564:	e007      	b.n	800d576 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691a      	ldr	r2, [r3, #16]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f042 0220 	orr.w	r2, r2, #32
 800d574:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	e006      	b.n	800d588 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
  }
}
 800d588:	4618      	mov	r0, r3
 800d58a:	371c      	adds	r7, #28
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d5a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d002      	beq.n	800d5b2 <HAL_CAN_ActivateNotification+0x1e>
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d109      	bne.n	800d5c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6959      	ldr	r1, [r3, #20]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e006      	b.n	800d5d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
  }
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3714      	adds	r7, #20
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08a      	sub	sp, #40	; 0x28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d61c:	6a3b      	ldr	r3, [r7, #32]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	2b00      	cmp	r3, #0
 800d624:	d07c      	beq.n	800d720 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	f003 0301 	and.w	r3, r3, #1
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d023      	beq.n	800d678 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2201      	movs	r2, #1
 800d636:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f983 	bl	800d94e <HAL_CAN_TxMailbox0CompleteCallback>
 800d648:	e016      	b.n	800d678 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d004      	beq.n	800d65e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
 800d65c:	e00c      	b.n	800d678 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
 800d670:	e002      	b.n	800d678 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f989 	bl	800d98a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d024      	beq.n	800d6cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d68a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f963 	bl	800d962 <HAL_CAN_TxMailbox1CompleteCallback>
 800d69c:	e016      	b.n	800d6cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b0:	e00c      	b.n	800d6cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c4:	e002      	b.n	800d6cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f969 	bl	800d99e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d024      	beq.n	800d720 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d6de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d003      	beq.n	800d6f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f943 	bl	800d976 <HAL_CAN_TxMailbox2CompleteCallback>
 800d6f0:	e016      	b.n	800d720 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d702:	627b      	str	r3, [r7, #36]	; 0x24
 800d704:	e00c      	b.n	800d720 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
 800d718:	e002      	b.n	800d720 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f949 	bl	800d9b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d720:	6a3b      	ldr	r3, [r7, #32]
 800d722:	f003 0308 	and.w	r3, r3, #8
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00c      	beq.n	800d744 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d007      	beq.n	800d744 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2210      	movs	r2, #16
 800d742:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00b      	beq.n	800d766 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2208      	movs	r2, #8
 800d75e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f930 	bl	800d9c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	f003 0302 	and.w	r3, r3, #2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d009      	beq.n	800d784 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7fc fac0 	bl	8009d04 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00c      	beq.n	800d7a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	f003 0310 	and.w	r3, r3, #16
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2210      	movs	r2, #16
 800d7a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	f003 0320 	and.w	r3, r3, #32
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f003 0308 	and.w	r3, r3, #8
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f908 	bl	800d9da <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	f003 0310 	and.w	r3, r3, #16
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	f003 0303 	and.w	r3, r3, #3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7fc fd4e 	bl	800a284 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	f003 0310 	and.w	r3, r3, #16
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d006      	beq.n	800d80a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2210      	movs	r2, #16
 800d802:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f8f2 	bl	800d9ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f003 0308 	and.w	r3, r3, #8
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d006      	beq.n	800d82c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2208      	movs	r2, #8
 800d824:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f8eb 	bl	800da02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d832:	2b00      	cmp	r3, #0
 800d834:	d07b      	beq.n	800d92e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f003 0304 	and.w	r3, r3, #4
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d072      	beq.n	800d926 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d846:	2b00      	cmp	r3, #0
 800d848:	d008      	beq.n	800d85c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	f043 0301 	orr.w	r3, r3, #1
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d862:	2b00      	cmp	r3, #0
 800d864:	d008      	beq.n	800d878 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d003      	beq.n	800d878 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	f043 0302 	orr.w	r3, r3, #2
 800d876:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d008      	beq.n	800d894 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	f043 0304 	orr.w	r3, r3, #4
 800d892:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d043      	beq.n	800d926 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d03e      	beq.n	800d926 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d8ae:	2b60      	cmp	r3, #96	; 0x60
 800d8b0:	d02b      	beq.n	800d90a <HAL_CAN_IRQHandler+0x32a>
 800d8b2:	2b60      	cmp	r3, #96	; 0x60
 800d8b4:	d82e      	bhi.n	800d914 <HAL_CAN_IRQHandler+0x334>
 800d8b6:	2b50      	cmp	r3, #80	; 0x50
 800d8b8:	d022      	beq.n	800d900 <HAL_CAN_IRQHandler+0x320>
 800d8ba:	2b50      	cmp	r3, #80	; 0x50
 800d8bc:	d82a      	bhi.n	800d914 <HAL_CAN_IRQHandler+0x334>
 800d8be:	2b40      	cmp	r3, #64	; 0x40
 800d8c0:	d019      	beq.n	800d8f6 <HAL_CAN_IRQHandler+0x316>
 800d8c2:	2b40      	cmp	r3, #64	; 0x40
 800d8c4:	d826      	bhi.n	800d914 <HAL_CAN_IRQHandler+0x334>
 800d8c6:	2b30      	cmp	r3, #48	; 0x30
 800d8c8:	d010      	beq.n	800d8ec <HAL_CAN_IRQHandler+0x30c>
 800d8ca:	2b30      	cmp	r3, #48	; 0x30
 800d8cc:	d822      	bhi.n	800d914 <HAL_CAN_IRQHandler+0x334>
 800d8ce:	2b10      	cmp	r3, #16
 800d8d0:	d002      	beq.n	800d8d8 <HAL_CAN_IRQHandler+0x2f8>
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d005      	beq.n	800d8e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d8d6:	e01d      	b.n	800d914 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	f043 0308 	orr.w	r3, r3, #8
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d8e0:	e019      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	f043 0310 	orr.w	r3, r3, #16
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d8ea:	e014      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	f043 0320 	orr.w	r3, r3, #32
 800d8f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d8f4:	e00f      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d8fe:	e00a      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d908:	e005      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d912:	e000      	b.n	800d916 <HAL_CAN_IRQHandler+0x336>
            break;
 800d914:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	699a      	ldr	r2, [r3, #24]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d924:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2204      	movs	r2, #4
 800d92c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	431a      	orrs	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f868 	bl	800da16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d946:	bf00      	nop
 800d948:	3728      	adds	r7, #40	; 0x28
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d94e:	b480      	push	{r7}
 800d950:	b083      	sub	sp, #12
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d962:	b480      	push	{r7}
 800d964:	b083      	sub	sp, #12
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d96a:	bf00      	nop
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d97e:	bf00      	nop
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d98a:	b480      	push	{r7}
 800d98c:	b083      	sub	sp, #12
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d992:	bf00      	nop
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b083      	sub	sp, #12
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d9ba:	bf00      	nop
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d9e2:	bf00      	nop
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d9ee:	b480      	push	{r7}
 800d9f0:	b083      	sub	sp, #12
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d9f6:	bf00      	nop
 800d9f8:	370c      	adds	r7, #12
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800da02:	b480      	push	{r7}
 800da04:	b083      	sub	sp, #12
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800da0a:	bf00      	nop
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800da16:	b480      	push	{r7}
 800da18:	b083      	sub	sp, #12
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800da1e:	bf00      	nop
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
	...

0800da2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800da3c:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <__NVIC_SetPriorityGrouping+0x44>)
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800da48:	4013      	ands	r3, r2
 800da4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800da54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800da58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800da5e:	4a04      	ldr	r2, [pc, #16]	; (800da70 <__NVIC_SetPriorityGrouping+0x44>)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	60d3      	str	r3, [r2, #12]
}
 800da64:	bf00      	nop
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	e000ed00 	.word	0xe000ed00

0800da74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800da74:	b480      	push	{r7}
 800da76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800da78:	4b04      	ldr	r3, [pc, #16]	; (800da8c <__NVIC_GetPriorityGrouping+0x18>)
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	0a1b      	lsrs	r3, r3, #8
 800da7e:	f003 0307 	and.w	r3, r3, #7
}
 800da82:	4618      	mov	r0, r3
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	e000ed00 	.word	0xe000ed00

0800da90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	4603      	mov	r3, r0
 800da98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	db0b      	blt.n	800daba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	f003 021f 	and.w	r2, r3, #31
 800daa8:	4907      	ldr	r1, [pc, #28]	; (800dac8 <__NVIC_EnableIRQ+0x38>)
 800daaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daae:	095b      	lsrs	r3, r3, #5
 800dab0:	2001      	movs	r0, #1
 800dab2:	fa00 f202 	lsl.w	r2, r0, r2
 800dab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	e000e100 	.word	0xe000e100

0800dacc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	6039      	str	r1, [r7, #0]
 800dad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	db0a      	blt.n	800daf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	490c      	ldr	r1, [pc, #48]	; (800db18 <__NVIC_SetPriority+0x4c>)
 800dae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daea:	0112      	lsls	r2, r2, #4
 800daec:	b2d2      	uxtb	r2, r2
 800daee:	440b      	add	r3, r1
 800daf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800daf4:	e00a      	b.n	800db0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	4908      	ldr	r1, [pc, #32]	; (800db1c <__NVIC_SetPriority+0x50>)
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	f003 030f 	and.w	r3, r3, #15
 800db02:	3b04      	subs	r3, #4
 800db04:	0112      	lsls	r2, r2, #4
 800db06:	b2d2      	uxtb	r2, r2
 800db08:	440b      	add	r3, r1
 800db0a:	761a      	strb	r2, [r3, #24]
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	e000e100 	.word	0xe000e100
 800db1c:	e000ed00 	.word	0xe000ed00

0800db20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800db20:	b480      	push	{r7}
 800db22:	b089      	sub	sp, #36	; 0x24
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f003 0307 	and.w	r3, r3, #7
 800db32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f1c3 0307 	rsb	r3, r3, #7
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	bf28      	it	cs
 800db3e:	2304      	movcs	r3, #4
 800db40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	3304      	adds	r3, #4
 800db46:	2b06      	cmp	r3, #6
 800db48:	d902      	bls.n	800db50 <NVIC_EncodePriority+0x30>
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	3b03      	subs	r3, #3
 800db4e:	e000      	b.n	800db52 <NVIC_EncodePriority+0x32>
 800db50:	2300      	movs	r3, #0
 800db52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800db54:	f04f 32ff 	mov.w	r2, #4294967295
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	fa02 f303 	lsl.w	r3, r2, r3
 800db5e:	43da      	mvns	r2, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	401a      	ands	r2, r3
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800db68:	f04f 31ff 	mov.w	r1, #4294967295
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	fa01 f303 	lsl.w	r3, r1, r3
 800db72:	43d9      	mvns	r1, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800db78:	4313      	orrs	r3, r2
         );
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3724      	adds	r7, #36	; 0x24
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
	...

0800db88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3b01      	subs	r3, #1
 800db94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db98:	d301      	bcc.n	800db9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800db9a:	2301      	movs	r3, #1
 800db9c:	e00f      	b.n	800dbbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800db9e:	4a0a      	ldr	r2, [pc, #40]	; (800dbc8 <SysTick_Config+0x40>)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dba6:	210f      	movs	r1, #15
 800dba8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbac:	f7ff ff8e 	bl	800dacc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <SysTick_Config+0x40>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dbb6:	4b04      	ldr	r3, [pc, #16]	; (800dbc8 <SysTick_Config+0x40>)
 800dbb8:	2207      	movs	r2, #7
 800dbba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	e000e010 	.word	0xe000e010

0800dbcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ff29 	bl	800da2c <__NVIC_SetPriorityGrouping>
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b086      	sub	sp, #24
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	4603      	mov	r3, r0
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
 800dbee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dbf4:	f7ff ff3e 	bl	800da74 <__NVIC_GetPriorityGrouping>
 800dbf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	6978      	ldr	r0, [r7, #20]
 800dc00:	f7ff ff8e 	bl	800db20 <NVIC_EncodePriority>
 800dc04:	4602      	mov	r2, r0
 800dc06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff ff5d 	bl	800dacc <__NVIC_SetPriority>
}
 800dc12:	bf00      	nop
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	4603      	mov	r3, r0
 800dc22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff ff31 	bl	800da90 <__NVIC_EnableIRQ>
}
 800dc2e:	bf00      	nop
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff ffa2 	bl	800db88 <SysTick_Config>
 800dc44:	4603      	mov	r3, r0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b089      	sub	sp, #36	; 0x24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dc66:	2300      	movs	r3, #0
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	e165      	b.n	800df38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	fa02 f303 	lsl.w	r3, r2, r3
 800dc74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	f040 8154 	bne.w	800df32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f003 0303 	and.w	r3, r3, #3
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d005      	beq.n	800dca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d130      	bne.n	800dd04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	2203      	movs	r2, #3
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	43db      	mvns	r3, r3
 800dcb4:	69ba      	ldr	r2, [r7, #24]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dcd8:	2201      	movs	r2, #1
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dce0:	43db      	mvns	r3, r3
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	4013      	ands	r3, r2
 800dce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	091b      	lsrs	r3, r3, #4
 800dcee:	f003 0201 	and.w	r2, r3, #1
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf8:	69ba      	ldr	r2, [r7, #24]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	69ba      	ldr	r2, [r7, #24]
 800dd02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d017      	beq.n	800dd40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	2203      	movs	r2, #3
 800dd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd20:	43db      	mvns	r3, r3
 800dd22:	69ba      	ldr	r2, [r7, #24]
 800dd24:	4013      	ands	r3, r2
 800dd26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	689a      	ldr	r2, [r3, #8]
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	fa02 f303 	lsl.w	r3, r2, r3
 800dd34:	69ba      	ldr	r2, [r7, #24]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	69ba      	ldr	r2, [r7, #24]
 800dd3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	f003 0303 	and.w	r3, r3, #3
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d123      	bne.n	800dd94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	08da      	lsrs	r2, r3, #3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	3208      	adds	r2, #8
 800dd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	f003 0307 	and.w	r3, r3, #7
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	220f      	movs	r2, #15
 800dd64:	fa02 f303 	lsl.w	r3, r2, r3
 800dd68:	43db      	mvns	r3, r3
 800dd6a:	69ba      	ldr	r2, [r7, #24]
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	691a      	ldr	r2, [r3, #16]
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	f003 0307 	and.w	r3, r3, #7
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd80:	69ba      	ldr	r2, [r7, #24]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	08da      	lsrs	r2, r3, #3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3208      	adds	r2, #8
 800dd8e:	69b9      	ldr	r1, [r7, #24]
 800dd90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	2203      	movs	r2, #3
 800dda0:	fa02 f303 	lsl.w	r3, r2, r3
 800dda4:	43db      	mvns	r3, r3
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	4013      	ands	r3, r2
 800ddaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f003 0203 	and.w	r2, r3, #3
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddbc:	69ba      	ldr	r2, [r7, #24]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 80ae 	beq.w	800df32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	4b5d      	ldr	r3, [pc, #372]	; (800df50 <HAL_GPIO_Init+0x300>)
 800dddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddde:	4a5c      	ldr	r2, [pc, #368]	; (800df50 <HAL_GPIO_Init+0x300>)
 800dde0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dde4:	6453      	str	r3, [r2, #68]	; 0x44
 800dde6:	4b5a      	ldr	r3, [pc, #360]	; (800df50 <HAL_GPIO_Init+0x300>)
 800dde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ddf2:	4a58      	ldr	r2, [pc, #352]	; (800df54 <HAL_GPIO_Init+0x304>)
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	089b      	lsrs	r3, r3, #2
 800ddf8:	3302      	adds	r3, #2
 800ddfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	f003 0303 	and.w	r3, r3, #3
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	220f      	movs	r2, #15
 800de0a:	fa02 f303 	lsl.w	r3, r2, r3
 800de0e:	43db      	mvns	r3, r3
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	4013      	ands	r3, r2
 800de14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a4f      	ldr	r2, [pc, #316]	; (800df58 <HAL_GPIO_Init+0x308>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d025      	beq.n	800de6a <HAL_GPIO_Init+0x21a>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a4e      	ldr	r2, [pc, #312]	; (800df5c <HAL_GPIO_Init+0x30c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d01f      	beq.n	800de66 <HAL_GPIO_Init+0x216>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a4d      	ldr	r2, [pc, #308]	; (800df60 <HAL_GPIO_Init+0x310>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d019      	beq.n	800de62 <HAL_GPIO_Init+0x212>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a4c      	ldr	r2, [pc, #304]	; (800df64 <HAL_GPIO_Init+0x314>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d013      	beq.n	800de5e <HAL_GPIO_Init+0x20e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a4b      	ldr	r2, [pc, #300]	; (800df68 <HAL_GPIO_Init+0x318>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d00d      	beq.n	800de5a <HAL_GPIO_Init+0x20a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a4a      	ldr	r2, [pc, #296]	; (800df6c <HAL_GPIO_Init+0x31c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d007      	beq.n	800de56 <HAL_GPIO_Init+0x206>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a49      	ldr	r2, [pc, #292]	; (800df70 <HAL_GPIO_Init+0x320>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d101      	bne.n	800de52 <HAL_GPIO_Init+0x202>
 800de4e:	2306      	movs	r3, #6
 800de50:	e00c      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de52:	2307      	movs	r3, #7
 800de54:	e00a      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de56:	2305      	movs	r3, #5
 800de58:	e008      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de5a:	2304      	movs	r3, #4
 800de5c:	e006      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de5e:	2303      	movs	r3, #3
 800de60:	e004      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de62:	2302      	movs	r3, #2
 800de64:	e002      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de66:	2301      	movs	r3, #1
 800de68:	e000      	b.n	800de6c <HAL_GPIO_Init+0x21c>
 800de6a:	2300      	movs	r3, #0
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	f002 0203 	and.w	r2, r2, #3
 800de72:	0092      	lsls	r2, r2, #2
 800de74:	4093      	lsls	r3, r2
 800de76:	69ba      	ldr	r2, [r7, #24]
 800de78:	4313      	orrs	r3, r2
 800de7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800de7c:	4935      	ldr	r1, [pc, #212]	; (800df54 <HAL_GPIO_Init+0x304>)
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	089b      	lsrs	r3, r3, #2
 800de82:	3302      	adds	r3, #2
 800de84:	69ba      	ldr	r2, [r7, #24]
 800de86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800de8a:	4b3a      	ldr	r3, [pc, #232]	; (800df74 <HAL_GPIO_Init+0x324>)
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	43db      	mvns	r3, r3
 800de94:	69ba      	ldr	r2, [r7, #24]
 800de96:	4013      	ands	r3, r2
 800de98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d003      	beq.n	800deae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800dea6:	69ba      	ldr	r2, [r7, #24]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	4313      	orrs	r3, r2
 800deac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800deae:	4a31      	ldr	r2, [pc, #196]	; (800df74 <HAL_GPIO_Init+0x324>)
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800deb4:	4b2f      	ldr	r3, [pc, #188]	; (800df74 <HAL_GPIO_Init+0x324>)
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	43db      	mvns	r3, r3
 800debe:	69ba      	ldr	r2, [r7, #24]
 800dec0:	4013      	ands	r3, r2
 800dec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800decc:	2b00      	cmp	r3, #0
 800dece:	d003      	beq.n	800ded8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800ded0:	69ba      	ldr	r2, [r7, #24]
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ded8:	4a26      	ldr	r2, [pc, #152]	; (800df74 <HAL_GPIO_Init+0x324>)
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800dede:	4b25      	ldr	r3, [pc, #148]	; (800df74 <HAL_GPIO_Init+0x324>)
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	43db      	mvns	r3, r3
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	4013      	ands	r3, r2
 800deec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	4313      	orrs	r3, r2
 800df00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800df02:	4a1c      	ldr	r2, [pc, #112]	; (800df74 <HAL_GPIO_Init+0x324>)
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800df08:	4b1a      	ldr	r3, [pc, #104]	; (800df74 <HAL_GPIO_Init+0x324>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	43db      	mvns	r3, r3
 800df12:	69ba      	ldr	r2, [r7, #24]
 800df14:	4013      	ands	r3, r2
 800df16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df20:	2b00      	cmp	r3, #0
 800df22:	d003      	beq.n	800df2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	4313      	orrs	r3, r2
 800df2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800df2c:	4a11      	ldr	r2, [pc, #68]	; (800df74 <HAL_GPIO_Init+0x324>)
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	3301      	adds	r3, #1
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	2b0f      	cmp	r3, #15
 800df3c:	f67f ae96 	bls.w	800dc6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800df40:	bf00      	nop
 800df42:	bf00      	nop
 800df44:	3724      	adds	r7, #36	; 0x24
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	40023800 	.word	0x40023800
 800df54:	40013800 	.word	0x40013800
 800df58:	40020000 	.word	0x40020000
 800df5c:	40020400 	.word	0x40020400
 800df60:	40020800 	.word	0x40020800
 800df64:	40020c00 	.word	0x40020c00
 800df68:	40021000 	.word	0x40021000
 800df6c:	40021400 	.word	0x40021400
 800df70:	40021800 	.word	0x40021800
 800df74:	40013c00 	.word	0x40013c00

0800df78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	807b      	strh	r3, [r7, #2]
 800df84:	4613      	mov	r3, r2
 800df86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800df88:	787b      	ldrb	r3, [r7, #1]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800df8e:	887a      	ldrh	r2, [r7, #2]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800df94:	e003      	b.n	800df9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800df96:	887b      	ldrh	r3, [r7, #2]
 800df98:	041a      	lsls	r2, r3, #16
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	619a      	str	r2, [r3, #24]
}
 800df9e:	bf00      	nop
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
	...

0800dfac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e0cc      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dfc0:	4b68      	ldr	r3, [pc, #416]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 030f 	and.w	r3, r3, #15
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d90c      	bls.n	800dfe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dfce:	4b65      	ldr	r3, [pc, #404]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	b2d2      	uxtb	r2, r2
 800dfd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dfd6:	4b63      	ldr	r3, [pc, #396]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 030f 	and.w	r3, r3, #15
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d001      	beq.n	800dfe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e0b8      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 0302 	and.w	r3, r3, #2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d020      	beq.n	800e036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f003 0304 	and.w	r3, r3, #4
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e000:	4b59      	ldr	r3, [pc, #356]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	4a58      	ldr	r2, [pc, #352]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e00a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f003 0308 	and.w	r3, r3, #8
 800e014:	2b00      	cmp	r3, #0
 800e016:	d005      	beq.n	800e024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e018:	4b53      	ldr	r3, [pc, #332]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	4a52      	ldr	r2, [pc, #328]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e01e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e024:	4b50      	ldr	r3, [pc, #320]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	494d      	ldr	r1, [pc, #308]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e032:	4313      	orrs	r3, r2
 800e034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d044      	beq.n	800e0cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d107      	bne.n	800e05a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e04a:	4b47      	ldr	r3, [pc, #284]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e052:	2b00      	cmp	r3, #0
 800e054:	d119      	bne.n	800e08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e07f      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d003      	beq.n	800e06a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e066:	2b03      	cmp	r3, #3
 800e068:	d107      	bne.n	800e07a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e06a:	4b3f      	ldr	r3, [pc, #252]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d109      	bne.n	800e08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e06f      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e07a:	4b3b      	ldr	r3, [pc, #236]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e067      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e08a:	4b37      	ldr	r3, [pc, #220]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	f023 0203 	bic.w	r2, r3, #3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	4934      	ldr	r1, [pc, #208]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e098:	4313      	orrs	r3, r2
 800e09a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e09c:	f7fe fe38 	bl	800cd10 <HAL_GetTick>
 800e0a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0a2:	e00a      	b.n	800e0ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0a4:	f7fe fe34 	bl	800cd10 <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d901      	bls.n	800e0ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e04f      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0ba:	4b2b      	ldr	r3, [pc, #172]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	f003 020c 	and.w	r2, r3, #12
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d1eb      	bne.n	800e0a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e0cc:	4b25      	ldr	r3, [pc, #148]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 030f 	and.w	r3, r3, #15
 800e0d4:	683a      	ldr	r2, [r7, #0]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d20c      	bcs.n	800e0f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0da:	4b22      	ldr	r3, [pc, #136]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	b2d2      	uxtb	r2, r2
 800e0e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0e2:	4b20      	ldr	r3, [pc, #128]	; (800e164 <HAL_RCC_ClockConfig+0x1b8>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 030f 	and.w	r3, r3, #15
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d001      	beq.n	800e0f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e032      	b.n	800e15a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f003 0304 	and.w	r3, r3, #4
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d008      	beq.n	800e112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e100:	4b19      	ldr	r3, [pc, #100]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	4916      	ldr	r1, [pc, #88]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e10e:	4313      	orrs	r3, r2
 800e110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f003 0308 	and.w	r3, r3, #8
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d009      	beq.n	800e132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e11e:	4b12      	ldr	r3, [pc, #72]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	490e      	ldr	r1, [pc, #56]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e12e:	4313      	orrs	r3, r2
 800e130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e132:	f000 f821 	bl	800e178 <HAL_RCC_GetSysClockFreq>
 800e136:	4602      	mov	r2, r0
 800e138:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <HAL_RCC_ClockConfig+0x1bc>)
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	091b      	lsrs	r3, r3, #4
 800e13e:	f003 030f 	and.w	r3, r3, #15
 800e142:	490a      	ldr	r1, [pc, #40]	; (800e16c <HAL_RCC_ClockConfig+0x1c0>)
 800e144:	5ccb      	ldrb	r3, [r1, r3]
 800e146:	fa22 f303 	lsr.w	r3, r2, r3
 800e14a:	4a09      	ldr	r2, [pc, #36]	; (800e170 <HAL_RCC_ClockConfig+0x1c4>)
 800e14c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <HAL_RCC_ClockConfig+0x1c8>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe fd98 	bl	800cc88 <HAL_InitTick>

  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	40023c00 	.word	0x40023c00
 800e168:	40023800 	.word	0x40023800
 800e16c:	08014438 	.word	0x08014438
 800e170:	2000000c 	.word	0x2000000c
 800e174:	20000010 	.word	0x20000010

0800e178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e17c:	b0ae      	sub	sp, #184	; 0xb8
 800e17e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800e186:	2300      	movs	r3, #0
 800e188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800e18c:	2300      	movs	r3, #0
 800e18e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800e192:	2300      	movs	r3, #0
 800e194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800e198:	2300      	movs	r3, #0
 800e19a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e19e:	4bcb      	ldr	r3, [pc, #812]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	f003 030c 	and.w	r3, r3, #12
 800e1a6:	2b0c      	cmp	r3, #12
 800e1a8:	f200 8206 	bhi.w	800e5b8 <HAL_RCC_GetSysClockFreq+0x440>
 800e1ac:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e1e9 	.word	0x0800e1e9
 800e1b8:	0800e5b9 	.word	0x0800e5b9
 800e1bc:	0800e5b9 	.word	0x0800e5b9
 800e1c0:	0800e5b9 	.word	0x0800e5b9
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	0800e5b9 	.word	0x0800e5b9
 800e1cc:	0800e5b9 	.word	0x0800e5b9
 800e1d0:	0800e5b9 	.word	0x0800e5b9
 800e1d4:	0800e1f9 	.word	0x0800e1f9
 800e1d8:	0800e5b9 	.word	0x0800e5b9
 800e1dc:	0800e5b9 	.word	0x0800e5b9
 800e1e0:	0800e5b9 	.word	0x0800e5b9
 800e1e4:	0800e3e9 	.word	0x0800e3e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e1e8:	4bb9      	ldr	r3, [pc, #740]	; (800e4d0 <HAL_RCC_GetSysClockFreq+0x358>)
 800e1ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e1ee:	e1e7      	b.n	800e5c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e1f0:	4bb8      	ldr	r3, [pc, #736]	; (800e4d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e1f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e1f6:	e1e3      	b.n	800e5c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e1f8:	4bb4      	ldr	r3, [pc, #720]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e204:	4bb1      	ldr	r3, [pc, #708]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d071      	beq.n	800e2f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e210:	4bae      	ldr	r3, [pc, #696]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	099b      	lsrs	r3, r3, #6
 800e216:	2200      	movs	r2, #0
 800e218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e21c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e22c:	2300      	movs	r3, #0
 800e22e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e236:	4622      	mov	r2, r4
 800e238:	462b      	mov	r3, r5
 800e23a:	f04f 0000 	mov.w	r0, #0
 800e23e:	f04f 0100 	mov.w	r1, #0
 800e242:	0159      	lsls	r1, r3, #5
 800e244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e248:	0150      	lsls	r0, r2, #5
 800e24a:	4602      	mov	r2, r0
 800e24c:	460b      	mov	r3, r1
 800e24e:	4621      	mov	r1, r4
 800e250:	1a51      	subs	r1, r2, r1
 800e252:	6439      	str	r1, [r7, #64]	; 0x40
 800e254:	4629      	mov	r1, r5
 800e256:	eb63 0301 	sbc.w	r3, r3, r1
 800e25a:	647b      	str	r3, [r7, #68]	; 0x44
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	f04f 0300 	mov.w	r3, #0
 800e264:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800e268:	4649      	mov	r1, r9
 800e26a:	018b      	lsls	r3, r1, #6
 800e26c:	4641      	mov	r1, r8
 800e26e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e272:	4641      	mov	r1, r8
 800e274:	018a      	lsls	r2, r1, #6
 800e276:	4641      	mov	r1, r8
 800e278:	1a51      	subs	r1, r2, r1
 800e27a:	63b9      	str	r1, [r7, #56]	; 0x38
 800e27c:	4649      	mov	r1, r9
 800e27e:	eb63 0301 	sbc.w	r3, r3, r1
 800e282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e284:	f04f 0200 	mov.w	r2, #0
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800e290:	4649      	mov	r1, r9
 800e292:	00cb      	lsls	r3, r1, #3
 800e294:	4641      	mov	r1, r8
 800e296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e29a:	4641      	mov	r1, r8
 800e29c:	00ca      	lsls	r2, r1, #3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	189b      	adds	r3, r3, r2
 800e2a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e2aa:	462b      	mov	r3, r5
 800e2ac:	460a      	mov	r2, r1
 800e2ae:	eb42 0303 	adc.w	r3, r2, r3
 800e2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2b4:	f04f 0200 	mov.w	r2, #0
 800e2b8:	f04f 0300 	mov.w	r3, #0
 800e2bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	024b      	lsls	r3, r1, #9
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	024a      	lsls	r2, r1, #9
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e2dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e2e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e2e4:	f7f2 fc90 	bl	8000c08 <__aeabi_uldivmod>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e2f2:	e067      	b.n	800e3c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e2f4:	4b75      	ldr	r3, [pc, #468]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	099b      	lsrs	r3, r3, #6
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e300:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e30c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e30e:	2300      	movs	r3, #0
 800e310:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e312:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800e316:	4622      	mov	r2, r4
 800e318:	462b      	mov	r3, r5
 800e31a:	f04f 0000 	mov.w	r0, #0
 800e31e:	f04f 0100 	mov.w	r1, #0
 800e322:	0159      	lsls	r1, r3, #5
 800e324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e328:	0150      	lsls	r0, r2, #5
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4621      	mov	r1, r4
 800e330:	1a51      	subs	r1, r2, r1
 800e332:	62b9      	str	r1, [r7, #40]	; 0x28
 800e334:	4629      	mov	r1, r5
 800e336:	eb63 0301 	sbc.w	r3, r3, r1
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e33c:	f04f 0200 	mov.w	r2, #0
 800e340:	f04f 0300 	mov.w	r3, #0
 800e344:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800e348:	4649      	mov	r1, r9
 800e34a:	018b      	lsls	r3, r1, #6
 800e34c:	4641      	mov	r1, r8
 800e34e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e352:	4641      	mov	r1, r8
 800e354:	018a      	lsls	r2, r1, #6
 800e356:	4641      	mov	r1, r8
 800e358:	ebb2 0a01 	subs.w	sl, r2, r1
 800e35c:	4649      	mov	r1, r9
 800e35e:	eb63 0b01 	sbc.w	fp, r3, r1
 800e362:	f04f 0200 	mov.w	r2, #0
 800e366:	f04f 0300 	mov.w	r3, #0
 800e36a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e36e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e376:	4692      	mov	sl, r2
 800e378:	469b      	mov	fp, r3
 800e37a:	4623      	mov	r3, r4
 800e37c:	eb1a 0303 	adds.w	r3, sl, r3
 800e380:	623b      	str	r3, [r7, #32]
 800e382:	462b      	mov	r3, r5
 800e384:	eb4b 0303 	adc.w	r3, fp, r3
 800e388:	627b      	str	r3, [r7, #36]	; 0x24
 800e38a:	f04f 0200 	mov.w	r2, #0
 800e38e:	f04f 0300 	mov.w	r3, #0
 800e392:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e396:	4629      	mov	r1, r5
 800e398:	028b      	lsls	r3, r1, #10
 800e39a:	4621      	mov	r1, r4
 800e39c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	028a      	lsls	r2, r1, #10
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	673b      	str	r3, [r7, #112]	; 0x70
 800e3b0:	677a      	str	r2, [r7, #116]	; 0x74
 800e3b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e3b6:	f7f2 fc27 	bl	8000c08 <__aeabi_uldivmod>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	460b      	mov	r3, r1
 800e3be:	4613      	mov	r3, r2
 800e3c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e3c4:	4b41      	ldr	r3, [pc, #260]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	0c1b      	lsrs	r3, r3, #16
 800e3ca:	f003 0303 	and.w	r3, r3, #3
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 800e3d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e3da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e3e6:	e0eb      	b.n	800e5c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e3e8:	4b38      	ldr	r3, [pc, #224]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e3f4:	4b35      	ldr	r3, [pc, #212]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d06b      	beq.n	800e4d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e400:	4b32      	ldr	r3, [pc, #200]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x354>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	099b      	lsrs	r3, r3, #6
 800e406:	2200      	movs	r2, #0
 800e408:	66bb      	str	r3, [r7, #104]	; 0x68
 800e40a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e40c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e412:	663b      	str	r3, [r7, #96]	; 0x60
 800e414:	2300      	movs	r3, #0
 800e416:	667b      	str	r3, [r7, #100]	; 0x64
 800e418:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e41c:	4622      	mov	r2, r4
 800e41e:	462b      	mov	r3, r5
 800e420:	f04f 0000 	mov.w	r0, #0
 800e424:	f04f 0100 	mov.w	r1, #0
 800e428:	0159      	lsls	r1, r3, #5
 800e42a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e42e:	0150      	lsls	r0, r2, #5
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4621      	mov	r1, r4
 800e436:	1a51      	subs	r1, r2, r1
 800e438:	61b9      	str	r1, [r7, #24]
 800e43a:	4629      	mov	r1, r5
 800e43c:	eb63 0301 	sbc.w	r3, r3, r1
 800e440:	61fb      	str	r3, [r7, #28]
 800e442:	f04f 0200 	mov.w	r2, #0
 800e446:	f04f 0300 	mov.w	r3, #0
 800e44a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e44e:	4659      	mov	r1, fp
 800e450:	018b      	lsls	r3, r1, #6
 800e452:	4651      	mov	r1, sl
 800e454:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e458:	4651      	mov	r1, sl
 800e45a:	018a      	lsls	r2, r1, #6
 800e45c:	4651      	mov	r1, sl
 800e45e:	ebb2 0801 	subs.w	r8, r2, r1
 800e462:	4659      	mov	r1, fp
 800e464:	eb63 0901 	sbc.w	r9, r3, r1
 800e468:	f04f 0200 	mov.w	r2, #0
 800e46c:	f04f 0300 	mov.w	r3, #0
 800e470:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e474:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e478:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e47c:	4690      	mov	r8, r2
 800e47e:	4699      	mov	r9, r3
 800e480:	4623      	mov	r3, r4
 800e482:	eb18 0303 	adds.w	r3, r8, r3
 800e486:	613b      	str	r3, [r7, #16]
 800e488:	462b      	mov	r3, r5
 800e48a:	eb49 0303 	adc.w	r3, r9, r3
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	f04f 0200 	mov.w	r2, #0
 800e494:	f04f 0300 	mov.w	r3, #0
 800e498:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e49c:	4629      	mov	r1, r5
 800e49e:	024b      	lsls	r3, r1, #9
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	024a      	lsls	r2, r1, #9
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e4b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e4bc:	f7f2 fba4 	bl	8000c08 <__aeabi_uldivmod>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4ca:	e065      	b.n	800e598 <HAL_RCC_GetSysClockFreq+0x420>
 800e4cc:	40023800 	.word	0x40023800
 800e4d0:	00f42400 	.word	0x00f42400
 800e4d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4d8:	4b3d      	ldr	r3, [pc, #244]	; (800e5d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	099b      	lsrs	r3, r3, #6
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e4e8:	653b      	str	r3, [r7, #80]	; 0x50
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	657b      	str	r3, [r7, #84]	; 0x54
 800e4ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800e4f2:	4642      	mov	r2, r8
 800e4f4:	464b      	mov	r3, r9
 800e4f6:	f04f 0000 	mov.w	r0, #0
 800e4fa:	f04f 0100 	mov.w	r1, #0
 800e4fe:	0159      	lsls	r1, r3, #5
 800e500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e504:	0150      	lsls	r0, r2, #5
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4641      	mov	r1, r8
 800e50c:	1a51      	subs	r1, r2, r1
 800e50e:	60b9      	str	r1, [r7, #8]
 800e510:	4649      	mov	r1, r9
 800e512:	eb63 0301 	sbc.w	r3, r3, r1
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	f04f 0200 	mov.w	r2, #0
 800e51c:	f04f 0300 	mov.w	r3, #0
 800e520:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e524:	4659      	mov	r1, fp
 800e526:	018b      	lsls	r3, r1, #6
 800e528:	4651      	mov	r1, sl
 800e52a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e52e:	4651      	mov	r1, sl
 800e530:	018a      	lsls	r2, r1, #6
 800e532:	4651      	mov	r1, sl
 800e534:	1a54      	subs	r4, r2, r1
 800e536:	4659      	mov	r1, fp
 800e538:	eb63 0501 	sbc.w	r5, r3, r1
 800e53c:	f04f 0200 	mov.w	r2, #0
 800e540:	f04f 0300 	mov.w	r3, #0
 800e544:	00eb      	lsls	r3, r5, #3
 800e546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e54a:	00e2      	lsls	r2, r4, #3
 800e54c:	4614      	mov	r4, r2
 800e54e:	461d      	mov	r5, r3
 800e550:	4643      	mov	r3, r8
 800e552:	18e3      	adds	r3, r4, r3
 800e554:	603b      	str	r3, [r7, #0]
 800e556:	464b      	mov	r3, r9
 800e558:	eb45 0303 	adc.w	r3, r5, r3
 800e55c:	607b      	str	r3, [r7, #4]
 800e55e:	f04f 0200 	mov.w	r2, #0
 800e562:	f04f 0300 	mov.w	r3, #0
 800e566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e56a:	4629      	mov	r1, r5
 800e56c:	028b      	lsls	r3, r1, #10
 800e56e:	4621      	mov	r1, r4
 800e570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e574:	4621      	mov	r1, r4
 800e576:	028a      	lsls	r2, r1, #10
 800e578:	4610      	mov	r0, r2
 800e57a:	4619      	mov	r1, r3
 800e57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e580:	2200      	movs	r2, #0
 800e582:	64bb      	str	r3, [r7, #72]	; 0x48
 800e584:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e586:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e58a:	f7f2 fb3d 	bl	8000c08 <__aeabi_uldivmod>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4613      	mov	r3, r2
 800e594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e598:	4b0d      	ldr	r3, [pc, #52]	; (800e5d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	0f1b      	lsrs	r3, r3, #28
 800e59e:	f003 0307 	and.w	r3, r3, #7
 800e5a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 800e5a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e5aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e5b6:	e003      	b.n	800e5c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e5b8:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e5ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e5be:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e5c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	37b8      	adds	r7, #184	; 0xb8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5ce:	bf00      	nop
 800e5d0:	40023800 	.word	0x40023800
 800e5d4:	00f42400 	.word	0x00f42400

0800e5d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e28d      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f000 8083 	beq.w	800e6fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e5f8:	4b94      	ldr	r3, [pc, #592]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	f003 030c 	and.w	r3, r3, #12
 800e600:	2b04      	cmp	r3, #4
 800e602:	d019      	beq.n	800e638 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e604:	4b91      	ldr	r3, [pc, #580]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 030c 	and.w	r3, r3, #12
        || \
 800e60c:	2b08      	cmp	r3, #8
 800e60e:	d106      	bne.n	800e61e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e610:	4b8e      	ldr	r3, [pc, #568]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e61c:	d00c      	beq.n	800e638 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e61e:	4b8b      	ldr	r3, [pc, #556]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e626:	2b0c      	cmp	r3, #12
 800e628:	d112      	bne.n	800e650 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e62a:	4b88      	ldr	r3, [pc, #544]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e636:	d10b      	bne.n	800e650 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e638:	4b84      	ldr	r3, [pc, #528]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d05b      	beq.n	800e6fc <HAL_RCC_OscConfig+0x124>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d157      	bne.n	800e6fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e64c:	2301      	movs	r3, #1
 800e64e:	e25a      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e658:	d106      	bne.n	800e668 <HAL_RCC_OscConfig+0x90>
 800e65a:	4b7c      	ldr	r3, [pc, #496]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a7b      	ldr	r2, [pc, #492]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	e01d      	b.n	800e6a4 <HAL_RCC_OscConfig+0xcc>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e670:	d10c      	bne.n	800e68c <HAL_RCC_OscConfig+0xb4>
 800e672:	4b76      	ldr	r3, [pc, #472]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a75      	ldr	r2, [pc, #468]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e67c:	6013      	str	r3, [r2, #0]
 800e67e:	4b73      	ldr	r3, [pc, #460]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a72      	ldr	r2, [pc, #456]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	e00b      	b.n	800e6a4 <HAL_RCC_OscConfig+0xcc>
 800e68c:	4b6f      	ldr	r3, [pc, #444]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a6e      	ldr	r2, [pc, #440]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	4b6c      	ldr	r3, [pc, #432]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a6b      	ldr	r2, [pc, #428]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e69e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d013      	beq.n	800e6d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6ac:	f7fe fb30 	bl	800cd10 <HAL_GetTick>
 800e6b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6b2:	e008      	b.n	800e6c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e6b4:	f7fe fb2c 	bl	800cd10 <HAL_GetTick>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	2b64      	cmp	r3, #100	; 0x64
 800e6c0:	d901      	bls.n	800e6c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e6c2:	2303      	movs	r3, #3
 800e6c4:	e21f      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6c6:	4b61      	ldr	r3, [pc, #388]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0f0      	beq.n	800e6b4 <HAL_RCC_OscConfig+0xdc>
 800e6d2:	e014      	b.n	800e6fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6d4:	f7fe fb1c 	bl	800cd10 <HAL_GetTick>
 800e6d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6da:	e008      	b.n	800e6ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e6dc:	f7fe fb18 	bl	800cd10 <HAL_GetTick>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	2b64      	cmp	r3, #100	; 0x64
 800e6e8:	d901      	bls.n	800e6ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	e20b      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6ee:	4b57      	ldr	r3, [pc, #348]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1f0      	bne.n	800e6dc <HAL_RCC_OscConfig+0x104>
 800e6fa:	e000      	b.n	800e6fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f003 0302 	and.w	r3, r3, #2
 800e706:	2b00      	cmp	r3, #0
 800e708:	d06f      	beq.n	800e7ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e70a:	4b50      	ldr	r3, [pc, #320]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	f003 030c 	and.w	r3, r3, #12
 800e712:	2b00      	cmp	r3, #0
 800e714:	d017      	beq.n	800e746 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e716:	4b4d      	ldr	r3, [pc, #308]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f003 030c 	and.w	r3, r3, #12
        || \
 800e71e:	2b08      	cmp	r3, #8
 800e720:	d105      	bne.n	800e72e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e722:	4b4a      	ldr	r3, [pc, #296]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e72e:	4b47      	ldr	r3, [pc, #284]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e736:	2b0c      	cmp	r3, #12
 800e738:	d11c      	bne.n	800e774 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e73a:	4b44      	ldr	r3, [pc, #272]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e742:	2b00      	cmp	r3, #0
 800e744:	d116      	bne.n	800e774 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e746:	4b41      	ldr	r3, [pc, #260]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d005      	beq.n	800e75e <HAL_RCC_OscConfig+0x186>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d001      	beq.n	800e75e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e1d3      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e75e:	4b3b      	ldr	r3, [pc, #236]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	4937      	ldr	r1, [pc, #220]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e76e:	4313      	orrs	r3, r2
 800e770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e772:	e03a      	b.n	800e7ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d020      	beq.n	800e7be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e77c:	4b34      	ldr	r3, [pc, #208]	; (800e850 <HAL_RCC_OscConfig+0x278>)
 800e77e:	2201      	movs	r2, #1
 800e780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e782:	f7fe fac5 	bl	800cd10 <HAL_GetTick>
 800e786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e788:	e008      	b.n	800e79c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e78a:	f7fe fac1 	bl	800cd10 <HAL_GetTick>
 800e78e:	4602      	mov	r2, r0
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	2b02      	cmp	r3, #2
 800e796:	d901      	bls.n	800e79c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e1b4      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e79c:	4b2b      	ldr	r3, [pc, #172]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f003 0302 	and.w	r3, r3, #2
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0f0      	beq.n	800e78a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7a8:	4b28      	ldr	r3, [pc, #160]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	4925      	ldr	r1, [pc, #148]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	600b      	str	r3, [r1, #0]
 800e7bc:	e015      	b.n	800e7ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7be:	4b24      	ldr	r3, [pc, #144]	; (800e850 <HAL_RCC_OscConfig+0x278>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c4:	f7fe faa4 	bl	800cd10 <HAL_GetTick>
 800e7c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7ca:	e008      	b.n	800e7de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7cc:	f7fe faa0 	bl	800cd10 <HAL_GetTick>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	d901      	bls.n	800e7de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e7da:	2303      	movs	r3, #3
 800e7dc:	e193      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7de:	4b1b      	ldr	r3, [pc, #108]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f003 0302 	and.w	r3, r3, #2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1f0      	bne.n	800e7cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 0308 	and.w	r3, r3, #8
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d036      	beq.n	800e864 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d016      	beq.n	800e82c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e7fe:	4b15      	ldr	r3, [pc, #84]	; (800e854 <HAL_RCC_OscConfig+0x27c>)
 800e800:	2201      	movs	r2, #1
 800e802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e804:	f7fe fa84 	bl	800cd10 <HAL_GetTick>
 800e808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e80a:	e008      	b.n	800e81e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e80c:	f7fe fa80 	bl	800cd10 <HAL_GetTick>
 800e810:	4602      	mov	r2, r0
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	2b02      	cmp	r3, #2
 800e818:	d901      	bls.n	800e81e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e81a:	2303      	movs	r3, #3
 800e81c:	e173      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e81e:	4b0b      	ldr	r3, [pc, #44]	; (800e84c <HAL_RCC_OscConfig+0x274>)
 800e820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e822:	f003 0302 	and.w	r3, r3, #2
 800e826:	2b00      	cmp	r3, #0
 800e828:	d0f0      	beq.n	800e80c <HAL_RCC_OscConfig+0x234>
 800e82a:	e01b      	b.n	800e864 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e82c:	4b09      	ldr	r3, [pc, #36]	; (800e854 <HAL_RCC_OscConfig+0x27c>)
 800e82e:	2200      	movs	r2, #0
 800e830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e832:	f7fe fa6d 	bl	800cd10 <HAL_GetTick>
 800e836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e838:	e00e      	b.n	800e858 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e83a:	f7fe fa69 	bl	800cd10 <HAL_GetTick>
 800e83e:	4602      	mov	r2, r0
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	2b02      	cmp	r3, #2
 800e846:	d907      	bls.n	800e858 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e848:	2303      	movs	r3, #3
 800e84a:	e15c      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
 800e84c:	40023800 	.word	0x40023800
 800e850:	42470000 	.word	0x42470000
 800e854:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e858:	4b8a      	ldr	r3, [pc, #552]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e85c:	f003 0302 	and.w	r3, r3, #2
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1ea      	bne.n	800e83a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f003 0304 	and.w	r3, r3, #4
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f000 8097 	beq.w	800e9a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e872:	2300      	movs	r3, #0
 800e874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e876:	4b83      	ldr	r3, [pc, #524]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10f      	bne.n	800e8a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e882:	2300      	movs	r3, #0
 800e884:	60bb      	str	r3, [r7, #8]
 800e886:	4b7f      	ldr	r3, [pc, #508]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88a:	4a7e      	ldr	r2, [pc, #504]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e890:	6413      	str	r3, [r2, #64]	; 0x40
 800e892:	4b7c      	ldr	r3, [pc, #496]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e89a:	60bb      	str	r3, [r7, #8]
 800e89c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8a2:	4b79      	ldr	r3, [pc, #484]	; (800ea88 <HAL_RCC_OscConfig+0x4b0>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d118      	bne.n	800e8e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e8ae:	4b76      	ldr	r3, [pc, #472]	; (800ea88 <HAL_RCC_OscConfig+0x4b0>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a75      	ldr	r2, [pc, #468]	; (800ea88 <HAL_RCC_OscConfig+0x4b0>)
 800e8b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e8ba:	f7fe fa29 	bl	800cd10 <HAL_GetTick>
 800e8be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8c0:	e008      	b.n	800e8d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8c2:	f7fe fa25 	bl	800cd10 <HAL_GetTick>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	d901      	bls.n	800e8d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	e118      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8d4:	4b6c      	ldr	r3, [pc, #432]	; (800ea88 <HAL_RCC_OscConfig+0x4b0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d0f0      	beq.n	800e8c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d106      	bne.n	800e8f6 <HAL_RCC_OscConfig+0x31e>
 800e8e8:	4b66      	ldr	r3, [pc, #408]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ec:	4a65      	ldr	r2, [pc, #404]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e8ee:	f043 0301 	orr.w	r3, r3, #1
 800e8f2:	6713      	str	r3, [r2, #112]	; 0x70
 800e8f4:	e01c      	b.n	800e930 <HAL_RCC_OscConfig+0x358>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	2b05      	cmp	r3, #5
 800e8fc:	d10c      	bne.n	800e918 <HAL_RCC_OscConfig+0x340>
 800e8fe:	4b61      	ldr	r3, [pc, #388]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e902:	4a60      	ldr	r2, [pc, #384]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e904:	f043 0304 	orr.w	r3, r3, #4
 800e908:	6713      	str	r3, [r2, #112]	; 0x70
 800e90a:	4b5e      	ldr	r3, [pc, #376]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90e:	4a5d      	ldr	r2, [pc, #372]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e910:	f043 0301 	orr.w	r3, r3, #1
 800e914:	6713      	str	r3, [r2, #112]	; 0x70
 800e916:	e00b      	b.n	800e930 <HAL_RCC_OscConfig+0x358>
 800e918:	4b5a      	ldr	r3, [pc, #360]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e91a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91c:	4a59      	ldr	r2, [pc, #356]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e91e:	f023 0301 	bic.w	r3, r3, #1
 800e922:	6713      	str	r3, [r2, #112]	; 0x70
 800e924:	4b57      	ldr	r3, [pc, #348]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e928:	4a56      	ldr	r2, [pc, #344]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e92a:	f023 0304 	bic.w	r3, r3, #4
 800e92e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d015      	beq.n	800e964 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e938:	f7fe f9ea 	bl	800cd10 <HAL_GetTick>
 800e93c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e93e:	e00a      	b.n	800e956 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e940:	f7fe f9e6 	bl	800cd10 <HAL_GetTick>
 800e944:	4602      	mov	r2, r0
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e94e:	4293      	cmp	r3, r2
 800e950:	d901      	bls.n	800e956 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	e0d7      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e956:	4b4b      	ldr	r3, [pc, #300]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	f003 0302 	and.w	r3, r3, #2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0ee      	beq.n	800e940 <HAL_RCC_OscConfig+0x368>
 800e962:	e014      	b.n	800e98e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e964:	f7fe f9d4 	bl	800cd10 <HAL_GetTick>
 800e968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e96a:	e00a      	b.n	800e982 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e96c:	f7fe f9d0 	bl	800cd10 <HAL_GetTick>
 800e970:	4602      	mov	r2, r0
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	1ad3      	subs	r3, r2, r3
 800e976:	f241 3288 	movw	r2, #5000	; 0x1388
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d901      	bls.n	800e982 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e0c1      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e982:	4b40      	ldr	r3, [pc, #256]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e986:	f003 0302 	and.w	r3, r3, #2
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1ee      	bne.n	800e96c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e98e:	7dfb      	ldrb	r3, [r7, #23]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d105      	bne.n	800e9a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e994:	4b3b      	ldr	r3, [pc, #236]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e998:	4a3a      	ldr	r2, [pc, #232]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e99a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e99e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 80ad 	beq.w	800eb04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e9aa:	4b36      	ldr	r3, [pc, #216]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	f003 030c 	and.w	r3, r3, #12
 800e9b2:	2b08      	cmp	r3, #8
 800e9b4:	d060      	beq.n	800ea78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d145      	bne.n	800ea4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9be:	4b33      	ldr	r3, [pc, #204]	; (800ea8c <HAL_RCC_OscConfig+0x4b4>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9c4:	f7fe f9a4 	bl	800cd10 <HAL_GetTick>
 800e9c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9ca:	e008      	b.n	800e9de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e9cc:	f7fe f9a0 	bl	800cd10 <HAL_GetTick>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d901      	bls.n	800e9de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e9da:	2303      	movs	r3, #3
 800e9dc:	e093      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9de:	4b29      	ldr	r3, [pc, #164]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1f0      	bne.n	800e9cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69da      	ldr	r2, [r3, #28]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	431a      	orrs	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	019b      	lsls	r3, r3, #6
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea00:	085b      	lsrs	r3, r3, #1
 800ea02:	3b01      	subs	r3, #1
 800ea04:	041b      	lsls	r3, r3, #16
 800ea06:	431a      	orrs	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0c:	061b      	lsls	r3, r3, #24
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea14:	071b      	lsls	r3, r3, #28
 800ea16:	491b      	ldr	r1, [pc, #108]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea1c:	4b1b      	ldr	r3, [pc, #108]	; (800ea8c <HAL_RCC_OscConfig+0x4b4>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea22:	f7fe f975 	bl	800cd10 <HAL_GetTick>
 800ea26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea28:	e008      	b.n	800ea3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea2a:	f7fe f971 	bl	800cd10 <HAL_GetTick>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d901      	bls.n	800ea3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e064      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea3c:	4b11      	ldr	r3, [pc, #68]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d0f0      	beq.n	800ea2a <HAL_RCC_OscConfig+0x452>
 800ea48:	e05c      	b.n	800eb04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea4a:	4b10      	ldr	r3, [pc, #64]	; (800ea8c <HAL_RCC_OscConfig+0x4b4>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea50:	f7fe f95e 	bl	800cd10 <HAL_GetTick>
 800ea54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea56:	e008      	b.n	800ea6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea58:	f7fe f95a 	bl	800cd10 <HAL_GetTick>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	2b02      	cmp	r3, #2
 800ea64:	d901      	bls.n	800ea6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ea66:	2303      	movs	r3, #3
 800ea68:	e04d      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <HAL_RCC_OscConfig+0x4ac>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1f0      	bne.n	800ea58 <HAL_RCC_OscConfig+0x480>
 800ea76:	e045      	b.n	800eb04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d107      	bne.n	800ea90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	e040      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
 800ea84:	40023800 	.word	0x40023800
 800ea88:	40007000 	.word	0x40007000
 800ea8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ea90:	4b1f      	ldr	r3, [pc, #124]	; (800eb10 <HAL_RCC_OscConfig+0x538>)
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d030      	beq.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d129      	bne.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d122      	bne.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eac0:	4013      	ands	r3, r2
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800eac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d119      	bne.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ead6:	085b      	lsrs	r3, r3, #1
 800ead8:	3b01      	subs	r3, #1
 800eada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eadc:	429a      	cmp	r2, r3
 800eade:	d10f      	bne.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d107      	bne.n	800eb00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d001      	beq.n	800eb04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	e000      	b.n	800eb06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3718      	adds	r7, #24
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	40023800 	.word	0x40023800

0800eb14 <__assert_func>:
 800eb14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb16:	4614      	mov	r4, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <__assert_func+0x2c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4605      	mov	r5, r0
 800eb20:	68d8      	ldr	r0, [r3, #12]
 800eb22:	b14c      	cbz	r4, 800eb38 <__assert_func+0x24>
 800eb24:	4b07      	ldr	r3, [pc, #28]	; (800eb44 <__assert_func+0x30>)
 800eb26:	9100      	str	r1, [sp, #0]
 800eb28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb2c:	4906      	ldr	r1, [pc, #24]	; (800eb48 <__assert_func+0x34>)
 800eb2e:	462b      	mov	r3, r5
 800eb30:	f000 fdd4 	bl	800f6dc <fiprintf>
 800eb34:	f000 fefd 	bl	800f932 <abort>
 800eb38:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <__assert_func+0x38>)
 800eb3a:	461c      	mov	r4, r3
 800eb3c:	e7f3      	b.n	800eb26 <__assert_func+0x12>
 800eb3e:	bf00      	nop
 800eb40:	20000070 	.word	0x20000070
 800eb44:	0801490c 	.word	0x0801490c
 800eb48:	08014919 	.word	0x08014919
 800eb4c:	08014947 	.word	0x08014947

0800eb50 <malloc>:
 800eb50:	4b02      	ldr	r3, [pc, #8]	; (800eb5c <malloc+0xc>)
 800eb52:	4601      	mov	r1, r0
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	f000 b82b 	b.w	800ebb0 <_malloc_r>
 800eb5a:	bf00      	nop
 800eb5c:	20000070 	.word	0x20000070

0800eb60 <free>:
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <free+0xc>)
 800eb62:	4601      	mov	r1, r0
 800eb64:	6818      	ldr	r0, [r3, #0]
 800eb66:	f001 bd65 	b.w	8010634 <_free_r>
 800eb6a:	bf00      	nop
 800eb6c:	20000070 	.word	0x20000070

0800eb70 <sbrk_aligned>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	4e0e      	ldr	r6, [pc, #56]	; (800ebac <sbrk_aligned+0x3c>)
 800eb74:	460c      	mov	r4, r1
 800eb76:	6831      	ldr	r1, [r6, #0]
 800eb78:	4605      	mov	r5, r0
 800eb7a:	b911      	cbnz	r1, 800eb82 <sbrk_aligned+0x12>
 800eb7c:	f000 fe7c 	bl	800f878 <_sbrk_r>
 800eb80:	6030      	str	r0, [r6, #0]
 800eb82:	4621      	mov	r1, r4
 800eb84:	4628      	mov	r0, r5
 800eb86:	f000 fe77 	bl	800f878 <_sbrk_r>
 800eb8a:	1c43      	adds	r3, r0, #1
 800eb8c:	d00a      	beq.n	800eba4 <sbrk_aligned+0x34>
 800eb8e:	1cc4      	adds	r4, r0, #3
 800eb90:	f024 0403 	bic.w	r4, r4, #3
 800eb94:	42a0      	cmp	r0, r4
 800eb96:	d007      	beq.n	800eba8 <sbrk_aligned+0x38>
 800eb98:	1a21      	subs	r1, r4, r0
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f000 fe6c 	bl	800f878 <_sbrk_r>
 800eba0:	3001      	adds	r0, #1
 800eba2:	d101      	bne.n	800eba8 <sbrk_aligned+0x38>
 800eba4:	f04f 34ff 	mov.w	r4, #4294967295
 800eba8:	4620      	mov	r0, r4
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}
 800ebac:	200008f4 	.word	0x200008f4

0800ebb0 <_malloc_r>:
 800ebb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb4:	1ccd      	adds	r5, r1, #3
 800ebb6:	f025 0503 	bic.w	r5, r5, #3
 800ebba:	3508      	adds	r5, #8
 800ebbc:	2d0c      	cmp	r5, #12
 800ebbe:	bf38      	it	cc
 800ebc0:	250c      	movcc	r5, #12
 800ebc2:	2d00      	cmp	r5, #0
 800ebc4:	4607      	mov	r7, r0
 800ebc6:	db01      	blt.n	800ebcc <_malloc_r+0x1c>
 800ebc8:	42a9      	cmp	r1, r5
 800ebca:	d905      	bls.n	800ebd8 <_malloc_r+0x28>
 800ebcc:	230c      	movs	r3, #12
 800ebce:	603b      	str	r3, [r7, #0]
 800ebd0:	2600      	movs	r6, #0
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ecac <_malloc_r+0xfc>
 800ebdc:	f000 f868 	bl	800ecb0 <__malloc_lock>
 800ebe0:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe4:	461c      	mov	r4, r3
 800ebe6:	bb5c      	cbnz	r4, 800ec40 <_malloc_r+0x90>
 800ebe8:	4629      	mov	r1, r5
 800ebea:	4638      	mov	r0, r7
 800ebec:	f7ff ffc0 	bl	800eb70 <sbrk_aligned>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	d155      	bne.n	800eca2 <_malloc_r+0xf2>
 800ebf6:	f8d8 4000 	ldr.w	r4, [r8]
 800ebfa:	4626      	mov	r6, r4
 800ebfc:	2e00      	cmp	r6, #0
 800ebfe:	d145      	bne.n	800ec8c <_malloc_r+0xdc>
 800ec00:	2c00      	cmp	r4, #0
 800ec02:	d048      	beq.n	800ec96 <_malloc_r+0xe6>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	4631      	mov	r1, r6
 800ec08:	4638      	mov	r0, r7
 800ec0a:	eb04 0903 	add.w	r9, r4, r3
 800ec0e:	f000 fe33 	bl	800f878 <_sbrk_r>
 800ec12:	4581      	cmp	r9, r0
 800ec14:	d13f      	bne.n	800ec96 <_malloc_r+0xe6>
 800ec16:	6821      	ldr	r1, [r4, #0]
 800ec18:	1a6d      	subs	r5, r5, r1
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4638      	mov	r0, r7
 800ec1e:	f7ff ffa7 	bl	800eb70 <sbrk_aligned>
 800ec22:	3001      	adds	r0, #1
 800ec24:	d037      	beq.n	800ec96 <_malloc_r+0xe6>
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	442b      	add	r3, r5
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d038      	beq.n	800eca6 <_malloc_r+0xf6>
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	42a2      	cmp	r2, r4
 800ec38:	d12b      	bne.n	800ec92 <_malloc_r+0xe2>
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	605a      	str	r2, [r3, #4]
 800ec3e:	e00f      	b.n	800ec60 <_malloc_r+0xb0>
 800ec40:	6822      	ldr	r2, [r4, #0]
 800ec42:	1b52      	subs	r2, r2, r5
 800ec44:	d41f      	bmi.n	800ec86 <_malloc_r+0xd6>
 800ec46:	2a0b      	cmp	r2, #11
 800ec48:	d917      	bls.n	800ec7a <_malloc_r+0xca>
 800ec4a:	1961      	adds	r1, r4, r5
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	6025      	str	r5, [r4, #0]
 800ec50:	bf18      	it	ne
 800ec52:	6059      	strne	r1, [r3, #4]
 800ec54:	6863      	ldr	r3, [r4, #4]
 800ec56:	bf08      	it	eq
 800ec58:	f8c8 1000 	streq.w	r1, [r8]
 800ec5c:	5162      	str	r2, [r4, r5]
 800ec5e:	604b      	str	r3, [r1, #4]
 800ec60:	4638      	mov	r0, r7
 800ec62:	f104 060b 	add.w	r6, r4, #11
 800ec66:	f000 f829 	bl	800ecbc <__malloc_unlock>
 800ec6a:	f026 0607 	bic.w	r6, r6, #7
 800ec6e:	1d23      	adds	r3, r4, #4
 800ec70:	1af2      	subs	r2, r6, r3
 800ec72:	d0ae      	beq.n	800ebd2 <_malloc_r+0x22>
 800ec74:	1b9b      	subs	r3, r3, r6
 800ec76:	50a3      	str	r3, [r4, r2]
 800ec78:	e7ab      	b.n	800ebd2 <_malloc_r+0x22>
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	6862      	ldr	r2, [r4, #4]
 800ec7e:	d1dd      	bne.n	800ec3c <_malloc_r+0x8c>
 800ec80:	f8c8 2000 	str.w	r2, [r8]
 800ec84:	e7ec      	b.n	800ec60 <_malloc_r+0xb0>
 800ec86:	4623      	mov	r3, r4
 800ec88:	6864      	ldr	r4, [r4, #4]
 800ec8a:	e7ac      	b.n	800ebe6 <_malloc_r+0x36>
 800ec8c:	4634      	mov	r4, r6
 800ec8e:	6876      	ldr	r6, [r6, #4]
 800ec90:	e7b4      	b.n	800ebfc <_malloc_r+0x4c>
 800ec92:	4613      	mov	r3, r2
 800ec94:	e7cc      	b.n	800ec30 <_malloc_r+0x80>
 800ec96:	230c      	movs	r3, #12
 800ec98:	603b      	str	r3, [r7, #0]
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	f000 f80e 	bl	800ecbc <__malloc_unlock>
 800eca0:	e797      	b.n	800ebd2 <_malloc_r+0x22>
 800eca2:	6025      	str	r5, [r4, #0]
 800eca4:	e7dc      	b.n	800ec60 <_malloc_r+0xb0>
 800eca6:	605b      	str	r3, [r3, #4]
 800eca8:	deff      	udf	#255	; 0xff
 800ecaa:	bf00      	nop
 800ecac:	200008f0 	.word	0x200008f0

0800ecb0 <__malloc_lock>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	; (800ecb8 <__malloc_lock+0x8>)
 800ecb2:	f000 be2e 	b.w	800f912 <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	20000a38 	.word	0x20000a38

0800ecbc <__malloc_unlock>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	; (800ecc4 <__malloc_unlock+0x8>)
 800ecbe:	f000 be29 	b.w	800f914 <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	20000a38 	.word	0x20000a38

0800ecc8 <__cvt>:
 800ecc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eccc:	ec55 4b10 	vmov	r4, r5, d0
 800ecd0:	2d00      	cmp	r5, #0
 800ecd2:	460e      	mov	r6, r1
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	462b      	mov	r3, r5
 800ecd8:	bfbb      	ittet	lt
 800ecda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ecde:	461d      	movlt	r5, r3
 800ece0:	2300      	movge	r3, #0
 800ece2:	232d      	movlt	r3, #45	; 0x2d
 800ece4:	700b      	strb	r3, [r1, #0]
 800ece6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ece8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecec:	4691      	mov	r9, r2
 800ecee:	f023 0820 	bic.w	r8, r3, #32
 800ecf2:	bfbc      	itt	lt
 800ecf4:	4622      	movlt	r2, r4
 800ecf6:	4614      	movlt	r4, r2
 800ecf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecfc:	d005      	beq.n	800ed0a <__cvt+0x42>
 800ecfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed02:	d100      	bne.n	800ed06 <__cvt+0x3e>
 800ed04:	3601      	adds	r6, #1
 800ed06:	2102      	movs	r1, #2
 800ed08:	e000      	b.n	800ed0c <__cvt+0x44>
 800ed0a:	2103      	movs	r1, #3
 800ed0c:	ab03      	add	r3, sp, #12
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	ab02      	add	r3, sp, #8
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	ec45 4b10 	vmov	d0, r4, r5
 800ed18:	4653      	mov	r3, sl
 800ed1a:	4632      	mov	r2, r6
 800ed1c:	f000 fe98 	bl	800fa50 <_dtoa_r>
 800ed20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ed24:	4607      	mov	r7, r0
 800ed26:	d102      	bne.n	800ed2e <__cvt+0x66>
 800ed28:	f019 0f01 	tst.w	r9, #1
 800ed2c:	d022      	beq.n	800ed74 <__cvt+0xac>
 800ed2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed32:	eb07 0906 	add.w	r9, r7, r6
 800ed36:	d110      	bne.n	800ed5a <__cvt+0x92>
 800ed38:	783b      	ldrb	r3, [r7, #0]
 800ed3a:	2b30      	cmp	r3, #48	; 0x30
 800ed3c:	d10a      	bne.n	800ed54 <__cvt+0x8c>
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2300      	movs	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 feef 	bl	8000b28 <__aeabi_dcmpeq>
 800ed4a:	b918      	cbnz	r0, 800ed54 <__cvt+0x8c>
 800ed4c:	f1c6 0601 	rsb	r6, r6, #1
 800ed50:	f8ca 6000 	str.w	r6, [sl]
 800ed54:	f8da 3000 	ldr.w	r3, [sl]
 800ed58:	4499      	add	r9, r3
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 fee1 	bl	8000b28 <__aeabi_dcmpeq>
 800ed66:	b108      	cbz	r0, 800ed6c <__cvt+0xa4>
 800ed68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed6c:	2230      	movs	r2, #48	; 0x30
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	454b      	cmp	r3, r9
 800ed72:	d307      	bcc.n	800ed84 <__cvt+0xbc>
 800ed74:	9b03      	ldr	r3, [sp, #12]
 800ed76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed78:	1bdb      	subs	r3, r3, r7
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	6013      	str	r3, [r2, #0]
 800ed7e:	b004      	add	sp, #16
 800ed80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed84:	1c59      	adds	r1, r3, #1
 800ed86:	9103      	str	r1, [sp, #12]
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	e7f0      	b.n	800ed6e <__cvt+0xa6>

0800ed8c <__exponent>:
 800ed8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2900      	cmp	r1, #0
 800ed92:	bfb8      	it	lt
 800ed94:	4249      	neglt	r1, r1
 800ed96:	f803 2b02 	strb.w	r2, [r3], #2
 800ed9a:	bfb4      	ite	lt
 800ed9c:	222d      	movlt	r2, #45	; 0x2d
 800ed9e:	222b      	movge	r2, #43	; 0x2b
 800eda0:	2909      	cmp	r1, #9
 800eda2:	7042      	strb	r2, [r0, #1]
 800eda4:	dd2a      	ble.n	800edfc <__exponent+0x70>
 800eda6:	f10d 0207 	add.w	r2, sp, #7
 800edaa:	4617      	mov	r7, r2
 800edac:	260a      	movs	r6, #10
 800edae:	4694      	mov	ip, r2
 800edb0:	fb91 f5f6 	sdiv	r5, r1, r6
 800edb4:	fb06 1415 	mls	r4, r6, r5, r1
 800edb8:	3430      	adds	r4, #48	; 0x30
 800edba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800edbe:	460c      	mov	r4, r1
 800edc0:	2c63      	cmp	r4, #99	; 0x63
 800edc2:	f102 32ff 	add.w	r2, r2, #4294967295
 800edc6:	4629      	mov	r1, r5
 800edc8:	dcf1      	bgt.n	800edae <__exponent+0x22>
 800edca:	3130      	adds	r1, #48	; 0x30
 800edcc:	f1ac 0402 	sub.w	r4, ip, #2
 800edd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edd4:	1c41      	adds	r1, r0, #1
 800edd6:	4622      	mov	r2, r4
 800edd8:	42ba      	cmp	r2, r7
 800edda:	d30a      	bcc.n	800edf2 <__exponent+0x66>
 800eddc:	f10d 0209 	add.w	r2, sp, #9
 800ede0:	eba2 020c 	sub.w	r2, r2, ip
 800ede4:	42bc      	cmp	r4, r7
 800ede6:	bf88      	it	hi
 800ede8:	2200      	movhi	r2, #0
 800edea:	4413      	add	r3, r2
 800edec:	1a18      	subs	r0, r3, r0
 800edee:	b003      	add	sp, #12
 800edf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800edf6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800edfa:	e7ed      	b.n	800edd8 <__exponent+0x4c>
 800edfc:	2330      	movs	r3, #48	; 0x30
 800edfe:	3130      	adds	r1, #48	; 0x30
 800ee00:	7083      	strb	r3, [r0, #2]
 800ee02:	70c1      	strb	r1, [r0, #3]
 800ee04:	1d03      	adds	r3, r0, #4
 800ee06:	e7f1      	b.n	800edec <__exponent+0x60>

0800ee08 <_printf_float>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	ed2d 8b02 	vpush	{d8}
 800ee10:	b08d      	sub	sp, #52	; 0x34
 800ee12:	460c      	mov	r4, r1
 800ee14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ee18:	4616      	mov	r6, r2
 800ee1a:	461f      	mov	r7, r3
 800ee1c:	4605      	mov	r5, r0
 800ee1e:	f000 fcf3 	bl	800f808 <_localeconv_r>
 800ee22:	f8d0 a000 	ldr.w	sl, [r0]
 800ee26:	4650      	mov	r0, sl
 800ee28:	f7f1 fa52 	bl	80002d0 <strlen>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	9305      	str	r3, [sp, #20]
 800ee34:	f8d8 3000 	ldr.w	r3, [r8]
 800ee38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ee3c:	3307      	adds	r3, #7
 800ee3e:	f023 0307 	bic.w	r3, r3, #7
 800ee42:	f103 0208 	add.w	r2, r3, #8
 800ee46:	f8c8 2000 	str.w	r2, [r8]
 800ee4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee52:	9307      	str	r3, [sp, #28]
 800ee54:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee58:	ee08 0a10 	vmov	s16, r0
 800ee5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ee60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee64:	4b9e      	ldr	r3, [pc, #632]	; (800f0e0 <_printf_float+0x2d8>)
 800ee66:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6a:	f7f1 fe8f 	bl	8000b8c <__aeabi_dcmpun>
 800ee6e:	bb88      	cbnz	r0, 800eed4 <_printf_float+0xcc>
 800ee70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee74:	4b9a      	ldr	r3, [pc, #616]	; (800f0e0 <_printf_float+0x2d8>)
 800ee76:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7a:	f7f1 fe69 	bl	8000b50 <__aeabi_dcmple>
 800ee7e:	bb48      	cbnz	r0, 800eed4 <_printf_float+0xcc>
 800ee80:	2200      	movs	r2, #0
 800ee82:	2300      	movs	r3, #0
 800ee84:	4640      	mov	r0, r8
 800ee86:	4649      	mov	r1, r9
 800ee88:	f7f1 fe58 	bl	8000b3c <__aeabi_dcmplt>
 800ee8c:	b110      	cbz	r0, 800ee94 <_printf_float+0x8c>
 800ee8e:	232d      	movs	r3, #45	; 0x2d
 800ee90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee94:	4a93      	ldr	r2, [pc, #588]	; (800f0e4 <_printf_float+0x2dc>)
 800ee96:	4b94      	ldr	r3, [pc, #592]	; (800f0e8 <_printf_float+0x2e0>)
 800ee98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee9c:	bf94      	ite	ls
 800ee9e:	4690      	movls	r8, r2
 800eea0:	4698      	movhi	r8, r3
 800eea2:	2303      	movs	r3, #3
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	9b05      	ldr	r3, [sp, #20]
 800eea8:	f023 0304 	bic.w	r3, r3, #4
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	f04f 0900 	mov.w	r9, #0
 800eeb2:	9700      	str	r7, [sp, #0]
 800eeb4:	4633      	mov	r3, r6
 800eeb6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eeb8:	4621      	mov	r1, r4
 800eeba:	4628      	mov	r0, r5
 800eebc:	f000 f9da 	bl	800f274 <_printf_common>
 800eec0:	3001      	adds	r0, #1
 800eec2:	f040 8090 	bne.w	800efe6 <_printf_float+0x1de>
 800eec6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeca:	b00d      	add	sp, #52	; 0x34
 800eecc:	ecbd 8b02 	vpop	{d8}
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	4642      	mov	r2, r8
 800eed6:	464b      	mov	r3, r9
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 fe56 	bl	8000b8c <__aeabi_dcmpun>
 800eee0:	b140      	cbz	r0, 800eef4 <_printf_float+0xec>
 800eee2:	464b      	mov	r3, r9
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	bfbc      	itt	lt
 800eee8:	232d      	movlt	r3, #45	; 0x2d
 800eeea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eeee:	4a7f      	ldr	r2, [pc, #508]	; (800f0ec <_printf_float+0x2e4>)
 800eef0:	4b7f      	ldr	r3, [pc, #508]	; (800f0f0 <_printf_float+0x2e8>)
 800eef2:	e7d1      	b.n	800ee98 <_printf_float+0x90>
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eefa:	9206      	str	r2, [sp, #24]
 800eefc:	1c5a      	adds	r2, r3, #1
 800eefe:	d13f      	bne.n	800ef80 <_printf_float+0x178>
 800ef00:	2306      	movs	r3, #6
 800ef02:	6063      	str	r3, [r4, #4]
 800ef04:	9b05      	ldr	r3, [sp, #20]
 800ef06:	6861      	ldr	r1, [r4, #4]
 800ef08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9303      	str	r3, [sp, #12]
 800ef10:	ab0a      	add	r3, sp, #40	; 0x28
 800ef12:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ef16:	ab09      	add	r3, sp, #36	; 0x24
 800ef18:	ec49 8b10 	vmov	d0, r8, r9
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	6022      	str	r2, [r4, #0]
 800ef20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7ff fecf 	bl	800ecc8 <__cvt>
 800ef2a:	9b06      	ldr	r3, [sp, #24]
 800ef2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef2e:	2b47      	cmp	r3, #71	; 0x47
 800ef30:	4680      	mov	r8, r0
 800ef32:	d108      	bne.n	800ef46 <_printf_float+0x13e>
 800ef34:	1cc8      	adds	r0, r1, #3
 800ef36:	db02      	blt.n	800ef3e <_printf_float+0x136>
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	4299      	cmp	r1, r3
 800ef3c:	dd41      	ble.n	800efc2 <_printf_float+0x1ba>
 800ef3e:	f1ab 0302 	sub.w	r3, fp, #2
 800ef42:	fa5f fb83 	uxtb.w	fp, r3
 800ef46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef4a:	d820      	bhi.n	800ef8e <_printf_float+0x186>
 800ef4c:	3901      	subs	r1, #1
 800ef4e:	465a      	mov	r2, fp
 800ef50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef54:	9109      	str	r1, [sp, #36]	; 0x24
 800ef56:	f7ff ff19 	bl	800ed8c <__exponent>
 800ef5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef5c:	1813      	adds	r3, r2, r0
 800ef5e:	2a01      	cmp	r2, #1
 800ef60:	4681      	mov	r9, r0
 800ef62:	6123      	str	r3, [r4, #16]
 800ef64:	dc02      	bgt.n	800ef6c <_printf_float+0x164>
 800ef66:	6822      	ldr	r2, [r4, #0]
 800ef68:	07d2      	lsls	r2, r2, #31
 800ef6a:	d501      	bpl.n	800ef70 <_printf_float+0x168>
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	6123      	str	r3, [r4, #16]
 800ef70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d09c      	beq.n	800eeb2 <_printf_float+0xaa>
 800ef78:	232d      	movs	r3, #45	; 0x2d
 800ef7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef7e:	e798      	b.n	800eeb2 <_printf_float+0xaa>
 800ef80:	9a06      	ldr	r2, [sp, #24]
 800ef82:	2a47      	cmp	r2, #71	; 0x47
 800ef84:	d1be      	bne.n	800ef04 <_printf_float+0xfc>
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1bc      	bne.n	800ef04 <_printf_float+0xfc>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e7b9      	b.n	800ef02 <_printf_float+0xfa>
 800ef8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef92:	d118      	bne.n	800efc6 <_printf_float+0x1be>
 800ef94:	2900      	cmp	r1, #0
 800ef96:	6863      	ldr	r3, [r4, #4]
 800ef98:	dd0b      	ble.n	800efb2 <_printf_float+0x1aa>
 800ef9a:	6121      	str	r1, [r4, #16]
 800ef9c:	b913      	cbnz	r3, 800efa4 <_printf_float+0x19c>
 800ef9e:	6822      	ldr	r2, [r4, #0]
 800efa0:	07d0      	lsls	r0, r2, #31
 800efa2:	d502      	bpl.n	800efaa <_printf_float+0x1a2>
 800efa4:	3301      	adds	r3, #1
 800efa6:	440b      	add	r3, r1
 800efa8:	6123      	str	r3, [r4, #16]
 800efaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800efac:	f04f 0900 	mov.w	r9, #0
 800efb0:	e7de      	b.n	800ef70 <_printf_float+0x168>
 800efb2:	b913      	cbnz	r3, 800efba <_printf_float+0x1b2>
 800efb4:	6822      	ldr	r2, [r4, #0]
 800efb6:	07d2      	lsls	r2, r2, #31
 800efb8:	d501      	bpl.n	800efbe <_printf_float+0x1b6>
 800efba:	3302      	adds	r3, #2
 800efbc:	e7f4      	b.n	800efa8 <_printf_float+0x1a0>
 800efbe:	2301      	movs	r3, #1
 800efc0:	e7f2      	b.n	800efa8 <_printf_float+0x1a0>
 800efc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800efc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efc8:	4299      	cmp	r1, r3
 800efca:	db05      	blt.n	800efd8 <_printf_float+0x1d0>
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	6121      	str	r1, [r4, #16]
 800efd0:	07d8      	lsls	r0, r3, #31
 800efd2:	d5ea      	bpl.n	800efaa <_printf_float+0x1a2>
 800efd4:	1c4b      	adds	r3, r1, #1
 800efd6:	e7e7      	b.n	800efa8 <_printf_float+0x1a0>
 800efd8:	2900      	cmp	r1, #0
 800efda:	bfd4      	ite	le
 800efdc:	f1c1 0202 	rsble	r2, r1, #2
 800efe0:	2201      	movgt	r2, #1
 800efe2:	4413      	add	r3, r2
 800efe4:	e7e0      	b.n	800efa8 <_printf_float+0x1a0>
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	055a      	lsls	r2, r3, #21
 800efea:	d407      	bmi.n	800effc <_printf_float+0x1f4>
 800efec:	6923      	ldr	r3, [r4, #16]
 800efee:	4642      	mov	r2, r8
 800eff0:	4631      	mov	r1, r6
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b8      	blx	r7
 800eff6:	3001      	adds	r0, #1
 800eff8:	d12c      	bne.n	800f054 <_printf_float+0x24c>
 800effa:	e764      	b.n	800eec6 <_printf_float+0xbe>
 800effc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f000:	f240 80e0 	bls.w	800f1c4 <_printf_float+0x3bc>
 800f004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f008:	2200      	movs	r2, #0
 800f00a:	2300      	movs	r3, #0
 800f00c:	f7f1 fd8c 	bl	8000b28 <__aeabi_dcmpeq>
 800f010:	2800      	cmp	r0, #0
 800f012:	d034      	beq.n	800f07e <_printf_float+0x276>
 800f014:	4a37      	ldr	r2, [pc, #220]	; (800f0f4 <_printf_float+0x2ec>)
 800f016:	2301      	movs	r3, #1
 800f018:	4631      	mov	r1, r6
 800f01a:	4628      	mov	r0, r5
 800f01c:	47b8      	blx	r7
 800f01e:	3001      	adds	r0, #1
 800f020:	f43f af51 	beq.w	800eec6 <_printf_float+0xbe>
 800f024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f028:	429a      	cmp	r2, r3
 800f02a:	db02      	blt.n	800f032 <_printf_float+0x22a>
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	07d8      	lsls	r0, r3, #31
 800f030:	d510      	bpl.n	800f054 <_printf_float+0x24c>
 800f032:	ee18 3a10 	vmov	r3, s16
 800f036:	4652      	mov	r2, sl
 800f038:	4631      	mov	r1, r6
 800f03a:	4628      	mov	r0, r5
 800f03c:	47b8      	blx	r7
 800f03e:	3001      	adds	r0, #1
 800f040:	f43f af41 	beq.w	800eec6 <_printf_float+0xbe>
 800f044:	f04f 0800 	mov.w	r8, #0
 800f048:	f104 091a 	add.w	r9, r4, #26
 800f04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f04e:	3b01      	subs	r3, #1
 800f050:	4543      	cmp	r3, r8
 800f052:	dc09      	bgt.n	800f068 <_printf_float+0x260>
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	079b      	lsls	r3, r3, #30
 800f058:	f100 8107 	bmi.w	800f26a <_printf_float+0x462>
 800f05c:	68e0      	ldr	r0, [r4, #12]
 800f05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f060:	4298      	cmp	r0, r3
 800f062:	bfb8      	it	lt
 800f064:	4618      	movlt	r0, r3
 800f066:	e730      	b.n	800eeca <_printf_float+0xc2>
 800f068:	2301      	movs	r3, #1
 800f06a:	464a      	mov	r2, r9
 800f06c:	4631      	mov	r1, r6
 800f06e:	4628      	mov	r0, r5
 800f070:	47b8      	blx	r7
 800f072:	3001      	adds	r0, #1
 800f074:	f43f af27 	beq.w	800eec6 <_printf_float+0xbe>
 800f078:	f108 0801 	add.w	r8, r8, #1
 800f07c:	e7e6      	b.n	800f04c <_printf_float+0x244>
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	2b00      	cmp	r3, #0
 800f082:	dc39      	bgt.n	800f0f8 <_printf_float+0x2f0>
 800f084:	4a1b      	ldr	r2, [pc, #108]	; (800f0f4 <_printf_float+0x2ec>)
 800f086:	2301      	movs	r3, #1
 800f088:	4631      	mov	r1, r6
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b8      	blx	r7
 800f08e:	3001      	adds	r0, #1
 800f090:	f43f af19 	beq.w	800eec6 <_printf_float+0xbe>
 800f094:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f098:	4313      	orrs	r3, r2
 800f09a:	d102      	bne.n	800f0a2 <_printf_float+0x29a>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	07d9      	lsls	r1, r3, #31
 800f0a0:	d5d8      	bpl.n	800f054 <_printf_float+0x24c>
 800f0a2:	ee18 3a10 	vmov	r3, s16
 800f0a6:	4652      	mov	r2, sl
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	47b8      	blx	r7
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	f43f af09 	beq.w	800eec6 <_printf_float+0xbe>
 800f0b4:	f04f 0900 	mov.w	r9, #0
 800f0b8:	f104 0a1a 	add.w	sl, r4, #26
 800f0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0be:	425b      	negs	r3, r3
 800f0c0:	454b      	cmp	r3, r9
 800f0c2:	dc01      	bgt.n	800f0c8 <_printf_float+0x2c0>
 800f0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0c6:	e792      	b.n	800efee <_printf_float+0x1e6>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	4652      	mov	r2, sl
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	47b8      	blx	r7
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	f43f aef7 	beq.w	800eec6 <_printf_float+0xbe>
 800f0d8:	f109 0901 	add.w	r9, r9, #1
 800f0dc:	e7ee      	b.n	800f0bc <_printf_float+0x2b4>
 800f0de:	bf00      	nop
 800f0e0:	7fefffff 	.word	0x7fefffff
 800f0e4:	08014948 	.word	0x08014948
 800f0e8:	0801494c 	.word	0x0801494c
 800f0ec:	08014950 	.word	0x08014950
 800f0f0:	08014954 	.word	0x08014954
 800f0f4:	08014958 	.word	0x08014958
 800f0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	bfa8      	it	ge
 800f100:	461a      	movge	r2, r3
 800f102:	2a00      	cmp	r2, #0
 800f104:	4691      	mov	r9, r2
 800f106:	dc37      	bgt.n	800f178 <_printf_float+0x370>
 800f108:	f04f 0b00 	mov.w	fp, #0
 800f10c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f110:	f104 021a 	add.w	r2, r4, #26
 800f114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f116:	9305      	str	r3, [sp, #20]
 800f118:	eba3 0309 	sub.w	r3, r3, r9
 800f11c:	455b      	cmp	r3, fp
 800f11e:	dc33      	bgt.n	800f188 <_printf_float+0x380>
 800f120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f124:	429a      	cmp	r2, r3
 800f126:	db3b      	blt.n	800f1a0 <_printf_float+0x398>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	07da      	lsls	r2, r3, #31
 800f12c:	d438      	bmi.n	800f1a0 <_printf_float+0x398>
 800f12e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f132:	eba2 0903 	sub.w	r9, r2, r3
 800f136:	9b05      	ldr	r3, [sp, #20]
 800f138:	1ad2      	subs	r2, r2, r3
 800f13a:	4591      	cmp	r9, r2
 800f13c:	bfa8      	it	ge
 800f13e:	4691      	movge	r9, r2
 800f140:	f1b9 0f00 	cmp.w	r9, #0
 800f144:	dc35      	bgt.n	800f1b2 <_printf_float+0x3aa>
 800f146:	f04f 0800 	mov.w	r8, #0
 800f14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f14e:	f104 0a1a 	add.w	sl, r4, #26
 800f152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f156:	1a9b      	subs	r3, r3, r2
 800f158:	eba3 0309 	sub.w	r3, r3, r9
 800f15c:	4543      	cmp	r3, r8
 800f15e:	f77f af79 	ble.w	800f054 <_printf_float+0x24c>
 800f162:	2301      	movs	r3, #1
 800f164:	4652      	mov	r2, sl
 800f166:	4631      	mov	r1, r6
 800f168:	4628      	mov	r0, r5
 800f16a:	47b8      	blx	r7
 800f16c:	3001      	adds	r0, #1
 800f16e:	f43f aeaa 	beq.w	800eec6 <_printf_float+0xbe>
 800f172:	f108 0801 	add.w	r8, r8, #1
 800f176:	e7ec      	b.n	800f152 <_printf_float+0x34a>
 800f178:	4613      	mov	r3, r2
 800f17a:	4631      	mov	r1, r6
 800f17c:	4642      	mov	r2, r8
 800f17e:	4628      	mov	r0, r5
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	d1c0      	bne.n	800f108 <_printf_float+0x300>
 800f186:	e69e      	b.n	800eec6 <_printf_float+0xbe>
 800f188:	2301      	movs	r3, #1
 800f18a:	4631      	mov	r1, r6
 800f18c:	4628      	mov	r0, r5
 800f18e:	9205      	str	r2, [sp, #20]
 800f190:	47b8      	blx	r7
 800f192:	3001      	adds	r0, #1
 800f194:	f43f ae97 	beq.w	800eec6 <_printf_float+0xbe>
 800f198:	9a05      	ldr	r2, [sp, #20]
 800f19a:	f10b 0b01 	add.w	fp, fp, #1
 800f19e:	e7b9      	b.n	800f114 <_printf_float+0x30c>
 800f1a0:	ee18 3a10 	vmov	r3, s16
 800f1a4:	4652      	mov	r2, sl
 800f1a6:	4631      	mov	r1, r6
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	47b8      	blx	r7
 800f1ac:	3001      	adds	r0, #1
 800f1ae:	d1be      	bne.n	800f12e <_printf_float+0x326>
 800f1b0:	e689      	b.n	800eec6 <_printf_float+0xbe>
 800f1b2:	9a05      	ldr	r2, [sp, #20]
 800f1b4:	464b      	mov	r3, r9
 800f1b6:	4442      	add	r2, r8
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b8      	blx	r7
 800f1be:	3001      	adds	r0, #1
 800f1c0:	d1c1      	bne.n	800f146 <_printf_float+0x33e>
 800f1c2:	e680      	b.n	800eec6 <_printf_float+0xbe>
 800f1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c6:	2a01      	cmp	r2, #1
 800f1c8:	dc01      	bgt.n	800f1ce <_printf_float+0x3c6>
 800f1ca:	07db      	lsls	r3, r3, #31
 800f1cc:	d53a      	bpl.n	800f244 <_printf_float+0x43c>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4642      	mov	r2, r8
 800f1d2:	4631      	mov	r1, r6
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	47b8      	blx	r7
 800f1d8:	3001      	adds	r0, #1
 800f1da:	f43f ae74 	beq.w	800eec6 <_printf_float+0xbe>
 800f1de:	ee18 3a10 	vmov	r3, s16
 800f1e2:	4652      	mov	r2, sl
 800f1e4:	4631      	mov	r1, r6
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	47b8      	blx	r7
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	f43f ae6b 	beq.w	800eec6 <_printf_float+0xbe>
 800f1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f1fc:	f7f1 fc94 	bl	8000b28 <__aeabi_dcmpeq>
 800f200:	b9d8      	cbnz	r0, 800f23a <_printf_float+0x432>
 800f202:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f206:	f108 0201 	add.w	r2, r8, #1
 800f20a:	4631      	mov	r1, r6
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	d10e      	bne.n	800f232 <_printf_float+0x42a>
 800f214:	e657      	b.n	800eec6 <_printf_float+0xbe>
 800f216:	2301      	movs	r3, #1
 800f218:	4652      	mov	r2, sl
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	f43f ae50 	beq.w	800eec6 <_printf_float+0xbe>
 800f226:	f108 0801 	add.w	r8, r8, #1
 800f22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22c:	3b01      	subs	r3, #1
 800f22e:	4543      	cmp	r3, r8
 800f230:	dcf1      	bgt.n	800f216 <_printf_float+0x40e>
 800f232:	464b      	mov	r3, r9
 800f234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f238:	e6da      	b.n	800eff0 <_printf_float+0x1e8>
 800f23a:	f04f 0800 	mov.w	r8, #0
 800f23e:	f104 0a1a 	add.w	sl, r4, #26
 800f242:	e7f2      	b.n	800f22a <_printf_float+0x422>
 800f244:	2301      	movs	r3, #1
 800f246:	4642      	mov	r2, r8
 800f248:	e7df      	b.n	800f20a <_printf_float+0x402>
 800f24a:	2301      	movs	r3, #1
 800f24c:	464a      	mov	r2, r9
 800f24e:	4631      	mov	r1, r6
 800f250:	4628      	mov	r0, r5
 800f252:	47b8      	blx	r7
 800f254:	3001      	adds	r0, #1
 800f256:	f43f ae36 	beq.w	800eec6 <_printf_float+0xbe>
 800f25a:	f108 0801 	add.w	r8, r8, #1
 800f25e:	68e3      	ldr	r3, [r4, #12]
 800f260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f262:	1a5b      	subs	r3, r3, r1
 800f264:	4543      	cmp	r3, r8
 800f266:	dcf0      	bgt.n	800f24a <_printf_float+0x442>
 800f268:	e6f8      	b.n	800f05c <_printf_float+0x254>
 800f26a:	f04f 0800 	mov.w	r8, #0
 800f26e:	f104 0919 	add.w	r9, r4, #25
 800f272:	e7f4      	b.n	800f25e <_printf_float+0x456>

0800f274 <_printf_common>:
 800f274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	4616      	mov	r6, r2
 800f27a:	4699      	mov	r9, r3
 800f27c:	688a      	ldr	r2, [r1, #8]
 800f27e:	690b      	ldr	r3, [r1, #16]
 800f280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f284:	4293      	cmp	r3, r2
 800f286:	bfb8      	it	lt
 800f288:	4613      	movlt	r3, r2
 800f28a:	6033      	str	r3, [r6, #0]
 800f28c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f290:	4607      	mov	r7, r0
 800f292:	460c      	mov	r4, r1
 800f294:	b10a      	cbz	r2, 800f29a <_printf_common+0x26>
 800f296:	3301      	adds	r3, #1
 800f298:	6033      	str	r3, [r6, #0]
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	0699      	lsls	r1, r3, #26
 800f29e:	bf42      	ittt	mi
 800f2a0:	6833      	ldrmi	r3, [r6, #0]
 800f2a2:	3302      	addmi	r3, #2
 800f2a4:	6033      	strmi	r3, [r6, #0]
 800f2a6:	6825      	ldr	r5, [r4, #0]
 800f2a8:	f015 0506 	ands.w	r5, r5, #6
 800f2ac:	d106      	bne.n	800f2bc <_printf_common+0x48>
 800f2ae:	f104 0a19 	add.w	sl, r4, #25
 800f2b2:	68e3      	ldr	r3, [r4, #12]
 800f2b4:	6832      	ldr	r2, [r6, #0]
 800f2b6:	1a9b      	subs	r3, r3, r2
 800f2b8:	42ab      	cmp	r3, r5
 800f2ba:	dc26      	bgt.n	800f30a <_printf_common+0x96>
 800f2bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2c0:	1e13      	subs	r3, r2, #0
 800f2c2:	6822      	ldr	r2, [r4, #0]
 800f2c4:	bf18      	it	ne
 800f2c6:	2301      	movne	r3, #1
 800f2c8:	0692      	lsls	r2, r2, #26
 800f2ca:	d42b      	bmi.n	800f324 <_printf_common+0xb0>
 800f2cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2d0:	4649      	mov	r1, r9
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	47c0      	blx	r8
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	d01e      	beq.n	800f318 <_printf_common+0xa4>
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	6922      	ldr	r2, [r4, #16]
 800f2de:	f003 0306 	and.w	r3, r3, #6
 800f2e2:	2b04      	cmp	r3, #4
 800f2e4:	bf02      	ittt	eq
 800f2e6:	68e5      	ldreq	r5, [r4, #12]
 800f2e8:	6833      	ldreq	r3, [r6, #0]
 800f2ea:	1aed      	subeq	r5, r5, r3
 800f2ec:	68a3      	ldr	r3, [r4, #8]
 800f2ee:	bf0c      	ite	eq
 800f2f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2f4:	2500      	movne	r5, #0
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	bfc4      	itt	gt
 800f2fa:	1a9b      	subgt	r3, r3, r2
 800f2fc:	18ed      	addgt	r5, r5, r3
 800f2fe:	2600      	movs	r6, #0
 800f300:	341a      	adds	r4, #26
 800f302:	42b5      	cmp	r5, r6
 800f304:	d11a      	bne.n	800f33c <_printf_common+0xc8>
 800f306:	2000      	movs	r0, #0
 800f308:	e008      	b.n	800f31c <_printf_common+0xa8>
 800f30a:	2301      	movs	r3, #1
 800f30c:	4652      	mov	r2, sl
 800f30e:	4649      	mov	r1, r9
 800f310:	4638      	mov	r0, r7
 800f312:	47c0      	blx	r8
 800f314:	3001      	adds	r0, #1
 800f316:	d103      	bne.n	800f320 <_printf_common+0xac>
 800f318:	f04f 30ff 	mov.w	r0, #4294967295
 800f31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f320:	3501      	adds	r5, #1
 800f322:	e7c6      	b.n	800f2b2 <_printf_common+0x3e>
 800f324:	18e1      	adds	r1, r4, r3
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	2030      	movs	r0, #48	; 0x30
 800f32a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f32e:	4422      	add	r2, r4
 800f330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f338:	3302      	adds	r3, #2
 800f33a:	e7c7      	b.n	800f2cc <_printf_common+0x58>
 800f33c:	2301      	movs	r3, #1
 800f33e:	4622      	mov	r2, r4
 800f340:	4649      	mov	r1, r9
 800f342:	4638      	mov	r0, r7
 800f344:	47c0      	blx	r8
 800f346:	3001      	adds	r0, #1
 800f348:	d0e6      	beq.n	800f318 <_printf_common+0xa4>
 800f34a:	3601      	adds	r6, #1
 800f34c:	e7d9      	b.n	800f302 <_printf_common+0x8e>
	...

0800f350 <_printf_i>:
 800f350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f354:	7e0f      	ldrb	r7, [r1, #24]
 800f356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f358:	2f78      	cmp	r7, #120	; 0x78
 800f35a:	4691      	mov	r9, r2
 800f35c:	4680      	mov	r8, r0
 800f35e:	460c      	mov	r4, r1
 800f360:	469a      	mov	sl, r3
 800f362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f366:	d807      	bhi.n	800f378 <_printf_i+0x28>
 800f368:	2f62      	cmp	r7, #98	; 0x62
 800f36a:	d80a      	bhi.n	800f382 <_printf_i+0x32>
 800f36c:	2f00      	cmp	r7, #0
 800f36e:	f000 80d4 	beq.w	800f51a <_printf_i+0x1ca>
 800f372:	2f58      	cmp	r7, #88	; 0x58
 800f374:	f000 80c0 	beq.w	800f4f8 <_printf_i+0x1a8>
 800f378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f37c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f380:	e03a      	b.n	800f3f8 <_printf_i+0xa8>
 800f382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f386:	2b15      	cmp	r3, #21
 800f388:	d8f6      	bhi.n	800f378 <_printf_i+0x28>
 800f38a:	a101      	add	r1, pc, #4	; (adr r1, 800f390 <_printf_i+0x40>)
 800f38c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f390:	0800f3e9 	.word	0x0800f3e9
 800f394:	0800f3fd 	.word	0x0800f3fd
 800f398:	0800f379 	.word	0x0800f379
 800f39c:	0800f379 	.word	0x0800f379
 800f3a0:	0800f379 	.word	0x0800f379
 800f3a4:	0800f379 	.word	0x0800f379
 800f3a8:	0800f3fd 	.word	0x0800f3fd
 800f3ac:	0800f379 	.word	0x0800f379
 800f3b0:	0800f379 	.word	0x0800f379
 800f3b4:	0800f379 	.word	0x0800f379
 800f3b8:	0800f379 	.word	0x0800f379
 800f3bc:	0800f501 	.word	0x0800f501
 800f3c0:	0800f429 	.word	0x0800f429
 800f3c4:	0800f4bb 	.word	0x0800f4bb
 800f3c8:	0800f379 	.word	0x0800f379
 800f3cc:	0800f379 	.word	0x0800f379
 800f3d0:	0800f523 	.word	0x0800f523
 800f3d4:	0800f379 	.word	0x0800f379
 800f3d8:	0800f429 	.word	0x0800f429
 800f3dc:	0800f379 	.word	0x0800f379
 800f3e0:	0800f379 	.word	0x0800f379
 800f3e4:	0800f4c3 	.word	0x0800f4c3
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	1d1a      	adds	r2, r3, #4
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	602a      	str	r2, [r5, #0]
 800f3f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e09f      	b.n	800f53c <_printf_i+0x1ec>
 800f3fc:	6820      	ldr	r0, [r4, #0]
 800f3fe:	682b      	ldr	r3, [r5, #0]
 800f400:	0607      	lsls	r7, r0, #24
 800f402:	f103 0104 	add.w	r1, r3, #4
 800f406:	6029      	str	r1, [r5, #0]
 800f408:	d501      	bpl.n	800f40e <_printf_i+0xbe>
 800f40a:	681e      	ldr	r6, [r3, #0]
 800f40c:	e003      	b.n	800f416 <_printf_i+0xc6>
 800f40e:	0646      	lsls	r6, r0, #25
 800f410:	d5fb      	bpl.n	800f40a <_printf_i+0xba>
 800f412:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f416:	2e00      	cmp	r6, #0
 800f418:	da03      	bge.n	800f422 <_printf_i+0xd2>
 800f41a:	232d      	movs	r3, #45	; 0x2d
 800f41c:	4276      	negs	r6, r6
 800f41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f422:	485a      	ldr	r0, [pc, #360]	; (800f58c <_printf_i+0x23c>)
 800f424:	230a      	movs	r3, #10
 800f426:	e012      	b.n	800f44e <_printf_i+0xfe>
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	6820      	ldr	r0, [r4, #0]
 800f42c:	1d19      	adds	r1, r3, #4
 800f42e:	6029      	str	r1, [r5, #0]
 800f430:	0605      	lsls	r5, r0, #24
 800f432:	d501      	bpl.n	800f438 <_printf_i+0xe8>
 800f434:	681e      	ldr	r6, [r3, #0]
 800f436:	e002      	b.n	800f43e <_printf_i+0xee>
 800f438:	0641      	lsls	r1, r0, #25
 800f43a:	d5fb      	bpl.n	800f434 <_printf_i+0xe4>
 800f43c:	881e      	ldrh	r6, [r3, #0]
 800f43e:	4853      	ldr	r0, [pc, #332]	; (800f58c <_printf_i+0x23c>)
 800f440:	2f6f      	cmp	r7, #111	; 0x6f
 800f442:	bf0c      	ite	eq
 800f444:	2308      	moveq	r3, #8
 800f446:	230a      	movne	r3, #10
 800f448:	2100      	movs	r1, #0
 800f44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f44e:	6865      	ldr	r5, [r4, #4]
 800f450:	60a5      	str	r5, [r4, #8]
 800f452:	2d00      	cmp	r5, #0
 800f454:	bfa2      	ittt	ge
 800f456:	6821      	ldrge	r1, [r4, #0]
 800f458:	f021 0104 	bicge.w	r1, r1, #4
 800f45c:	6021      	strge	r1, [r4, #0]
 800f45e:	b90e      	cbnz	r6, 800f464 <_printf_i+0x114>
 800f460:	2d00      	cmp	r5, #0
 800f462:	d04b      	beq.n	800f4fc <_printf_i+0x1ac>
 800f464:	4615      	mov	r5, r2
 800f466:	fbb6 f1f3 	udiv	r1, r6, r3
 800f46a:	fb03 6711 	mls	r7, r3, r1, r6
 800f46e:	5dc7      	ldrb	r7, [r0, r7]
 800f470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f474:	4637      	mov	r7, r6
 800f476:	42bb      	cmp	r3, r7
 800f478:	460e      	mov	r6, r1
 800f47a:	d9f4      	bls.n	800f466 <_printf_i+0x116>
 800f47c:	2b08      	cmp	r3, #8
 800f47e:	d10b      	bne.n	800f498 <_printf_i+0x148>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	07de      	lsls	r6, r3, #31
 800f484:	d508      	bpl.n	800f498 <_printf_i+0x148>
 800f486:	6923      	ldr	r3, [r4, #16]
 800f488:	6861      	ldr	r1, [r4, #4]
 800f48a:	4299      	cmp	r1, r3
 800f48c:	bfde      	ittt	le
 800f48e:	2330      	movle	r3, #48	; 0x30
 800f490:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f494:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f498:	1b52      	subs	r2, r2, r5
 800f49a:	6122      	str	r2, [r4, #16]
 800f49c:	f8cd a000 	str.w	sl, [sp]
 800f4a0:	464b      	mov	r3, r9
 800f4a2:	aa03      	add	r2, sp, #12
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4640      	mov	r0, r8
 800f4a8:	f7ff fee4 	bl	800f274 <_printf_common>
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d14a      	bne.n	800f546 <_printf_i+0x1f6>
 800f4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b4:	b004      	add	sp, #16
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	f043 0320 	orr.w	r3, r3, #32
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	4833      	ldr	r0, [pc, #204]	; (800f590 <_printf_i+0x240>)
 800f4c4:	2778      	movs	r7, #120	; 0x78
 800f4c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	6829      	ldr	r1, [r5, #0]
 800f4ce:	061f      	lsls	r7, r3, #24
 800f4d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4d4:	d402      	bmi.n	800f4dc <_printf_i+0x18c>
 800f4d6:	065f      	lsls	r7, r3, #25
 800f4d8:	bf48      	it	mi
 800f4da:	b2b6      	uxthmi	r6, r6
 800f4dc:	07df      	lsls	r7, r3, #31
 800f4de:	bf48      	it	mi
 800f4e0:	f043 0320 	orrmi.w	r3, r3, #32
 800f4e4:	6029      	str	r1, [r5, #0]
 800f4e6:	bf48      	it	mi
 800f4e8:	6023      	strmi	r3, [r4, #0]
 800f4ea:	b91e      	cbnz	r6, 800f4f4 <_printf_i+0x1a4>
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	f023 0320 	bic.w	r3, r3, #32
 800f4f2:	6023      	str	r3, [r4, #0]
 800f4f4:	2310      	movs	r3, #16
 800f4f6:	e7a7      	b.n	800f448 <_printf_i+0xf8>
 800f4f8:	4824      	ldr	r0, [pc, #144]	; (800f58c <_printf_i+0x23c>)
 800f4fa:	e7e4      	b.n	800f4c6 <_printf_i+0x176>
 800f4fc:	4615      	mov	r5, r2
 800f4fe:	e7bd      	b.n	800f47c <_printf_i+0x12c>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	6826      	ldr	r6, [r4, #0]
 800f504:	6961      	ldr	r1, [r4, #20]
 800f506:	1d18      	adds	r0, r3, #4
 800f508:	6028      	str	r0, [r5, #0]
 800f50a:	0635      	lsls	r5, r6, #24
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	d501      	bpl.n	800f514 <_printf_i+0x1c4>
 800f510:	6019      	str	r1, [r3, #0]
 800f512:	e002      	b.n	800f51a <_printf_i+0x1ca>
 800f514:	0670      	lsls	r0, r6, #25
 800f516:	d5fb      	bpl.n	800f510 <_printf_i+0x1c0>
 800f518:	8019      	strh	r1, [r3, #0]
 800f51a:	2300      	movs	r3, #0
 800f51c:	6123      	str	r3, [r4, #16]
 800f51e:	4615      	mov	r5, r2
 800f520:	e7bc      	b.n	800f49c <_printf_i+0x14c>
 800f522:	682b      	ldr	r3, [r5, #0]
 800f524:	1d1a      	adds	r2, r3, #4
 800f526:	602a      	str	r2, [r5, #0]
 800f528:	681d      	ldr	r5, [r3, #0]
 800f52a:	6862      	ldr	r2, [r4, #4]
 800f52c:	2100      	movs	r1, #0
 800f52e:	4628      	mov	r0, r5
 800f530:	f7f0 fe7e 	bl	8000230 <memchr>
 800f534:	b108      	cbz	r0, 800f53a <_printf_i+0x1ea>
 800f536:	1b40      	subs	r0, r0, r5
 800f538:	6060      	str	r0, [r4, #4]
 800f53a:	6863      	ldr	r3, [r4, #4]
 800f53c:	6123      	str	r3, [r4, #16]
 800f53e:	2300      	movs	r3, #0
 800f540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f544:	e7aa      	b.n	800f49c <_printf_i+0x14c>
 800f546:	6923      	ldr	r3, [r4, #16]
 800f548:	462a      	mov	r2, r5
 800f54a:	4649      	mov	r1, r9
 800f54c:	4640      	mov	r0, r8
 800f54e:	47d0      	blx	sl
 800f550:	3001      	adds	r0, #1
 800f552:	d0ad      	beq.n	800f4b0 <_printf_i+0x160>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	079b      	lsls	r3, r3, #30
 800f558:	d413      	bmi.n	800f582 <_printf_i+0x232>
 800f55a:	68e0      	ldr	r0, [r4, #12]
 800f55c:	9b03      	ldr	r3, [sp, #12]
 800f55e:	4298      	cmp	r0, r3
 800f560:	bfb8      	it	lt
 800f562:	4618      	movlt	r0, r3
 800f564:	e7a6      	b.n	800f4b4 <_printf_i+0x164>
 800f566:	2301      	movs	r3, #1
 800f568:	4632      	mov	r2, r6
 800f56a:	4649      	mov	r1, r9
 800f56c:	4640      	mov	r0, r8
 800f56e:	47d0      	blx	sl
 800f570:	3001      	adds	r0, #1
 800f572:	d09d      	beq.n	800f4b0 <_printf_i+0x160>
 800f574:	3501      	adds	r5, #1
 800f576:	68e3      	ldr	r3, [r4, #12]
 800f578:	9903      	ldr	r1, [sp, #12]
 800f57a:	1a5b      	subs	r3, r3, r1
 800f57c:	42ab      	cmp	r3, r5
 800f57e:	dcf2      	bgt.n	800f566 <_printf_i+0x216>
 800f580:	e7eb      	b.n	800f55a <_printf_i+0x20a>
 800f582:	2500      	movs	r5, #0
 800f584:	f104 0619 	add.w	r6, r4, #25
 800f588:	e7f5      	b.n	800f576 <_printf_i+0x226>
 800f58a:	bf00      	nop
 800f58c:	0801495a 	.word	0x0801495a
 800f590:	0801496b 	.word	0x0801496b

0800f594 <std>:
 800f594:	2300      	movs	r3, #0
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	e9c0 3300 	strd	r3, r3, [r0]
 800f59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5a2:	6083      	str	r3, [r0, #8]
 800f5a4:	8181      	strh	r1, [r0, #12]
 800f5a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f5a8:	81c2      	strh	r2, [r0, #14]
 800f5aa:	6183      	str	r3, [r0, #24]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	2208      	movs	r2, #8
 800f5b0:	305c      	adds	r0, #92	; 0x5c
 800f5b2:	f000 f920 	bl	800f7f6 <memset>
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	; (800f5ec <std+0x58>)
 800f5b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f5ba:	4b0d      	ldr	r3, [pc, #52]	; (800f5f0 <std+0x5c>)
 800f5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5be:	4b0d      	ldr	r3, [pc, #52]	; (800f5f4 <std+0x60>)
 800f5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5c2:	4b0d      	ldr	r3, [pc, #52]	; (800f5f8 <std+0x64>)
 800f5c4:	6323      	str	r3, [r4, #48]	; 0x30
 800f5c6:	4b0d      	ldr	r3, [pc, #52]	; (800f5fc <std+0x68>)
 800f5c8:	6224      	str	r4, [r4, #32]
 800f5ca:	429c      	cmp	r4, r3
 800f5cc:	d006      	beq.n	800f5dc <std+0x48>
 800f5ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f5d2:	4294      	cmp	r4, r2
 800f5d4:	d002      	beq.n	800f5dc <std+0x48>
 800f5d6:	33d0      	adds	r3, #208	; 0xd0
 800f5d8:	429c      	cmp	r4, r3
 800f5da:	d105      	bne.n	800f5e8 <std+0x54>
 800f5dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e4:	f000 b994 	b.w	800f910 <__retarget_lock_init_recursive>
 800f5e8:	bd10      	pop	{r4, pc}
 800f5ea:	bf00      	nop
 800f5ec:	0800f73d 	.word	0x0800f73d
 800f5f0:	0800f75f 	.word	0x0800f75f
 800f5f4:	0800f797 	.word	0x0800f797
 800f5f8:	0800f7bb 	.word	0x0800f7bb
 800f5fc:	200008f8 	.word	0x200008f8

0800f600 <stdio_exit_handler>:
 800f600:	4a02      	ldr	r2, [pc, #8]	; (800f60c <stdio_exit_handler+0xc>)
 800f602:	4903      	ldr	r1, [pc, #12]	; (800f610 <stdio_exit_handler+0x10>)
 800f604:	4803      	ldr	r0, [pc, #12]	; (800f614 <stdio_exit_handler+0x14>)
 800f606:	f000 b87b 	b.w	800f700 <_fwalk_sglue>
 800f60a:	bf00      	nop
 800f60c:	20000018 	.word	0x20000018
 800f610:	08011159 	.word	0x08011159
 800f614:	20000024 	.word	0x20000024

0800f618 <cleanup_stdio>:
 800f618:	6841      	ldr	r1, [r0, #4]
 800f61a:	4b0c      	ldr	r3, [pc, #48]	; (800f64c <cleanup_stdio+0x34>)
 800f61c:	4299      	cmp	r1, r3
 800f61e:	b510      	push	{r4, lr}
 800f620:	4604      	mov	r4, r0
 800f622:	d001      	beq.n	800f628 <cleanup_stdio+0x10>
 800f624:	f001 fd98 	bl	8011158 <_fflush_r>
 800f628:	68a1      	ldr	r1, [r4, #8]
 800f62a:	4b09      	ldr	r3, [pc, #36]	; (800f650 <cleanup_stdio+0x38>)
 800f62c:	4299      	cmp	r1, r3
 800f62e:	d002      	beq.n	800f636 <cleanup_stdio+0x1e>
 800f630:	4620      	mov	r0, r4
 800f632:	f001 fd91 	bl	8011158 <_fflush_r>
 800f636:	68e1      	ldr	r1, [r4, #12]
 800f638:	4b06      	ldr	r3, [pc, #24]	; (800f654 <cleanup_stdio+0x3c>)
 800f63a:	4299      	cmp	r1, r3
 800f63c:	d004      	beq.n	800f648 <cleanup_stdio+0x30>
 800f63e:	4620      	mov	r0, r4
 800f640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f644:	f001 bd88 	b.w	8011158 <_fflush_r>
 800f648:	bd10      	pop	{r4, pc}
 800f64a:	bf00      	nop
 800f64c:	200008f8 	.word	0x200008f8
 800f650:	20000960 	.word	0x20000960
 800f654:	200009c8 	.word	0x200009c8

0800f658 <global_stdio_init.part.0>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <global_stdio_init.part.0+0x30>)
 800f65c:	4c0b      	ldr	r4, [pc, #44]	; (800f68c <global_stdio_init.part.0+0x34>)
 800f65e:	4a0c      	ldr	r2, [pc, #48]	; (800f690 <global_stdio_init.part.0+0x38>)
 800f660:	601a      	str	r2, [r3, #0]
 800f662:	4620      	mov	r0, r4
 800f664:	2200      	movs	r2, #0
 800f666:	2104      	movs	r1, #4
 800f668:	f7ff ff94 	bl	800f594 <std>
 800f66c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f670:	2201      	movs	r2, #1
 800f672:	2109      	movs	r1, #9
 800f674:	f7ff ff8e 	bl	800f594 <std>
 800f678:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f67c:	2202      	movs	r2, #2
 800f67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f682:	2112      	movs	r1, #18
 800f684:	f7ff bf86 	b.w	800f594 <std>
 800f688:	20000a30 	.word	0x20000a30
 800f68c:	200008f8 	.word	0x200008f8
 800f690:	0800f601 	.word	0x0800f601

0800f694 <__sfp_lock_acquire>:
 800f694:	4801      	ldr	r0, [pc, #4]	; (800f69c <__sfp_lock_acquire+0x8>)
 800f696:	f000 b93c 	b.w	800f912 <__retarget_lock_acquire_recursive>
 800f69a:	bf00      	nop
 800f69c:	20000a39 	.word	0x20000a39

0800f6a0 <__sfp_lock_release>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__sfp_lock_release+0x8>)
 800f6a2:	f000 b937 	b.w	800f914 <__retarget_lock_release_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	20000a39 	.word	0x20000a39

0800f6ac <__sinit>:
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	f7ff fff0 	bl	800f694 <__sfp_lock_acquire>
 800f6b4:	6a23      	ldr	r3, [r4, #32]
 800f6b6:	b11b      	cbz	r3, 800f6c0 <__sinit+0x14>
 800f6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6bc:	f7ff bff0 	b.w	800f6a0 <__sfp_lock_release>
 800f6c0:	4b04      	ldr	r3, [pc, #16]	; (800f6d4 <__sinit+0x28>)
 800f6c2:	6223      	str	r3, [r4, #32]
 800f6c4:	4b04      	ldr	r3, [pc, #16]	; (800f6d8 <__sinit+0x2c>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d1f5      	bne.n	800f6b8 <__sinit+0xc>
 800f6cc:	f7ff ffc4 	bl	800f658 <global_stdio_init.part.0>
 800f6d0:	e7f2      	b.n	800f6b8 <__sinit+0xc>
 800f6d2:	bf00      	nop
 800f6d4:	0800f619 	.word	0x0800f619
 800f6d8:	20000a30 	.word	0x20000a30

0800f6dc <fiprintf>:
 800f6dc:	b40e      	push	{r1, r2, r3}
 800f6de:	b503      	push	{r0, r1, lr}
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	ab03      	add	r3, sp, #12
 800f6e4:	4805      	ldr	r0, [pc, #20]	; (800f6fc <fiprintf+0x20>)
 800f6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ea:	6800      	ldr	r0, [r0, #0]
 800f6ec:	9301      	str	r3, [sp, #4]
 800f6ee:	f001 fb93 	bl	8010e18 <_vfiprintf_r>
 800f6f2:	b002      	add	sp, #8
 800f6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f8:	b003      	add	sp, #12
 800f6fa:	4770      	bx	lr
 800f6fc:	20000070 	.word	0x20000070

0800f700 <_fwalk_sglue>:
 800f700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f704:	4607      	mov	r7, r0
 800f706:	4688      	mov	r8, r1
 800f708:	4614      	mov	r4, r2
 800f70a:	2600      	movs	r6, #0
 800f70c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f710:	f1b9 0901 	subs.w	r9, r9, #1
 800f714:	d505      	bpl.n	800f722 <_fwalk_sglue+0x22>
 800f716:	6824      	ldr	r4, [r4, #0]
 800f718:	2c00      	cmp	r4, #0
 800f71a:	d1f7      	bne.n	800f70c <_fwalk_sglue+0xc>
 800f71c:	4630      	mov	r0, r6
 800f71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f722:	89ab      	ldrh	r3, [r5, #12]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d907      	bls.n	800f738 <_fwalk_sglue+0x38>
 800f728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f72c:	3301      	adds	r3, #1
 800f72e:	d003      	beq.n	800f738 <_fwalk_sglue+0x38>
 800f730:	4629      	mov	r1, r5
 800f732:	4638      	mov	r0, r7
 800f734:	47c0      	blx	r8
 800f736:	4306      	orrs	r6, r0
 800f738:	3568      	adds	r5, #104	; 0x68
 800f73a:	e7e9      	b.n	800f710 <_fwalk_sglue+0x10>

0800f73c <__sread>:
 800f73c:	b510      	push	{r4, lr}
 800f73e:	460c      	mov	r4, r1
 800f740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f744:	f000 f886 	bl	800f854 <_read_r>
 800f748:	2800      	cmp	r0, #0
 800f74a:	bfab      	itete	ge
 800f74c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f74e:	89a3      	ldrhlt	r3, [r4, #12]
 800f750:	181b      	addge	r3, r3, r0
 800f752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f756:	bfac      	ite	ge
 800f758:	6563      	strge	r3, [r4, #84]	; 0x54
 800f75a:	81a3      	strhlt	r3, [r4, #12]
 800f75c:	bd10      	pop	{r4, pc}

0800f75e <__swrite>:
 800f75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f762:	461f      	mov	r7, r3
 800f764:	898b      	ldrh	r3, [r1, #12]
 800f766:	05db      	lsls	r3, r3, #23
 800f768:	4605      	mov	r5, r0
 800f76a:	460c      	mov	r4, r1
 800f76c:	4616      	mov	r6, r2
 800f76e:	d505      	bpl.n	800f77c <__swrite+0x1e>
 800f770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f774:	2302      	movs	r3, #2
 800f776:	2200      	movs	r2, #0
 800f778:	f000 f85a 	bl	800f830 <_lseek_r>
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f786:	81a3      	strh	r3, [r4, #12]
 800f788:	4632      	mov	r2, r6
 800f78a:	463b      	mov	r3, r7
 800f78c:	4628      	mov	r0, r5
 800f78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f792:	f000 b881 	b.w	800f898 <_write_r>

0800f796 <__sseek>:
 800f796:	b510      	push	{r4, lr}
 800f798:	460c      	mov	r4, r1
 800f79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79e:	f000 f847 	bl	800f830 <_lseek_r>
 800f7a2:	1c43      	adds	r3, r0, #1
 800f7a4:	89a3      	ldrh	r3, [r4, #12]
 800f7a6:	bf15      	itete	ne
 800f7a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7b2:	81a3      	strheq	r3, [r4, #12]
 800f7b4:	bf18      	it	ne
 800f7b6:	81a3      	strhne	r3, [r4, #12]
 800f7b8:	bd10      	pop	{r4, pc}

0800f7ba <__sclose>:
 800f7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7be:	f000 b827 	b.w	800f810 <_close_r>

0800f7c2 <memmove>:
 800f7c2:	4288      	cmp	r0, r1
 800f7c4:	b510      	push	{r4, lr}
 800f7c6:	eb01 0402 	add.w	r4, r1, r2
 800f7ca:	d902      	bls.n	800f7d2 <memmove+0x10>
 800f7cc:	4284      	cmp	r4, r0
 800f7ce:	4623      	mov	r3, r4
 800f7d0:	d807      	bhi.n	800f7e2 <memmove+0x20>
 800f7d2:	1e43      	subs	r3, r0, #1
 800f7d4:	42a1      	cmp	r1, r4
 800f7d6:	d008      	beq.n	800f7ea <memmove+0x28>
 800f7d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7e0:	e7f8      	b.n	800f7d4 <memmove+0x12>
 800f7e2:	4402      	add	r2, r0
 800f7e4:	4601      	mov	r1, r0
 800f7e6:	428a      	cmp	r2, r1
 800f7e8:	d100      	bne.n	800f7ec <memmove+0x2a>
 800f7ea:	bd10      	pop	{r4, pc}
 800f7ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7f4:	e7f7      	b.n	800f7e6 <memmove+0x24>

0800f7f6 <memset>:
 800f7f6:	4402      	add	r2, r0
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d100      	bne.n	800f800 <memset+0xa>
 800f7fe:	4770      	bx	lr
 800f800:	f803 1b01 	strb.w	r1, [r3], #1
 800f804:	e7f9      	b.n	800f7fa <memset+0x4>
	...

0800f808 <_localeconv_r>:
 800f808:	4800      	ldr	r0, [pc, #0]	; (800f80c <_localeconv_r+0x4>)
 800f80a:	4770      	bx	lr
 800f80c:	20000164 	.word	0x20000164

0800f810 <_close_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d06      	ldr	r5, [pc, #24]	; (800f82c <_close_r+0x1c>)
 800f814:	2300      	movs	r3, #0
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	602b      	str	r3, [r5, #0]
 800f81c:	f7fa fe61 	bl	800a4e2 <_close>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	d102      	bne.n	800f82a <_close_r+0x1a>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b103      	cbz	r3, 800f82a <_close_r+0x1a>
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	20000a34 	.word	0x20000a34

0800f830 <_lseek_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d07      	ldr	r5, [pc, #28]	; (800f850 <_lseek_r+0x20>)
 800f834:	4604      	mov	r4, r0
 800f836:	4608      	mov	r0, r1
 800f838:	4611      	mov	r1, r2
 800f83a:	2200      	movs	r2, #0
 800f83c:	602a      	str	r2, [r5, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	f7fa fe76 	bl	800a530 <_lseek>
 800f844:	1c43      	adds	r3, r0, #1
 800f846:	d102      	bne.n	800f84e <_lseek_r+0x1e>
 800f848:	682b      	ldr	r3, [r5, #0]
 800f84a:	b103      	cbz	r3, 800f84e <_lseek_r+0x1e>
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	20000a34 	.word	0x20000a34

0800f854 <_read_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d07      	ldr	r5, [pc, #28]	; (800f874 <_read_r+0x20>)
 800f858:	4604      	mov	r4, r0
 800f85a:	4608      	mov	r0, r1
 800f85c:	4611      	mov	r1, r2
 800f85e:	2200      	movs	r2, #0
 800f860:	602a      	str	r2, [r5, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	f7fa fe04 	bl	800a470 <_read>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	d102      	bne.n	800f872 <_read_r+0x1e>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	b103      	cbz	r3, 800f872 <_read_r+0x1e>
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	20000a34 	.word	0x20000a34

0800f878 <_sbrk_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4d06      	ldr	r5, [pc, #24]	; (800f894 <_sbrk_r+0x1c>)
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	4608      	mov	r0, r1
 800f882:	602b      	str	r3, [r5, #0]
 800f884:	f7fa fe62 	bl	800a54c <_sbrk>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_sbrk_r+0x1a>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_sbrk_r+0x1a>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	20000a34 	.word	0x20000a34

0800f898 <_write_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d07      	ldr	r5, [pc, #28]	; (800f8b8 <_write_r+0x20>)
 800f89c:	4604      	mov	r4, r0
 800f89e:	4608      	mov	r0, r1
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	602a      	str	r2, [r5, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f7fa fdff 	bl	800a4aa <_write>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d102      	bne.n	800f8b6 <_write_r+0x1e>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	b103      	cbz	r3, 800f8b6 <_write_r+0x1e>
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}
 800f8b8:	20000a34 	.word	0x20000a34

0800f8bc <__errno>:
 800f8bc:	4b01      	ldr	r3, [pc, #4]	; (800f8c4 <__errno+0x8>)
 800f8be:	6818      	ldr	r0, [r3, #0]
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	20000070 	.word	0x20000070

0800f8c8 <__libc_init_array>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	4d0d      	ldr	r5, [pc, #52]	; (800f900 <__libc_init_array+0x38>)
 800f8cc:	4c0d      	ldr	r4, [pc, #52]	; (800f904 <__libc_init_array+0x3c>)
 800f8ce:	1b64      	subs	r4, r4, r5
 800f8d0:	10a4      	asrs	r4, r4, #2
 800f8d2:	2600      	movs	r6, #0
 800f8d4:	42a6      	cmp	r6, r4
 800f8d6:	d109      	bne.n	800f8ec <__libc_init_array+0x24>
 800f8d8:	4d0b      	ldr	r5, [pc, #44]	; (800f908 <__libc_init_array+0x40>)
 800f8da:	4c0c      	ldr	r4, [pc, #48]	; (800f90c <__libc_init_array+0x44>)
 800f8dc:	f001 fdf8 	bl	80114d0 <_init>
 800f8e0:	1b64      	subs	r4, r4, r5
 800f8e2:	10a4      	asrs	r4, r4, #2
 800f8e4:	2600      	movs	r6, #0
 800f8e6:	42a6      	cmp	r6, r4
 800f8e8:	d105      	bne.n	800f8f6 <__libc_init_array+0x2e>
 800f8ea:	bd70      	pop	{r4, r5, r6, pc}
 800f8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8f0:	4798      	blx	r3
 800f8f2:	3601      	adds	r6, #1
 800f8f4:	e7ee      	b.n	800f8d4 <__libc_init_array+0xc>
 800f8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8fa:	4798      	blx	r3
 800f8fc:	3601      	adds	r6, #1
 800f8fe:	e7f2      	b.n	800f8e6 <__libc_init_array+0x1e>
 800f900:	08014c88 	.word	0x08014c88
 800f904:	08014c88 	.word	0x08014c88
 800f908:	08014c88 	.word	0x08014c88
 800f90c:	08014c8c 	.word	0x08014c8c

0800f910 <__retarget_lock_init_recursive>:
 800f910:	4770      	bx	lr

0800f912 <__retarget_lock_acquire_recursive>:
 800f912:	4770      	bx	lr

0800f914 <__retarget_lock_release_recursive>:
 800f914:	4770      	bx	lr

0800f916 <memcpy>:
 800f916:	440a      	add	r2, r1
 800f918:	4291      	cmp	r1, r2
 800f91a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f91e:	d100      	bne.n	800f922 <memcpy+0xc>
 800f920:	4770      	bx	lr
 800f922:	b510      	push	{r4, lr}
 800f924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f92c:	4291      	cmp	r1, r2
 800f92e:	d1f9      	bne.n	800f924 <memcpy+0xe>
 800f930:	bd10      	pop	{r4, pc}

0800f932 <abort>:
 800f932:	b508      	push	{r3, lr}
 800f934:	2006      	movs	r0, #6
 800f936:	f001 fcf5 	bl	8011324 <raise>
 800f93a:	2001      	movs	r0, #1
 800f93c:	f7fa fd8e 	bl	800a45c <_exit>

0800f940 <quorem>:
 800f940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	6903      	ldr	r3, [r0, #16]
 800f946:	690c      	ldr	r4, [r1, #16]
 800f948:	42a3      	cmp	r3, r4
 800f94a:	4607      	mov	r7, r0
 800f94c:	db7e      	blt.n	800fa4c <quorem+0x10c>
 800f94e:	3c01      	subs	r4, #1
 800f950:	f101 0814 	add.w	r8, r1, #20
 800f954:	f100 0514 	add.w	r5, r0, #20
 800f958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f966:	3301      	adds	r3, #1
 800f968:	429a      	cmp	r2, r3
 800f96a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f96e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f972:	fbb2 f6f3 	udiv	r6, r2, r3
 800f976:	d331      	bcc.n	800f9dc <quorem+0x9c>
 800f978:	f04f 0e00 	mov.w	lr, #0
 800f97c:	4640      	mov	r0, r8
 800f97e:	46ac      	mov	ip, r5
 800f980:	46f2      	mov	sl, lr
 800f982:	f850 2b04 	ldr.w	r2, [r0], #4
 800f986:	b293      	uxth	r3, r2
 800f988:	fb06 e303 	mla	r3, r6, r3, lr
 800f98c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f990:	0c1a      	lsrs	r2, r3, #16
 800f992:	b29b      	uxth	r3, r3
 800f994:	ebaa 0303 	sub.w	r3, sl, r3
 800f998:	f8dc a000 	ldr.w	sl, [ip]
 800f99c:	fa13 f38a 	uxtah	r3, r3, sl
 800f9a0:	fb06 220e 	mla	r2, r6, lr, r2
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	9b00      	ldr	r3, [sp, #0]
 800f9a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9ac:	b292      	uxth	r2, r2
 800f9ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f9b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9ba:	4581      	cmp	r9, r0
 800f9bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9c0:	f84c 3b04 	str.w	r3, [ip], #4
 800f9c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f9c8:	d2db      	bcs.n	800f982 <quorem+0x42>
 800f9ca:	f855 300b 	ldr.w	r3, [r5, fp]
 800f9ce:	b92b      	cbnz	r3, 800f9dc <quorem+0x9c>
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	3b04      	subs	r3, #4
 800f9d4:	429d      	cmp	r5, r3
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	d32c      	bcc.n	800fa34 <quorem+0xf4>
 800f9da:	613c      	str	r4, [r7, #16]
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f001 f8f1 	bl	8010bc4 <__mcmp>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	db22      	blt.n	800fa2c <quorem+0xec>
 800f9e6:	3601      	adds	r6, #1
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9f0:	f8d1 c000 	ldr.w	ip, [r1]
 800f9f4:	b293      	uxth	r3, r2
 800f9f6:	1ac3      	subs	r3, r0, r3
 800f9f8:	0c12      	lsrs	r2, r2, #16
 800f9fa:	fa13 f38c 	uxtah	r3, r3, ip
 800f9fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fa02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa0c:	45c1      	cmp	r9, r8
 800fa0e:	f841 3b04 	str.w	r3, [r1], #4
 800fa12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa16:	d2e9      	bcs.n	800f9ec <quorem+0xac>
 800fa18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa20:	b922      	cbnz	r2, 800fa2c <quorem+0xec>
 800fa22:	3b04      	subs	r3, #4
 800fa24:	429d      	cmp	r5, r3
 800fa26:	461a      	mov	r2, r3
 800fa28:	d30a      	bcc.n	800fa40 <quorem+0x100>
 800fa2a:	613c      	str	r4, [r7, #16]
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	b003      	add	sp, #12
 800fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	3b04      	subs	r3, #4
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	d1ce      	bne.n	800f9da <quorem+0x9a>
 800fa3c:	3c01      	subs	r4, #1
 800fa3e:	e7c9      	b.n	800f9d4 <quorem+0x94>
 800fa40:	6812      	ldr	r2, [r2, #0]
 800fa42:	3b04      	subs	r3, #4
 800fa44:	2a00      	cmp	r2, #0
 800fa46:	d1f0      	bne.n	800fa2a <quorem+0xea>
 800fa48:	3c01      	subs	r4, #1
 800fa4a:	e7eb      	b.n	800fa24 <quorem+0xe4>
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7ee      	b.n	800fa2e <quorem+0xee>

0800fa50 <_dtoa_r>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b04 	vpush	{d8-d9}
 800fa58:	69c5      	ldr	r5, [r0, #28]
 800fa5a:	b093      	sub	sp, #76	; 0x4c
 800fa5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fa60:	ec57 6b10 	vmov	r6, r7, d0
 800fa64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa68:	9107      	str	r1, [sp, #28]
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	920a      	str	r2, [sp, #40]	; 0x28
 800fa6e:	930d      	str	r3, [sp, #52]	; 0x34
 800fa70:	b975      	cbnz	r5, 800fa90 <_dtoa_r+0x40>
 800fa72:	2010      	movs	r0, #16
 800fa74:	f7ff f86c 	bl	800eb50 <malloc>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	61e0      	str	r0, [r4, #28]
 800fa7c:	b920      	cbnz	r0, 800fa88 <_dtoa_r+0x38>
 800fa7e:	4bae      	ldr	r3, [pc, #696]	; (800fd38 <_dtoa_r+0x2e8>)
 800fa80:	21ef      	movs	r1, #239	; 0xef
 800fa82:	48ae      	ldr	r0, [pc, #696]	; (800fd3c <_dtoa_r+0x2ec>)
 800fa84:	f7ff f846 	bl	800eb14 <__assert_func>
 800fa88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa8c:	6005      	str	r5, [r0, #0]
 800fa8e:	60c5      	str	r5, [r0, #12]
 800fa90:	69e3      	ldr	r3, [r4, #28]
 800fa92:	6819      	ldr	r1, [r3, #0]
 800fa94:	b151      	cbz	r1, 800faac <_dtoa_r+0x5c>
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	604a      	str	r2, [r1, #4]
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	4093      	lsls	r3, r2
 800fa9e:	608b      	str	r3, [r1, #8]
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 fe53 	bl	801074c <_Bfree>
 800faa6:	69e3      	ldr	r3, [r4, #28]
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
 800faac:	1e3b      	subs	r3, r7, #0
 800faae:	bfbb      	ittet	lt
 800fab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fab4:	9303      	strlt	r3, [sp, #12]
 800fab6:	2300      	movge	r3, #0
 800fab8:	2201      	movlt	r2, #1
 800faba:	bfac      	ite	ge
 800fabc:	f8c8 3000 	strge.w	r3, [r8]
 800fac0:	f8c8 2000 	strlt.w	r2, [r8]
 800fac4:	4b9e      	ldr	r3, [pc, #632]	; (800fd40 <_dtoa_r+0x2f0>)
 800fac6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800faca:	ea33 0308 	bics.w	r3, r3, r8
 800face:	d11b      	bne.n	800fb08 <_dtoa_r+0xb8>
 800fad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fad2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fad6:	6013      	str	r3, [r2, #0]
 800fad8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fadc:	4333      	orrs	r3, r6
 800fade:	f000 8593 	beq.w	8010608 <_dtoa_r+0xbb8>
 800fae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fae4:	b963      	cbnz	r3, 800fb00 <_dtoa_r+0xb0>
 800fae6:	4b97      	ldr	r3, [pc, #604]	; (800fd44 <_dtoa_r+0x2f4>)
 800fae8:	e027      	b.n	800fb3a <_dtoa_r+0xea>
 800faea:	4b97      	ldr	r3, [pc, #604]	; (800fd48 <_dtoa_r+0x2f8>)
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	3308      	adds	r3, #8
 800faf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800faf2:	6013      	str	r3, [r2, #0]
 800faf4:	9800      	ldr	r0, [sp, #0]
 800faf6:	b013      	add	sp, #76	; 0x4c
 800faf8:	ecbd 8b04 	vpop	{d8-d9}
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	4b90      	ldr	r3, [pc, #576]	; (800fd44 <_dtoa_r+0x2f4>)
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	3303      	adds	r3, #3
 800fb06:	e7f3      	b.n	800faf0 <_dtoa_r+0xa0>
 800fb08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	ec51 0b17 	vmov	r0, r1, d7
 800fb12:	eeb0 8a47 	vmov.f32	s16, s14
 800fb16:	eef0 8a67 	vmov.f32	s17, s15
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f7f1 f804 	bl	8000b28 <__aeabi_dcmpeq>
 800fb20:	4681      	mov	r9, r0
 800fb22:	b160      	cbz	r0, 800fb3e <_dtoa_r+0xee>
 800fb24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb26:	2301      	movs	r3, #1
 800fb28:	6013      	str	r3, [r2, #0]
 800fb2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f000 8568 	beq.w	8010602 <_dtoa_r+0xbb2>
 800fb32:	4b86      	ldr	r3, [pc, #536]	; (800fd4c <_dtoa_r+0x2fc>)
 800fb34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	e7da      	b.n	800faf4 <_dtoa_r+0xa4>
 800fb3e:	aa10      	add	r2, sp, #64	; 0x40
 800fb40:	a911      	add	r1, sp, #68	; 0x44
 800fb42:	4620      	mov	r0, r4
 800fb44:	eeb0 0a48 	vmov.f32	s0, s16
 800fb48:	eef0 0a68 	vmov.f32	s1, s17
 800fb4c:	f001 f8e0 	bl	8010d10 <__d2b>
 800fb50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb54:	4682      	mov	sl, r0
 800fb56:	2d00      	cmp	r5, #0
 800fb58:	d07f      	beq.n	800fc5a <_dtoa_r+0x20a>
 800fb5a:	ee18 3a90 	vmov	r3, s17
 800fb5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fb66:	ec51 0b18 	vmov	r0, r1, d8
 800fb6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fb6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fb76:	4619      	mov	r1, r3
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4b75      	ldr	r3, [pc, #468]	; (800fd50 <_dtoa_r+0x300>)
 800fb7c:	f7f0 fbb4 	bl	80002e8 <__aeabi_dsub>
 800fb80:	a367      	add	r3, pc, #412	; (adr r3, 800fd20 <_dtoa_r+0x2d0>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	f7f0 fd67 	bl	8000658 <__aeabi_dmul>
 800fb8a:	a367      	add	r3, pc, #412	; (adr r3, 800fd28 <_dtoa_r+0x2d8>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fbac 	bl	80002ec <__adddf3>
 800fb94:	4606      	mov	r6, r0
 800fb96:	4628      	mov	r0, r5
 800fb98:	460f      	mov	r7, r1
 800fb9a:	f7f0 fcf3 	bl	8000584 <__aeabi_i2d>
 800fb9e:	a364      	add	r3, pc, #400	; (adr r3, 800fd30 <_dtoa_r+0x2e0>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	f7f0 fd58 	bl	8000658 <__aeabi_dmul>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	4630      	mov	r0, r6
 800fbae:	4639      	mov	r1, r7
 800fbb0:	f7f0 fb9c 	bl	80002ec <__adddf3>
 800fbb4:	4606      	mov	r6, r0
 800fbb6:	460f      	mov	r7, r1
 800fbb8:	f7f0 fffe 	bl	8000bb8 <__aeabi_d2iz>
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4683      	mov	fp, r0
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	f7f0 ffb9 	bl	8000b3c <__aeabi_dcmplt>
 800fbca:	b148      	cbz	r0, 800fbe0 <_dtoa_r+0x190>
 800fbcc:	4658      	mov	r0, fp
 800fbce:	f7f0 fcd9 	bl	8000584 <__aeabi_i2d>
 800fbd2:	4632      	mov	r2, r6
 800fbd4:	463b      	mov	r3, r7
 800fbd6:	f7f0 ffa7 	bl	8000b28 <__aeabi_dcmpeq>
 800fbda:	b908      	cbnz	r0, 800fbe0 <_dtoa_r+0x190>
 800fbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fbe0:	f1bb 0f16 	cmp.w	fp, #22
 800fbe4:	d857      	bhi.n	800fc96 <_dtoa_r+0x246>
 800fbe6:	4b5b      	ldr	r3, [pc, #364]	; (800fd54 <_dtoa_r+0x304>)
 800fbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf0:	ec51 0b18 	vmov	r0, r1, d8
 800fbf4:	f7f0 ffa2 	bl	8000b3c <__aeabi_dcmplt>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d04e      	beq.n	800fc9a <_dtoa_r+0x24a>
 800fbfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc00:	2300      	movs	r3, #0
 800fc02:	930c      	str	r3, [sp, #48]	; 0x30
 800fc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc06:	1b5b      	subs	r3, r3, r5
 800fc08:	1e5a      	subs	r2, r3, #1
 800fc0a:	bf45      	ittet	mi
 800fc0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800fc10:	9305      	strmi	r3, [sp, #20]
 800fc12:	2300      	movpl	r3, #0
 800fc14:	2300      	movmi	r3, #0
 800fc16:	9206      	str	r2, [sp, #24]
 800fc18:	bf54      	ite	pl
 800fc1a:	9305      	strpl	r3, [sp, #20]
 800fc1c:	9306      	strmi	r3, [sp, #24]
 800fc1e:	f1bb 0f00 	cmp.w	fp, #0
 800fc22:	db3c      	blt.n	800fc9e <_dtoa_r+0x24e>
 800fc24:	9b06      	ldr	r3, [sp, #24]
 800fc26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fc2a:	445b      	add	r3, fp
 800fc2c:	9306      	str	r3, [sp, #24]
 800fc2e:	2300      	movs	r3, #0
 800fc30:	9308      	str	r3, [sp, #32]
 800fc32:	9b07      	ldr	r3, [sp, #28]
 800fc34:	2b09      	cmp	r3, #9
 800fc36:	d868      	bhi.n	800fd0a <_dtoa_r+0x2ba>
 800fc38:	2b05      	cmp	r3, #5
 800fc3a:	bfc4      	itt	gt
 800fc3c:	3b04      	subgt	r3, #4
 800fc3e:	9307      	strgt	r3, [sp, #28]
 800fc40:	9b07      	ldr	r3, [sp, #28]
 800fc42:	f1a3 0302 	sub.w	r3, r3, #2
 800fc46:	bfcc      	ite	gt
 800fc48:	2500      	movgt	r5, #0
 800fc4a:	2501      	movle	r5, #1
 800fc4c:	2b03      	cmp	r3, #3
 800fc4e:	f200 8085 	bhi.w	800fd5c <_dtoa_r+0x30c>
 800fc52:	e8df f003 	tbb	[pc, r3]
 800fc56:	3b2e      	.short	0x3b2e
 800fc58:	5839      	.short	0x5839
 800fc5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc5e:	441d      	add	r5, r3
 800fc60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc64:	2b20      	cmp	r3, #32
 800fc66:	bfc1      	itttt	gt
 800fc68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fc70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fc74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fc78:	bfd6      	itet	le
 800fc7a:	f1c3 0320 	rsble	r3, r3, #32
 800fc7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fc82:	fa06 f003 	lslle.w	r0, r6, r3
 800fc86:	f7f0 fc6d 	bl	8000564 <__aeabi_ui2d>
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fc90:	3d01      	subs	r5, #1
 800fc92:	920e      	str	r2, [sp, #56]	; 0x38
 800fc94:	e76f      	b.n	800fb76 <_dtoa_r+0x126>
 800fc96:	2301      	movs	r3, #1
 800fc98:	e7b3      	b.n	800fc02 <_dtoa_r+0x1b2>
 800fc9a:	900c      	str	r0, [sp, #48]	; 0x30
 800fc9c:	e7b2      	b.n	800fc04 <_dtoa_r+0x1b4>
 800fc9e:	9b05      	ldr	r3, [sp, #20]
 800fca0:	eba3 030b 	sub.w	r3, r3, fp
 800fca4:	9305      	str	r3, [sp, #20]
 800fca6:	f1cb 0300 	rsb	r3, fp, #0
 800fcaa:	9308      	str	r3, [sp, #32]
 800fcac:	2300      	movs	r3, #0
 800fcae:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcb0:	e7bf      	b.n	800fc32 <_dtoa_r+0x1e2>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	dc52      	bgt.n	800fd62 <_dtoa_r+0x312>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	920a      	str	r2, [sp, #40]	; 0x28
 800fcc6:	e00b      	b.n	800fce0 <_dtoa_r+0x290>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e7f3      	b.n	800fcb4 <_dtoa_r+0x264>
 800fccc:	2300      	movs	r3, #0
 800fcce:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcd2:	445b      	add	r3, fp
 800fcd4:	9301      	str	r3, [sp, #4]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	9304      	str	r3, [sp, #16]
 800fcdc:	bfb8      	it	lt
 800fcde:	2301      	movlt	r3, #1
 800fce0:	69e0      	ldr	r0, [r4, #28]
 800fce2:	2100      	movs	r1, #0
 800fce4:	2204      	movs	r2, #4
 800fce6:	f102 0614 	add.w	r6, r2, #20
 800fcea:	429e      	cmp	r6, r3
 800fcec:	d93d      	bls.n	800fd6a <_dtoa_r+0x31a>
 800fcee:	6041      	str	r1, [r0, #4]
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fceb 	bl	80106cc <_Balloc>
 800fcf6:	9000      	str	r0, [sp, #0]
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d139      	bne.n	800fd70 <_dtoa_r+0x320>
 800fcfc:	4b16      	ldr	r3, [pc, #88]	; (800fd58 <_dtoa_r+0x308>)
 800fcfe:	4602      	mov	r2, r0
 800fd00:	f240 11af 	movw	r1, #431	; 0x1af
 800fd04:	e6bd      	b.n	800fa82 <_dtoa_r+0x32>
 800fd06:	2301      	movs	r3, #1
 800fd08:	e7e1      	b.n	800fcce <_dtoa_r+0x27e>
 800fd0a:	2501      	movs	r5, #1
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	9307      	str	r3, [sp, #28]
 800fd10:	9509      	str	r5, [sp, #36]	; 0x24
 800fd12:	f04f 33ff 	mov.w	r3, #4294967295
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	9304      	str	r3, [sp, #16]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2312      	movs	r3, #18
 800fd1e:	e7d1      	b.n	800fcc4 <_dtoa_r+0x274>
 800fd20:	636f4361 	.word	0x636f4361
 800fd24:	3fd287a7 	.word	0x3fd287a7
 800fd28:	8b60c8b3 	.word	0x8b60c8b3
 800fd2c:	3fc68a28 	.word	0x3fc68a28
 800fd30:	509f79fb 	.word	0x509f79fb
 800fd34:	3fd34413 	.word	0x3fd34413
 800fd38:	08014989 	.word	0x08014989
 800fd3c:	080149a0 	.word	0x080149a0
 800fd40:	7ff00000 	.word	0x7ff00000
 800fd44:	08014985 	.word	0x08014985
 800fd48:	0801497c 	.word	0x0801497c
 800fd4c:	08014959 	.word	0x08014959
 800fd50:	3ff80000 	.word	0x3ff80000
 800fd54:	08014a90 	.word	0x08014a90
 800fd58:	080149f8 	.word	0x080149f8
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd60:	e7d7      	b.n	800fd12 <_dtoa_r+0x2c2>
 800fd62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	9304      	str	r3, [sp, #16]
 800fd68:	e7ba      	b.n	800fce0 <_dtoa_r+0x290>
 800fd6a:	3101      	adds	r1, #1
 800fd6c:	0052      	lsls	r2, r2, #1
 800fd6e:	e7ba      	b.n	800fce6 <_dtoa_r+0x296>
 800fd70:	69e3      	ldr	r3, [r4, #28]
 800fd72:	9a00      	ldr	r2, [sp, #0]
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	9b04      	ldr	r3, [sp, #16]
 800fd78:	2b0e      	cmp	r3, #14
 800fd7a:	f200 80a8 	bhi.w	800fece <_dtoa_r+0x47e>
 800fd7e:	2d00      	cmp	r5, #0
 800fd80:	f000 80a5 	beq.w	800fece <_dtoa_r+0x47e>
 800fd84:	f1bb 0f00 	cmp.w	fp, #0
 800fd88:	dd38      	ble.n	800fdfc <_dtoa_r+0x3ac>
 800fd8a:	4bc0      	ldr	r3, [pc, #768]	; (801008c <_dtoa_r+0x63c>)
 800fd8c:	f00b 020f 	and.w	r2, fp, #15
 800fd90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fd98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fd9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fda0:	d019      	beq.n	800fdd6 <_dtoa_r+0x386>
 800fda2:	4bbb      	ldr	r3, [pc, #748]	; (8010090 <_dtoa_r+0x640>)
 800fda4:	ec51 0b18 	vmov	r0, r1, d8
 800fda8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdac:	f7f0 fd7e 	bl	80008ac <__aeabi_ddiv>
 800fdb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdb4:	f008 080f 	and.w	r8, r8, #15
 800fdb8:	2503      	movs	r5, #3
 800fdba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010090 <_dtoa_r+0x640>
 800fdbe:	f1b8 0f00 	cmp.w	r8, #0
 800fdc2:	d10a      	bne.n	800fdda <_dtoa_r+0x38a>
 800fdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdc8:	4632      	mov	r2, r6
 800fdca:	463b      	mov	r3, r7
 800fdcc:	f7f0 fd6e 	bl	80008ac <__aeabi_ddiv>
 800fdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdd4:	e02b      	b.n	800fe2e <_dtoa_r+0x3de>
 800fdd6:	2502      	movs	r5, #2
 800fdd8:	e7ef      	b.n	800fdba <_dtoa_r+0x36a>
 800fdda:	f018 0f01 	tst.w	r8, #1
 800fdde:	d008      	beq.n	800fdf2 <_dtoa_r+0x3a2>
 800fde0:	4630      	mov	r0, r6
 800fde2:	4639      	mov	r1, r7
 800fde4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fde8:	f7f0 fc36 	bl	8000658 <__aeabi_dmul>
 800fdec:	3501      	adds	r5, #1
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460f      	mov	r7, r1
 800fdf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fdf6:	f109 0908 	add.w	r9, r9, #8
 800fdfa:	e7e0      	b.n	800fdbe <_dtoa_r+0x36e>
 800fdfc:	f000 809f 	beq.w	800ff3e <_dtoa_r+0x4ee>
 800fe00:	f1cb 0600 	rsb	r6, fp, #0
 800fe04:	4ba1      	ldr	r3, [pc, #644]	; (801008c <_dtoa_r+0x63c>)
 800fe06:	4fa2      	ldr	r7, [pc, #648]	; (8010090 <_dtoa_r+0x640>)
 800fe08:	f006 020f 	and.w	r2, r6, #15
 800fe0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	ec51 0b18 	vmov	r0, r1, d8
 800fe18:	f7f0 fc1e 	bl	8000658 <__aeabi_dmul>
 800fe1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe20:	1136      	asrs	r6, r6, #4
 800fe22:	2300      	movs	r3, #0
 800fe24:	2502      	movs	r5, #2
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	d17e      	bne.n	800ff28 <_dtoa_r+0x4d8>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1d0      	bne.n	800fdd0 <_dtoa_r+0x380>
 800fe2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 8084 	beq.w	800ff42 <_dtoa_r+0x4f2>
 800fe3a:	4b96      	ldr	r3, [pc, #600]	; (8010094 <_dtoa_r+0x644>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4640      	mov	r0, r8
 800fe40:	4649      	mov	r1, r9
 800fe42:	f7f0 fe7b 	bl	8000b3c <__aeabi_dcmplt>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d07b      	beq.n	800ff42 <_dtoa_r+0x4f2>
 800fe4a:	9b04      	ldr	r3, [sp, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d078      	beq.n	800ff42 <_dtoa_r+0x4f2>
 800fe50:	9b01      	ldr	r3, [sp, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	dd39      	ble.n	800feca <_dtoa_r+0x47a>
 800fe56:	4b90      	ldr	r3, [pc, #576]	; (8010098 <_dtoa_r+0x648>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4640      	mov	r0, r8
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	f7f0 fbfb 	bl	8000658 <__aeabi_dmul>
 800fe62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe66:	9e01      	ldr	r6, [sp, #4]
 800fe68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fe6c:	3501      	adds	r5, #1
 800fe6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe72:	4628      	mov	r0, r5
 800fe74:	f7f0 fb86 	bl	8000584 <__aeabi_i2d>
 800fe78:	4642      	mov	r2, r8
 800fe7a:	464b      	mov	r3, r9
 800fe7c:	f7f0 fbec 	bl	8000658 <__aeabi_dmul>
 800fe80:	4b86      	ldr	r3, [pc, #536]	; (801009c <_dtoa_r+0x64c>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	f7f0 fa32 	bl	80002ec <__adddf3>
 800fe88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fe8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe90:	9303      	str	r3, [sp, #12]
 800fe92:	2e00      	cmp	r6, #0
 800fe94:	d158      	bne.n	800ff48 <_dtoa_r+0x4f8>
 800fe96:	4b82      	ldr	r3, [pc, #520]	; (80100a0 <_dtoa_r+0x650>)
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4640      	mov	r0, r8
 800fe9c:	4649      	mov	r1, r9
 800fe9e:	f7f0 fa23 	bl	80002e8 <__aeabi_dsub>
 800fea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fea6:	4680      	mov	r8, r0
 800fea8:	4689      	mov	r9, r1
 800feaa:	f7f0 fe65 	bl	8000b78 <__aeabi_dcmpgt>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f040 8296 	bne.w	80103e0 <_dtoa_r+0x990>
 800feb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800feb8:	4640      	mov	r0, r8
 800feba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800febe:	4649      	mov	r1, r9
 800fec0:	f7f0 fe3c 	bl	8000b3c <__aeabi_dcmplt>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	f040 8289 	bne.w	80103dc <_dtoa_r+0x98c>
 800feca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f2c0 814e 	blt.w	8010172 <_dtoa_r+0x722>
 800fed6:	f1bb 0f0e 	cmp.w	fp, #14
 800feda:	f300 814a 	bgt.w	8010172 <_dtoa_r+0x722>
 800fede:	4b6b      	ldr	r3, [pc, #428]	; (801008c <_dtoa_r+0x63c>)
 800fee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feea:	2b00      	cmp	r3, #0
 800feec:	f280 80dc 	bge.w	80100a8 <_dtoa_r+0x658>
 800fef0:	9b04      	ldr	r3, [sp, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f300 80d8 	bgt.w	80100a8 <_dtoa_r+0x658>
 800fef8:	f040 826f 	bne.w	80103da <_dtoa_r+0x98a>
 800fefc:	4b68      	ldr	r3, [pc, #416]	; (80100a0 <_dtoa_r+0x650>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	4640      	mov	r0, r8
 800ff02:	4649      	mov	r1, r9
 800ff04:	f7f0 fba8 	bl	8000658 <__aeabi_dmul>
 800ff08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff0c:	f7f0 fe2a 	bl	8000b64 <__aeabi_dcmpge>
 800ff10:	9e04      	ldr	r6, [sp, #16]
 800ff12:	4637      	mov	r7, r6
 800ff14:	2800      	cmp	r0, #0
 800ff16:	f040 8245 	bne.w	80103a4 <_dtoa_r+0x954>
 800ff1a:	9d00      	ldr	r5, [sp, #0]
 800ff1c:	2331      	movs	r3, #49	; 0x31
 800ff1e:	f805 3b01 	strb.w	r3, [r5], #1
 800ff22:	f10b 0b01 	add.w	fp, fp, #1
 800ff26:	e241      	b.n	80103ac <_dtoa_r+0x95c>
 800ff28:	07f2      	lsls	r2, r6, #31
 800ff2a:	d505      	bpl.n	800ff38 <_dtoa_r+0x4e8>
 800ff2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff30:	f7f0 fb92 	bl	8000658 <__aeabi_dmul>
 800ff34:	3501      	adds	r5, #1
 800ff36:	2301      	movs	r3, #1
 800ff38:	1076      	asrs	r6, r6, #1
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	e773      	b.n	800fe26 <_dtoa_r+0x3d6>
 800ff3e:	2502      	movs	r5, #2
 800ff40:	e775      	b.n	800fe2e <_dtoa_r+0x3de>
 800ff42:	9e04      	ldr	r6, [sp, #16]
 800ff44:	465f      	mov	r7, fp
 800ff46:	e792      	b.n	800fe6e <_dtoa_r+0x41e>
 800ff48:	9900      	ldr	r1, [sp, #0]
 800ff4a:	4b50      	ldr	r3, [pc, #320]	; (801008c <_dtoa_r+0x63c>)
 800ff4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff50:	4431      	add	r1, r6
 800ff52:	9102      	str	r1, [sp, #8]
 800ff54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff56:	eeb0 9a47 	vmov.f32	s18, s14
 800ff5a:	eef0 9a67 	vmov.f32	s19, s15
 800ff5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ff62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff66:	2900      	cmp	r1, #0
 800ff68:	d044      	beq.n	800fff4 <_dtoa_r+0x5a4>
 800ff6a:	494e      	ldr	r1, [pc, #312]	; (80100a4 <_dtoa_r+0x654>)
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	f7f0 fc9d 	bl	80008ac <__aeabi_ddiv>
 800ff72:	ec53 2b19 	vmov	r2, r3, d9
 800ff76:	f7f0 f9b7 	bl	80002e8 <__aeabi_dsub>
 800ff7a:	9d00      	ldr	r5, [sp, #0]
 800ff7c:	ec41 0b19 	vmov	d9, r0, r1
 800ff80:	4649      	mov	r1, r9
 800ff82:	4640      	mov	r0, r8
 800ff84:	f7f0 fe18 	bl	8000bb8 <__aeabi_d2iz>
 800ff88:	4606      	mov	r6, r0
 800ff8a:	f7f0 fafb 	bl	8000584 <__aeabi_i2d>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4640      	mov	r0, r8
 800ff94:	4649      	mov	r1, r9
 800ff96:	f7f0 f9a7 	bl	80002e8 <__aeabi_dsub>
 800ff9a:	3630      	adds	r6, #48	; 0x30
 800ff9c:	f805 6b01 	strb.w	r6, [r5], #1
 800ffa0:	ec53 2b19 	vmov	r2, r3, d9
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	4689      	mov	r9, r1
 800ffa8:	f7f0 fdc8 	bl	8000b3c <__aeabi_dcmplt>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	d164      	bne.n	801007a <_dtoa_r+0x62a>
 800ffb0:	4642      	mov	r2, r8
 800ffb2:	464b      	mov	r3, r9
 800ffb4:	4937      	ldr	r1, [pc, #220]	; (8010094 <_dtoa_r+0x644>)
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	f7f0 f996 	bl	80002e8 <__aeabi_dsub>
 800ffbc:	ec53 2b19 	vmov	r2, r3, d9
 800ffc0:	f7f0 fdbc 	bl	8000b3c <__aeabi_dcmplt>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f040 80b6 	bne.w	8010136 <_dtoa_r+0x6e6>
 800ffca:	9b02      	ldr	r3, [sp, #8]
 800ffcc:	429d      	cmp	r5, r3
 800ffce:	f43f af7c 	beq.w	800feca <_dtoa_r+0x47a>
 800ffd2:	4b31      	ldr	r3, [pc, #196]	; (8010098 <_dtoa_r+0x648>)
 800ffd4:	ec51 0b19 	vmov	r0, r1, d9
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f7f0 fb3d 	bl	8000658 <__aeabi_dmul>
 800ffde:	4b2e      	ldr	r3, [pc, #184]	; (8010098 <_dtoa_r+0x648>)
 800ffe0:	ec41 0b19 	vmov	d9, r0, r1
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	f7f0 fb35 	bl	8000658 <__aeabi_dmul>
 800ffee:	4680      	mov	r8, r0
 800fff0:	4689      	mov	r9, r1
 800fff2:	e7c5      	b.n	800ff80 <_dtoa_r+0x530>
 800fff4:	ec51 0b17 	vmov	r0, r1, d7
 800fff8:	f7f0 fb2e 	bl	8000658 <__aeabi_dmul>
 800fffc:	9b02      	ldr	r3, [sp, #8]
 800fffe:	9d00      	ldr	r5, [sp, #0]
 8010000:	930f      	str	r3, [sp, #60]	; 0x3c
 8010002:	ec41 0b19 	vmov	d9, r0, r1
 8010006:	4649      	mov	r1, r9
 8010008:	4640      	mov	r0, r8
 801000a:	f7f0 fdd5 	bl	8000bb8 <__aeabi_d2iz>
 801000e:	4606      	mov	r6, r0
 8010010:	f7f0 fab8 	bl	8000584 <__aeabi_i2d>
 8010014:	3630      	adds	r6, #48	; 0x30
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	4640      	mov	r0, r8
 801001c:	4649      	mov	r1, r9
 801001e:	f7f0 f963 	bl	80002e8 <__aeabi_dsub>
 8010022:	f805 6b01 	strb.w	r6, [r5], #1
 8010026:	9b02      	ldr	r3, [sp, #8]
 8010028:	429d      	cmp	r5, r3
 801002a:	4680      	mov	r8, r0
 801002c:	4689      	mov	r9, r1
 801002e:	f04f 0200 	mov.w	r2, #0
 8010032:	d124      	bne.n	801007e <_dtoa_r+0x62e>
 8010034:	4b1b      	ldr	r3, [pc, #108]	; (80100a4 <_dtoa_r+0x654>)
 8010036:	ec51 0b19 	vmov	r0, r1, d9
 801003a:	f7f0 f957 	bl	80002ec <__adddf3>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4640      	mov	r0, r8
 8010044:	4649      	mov	r1, r9
 8010046:	f7f0 fd97 	bl	8000b78 <__aeabi_dcmpgt>
 801004a:	2800      	cmp	r0, #0
 801004c:	d173      	bne.n	8010136 <_dtoa_r+0x6e6>
 801004e:	ec53 2b19 	vmov	r2, r3, d9
 8010052:	4914      	ldr	r1, [pc, #80]	; (80100a4 <_dtoa_r+0x654>)
 8010054:	2000      	movs	r0, #0
 8010056:	f7f0 f947 	bl	80002e8 <__aeabi_dsub>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4640      	mov	r0, r8
 8010060:	4649      	mov	r1, r9
 8010062:	f7f0 fd6b 	bl	8000b3c <__aeabi_dcmplt>
 8010066:	2800      	cmp	r0, #0
 8010068:	f43f af2f 	beq.w	800feca <_dtoa_r+0x47a>
 801006c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801006e:	1e6b      	subs	r3, r5, #1
 8010070:	930f      	str	r3, [sp, #60]	; 0x3c
 8010072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010076:	2b30      	cmp	r3, #48	; 0x30
 8010078:	d0f8      	beq.n	801006c <_dtoa_r+0x61c>
 801007a:	46bb      	mov	fp, r7
 801007c:	e04a      	b.n	8010114 <_dtoa_r+0x6c4>
 801007e:	4b06      	ldr	r3, [pc, #24]	; (8010098 <_dtoa_r+0x648>)
 8010080:	f7f0 faea 	bl	8000658 <__aeabi_dmul>
 8010084:	4680      	mov	r8, r0
 8010086:	4689      	mov	r9, r1
 8010088:	e7bd      	b.n	8010006 <_dtoa_r+0x5b6>
 801008a:	bf00      	nop
 801008c:	08014a90 	.word	0x08014a90
 8010090:	08014a68 	.word	0x08014a68
 8010094:	3ff00000 	.word	0x3ff00000
 8010098:	40240000 	.word	0x40240000
 801009c:	401c0000 	.word	0x401c0000
 80100a0:	40140000 	.word	0x40140000
 80100a4:	3fe00000 	.word	0x3fe00000
 80100a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80100ac:	9d00      	ldr	r5, [sp, #0]
 80100ae:	4642      	mov	r2, r8
 80100b0:	464b      	mov	r3, r9
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	f7f0 fbf9 	bl	80008ac <__aeabi_ddiv>
 80100ba:	f7f0 fd7d 	bl	8000bb8 <__aeabi_d2iz>
 80100be:	9001      	str	r0, [sp, #4]
 80100c0:	f7f0 fa60 	bl	8000584 <__aeabi_i2d>
 80100c4:	4642      	mov	r2, r8
 80100c6:	464b      	mov	r3, r9
 80100c8:	f7f0 fac6 	bl	8000658 <__aeabi_dmul>
 80100cc:	4602      	mov	r2, r0
 80100ce:	460b      	mov	r3, r1
 80100d0:	4630      	mov	r0, r6
 80100d2:	4639      	mov	r1, r7
 80100d4:	f7f0 f908 	bl	80002e8 <__aeabi_dsub>
 80100d8:	9e01      	ldr	r6, [sp, #4]
 80100da:	9f04      	ldr	r7, [sp, #16]
 80100dc:	3630      	adds	r6, #48	; 0x30
 80100de:	f805 6b01 	strb.w	r6, [r5], #1
 80100e2:	9e00      	ldr	r6, [sp, #0]
 80100e4:	1bae      	subs	r6, r5, r6
 80100e6:	42b7      	cmp	r7, r6
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	d134      	bne.n	8010158 <_dtoa_r+0x708>
 80100ee:	f7f0 f8fd 	bl	80002ec <__adddf3>
 80100f2:	4642      	mov	r2, r8
 80100f4:	464b      	mov	r3, r9
 80100f6:	4606      	mov	r6, r0
 80100f8:	460f      	mov	r7, r1
 80100fa:	f7f0 fd3d 	bl	8000b78 <__aeabi_dcmpgt>
 80100fe:	b9c8      	cbnz	r0, 8010134 <_dtoa_r+0x6e4>
 8010100:	4642      	mov	r2, r8
 8010102:	464b      	mov	r3, r9
 8010104:	4630      	mov	r0, r6
 8010106:	4639      	mov	r1, r7
 8010108:	f7f0 fd0e 	bl	8000b28 <__aeabi_dcmpeq>
 801010c:	b110      	cbz	r0, 8010114 <_dtoa_r+0x6c4>
 801010e:	9b01      	ldr	r3, [sp, #4]
 8010110:	07db      	lsls	r3, r3, #31
 8010112:	d40f      	bmi.n	8010134 <_dtoa_r+0x6e4>
 8010114:	4651      	mov	r1, sl
 8010116:	4620      	mov	r0, r4
 8010118:	f000 fb18 	bl	801074c <_Bfree>
 801011c:	2300      	movs	r3, #0
 801011e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010120:	702b      	strb	r3, [r5, #0]
 8010122:	f10b 0301 	add.w	r3, fp, #1
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801012a:	2b00      	cmp	r3, #0
 801012c:	f43f ace2 	beq.w	800faf4 <_dtoa_r+0xa4>
 8010130:	601d      	str	r5, [r3, #0]
 8010132:	e4df      	b.n	800faf4 <_dtoa_r+0xa4>
 8010134:	465f      	mov	r7, fp
 8010136:	462b      	mov	r3, r5
 8010138:	461d      	mov	r5, r3
 801013a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801013e:	2a39      	cmp	r2, #57	; 0x39
 8010140:	d106      	bne.n	8010150 <_dtoa_r+0x700>
 8010142:	9a00      	ldr	r2, [sp, #0]
 8010144:	429a      	cmp	r2, r3
 8010146:	d1f7      	bne.n	8010138 <_dtoa_r+0x6e8>
 8010148:	9900      	ldr	r1, [sp, #0]
 801014a:	2230      	movs	r2, #48	; 0x30
 801014c:	3701      	adds	r7, #1
 801014e:	700a      	strb	r2, [r1, #0]
 8010150:	781a      	ldrb	r2, [r3, #0]
 8010152:	3201      	adds	r2, #1
 8010154:	701a      	strb	r2, [r3, #0]
 8010156:	e790      	b.n	801007a <_dtoa_r+0x62a>
 8010158:	4ba3      	ldr	r3, [pc, #652]	; (80103e8 <_dtoa_r+0x998>)
 801015a:	2200      	movs	r2, #0
 801015c:	f7f0 fa7c 	bl	8000658 <__aeabi_dmul>
 8010160:	2200      	movs	r2, #0
 8010162:	2300      	movs	r3, #0
 8010164:	4606      	mov	r6, r0
 8010166:	460f      	mov	r7, r1
 8010168:	f7f0 fcde 	bl	8000b28 <__aeabi_dcmpeq>
 801016c:	2800      	cmp	r0, #0
 801016e:	d09e      	beq.n	80100ae <_dtoa_r+0x65e>
 8010170:	e7d0      	b.n	8010114 <_dtoa_r+0x6c4>
 8010172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010174:	2a00      	cmp	r2, #0
 8010176:	f000 80ca 	beq.w	801030e <_dtoa_r+0x8be>
 801017a:	9a07      	ldr	r2, [sp, #28]
 801017c:	2a01      	cmp	r2, #1
 801017e:	f300 80ad 	bgt.w	80102dc <_dtoa_r+0x88c>
 8010182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010184:	2a00      	cmp	r2, #0
 8010186:	f000 80a5 	beq.w	80102d4 <_dtoa_r+0x884>
 801018a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801018e:	9e08      	ldr	r6, [sp, #32]
 8010190:	9d05      	ldr	r5, [sp, #20]
 8010192:	9a05      	ldr	r2, [sp, #20]
 8010194:	441a      	add	r2, r3
 8010196:	9205      	str	r2, [sp, #20]
 8010198:	9a06      	ldr	r2, [sp, #24]
 801019a:	2101      	movs	r1, #1
 801019c:	441a      	add	r2, r3
 801019e:	4620      	mov	r0, r4
 80101a0:	9206      	str	r2, [sp, #24]
 80101a2:	f000 fb89 	bl	80108b8 <__i2b>
 80101a6:	4607      	mov	r7, r0
 80101a8:	b165      	cbz	r5, 80101c4 <_dtoa_r+0x774>
 80101aa:	9b06      	ldr	r3, [sp, #24]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	dd09      	ble.n	80101c4 <_dtoa_r+0x774>
 80101b0:	42ab      	cmp	r3, r5
 80101b2:	9a05      	ldr	r2, [sp, #20]
 80101b4:	bfa8      	it	ge
 80101b6:	462b      	movge	r3, r5
 80101b8:	1ad2      	subs	r2, r2, r3
 80101ba:	9205      	str	r2, [sp, #20]
 80101bc:	9a06      	ldr	r2, [sp, #24]
 80101be:	1aed      	subs	r5, r5, r3
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	9306      	str	r3, [sp, #24]
 80101c4:	9b08      	ldr	r3, [sp, #32]
 80101c6:	b1f3      	cbz	r3, 8010206 <_dtoa_r+0x7b6>
 80101c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 80a3 	beq.w	8010316 <_dtoa_r+0x8c6>
 80101d0:	2e00      	cmp	r6, #0
 80101d2:	dd10      	ble.n	80101f6 <_dtoa_r+0x7a6>
 80101d4:	4639      	mov	r1, r7
 80101d6:	4632      	mov	r2, r6
 80101d8:	4620      	mov	r0, r4
 80101da:	f000 fc2d 	bl	8010a38 <__pow5mult>
 80101de:	4652      	mov	r2, sl
 80101e0:	4601      	mov	r1, r0
 80101e2:	4607      	mov	r7, r0
 80101e4:	4620      	mov	r0, r4
 80101e6:	f000 fb7d 	bl	80108e4 <__multiply>
 80101ea:	4651      	mov	r1, sl
 80101ec:	4680      	mov	r8, r0
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 faac 	bl	801074c <_Bfree>
 80101f4:	46c2      	mov	sl, r8
 80101f6:	9b08      	ldr	r3, [sp, #32]
 80101f8:	1b9a      	subs	r2, r3, r6
 80101fa:	d004      	beq.n	8010206 <_dtoa_r+0x7b6>
 80101fc:	4651      	mov	r1, sl
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 fc1a 	bl	8010a38 <__pow5mult>
 8010204:	4682      	mov	sl, r0
 8010206:	2101      	movs	r1, #1
 8010208:	4620      	mov	r0, r4
 801020a:	f000 fb55 	bl	80108b8 <__i2b>
 801020e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010210:	2b00      	cmp	r3, #0
 8010212:	4606      	mov	r6, r0
 8010214:	f340 8081 	ble.w	801031a <_dtoa_r+0x8ca>
 8010218:	461a      	mov	r2, r3
 801021a:	4601      	mov	r1, r0
 801021c:	4620      	mov	r0, r4
 801021e:	f000 fc0b 	bl	8010a38 <__pow5mult>
 8010222:	9b07      	ldr	r3, [sp, #28]
 8010224:	2b01      	cmp	r3, #1
 8010226:	4606      	mov	r6, r0
 8010228:	dd7a      	ble.n	8010320 <_dtoa_r+0x8d0>
 801022a:	f04f 0800 	mov.w	r8, #0
 801022e:	6933      	ldr	r3, [r6, #16]
 8010230:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010234:	6918      	ldr	r0, [r3, #16]
 8010236:	f000 faf1 	bl	801081c <__hi0bits>
 801023a:	f1c0 0020 	rsb	r0, r0, #32
 801023e:	9b06      	ldr	r3, [sp, #24]
 8010240:	4418      	add	r0, r3
 8010242:	f010 001f 	ands.w	r0, r0, #31
 8010246:	f000 8094 	beq.w	8010372 <_dtoa_r+0x922>
 801024a:	f1c0 0320 	rsb	r3, r0, #32
 801024e:	2b04      	cmp	r3, #4
 8010250:	f340 8085 	ble.w	801035e <_dtoa_r+0x90e>
 8010254:	9b05      	ldr	r3, [sp, #20]
 8010256:	f1c0 001c 	rsb	r0, r0, #28
 801025a:	4403      	add	r3, r0
 801025c:	9305      	str	r3, [sp, #20]
 801025e:	9b06      	ldr	r3, [sp, #24]
 8010260:	4403      	add	r3, r0
 8010262:	4405      	add	r5, r0
 8010264:	9306      	str	r3, [sp, #24]
 8010266:	9b05      	ldr	r3, [sp, #20]
 8010268:	2b00      	cmp	r3, #0
 801026a:	dd05      	ble.n	8010278 <_dtoa_r+0x828>
 801026c:	4651      	mov	r1, sl
 801026e:	461a      	mov	r2, r3
 8010270:	4620      	mov	r0, r4
 8010272:	f000 fc3b 	bl	8010aec <__lshift>
 8010276:	4682      	mov	sl, r0
 8010278:	9b06      	ldr	r3, [sp, #24]
 801027a:	2b00      	cmp	r3, #0
 801027c:	dd05      	ble.n	801028a <_dtoa_r+0x83a>
 801027e:	4631      	mov	r1, r6
 8010280:	461a      	mov	r2, r3
 8010282:	4620      	mov	r0, r4
 8010284:	f000 fc32 	bl	8010aec <__lshift>
 8010288:	4606      	mov	r6, r0
 801028a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028c:	2b00      	cmp	r3, #0
 801028e:	d072      	beq.n	8010376 <_dtoa_r+0x926>
 8010290:	4631      	mov	r1, r6
 8010292:	4650      	mov	r0, sl
 8010294:	f000 fc96 	bl	8010bc4 <__mcmp>
 8010298:	2800      	cmp	r0, #0
 801029a:	da6c      	bge.n	8010376 <_dtoa_r+0x926>
 801029c:	2300      	movs	r3, #0
 801029e:	4651      	mov	r1, sl
 80102a0:	220a      	movs	r2, #10
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 fa74 	bl	8010790 <__multadd>
 80102a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80102ae:	4682      	mov	sl, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 81b0 	beq.w	8010616 <_dtoa_r+0xbc6>
 80102b6:	2300      	movs	r3, #0
 80102b8:	4639      	mov	r1, r7
 80102ba:	220a      	movs	r2, #10
 80102bc:	4620      	mov	r0, r4
 80102be:	f000 fa67 	bl	8010790 <__multadd>
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	4607      	mov	r7, r0
 80102c8:	f300 8096 	bgt.w	80103f8 <_dtoa_r+0x9a8>
 80102cc:	9b07      	ldr	r3, [sp, #28]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	dc59      	bgt.n	8010386 <_dtoa_r+0x936>
 80102d2:	e091      	b.n	80103f8 <_dtoa_r+0x9a8>
 80102d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80102da:	e758      	b.n	801018e <_dtoa_r+0x73e>
 80102dc:	9b04      	ldr	r3, [sp, #16]
 80102de:	1e5e      	subs	r6, r3, #1
 80102e0:	9b08      	ldr	r3, [sp, #32]
 80102e2:	42b3      	cmp	r3, r6
 80102e4:	bfbf      	itttt	lt
 80102e6:	9b08      	ldrlt	r3, [sp, #32]
 80102e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80102ea:	9608      	strlt	r6, [sp, #32]
 80102ec:	1af3      	sublt	r3, r6, r3
 80102ee:	bfb4      	ite	lt
 80102f0:	18d2      	addlt	r2, r2, r3
 80102f2:	1b9e      	subge	r6, r3, r6
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	bfbc      	itt	lt
 80102f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80102fa:	2600      	movlt	r6, #0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfb7      	itett	lt
 8010300:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010304:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010308:	1a9d      	sublt	r5, r3, r2
 801030a:	2300      	movlt	r3, #0
 801030c:	e741      	b.n	8010192 <_dtoa_r+0x742>
 801030e:	9e08      	ldr	r6, [sp, #32]
 8010310:	9d05      	ldr	r5, [sp, #20]
 8010312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010314:	e748      	b.n	80101a8 <_dtoa_r+0x758>
 8010316:	9a08      	ldr	r2, [sp, #32]
 8010318:	e770      	b.n	80101fc <_dtoa_r+0x7ac>
 801031a:	9b07      	ldr	r3, [sp, #28]
 801031c:	2b01      	cmp	r3, #1
 801031e:	dc19      	bgt.n	8010354 <_dtoa_r+0x904>
 8010320:	9b02      	ldr	r3, [sp, #8]
 8010322:	b9bb      	cbnz	r3, 8010354 <_dtoa_r+0x904>
 8010324:	9b03      	ldr	r3, [sp, #12]
 8010326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801032a:	b99b      	cbnz	r3, 8010354 <_dtoa_r+0x904>
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010332:	0d1b      	lsrs	r3, r3, #20
 8010334:	051b      	lsls	r3, r3, #20
 8010336:	b183      	cbz	r3, 801035a <_dtoa_r+0x90a>
 8010338:	9b05      	ldr	r3, [sp, #20]
 801033a:	3301      	adds	r3, #1
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	9b06      	ldr	r3, [sp, #24]
 8010340:	3301      	adds	r3, #1
 8010342:	9306      	str	r3, [sp, #24]
 8010344:	f04f 0801 	mov.w	r8, #1
 8010348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801034a:	2b00      	cmp	r3, #0
 801034c:	f47f af6f 	bne.w	801022e <_dtoa_r+0x7de>
 8010350:	2001      	movs	r0, #1
 8010352:	e774      	b.n	801023e <_dtoa_r+0x7ee>
 8010354:	f04f 0800 	mov.w	r8, #0
 8010358:	e7f6      	b.n	8010348 <_dtoa_r+0x8f8>
 801035a:	4698      	mov	r8, r3
 801035c:	e7f4      	b.n	8010348 <_dtoa_r+0x8f8>
 801035e:	d082      	beq.n	8010266 <_dtoa_r+0x816>
 8010360:	9a05      	ldr	r2, [sp, #20]
 8010362:	331c      	adds	r3, #28
 8010364:	441a      	add	r2, r3
 8010366:	9205      	str	r2, [sp, #20]
 8010368:	9a06      	ldr	r2, [sp, #24]
 801036a:	441a      	add	r2, r3
 801036c:	441d      	add	r5, r3
 801036e:	9206      	str	r2, [sp, #24]
 8010370:	e779      	b.n	8010266 <_dtoa_r+0x816>
 8010372:	4603      	mov	r3, r0
 8010374:	e7f4      	b.n	8010360 <_dtoa_r+0x910>
 8010376:	9b04      	ldr	r3, [sp, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	dc37      	bgt.n	80103ec <_dtoa_r+0x99c>
 801037c:	9b07      	ldr	r3, [sp, #28]
 801037e:	2b02      	cmp	r3, #2
 8010380:	dd34      	ble.n	80103ec <_dtoa_r+0x99c>
 8010382:	9b04      	ldr	r3, [sp, #16]
 8010384:	9301      	str	r3, [sp, #4]
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	b963      	cbnz	r3, 80103a4 <_dtoa_r+0x954>
 801038a:	4631      	mov	r1, r6
 801038c:	2205      	movs	r2, #5
 801038e:	4620      	mov	r0, r4
 8010390:	f000 f9fe 	bl	8010790 <__multadd>
 8010394:	4601      	mov	r1, r0
 8010396:	4606      	mov	r6, r0
 8010398:	4650      	mov	r0, sl
 801039a:	f000 fc13 	bl	8010bc4 <__mcmp>
 801039e:	2800      	cmp	r0, #0
 80103a0:	f73f adbb 	bgt.w	800ff1a <_dtoa_r+0x4ca>
 80103a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103a6:	9d00      	ldr	r5, [sp, #0]
 80103a8:	ea6f 0b03 	mvn.w	fp, r3
 80103ac:	f04f 0800 	mov.w	r8, #0
 80103b0:	4631      	mov	r1, r6
 80103b2:	4620      	mov	r0, r4
 80103b4:	f000 f9ca 	bl	801074c <_Bfree>
 80103b8:	2f00      	cmp	r7, #0
 80103ba:	f43f aeab 	beq.w	8010114 <_dtoa_r+0x6c4>
 80103be:	f1b8 0f00 	cmp.w	r8, #0
 80103c2:	d005      	beq.n	80103d0 <_dtoa_r+0x980>
 80103c4:	45b8      	cmp	r8, r7
 80103c6:	d003      	beq.n	80103d0 <_dtoa_r+0x980>
 80103c8:	4641      	mov	r1, r8
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f9be 	bl	801074c <_Bfree>
 80103d0:	4639      	mov	r1, r7
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 f9ba 	bl	801074c <_Bfree>
 80103d8:	e69c      	b.n	8010114 <_dtoa_r+0x6c4>
 80103da:	2600      	movs	r6, #0
 80103dc:	4637      	mov	r7, r6
 80103de:	e7e1      	b.n	80103a4 <_dtoa_r+0x954>
 80103e0:	46bb      	mov	fp, r7
 80103e2:	4637      	mov	r7, r6
 80103e4:	e599      	b.n	800ff1a <_dtoa_r+0x4ca>
 80103e6:	bf00      	nop
 80103e8:	40240000 	.word	0x40240000
 80103ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	f000 80c8 	beq.w	8010584 <_dtoa_r+0xb34>
 80103f4:	9b04      	ldr	r3, [sp, #16]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	2d00      	cmp	r5, #0
 80103fa:	dd05      	ble.n	8010408 <_dtoa_r+0x9b8>
 80103fc:	4639      	mov	r1, r7
 80103fe:	462a      	mov	r2, r5
 8010400:	4620      	mov	r0, r4
 8010402:	f000 fb73 	bl	8010aec <__lshift>
 8010406:	4607      	mov	r7, r0
 8010408:	f1b8 0f00 	cmp.w	r8, #0
 801040c:	d05b      	beq.n	80104c6 <_dtoa_r+0xa76>
 801040e:	6879      	ldr	r1, [r7, #4]
 8010410:	4620      	mov	r0, r4
 8010412:	f000 f95b 	bl	80106cc <_Balloc>
 8010416:	4605      	mov	r5, r0
 8010418:	b928      	cbnz	r0, 8010426 <_dtoa_r+0x9d6>
 801041a:	4b83      	ldr	r3, [pc, #524]	; (8010628 <_dtoa_r+0xbd8>)
 801041c:	4602      	mov	r2, r0
 801041e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010422:	f7ff bb2e 	b.w	800fa82 <_dtoa_r+0x32>
 8010426:	693a      	ldr	r2, [r7, #16]
 8010428:	3202      	adds	r2, #2
 801042a:	0092      	lsls	r2, r2, #2
 801042c:	f107 010c 	add.w	r1, r7, #12
 8010430:	300c      	adds	r0, #12
 8010432:	f7ff fa70 	bl	800f916 <memcpy>
 8010436:	2201      	movs	r2, #1
 8010438:	4629      	mov	r1, r5
 801043a:	4620      	mov	r0, r4
 801043c:	f000 fb56 	bl	8010aec <__lshift>
 8010440:	9b00      	ldr	r3, [sp, #0]
 8010442:	3301      	adds	r3, #1
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	e9dd 2300 	ldrd	r2, r3, [sp]
 801044a:	4413      	add	r3, r2
 801044c:	9308      	str	r3, [sp, #32]
 801044e:	9b02      	ldr	r3, [sp, #8]
 8010450:	f003 0301 	and.w	r3, r3, #1
 8010454:	46b8      	mov	r8, r7
 8010456:	9306      	str	r3, [sp, #24]
 8010458:	4607      	mov	r7, r0
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	4631      	mov	r1, r6
 801045e:	3b01      	subs	r3, #1
 8010460:	4650      	mov	r0, sl
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	f7ff fa6c 	bl	800f940 <quorem>
 8010468:	4641      	mov	r1, r8
 801046a:	9002      	str	r0, [sp, #8]
 801046c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010470:	4650      	mov	r0, sl
 8010472:	f000 fba7 	bl	8010bc4 <__mcmp>
 8010476:	463a      	mov	r2, r7
 8010478:	9005      	str	r0, [sp, #20]
 801047a:	4631      	mov	r1, r6
 801047c:	4620      	mov	r0, r4
 801047e:	f000 fbbd 	bl	8010bfc <__mdiff>
 8010482:	68c2      	ldr	r2, [r0, #12]
 8010484:	4605      	mov	r5, r0
 8010486:	bb02      	cbnz	r2, 80104ca <_dtoa_r+0xa7a>
 8010488:	4601      	mov	r1, r0
 801048a:	4650      	mov	r0, sl
 801048c:	f000 fb9a 	bl	8010bc4 <__mcmp>
 8010490:	4602      	mov	r2, r0
 8010492:	4629      	mov	r1, r5
 8010494:	4620      	mov	r0, r4
 8010496:	9209      	str	r2, [sp, #36]	; 0x24
 8010498:	f000 f958 	bl	801074c <_Bfree>
 801049c:	9b07      	ldr	r3, [sp, #28]
 801049e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104a0:	9d04      	ldr	r5, [sp, #16]
 80104a2:	ea43 0102 	orr.w	r1, r3, r2
 80104a6:	9b06      	ldr	r3, [sp, #24]
 80104a8:	4319      	orrs	r1, r3
 80104aa:	d110      	bne.n	80104ce <_dtoa_r+0xa7e>
 80104ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80104b0:	d029      	beq.n	8010506 <_dtoa_r+0xab6>
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dd02      	ble.n	80104be <_dtoa_r+0xa6e>
 80104b8:	9b02      	ldr	r3, [sp, #8]
 80104ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80104be:	9b01      	ldr	r3, [sp, #4]
 80104c0:	f883 9000 	strb.w	r9, [r3]
 80104c4:	e774      	b.n	80103b0 <_dtoa_r+0x960>
 80104c6:	4638      	mov	r0, r7
 80104c8:	e7ba      	b.n	8010440 <_dtoa_r+0x9f0>
 80104ca:	2201      	movs	r2, #1
 80104cc:	e7e1      	b.n	8010492 <_dtoa_r+0xa42>
 80104ce:	9b05      	ldr	r3, [sp, #20]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	db04      	blt.n	80104de <_dtoa_r+0xa8e>
 80104d4:	9907      	ldr	r1, [sp, #28]
 80104d6:	430b      	orrs	r3, r1
 80104d8:	9906      	ldr	r1, [sp, #24]
 80104da:	430b      	orrs	r3, r1
 80104dc:	d120      	bne.n	8010520 <_dtoa_r+0xad0>
 80104de:	2a00      	cmp	r2, #0
 80104e0:	dded      	ble.n	80104be <_dtoa_r+0xa6e>
 80104e2:	4651      	mov	r1, sl
 80104e4:	2201      	movs	r2, #1
 80104e6:	4620      	mov	r0, r4
 80104e8:	f000 fb00 	bl	8010aec <__lshift>
 80104ec:	4631      	mov	r1, r6
 80104ee:	4682      	mov	sl, r0
 80104f0:	f000 fb68 	bl	8010bc4 <__mcmp>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	dc03      	bgt.n	8010500 <_dtoa_r+0xab0>
 80104f8:	d1e1      	bne.n	80104be <_dtoa_r+0xa6e>
 80104fa:	f019 0f01 	tst.w	r9, #1
 80104fe:	d0de      	beq.n	80104be <_dtoa_r+0xa6e>
 8010500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010504:	d1d8      	bne.n	80104b8 <_dtoa_r+0xa68>
 8010506:	9a01      	ldr	r2, [sp, #4]
 8010508:	2339      	movs	r3, #57	; 0x39
 801050a:	7013      	strb	r3, [r2, #0]
 801050c:	462b      	mov	r3, r5
 801050e:	461d      	mov	r5, r3
 8010510:	3b01      	subs	r3, #1
 8010512:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010516:	2a39      	cmp	r2, #57	; 0x39
 8010518:	d06c      	beq.n	80105f4 <_dtoa_r+0xba4>
 801051a:	3201      	adds	r2, #1
 801051c:	701a      	strb	r2, [r3, #0]
 801051e:	e747      	b.n	80103b0 <_dtoa_r+0x960>
 8010520:	2a00      	cmp	r2, #0
 8010522:	dd07      	ble.n	8010534 <_dtoa_r+0xae4>
 8010524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010528:	d0ed      	beq.n	8010506 <_dtoa_r+0xab6>
 801052a:	9a01      	ldr	r2, [sp, #4]
 801052c:	f109 0301 	add.w	r3, r9, #1
 8010530:	7013      	strb	r3, [r2, #0]
 8010532:	e73d      	b.n	80103b0 <_dtoa_r+0x960>
 8010534:	9b04      	ldr	r3, [sp, #16]
 8010536:	9a08      	ldr	r2, [sp, #32]
 8010538:	f803 9c01 	strb.w	r9, [r3, #-1]
 801053c:	4293      	cmp	r3, r2
 801053e:	d043      	beq.n	80105c8 <_dtoa_r+0xb78>
 8010540:	4651      	mov	r1, sl
 8010542:	2300      	movs	r3, #0
 8010544:	220a      	movs	r2, #10
 8010546:	4620      	mov	r0, r4
 8010548:	f000 f922 	bl	8010790 <__multadd>
 801054c:	45b8      	cmp	r8, r7
 801054e:	4682      	mov	sl, r0
 8010550:	f04f 0300 	mov.w	r3, #0
 8010554:	f04f 020a 	mov.w	r2, #10
 8010558:	4641      	mov	r1, r8
 801055a:	4620      	mov	r0, r4
 801055c:	d107      	bne.n	801056e <_dtoa_r+0xb1e>
 801055e:	f000 f917 	bl	8010790 <__multadd>
 8010562:	4680      	mov	r8, r0
 8010564:	4607      	mov	r7, r0
 8010566:	9b04      	ldr	r3, [sp, #16]
 8010568:	3301      	adds	r3, #1
 801056a:	9304      	str	r3, [sp, #16]
 801056c:	e775      	b.n	801045a <_dtoa_r+0xa0a>
 801056e:	f000 f90f 	bl	8010790 <__multadd>
 8010572:	4639      	mov	r1, r7
 8010574:	4680      	mov	r8, r0
 8010576:	2300      	movs	r3, #0
 8010578:	220a      	movs	r2, #10
 801057a:	4620      	mov	r0, r4
 801057c:	f000 f908 	bl	8010790 <__multadd>
 8010580:	4607      	mov	r7, r0
 8010582:	e7f0      	b.n	8010566 <_dtoa_r+0xb16>
 8010584:	9b04      	ldr	r3, [sp, #16]
 8010586:	9301      	str	r3, [sp, #4]
 8010588:	9d00      	ldr	r5, [sp, #0]
 801058a:	4631      	mov	r1, r6
 801058c:	4650      	mov	r0, sl
 801058e:	f7ff f9d7 	bl	800f940 <quorem>
 8010592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010596:	9b00      	ldr	r3, [sp, #0]
 8010598:	f805 9b01 	strb.w	r9, [r5], #1
 801059c:	1aea      	subs	r2, r5, r3
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	4293      	cmp	r3, r2
 80105a2:	dd07      	ble.n	80105b4 <_dtoa_r+0xb64>
 80105a4:	4651      	mov	r1, sl
 80105a6:	2300      	movs	r3, #0
 80105a8:	220a      	movs	r2, #10
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 f8f0 	bl	8010790 <__multadd>
 80105b0:	4682      	mov	sl, r0
 80105b2:	e7ea      	b.n	801058a <_dtoa_r+0xb3a>
 80105b4:	9b01      	ldr	r3, [sp, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	bfc8      	it	gt
 80105ba:	461d      	movgt	r5, r3
 80105bc:	9b00      	ldr	r3, [sp, #0]
 80105be:	bfd8      	it	le
 80105c0:	2501      	movle	r5, #1
 80105c2:	441d      	add	r5, r3
 80105c4:	f04f 0800 	mov.w	r8, #0
 80105c8:	4651      	mov	r1, sl
 80105ca:	2201      	movs	r2, #1
 80105cc:	4620      	mov	r0, r4
 80105ce:	f000 fa8d 	bl	8010aec <__lshift>
 80105d2:	4631      	mov	r1, r6
 80105d4:	4682      	mov	sl, r0
 80105d6:	f000 faf5 	bl	8010bc4 <__mcmp>
 80105da:	2800      	cmp	r0, #0
 80105dc:	dc96      	bgt.n	801050c <_dtoa_r+0xabc>
 80105de:	d102      	bne.n	80105e6 <_dtoa_r+0xb96>
 80105e0:	f019 0f01 	tst.w	r9, #1
 80105e4:	d192      	bne.n	801050c <_dtoa_r+0xabc>
 80105e6:	462b      	mov	r3, r5
 80105e8:	461d      	mov	r5, r3
 80105ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105ee:	2a30      	cmp	r2, #48	; 0x30
 80105f0:	d0fa      	beq.n	80105e8 <_dtoa_r+0xb98>
 80105f2:	e6dd      	b.n	80103b0 <_dtoa_r+0x960>
 80105f4:	9a00      	ldr	r2, [sp, #0]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d189      	bne.n	801050e <_dtoa_r+0xabe>
 80105fa:	f10b 0b01 	add.w	fp, fp, #1
 80105fe:	2331      	movs	r3, #49	; 0x31
 8010600:	e796      	b.n	8010530 <_dtoa_r+0xae0>
 8010602:	4b0a      	ldr	r3, [pc, #40]	; (801062c <_dtoa_r+0xbdc>)
 8010604:	f7ff ba99 	b.w	800fb3a <_dtoa_r+0xea>
 8010608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801060a:	2b00      	cmp	r3, #0
 801060c:	f47f aa6d 	bne.w	800faea <_dtoa_r+0x9a>
 8010610:	4b07      	ldr	r3, [pc, #28]	; (8010630 <_dtoa_r+0xbe0>)
 8010612:	f7ff ba92 	b.w	800fb3a <_dtoa_r+0xea>
 8010616:	9b01      	ldr	r3, [sp, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	dcb5      	bgt.n	8010588 <_dtoa_r+0xb38>
 801061c:	9b07      	ldr	r3, [sp, #28]
 801061e:	2b02      	cmp	r3, #2
 8010620:	f73f aeb1 	bgt.w	8010386 <_dtoa_r+0x936>
 8010624:	e7b0      	b.n	8010588 <_dtoa_r+0xb38>
 8010626:	bf00      	nop
 8010628:	080149f8 	.word	0x080149f8
 801062c:	08014958 	.word	0x08014958
 8010630:	0801497c 	.word	0x0801497c

08010634 <_free_r>:
 8010634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010636:	2900      	cmp	r1, #0
 8010638:	d044      	beq.n	80106c4 <_free_r+0x90>
 801063a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801063e:	9001      	str	r0, [sp, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	f1a1 0404 	sub.w	r4, r1, #4
 8010646:	bfb8      	it	lt
 8010648:	18e4      	addlt	r4, r4, r3
 801064a:	f7fe fb31 	bl	800ecb0 <__malloc_lock>
 801064e:	4a1e      	ldr	r2, [pc, #120]	; (80106c8 <_free_r+0x94>)
 8010650:	9801      	ldr	r0, [sp, #4]
 8010652:	6813      	ldr	r3, [r2, #0]
 8010654:	b933      	cbnz	r3, 8010664 <_free_r+0x30>
 8010656:	6063      	str	r3, [r4, #4]
 8010658:	6014      	str	r4, [r2, #0]
 801065a:	b003      	add	sp, #12
 801065c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010660:	f7fe bb2c 	b.w	800ecbc <__malloc_unlock>
 8010664:	42a3      	cmp	r3, r4
 8010666:	d908      	bls.n	801067a <_free_r+0x46>
 8010668:	6825      	ldr	r5, [r4, #0]
 801066a:	1961      	adds	r1, r4, r5
 801066c:	428b      	cmp	r3, r1
 801066e:	bf01      	itttt	eq
 8010670:	6819      	ldreq	r1, [r3, #0]
 8010672:	685b      	ldreq	r3, [r3, #4]
 8010674:	1949      	addeq	r1, r1, r5
 8010676:	6021      	streq	r1, [r4, #0]
 8010678:	e7ed      	b.n	8010656 <_free_r+0x22>
 801067a:	461a      	mov	r2, r3
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	b10b      	cbz	r3, 8010684 <_free_r+0x50>
 8010680:	42a3      	cmp	r3, r4
 8010682:	d9fa      	bls.n	801067a <_free_r+0x46>
 8010684:	6811      	ldr	r1, [r2, #0]
 8010686:	1855      	adds	r5, r2, r1
 8010688:	42a5      	cmp	r5, r4
 801068a:	d10b      	bne.n	80106a4 <_free_r+0x70>
 801068c:	6824      	ldr	r4, [r4, #0]
 801068e:	4421      	add	r1, r4
 8010690:	1854      	adds	r4, r2, r1
 8010692:	42a3      	cmp	r3, r4
 8010694:	6011      	str	r1, [r2, #0]
 8010696:	d1e0      	bne.n	801065a <_free_r+0x26>
 8010698:	681c      	ldr	r4, [r3, #0]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	6053      	str	r3, [r2, #4]
 801069e:	440c      	add	r4, r1
 80106a0:	6014      	str	r4, [r2, #0]
 80106a2:	e7da      	b.n	801065a <_free_r+0x26>
 80106a4:	d902      	bls.n	80106ac <_free_r+0x78>
 80106a6:	230c      	movs	r3, #12
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	e7d6      	b.n	801065a <_free_r+0x26>
 80106ac:	6825      	ldr	r5, [r4, #0]
 80106ae:	1961      	adds	r1, r4, r5
 80106b0:	428b      	cmp	r3, r1
 80106b2:	bf04      	itt	eq
 80106b4:	6819      	ldreq	r1, [r3, #0]
 80106b6:	685b      	ldreq	r3, [r3, #4]
 80106b8:	6063      	str	r3, [r4, #4]
 80106ba:	bf04      	itt	eq
 80106bc:	1949      	addeq	r1, r1, r5
 80106be:	6021      	streq	r1, [r4, #0]
 80106c0:	6054      	str	r4, [r2, #4]
 80106c2:	e7ca      	b.n	801065a <_free_r+0x26>
 80106c4:	b003      	add	sp, #12
 80106c6:	bd30      	pop	{r4, r5, pc}
 80106c8:	200008f0 	.word	0x200008f0

080106cc <_Balloc>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	69c6      	ldr	r6, [r0, #28]
 80106d0:	4604      	mov	r4, r0
 80106d2:	460d      	mov	r5, r1
 80106d4:	b976      	cbnz	r6, 80106f4 <_Balloc+0x28>
 80106d6:	2010      	movs	r0, #16
 80106d8:	f7fe fa3a 	bl	800eb50 <malloc>
 80106dc:	4602      	mov	r2, r0
 80106de:	61e0      	str	r0, [r4, #28]
 80106e0:	b920      	cbnz	r0, 80106ec <_Balloc+0x20>
 80106e2:	4b18      	ldr	r3, [pc, #96]	; (8010744 <_Balloc+0x78>)
 80106e4:	4818      	ldr	r0, [pc, #96]	; (8010748 <_Balloc+0x7c>)
 80106e6:	216b      	movs	r1, #107	; 0x6b
 80106e8:	f7fe fa14 	bl	800eb14 <__assert_func>
 80106ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106f0:	6006      	str	r6, [r0, #0]
 80106f2:	60c6      	str	r6, [r0, #12]
 80106f4:	69e6      	ldr	r6, [r4, #28]
 80106f6:	68f3      	ldr	r3, [r6, #12]
 80106f8:	b183      	cbz	r3, 801071c <_Balloc+0x50>
 80106fa:	69e3      	ldr	r3, [r4, #28]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010702:	b9b8      	cbnz	r0, 8010734 <_Balloc+0x68>
 8010704:	2101      	movs	r1, #1
 8010706:	fa01 f605 	lsl.w	r6, r1, r5
 801070a:	1d72      	adds	r2, r6, #5
 801070c:	0092      	lsls	r2, r2, #2
 801070e:	4620      	mov	r0, r4
 8010710:	f000 fe24 	bl	801135c <_calloc_r>
 8010714:	b160      	cbz	r0, 8010730 <_Balloc+0x64>
 8010716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801071a:	e00e      	b.n	801073a <_Balloc+0x6e>
 801071c:	2221      	movs	r2, #33	; 0x21
 801071e:	2104      	movs	r1, #4
 8010720:	4620      	mov	r0, r4
 8010722:	f000 fe1b 	bl	801135c <_calloc_r>
 8010726:	69e3      	ldr	r3, [r4, #28]
 8010728:	60f0      	str	r0, [r6, #12]
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1e4      	bne.n	80106fa <_Balloc+0x2e>
 8010730:	2000      	movs	r0, #0
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	6802      	ldr	r2, [r0, #0]
 8010736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801073a:	2300      	movs	r3, #0
 801073c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010740:	e7f7      	b.n	8010732 <_Balloc+0x66>
 8010742:	bf00      	nop
 8010744:	08014989 	.word	0x08014989
 8010748:	08014a09 	.word	0x08014a09

0801074c <_Bfree>:
 801074c:	b570      	push	{r4, r5, r6, lr}
 801074e:	69c6      	ldr	r6, [r0, #28]
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	b976      	cbnz	r6, 8010774 <_Bfree+0x28>
 8010756:	2010      	movs	r0, #16
 8010758:	f7fe f9fa 	bl	800eb50 <malloc>
 801075c:	4602      	mov	r2, r0
 801075e:	61e8      	str	r0, [r5, #28]
 8010760:	b920      	cbnz	r0, 801076c <_Bfree+0x20>
 8010762:	4b09      	ldr	r3, [pc, #36]	; (8010788 <_Bfree+0x3c>)
 8010764:	4809      	ldr	r0, [pc, #36]	; (801078c <_Bfree+0x40>)
 8010766:	218f      	movs	r1, #143	; 0x8f
 8010768:	f7fe f9d4 	bl	800eb14 <__assert_func>
 801076c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010770:	6006      	str	r6, [r0, #0]
 8010772:	60c6      	str	r6, [r0, #12]
 8010774:	b13c      	cbz	r4, 8010786 <_Bfree+0x3a>
 8010776:	69eb      	ldr	r3, [r5, #28]
 8010778:	6862      	ldr	r2, [r4, #4]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010780:	6021      	str	r1, [r4, #0]
 8010782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	08014989 	.word	0x08014989
 801078c:	08014a09 	.word	0x08014a09

08010790 <__multadd>:
 8010790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	690d      	ldr	r5, [r1, #16]
 8010796:	4607      	mov	r7, r0
 8010798:	460c      	mov	r4, r1
 801079a:	461e      	mov	r6, r3
 801079c:	f101 0c14 	add.w	ip, r1, #20
 80107a0:	2000      	movs	r0, #0
 80107a2:	f8dc 3000 	ldr.w	r3, [ip]
 80107a6:	b299      	uxth	r1, r3
 80107a8:	fb02 6101 	mla	r1, r2, r1, r6
 80107ac:	0c1e      	lsrs	r6, r3, #16
 80107ae:	0c0b      	lsrs	r3, r1, #16
 80107b0:	fb02 3306 	mla	r3, r2, r6, r3
 80107b4:	b289      	uxth	r1, r1
 80107b6:	3001      	adds	r0, #1
 80107b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107bc:	4285      	cmp	r5, r0
 80107be:	f84c 1b04 	str.w	r1, [ip], #4
 80107c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107c6:	dcec      	bgt.n	80107a2 <__multadd+0x12>
 80107c8:	b30e      	cbz	r6, 801080e <__multadd+0x7e>
 80107ca:	68a3      	ldr	r3, [r4, #8]
 80107cc:	42ab      	cmp	r3, r5
 80107ce:	dc19      	bgt.n	8010804 <__multadd+0x74>
 80107d0:	6861      	ldr	r1, [r4, #4]
 80107d2:	4638      	mov	r0, r7
 80107d4:	3101      	adds	r1, #1
 80107d6:	f7ff ff79 	bl	80106cc <_Balloc>
 80107da:	4680      	mov	r8, r0
 80107dc:	b928      	cbnz	r0, 80107ea <__multadd+0x5a>
 80107de:	4602      	mov	r2, r0
 80107e0:	4b0c      	ldr	r3, [pc, #48]	; (8010814 <__multadd+0x84>)
 80107e2:	480d      	ldr	r0, [pc, #52]	; (8010818 <__multadd+0x88>)
 80107e4:	21ba      	movs	r1, #186	; 0xba
 80107e6:	f7fe f995 	bl	800eb14 <__assert_func>
 80107ea:	6922      	ldr	r2, [r4, #16]
 80107ec:	3202      	adds	r2, #2
 80107ee:	f104 010c 	add.w	r1, r4, #12
 80107f2:	0092      	lsls	r2, r2, #2
 80107f4:	300c      	adds	r0, #12
 80107f6:	f7ff f88e 	bl	800f916 <memcpy>
 80107fa:	4621      	mov	r1, r4
 80107fc:	4638      	mov	r0, r7
 80107fe:	f7ff ffa5 	bl	801074c <_Bfree>
 8010802:	4644      	mov	r4, r8
 8010804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010808:	3501      	adds	r5, #1
 801080a:	615e      	str	r6, [r3, #20]
 801080c:	6125      	str	r5, [r4, #16]
 801080e:	4620      	mov	r0, r4
 8010810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010814:	080149f8 	.word	0x080149f8
 8010818:	08014a09 	.word	0x08014a09

0801081c <__hi0bits>:
 801081c:	0c03      	lsrs	r3, r0, #16
 801081e:	041b      	lsls	r3, r3, #16
 8010820:	b9d3      	cbnz	r3, 8010858 <__hi0bits+0x3c>
 8010822:	0400      	lsls	r0, r0, #16
 8010824:	2310      	movs	r3, #16
 8010826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801082a:	bf04      	itt	eq
 801082c:	0200      	lsleq	r0, r0, #8
 801082e:	3308      	addeq	r3, #8
 8010830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010834:	bf04      	itt	eq
 8010836:	0100      	lsleq	r0, r0, #4
 8010838:	3304      	addeq	r3, #4
 801083a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801083e:	bf04      	itt	eq
 8010840:	0080      	lsleq	r0, r0, #2
 8010842:	3302      	addeq	r3, #2
 8010844:	2800      	cmp	r0, #0
 8010846:	db05      	blt.n	8010854 <__hi0bits+0x38>
 8010848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801084c:	f103 0301 	add.w	r3, r3, #1
 8010850:	bf08      	it	eq
 8010852:	2320      	moveq	r3, #32
 8010854:	4618      	mov	r0, r3
 8010856:	4770      	bx	lr
 8010858:	2300      	movs	r3, #0
 801085a:	e7e4      	b.n	8010826 <__hi0bits+0xa>

0801085c <__lo0bits>:
 801085c:	6803      	ldr	r3, [r0, #0]
 801085e:	f013 0207 	ands.w	r2, r3, #7
 8010862:	d00c      	beq.n	801087e <__lo0bits+0x22>
 8010864:	07d9      	lsls	r1, r3, #31
 8010866:	d422      	bmi.n	80108ae <__lo0bits+0x52>
 8010868:	079a      	lsls	r2, r3, #30
 801086a:	bf49      	itett	mi
 801086c:	085b      	lsrmi	r3, r3, #1
 801086e:	089b      	lsrpl	r3, r3, #2
 8010870:	6003      	strmi	r3, [r0, #0]
 8010872:	2201      	movmi	r2, #1
 8010874:	bf5c      	itt	pl
 8010876:	6003      	strpl	r3, [r0, #0]
 8010878:	2202      	movpl	r2, #2
 801087a:	4610      	mov	r0, r2
 801087c:	4770      	bx	lr
 801087e:	b299      	uxth	r1, r3
 8010880:	b909      	cbnz	r1, 8010886 <__lo0bits+0x2a>
 8010882:	0c1b      	lsrs	r3, r3, #16
 8010884:	2210      	movs	r2, #16
 8010886:	b2d9      	uxtb	r1, r3
 8010888:	b909      	cbnz	r1, 801088e <__lo0bits+0x32>
 801088a:	3208      	adds	r2, #8
 801088c:	0a1b      	lsrs	r3, r3, #8
 801088e:	0719      	lsls	r1, r3, #28
 8010890:	bf04      	itt	eq
 8010892:	091b      	lsreq	r3, r3, #4
 8010894:	3204      	addeq	r2, #4
 8010896:	0799      	lsls	r1, r3, #30
 8010898:	bf04      	itt	eq
 801089a:	089b      	lsreq	r3, r3, #2
 801089c:	3202      	addeq	r2, #2
 801089e:	07d9      	lsls	r1, r3, #31
 80108a0:	d403      	bmi.n	80108aa <__lo0bits+0x4e>
 80108a2:	085b      	lsrs	r3, r3, #1
 80108a4:	f102 0201 	add.w	r2, r2, #1
 80108a8:	d003      	beq.n	80108b2 <__lo0bits+0x56>
 80108aa:	6003      	str	r3, [r0, #0]
 80108ac:	e7e5      	b.n	801087a <__lo0bits+0x1e>
 80108ae:	2200      	movs	r2, #0
 80108b0:	e7e3      	b.n	801087a <__lo0bits+0x1e>
 80108b2:	2220      	movs	r2, #32
 80108b4:	e7e1      	b.n	801087a <__lo0bits+0x1e>
	...

080108b8 <__i2b>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	460c      	mov	r4, r1
 80108bc:	2101      	movs	r1, #1
 80108be:	f7ff ff05 	bl	80106cc <_Balloc>
 80108c2:	4602      	mov	r2, r0
 80108c4:	b928      	cbnz	r0, 80108d2 <__i2b+0x1a>
 80108c6:	4b05      	ldr	r3, [pc, #20]	; (80108dc <__i2b+0x24>)
 80108c8:	4805      	ldr	r0, [pc, #20]	; (80108e0 <__i2b+0x28>)
 80108ca:	f240 1145 	movw	r1, #325	; 0x145
 80108ce:	f7fe f921 	bl	800eb14 <__assert_func>
 80108d2:	2301      	movs	r3, #1
 80108d4:	6144      	str	r4, [r0, #20]
 80108d6:	6103      	str	r3, [r0, #16]
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	bf00      	nop
 80108dc:	080149f8 	.word	0x080149f8
 80108e0:	08014a09 	.word	0x08014a09

080108e4 <__multiply>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	4691      	mov	r9, r2
 80108ea:	690a      	ldr	r2, [r1, #16]
 80108ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	bfb8      	it	lt
 80108f4:	460b      	movlt	r3, r1
 80108f6:	460c      	mov	r4, r1
 80108f8:	bfbc      	itt	lt
 80108fa:	464c      	movlt	r4, r9
 80108fc:	4699      	movlt	r9, r3
 80108fe:	6927      	ldr	r7, [r4, #16]
 8010900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010904:	68a3      	ldr	r3, [r4, #8]
 8010906:	6861      	ldr	r1, [r4, #4]
 8010908:	eb07 060a 	add.w	r6, r7, sl
 801090c:	42b3      	cmp	r3, r6
 801090e:	b085      	sub	sp, #20
 8010910:	bfb8      	it	lt
 8010912:	3101      	addlt	r1, #1
 8010914:	f7ff feda 	bl	80106cc <_Balloc>
 8010918:	b930      	cbnz	r0, 8010928 <__multiply+0x44>
 801091a:	4602      	mov	r2, r0
 801091c:	4b44      	ldr	r3, [pc, #272]	; (8010a30 <__multiply+0x14c>)
 801091e:	4845      	ldr	r0, [pc, #276]	; (8010a34 <__multiply+0x150>)
 8010920:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010924:	f7fe f8f6 	bl	800eb14 <__assert_func>
 8010928:	f100 0514 	add.w	r5, r0, #20
 801092c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010930:	462b      	mov	r3, r5
 8010932:	2200      	movs	r2, #0
 8010934:	4543      	cmp	r3, r8
 8010936:	d321      	bcc.n	801097c <__multiply+0x98>
 8010938:	f104 0314 	add.w	r3, r4, #20
 801093c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010940:	f109 0314 	add.w	r3, r9, #20
 8010944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010948:	9202      	str	r2, [sp, #8]
 801094a:	1b3a      	subs	r2, r7, r4
 801094c:	3a15      	subs	r2, #21
 801094e:	f022 0203 	bic.w	r2, r2, #3
 8010952:	3204      	adds	r2, #4
 8010954:	f104 0115 	add.w	r1, r4, #21
 8010958:	428f      	cmp	r7, r1
 801095a:	bf38      	it	cc
 801095c:	2204      	movcc	r2, #4
 801095e:	9201      	str	r2, [sp, #4]
 8010960:	9a02      	ldr	r2, [sp, #8]
 8010962:	9303      	str	r3, [sp, #12]
 8010964:	429a      	cmp	r2, r3
 8010966:	d80c      	bhi.n	8010982 <__multiply+0x9e>
 8010968:	2e00      	cmp	r6, #0
 801096a:	dd03      	ble.n	8010974 <__multiply+0x90>
 801096c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010970:	2b00      	cmp	r3, #0
 8010972:	d05b      	beq.n	8010a2c <__multiply+0x148>
 8010974:	6106      	str	r6, [r0, #16]
 8010976:	b005      	add	sp, #20
 8010978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097c:	f843 2b04 	str.w	r2, [r3], #4
 8010980:	e7d8      	b.n	8010934 <__multiply+0x50>
 8010982:	f8b3 a000 	ldrh.w	sl, [r3]
 8010986:	f1ba 0f00 	cmp.w	sl, #0
 801098a:	d024      	beq.n	80109d6 <__multiply+0xf2>
 801098c:	f104 0e14 	add.w	lr, r4, #20
 8010990:	46a9      	mov	r9, r5
 8010992:	f04f 0c00 	mov.w	ip, #0
 8010996:	f85e 2b04 	ldr.w	r2, [lr], #4
 801099a:	f8d9 1000 	ldr.w	r1, [r9]
 801099e:	fa1f fb82 	uxth.w	fp, r2
 80109a2:	b289      	uxth	r1, r1
 80109a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80109a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109ac:	f8d9 2000 	ldr.w	r2, [r9]
 80109b0:	4461      	add	r1, ip
 80109b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80109ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109be:	b289      	uxth	r1, r1
 80109c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109c4:	4577      	cmp	r7, lr
 80109c6:	f849 1b04 	str.w	r1, [r9], #4
 80109ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109ce:	d8e2      	bhi.n	8010996 <__multiply+0xb2>
 80109d0:	9a01      	ldr	r2, [sp, #4]
 80109d2:	f845 c002 	str.w	ip, [r5, r2]
 80109d6:	9a03      	ldr	r2, [sp, #12]
 80109d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109dc:	3304      	adds	r3, #4
 80109de:	f1b9 0f00 	cmp.w	r9, #0
 80109e2:	d021      	beq.n	8010a28 <__multiply+0x144>
 80109e4:	6829      	ldr	r1, [r5, #0]
 80109e6:	f104 0c14 	add.w	ip, r4, #20
 80109ea:	46ae      	mov	lr, r5
 80109ec:	f04f 0a00 	mov.w	sl, #0
 80109f0:	f8bc b000 	ldrh.w	fp, [ip]
 80109f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109f8:	fb09 220b 	mla	r2, r9, fp, r2
 80109fc:	4452      	add	r2, sl
 80109fe:	b289      	uxth	r1, r1
 8010a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a04:	f84e 1b04 	str.w	r1, [lr], #4
 8010a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a10:	f8be 1000 	ldrh.w	r1, [lr]
 8010a14:	fb09 110a 	mla	r1, r9, sl, r1
 8010a18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010a1c:	4567      	cmp	r7, ip
 8010a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a22:	d8e5      	bhi.n	80109f0 <__multiply+0x10c>
 8010a24:	9a01      	ldr	r2, [sp, #4]
 8010a26:	50a9      	str	r1, [r5, r2]
 8010a28:	3504      	adds	r5, #4
 8010a2a:	e799      	b.n	8010960 <__multiply+0x7c>
 8010a2c:	3e01      	subs	r6, #1
 8010a2e:	e79b      	b.n	8010968 <__multiply+0x84>
 8010a30:	080149f8 	.word	0x080149f8
 8010a34:	08014a09 	.word	0x08014a09

08010a38 <__pow5mult>:
 8010a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a3c:	4615      	mov	r5, r2
 8010a3e:	f012 0203 	ands.w	r2, r2, #3
 8010a42:	4606      	mov	r6, r0
 8010a44:	460f      	mov	r7, r1
 8010a46:	d007      	beq.n	8010a58 <__pow5mult+0x20>
 8010a48:	4c25      	ldr	r4, [pc, #148]	; (8010ae0 <__pow5mult+0xa8>)
 8010a4a:	3a01      	subs	r2, #1
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a52:	f7ff fe9d 	bl	8010790 <__multadd>
 8010a56:	4607      	mov	r7, r0
 8010a58:	10ad      	asrs	r5, r5, #2
 8010a5a:	d03d      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010a5c:	69f4      	ldr	r4, [r6, #28]
 8010a5e:	b97c      	cbnz	r4, 8010a80 <__pow5mult+0x48>
 8010a60:	2010      	movs	r0, #16
 8010a62:	f7fe f875 	bl	800eb50 <malloc>
 8010a66:	4602      	mov	r2, r0
 8010a68:	61f0      	str	r0, [r6, #28]
 8010a6a:	b928      	cbnz	r0, 8010a78 <__pow5mult+0x40>
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <__pow5mult+0xac>)
 8010a6e:	481e      	ldr	r0, [pc, #120]	; (8010ae8 <__pow5mult+0xb0>)
 8010a70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010a74:	f7fe f84e 	bl	800eb14 <__assert_func>
 8010a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a7c:	6004      	str	r4, [r0, #0]
 8010a7e:	60c4      	str	r4, [r0, #12]
 8010a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a88:	b94c      	cbnz	r4, 8010a9e <__pow5mult+0x66>
 8010a8a:	f240 2171 	movw	r1, #625	; 0x271
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff ff12 	bl	80108b8 <__i2b>
 8010a94:	2300      	movs	r3, #0
 8010a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	6003      	str	r3, [r0, #0]
 8010a9e:	f04f 0900 	mov.w	r9, #0
 8010aa2:	07eb      	lsls	r3, r5, #31
 8010aa4:	d50a      	bpl.n	8010abc <__pow5mult+0x84>
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f7ff ff1a 	bl	80108e4 <__multiply>
 8010ab0:	4639      	mov	r1, r7
 8010ab2:	4680      	mov	r8, r0
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f7ff fe49 	bl	801074c <_Bfree>
 8010aba:	4647      	mov	r7, r8
 8010abc:	106d      	asrs	r5, r5, #1
 8010abe:	d00b      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010ac0:	6820      	ldr	r0, [r4, #0]
 8010ac2:	b938      	cbnz	r0, 8010ad4 <__pow5mult+0x9c>
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7ff ff0b 	bl	80108e4 <__multiply>
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	f8c0 9000 	str.w	r9, [r0]
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	e7e4      	b.n	8010aa2 <__pow5mult+0x6a>
 8010ad8:	4638      	mov	r0, r7
 8010ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ade:	bf00      	nop
 8010ae0:	08014b58 	.word	0x08014b58
 8010ae4:	08014989 	.word	0x08014989
 8010ae8:	08014a09 	.word	0x08014a09

08010aec <__lshift>:
 8010aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	460c      	mov	r4, r1
 8010af2:	6849      	ldr	r1, [r1, #4]
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010afa:	68a3      	ldr	r3, [r4, #8]
 8010afc:	4607      	mov	r7, r0
 8010afe:	4691      	mov	r9, r2
 8010b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b04:	f108 0601 	add.w	r6, r8, #1
 8010b08:	42b3      	cmp	r3, r6
 8010b0a:	db0b      	blt.n	8010b24 <__lshift+0x38>
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7ff fddd 	bl	80106cc <_Balloc>
 8010b12:	4605      	mov	r5, r0
 8010b14:	b948      	cbnz	r0, 8010b2a <__lshift+0x3e>
 8010b16:	4602      	mov	r2, r0
 8010b18:	4b28      	ldr	r3, [pc, #160]	; (8010bbc <__lshift+0xd0>)
 8010b1a:	4829      	ldr	r0, [pc, #164]	; (8010bc0 <__lshift+0xd4>)
 8010b1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010b20:	f7fd fff8 	bl	800eb14 <__assert_func>
 8010b24:	3101      	adds	r1, #1
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	e7ee      	b.n	8010b08 <__lshift+0x1c>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f100 0114 	add.w	r1, r0, #20
 8010b30:	f100 0210 	add.w	r2, r0, #16
 8010b34:	4618      	mov	r0, r3
 8010b36:	4553      	cmp	r3, sl
 8010b38:	db33      	blt.n	8010ba2 <__lshift+0xb6>
 8010b3a:	6920      	ldr	r0, [r4, #16]
 8010b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b40:	f104 0314 	add.w	r3, r4, #20
 8010b44:	f019 091f 	ands.w	r9, r9, #31
 8010b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b50:	d02b      	beq.n	8010baa <__lshift+0xbe>
 8010b52:	f1c9 0e20 	rsb	lr, r9, #32
 8010b56:	468a      	mov	sl, r1
 8010b58:	2200      	movs	r2, #0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8010b60:	4310      	orrs	r0, r2
 8010b62:	f84a 0b04 	str.w	r0, [sl], #4
 8010b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b6a:	459c      	cmp	ip, r3
 8010b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b70:	d8f3      	bhi.n	8010b5a <__lshift+0x6e>
 8010b72:	ebac 0304 	sub.w	r3, ip, r4
 8010b76:	3b15      	subs	r3, #21
 8010b78:	f023 0303 	bic.w	r3, r3, #3
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	f104 0015 	add.w	r0, r4, #21
 8010b82:	4584      	cmp	ip, r0
 8010b84:	bf38      	it	cc
 8010b86:	2304      	movcc	r3, #4
 8010b88:	50ca      	str	r2, [r1, r3]
 8010b8a:	b10a      	cbz	r2, 8010b90 <__lshift+0xa4>
 8010b8c:	f108 0602 	add.w	r6, r8, #2
 8010b90:	3e01      	subs	r6, #1
 8010b92:	4638      	mov	r0, r7
 8010b94:	612e      	str	r6, [r5, #16]
 8010b96:	4621      	mov	r1, r4
 8010b98:	f7ff fdd8 	bl	801074c <_Bfree>
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	e7c5      	b.n	8010b36 <__lshift+0x4a>
 8010baa:	3904      	subs	r1, #4
 8010bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bb4:	459c      	cmp	ip, r3
 8010bb6:	d8f9      	bhi.n	8010bac <__lshift+0xc0>
 8010bb8:	e7ea      	b.n	8010b90 <__lshift+0xa4>
 8010bba:	bf00      	nop
 8010bbc:	080149f8 	.word	0x080149f8
 8010bc0:	08014a09 	.word	0x08014a09

08010bc4 <__mcmp>:
 8010bc4:	b530      	push	{r4, r5, lr}
 8010bc6:	6902      	ldr	r2, [r0, #16]
 8010bc8:	690c      	ldr	r4, [r1, #16]
 8010bca:	1b12      	subs	r2, r2, r4
 8010bcc:	d10e      	bne.n	8010bec <__mcmp+0x28>
 8010bce:	f100 0314 	add.w	r3, r0, #20
 8010bd2:	3114      	adds	r1, #20
 8010bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010be4:	42a5      	cmp	r5, r4
 8010be6:	d003      	beq.n	8010bf0 <__mcmp+0x2c>
 8010be8:	d305      	bcc.n	8010bf6 <__mcmp+0x32>
 8010bea:	2201      	movs	r2, #1
 8010bec:	4610      	mov	r0, r2
 8010bee:	bd30      	pop	{r4, r5, pc}
 8010bf0:	4283      	cmp	r3, r0
 8010bf2:	d3f3      	bcc.n	8010bdc <__mcmp+0x18>
 8010bf4:	e7fa      	b.n	8010bec <__mcmp+0x28>
 8010bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfa:	e7f7      	b.n	8010bec <__mcmp+0x28>

08010bfc <__mdiff>:
 8010bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	460c      	mov	r4, r1
 8010c02:	4606      	mov	r6, r0
 8010c04:	4611      	mov	r1, r2
 8010c06:	4620      	mov	r0, r4
 8010c08:	4690      	mov	r8, r2
 8010c0a:	f7ff ffdb 	bl	8010bc4 <__mcmp>
 8010c0e:	1e05      	subs	r5, r0, #0
 8010c10:	d110      	bne.n	8010c34 <__mdiff+0x38>
 8010c12:	4629      	mov	r1, r5
 8010c14:	4630      	mov	r0, r6
 8010c16:	f7ff fd59 	bl	80106cc <_Balloc>
 8010c1a:	b930      	cbnz	r0, 8010c2a <__mdiff+0x2e>
 8010c1c:	4b3a      	ldr	r3, [pc, #232]	; (8010d08 <__mdiff+0x10c>)
 8010c1e:	4602      	mov	r2, r0
 8010c20:	f240 2137 	movw	r1, #567	; 0x237
 8010c24:	4839      	ldr	r0, [pc, #228]	; (8010d0c <__mdiff+0x110>)
 8010c26:	f7fd ff75 	bl	800eb14 <__assert_func>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c34:	bfa4      	itt	ge
 8010c36:	4643      	movge	r3, r8
 8010c38:	46a0      	movge	r8, r4
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c40:	bfa6      	itte	ge
 8010c42:	461c      	movge	r4, r3
 8010c44:	2500      	movge	r5, #0
 8010c46:	2501      	movlt	r5, #1
 8010c48:	f7ff fd40 	bl	80106cc <_Balloc>
 8010c4c:	b920      	cbnz	r0, 8010c58 <__mdiff+0x5c>
 8010c4e:	4b2e      	ldr	r3, [pc, #184]	; (8010d08 <__mdiff+0x10c>)
 8010c50:	4602      	mov	r2, r0
 8010c52:	f240 2145 	movw	r1, #581	; 0x245
 8010c56:	e7e5      	b.n	8010c24 <__mdiff+0x28>
 8010c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c5c:	6926      	ldr	r6, [r4, #16]
 8010c5e:	60c5      	str	r5, [r0, #12]
 8010c60:	f104 0914 	add.w	r9, r4, #20
 8010c64:	f108 0514 	add.w	r5, r8, #20
 8010c68:	f100 0e14 	add.w	lr, r0, #20
 8010c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c74:	f108 0210 	add.w	r2, r8, #16
 8010c78:	46f2      	mov	sl, lr
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c84:	fa11 f88b 	uxtah	r8, r1, fp
 8010c88:	b299      	uxth	r1, r3
 8010c8a:	0c1b      	lsrs	r3, r3, #16
 8010c8c:	eba8 0801 	sub.w	r8, r8, r1
 8010c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c98:	fa1f f888 	uxth.w	r8, r8
 8010c9c:	1419      	asrs	r1, r3, #16
 8010c9e:	454e      	cmp	r6, r9
 8010ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8010ca8:	d8e8      	bhi.n	8010c7c <__mdiff+0x80>
 8010caa:	1b33      	subs	r3, r6, r4
 8010cac:	3b15      	subs	r3, #21
 8010cae:	f023 0303 	bic.w	r3, r3, #3
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	3415      	adds	r4, #21
 8010cb6:	42a6      	cmp	r6, r4
 8010cb8:	bf38      	it	cc
 8010cba:	2304      	movcc	r3, #4
 8010cbc:	441d      	add	r5, r3
 8010cbe:	4473      	add	r3, lr
 8010cc0:	469e      	mov	lr, r3
 8010cc2:	462e      	mov	r6, r5
 8010cc4:	4566      	cmp	r6, ip
 8010cc6:	d30e      	bcc.n	8010ce6 <__mdiff+0xea>
 8010cc8:	f10c 0203 	add.w	r2, ip, #3
 8010ccc:	1b52      	subs	r2, r2, r5
 8010cce:	f022 0203 	bic.w	r2, r2, #3
 8010cd2:	3d03      	subs	r5, #3
 8010cd4:	45ac      	cmp	ip, r5
 8010cd6:	bf38      	it	cc
 8010cd8:	2200      	movcc	r2, #0
 8010cda:	4413      	add	r3, r2
 8010cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ce0:	b17a      	cbz	r2, 8010d02 <__mdiff+0x106>
 8010ce2:	6107      	str	r7, [r0, #16]
 8010ce4:	e7a4      	b.n	8010c30 <__mdiff+0x34>
 8010ce6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010cea:	fa11 f288 	uxtah	r2, r1, r8
 8010cee:	1414      	asrs	r4, r2, #16
 8010cf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cf4:	b292      	uxth	r2, r2
 8010cf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8010cfe:	1421      	asrs	r1, r4, #16
 8010d00:	e7e0      	b.n	8010cc4 <__mdiff+0xc8>
 8010d02:	3f01      	subs	r7, #1
 8010d04:	e7ea      	b.n	8010cdc <__mdiff+0xe0>
 8010d06:	bf00      	nop
 8010d08:	080149f8 	.word	0x080149f8
 8010d0c:	08014a09 	.word	0x08014a09

08010d10 <__d2b>:
 8010d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d14:	460f      	mov	r7, r1
 8010d16:	2101      	movs	r1, #1
 8010d18:	ec59 8b10 	vmov	r8, r9, d0
 8010d1c:	4616      	mov	r6, r2
 8010d1e:	f7ff fcd5 	bl	80106cc <_Balloc>
 8010d22:	4604      	mov	r4, r0
 8010d24:	b930      	cbnz	r0, 8010d34 <__d2b+0x24>
 8010d26:	4602      	mov	r2, r0
 8010d28:	4b24      	ldr	r3, [pc, #144]	; (8010dbc <__d2b+0xac>)
 8010d2a:	4825      	ldr	r0, [pc, #148]	; (8010dc0 <__d2b+0xb0>)
 8010d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8010d30:	f7fd fef0 	bl	800eb14 <__assert_func>
 8010d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d3c:	bb2d      	cbnz	r5, 8010d8a <__d2b+0x7a>
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	f1b8 0300 	subs.w	r3, r8, #0
 8010d44:	d026      	beq.n	8010d94 <__d2b+0x84>
 8010d46:	4668      	mov	r0, sp
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	f7ff fd87 	bl	801085c <__lo0bits>
 8010d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d52:	b1e8      	cbz	r0, 8010d90 <__d2b+0x80>
 8010d54:	f1c0 0320 	rsb	r3, r0, #32
 8010d58:	fa02 f303 	lsl.w	r3, r2, r3
 8010d5c:	430b      	orrs	r3, r1
 8010d5e:	40c2      	lsrs	r2, r0
 8010d60:	6163      	str	r3, [r4, #20]
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	9b01      	ldr	r3, [sp, #4]
 8010d66:	61a3      	str	r3, [r4, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bf14      	ite	ne
 8010d6c:	2202      	movne	r2, #2
 8010d6e:	2201      	moveq	r2, #1
 8010d70:	6122      	str	r2, [r4, #16]
 8010d72:	b1bd      	cbz	r5, 8010da4 <__d2b+0x94>
 8010d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d78:	4405      	add	r5, r0
 8010d7a:	603d      	str	r5, [r7, #0]
 8010d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d80:	6030      	str	r0, [r6, #0]
 8010d82:	4620      	mov	r0, r4
 8010d84:	b003      	add	sp, #12
 8010d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d8e:	e7d6      	b.n	8010d3e <__d2b+0x2e>
 8010d90:	6161      	str	r1, [r4, #20]
 8010d92:	e7e7      	b.n	8010d64 <__d2b+0x54>
 8010d94:	a801      	add	r0, sp, #4
 8010d96:	f7ff fd61 	bl	801085c <__lo0bits>
 8010d9a:	9b01      	ldr	r3, [sp, #4]
 8010d9c:	6163      	str	r3, [r4, #20]
 8010d9e:	3020      	adds	r0, #32
 8010da0:	2201      	movs	r2, #1
 8010da2:	e7e5      	b.n	8010d70 <__d2b+0x60>
 8010da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010dac:	6038      	str	r0, [r7, #0]
 8010dae:	6918      	ldr	r0, [r3, #16]
 8010db0:	f7ff fd34 	bl	801081c <__hi0bits>
 8010db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010db8:	e7e2      	b.n	8010d80 <__d2b+0x70>
 8010dba:	bf00      	nop
 8010dbc:	080149f8 	.word	0x080149f8
 8010dc0:	08014a09 	.word	0x08014a09

08010dc4 <__sfputc_r>:
 8010dc4:	6893      	ldr	r3, [r2, #8]
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	b410      	push	{r4}
 8010dcc:	6093      	str	r3, [r2, #8]
 8010dce:	da08      	bge.n	8010de2 <__sfputc_r+0x1e>
 8010dd0:	6994      	ldr	r4, [r2, #24]
 8010dd2:	42a3      	cmp	r3, r4
 8010dd4:	db01      	blt.n	8010dda <__sfputc_r+0x16>
 8010dd6:	290a      	cmp	r1, #10
 8010dd8:	d103      	bne.n	8010de2 <__sfputc_r+0x1e>
 8010dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dde:	f000 b9e3 	b.w	80111a8 <__swbuf_r>
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	1c58      	adds	r0, r3, #1
 8010de6:	6010      	str	r0, [r2, #0]
 8010de8:	7019      	strb	r1, [r3, #0]
 8010dea:	4608      	mov	r0, r1
 8010dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <__sfputs_r>:
 8010df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4614      	mov	r4, r2
 8010dfa:	18d5      	adds	r5, r2, r3
 8010dfc:	42ac      	cmp	r4, r5
 8010dfe:	d101      	bne.n	8010e04 <__sfputs_r+0x12>
 8010e00:	2000      	movs	r0, #0
 8010e02:	e007      	b.n	8010e14 <__sfputs_r+0x22>
 8010e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e08:	463a      	mov	r2, r7
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	f7ff ffda 	bl	8010dc4 <__sfputc_r>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d1f3      	bne.n	8010dfc <__sfputs_r+0xa>
 8010e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e18 <_vfiprintf_r>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	b09d      	sub	sp, #116	; 0x74
 8010e20:	4614      	mov	r4, r2
 8010e22:	4698      	mov	r8, r3
 8010e24:	4606      	mov	r6, r0
 8010e26:	b118      	cbz	r0, 8010e30 <_vfiprintf_r+0x18>
 8010e28:	6a03      	ldr	r3, [r0, #32]
 8010e2a:	b90b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x18>
 8010e2c:	f7fe fc3e 	bl	800f6ac <__sinit>
 8010e30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e32:	07d9      	lsls	r1, r3, #31
 8010e34:	d405      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e36:	89ab      	ldrh	r3, [r5, #12]
 8010e38:	059a      	lsls	r2, r3, #22
 8010e3a:	d402      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e3e:	f7fe fd68 	bl	800f912 <__retarget_lock_acquire_recursive>
 8010e42:	89ab      	ldrh	r3, [r5, #12]
 8010e44:	071b      	lsls	r3, r3, #28
 8010e46:	d501      	bpl.n	8010e4c <_vfiprintf_r+0x34>
 8010e48:	692b      	ldr	r3, [r5, #16]
 8010e4a:	b99b      	cbnz	r3, 8010e74 <_vfiprintf_r+0x5c>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f000 f9e8 	bl	8011224 <__swsetup_r>
 8010e54:	b170      	cbz	r0, 8010e74 <_vfiprintf_r+0x5c>
 8010e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e58:	07dc      	lsls	r4, r3, #31
 8010e5a:	d504      	bpl.n	8010e66 <_vfiprintf_r+0x4e>
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	b01d      	add	sp, #116	; 0x74
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	89ab      	ldrh	r3, [r5, #12]
 8010e68:	0598      	lsls	r0, r3, #22
 8010e6a:	d4f7      	bmi.n	8010e5c <_vfiprintf_r+0x44>
 8010e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e6e:	f7fe fd51 	bl	800f914 <__retarget_lock_release_recursive>
 8010e72:	e7f3      	b.n	8010e5c <_vfiprintf_r+0x44>
 8010e74:	2300      	movs	r3, #0
 8010e76:	9309      	str	r3, [sp, #36]	; 0x24
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e82:	2330      	movs	r3, #48	; 0x30
 8010e84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011038 <_vfiprintf_r+0x220>
 8010e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e8c:	f04f 0901 	mov.w	r9, #1
 8010e90:	4623      	mov	r3, r4
 8010e92:	469a      	mov	sl, r3
 8010e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e98:	b10a      	cbz	r2, 8010e9e <_vfiprintf_r+0x86>
 8010e9a:	2a25      	cmp	r2, #37	; 0x25
 8010e9c:	d1f9      	bne.n	8010e92 <_vfiprintf_r+0x7a>
 8010e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8010ea2:	d00b      	beq.n	8010ebc <_vfiprintf_r+0xa4>
 8010ea4:	465b      	mov	r3, fp
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7ff ffa1 	bl	8010df2 <__sfputs_r>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	f000 80a9 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010eb8:	445a      	add	r2, fp
 8010eba:	9209      	str	r2, [sp, #36]	; 0x24
 8010ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 80a1 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed0:	f10a 0a01 	add.w	sl, sl, #1
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	9307      	str	r3, [sp, #28]
 8010ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010edc:	931a      	str	r3, [sp, #104]	; 0x68
 8010ede:	4654      	mov	r4, sl
 8010ee0:	2205      	movs	r2, #5
 8010ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee6:	4854      	ldr	r0, [pc, #336]	; (8011038 <_vfiprintf_r+0x220>)
 8010ee8:	f7ef f9a2 	bl	8000230 <memchr>
 8010eec:	9a04      	ldr	r2, [sp, #16]
 8010eee:	b9d8      	cbnz	r0, 8010f28 <_vfiprintf_r+0x110>
 8010ef0:	06d1      	lsls	r1, r2, #27
 8010ef2:	bf44      	itt	mi
 8010ef4:	2320      	movmi	r3, #32
 8010ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010efa:	0713      	lsls	r3, r2, #28
 8010efc:	bf44      	itt	mi
 8010efe:	232b      	movmi	r3, #43	; 0x2b
 8010f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f04:	f89a 3000 	ldrb.w	r3, [sl]
 8010f08:	2b2a      	cmp	r3, #42	; 0x2a
 8010f0a:	d015      	beq.n	8010f38 <_vfiprintf_r+0x120>
 8010f0c:	9a07      	ldr	r2, [sp, #28]
 8010f0e:	4654      	mov	r4, sl
 8010f10:	2000      	movs	r0, #0
 8010f12:	f04f 0c0a 	mov.w	ip, #10
 8010f16:	4621      	mov	r1, r4
 8010f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f1c:	3b30      	subs	r3, #48	; 0x30
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d94d      	bls.n	8010fbe <_vfiprintf_r+0x1a6>
 8010f22:	b1b0      	cbz	r0, 8010f52 <_vfiprintf_r+0x13a>
 8010f24:	9207      	str	r2, [sp, #28]
 8010f26:	e014      	b.n	8010f52 <_vfiprintf_r+0x13a>
 8010f28:	eba0 0308 	sub.w	r3, r0, r8
 8010f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f30:	4313      	orrs	r3, r2
 8010f32:	9304      	str	r3, [sp, #16]
 8010f34:	46a2      	mov	sl, r4
 8010f36:	e7d2      	b.n	8010ede <_vfiprintf_r+0xc6>
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	1d19      	adds	r1, r3, #4
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfbb      	ittet	lt
 8010f44:	425b      	neglt	r3, r3
 8010f46:	f042 0202 	orrlt.w	r2, r2, #2
 8010f4a:	9307      	strge	r3, [sp, #28]
 8010f4c:	9307      	strlt	r3, [sp, #28]
 8010f4e:	bfb8      	it	lt
 8010f50:	9204      	strlt	r2, [sp, #16]
 8010f52:	7823      	ldrb	r3, [r4, #0]
 8010f54:	2b2e      	cmp	r3, #46	; 0x2e
 8010f56:	d10c      	bne.n	8010f72 <_vfiprintf_r+0x15a>
 8010f58:	7863      	ldrb	r3, [r4, #1]
 8010f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f5c:	d134      	bne.n	8010fc8 <_vfiprintf_r+0x1b0>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d1a      	adds	r2, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9203      	str	r2, [sp, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfb8      	it	lt
 8010f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f6e:	3402      	adds	r4, #2
 8010f70:	9305      	str	r3, [sp, #20]
 8010f72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011048 <_vfiprintf_r+0x230>
 8010f76:	7821      	ldrb	r1, [r4, #0]
 8010f78:	2203      	movs	r2, #3
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f7ef f958 	bl	8000230 <memchr>
 8010f80:	b138      	cbz	r0, 8010f92 <_vfiprintf_r+0x17a>
 8010f82:	9b04      	ldr	r3, [sp, #16]
 8010f84:	eba0 000a 	sub.w	r0, r0, sl
 8010f88:	2240      	movs	r2, #64	; 0x40
 8010f8a:	4082      	lsls	r2, r0
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	3401      	adds	r4, #1
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f96:	4829      	ldr	r0, [pc, #164]	; (801103c <_vfiprintf_r+0x224>)
 8010f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f9c:	2206      	movs	r2, #6
 8010f9e:	f7ef f947 	bl	8000230 <memchr>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d03f      	beq.n	8011026 <_vfiprintf_r+0x20e>
 8010fa6:	4b26      	ldr	r3, [pc, #152]	; (8011040 <_vfiprintf_r+0x228>)
 8010fa8:	bb1b      	cbnz	r3, 8010ff2 <_vfiprintf_r+0x1da>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	3307      	adds	r3, #7
 8010fae:	f023 0307 	bic.w	r3, r3, #7
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	9303      	str	r3, [sp, #12]
 8010fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb8:	443b      	add	r3, r7
 8010fba:	9309      	str	r3, [sp, #36]	; 0x24
 8010fbc:	e768      	b.n	8010e90 <_vfiprintf_r+0x78>
 8010fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	e7a6      	b.n	8010f16 <_vfiprintf_r+0xfe>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	3401      	adds	r4, #1
 8010fcc:	9305      	str	r3, [sp, #20]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	f04f 0c0a 	mov.w	ip, #10
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fda:	3a30      	subs	r2, #48	; 0x30
 8010fdc:	2a09      	cmp	r2, #9
 8010fde:	d903      	bls.n	8010fe8 <_vfiprintf_r+0x1d0>
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d0c6      	beq.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe4:	9105      	str	r1, [sp, #20]
 8010fe6:	e7c4      	b.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fec:	4604      	mov	r4, r0
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e7f0      	b.n	8010fd4 <_vfiprintf_r+0x1bc>
 8010ff2:	ab03      	add	r3, sp, #12
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4b12      	ldr	r3, [pc, #72]	; (8011044 <_vfiprintf_r+0x22c>)
 8010ffa:	a904      	add	r1, sp, #16
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	f7fd ff03 	bl	800ee08 <_printf_float>
 8011002:	4607      	mov	r7, r0
 8011004:	1c78      	adds	r0, r7, #1
 8011006:	d1d6      	bne.n	8010fb6 <_vfiprintf_r+0x19e>
 8011008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801100a:	07d9      	lsls	r1, r3, #31
 801100c:	d405      	bmi.n	801101a <_vfiprintf_r+0x202>
 801100e:	89ab      	ldrh	r3, [r5, #12]
 8011010:	059a      	lsls	r2, r3, #22
 8011012:	d402      	bmi.n	801101a <_vfiprintf_r+0x202>
 8011014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011016:	f7fe fc7d 	bl	800f914 <__retarget_lock_release_recursive>
 801101a:	89ab      	ldrh	r3, [r5, #12]
 801101c:	065b      	lsls	r3, r3, #25
 801101e:	f53f af1d 	bmi.w	8010e5c <_vfiprintf_r+0x44>
 8011022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011024:	e71c      	b.n	8010e60 <_vfiprintf_r+0x48>
 8011026:	ab03      	add	r3, sp, #12
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	462a      	mov	r2, r5
 801102c:	4b05      	ldr	r3, [pc, #20]	; (8011044 <_vfiprintf_r+0x22c>)
 801102e:	a904      	add	r1, sp, #16
 8011030:	4630      	mov	r0, r6
 8011032:	f7fe f98d 	bl	800f350 <_printf_i>
 8011036:	e7e4      	b.n	8011002 <_vfiprintf_r+0x1ea>
 8011038:	08014b64 	.word	0x08014b64
 801103c:	08014b6e 	.word	0x08014b6e
 8011040:	0800ee09 	.word	0x0800ee09
 8011044:	08010df3 	.word	0x08010df3
 8011048:	08014b6a 	.word	0x08014b6a

0801104c <__sflush_r>:
 801104c:	898a      	ldrh	r2, [r1, #12]
 801104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011052:	4605      	mov	r5, r0
 8011054:	0710      	lsls	r0, r2, #28
 8011056:	460c      	mov	r4, r1
 8011058:	d458      	bmi.n	801110c <__sflush_r+0xc0>
 801105a:	684b      	ldr	r3, [r1, #4]
 801105c:	2b00      	cmp	r3, #0
 801105e:	dc05      	bgt.n	801106c <__sflush_r+0x20>
 8011060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011062:	2b00      	cmp	r3, #0
 8011064:	dc02      	bgt.n	801106c <__sflush_r+0x20>
 8011066:	2000      	movs	r0, #0
 8011068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801106c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801106e:	2e00      	cmp	r6, #0
 8011070:	d0f9      	beq.n	8011066 <__sflush_r+0x1a>
 8011072:	2300      	movs	r3, #0
 8011074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011078:	682f      	ldr	r7, [r5, #0]
 801107a:	6a21      	ldr	r1, [r4, #32]
 801107c:	602b      	str	r3, [r5, #0]
 801107e:	d032      	beq.n	80110e6 <__sflush_r+0x9a>
 8011080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	075a      	lsls	r2, r3, #29
 8011086:	d505      	bpl.n	8011094 <__sflush_r+0x48>
 8011088:	6863      	ldr	r3, [r4, #4]
 801108a:	1ac0      	subs	r0, r0, r3
 801108c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801108e:	b10b      	cbz	r3, 8011094 <__sflush_r+0x48>
 8011090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011092:	1ac0      	subs	r0, r0, r3
 8011094:	2300      	movs	r3, #0
 8011096:	4602      	mov	r2, r0
 8011098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801109a:	6a21      	ldr	r1, [r4, #32]
 801109c:	4628      	mov	r0, r5
 801109e:	47b0      	blx	r6
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	d106      	bne.n	80110b4 <__sflush_r+0x68>
 80110a6:	6829      	ldr	r1, [r5, #0]
 80110a8:	291d      	cmp	r1, #29
 80110aa:	d82b      	bhi.n	8011104 <__sflush_r+0xb8>
 80110ac:	4a29      	ldr	r2, [pc, #164]	; (8011154 <__sflush_r+0x108>)
 80110ae:	410a      	asrs	r2, r1
 80110b0:	07d6      	lsls	r6, r2, #31
 80110b2:	d427      	bmi.n	8011104 <__sflush_r+0xb8>
 80110b4:	2200      	movs	r2, #0
 80110b6:	6062      	str	r2, [r4, #4]
 80110b8:	04d9      	lsls	r1, r3, #19
 80110ba:	6922      	ldr	r2, [r4, #16]
 80110bc:	6022      	str	r2, [r4, #0]
 80110be:	d504      	bpl.n	80110ca <__sflush_r+0x7e>
 80110c0:	1c42      	adds	r2, r0, #1
 80110c2:	d101      	bne.n	80110c8 <__sflush_r+0x7c>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b903      	cbnz	r3, 80110ca <__sflush_r+0x7e>
 80110c8:	6560      	str	r0, [r4, #84]	; 0x54
 80110ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110cc:	602f      	str	r7, [r5, #0]
 80110ce:	2900      	cmp	r1, #0
 80110d0:	d0c9      	beq.n	8011066 <__sflush_r+0x1a>
 80110d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110d6:	4299      	cmp	r1, r3
 80110d8:	d002      	beq.n	80110e0 <__sflush_r+0x94>
 80110da:	4628      	mov	r0, r5
 80110dc:	f7ff faaa 	bl	8010634 <_free_r>
 80110e0:	2000      	movs	r0, #0
 80110e2:	6360      	str	r0, [r4, #52]	; 0x34
 80110e4:	e7c0      	b.n	8011068 <__sflush_r+0x1c>
 80110e6:	2301      	movs	r3, #1
 80110e8:	4628      	mov	r0, r5
 80110ea:	47b0      	blx	r6
 80110ec:	1c41      	adds	r1, r0, #1
 80110ee:	d1c8      	bne.n	8011082 <__sflush_r+0x36>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d0c5      	beq.n	8011082 <__sflush_r+0x36>
 80110f6:	2b1d      	cmp	r3, #29
 80110f8:	d001      	beq.n	80110fe <__sflush_r+0xb2>
 80110fa:	2b16      	cmp	r3, #22
 80110fc:	d101      	bne.n	8011102 <__sflush_r+0xb6>
 80110fe:	602f      	str	r7, [r5, #0]
 8011100:	e7b1      	b.n	8011066 <__sflush_r+0x1a>
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	e7ad      	b.n	8011068 <__sflush_r+0x1c>
 801110c:	690f      	ldr	r7, [r1, #16]
 801110e:	2f00      	cmp	r7, #0
 8011110:	d0a9      	beq.n	8011066 <__sflush_r+0x1a>
 8011112:	0793      	lsls	r3, r2, #30
 8011114:	680e      	ldr	r6, [r1, #0]
 8011116:	bf08      	it	eq
 8011118:	694b      	ldreq	r3, [r1, #20]
 801111a:	600f      	str	r7, [r1, #0]
 801111c:	bf18      	it	ne
 801111e:	2300      	movne	r3, #0
 8011120:	eba6 0807 	sub.w	r8, r6, r7
 8011124:	608b      	str	r3, [r1, #8]
 8011126:	f1b8 0f00 	cmp.w	r8, #0
 801112a:	dd9c      	ble.n	8011066 <__sflush_r+0x1a>
 801112c:	6a21      	ldr	r1, [r4, #32]
 801112e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011130:	4643      	mov	r3, r8
 8011132:	463a      	mov	r2, r7
 8011134:	4628      	mov	r0, r5
 8011136:	47b0      	blx	r6
 8011138:	2800      	cmp	r0, #0
 801113a:	dc06      	bgt.n	801114a <__sflush_r+0xfe>
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	f04f 30ff 	mov.w	r0, #4294967295
 8011148:	e78e      	b.n	8011068 <__sflush_r+0x1c>
 801114a:	4407      	add	r7, r0
 801114c:	eba8 0800 	sub.w	r8, r8, r0
 8011150:	e7e9      	b.n	8011126 <__sflush_r+0xda>
 8011152:	bf00      	nop
 8011154:	dfbffffe 	.word	0xdfbffffe

08011158 <_fflush_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	690b      	ldr	r3, [r1, #16]
 801115c:	4605      	mov	r5, r0
 801115e:	460c      	mov	r4, r1
 8011160:	b913      	cbnz	r3, 8011168 <_fflush_r+0x10>
 8011162:	2500      	movs	r5, #0
 8011164:	4628      	mov	r0, r5
 8011166:	bd38      	pop	{r3, r4, r5, pc}
 8011168:	b118      	cbz	r0, 8011172 <_fflush_r+0x1a>
 801116a:	6a03      	ldr	r3, [r0, #32]
 801116c:	b90b      	cbnz	r3, 8011172 <_fflush_r+0x1a>
 801116e:	f7fe fa9d 	bl	800f6ac <__sinit>
 8011172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0f3      	beq.n	8011162 <_fflush_r+0xa>
 801117a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801117c:	07d0      	lsls	r0, r2, #31
 801117e:	d404      	bmi.n	801118a <_fflush_r+0x32>
 8011180:	0599      	lsls	r1, r3, #22
 8011182:	d402      	bmi.n	801118a <_fflush_r+0x32>
 8011184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011186:	f7fe fbc4 	bl	800f912 <__retarget_lock_acquire_recursive>
 801118a:	4628      	mov	r0, r5
 801118c:	4621      	mov	r1, r4
 801118e:	f7ff ff5d 	bl	801104c <__sflush_r>
 8011192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011194:	07da      	lsls	r2, r3, #31
 8011196:	4605      	mov	r5, r0
 8011198:	d4e4      	bmi.n	8011164 <_fflush_r+0xc>
 801119a:	89a3      	ldrh	r3, [r4, #12]
 801119c:	059b      	lsls	r3, r3, #22
 801119e:	d4e1      	bmi.n	8011164 <_fflush_r+0xc>
 80111a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a2:	f7fe fbb7 	bl	800f914 <__retarget_lock_release_recursive>
 80111a6:	e7dd      	b.n	8011164 <_fflush_r+0xc>

080111a8 <__swbuf_r>:
 80111a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111aa:	460e      	mov	r6, r1
 80111ac:	4614      	mov	r4, r2
 80111ae:	4605      	mov	r5, r0
 80111b0:	b118      	cbz	r0, 80111ba <__swbuf_r+0x12>
 80111b2:	6a03      	ldr	r3, [r0, #32]
 80111b4:	b90b      	cbnz	r3, 80111ba <__swbuf_r+0x12>
 80111b6:	f7fe fa79 	bl	800f6ac <__sinit>
 80111ba:	69a3      	ldr	r3, [r4, #24]
 80111bc:	60a3      	str	r3, [r4, #8]
 80111be:	89a3      	ldrh	r3, [r4, #12]
 80111c0:	071a      	lsls	r2, r3, #28
 80111c2:	d525      	bpl.n	8011210 <__swbuf_r+0x68>
 80111c4:	6923      	ldr	r3, [r4, #16]
 80111c6:	b31b      	cbz	r3, 8011210 <__swbuf_r+0x68>
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	6922      	ldr	r2, [r4, #16]
 80111cc:	1a98      	subs	r0, r3, r2
 80111ce:	6963      	ldr	r3, [r4, #20]
 80111d0:	b2f6      	uxtb	r6, r6
 80111d2:	4283      	cmp	r3, r0
 80111d4:	4637      	mov	r7, r6
 80111d6:	dc04      	bgt.n	80111e2 <__swbuf_r+0x3a>
 80111d8:	4621      	mov	r1, r4
 80111da:	4628      	mov	r0, r5
 80111dc:	f7ff ffbc 	bl	8011158 <_fflush_r>
 80111e0:	b9e0      	cbnz	r0, 801121c <__swbuf_r+0x74>
 80111e2:	68a3      	ldr	r3, [r4, #8]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	60a3      	str	r3, [r4, #8]
 80111e8:	6823      	ldr	r3, [r4, #0]
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	6022      	str	r2, [r4, #0]
 80111ee:	701e      	strb	r6, [r3, #0]
 80111f0:	6962      	ldr	r2, [r4, #20]
 80111f2:	1c43      	adds	r3, r0, #1
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d004      	beq.n	8011202 <__swbuf_r+0x5a>
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	07db      	lsls	r3, r3, #31
 80111fc:	d506      	bpl.n	801120c <__swbuf_r+0x64>
 80111fe:	2e0a      	cmp	r6, #10
 8011200:	d104      	bne.n	801120c <__swbuf_r+0x64>
 8011202:	4621      	mov	r1, r4
 8011204:	4628      	mov	r0, r5
 8011206:	f7ff ffa7 	bl	8011158 <_fflush_r>
 801120a:	b938      	cbnz	r0, 801121c <__swbuf_r+0x74>
 801120c:	4638      	mov	r0, r7
 801120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011210:	4621      	mov	r1, r4
 8011212:	4628      	mov	r0, r5
 8011214:	f000 f806 	bl	8011224 <__swsetup_r>
 8011218:	2800      	cmp	r0, #0
 801121a:	d0d5      	beq.n	80111c8 <__swbuf_r+0x20>
 801121c:	f04f 37ff 	mov.w	r7, #4294967295
 8011220:	e7f4      	b.n	801120c <__swbuf_r+0x64>
	...

08011224 <__swsetup_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	4b2a      	ldr	r3, [pc, #168]	; (80112d0 <__swsetup_r+0xac>)
 8011228:	4605      	mov	r5, r0
 801122a:	6818      	ldr	r0, [r3, #0]
 801122c:	460c      	mov	r4, r1
 801122e:	b118      	cbz	r0, 8011238 <__swsetup_r+0x14>
 8011230:	6a03      	ldr	r3, [r0, #32]
 8011232:	b90b      	cbnz	r3, 8011238 <__swsetup_r+0x14>
 8011234:	f7fe fa3a 	bl	800f6ac <__sinit>
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801123e:	0718      	lsls	r0, r3, #28
 8011240:	d422      	bmi.n	8011288 <__swsetup_r+0x64>
 8011242:	06d9      	lsls	r1, r3, #27
 8011244:	d407      	bmi.n	8011256 <__swsetup_r+0x32>
 8011246:	2309      	movs	r3, #9
 8011248:	602b      	str	r3, [r5, #0]
 801124a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801124e:	81a3      	strh	r3, [r4, #12]
 8011250:	f04f 30ff 	mov.w	r0, #4294967295
 8011254:	e034      	b.n	80112c0 <__swsetup_r+0x9c>
 8011256:	0758      	lsls	r0, r3, #29
 8011258:	d512      	bpl.n	8011280 <__swsetup_r+0x5c>
 801125a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801125c:	b141      	cbz	r1, 8011270 <__swsetup_r+0x4c>
 801125e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011262:	4299      	cmp	r1, r3
 8011264:	d002      	beq.n	801126c <__swsetup_r+0x48>
 8011266:	4628      	mov	r0, r5
 8011268:	f7ff f9e4 	bl	8010634 <_free_r>
 801126c:	2300      	movs	r3, #0
 801126e:	6363      	str	r3, [r4, #52]	; 0x34
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011276:	81a3      	strh	r3, [r4, #12]
 8011278:	2300      	movs	r3, #0
 801127a:	6063      	str	r3, [r4, #4]
 801127c:	6923      	ldr	r3, [r4, #16]
 801127e:	6023      	str	r3, [r4, #0]
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	f043 0308 	orr.w	r3, r3, #8
 8011286:	81a3      	strh	r3, [r4, #12]
 8011288:	6923      	ldr	r3, [r4, #16]
 801128a:	b94b      	cbnz	r3, 80112a0 <__swsetup_r+0x7c>
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011296:	d003      	beq.n	80112a0 <__swsetup_r+0x7c>
 8011298:	4621      	mov	r1, r4
 801129a:	4628      	mov	r0, r5
 801129c:	f000 f8b9 	bl	8011412 <__smakebuf_r>
 80112a0:	89a0      	ldrh	r0, [r4, #12]
 80112a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112a6:	f010 0301 	ands.w	r3, r0, #1
 80112aa:	d00a      	beq.n	80112c2 <__swsetup_r+0x9e>
 80112ac:	2300      	movs	r3, #0
 80112ae:	60a3      	str	r3, [r4, #8]
 80112b0:	6963      	ldr	r3, [r4, #20]
 80112b2:	425b      	negs	r3, r3
 80112b4:	61a3      	str	r3, [r4, #24]
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	b943      	cbnz	r3, 80112cc <__swsetup_r+0xa8>
 80112ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112be:	d1c4      	bne.n	801124a <__swsetup_r+0x26>
 80112c0:	bd38      	pop	{r3, r4, r5, pc}
 80112c2:	0781      	lsls	r1, r0, #30
 80112c4:	bf58      	it	pl
 80112c6:	6963      	ldrpl	r3, [r4, #20]
 80112c8:	60a3      	str	r3, [r4, #8]
 80112ca:	e7f4      	b.n	80112b6 <__swsetup_r+0x92>
 80112cc:	2000      	movs	r0, #0
 80112ce:	e7f7      	b.n	80112c0 <__swsetup_r+0x9c>
 80112d0:	20000070 	.word	0x20000070

080112d4 <_raise_r>:
 80112d4:	291f      	cmp	r1, #31
 80112d6:	b538      	push	{r3, r4, r5, lr}
 80112d8:	4604      	mov	r4, r0
 80112da:	460d      	mov	r5, r1
 80112dc:	d904      	bls.n	80112e8 <_raise_r+0x14>
 80112de:	2316      	movs	r3, #22
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	f04f 30ff 	mov.w	r0, #4294967295
 80112e6:	bd38      	pop	{r3, r4, r5, pc}
 80112e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80112ea:	b112      	cbz	r2, 80112f2 <_raise_r+0x1e>
 80112ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112f0:	b94b      	cbnz	r3, 8011306 <_raise_r+0x32>
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 f830 	bl	8011358 <_getpid_r>
 80112f8:	462a      	mov	r2, r5
 80112fa:	4601      	mov	r1, r0
 80112fc:	4620      	mov	r0, r4
 80112fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011302:	f000 b817 	b.w	8011334 <_kill_r>
 8011306:	2b01      	cmp	r3, #1
 8011308:	d00a      	beq.n	8011320 <_raise_r+0x4c>
 801130a:	1c59      	adds	r1, r3, #1
 801130c:	d103      	bne.n	8011316 <_raise_r+0x42>
 801130e:	2316      	movs	r3, #22
 8011310:	6003      	str	r3, [r0, #0]
 8011312:	2001      	movs	r0, #1
 8011314:	e7e7      	b.n	80112e6 <_raise_r+0x12>
 8011316:	2400      	movs	r4, #0
 8011318:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801131c:	4628      	mov	r0, r5
 801131e:	4798      	blx	r3
 8011320:	2000      	movs	r0, #0
 8011322:	e7e0      	b.n	80112e6 <_raise_r+0x12>

08011324 <raise>:
 8011324:	4b02      	ldr	r3, [pc, #8]	; (8011330 <raise+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f7ff bfd3 	b.w	80112d4 <_raise_r>
 801132e:	bf00      	nop
 8011330:	20000070 	.word	0x20000070

08011334 <_kill_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	4d07      	ldr	r5, [pc, #28]	; (8011354 <_kill_r+0x20>)
 8011338:	2300      	movs	r3, #0
 801133a:	4604      	mov	r4, r0
 801133c:	4608      	mov	r0, r1
 801133e:	4611      	mov	r1, r2
 8011340:	602b      	str	r3, [r5, #0]
 8011342:	f7f9 f87b 	bl	800a43c <_kill>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d102      	bne.n	8011350 <_kill_r+0x1c>
 801134a:	682b      	ldr	r3, [r5, #0]
 801134c:	b103      	cbz	r3, 8011350 <_kill_r+0x1c>
 801134e:	6023      	str	r3, [r4, #0]
 8011350:	bd38      	pop	{r3, r4, r5, pc}
 8011352:	bf00      	nop
 8011354:	20000a34 	.word	0x20000a34

08011358 <_getpid_r>:
 8011358:	f7f9 b868 	b.w	800a42c <_getpid>

0801135c <_calloc_r>:
 801135c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801135e:	fba1 2402 	umull	r2, r4, r1, r2
 8011362:	b94c      	cbnz	r4, 8011378 <_calloc_r+0x1c>
 8011364:	4611      	mov	r1, r2
 8011366:	9201      	str	r2, [sp, #4]
 8011368:	f7fd fc22 	bl	800ebb0 <_malloc_r>
 801136c:	9a01      	ldr	r2, [sp, #4]
 801136e:	4605      	mov	r5, r0
 8011370:	b930      	cbnz	r0, 8011380 <_calloc_r+0x24>
 8011372:	4628      	mov	r0, r5
 8011374:	b003      	add	sp, #12
 8011376:	bd30      	pop	{r4, r5, pc}
 8011378:	220c      	movs	r2, #12
 801137a:	6002      	str	r2, [r0, #0]
 801137c:	2500      	movs	r5, #0
 801137e:	e7f8      	b.n	8011372 <_calloc_r+0x16>
 8011380:	4621      	mov	r1, r4
 8011382:	f7fe fa38 	bl	800f7f6 <memset>
 8011386:	e7f4      	b.n	8011372 <_calloc_r+0x16>

08011388 <__ascii_mbtowc>:
 8011388:	b082      	sub	sp, #8
 801138a:	b901      	cbnz	r1, 801138e <__ascii_mbtowc+0x6>
 801138c:	a901      	add	r1, sp, #4
 801138e:	b142      	cbz	r2, 80113a2 <__ascii_mbtowc+0x1a>
 8011390:	b14b      	cbz	r3, 80113a6 <__ascii_mbtowc+0x1e>
 8011392:	7813      	ldrb	r3, [r2, #0]
 8011394:	600b      	str	r3, [r1, #0]
 8011396:	7812      	ldrb	r2, [r2, #0]
 8011398:	1e10      	subs	r0, r2, #0
 801139a:	bf18      	it	ne
 801139c:	2001      	movne	r0, #1
 801139e:	b002      	add	sp, #8
 80113a0:	4770      	bx	lr
 80113a2:	4610      	mov	r0, r2
 80113a4:	e7fb      	b.n	801139e <__ascii_mbtowc+0x16>
 80113a6:	f06f 0001 	mvn.w	r0, #1
 80113aa:	e7f8      	b.n	801139e <__ascii_mbtowc+0x16>

080113ac <__ascii_wctomb>:
 80113ac:	b149      	cbz	r1, 80113c2 <__ascii_wctomb+0x16>
 80113ae:	2aff      	cmp	r2, #255	; 0xff
 80113b0:	bf85      	ittet	hi
 80113b2:	238a      	movhi	r3, #138	; 0x8a
 80113b4:	6003      	strhi	r3, [r0, #0]
 80113b6:	700a      	strbls	r2, [r1, #0]
 80113b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80113bc:	bf98      	it	ls
 80113be:	2001      	movls	r0, #1
 80113c0:	4770      	bx	lr
 80113c2:	4608      	mov	r0, r1
 80113c4:	4770      	bx	lr

080113c6 <__swhatbuf_r>:
 80113c6:	b570      	push	{r4, r5, r6, lr}
 80113c8:	460c      	mov	r4, r1
 80113ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ce:	2900      	cmp	r1, #0
 80113d0:	b096      	sub	sp, #88	; 0x58
 80113d2:	4615      	mov	r5, r2
 80113d4:	461e      	mov	r6, r3
 80113d6:	da0d      	bge.n	80113f4 <__swhatbuf_r+0x2e>
 80113d8:	89a3      	ldrh	r3, [r4, #12]
 80113da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113de:	f04f 0100 	mov.w	r1, #0
 80113e2:	bf0c      	ite	eq
 80113e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113e8:	2340      	movne	r3, #64	; 0x40
 80113ea:	2000      	movs	r0, #0
 80113ec:	6031      	str	r1, [r6, #0]
 80113ee:	602b      	str	r3, [r5, #0]
 80113f0:	b016      	add	sp, #88	; 0x58
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	466a      	mov	r2, sp
 80113f6:	f000 f849 	bl	801148c <_fstat_r>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	dbec      	blt.n	80113d8 <__swhatbuf_r+0x12>
 80113fe:	9901      	ldr	r1, [sp, #4]
 8011400:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011404:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011408:	4259      	negs	r1, r3
 801140a:	4159      	adcs	r1, r3
 801140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011410:	e7eb      	b.n	80113ea <__swhatbuf_r+0x24>

08011412 <__smakebuf_r>:
 8011412:	898b      	ldrh	r3, [r1, #12]
 8011414:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011416:	079d      	lsls	r5, r3, #30
 8011418:	4606      	mov	r6, r0
 801141a:	460c      	mov	r4, r1
 801141c:	d507      	bpl.n	801142e <__smakebuf_r+0x1c>
 801141e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011422:	6023      	str	r3, [r4, #0]
 8011424:	6123      	str	r3, [r4, #16]
 8011426:	2301      	movs	r3, #1
 8011428:	6163      	str	r3, [r4, #20]
 801142a:	b002      	add	sp, #8
 801142c:	bd70      	pop	{r4, r5, r6, pc}
 801142e:	ab01      	add	r3, sp, #4
 8011430:	466a      	mov	r2, sp
 8011432:	f7ff ffc8 	bl	80113c6 <__swhatbuf_r>
 8011436:	9900      	ldr	r1, [sp, #0]
 8011438:	4605      	mov	r5, r0
 801143a:	4630      	mov	r0, r6
 801143c:	f7fd fbb8 	bl	800ebb0 <_malloc_r>
 8011440:	b948      	cbnz	r0, 8011456 <__smakebuf_r+0x44>
 8011442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011446:	059a      	lsls	r2, r3, #22
 8011448:	d4ef      	bmi.n	801142a <__smakebuf_r+0x18>
 801144a:	f023 0303 	bic.w	r3, r3, #3
 801144e:	f043 0302 	orr.w	r3, r3, #2
 8011452:	81a3      	strh	r3, [r4, #12]
 8011454:	e7e3      	b.n	801141e <__smakebuf_r+0xc>
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	6020      	str	r0, [r4, #0]
 801145a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	9b00      	ldr	r3, [sp, #0]
 8011462:	6163      	str	r3, [r4, #20]
 8011464:	9b01      	ldr	r3, [sp, #4]
 8011466:	6120      	str	r0, [r4, #16]
 8011468:	b15b      	cbz	r3, 8011482 <__smakebuf_r+0x70>
 801146a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801146e:	4630      	mov	r0, r6
 8011470:	f000 f81e 	bl	80114b0 <_isatty_r>
 8011474:	b128      	cbz	r0, 8011482 <__smakebuf_r+0x70>
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	f023 0303 	bic.w	r3, r3, #3
 801147c:	f043 0301 	orr.w	r3, r3, #1
 8011480:	81a3      	strh	r3, [r4, #12]
 8011482:	89a3      	ldrh	r3, [r4, #12]
 8011484:	431d      	orrs	r5, r3
 8011486:	81a5      	strh	r5, [r4, #12]
 8011488:	e7cf      	b.n	801142a <__smakebuf_r+0x18>
	...

0801148c <_fstat_r>:
 801148c:	b538      	push	{r3, r4, r5, lr}
 801148e:	4d07      	ldr	r5, [pc, #28]	; (80114ac <_fstat_r+0x20>)
 8011490:	2300      	movs	r3, #0
 8011492:	4604      	mov	r4, r0
 8011494:	4608      	mov	r0, r1
 8011496:	4611      	mov	r1, r2
 8011498:	602b      	str	r3, [r5, #0]
 801149a:	f7f9 f82e 	bl	800a4fa <_fstat>
 801149e:	1c43      	adds	r3, r0, #1
 80114a0:	d102      	bne.n	80114a8 <_fstat_r+0x1c>
 80114a2:	682b      	ldr	r3, [r5, #0]
 80114a4:	b103      	cbz	r3, 80114a8 <_fstat_r+0x1c>
 80114a6:	6023      	str	r3, [r4, #0]
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	bf00      	nop
 80114ac:	20000a34 	.word	0x20000a34

080114b0 <_isatty_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	4d06      	ldr	r5, [pc, #24]	; (80114cc <_isatty_r+0x1c>)
 80114b4:	2300      	movs	r3, #0
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	f7f9 f82d 	bl	800a51a <_isatty>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	d102      	bne.n	80114ca <_isatty_r+0x1a>
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	b103      	cbz	r3, 80114ca <_isatty_r+0x1a>
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	20000a34 	.word	0x20000a34

080114d0 <_init>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	bf00      	nop
 80114d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114d6:	bc08      	pop	{r3}
 80114d8:	469e      	mov	lr, r3
 80114da:	4770      	bx	lr

080114dc <_fini>:
 80114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114de:	bf00      	nop
 80114e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114e2:	bc08      	pop	{r3}
 80114e4:	469e      	mov	lr, r3
 80114e6:	4770      	bx	lr
