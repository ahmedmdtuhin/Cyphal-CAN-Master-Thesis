
Cyphal_CAN_implementation_with_IRQ_list_Acess2_ExecuteCommand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003798  08011c30  08011c30  00021c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153c8  080153c8  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080153c8  080153c8  000253c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153d0  080153d0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153d0  080153d0  000253d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080153d4  080153d4  000253d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080153d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  200001e0  080155b8  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  080155b8  00030a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f516  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e9  00000000  00000000  0003f769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00041a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a08  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023568  00000000  00000000  000430b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101d0  00000000  00000000  00066618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d56d8  00000000  00000000  000767e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044c4  00000000  00000000  0014bec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00150384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011c18 	.word	0x08011c18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08011c18 	.word	0x08011c18

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <__NVIC_SystemReset+0x24>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f16:	4904      	ldr	r1, [pc, #16]	; (8000f28 <__NVIC_SystemReset+0x24>)
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_SystemReset+0x28>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1e:	f3bf 8f4f 	dsb	sy
}
 8000f22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <__NVIC_SystemReset+0x20>
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	05fa0004 	.word	0x05fa0004

08000f30 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bf28      	it	cs
 8000f42:	4613      	movcs	r3, r2
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff ffe3 	bl	8000f30 <nunavutChooseMin>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8000f72:	6939      	ldr	r1, [r7, #16]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffdb 	bl	8000f30 <nunavutChooseMin>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b092      	sub	sp, #72	; 0x48
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <nunavutCopyBits+0x20>
 8000f98:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <nunavutCopyBits+0x25c>)
 8000f9a:	4a92      	ldr	r2, [pc, #584]	; (80011e4 <nunavutCopyBits+0x260>)
 8000f9c:	217f      	movs	r1, #127	; 0x7f
 8000f9e:	4892      	ldr	r0, [pc, #584]	; (80011e8 <nunavutCopyBits+0x264>)
 8000fa0:	f00e f95a 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <nunavutCopyBits+0x32>
 8000faa:	4b90      	ldr	r3, [pc, #576]	; (80011ec <nunavutCopyBits+0x268>)
 8000fac:	4a8d      	ldr	r2, [pc, #564]	; (80011e4 <nunavutCopyBits+0x260>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	488d      	ldr	r0, [pc, #564]	; (80011e8 <nunavutCopyBits+0x264>)
 8000fb2:	f00e f951 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d105      	bne.n	8000fca <nunavutCopyBits+0x46>
 8000fbe:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <nunavutCopyBits+0x26c>)
 8000fc0:	4a88      	ldr	r2, [pc, #544]	; (80011e4 <nunavutCopyBits+0x260>)
 8000fc2:	2181      	movs	r1, #129	; 0x81
 8000fc4:	4888      	ldr	r0, [pc, #544]	; (80011e8 <nunavutCopyBits+0x264>)
 8000fc6:	f00e f947 	bl	800f258 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8000fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d14f      	bne.n	8001074 <nunavutCopyBits+0xf0>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d14a      	bne.n	8001074 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ffe:	f00e ff82 	bl	800ff06 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800100e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80df 	beq.w	80011d6 <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800101a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101c:	4413      	add	r3, r2
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001024:	4413      	add	r3, r2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8001028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800102c:	2b07      	cmp	r3, #7
 800102e:	d905      	bls.n	800103c <nunavutCopyBits+0xb8>
 8001030:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <nunavutCopyBits+0x270>)
 8001032:	4a6c      	ldr	r2, [pc, #432]	; (80011e4 <nunavutCopyBits+0x260>)
 8001034:	2190      	movs	r1, #144	; 0x90
 8001036:	486c      	ldr	r0, [pc, #432]	; (80011e8 <nunavutCopyBits+0x264>)
 8001038:	f00e f90e 	bl	800f258 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 800103c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001040:	2201      	movs	r2, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b01      	subs	r3, #1
 800104a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001056:	43db      	mvns	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4013      	ands	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	7819      	ldrb	r1, [r3, #0]
 8001062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001066:	400b      	ands	r3, r1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	701a      	strb	r2, [r3, #0]
    {
 8001072:	e0b0      	b.n	80011d6 <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 800108c:	6a3a      	ldr	r2, [r7, #32]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	d210      	bcs.n	80010b6 <nunavutCopyBits+0x132>
 8001094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	3308      	adds	r3, #8
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	6a3a      	ldr	r2, [r7, #32]
 80010a0:	4413      	add	r3, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d905      	bls.n	80010b6 <nunavutCopyBits+0x132>
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <nunavutCopyBits+0x274>)
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <nunavutCopyBits+0x260>)
 80010ae:	219f      	movs	r1, #159	; 0x9f
 80010b0:	484d      	ldr	r0, [pc, #308]	; (80011e8 <nunavutCopyBits+0x264>)
 80010b2:	f00e f8d1 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d97d      	bls.n	80011ba <nunavutCopyBits+0x236>
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	3308      	adds	r3, #8
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d972      	bls.n	80011ba <nunavutCopyBits+0x236>
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <nunavutCopyBits+0x278>)
 80010d6:	4a43      	ldr	r2, [pc, #268]	; (80011e4 <nunavutCopyBits+0x260>)
 80010d8:	21a0      	movs	r1, #160	; 0xa0
 80010da:	4843      	ldr	r0, [pc, #268]	; (80011e8 <nunavutCopyBits+0x264>)
 80010dc:	f00e f8bc 	bl	800f258 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80010e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80010ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80010f4:	7dba      	ldrb	r2, [r7, #22]
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	bf38      	it	cc
 80010fc:	4613      	movcc	r3, r2
 80010fe:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001100:	7d7b      	ldrb	r3, [r7, #21]
 8001102:	f1c3 0008 	rsb	r0, r3, #8
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff ff0f 	bl	8000f30 <nunavutChooseMin>
 8001112:	4603      	mov	r3, r0
 8001114:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <nunavutCopyBits+0x1a4>
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <nunavutCopyBits+0x27c>)
 800111e:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <nunavutCopyBits+0x260>)
 8001120:	21a7      	movs	r1, #167	; 0xa7
 8001122:	4831      	ldr	r0, [pc, #196]	; (80011e8 <nunavutCopyBits+0x264>)
 8001124:	f00e f898 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 8001128:	7d3b      	ldrb	r3, [r7, #20]
 800112a:	2b08      	cmp	r3, #8
 800112c:	d905      	bls.n	800113a <nunavutCopyBits+0x1b6>
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <nunavutCopyBits+0x280>)
 8001130:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <nunavutCopyBits+0x260>)
 8001132:	21a8      	movs	r1, #168	; 0xa8
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <nunavutCopyBits+0x264>)
 8001136:	f00e f88f 	bl	800f258 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	2201      	movs	r2, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 800114c:	7cfb      	ldrb	r3, [r7, #19]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <nunavutCopyBits+0x1da>
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <nunavutCopyBits+0x284>)
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <nunavutCopyBits+0x260>)
 8001156:	21ab      	movs	r1, #171	; 0xab
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <nunavutCopyBits+0x264>)
 800115a:	f00e f87d 	bl	800f258 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	7dbb      	ldrb	r3, [r7, #22]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 800117c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	43db      	mvns	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4013      	ands	r3, r2
 800118e:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001190:	7cba      	ldrb	r2, [r7, #18]
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	4013      	ands	r3, r2
 8001196:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	4413      	add	r3, r2
 80011a0:	7c79      	ldrb	r1, [r7, #17]
 80011a2:	7c3a      	ldrb	r2, [r7, #16]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80011aa:	7d3b      	ldrb	r3, [r7, #20]
 80011ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011ae:	4413      	add	r3, r2
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 80011b2:	7d3b      	ldrb	r3, [r7, #20]
 80011b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011b6:	4413      	add	r3, r2
 80011b8:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011be:	429a      	cmp	r2, r3
 80011c0:	d88e      	bhi.n	80010e0 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d006      	beq.n	80011d8 <nunavutCopyBits+0x254>
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <nunavutCopyBits+0x288>)
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <nunavutCopyBits+0x260>)
 80011ce:	21b9      	movs	r1, #185	; 0xb9
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <nunavutCopyBits+0x264>)
 80011d2:	f00e f841 	bl	800f258 <__assert_func>
    {
 80011d6:	bf00      	nop
    }
}
 80011d8:	bf00      	nop
 80011da:	3748      	adds	r7, #72	; 0x48
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08011c30 	.word	0x08011c30
 80011e4:	08014250 	.word	0x08014250
 80011e8:	08011c44 	.word	0x08011c44
 80011ec:	08011cc4 	.word	0x08011cc4
 80011f0:	08011cd8 	.word	0x08011cd8
 80011f4:	08011ce4 	.word	0x08011ce4
 80011f8:	08011cf4 	.word	0x08011cf4
 80011fc:	08011d60 	.word	0x08011d60
 8001200:	08011dcc 	.word	0x08011dcc
 8001204:	08011dd8 	.word	0x08011dd8
 8001208:	08011de4 	.word	0x08011de4
 800120c:	08011df0 	.word	0x08011df0

08001210 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(output != NULL);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <nunavutGetBits+0x20>
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <nunavutGetBits+0x74>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <nunavutGetBits+0x78>)
 8001228:	21c9      	movs	r1, #201	; 0xc9
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <nunavutGetBits+0x7c>)
 800122c:	f00e f814 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(buf != NULL);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d105      	bne.n	8001242 <nunavutGetBits+0x32>
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <nunavutGetBits+0x80>)
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <nunavutGetBits+0x78>)
 800123a:	21ca      	movs	r1, #202	; 0xca
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <nunavutGetBits+0x7c>)
 800123e:	f00e f80b 	bl	800f258 <__assert_func>
    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8001242:	6a3a      	ldr	r2, [r7, #32]
 8001244:	6839      	ldr	r1, [r7, #0]
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe82 	bl	8000f50 <nunavutSaturateBufferFragmentBitLength>
 800124c:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	18d0      	adds	r0, r2, r3
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	3307      	adds	r3, #7
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	f00e fe68 	bl	800ff3a <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	2100      	movs	r1, #0
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fe85 	bl	8000f84 <nunavutCopyBits>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08011e04 	.word	0x08011e04
 8001288:	0801445c 	.word	0x0801445c
 800128c:	08011c44 	.word	0x08011c44
 8001290:	08011e1c 	.word	0x08011e1c

08001294 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <nunavutSetUxx+0x1e>
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <nunavutSetUxx+0xfc>)
 80012a8:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <nunavutSetUxx+0x100>)
 80012aa:	21f7      	movs	r1, #247	; 0xf7
 80012ac:	483a      	ldr	r0, [pc, #232]	; (8001398 <nunavutSetUxx+0x104>)
 80012ae:	f00d ffd3 	bl	800f258 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	00da      	lsls	r2, r3, #3
 80012b6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	440b      	add	r3, r1
 80012be:	429a      	cmp	r2, r3
 80012c0:	d202      	bcs.n	80012c8 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80012c2:	f06f 0302 	mvn.w	r3, #2
 80012c6:	e05f      	b.n	8001388 <nunavutSetUxx+0xf4>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80012c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe2e 	bl	8000f30 <nunavutChooseMin>
 80012d4:	61f8      	str	r0, [r7, #28]
    const uint8_t tmp[sizeof(uint64_t)] = {
        (uint8_t)((value >> 0U) & 0xFFU),
 80012d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012da:	753b      	strb	r3, [r7, #20]
        (uint8_t)((value >> 8U) & 0xFFU),
 80012dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	0a02      	lsrs	r2, r0, #8
 80012ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012ee:	0a0b      	lsrs	r3, r1, #8
 80012f0:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 80012f2:	757b      	strb	r3, [r7, #21]
        (uint8_t)((value >> 16U) & 0xFFU),
 80012f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	0c02      	lsrs	r2, r0, #16
 8001302:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001306:	0c0b      	lsrs	r3, r1, #16
 8001308:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800130a:	75bb      	strb	r3, [r7, #22]
        (uint8_t)((value >> 24U) & 0xFFU),
 800130c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	0e02      	lsrs	r2, r0, #24
 800131a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800131e:	0e0b      	lsrs	r3, r1, #24
 8001320:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001322:	75fb      	strb	r3, [r7, #23]
        (uint8_t)((value >> 32U) & 0xFFU),
 8001324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	000a      	movs	r2, r1
 8001332:	2300      	movs	r3, #0
 8001334:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001336:	763b      	strb	r3, [r7, #24]
        (uint8_t)((value >> 40U) & 0xFFU),
 8001338:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	0a0a      	lsrs	r2, r1, #8
 8001346:	2300      	movs	r3, #0
 8001348:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800134a:	767b      	strb	r3, [r7, #25]
        (uint8_t)((value >> 48U) & 0xFFU),
 800134c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	0c0a      	lsrs	r2, r1, #16
 800135a:	2300      	movs	r3, #0
 800135c:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 800135e:	76bb      	strb	r3, [r7, #26]
        (uint8_t)((value >> 56U) & 0xFFU),
 8001360:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	0e0a      	lsrs	r2, r1, #24
 800136e:	2300      	movs	r3, #0
 8001370:	b2d3      	uxtb	r3, r2
    const uint8_t tmp[sizeof(uint64_t)] = {
 8001372:	76fb      	strb	r3, [r7, #27]
    };
    nunavutCopyBits(buf, off_bits, saturated_len_bits, &tmp[0], 0U);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff fdff 	bl	8000f84 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	08011e1c 	.word	0x08011e1c
 8001394:	08014240 	.word	0x08014240
 8001398:	08011c44 	.word	0x08011c44

0800139c <nunavutSetIxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const int64_t value,
    const uint8_t len_bits)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
    // The naive sign conversion is safe and portable according to the C standard:
    // 6.3.1.3.3: if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more
    // than the maximum value that can be represented in the new type until the value is in the range of the new type.
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, (uint64_t) value, len_bits);
 80013a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ac:	f897 1020 	ldrb.w	r1, [r7, #32]
 80013b0:	9102      	str	r1, [sp, #8]
 80013b2:	e9cd 2300 	strd	r2, r3, [sp]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff ff6a 	bl	8001294 <nunavutSetUxx>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <nunavutGetU8>:

static inline uint8_t nunavutGetU8(const uint8_t* const buf,
                                   const size_t buf_size_bytes,
                                   const size_t off_bits,
                                   const uint8_t len_bits)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <nunavutGetU8+0x22>
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <nunavutGetU8+0x70>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <nunavutGetU8+0x74>)
 80013e4:	f240 113b 	movw	r1, #315	; 0x13b
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <nunavutGetU8+0x78>)
 80013ea:	f00d ff35 	bl	800f258 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 8U));
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	2108      	movs	r1, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd9c 	bl	8000f30 <nunavutChooseMin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff fda6 	bl	8000f50 <nunavutSaturateBufferFragmentBitLength>
 8001404:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint8_t) * 8U));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d906      	bls.n	800141a <nunavutGetU8+0x4e>
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <nunavutGetU8+0x7c>)
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <nunavutGetU8+0x74>)
 8001410:	f240 113d 	movw	r1, #317	; 0x13d
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <nunavutGetU8+0x78>)
 8001416:	f00d ff1f 	bl	800f258 <__assert_func>
    uint8_t val = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	74fb      	strb	r3, [r7, #19]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 800141e:	f107 0013 	add.w	r0, r7, #19
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	2100      	movs	r1, #0
 800142c:	f7ff fdaa 	bl	8000f84 <nunavutCopyBits>
    return val;
 8001430:	7cfb      	ldrb	r3, [r7, #19]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08011e1c 	.word	0x08011e1c
 8001440:	0801455c 	.word	0x0801455c
 8001444:	08011c44 	.word	0x08011c44
 8001448:	08011e30 	.word	0x08011e30

0800144c <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <nunavutGetU16+0x22>
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <nunavutGetU16+0x7c>)
 8001462:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <nunavutGetU16+0x80>)
 8001464:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001468:	4819      	ldr	r0, [pc, #100]	; (80014d0 <nunavutGetU16+0x84>)
 800146a:	f00d fef5 	bl	800f258 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	2110      	movs	r1, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd5c 	bl	8000f30 <nunavutChooseMin>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f7ff fd66 	bl	8000f50 <nunavutSaturateBufferFragmentBitLength>
 8001484:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint16_t) * 8U));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d906      	bls.n	800149a <nunavutGetU16+0x4e>
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <nunavutGetU16+0x88>)
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <nunavutGetU16+0x80>)
 8001490:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <nunavutGetU16+0x84>)
 8001496:	f00d fedf 	bl	800f258 <__assert_func>
    uint8_t tmp[sizeof(uint16_t)] = {0};
 800149a:	2300      	movs	r3, #0
 800149c:	823b      	strh	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 800149e:	f107 0010 	add.w	r0, r7, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	2100      	movs	r1, #0
 80014ac:	f7ff fd6a 	bl	8000f84 <nunavutCopyBits>
    return (uint16_t)(tmp[0] | (uint16_t)(((uint16_t) tmp[1]) << 8U));
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b29b      	uxth	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08011e1c 	.word	0x08011e1c
 80014cc:	08014290 	.word	0x08014290
 80014d0:	08011c44 	.word	0x08011c44
 80014d4:	08011e50 	.word	0x08011e50

080014d8 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	70fb      	strb	r3, [r7, #3]
    NUNAVUT_ASSERT(buf != NULL);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <nunavutGetU32+0x22>
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <nunavutGetU32+0x84>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <nunavutGetU32+0x88>)
 80014f0:	f240 1155 	movw	r1, #341	; 0x155
 80014f4:	481b      	ldr	r0, [pc, #108]	; (8001564 <nunavutGetU32+0x8c>)
 80014f6:	f00d feaf 	bl	800f258 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	2120      	movs	r1, #32
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd16 	bl	8000f30 <nunavutChooseMin>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f7ff fd20 	bl	8000f50 <nunavutSaturateBufferFragmentBitLength>
 8001510:	6178      	str	r0, [r7, #20]
    NUNAVUT_ASSERT(bits <= (sizeof(uint32_t) * 8U));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b20      	cmp	r3, #32
 8001516:	d906      	bls.n	8001526 <nunavutGetU32+0x4e>
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <nunavutGetU32+0x90>)
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <nunavutGetU32+0x88>)
 800151c:	f240 1157 	movw	r1, #343	; 0x157
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <nunavutGetU32+0x8c>)
 8001522:	f00d fe99 	bl	800f258 <__assert_func>
    uint8_t tmp[sizeof(uint32_t)] = {0};
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 800152a:	f107 0010 	add.w	r0, r7, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	2100      	movs	r1, #0
 8001538:	f7ff fd24 	bl	8000f84 <nunavutCopyBits>
    return (uint32_t)(tmp[0] | ((uint32_t) tmp[1] << 8U) | ((uint32_t) tmp[2] << 16U) | ((uint32_t) tmp[3] << 24U));
 800153c:	7c3b      	ldrb	r3, [r7, #16]
 800153e:	461a      	mov	r2, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	431a      	orrs	r2, r3
 8001546:	7cbb      	ldrb	r3, [r7, #18]
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	061b      	lsls	r3, r3, #24
 8001550:	4313      	orrs	r3, r2
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08011e1c 	.word	0x08011e1c
 8001560:	080144e4 	.word	0x080144e4
 8001564:	08011c44 	.word	0x08011c44
 8001568:	08011e70 	.word	0x08011e70

0800156c <nunavutGetU64>:

static inline uint64_t nunavutGetU64(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800156c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001570:	b0a4      	sub	sp, #144	; 0x90
 8001572:	af02      	add	r7, sp, #8
 8001574:	6778      	str	r0, [r7, #116]	; 0x74
 8001576:	6739      	str	r1, [r7, #112]	; 0x70
 8001578:	66fa      	str	r2, [r7, #108]	; 0x6c
 800157a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    NUNAVUT_ASSERT(buf != NULL);
 800157e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001580:	2b00      	cmp	r3, #0
 8001582:	d106      	bne.n	8001592 <nunavutGetU64+0x26>
 8001584:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <nunavutGetU64+0x1c8>)
 8001586:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <nunavutGetU64+0x1cc>)
 8001588:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800158c:	486b      	ldr	r0, [pc, #428]	; (800173c <nunavutGetU64+0x1d0>)
 800158e:	f00d fe63 	bl	800f258 <__assert_func>
    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 64U));
 8001592:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fcc9 	bl	8000f30 <nunavutChooseMin>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80015a4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80015a6:	f7ff fcd3 	bl	8000f50 <nunavutSaturateBufferFragmentBitLength>
 80015aa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    NUNAVUT_ASSERT(bits <= (sizeof(uint64_t) * 8U));
 80015ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015b2:	2b40      	cmp	r3, #64	; 0x40
 80015b4:	d906      	bls.n	80015c4 <nunavutGetU64+0x58>
 80015b6:	4b62      	ldr	r3, [pc, #392]	; (8001740 <nunavutGetU64+0x1d4>)
 80015b8:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <nunavutGetU64+0x1cc>)
 80015ba:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80015be:	485f      	ldr	r0, [pc, #380]	; (800173c <nunavutGetU64+0x1d0>)
 80015c0:	f00d fe4a 	bl	800f258 <__assert_func>
    uint8_t tmp[sizeof(uint64_t)] = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    nunavutCopyBits(&tmp[0], 0U, bits, buf, off_bits);
 80015ce:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80015d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80015dc:	2100      	movs	r1, #0
 80015de:	f7ff fcd1 	bl	8000f84 <nunavutCopyBits>
    return (uint64_t)(tmp[0] |
 80015e2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	663b      	str	r3, [r7, #96]	; 0x60
 80015ec:	667a      	str	r2, [r7, #100]	; 0x64
                      ((uint64_t) tmp[1] << 8U) |
 80015ee:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	461c      	mov	r4, r3
 80015f8:	4615      	mov	r5, r2
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	022b      	lsls	r3, r5, #8
 8001604:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001608:	0222      	lsls	r2, r4, #8
    return (uint64_t)(tmp[0] |
 800160a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800160e:	4621      	mov	r1, r4
 8001610:	ea41 0a02 	orr.w	sl, r1, r2
 8001614:	4629      	mov	r1, r5
 8001616:	ea41 0b03 	orr.w	fp, r1, r3
                      ((uint64_t) tmp[2] << 16U) |
 800161a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	65bb      	str	r3, [r7, #88]	; 0x58
 8001624:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001632:	4629      	mov	r1, r5
 8001634:	040b      	lsls	r3, r1, #16
 8001636:	4621      	mov	r1, r4
 8001638:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800163c:	4621      	mov	r1, r4
 800163e:	040a      	lsls	r2, r1, #16
                      ((uint64_t) tmp[1] << 8U) |
 8001640:	ea4a 0102 	orr.w	r1, sl, r2
 8001644:	6539      	str	r1, [r7, #80]	; 0x50
 8001646:	ea4b 0303 	orr.w	r3, fp, r3
 800164a:	657b      	str	r3, [r7, #84]	; 0x54
                      ((uint64_t) tmp[3] << 24U) |
 800164c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2200      	movs	r2, #0
 8001654:	64bb      	str	r3, [r7, #72]	; 0x48
 8001656:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001658:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800165c:	460b      	mov	r3, r1
 800165e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001662:	460b      	mov	r3, r1
 8001664:	ea4f 6803 	mov.w	r8, r3, lsl #24
                      ((uint64_t) tmp[2] << 16U) |
 8001668:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800166c:	460b      	mov	r3, r1
 800166e:	ea43 0308 	orr.w	r3, r3, r8
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
 8001674:	4613      	mov	r3, r2
 8001676:	ea43 0309 	orr.w	r3, r3, r9
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
                      ((uint64_t) tmp[4] << 32U) |
 800167c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2200      	movs	r2, #0
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
 8001686:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001692:	000b      	movs	r3, r1
 8001694:	2200      	movs	r2, #0
                      ((uint64_t) tmp[3] << 24U) |
 8001696:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800169a:	4621      	mov	r1, r4
 800169c:	4311      	orrs	r1, r2
 800169e:	6339      	str	r1, [r7, #48]	; 0x30
 80016a0:	4629      	mov	r1, r5
 80016a2:	4319      	orrs	r1, r3
 80016a4:	6379      	str	r1, [r7, #52]	; 0x34
                      ((uint64_t) tmp[5] << 40U) |
 80016a6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2200      	movs	r2, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016bc:	020b      	lsls	r3, r1, #8
 80016be:	2200      	movs	r2, #0
                      ((uint64_t) tmp[4] << 32U) |
 80016c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016c4:	4621      	mov	r1, r4
 80016c6:	4311      	orrs	r1, r2
 80016c8:	6239      	str	r1, [r7, #32]
 80016ca:	4629      	mov	r1, r5
 80016cc:	4319      	orrs	r1, r3
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
                      ((uint64_t) tmp[6] << 48U) |
 80016d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2200      	movs	r2, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	61fa      	str	r2, [r7, #28]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	69b9      	ldr	r1, [r7, #24]
 80016e6:	040b      	lsls	r3, r1, #16
 80016e8:	2200      	movs	r2, #0
                      ((uint64_t) tmp[5] << 40U) |
 80016ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016ee:	4621      	mov	r1, r4
 80016f0:	4311      	orrs	r1, r2
 80016f2:	6139      	str	r1, [r7, #16]
 80016f4:	4629      	mov	r1, r5
 80016f6:	4319      	orrs	r1, r3
 80016f8:	6179      	str	r1, [r7, #20]
                      ((uint64_t) tmp[7] << 56U));
 80016fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2200      	movs	r2, #0
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	60fa      	str	r2, [r7, #12]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	060b      	lsls	r3, r1, #24
 8001712:	2200      	movs	r2, #0
    return (uint64_t)(tmp[0] |
 8001714:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001718:	4621      	mov	r1, r4
 800171a:	4311      	orrs	r1, r2
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	4629      	mov	r1, r5
 8001720:	4319      	orrs	r1, r3
 8001722:	6079      	str	r1, [r7, #4]
 8001724:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	3788      	adds	r7, #136	; 0x88
 800172e:	46bd      	mov	sp, r7
 8001730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001734:	08011e1c 	.word	0x08011e1c
 8001738:	080144a0 	.word	0x080144a0
 800173c:	08011c44 	.word	0x08011c44
 8001740:	08011e90 	.word	0x08011e90

08001744 <nunavutGetI8>:

static inline int8_t nunavutGetI8(const uint8_t* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const uint8_t len_bits)
{
 8001744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 8U);
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2108      	movs	r1, #8
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fbe9 	bl	8000f30 <nunavutChooseMin>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
    uint8_t       val = nunavutGetU8(buf, buf_size_bytes, off_bits, sat);
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fe2f 	bl	80013cc <nunavutGetU8>
 800176e:	4603      	mov	r3, r0
 8001770:	75bb      	strb	r3, [r7, #22]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01c      	beq.n	80017b2 <nunavutGetI8+0x6e>
 8001778:	7dbb      	ldrb	r3, [r7, #22]
 800177a:	2200      	movs	r2, #0
 800177c:	4698      	mov	r8, r3
 800177e:	4691      	mov	r9, r2
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1c3 0120 	rsb	r1, r3, #32
 8001788:	f1a3 0220 	sub.w	r2, r3, #32
 800178c:	fa28 f403 	lsr.w	r4, r8, r3
 8001790:	fa09 f101 	lsl.w	r1, r9, r1
 8001794:	430c      	orrs	r4, r1
 8001796:	fa29 f202 	lsr.w	r2, r9, r2
 800179a:	4314      	orrs	r4, r2
 800179c:	fa29 f503 	lsr.w	r5, r9, r3
 80017a0:	f004 0a01 	and.w	sl, r4, #1
 80017a4:	f04f 0b00 	mov.w	fp, #0
 80017a8:	ea5a 030b 	orrs.w	r3, sl, fp
 80017ac:	d001      	beq.n	80017b2 <nunavutGetI8+0x6e>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <nunavutGetI8+0x70>
 80017b2:	2300      	movs	r3, #0
 80017b4:	757b      	strb	r3, [r7, #21]
 80017b6:	7d7b      	ldrb	r3, [r7, #21]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	757b      	strb	r3, [r7, #21]
    val = ((sat < 8U) && neg) ? (uint8_t)(val | ~((1U << sat) - 1U)) : val;  // Sign extension
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b07      	cmp	r3, #7
 80017c2:	d80d      	bhi.n	80017e0 <nunavutGetI8+0x9c>
 80017c4:	7d7b      	ldrb	r3, [r7, #21]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00a      	beq.n	80017e0 <nunavutGetI8+0x9c>
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2201      	movs	r2, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	425b      	negs	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	7dbb      	ldrb	r3, [r7, #22]
 80017da:	4313      	orrs	r3, r2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e000      	b.n	80017e2 <nunavutGetI8+0x9e>
 80017e0:	7dbb      	ldrb	r3, [r7, #22]
 80017e2:	75bb      	strb	r3, [r7, #22]
    return neg ? (int8_t)((-(int8_t)(uint8_t) ~val) - 1) : (int8_t) val;
 80017e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017f2 <nunavutGetI16>:

static inline int16_t nunavutGetI16(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 80017f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 16U);
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	2110      	movs	r1, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fb92 	bl	8000f30 <nunavutChooseMin>
 800180c:	4603      	mov	r3, r0
 800180e:	75fb      	strb	r3, [r7, #23]
    uint16_t      val = nunavutGetU16(buf, buf_size_bytes, off_bits, sat);
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fe18 	bl	800144c <nunavutGetU16>
 800181c:	4603      	mov	r3, r0
 800181e:	82bb      	strh	r3, [r7, #20]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01c      	beq.n	8001860 <nunavutGetI16+0x6e>
 8001826:	8abb      	ldrh	r3, [r7, #20]
 8001828:	2200      	movs	r2, #0
 800182a:	4698      	mov	r8, r3
 800182c:	4691      	mov	r9, r2
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	3b01      	subs	r3, #1
 8001832:	f1c3 0120 	rsb	r1, r3, #32
 8001836:	f1a3 0220 	sub.w	r2, r3, #32
 800183a:	fa28 f403 	lsr.w	r4, r8, r3
 800183e:	fa09 f101 	lsl.w	r1, r9, r1
 8001842:	430c      	orrs	r4, r1
 8001844:	fa29 f202 	lsr.w	r2, r9, r2
 8001848:	4314      	orrs	r4, r2
 800184a:	fa29 f503 	lsr.w	r5, r9, r3
 800184e:	f004 0a01 	and.w	sl, r4, #1
 8001852:	f04f 0b00 	mov.w	fp, #0
 8001856:	ea5a 030b 	orrs.w	r3, sl, fp
 800185a:	d001      	beq.n	8001860 <nunavutGetI16+0x6e>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <nunavutGetI16+0x70>
 8001860:	2300      	movs	r3, #0
 8001862:	74fb      	strb	r3, [r7, #19]
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	74fb      	strb	r3, [r7, #19]
    val = ((sat < 16U) && neg) ? (uint16_t)(val | ~((1U << sat) - 1U)) : val;  // Sign extension
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	d80d      	bhi.n	800188e <nunavutGetI16+0x9c>
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <nunavutGetI16+0x9c>
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2201      	movs	r2, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	425b      	negs	r3, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	8abb      	ldrh	r3, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	b29b      	uxth	r3, r3
 800188c:	e000      	b.n	8001890 <nunavutGetI16+0x9e>
 800188e:	8abb      	ldrh	r3, [r7, #20]
 8001890:	82bb      	strh	r3, [r7, #20]
    return neg ? (int16_t)((-(int16_t)(uint16_t) ~val) - 1) : (int16_t) val;
 8001892:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018a0 <nunavutGetI32>:

static inline int32_t nunavutGetI32(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	70fb      	strb	r3, [r7, #3]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 32U);
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2120      	movs	r1, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb3b 	bl	8000f30 <nunavutChooseMin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	77fb      	strb	r3, [r7, #31]
    uint32_t      val = nunavutGetU32(buf, buf_size_bytes, off_bits, sat);
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fe07 	bl	80014d8 <nunavutGetU32>
 80018ca:	61b8      	str	r0, [r7, #24]
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01c      	beq.n	800190c <nunavutGetI32+0x6c>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4698      	mov	r8, r3
 80018d8:	4691      	mov	r9, r2
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	3b01      	subs	r3, #1
 80018de:	f1c3 0120 	rsb	r1, r3, #32
 80018e2:	f1a3 0220 	sub.w	r2, r3, #32
 80018e6:	fa28 f403 	lsr.w	r4, r8, r3
 80018ea:	fa09 f101 	lsl.w	r1, r9, r1
 80018ee:	430c      	orrs	r4, r1
 80018f0:	fa29 f202 	lsr.w	r2, r9, r2
 80018f4:	4314      	orrs	r4, r2
 80018f6:	fa29 f503 	lsr.w	r5, r9, r3
 80018fa:	f004 0a01 	and.w	sl, r4, #1
 80018fe:	f04f 0b00 	mov.w	fp, #0
 8001902:	ea5a 030b 	orrs.w	r3, sl, fp
 8001906:	d001      	beq.n	800190c <nunavutGetI32+0x6c>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <nunavutGetI32+0x6e>
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	75fb      	strb	r3, [r7, #23]
    val = ((sat < 32U) && neg) ? (uint32_t)(val | ~((1UL << sat) - 1U)) : val;  // Sign extension
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	2b1f      	cmp	r3, #31
 800191c:	d80a      	bhi.n	8001934 <nunavutGetI32+0x94>
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <nunavutGetI32+0x94>
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	2201      	movs	r2, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	425a      	negs	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	e000      	b.n	8001936 <nunavutGetI32+0x96>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	61bb      	str	r3, [r7, #24]
    return neg ? (int32_t)((-(int32_t) ~val) - 1) : (int32_t) val;
 8001938:	69bb      	ldr	r3, [r7, #24]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001944 <nunavutGetI64>:

static inline int64_t nunavutGetI64(const uint8_t* const buf,
                                    const size_t buf_size_bytes,
                                    const size_t off_bits,
                                    const uint8_t len_bits)
{
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001948:	b08f      	sub	sp, #60	; 0x3c
 800194a:	af00      	add	r7, sp, #0
 800194c:	61f8      	str	r0, [r7, #28]
 800194e:	61b9      	str	r1, [r7, #24]
 8001950:	617a      	str	r2, [r7, #20]
 8001952:	74fb      	strb	r3, [r7, #19]
    const uint8_t sat = (uint8_t) nunavutChooseMin(len_bits, 64U);
 8001954:	7cfb      	ldrb	r3, [r7, #19]
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fae9 	bl	8000f30 <nunavutChooseMin>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint64_t      val = nunavutGetU64(buf, buf_size_bytes, off_bits, sat);
 8001964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	69f8      	ldr	r0, [r7, #28]
 800196e:	f7ff fdfd 	bl	800156c <nunavutGetU64>
 8001972:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    const bool    neg = (sat > 0U) && ((val & (1ULL << (sat - 1U))) != 0U);
 8001976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01e      	beq.n	80019bc <nunavutGetI64+0x78>
 800197e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001988:	f1c0 0620 	rsb	r6, r0, #32
 800198c:	f1a0 0120 	sub.w	r1, r0, #32
 8001990:	fa22 f400 	lsr.w	r4, r2, r0
 8001994:	fa03 f606 	lsl.w	r6, r3, r6
 8001998:	4334      	orrs	r4, r6
 800199a:	fa23 f101 	lsr.w	r1, r3, r1
 800199e:	430c      	orrs	r4, r1
 80019a0:	fa23 f500 	lsr.w	r5, r3, r0
 80019a4:	f004 0301 	and.w	r3, r4, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80019b2:	460b      	mov	r3, r1
 80019b4:	4313      	orrs	r3, r2
 80019b6:	d001      	beq.n	80019bc <nunavutGetI64+0x78>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <nunavutGetI64+0x7a>
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    val = ((sat < 64U) && neg) ? (uint64_t)(val | ~((1ULL << sat) - 1U)) : val;  // Sign extension
 80019ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019d2:	2b3f      	cmp	r3, #63	; 0x3f
 80019d4:	d82b      	bhi.n	8001a2e <nunavutGetI64+0xea>
 80019d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d027      	beq.n	8001a2e <nunavutGetI64+0xea>
 80019de:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80019e2:	f04f 0201 	mov.w	r2, #1
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f1a1 0420 	sub.w	r4, r1, #32
 80019ee:	f1c1 0020 	rsb	r0, r1, #32
 80019f2:	fa03 f901 	lsl.w	r9, r3, r1
 80019f6:	fa02 f404 	lsl.w	r4, r2, r4
 80019fa:	ea49 0904 	orr.w	r9, r9, r4
 80019fe:	fa22 f000 	lsr.w	r0, r2, r0
 8001a02:	ea49 0900 	orr.w	r9, r9, r0
 8001a06:	fa02 f801 	lsl.w	r8, r2, r1
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f1d8 0200 	rsbs	r2, r8, #0
 8001a10:	603a      	str	r2, [r7, #0]
 8001a12:	eb63 0309 	sbc.w	r3, r3, r9
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a1c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a20:	4621      	mov	r1, r4
 8001a22:	ea41 0a02 	orr.w	sl, r1, r2
 8001a26:	4629      	mov	r1, r5
 8001a28:	ea41 0b03 	orr.w	fp, r1, r3
 8001a2c:	e001      	b.n	8001a32 <nunavutGetI64+0xee>
 8001a2e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001a32:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    return neg ? (int64_t)((-(int64_t) ~val) - 1) : (int64_t) val;
 8001a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	373c      	adds	r7, #60	; 0x3c
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001a48 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <nunavutFloat16Pack+0xb4>)
 8001a54:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8001a56:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001a5a:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8001a5c:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8001a60:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8001a62:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8001a66:	613b      	str	r3, [r7, #16]
    in.real = value;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a72:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4053      	eors	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d313      	bcc.n	8001ab0 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8001a92:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8001a96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a98:	e023      	b.n	8001ae2 <nunavutFloat16Pack+0x9a>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d902      	bls.n	8001aa8 <nunavutFloat16Pack+0x60>
 8001aa2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001aa6:	e001      	b.n	8001aac <nunavutFloat16Pack+0x64>
 8001aa8:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001aac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aae:	e018      	b.n	8001ae2 <nunavutFloat16Pack+0x9a>
        }
    }
    else
    {
        in.bits &= round_mask;
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8001ab8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001abc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d901      	bls.n	8001adc <nunavutFloat16Pack+0x94>
        {
            in.bits = f16inf.bits;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0b5b      	lsrs	r3, r3, #13
 8001ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aea:	4313      	orrs	r3, r2
 8001aec:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 8001aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	372c      	adds	r7, #44	; 0x2c
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	fffff000 	.word	0xfffff000

08001b00 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8001b0a:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 8001b0e:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8001b10:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8001b14:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	035a      	lsls	r2, r3, #13
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <nunavutFloat16Unpack+0x6c>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8001b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8001b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	db03      	blt.n	8001b4a <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8001b48:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    return out.real;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	ee07 3a90 	vmov	s15, r3
}
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	0fffe000 	.word	0x0fffe000

08001b70 <nunavutSetF16>:
static inline int8_t nunavutSetF16(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const float value)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	ed87 0a00 	vstr	s0, [r7]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, nunavutFloat16Pack(value), 16U);
 8001b80:	ed97 0a00 	vldr	s0, [r7]
 8001b84:	f7ff ff60 	bl	8001a48 <nunavutFloat16Pack>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	461c      	mov	r4, r3
 8001b90:	4615      	mov	r5, r2
 8001b92:	2310      	movs	r3, #16
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	e9cd 4500 	strd	r4, r5, [sp]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fb78 	bl	8001294 <nunavutSetUxx>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bdb0      	pop	{r4, r5, r7, pc}

08001bae <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8001bba:	2310      	movs	r3, #16
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fc43 	bl	800144c <nunavutGetU16>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff99 	bl	8001b00 <nunavutFloat16Unpack>
 8001bce:	eef0 7a40 	vmov.f32	s15, s0
}
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <nunavutSetF32>:
static inline int8_t nunavutSetF32(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const float value)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	ed87 0a00 	vstr	s0, [r7]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        float fl;
        uint32_t in;
    } const tmp = {value};  // NOSONAR
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	617b      	str	r3, [r7, #20]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, tmp.in, sizeof(tmp) * 8U);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	461c      	mov	r4, r3
 8001bf6:	4615      	mov	r5, r2
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	e9cd 4500 	strd	r4, r5, [sp]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff fb45 	bl	8001294 <nunavutSetUxx>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}

08001c14 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8001c20:	2320      	movs	r3, #32
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff fc56 	bl	80014d8 <nunavutGetU32>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	ee07 3a90 	vmov	s15, r3
}
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <nunavutSetF64>:
static inline int8_t nunavutSetF64(
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const double value)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        double fl;
        uint64_t in;
    } const tmp = {value};  // NOSONAR
 8001c4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return nunavutSetUxx(buf, buf_size_bytes, off_bits, tmp.in, sizeof(tmp) * 8U);
 8001c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	9102      	str	r1, [sp, #8]
 8001c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fb15 	bl	8001294 <nunavutSetUxx>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <nunavutGetF64>:

static inline double nunavutGetF64(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint64_t in;
        double fl;
    } const tmp = {nunavutGetU64(buf, buf_size_bytes, off_bits, 64U)};
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fc70 	bl	800156c <nunavutGetU64>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return tmp.fl;
 8001c94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <uavcan_register_Name_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_serialize_(
    const uavcan_register_Name_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b092      	sub	sp, #72	; 0x48
 8001caa:	af04      	add	r7, sp, #16
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24
 8001cae:	6239      	str	r1, [r7, #32]
 8001cb0:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <uavcan_register_Name_1_0_serialize_+0x20>
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <uavcan_register_Name_1_0_serialize_+0x20>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <uavcan_register_Name_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001cc4:	f06f 0301 	mvn.w	r3, #1
 8001cc8:	e0f5      	b.n	8001eb6 <uavcan_register_Name_1_0_serialize_+0x212>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd8:	d202      	bcs.n	8001ce0 <uavcan_register_Name_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001cda:	f06f 0302 	mvn.w	r3, #2
 8001cde:	e0ea      	b.n	8001eb6 <uavcan_register_Name_1_0_serialize_+0x212>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated uint8[<=255] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <uavcan_register_Name_1_0_serialize_+0x56>
 8001cee:	4b74      	ldr	r3, [pc, #464]	; (8001ec0 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001cf0:	4a74      	ldr	r2, [pc, #464]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001cf2:	2181      	movs	r1, #129	; 0x81
 8001cf4:	4874      	ldr	r0, [pc, #464]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001cf6:	f00d faaf 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	617a      	str	r2, [r7, #20]
 8001d02:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d06:	460b      	mov	r3, r1
 8001d08:	f513 6800 	adds.w	r8, r3, #2048	; 0x800
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	f143 0900 	adc.w	r9, r3, #0
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	2200      	movs	r2, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d20:	460b      	mov	r3, r1
 8001d22:	4543      	cmp	r3, r8
 8001d24:	4613      	mov	r3, r2
 8001d26:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d2a:	d205      	bcs.n	8001d38 <uavcan_register_Name_1_0_serialize_+0x94>
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <uavcan_register_Name_1_0_serialize_+0x228>)
 8001d2e:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d30:	2182      	movs	r1, #130	; 0x82
 8001d32:	4865      	ldr	r0, [pc, #404]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d34:	f00d fa90 	bl	800f258 <__assert_func>
        if (obj->name.count > 255)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d902      	bls.n	8001d48 <uavcan_register_Name_1_0_serialize_+0xa4>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001d42:	f06f 0309 	mvn.w	r3, #9
 8001d46:	e0b6      	b.n	8001eb6 <uavcan_register_Name_1_0_serialize_+0x212>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8001d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	4413      	add	r3, r2
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <uavcan_register_Name_1_0_serialize_+0xd2>
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001d6c:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d6e:	218a      	movs	r1, #138	; 0x8a
 8001d70:	4855      	ldr	r0, [pc, #340]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d72:	f00d fa71 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	e033      	b.n	8001de4 <uavcan_register_Name_1_0_serialize_+0x140>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <uavcan_register_Name_1_0_serialize_+0xee>
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001d88:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001d8a:	218d      	movs	r1, #141	; 0x8d
 8001d8c:	484e      	ldr	r0, [pc, #312]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001d8e:	f00d fa63 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	2200      	movs	r2, #0
 8001d96:	469a      	mov	sl, r3
 8001d98:	4693      	mov	fp, r2
 8001d9a:	f11a 0408 	adds.w	r4, sl, #8
 8001d9e:	f14b 0500 	adc.w	r5, fp, #0
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	2200      	movs	r2, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001db0:	460b      	mov	r3, r1
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	4613      	mov	r3, r2
 8001db6:	41ab      	sbcs	r3, r5
 8001db8:	d205      	bcs.n	8001dc6 <uavcan_register_Name_1_0_serialize_+0x122>
 8001dba:	4b45      	ldr	r3, [pc, #276]	; (8001ed0 <uavcan_register_Name_1_0_serialize_+0x22c>)
 8001dbc:	4a41      	ldr	r2, [pc, #260]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001dbe:	218e      	movs	r1, #142	; 0x8e
 8001dc0:	4841      	ldr	r0, [pc, #260]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001dc2:	f00d fa49 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->name.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	4413      	add	r3, r2
 8001dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd2:	440a      	add	r2, r1
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	3308      	adds	r3, #8
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->name.count; ++_index0_)
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	3301      	adds	r3, #1
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3c5      	bcc.n	8001d7c <uavcan_register_Name_1_0_serialize_+0xd8>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d03a      	beq.n	8001e70 <uavcan_register_Name_1_0_serialize_+0x1cc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f1c3 0308 	rsb	r3, r3, #8
 8001e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <uavcan_register_Name_1_0_serialize_+0x17c>
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <uavcan_register_Name_1_0_serialize_+0x230>)
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e18:	2197      	movs	r1, #151	; 0x97
 8001e1a:	482b      	ldr	r0, [pc, #172]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e1c:	f00d fa1c 	bl	800f258 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e24:	9302      	str	r3, [sp, #8]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e36:	6a38      	ldr	r0, [r7, #32]
 8001e38:	f7ff fa2c 	bl	8001294 <nunavutSetUxx>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err0_ < 0)
 8001e42:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da02      	bge.n	8001e50 <uavcan_register_Name_1_0_serialize_+0x1ac>
        {
            return _err0_;
 8001e4a:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001e4e:	e032      	b.n	8001eb6 <uavcan_register_Name_1_0_serialize_+0x212>
        }
        offset_bits += _pad0_;
 8001e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e56:	4413      	add	r3, r2
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <uavcan_register_Name_1_0_serialize_+0x1cc>
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e68:	219e      	movs	r1, #158	; 0x9e
 8001e6a:	4817      	ldr	r0, [pc, #92]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e6c:	f00d f9f4 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	2b07      	cmp	r3, #7
 8001e74:	d805      	bhi.n	8001e82 <uavcan_register_Name_1_0_serialize_+0x1de>
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <uavcan_register_Name_1_0_serialize_+0x234>)
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e7a:	21a1      	movs	r1, #161	; 0xa1
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e7e:	f00d f9eb 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e88:	d905      	bls.n	8001e96 <uavcan_register_Name_1_0_serialize_+0x1f2>
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <uavcan_register_Name_1_0_serialize_+0x238>)
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001e8e:	21a2      	movs	r1, #162	; 0xa2
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001e92:	f00d f9e1 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <uavcan_register_Name_1_0_serialize_+0x208>
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <uavcan_register_Name_1_0_serialize_+0x21c>)
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <uavcan_register_Name_1_0_serialize_+0x220>)
 8001ea4:	21a3      	movs	r1, #163	; 0xa3
 8001ea6:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <uavcan_register_Name_1_0_serialize_+0x224>)
 8001ea8:	f00d f9d6 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3738      	adds	r7, #56	; 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec0:	08011eb0 	.word	0x08011eb0
 8001ec4:	08014358 	.word	0x08014358
 8001ec8:	08011ec8 	.word	0x08011ec8
 8001ecc:	08011f44 	.word	0x08011f44
 8001ed0:	08011f78 	.word	0x08011f78
 8001ed4:	08011fa8 	.word	0x08011fa8
 8001ed8:	08011fb4 	.word	0x08011fb4
 8001edc:	08011fc8 	.word	0x08011fc8

08001ee0 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <uavcan_register_Name_1_0_deserialize_+0x26>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <uavcan_register_Name_1_0_deserialize_+0x26>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <uavcan_register_Name_1_0_deserialize_+0x2c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001f06:	f06f 0301 	mvn.w	r3, #1
 8001f0a:	e093      	b.n	8002034 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    if (buffer == NULL)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <uavcan_register_Name_1_0_deserialize_+0x15c>)
 8001f14:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <uavcan_register_Name_1_0_deserialize_+0x5c>
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001f32:	4a44      	ldr	r2, [pc, #272]	; (8002044 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001f34:	21ca      	movs	r1, #202	; 0xca
 8001f36:	4844      	ldr	r0, [pc, #272]	; (8002048 <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001f38:	f00d f98e 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d309      	bcc.n	8001f5a <uavcan_register_Name_1_0_deserialize_+0x7a>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001f58:	e003      	b.n	8001f62 <uavcan_register_Name_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->name.count = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3308      	adds	r3, #8
 8001f66:	61fb      	str	r3, [r7, #28]
    if (out_obj->name.count > 255U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d902      	bls.n	8001f78 <uavcan_register_Name_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001f72:	f06f 0309 	mvn.w	r3, #9
 8001f76:	e05d      	b.n	8002034 <uavcan_register_Name_1_0_deserialize_+0x154>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <uavcan_register_Name_1_0_deserialize_+0xae>
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001f84:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001f86:	21d9      	movs	r1, #217	; 0xd9
 8001f88:	482f      	ldr	r0, [pc, #188]	; (8002048 <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001f8a:	f00d f965 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e025      	b.n	8001fe0 <uavcan_register_Name_1_0_deserialize_+0x100>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <uavcan_register_Name_1_0_deserialize_+0xca>
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8001fa2:	21dc      	movs	r1, #220	; 0xdc
 8001fa4:	4828      	ldr	r0, [pc, #160]	; (8002048 <uavcan_register_Name_1_0_deserialize_+0x168>)
 8001fa6:	f00d f957 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3308      	adds	r3, #8
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d30a      	bcc.n	8001fca <uavcan_register_Name_1_0_deserialize_+0xea>
        {
            out_obj->name.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	7819      	ldrb	r1, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e004      	b.n	8001fd4 <uavcan_register_Name_1_0_deserialize_+0xf4>
        }
        else
        {
            out_obj->name.elements[_index1_] = 0U;
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4413      	add	r3, r2
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->name.count; ++_index1_)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3d3      	bcc.n	8001f94 <uavcan_register_Name_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3307      	adds	r3, #7
 8001ff0:	f023 0307 	bic.w	r3, r3, #7
 8001ff4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <uavcan_register_Name_1_0_deserialize_+0x12c>
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <uavcan_register_Name_1_0_deserialize_+0x160>)
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <uavcan_register_Name_1_0_deserialize_+0x164>)
 8002004:	21e8      	movs	r1, #232	; 0xe8
 8002006:	4810      	ldr	r0, [pc, #64]	; (8002048 <uavcan_register_Name_1_0_deserialize_+0x168>)
 8002008:	f00d f926 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	69f8      	ldr	r0, [r7, #28]
 8002010:	f7fe ff8e 	bl	8000f30 <nunavutChooseMin>
 8002014:	4603      	mov	r3, r0
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	429a      	cmp	r2, r3
 8002024:	d205      	bcs.n	8002032 <uavcan_register_Name_1_0_deserialize_+0x152>
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <uavcan_register_Name_1_0_deserialize_+0x16c>)
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <uavcan_register_Name_1_0_deserialize_+0x164>)
 800202a:	21ea      	movs	r1, #234	; 0xea
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <uavcan_register_Name_1_0_deserialize_+0x168>)
 800202e:	f00d f913 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08011fe0 	.word	0x08011fe0
 8002040:	08011eb0 	.word	0x08011eb0
 8002044:	08014300 	.word	0x08014300
 8002048:	08011ec8 	.word	0x08011ec8
 800204c:	08011fe4 	.word	0x08011fe4

08002050 <uavcan_register_List_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Request_1_0_deserialize_(
    uavcan_register_List_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <uavcan_register_List_Request_1_0_deserialize_+0x26>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <uavcan_register_List_Request_1_0_deserialize_+0x26>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <uavcan_register_List_Request_1_0_deserialize_+0x2c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <uavcan_register_List_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002076:	f06f 0301 	mvn.w	r3, #1
 800207a:	e048      	b.n	800210e <uavcan_register_List_Request_1_0_deserialize_+0xbe>
    }
    if (buffer == NULL)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <uavcan_register_List_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <uavcan_register_List_Request_1_0_deserialize_+0xc8>)
 8002084:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
    // saturated uint16 index
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <uavcan_register_List_Request_1_0_deserialize_+0x5c>
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 80020a4:	21bf      	movs	r1, #191	; 0xbf
 80020a6:	481f      	ldr	r0, [pc, #124]	; (8002124 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 80020a8:	f00d f8d6 	bl	800f258 <__assert_func>
    out_obj->index = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80020ac:	2310      	movs	r3, #16
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	69f9      	ldr	r1, [r7, #28]
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f7ff f9ca 	bl	800144c <nunavutGetU16>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	801a      	strh	r2, [r3, #0]
    offset_bits += 16U;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3310      	adds	r3, #16
 80020c4:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3307      	adds	r3, #7
 80020ca:	f023 0307 	bic.w	r3, r3, #7
 80020ce:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <uavcan_register_List_Request_1_0_deserialize_+0x96>
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <uavcan_register_List_Request_1_0_deserialize_+0xcc>)
 80020dc:	4a10      	ldr	r2, [pc, #64]	; (8002120 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 80020de:	21c3      	movs	r1, #195	; 0xc3
 80020e0:	4810      	ldr	r0, [pc, #64]	; (8002124 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 80020e2:	f00d f8b9 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80020e6:	69b9      	ldr	r1, [r7, #24]
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f7fe ff21 	bl	8000f30 <nunavutChooseMin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d205      	bcs.n	800210c <uavcan_register_List_Request_1_0_deserialize_+0xbc>
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <uavcan_register_List_Request_1_0_deserialize_+0xd8>)
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <uavcan_register_List_Request_1_0_deserialize_+0xd0>)
 8002104:	21c5      	movs	r1, #197	; 0xc5
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <uavcan_register_List_Request_1_0_deserialize_+0xd4>)
 8002108:	f00d f8a6 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	08011fe0 	.word	0x08011fe0
 800211c:	08011eb0 	.word	0x08011eb0
 8002120:	08014260 	.word	0x08014260
 8002124:	08012010 	.word	0x08012010
 8002128:	08011fe4 	.word	0x08011fe4

0800212c <uavcan_register_List_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_serialize_(
    const uavcan_register_List_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800212c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002130:	b08c      	sub	sp, #48	; 0x30
 8002132:	af04      	add	r7, sp, #16
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <uavcan_register_List_Response_1_0_serialize_+0x20>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <uavcan_register_List_Response_1_0_serialize_+0x20>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <uavcan_register_List_Response_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800214c:	f06f 0301 	mvn.w	r3, #1
 8002150:	e0f7      	b.n	8002342 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2048UL)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002160:	d202      	bcs.n	8002168 <uavcan_register_List_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002162:	f06f 0302 	mvn.w	r3, #2
 8002166:	e0ec      	b.n	8002342 <uavcan_register_List_Response_1_0_serialize_+0x216>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    {   // uavcan.register.Name.1.0 name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <uavcan_register_List_Response_1_0_serialize_+0x58>
 8002176:	4b75      	ldr	r3, [pc, #468]	; (800234c <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8002178:	4a75      	ldr	r2, [pc, #468]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 800217a:	f240 1111 	movw	r1, #273	; 0x111
 800217e:	4875      	ldr	r0, [pc, #468]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002180:	f00d f86a 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <uavcan_register_List_Response_1_0_serialize_+0x70>
 800218e:	4b6f      	ldr	r3, [pc, #444]	; (800234c <uavcan_register_List_Response_1_0_serialize_+0x220>)
 8002190:	4a6f      	ldr	r2, [pc, #444]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002192:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002196:	486f      	ldr	r0, [pc, #444]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002198:	f00d f85e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2048ULL) <= (capacity_bytes * 8U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2200      	movs	r2, #0
 80021a0:	469a      	mov	sl, r3
 80021a2:	4693      	mov	fp, r2
 80021a4:	f51a 6400 	adds.w	r4, sl, #2048	; 0x800
 80021a8:	f14b 0500 	adc.w	r5, fp, #0
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	2200      	movs	r2, #0
 80021b2:	4698      	mov	r8, r3
 80021b4:	4691      	mov	r9, r2
 80021b6:	45a0      	cmp	r8, r4
 80021b8:	eb79 0305 	sbcs.w	r3, r9, r5
 80021bc:	d206      	bcs.n	80021cc <uavcan_register_List_Response_1_0_serialize_+0xa0>
 80021be:	4b66      	ldr	r3, [pc, #408]	; (8002358 <uavcan_register_List_Response_1_0_serialize_+0x22c>)
 80021c0:	4a63      	ldr	r2, [pc, #396]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80021c2:	f240 1113 	movw	r1, #275	; 0x113
 80021c6:	4863      	ldr	r0, [pc, #396]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80021c8:	f00d f846 	bl	800f258 <__assert_func>
        size_t _size_bytes0_ = 256UL;  // Nested object (max) size, in bytes.
 80021cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <uavcan_register_List_Response_1_0_serialize_+0xbe>
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <uavcan_register_List_Response_1_0_serialize_+0x220>)
 80021de:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80021e0:	f240 1115 	movw	r1, #277	; 0x115
 80021e4:	485b      	ldr	r0, [pc, #364]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80021e6:	f00d f837 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d206      	bcs.n	8002206 <uavcan_register_List_Response_1_0_serialize_+0xda>
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <uavcan_register_List_Response_1_0_serialize_+0x230>)
 80021fa:	4a55      	ldr	r2, [pc, #340]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80021fc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002200:	4854      	ldr	r0, [pc, #336]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002202:	f00d f829 	bl	800f258 <__assert_func>
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 8002206:	68f8      	ldr	r0, [r7, #12]
            &obj->name, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
        int8_t _err2_ = uavcan_register_Name_1_0_serialize_(
 8002210:	f107 0210 	add.w	r2, r7, #16
 8002214:	4619      	mov	r1, r3
 8002216:	f7ff fd45 	bl	8001ca4 <uavcan_register_Name_1_0_serialize_>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
        if (_err2_ < 0)
 800221e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da02      	bge.n	800222c <uavcan_register_List_Response_1_0_serialize_+0x100>
        {
            return _err2_;
 8002226:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800222a:	e08a      	b.n	8002342 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) >= 8ULL);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	2b07      	cmp	r3, #7
 8002232:	d806      	bhi.n	8002242 <uavcan_register_List_Response_1_0_serialize_+0x116>
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <uavcan_register_List_Response_1_0_serialize_+0x234>)
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002238:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800223c:	4845      	ldr	r0, [pc, #276]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800223e:	f00d f80b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) <= 2048ULL);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800224a:	d906      	bls.n	800225a <uavcan_register_List_Response_1_0_serialize_+0x12e>
 800224c:	4b45      	ldr	r3, [pc, #276]	; (8002364 <uavcan_register_List_Response_1_0_serialize_+0x238>)
 800224e:	4a40      	ldr	r2, [pc, #256]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002250:	f240 111f 	movw	r1, #287	; 0x11f
 8002254:	483f      	ldr	r0, [pc, #252]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002256:	f00c ffff 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	429a      	cmp	r2, r3
 800226c:	d906      	bls.n	800227c <uavcan_register_List_Response_1_0_serialize_+0x150>
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <uavcan_register_List_Response_1_0_serialize_+0x23c>)
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002272:	f240 1121 	movw	r1, #289	; 0x121
 8002276:	4837      	ldr	r0, [pc, #220]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002278:	f00c ffee 	bl	800f258 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	2b00      	cmp	r3, #0
 8002284:	d037      	beq.n	80022f6 <uavcan_register_List_Response_1_0_serialize_+0x1ca>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f1c3 0308 	rsb	r3, r3, #8
 8002294:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad1_ > 0);
 8002296:	7dbb      	ldrb	r3, [r7, #22]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <uavcan_register_List_Response_1_0_serialize_+0x17e>
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <uavcan_register_List_Response_1_0_serialize_+0x240>)
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80022a0:	f44f 7193 	mov.w	r1, #294	; 0x126
 80022a4:	482b      	ldr	r0, [pc, #172]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80022a6:	f00c ffd7 	bl	800f258 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80022aa:	7dbb      	ldrb	r3, [r7, #22]
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9cd 2300 	strd	r2, r3, [sp]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	69b9      	ldr	r1, [r7, #24]
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7fe ffe8 	bl	8001294 <nunavutSetUxx>
 80022c4:	4603      	mov	r3, r0
 80022c6:	757b      	strb	r3, [r7, #21]
        if (_err3_ < 0)
 80022c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da02      	bge.n	80022d6 <uavcan_register_List_Response_1_0_serialize_+0x1aa>
        {
            return _err3_;
 80022d0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022d4:	e035      	b.n	8002342 <uavcan_register_List_Response_1_0_serialize_+0x216>
        }
        offset_bits += _pad1_;
 80022d6:	7dbb      	ldrb	r3, [r7, #22]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	4413      	add	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <uavcan_register_List_Response_1_0_serialize_+0x1ca>
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <uavcan_register_List_Response_1_0_serialize_+0x220>)
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 80022ec:	f240 112d 	movw	r1, #301	; 0x12d
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 80022f2:	f00c ffb1 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b07      	cmp	r3, #7
 80022fa:	d806      	bhi.n	800230a <uavcan_register_List_Response_1_0_serialize_+0x1de>
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <uavcan_register_List_Response_1_0_serialize_+0x244>)
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002300:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002304:	4813      	ldr	r0, [pc, #76]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002306:	f00c ffa7 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2048ULL);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002310:	d906      	bls.n	8002320 <uavcan_register_List_Response_1_0_serialize_+0x1f4>
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <uavcan_register_List_Response_1_0_serialize_+0x248>)
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 8002316:	f240 1131 	movw	r1, #305	; 0x131
 800231a:	480e      	ldr	r0, [pc, #56]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 800231c:	f00c ff9c 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <uavcan_register_List_Response_1_0_serialize_+0x20c>
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <uavcan_register_List_Response_1_0_serialize_+0x220>)
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <uavcan_register_List_Response_1_0_serialize_+0x224>)
 800232e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <uavcan_register_List_Response_1_0_serialize_+0x228>)
 8002334:	f00c ff90 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234c:	08011eb0 	.word	0x08011eb0
 8002350:	08014328 	.word	0x08014328
 8002354:	08012010 	.word	0x08012010
 8002358:	08011f44 	.word	0x08011f44
 800235c:	0801208c 	.word	0x0801208c
 8002360:	080120c4 	.word	0x080120c4
 8002364:	080120e4 	.word	0x080120e4
 8002368:	08012104 	.word	0x08012104
 800236c:	0801212c 	.word	0x0801212c
 8002370:	08011fb4 	.word	0x08011fb4
 8002374:	08011fc8 	.word	0x08011fc8

08002378 <uavcan_register_List_Response_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_List_Response_1_0_deserialize_(
    uavcan_register_List_Response_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <uavcan_register_List_Response_1_0_deserialize_+0x26>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <uavcan_register_List_Response_1_0_deserialize_+0x26>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <uavcan_register_List_Response_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800239e:	f06f 0301 	mvn.w	r3, #1
 80023a2:	e078      	b.n	8002496 <uavcan_register_List_Response_1_0_deserialize_+0x11e>
    }
    if (buffer == NULL)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <uavcan_register_List_Response_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <uavcan_register_List_Response_1_0_deserialize_+0x128>)
 80023ac:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <uavcan_register_List_Response_1_0_deserialize_+0x5e>
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 80023ca:	4a37      	ldr	r2, [pc, #220]	; (80024a8 <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 80023cc:	f240 1159 	movw	r1, #345	; 0x159
 80023d0:	4836      	ldr	r0, [pc, #216]	; (80024ac <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 80023d2:	f00c ff41 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <uavcan_register_List_Response_1_0_deserialize_+0x76>
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 80023e4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80023e8:	4830      	ldr	r0, [pc, #192]	; (80024ac <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 80023ea:	f00c ff35 	bl	800f258 <__assert_func>
    {
        size_t _size_bytes1_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08db      	lsrs	r3, r3, #3
 80023f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fd9b 	bl	8000f30 <nunavutChooseMin>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <uavcan_register_List_Response_1_0_deserialize_+0xa2>
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8002410:	f240 115d 	movw	r1, #349	; 0x15d
 8002414:	4825      	ldr	r0, [pc, #148]	; (80024ac <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8002416:	f00c ff1f 	bl	800f258 <__assert_func>
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 800241a:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes1_);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4413      	add	r3, r2
 8002424:	f107 0214 	add.w	r2, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	f7ff fd59 	bl	8001ee0 <uavcan_register_Name_1_0_deserialize_>
 800242e:	4603      	mov	r3, r0
 8002430:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8002432:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da02      	bge.n	8002440 <uavcan_register_List_Response_1_0_deserialize_+0xc8>
        {
            return _err4_;
 800243a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800243e:	e02a      	b.n	8002496 <uavcan_register_List_Response_1_0_deserialize_+0x11e>
        }
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested serialized representation.
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3307      	adds	r3, #7
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <uavcan_register_List_Response_1_0_deserialize_+0xf4>
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <uavcan_register_List_Response_1_0_deserialize_+0x12c>)
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 8002462:	f240 1167 	movw	r1, #359	; 0x167
 8002466:	4811      	ldr	r0, [pc, #68]	; (80024ac <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8002468:	f00c fef6 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7fe fd5e 	bl	8000f30 <nunavutChooseMin>
 8002474:	4603      	mov	r3, r0
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	429a      	cmp	r2, r3
 8002484:	d206      	bcs.n	8002494 <uavcan_register_List_Response_1_0_deserialize_+0x11c>
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <uavcan_register_List_Response_1_0_deserialize_+0x138>)
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <uavcan_register_List_Response_1_0_deserialize_+0x130>)
 800248a:	f240 1169 	movw	r1, #361	; 0x169
 800248e:	4807      	ldr	r0, [pc, #28]	; (80024ac <uavcan_register_List_Response_1_0_deserialize_+0x134>)
 8002490:	f00c fee2 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	08011fe0 	.word	0x08011fe0
 80024a4:	08011eb0 	.word	0x08011eb0
 80024a8:	080142d0 	.word	0x080142d0
 80024ac:	08012010 	.word	0x08012010
 80024b0:	08011fe4 	.word	0x08011fe4

080024b4 <uavcan_register_List_Response_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_List_Response_1_0_initialize_(uavcan_register_List_Response_1_0* const out_obj)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <uavcan_register_List_Response_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_List_Response_1_0_deserialize_(out_obj, &buf, &size_bytes);
 80024ca:	f107 0210 	add.w	r2, r7, #16
 80024ce:	f107 030f 	add.w	r3, r7, #15
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff4f 	bl	8002378 <uavcan_register_List_Response_1_0_deserialize_>
 80024da:	4603      	mov	r3, r0
 80024dc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80024de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da06      	bge.n	80024f4 <uavcan_register_List_Response_1_0_initialize_+0x40>
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <uavcan_register_List_Response_1_0_initialize_+0x48>)
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <uavcan_register_List_Response_1_0_initialize_+0x4c>)
 80024ea:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80024ee:	4805      	ldr	r0, [pc, #20]	; (8002504 <uavcan_register_List_Response_1_0_initialize_+0x50>)
 80024f0:	f00c feb2 	bl	800f258 <__assert_func>
        (void) err;
    }
}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	08012138 	.word	0x08012138
 8002500:	080142a0 	.word	0x080142a0
 8002504:	08012010 	.word	0x08012010

08002508 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b08c      	sub	sp, #48	; 0x30
 800250e:	af04      	add	r7, sp, #16
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <uavcan_node_Health_1_0_serialize_+0x20>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <uavcan_node_Health_1_0_serialize_+0x20>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002528:	f06f 0301 	mvn.w	r3, #1
 800252c:	e092      	b.n	8002654 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	2b07      	cmp	r3, #7
 800253a:	d802      	bhi.n	8002542 <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800253c:	f06f 0302 	mvn.w	r3, #2
 8002540:	e088      	b.n	8002654 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <uavcan_node_Health_1_0_serialize_+0x54>
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002552:	4a44      	ldr	r2, [pc, #272]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002554:	2185      	movs	r1, #133	; 0x85
 8002556:	4844      	ldr	r0, [pc, #272]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002558:	f00c fe7e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2200      	movs	r2, #0
 8002560:	469a      	mov	sl, r3
 8002562:	4693      	mov	fp, r2
 8002564:	f11a 0402 	adds.w	r4, sl, #2
 8002568:	f14b 0500 	adc.w	r5, fp, #0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	2200      	movs	r2, #0
 8002572:	4698      	mov	r8, r3
 8002574:	4691      	mov	r9, r2
 8002576:	45a0      	cmp	r8, r4
 8002578:	eb79 0305 	sbcs.w	r3, r9, r5
 800257c:	d205      	bcs.n	800258a <uavcan_node_Health_1_0_serialize_+0x82>
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <uavcan_node_Health_1_0_serialize_+0x164>)
 8002580:	4a38      	ldr	r2, [pc, #224]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002582:	2186      	movs	r1, #134	; 0x86
 8002584:	4838      	ldr	r0, [pc, #224]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002586:	f00c fe67 	bl	800f258 <__assert_func>
        uint8_t _sat0_ = obj->value;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002590:	7efb      	ldrb	r3, [r7, #27]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d901      	bls.n	800259a <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 8002596:	2303      	movs	r3, #3
 8002598:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	7efa      	ldrb	r2, [r7, #27]
 80025a4:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3302      	adds	r3, #2
 80025aa:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d035      	beq.n	8002622 <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f1c3 0308 	rsb	r3, r3, #8
 80025c4:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <uavcan_node_Health_1_0_serialize_+0xd0>
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <uavcan_node_Health_1_0_serialize_+0x168>)
 80025ce:	4a25      	ldr	r2, [pc, #148]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80025d0:	2192      	movs	r1, #146	; 0x92
 80025d2:	4825      	ldr	r0, [pc, #148]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 80025d4:	f00c fe40 	bl	800f258 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9cd 2300 	strd	r2, r3, [sp]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f7fe fe51 	bl	8001294 <nunavutSetUxx>
 80025f2:	4603      	mov	r3, r0
 80025f4:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80025f6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 80025fe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002602:	e027      	b.n	8002654 <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <uavcan_node_Health_1_0_serialize_+0x11a>
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 800261a:	2199      	movs	r1, #153	; 0x99
 800261c:	4812      	ldr	r0, [pc, #72]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 800261e:	f00c fe1b 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d005      	beq.n	8002634 <uavcan_node_Health_1_0_serialize_+0x12c>
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <uavcan_node_Health_1_0_serialize_+0x16c>)
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 800262c:	219c      	movs	r1, #156	; 0x9c
 800262e:	480e      	ldr	r0, [pc, #56]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002630:	f00c fe12 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <uavcan_node_Health_1_0_serialize_+0x142>
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002640:	4a08      	ldr	r2, [pc, #32]	; (8002664 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002642:	219d      	movs	r1, #157	; 0x9d
 8002644:	4808      	ldr	r0, [pc, #32]	; (8002668 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002646:	f00c fe07 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	08011eb0 	.word	0x08011eb0
 8002664:	080141fc 	.word	0x080141fc
 8002668:	08012144 	.word	0x08012144
 800266c:	080121bc 	.word	0x080121bc
 8002670:	08011fa8 	.word	0x08011fa8
 8002674:	080121ec 	.word	0x080121ec

08002678 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b08c      	sub	sp, #48	; 0x30
 800267e:	af04      	add	r7, sp, #16
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <uavcan_node_Mode_1_0_serialize_+0x20>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <uavcan_node_Mode_1_0_serialize_+0x20>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002698:	f06f 0301 	mvn.w	r3, #1
 800269c:	e092      	b.n	80027c4 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d802      	bhi.n	80026b2 <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80026ac:	f06f 0302 	mvn.w	r3, #2
 80026b0:	e088      	b.n	80027c4 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <uavcan_node_Mode_1_0_serialize_+0x54>
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80026c2:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80026c4:	2185      	movs	r1, #133	; 0x85
 80026c6:	4844      	ldr	r0, [pc, #272]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80026c8:	f00c fdc6 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2200      	movs	r2, #0
 80026d0:	469a      	mov	sl, r3
 80026d2:	4693      	mov	fp, r2
 80026d4:	f11a 0403 	adds.w	r4, sl, #3
 80026d8:	f14b 0500 	adc.w	r5, fp, #0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	2200      	movs	r2, #0
 80026e2:	4698      	mov	r8, r3
 80026e4:	4691      	mov	r9, r2
 80026e6:	45a0      	cmp	r8, r4
 80026e8:	eb79 0305 	sbcs.w	r3, r9, r5
 80026ec:	d205      	bcs.n	80026fa <uavcan_node_Mode_1_0_serialize_+0x82>
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <uavcan_node_Mode_1_0_serialize_+0x164>)
 80026f0:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80026f2:	2186      	movs	r1, #134	; 0x86
 80026f4:	4838      	ldr	r0, [pc, #224]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80026f6:	f00c fdaf 	bl	800f258 <__assert_func>
        uint8_t _sat0_ = obj->value;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002700:	7efb      	ldrb	r3, [r7, #27]
 8002702:	2b07      	cmp	r3, #7
 8002704:	d901      	bls.n	800270a <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 8002706:	2307      	movs	r3, #7
 8002708:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4413      	add	r3, r2
 8002712:	7efa      	ldrb	r2, [r7, #27]
 8002714:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3303      	adds	r3, #3
 800271a:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	2b00      	cmp	r3, #0
 8002724:	d035      	beq.n	8002792 <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f1c3 0308 	rsb	r3, r3, #8
 8002734:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <uavcan_node_Mode_1_0_serialize_+0xd0>
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <uavcan_node_Mode_1_0_serialize_+0x168>)
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002740:	2192      	movs	r1, #146	; 0x92
 8002742:	4825      	ldr	r0, [pc, #148]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002744:	f00c fd88 	bl	800f258 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9cd 2300 	strd	r2, r3, [sp]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7fe fd99 	bl	8001294 <nunavutSetUxx>
 8002762:	4603      	mov	r3, r0
 8002764:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002766:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800276a:	2b00      	cmp	r3, #0
 800276c:	da02      	bge.n	8002774 <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 800276e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002772:	e027      	b.n	80027c4 <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <uavcan_node_Mode_1_0_serialize_+0x11a>
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800278a:	2199      	movs	r1, #153	; 0x99
 800278c:	4812      	ldr	r0, [pc, #72]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800278e:	f00c fd63 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d005      	beq.n	80027a4 <uavcan_node_Mode_1_0_serialize_+0x12c>
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <uavcan_node_Mode_1_0_serialize_+0x16c>)
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800279c:	219c      	movs	r1, #156	; 0x9c
 800279e:	480e      	ldr	r0, [pc, #56]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80027a0:	f00c fd5a 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <uavcan_node_Mode_1_0_serialize_+0x142>
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80027b0:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80027b2:	219d      	movs	r1, #157	; 0x9d
 80027b4:	4808      	ldr	r0, [pc, #32]	; (80027d8 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80027b6:	f00c fd4f 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ce:	bf00      	nop
 80027d0:	08011eb0 	.word	0x08011eb0
 80027d4:	08014220 	.word	0x08014220
 80027d8:	08012200 	.word	0x08012200
 80027dc:	08012278 	.word	0x08012278
 80027e0:	08011fa8 	.word	0x08011fa8
 80027e4:	080121ec 	.word	0x080121ec

080027e8 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b0a4      	sub	sp, #144	; 0x90
 80027ee:	af04      	add	r7, sp, #16
 80027f0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80027f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80027f4:	657a      	str	r2, [r7, #84]	; 0x54
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 80027fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002808:	f06f 0301 	mvn.w	r3, #1
 800280c:	e273      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800280e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	67bb      	str	r3, [r7, #120]	; 0x78
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	2b37      	cmp	r3, #55	; 0x37
 800281a:	d802      	bhi.n	8002822 <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800281c:	f06f 0302 	mvn.w	r3, #2
 8002820:	e269      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	67fb      	str	r3, [r7, #124]	; 0x7c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8002830:	4ba8      	ldr	r3, [pc, #672]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002832:	4aa9      	ldr	r2, [pc, #676]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002834:	218a      	movs	r1, #138	; 0x8a
 8002836:	48a9      	ldr	r0, [pc, #676]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002838:	f00c fd0e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 800283c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800283e:	2200      	movs	r2, #0
 8002840:	4698      	mov	r8, r3
 8002842:	4691      	mov	r9, r2
 8002844:	f118 0420 	adds.w	r4, r8, #32
 8002848:	f149 0500 	adc.w	r5, r9, #0
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	2200      	movs	r2, #0
 8002852:	469a      	mov	sl, r3
 8002854:	4693      	mov	fp, r2
 8002856:	45a2      	cmp	sl, r4
 8002858:	eb7b 0305 	sbcs.w	r3, fp, r5
 800285c:	d205      	bcs.n	800286a <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 800285e:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <uavcan_node_Heartbeat_1_0_serialize_+0x2f8>)
 8002860:	4a9d      	ldr	r2, [pc, #628]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002862:	218b      	movs	r1, #139	; 0x8b
 8002864:	489d      	ldr	r0, [pc, #628]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002866:	f00c fcf7 	bl	800f258 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->uptime, 32U);
 800286a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
 8002872:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002874:	2320      	movs	r3, #32
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800287c:	e9cd 3400 	strd	r3, r4, [sp]
 8002880:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002882:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002884:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002886:	f7fe fd05 	bl	8001294 <nunavutSetUxx>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (_err0_ < 0)
 8002890:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8002894:	2b00      	cmp	r3, #0
 8002896:	da02      	bge.n	800289e <uavcan_node_Heartbeat_1_0_serialize_+0xb6>
        {
            return _err0_;
 8002898:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800289c:	e22b      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += 32U;
 800289e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a0:	3320      	adds	r3, #32
 80028a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80028a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03a      	beq.n	8002924 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80028ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f1c3 0308 	rsb	r3, r3, #8
 80028bc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        NUNAVUT_ASSERT(_pad0_ > 0);
 80028c0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <uavcan_node_Heartbeat_1_0_serialize_+0xec>
 80028c8:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <uavcan_node_Heartbeat_1_0_serialize_+0x2fc>)
 80028ca:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80028cc:	2197      	movs	r1, #151	; 0x97
 80028ce:	4883      	ldr	r0, [pc, #524]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80028d0:	f00c fcc2 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028d4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9cd 2300 	strd	r2, r3, [sp]
 80028e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028e8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80028ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028ec:	f7fe fcd2 	bl	8001294 <nunavutSetUxx>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        if (_err1_ < 0)
 80028f6:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	da02      	bge.n	8002904 <uavcan_node_Heartbeat_1_0_serialize_+0x11c>
        {
            return _err1_;
 80028fe:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8002902:	e1f8      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad0_;
 8002904:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8002908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800290a:	4413      	add	r3, r2
 800290c:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800290e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <uavcan_node_Heartbeat_1_0_serialize_+0x13c>
 8002918:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800291c:	219e      	movs	r1, #158	; 0x9e
 800291e:	486f      	ldr	r0, [pc, #444]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002920:	f00c fc9a 	bl	800f258 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <uavcan_node_Heartbeat_1_0_serialize_+0x152>
 800292e:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002930:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002932:	21a1      	movs	r1, #161	; 0xa1
 8002934:	4869      	ldr	r0, [pc, #420]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002936:	f00c fc8f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800293a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <uavcan_node_Heartbeat_1_0_serialize_+0x168>
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002946:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002948:	21a2      	movs	r1, #162	; 0xa2
 800294a:	4864      	ldr	r0, [pc, #400]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 800294c:	f00c fc84 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002952:	2200      	movs	r2, #0
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
 8002956:	647a      	str	r2, [r7, #68]	; 0x44
 8002958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800295c:	460b      	mov	r3, r1
 800295e:	3308      	adds	r3, #8
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
 8002962:	4613      	mov	r3, r2
 8002964:	f143 0300 	adc.w	r3, r3, #0
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	2200      	movs	r2, #0
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
 8002972:	637a      	str	r2, [r7, #52]	; 0x34
 8002974:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002978:	4623      	mov	r3, r4
 800297a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800297e:	4602      	mov	r2, r0
 8002980:	4293      	cmp	r3, r2
 8002982:	462b      	mov	r3, r5
 8002984:	460a      	mov	r2, r1
 8002986:	4193      	sbcs	r3, r2
 8002988:	d205      	bcs.n	8002996 <uavcan_node_Heartbeat_1_0_serialize_+0x1ae>
 800298a:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <uavcan_node_Heartbeat_1_0_serialize_+0x300>)
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 800298e:	21a3      	movs	r1, #163	; 0xa3
 8002990:	4852      	ldr	r0, [pc, #328]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002992:	f00c fc61 	bl	800f258 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002996:	2301      	movs	r3, #1
 8002998:	66bb      	str	r3, [r7, #104]	; 0x68
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800299a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <uavcan_node_Heartbeat_1_0_serialize_+0x1c8>
 80029a4:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 80029a6:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80029a8:	21a5      	movs	r1, #165	; 0xa5
 80029aa:	484c      	ldr	r0, [pc, #304]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80029ac:	f00c fc54 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 80029b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b6:	4413      	add	r3, r2
 80029b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d205      	bcs.n	80029ca <uavcan_node_Heartbeat_1_0_serialize_+0x1e2>
 80029be:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <uavcan_node_Heartbeat_1_0_serialize_+0x304>)
 80029c0:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 80029c2:	21a6      	movs	r1, #166	; 0xa6
 80029c4:	4845      	ldr	r0, [pc, #276]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 80029c6:	f00c fc47 	bl	800f258 <__assert_func>
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 80029ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029cc:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 80029ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d4:	1899      	adds	r1, r3, r2
        int8_t _err2_ = uavcan_node_Health_1_0_serialize_(
 80029d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fd94 	bl	8002508 <uavcan_node_Health_1_0_serialize_>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        if (_err2_ < 0)
 80029e6:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da02      	bge.n	80029f4 <uavcan_node_Heartbeat_1_0_serialize_+0x20c>
        {
            return _err2_;
 80029ee:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80029f2:	e180      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 80029f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d005      	beq.n	8002a08 <uavcan_node_Heartbeat_1_0_serialize_+0x220>
 80029fc:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <uavcan_node_Heartbeat_1_0_serialize_+0x308>)
 80029fe:	4a36      	ldr	r2, [pc, #216]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a00:	21ae      	movs	r1, #174	; 0xae
 8002a02:	4836      	ldr	r0, [pc, #216]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a04:	f00c fc28 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a0e:	4413      	add	r3, r2
 8002a10:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d905      	bls.n	8002a28 <uavcan_node_Heartbeat_1_0_serialize_+0x240>
 8002a1c:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002a1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a20:	21b0      	movs	r1, #176	; 0xb0
 8002a22:	482e      	ldr	r0, [pc, #184]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a24:	f00c fc18 	bl	800f258 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03a      	beq.n	8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f1c3 0308 	rsb	r3, r3, #8
 8002a40:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        NUNAVUT_ASSERT(_pad1_ > 0);
 8002a44:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <uavcan_node_Heartbeat_1_0_serialize_+0x270>
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002a4e:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002a50:	21b5      	movs	r1, #181	; 0xb5
 8002a52:	4822      	ldr	r0, [pc, #136]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002a54:	f00c fc00 	bl	800f258 <__assert_func>
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002a58:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9cd 2300 	strd	r2, r3, [sp]
 8002a6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a6c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a70:	f7fe fc10 	bl	8001294 <nunavutSetUxx>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if (_err3_ < 0)
 8002a7a:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da02      	bge.n	8002a88 <uavcan_node_Heartbeat_1_0_serialize_+0x2a0>
        {
            return _err3_;
 8002a82:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002a86:	e136      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad1_;
 8002a88:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a8e:	4413      	add	r3, r2
 8002a90:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x2c0>
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002aa0:	21bc      	movs	r1, #188	; 0xbc
 8002aa2:	480e      	ldr	r0, [pc, #56]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002aa4:	f00c fbd8 	bl	800f258 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <uavcan_node_Heartbeat_1_0_serialize_+0x2d6>
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002ab4:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002ab6:	21bf      	movs	r1, #191	; 0xbf
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002aba:	f00c fbcd 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d019      	beq.n	8002afc <uavcan_node_Heartbeat_1_0_serialize_+0x314>
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <uavcan_node_Heartbeat_1_0_serialize_+0x2ec>)
 8002aca:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <uavcan_node_Heartbeat_1_0_serialize_+0x2f0>)
 8002acc:	21c0      	movs	r1, #192	; 0xc0
 8002ace:	4803      	ldr	r0, [pc, #12]	; (8002adc <uavcan_node_Heartbeat_1_0_serialize_+0x2f4>)
 8002ad0:	f00c fbc2 	bl	800f258 <__assert_func>
 8002ad4:	08011eb0 	.word	0x08011eb0
 8002ad8:	080141d4 	.word	0x080141d4
 8002adc:	080122a8 	.word	0x080122a8
 8002ae0:	08012324 	.word	0x08012324
 8002ae4:	08011fa8 	.word	0x08011fa8
 8002ae8:	08011f78 	.word	0x08011f78
 8002aec:	0801208c 	.word	0x0801208c
 8002af0:	08012354 	.word	0x08012354
 8002af4:	08012104 	.word	0x08012104
 8002af8:	0801212c 	.word	0x0801212c
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002afe:	2200      	movs	r2, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002b08:	460b      	mov	r3, r1
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	f143 0300 	adc.w	r3, r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	61fa      	str	r2, [r7, #28]
 8002b20:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002b24:	4623      	mov	r3, r4
 8002b26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	462b      	mov	r3, r5
 8002b30:	460a      	mov	r2, r1
 8002b32:	4193      	sbcs	r3, r2
 8002b34:	d205      	bcs.n	8002b42 <uavcan_node_Heartbeat_1_0_serialize_+0x35a>
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8002b38:	4a72      	ldr	r2, [pc, #456]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b3a:	21c1      	movs	r1, #193	; 0xc1
 8002b3c:	4872      	ldr	r0, [pc, #456]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b3e:	f00c fb8b 	bl	800f258 <__assert_func>
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002b42:	2301      	movs	r3, #1
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <uavcan_node_Heartbeat_1_0_serialize_+0x374>
 8002b50:	4b6e      	ldr	r3, [pc, #440]	; (8002d0c <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002b52:	4a6c      	ldr	r2, [pc, #432]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b54:	21c3      	movs	r1, #195	; 0xc3
 8002b56:	486c      	ldr	r0, [pc, #432]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b58:	f00c fb7e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8002b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b62:	4413      	add	r3, r2
 8002b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d205      	bcs.n	8002b76 <uavcan_node_Heartbeat_1_0_serialize_+0x38e>
 8002b6a:	4b69      	ldr	r3, [pc, #420]	; (8002d10 <uavcan_node_Heartbeat_1_0_serialize_+0x528>)
 8002b6c:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002b6e:	21c4      	movs	r1, #196	; 0xc4
 8002b70:	4865      	ldr	r0, [pc, #404]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002b72:	f00c fb71 	bl	800f258 <__assert_func>
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b80:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_node_Mode_1_0_serialize_(
 8002b82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7ff fd76 	bl	8002678 <uavcan_node_Mode_1_0_serialize_>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        if (_err4_ < 0)
 8002b92:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da02      	bge.n	8002ba0 <uavcan_node_Heartbeat_1_0_serialize_+0x3b8>
        {
            return _err4_;
 8002b9a:	f997 3071 	ldrsb.w	r3, [r7, #113]	; 0x71
 8002b9e:	e0aa      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d005      	beq.n	8002bb4 <uavcan_node_Heartbeat_1_0_serialize_+0x3cc>
 8002ba8:	4b5a      	ldr	r3, [pc, #360]	; (8002d14 <uavcan_node_Heartbeat_1_0_serialize_+0x52c>)
 8002baa:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002bac:	21cc      	movs	r1, #204	; 0xcc
 8002bae:	4856      	ldr	r0, [pc, #344]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002bb0:	f00c fb52 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002bba:	4413      	add	r3, r2
 8002bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8002bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d905      	bls.n	8002bd4 <uavcan_node_Heartbeat_1_0_serialize_+0x3ec>
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <uavcan_node_Heartbeat_1_0_serialize_+0x530>)
 8002bca:	4a4e      	ldr	r2, [pc, #312]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002bcc:	21ce      	movs	r1, #206	; 0xce
 8002bce:	484e      	ldr	r0, [pc, #312]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002bd0:	f00c fb42 	bl	800f258 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <uavcan_node_Heartbeat_1_0_serialize_+0x402>
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002be0:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002be2:	21d1      	movs	r1, #209	; 0xd1
 8002be4:	4848      	ldr	r0, [pc, #288]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002be6:	f00c fb37 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bec:	2200      	movs	r2, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	617a      	str	r2, [r7, #20]
 8002bf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	f143 0300 	adc.w	r3, r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c12:	4623      	mov	r3, r4
 8002c14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	460a      	mov	r2, r1
 8002c20:	4193      	sbcs	r3, r2
 8002c22:	d205      	bcs.n	8002c30 <uavcan_node_Heartbeat_1_0_serialize_+0x448>
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <uavcan_node_Heartbeat_1_0_serialize_+0x518>)
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002c28:	21d2      	movs	r1, #210	; 0xd2
 8002c2a:	4837      	ldr	r0, [pc, #220]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002c2c:	f00c fb14 	bl	800f258 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c36:	4413      	add	r3, r2
 8002c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c3a:	7992      	ldrb	r2, [r2, #6]
 8002c3c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c40:	3308      	adds	r3, #8
 8002c42:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03a      	beq.n	8002cc4 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f1c3 0308 	rsb	r3, r3, #8
 8002c5c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(_pad2_ > 0);
 8002c60:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <uavcan_node_Heartbeat_1_0_serialize_+0x48c>
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <uavcan_node_Heartbeat_1_0_serialize_+0x534>)
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002c6c:	21da      	movs	r1, #218	; 0xda
 8002c6e:	4826      	ldr	r0, [pc, #152]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002c70:	f00c faf2 	bl	800f258 <__assert_func>
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002c74:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9cd 2300 	strd	r2, r3, [sp]
 8002c86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c88:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002c8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c8c:	f7fe fb02 	bl	8001294 <nunavutSetUxx>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if (_err5_ < 0)
 8002c96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da02      	bge.n	8002ca4 <uavcan_node_Heartbeat_1_0_serialize_+0x4bc>
        {
            return _err5_;
 8002c9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ca2:	e028      	b.n	8002cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x50e>
        }
        offset_bits += _pad2_;
 8002ca4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002ca8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002caa:	4413      	add	r3, r2
 8002cac:	67fb      	str	r3, [r7, #124]	; 0x7c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <uavcan_node_Heartbeat_1_0_serialize_+0x4dc>
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002cbc:	21e1      	movs	r1, #225	; 0xe1
 8002cbe:	4812      	ldr	r0, [pc, #72]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002cc0:	f00c faca 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8002cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc6:	2b38      	cmp	r3, #56	; 0x38
 8002cc8:	d005      	beq.n	8002cd6 <uavcan_node_Heartbeat_1_0_serialize_+0x4ee>
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <uavcan_node_Heartbeat_1_0_serialize_+0x538>)
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002cce:	21e4      	movs	r1, #228	; 0xe4
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002cd2:	f00c fac1 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <uavcan_node_Heartbeat_1_0_serialize_+0x504>
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <uavcan_node_Heartbeat_1_0_serialize_+0x524>)
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <uavcan_node_Heartbeat_1_0_serialize_+0x51c>)
 8002ce4:	21e5      	movs	r1, #229	; 0xe5
 8002ce6:	4808      	ldr	r0, [pc, #32]	; (8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x520>)
 8002ce8:	f00c fab6 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3780      	adds	r7, #128	; 0x80
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d00:	08011f78 	.word	0x08011f78
 8002d04:	080141d4 	.word	0x080141d4
 8002d08:	080122a8 	.word	0x080122a8
 8002d0c:	08011eb0 	.word	0x08011eb0
 8002d10:	08012374 	.word	0x08012374
 8002d14:	080123ac 	.word	0x080123ac
 8002d18:	08012104 	.word	0x08012104
 8002d1c:	080123cc 	.word	0x080123cc
 8002d20:	080123d8 	.word	0x080123d8

08002d24 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b092      	sub	sp, #72	; 0x48
 8002d2a:	af04      	add	r7, sp, #16
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24
 8002d2e:	6239      	str	r1, [r7, #32]
 8002d30:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <uavcan_primitive_array_Real64_1_0_serialize_+0x20>
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <uavcan_primitive_array_Real64_1_0_serialize_+0x20>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <uavcan_primitive_array_Real64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d44:	f06f 0301 	mvn.w	r3, #1
 8002d48:	e107      	b.n	8002f5a <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	f640 0207 	movw	r2, #2055	; 0x807
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d802      	bhi.n	8002d62 <uavcan_primitive_array_Real64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002d5c:	f06f 0302 	mvn.w	r3, #2
 8002d60:	e0fb      	b.n	8002f5a <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <uavcan_primitive_array_Real64_1_0_serialize_+0x58>
 8002d70:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002d72:	4a7d      	ldr	r2, [pc, #500]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	487d      	ldr	r0, [pc, #500]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002d78:	f00c fa6e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	2200      	movs	r2, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	617a      	str	r2, [r7, #20]
 8002d84:	f640 0308 	movw	r3, #2056	; 0x808
 8002d88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	eb12 0803 	adds.w	r8, r2, r3
 8002d92:	460b      	mov	r3, r1
 8002d94:	f143 0900 	adc.w	r9, r3, #0
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	60fa      	str	r2, [r7, #12]
 8002da2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002da6:	460b      	mov	r3, r1
 8002da8:	4543      	cmp	r3, r8
 8002daa:	4613      	mov	r3, r2
 8002dac:	eb73 0309 	sbcs.w	r3, r3, r9
 8002db0:	d205      	bcs.n	8002dbe <uavcan_primitive_array_Real64_1_0_serialize_+0x9a>
 8002db2:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <uavcan_primitive_array_Real64_1_0_serialize_+0x24c>)
 8002db4:	4a6c      	ldr	r2, [pc, #432]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002db6:	2181      	movs	r1, #129	; 0x81
 8002db8:	486c      	ldr	r0, [pc, #432]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002dba:	f00c fa4d 	bl	800f258 <__assert_func>
        if (obj->value.count > 32)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d902      	bls.n	8002dce <uavcan_primitive_array_Real64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002dc8:	f06f 0309 	mvn.w	r3, #9
 8002dcc:	e0c5      	b.n	8002f5a <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	6a3a      	ldr	r2, [r7, #32]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2ca      	uxtb	r2, r1
 8002dde:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	3308      	adds	r3, #8
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <uavcan_primitive_array_Real64_1_0_serialize_+0xd8>
 8002df0:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002df2:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002df4:	2189      	movs	r1, #137	; 0x89
 8002df6:	485d      	ldr	r0, [pc, #372]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002df8:	f00c fa2e 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002e00:	e041      	b.n	8002e86 <uavcan_primitive_array_Real64_1_0_serialize_+0x162>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <uavcan_primitive_array_Real64_1_0_serialize_+0xf4>
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002e0e:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002e10:	218c      	movs	r1, #140	; 0x8c
 8002e12:	4856      	ldr	r0, [pc, #344]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002e14:	f00c fa20 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	469a      	mov	sl, r3
 8002e1e:	4693      	mov	fp, r2
 8002e20:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 8002e24:	f14b 0500 	adc.w	r5, fp, #0
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e36:	460b      	mov	r3, r1
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	41ab      	sbcs	r3, r5
 8002e3e:	d205      	bcs.n	8002e4c <uavcan_primitive_array_Real64_1_0_serialize_+0x128>
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <uavcan_primitive_array_Real64_1_0_serialize_+0x250>)
 8002e42:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002e44:	218d      	movs	r1, #141	; 0x8d
 8002e46:	4849      	ldr	r0, [pc, #292]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002e48:	f00c fa06 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- assume the native representation of float64 is conformant.
            static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
            const int8_t _err0_ = nunavutSetF64(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_]);
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	e9cd 2300 	strd	r2, r3, [sp]
 8002e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e60:	6a38      	ldr	r0, [r7, #32]
 8002e62:	f7fe feed 	bl	8001c40 <nunavutSetF64>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 8002e6c:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da02      	bge.n	8002e7a <uavcan_primitive_array_Real64_1_0_serialize_+0x156>
            {
                return _err0_;
 8002e74:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8002e78:	e06f      	b.n	8002f5a <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
            }
            offset_bits += 64U;
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	3340      	adds	r3, #64	; 0x40
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	3301      	adds	r3, #1
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3b7      	bcc.n	8002e02 <uavcan_primitive_array_Real64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03a      	beq.n	8002f12 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f1c3 0308 	rsb	r3, r3, #8
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <uavcan_primitive_array_Real64_1_0_serialize_+0x19e>
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <uavcan_primitive_array_Real64_1_0_serialize_+0x254>)
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002eba:	219b      	movs	r1, #155	; 0x9b
 8002ebc:	482b      	ldr	r0, [pc, #172]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002ebe:	f00c f9cb 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed8:	6a38      	ldr	r0, [r7, #32]
 8002eda:	f7fe f9db 	bl	8001294 <nunavutSetUxx>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8002ee4:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	da02      	bge.n	8002ef2 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ce>
        {
            return _err1_;
 8002eec:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8002ef0:	e033      	b.n	8002f5a <uavcan_primitive_array_Real64_1_0_serialize_+0x236>
        }
        offset_bits += _pad0_;
 8002ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef8:	4413      	add	r3, r2
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <uavcan_primitive_array_Real64_1_0_serialize_+0x1ee>
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f0a:	21a2      	movs	r1, #162	; 0xa2
 8002f0c:	4817      	ldr	r0, [pc, #92]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f0e:	f00c f9a3 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	2b07      	cmp	r3, #7
 8002f16:	d805      	bhi.n	8002f24 <uavcan_primitive_array_Real64_1_0_serialize_+0x200>
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <uavcan_primitive_array_Real64_1_0_serialize_+0x258>)
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f1c:	21a5      	movs	r1, #165	; 0xa5
 8002f1e:	4813      	ldr	r0, [pc, #76]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f20:	f00c f99a 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	f640 0208 	movw	r2, #2056	; 0x808
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d905      	bls.n	8002f3a <uavcan_primitive_array_Real64_1_0_serialize_+0x216>
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <uavcan_primitive_array_Real64_1_0_serialize_+0x25c>)
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f32:	21a6      	movs	r1, #166	; 0xa6
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f36:	f00c f98f 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <uavcan_primitive_array_Real64_1_0_serialize_+0x22c>
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <uavcan_primitive_array_Real64_1_0_serialize_+0x240>)
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <uavcan_primitive_array_Real64_1_0_serialize_+0x244>)
 8002f48:	21a7      	movs	r1, #167	; 0xa7
 8002f4a:	4808      	ldr	r0, [pc, #32]	; (8002f6c <uavcan_primitive_array_Real64_1_0_serialize_+0x248>)
 8002f4c:	f00c f984 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3738      	adds	r7, #56	; 0x38
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f64:	08011eb0 	.word	0x08011eb0
 8002f68:	08014a1c 	.word	0x08014a1c
 8002f6c:	080123f0 	.word	0x080123f0
 8002f70:	08012474 	.word	0x08012474
 8002f74:	080124a8 	.word	0x080124a8
 8002f78:	08011fa8 	.word	0x08011fa8
 8002f7c:	08011fb4 	.word	0x08011fb4
 8002f80:	080124d8 	.word	0x080124d8

08002f84 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002faa:	f06f 0301 	mvn.w	r3, #1
 8002fae:	e08b      	b.n	80030c8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002fb6:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x14c>)
 8002fb8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8002fd8:	21ce      	movs	r1, #206	; 0xce
 8002fda:	4840      	ldr	r0, [pc, #256]	; (80030dc <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 8002fdc:	f00c f93c 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d309      	bcc.n	8002ffe <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002ffc:	e003      	b.n	8003006 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3308      	adds	r3, #8
 800300a:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003012:	2b20      	cmp	r3, #32
 8003014:	d902      	bls.n	800301c <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003016:	f06f 0309 	mvn.w	r3, #9
 800301a:	e055      	b.n	80030c8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 800302a:	21dd      	movs	r1, #221	; 0xdd
 800302c:	482b      	ldr	r0, [pc, #172]	; (80030dc <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 800302e:	f00c f913 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e01d      	b.n	8003074 <uavcan_primitive_array_Real64_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <uavcan_primitive_array_Real64_1_0_deserialize_+0xca>
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8003046:	21e0      	movs	r1, #224	; 0xe0
 8003048:	4824      	ldr	r0, [pc, #144]	; (80030dc <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 800304a:	f00c f905 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF64(&buffer[0], capacity_bytes, offset_bits);
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	f7fe fe0e 	bl	8001c74 <nunavutGetF64>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	00c9      	lsls	r1, r1, #3
 8003062:	4401      	add	r1, r0
 8003064:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	3340      	adds	r3, #64	; 0x40
 800306c:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3301      	adds	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3db      	bcc.n	8003038 <uavcan_primitive_array_Real64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3307      	adds	r3, #7
 8003084:	f023 0307 	bic.w	r3, r3, #7
 8003088:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11c>
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x150>)
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 8003098:	21e5      	movs	r1, #229	; 0xe5
 800309a:	4810      	ldr	r0, [pc, #64]	; (80030dc <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 800309c:	f00c f8dc 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	69f8      	ldr	r0, [r7, #28]
 80030a4:	f7fd ff44 	bl	8000f30 <nunavutChooseMin>
 80030a8:	4603      	mov	r3, r0
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d205      	bcs.n	80030c6 <uavcan_primitive_array_Real64_1_0_deserialize_+0x142>
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x15c>)
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x154>)
 80030be:	21e7      	movs	r1, #231	; 0xe7
 80030c0:	4806      	ldr	r0, [pc, #24]	; (80030dc <uavcan_primitive_array_Real64_1_0_deserialize_+0x158>)
 80030c2:	f00c f8c9 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	08011fe0 	.word	0x08011fe0
 80030d4:	08011eb0 	.word	0x08011eb0
 80030d8:	0801463c 	.word	0x0801463c
 80030dc:	080123f0 	.word	0x080123f0
 80030e0:	08011fe4 	.word	0x08011fe4

080030e4 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003102:	f06f 0301 	mvn.w	r3, #1
 8003106:	e003      	b.n	8003110 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }
    *inout_buffer_size_bytes = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003142:	f06f 0301 	mvn.w	r3, #1
 8003146:	e008      	b.n	800315a <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8003150:	60bb      	str	r3, [r7, #8]
    }
    *inout_buffer_size_bytes = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	08011fe0 	.word	0x08011fe0

0800316c <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b094      	sub	sp, #80	; 0x50
 8003172:	af04      	add	r7, sp, #16
 8003174:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003176:	62b9      	str	r1, [r7, #40]	; 0x28
 8003178:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <uavcan_primitive_String_1_0_serialize_+0x20>
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <uavcan_primitive_String_1_0_serialize_+0x20>
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <uavcan_primitive_String_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800318c:	f06f 0301 	mvn.w	r3, #1
 8003190:	e108      	b.n	80033a4 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80031a0:	d202      	bcs.n	80031a8 <uavcan_primitive_String_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80031a2:	f06f 0302 	mvn.w	r3, #2
 80031a6:	e0fd      	b.n	80033a4 <uavcan_primitive_String_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <uavcan_primitive_String_1_0_serialize_+0x56>
 80031b6:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <uavcan_primitive_String_1_0_serialize_+0x244>)
 80031b8:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80031ba:	2181      	movs	r1, #129	; 0x81
 80031bc:	487e      	ldr	r0, [pc, #504]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80031be:	f00c f84b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80031c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c4:	2200      	movs	r2, #0
 80031c6:	469a      	mov	sl, r3
 80031c8:	4693      	mov	fp, r2
 80031ca:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 80031ce:	f14b 0900 	adc.w	r9, fp, #0
 80031d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	2200      	movs	r2, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	61fa      	str	r2, [r7, #28]
 80031dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80031e0:	460b      	mov	r3, r1
 80031e2:	4543      	cmp	r3, r8
 80031e4:	4613      	mov	r3, r2
 80031e6:	eb73 0309 	sbcs.w	r3, r3, r9
 80031ea:	d205      	bcs.n	80031f8 <uavcan_primitive_String_1_0_serialize_+0x8c>
 80031ec:	4b73      	ldr	r3, [pc, #460]	; (80033bc <uavcan_primitive_String_1_0_serialize_+0x250>)
 80031ee:	4a71      	ldr	r2, [pc, #452]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80031f0:	2182      	movs	r1, #130	; 0x82
 80031f2:	4871      	ldr	r0, [pc, #452]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80031f4:	f00c f830 	bl	800f258 <__assert_func>
        if (obj->value.count > 256)
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d902      	bls.n	800320a <uavcan_primitive_String_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003204:	f06f 0309 	mvn.w	r3, #9
 8003208:	e0cc      	b.n	80033a4 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003210:	2200      	movs	r2, #0
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	617a      	str	r2, [r7, #20]
 8003216:	2310      	movs	r3, #16
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800321e:	e9cd 2300 	strd	r2, r3, [sp]
 8003222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003228:	f7fe f834 	bl	8001294 <nunavutSetUxx>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 8003232:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003236:	2b00      	cmp	r3, #0
 8003238:	da02      	bge.n	8003240 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 800323a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800323e:	e0b1      	b.n	80033a4 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8003240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003242:	3310      	adds	r3, #16
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <uavcan_primitive_String_1_0_serialize_+0xf0>
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003252:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003254:	218e      	movs	r1, #142	; 0x8e
 8003256:	4858      	ldr	r0, [pc, #352]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003258:	f00b fffe 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800325c:	2300      	movs	r3, #0
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003260:	e037      	b.n	80032d2 <uavcan_primitive_String_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <uavcan_primitive_String_1_0_serialize_+0x10c>
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <uavcan_primitive_String_1_0_serialize_+0x244>)
 800326e:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003270:	2191      	movs	r1, #145	; 0x91
 8003272:	4851      	ldr	r0, [pc, #324]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003274:	f00b fff0 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	2200      	movs	r2, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	60fa      	str	r2, [r7, #12]
 8003280:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003284:	460b      	mov	r3, r1
 8003286:	f113 0408 	adds.w	r4, r3, #8
 800328a:	4613      	mov	r3, r2
 800328c:	f143 0500 	adc.w	r5, r3, #0
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	2200      	movs	r2, #0
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800329e:	460b      	mov	r3, r1
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	4613      	mov	r3, r2
 80032a4:	41ab      	sbcs	r3, r5
 80032a6:	d205      	bcs.n	80032b4 <uavcan_primitive_String_1_0_serialize_+0x148>
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <uavcan_primitive_String_1_0_serialize_+0x254>)
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 80032ac:	2192      	movs	r1, #146	; 0x92
 80032ae:	4842      	ldr	r0, [pc, #264]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 80032b0:	f00b ffd2 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	08db      	lsrs	r3, r3, #3
 80032b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ba:	4413      	add	r3, r2
 80032bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c0:	440a      	add	r2, r1
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	3308      	adds	r3, #8
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	3301      	adds	r3, #1
 80032d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032da:	429a      	cmp	r2, r3
 80032dc:	d3c1      	bcc.n	8003262 <uavcan_primitive_String_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03a      	beq.n	800335e <uavcan_primitive_String_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f1c3 0308 	rsb	r3, r3, #8
 80032f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80032fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <uavcan_primitive_String_1_0_serialize_+0x1a2>
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <uavcan_primitive_String_1_0_serialize_+0x258>)
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003306:	219b      	movs	r1, #155	; 0x9b
 8003308:	482b      	ldr	r0, [pc, #172]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800330a:	f00b ffa5 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800330e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9cd 2300 	strd	r2, r3, [sp]
 8003320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003326:	f7fd ffb5 	bl	8001294 <nunavutSetUxx>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 8003330:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003334:	2b00      	cmp	r3, #0
 8003336:	da02      	bge.n	800333e <uavcan_primitive_String_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8003338:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800333c:	e032      	b.n	80033a4 <uavcan_primitive_String_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 800333e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003344:	4413      	add	r3, r2
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <uavcan_primitive_String_1_0_serialize_+0x1f2>
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003356:	21a2      	movs	r1, #162	; 0xa2
 8003358:	4817      	ldr	r0, [pc, #92]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800335a:	f00b ff7d 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d805      	bhi.n	8003370 <uavcan_primitive_String_1_0_serialize_+0x204>
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <uavcan_primitive_String_1_0_serialize_+0x25c>)
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003368:	21a5      	movs	r1, #165	; 0xa5
 800336a:	4813      	ldr	r0, [pc, #76]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 800336c:	f00b ff74 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003376:	d905      	bls.n	8003384 <uavcan_primitive_String_1_0_serialize_+0x218>
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <uavcan_primitive_String_1_0_serialize_+0x260>)
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 800337c:	21a6      	movs	r1, #166	; 0xa6
 800337e:	480e      	ldr	r0, [pc, #56]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003380:	f00b ff6a 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <uavcan_primitive_String_1_0_serialize_+0x22e>
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <uavcan_primitive_String_1_0_serialize_+0x244>)
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <uavcan_primitive_String_1_0_serialize_+0x248>)
 8003392:	21a7      	movs	r1, #167	; 0xa7
 8003394:	4808      	ldr	r0, [pc, #32]	; (80033b8 <uavcan_primitive_String_1_0_serialize_+0x24c>)
 8003396:	f00b ff5f 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3740      	adds	r7, #64	; 0x40
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	08011eb0 	.word	0x08011eb0
 80033b4:	08014818 	.word	0x08014818
 80033b8:	080124f0 	.word	0x080124f0
 80033bc:	08012570 	.word	0x08012570
 80033c0:	08011f78 	.word	0x08011f78
 80033c4:	08011fa8 	.word	0x08011fa8
 80033c8:	080125a4 	.word	0x080125a4
 80033cc:	080125bc 	.word	0x080125bc

080033d0 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <uavcan_primitive_String_1_0_deserialize_+0x2c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033f6:	f06f 0301 	mvn.w	r3, #1
 80033fa:	e08c      	b.n	8003516 <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <uavcan_primitive_String_1_0_deserialize_+0x150>)
 8003404:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <uavcan_primitive_String_1_0_deserialize_+0x5c>
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8003422:	4a41      	ldr	r2, [pc, #260]	; (8003528 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8003424:	21ce      	movs	r1, #206	; 0xce
 8003426:	4841      	ldr	r0, [pc, #260]	; (800352c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8003428:	f00b ff16 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800342c:	2310      	movs	r3, #16
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f7fe f80a 	bl	800144c <nunavutGetU16>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3310      	adds	r3, #16
 8003446:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d902      	bls.n	800345a <uavcan_primitive_String_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003454:	f06f 0309 	mvn.w	r3, #9
 8003458:	e05d      	b.n	8003516 <uavcan_primitive_String_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <uavcan_primitive_String_1_0_deserialize_+0xa0>
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8003466:	4a30      	ldr	r2, [pc, #192]	; (8003528 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8003468:	21d6      	movs	r1, #214	; 0xd6
 800346a:	4830      	ldr	r0, [pc, #192]	; (800352c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 800346c:	f00b fef4 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e025      	b.n	80034c2 <uavcan_primitive_String_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <uavcan_primitive_String_1_0_deserialize_+0xbc>
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 8003484:	21d9      	movs	r1, #217	; 0xd9
 8003486:	4829      	ldr	r0, [pc, #164]	; (800352c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8003488:	f00b fee6 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	3308      	adds	r3, #8
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d30a      	bcc.n	80034ac <uavcan_primitive_String_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4413      	add	r3, r2
 800349e:	7819      	ldrb	r1, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	460a      	mov	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e004      	b.n	80034b6 <uavcan_primitive_String_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3308      	adds	r3, #8
 80034ba:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3d3      	bcc.n	8003476 <uavcan_primitive_String_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3307      	adds	r3, #7
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <uavcan_primitive_String_1_0_deserialize_+0x11e>
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <uavcan_primitive_String_1_0_deserialize_+0x154>)
 80034e4:	4a10      	ldr	r2, [pc, #64]	; (8003528 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 80034e6:	21e5      	movs	r1, #229	; 0xe5
 80034e8:	4810      	ldr	r0, [pc, #64]	; (800352c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 80034ea:	f00b feb5 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80034ee:	6939      	ldr	r1, [r7, #16]
 80034f0:	69f8      	ldr	r0, [r7, #28]
 80034f2:	f7fd fd1d 	bl	8000f30 <nunavutChooseMin>
 80034f6:	4603      	mov	r3, r0
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	d205      	bcs.n	8003514 <uavcan_primitive_String_1_0_deserialize_+0x144>
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <uavcan_primitive_String_1_0_deserialize_+0x160>)
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <uavcan_primitive_String_1_0_deserialize_+0x158>)
 800350c:	21e7      	movs	r1, #231	; 0xe7
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <uavcan_primitive_String_1_0_deserialize_+0x15c>)
 8003510:	f00b fea2 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08011fe0 	.word	0x08011fe0
 8003524:	08011eb0 	.word	0x08011eb0
 8003528:	080143d4 	.word	0x080143d4
 800352c:	080124f0 	.word	0x080124f0
 8003530:	08011fe4 	.word	0x08011fe4

08003534 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003538:	b094      	sub	sp, #80	; 0x50
 800353a:	af04      	add	r7, sp, #16
 800353c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800353e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003540:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <uavcan_primitive_Unstructured_1_0_serialize_+0x20>
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <uavcan_primitive_Unstructured_1_0_serialize_+0x20>
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <uavcan_primitive_Unstructured_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003554:	f06f 0301 	mvn.w	r3, #1
 8003558:	e108      	b.n	800376c <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003568:	d202      	bcs.n	8003570 <uavcan_primitive_Unstructured_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800356a:	f06f 0302 	mvn.w	r3, #2
 800356e:	e0fd      	b.n	800376c <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <uavcan_primitive_Unstructured_1_0_serialize_+0x56>
 800357e:	4b7e      	ldr	r3, [pc, #504]	; (8003778 <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 8003580:	4a7e      	ldr	r2, [pc, #504]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003582:	2181      	movs	r1, #129	; 0x81
 8003584:	487e      	ldr	r0, [pc, #504]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003586:	f00b fe67 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	2200      	movs	r2, #0
 800358e:	469a      	mov	sl, r3
 8003590:	4693      	mov	fp, r2
 8003592:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 8003596:	f14b 0900 	adc.w	r9, fp, #0
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	2200      	movs	r2, #0
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	61fa      	str	r2, [r7, #28]
 80035a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035a8:	460b      	mov	r3, r1
 80035aa:	4543      	cmp	r3, r8
 80035ac:	4613      	mov	r3, r2
 80035ae:	eb73 0309 	sbcs.w	r3, r3, r9
 80035b2:	d205      	bcs.n	80035c0 <uavcan_primitive_Unstructured_1_0_serialize_+0x8c>
 80035b4:	4b73      	ldr	r3, [pc, #460]	; (8003784 <uavcan_primitive_Unstructured_1_0_serialize_+0x250>)
 80035b6:	4a71      	ldr	r2, [pc, #452]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 80035b8:	2182      	movs	r1, #130	; 0x82
 80035ba:	4871      	ldr	r0, [pc, #452]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 80035bc:	f00b fe4c 	bl	800f258 <__assert_func>
        if (obj->value.count > 256)
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ca:	d902      	bls.n	80035d2 <uavcan_primitive_Unstructured_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035cc:	f06f 0309 	mvn.w	r3, #9
 80035d0:	e0cc      	b.n	800376c <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035d8:	2200      	movs	r2, #0
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	617a      	str	r2, [r7, #20]
 80035de:	2310      	movs	r3, #16
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035e6:	e9cd 2300 	strd	r2, r3, [sp]
 80035ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f0:	f7fd fe50 	bl	8001294 <nunavutSetUxx>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 80035fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da02      	bge.n	8003608 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003602:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003606:	e0b1      	b.n	800376c <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	3310      	adds	r3, #16
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <uavcan_primitive_Unstructured_1_0_serialize_+0xf0>
 8003618:	4b57      	ldr	r3, [pc, #348]	; (8003778 <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 800361a:	4a58      	ldr	r2, [pc, #352]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800361c:	218e      	movs	r1, #142	; 0x8e
 800361e:	4858      	ldr	r0, [pc, #352]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003620:	f00b fe1a 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003624:	2300      	movs	r3, #0
 8003626:	63bb      	str	r3, [r7, #56]	; 0x38
 8003628:	e037      	b.n	800369a <uavcan_primitive_Unstructured_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <uavcan_primitive_Unstructured_1_0_serialize_+0x10c>
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 8003636:	4a51      	ldr	r2, [pc, #324]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003638:	2191      	movs	r1, #145	; 0x91
 800363a:	4851      	ldr	r0, [pc, #324]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 800363c:	f00b fe0c 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	2200      	movs	r2, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	60fa      	str	r2, [r7, #12]
 8003648:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800364c:	460b      	mov	r3, r1
 800364e:	f113 0408 	adds.w	r4, r3, #8
 8003652:	4613      	mov	r3, r2
 8003654:	f143 0500 	adc.w	r5, r3, #0
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	2200      	movs	r2, #0
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003666:	460b      	mov	r3, r1
 8003668:	42a3      	cmp	r3, r4
 800366a:	4613      	mov	r3, r2
 800366c:	41ab      	sbcs	r3, r5
 800366e:	d205      	bcs.n	800367c <uavcan_primitive_Unstructured_1_0_serialize_+0x148>
 8003670:	4b45      	ldr	r3, [pc, #276]	; (8003788 <uavcan_primitive_Unstructured_1_0_serialize_+0x254>)
 8003672:	4a42      	ldr	r2, [pc, #264]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003674:	2192      	movs	r1, #146	; 0x92
 8003676:	4842      	ldr	r0, [pc, #264]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003678:	f00b fdee 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003682:	4413      	add	r3, r2
 8003684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003688:	440a      	add	r2, r1
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	3308      	adds	r3, #8
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	3301      	adds	r3, #1
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80036a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d3c1      	bcc.n	800362a <uavcan_primitive_Unstructured_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03a      	beq.n	8003726 <uavcan_primitive_Unstructured_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f1c3 0308 	rsb	r3, r3, #8
 80036be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80036c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <uavcan_primitive_Unstructured_1_0_serialize_+0x1a2>
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <uavcan_primitive_Unstructured_1_0_serialize_+0x258>)
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 80036ce:	219b      	movs	r1, #155	; 0x9b
 80036d0:	482b      	ldr	r0, [pc, #172]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 80036d2:	f00b fdc1 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9cd 2300 	strd	r2, r3, [sp]
 80036e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ee:	f7fd fdd1 	bl	8001294 <nunavutSetUxx>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 80036f8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	da02      	bge.n	8003706 <uavcan_primitive_Unstructured_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8003700:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003704:	e032      	b.n	800376c <uavcan_primitive_Unstructured_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 8003706:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800370a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800370c:	4413      	add	r3, r2
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <uavcan_primitive_Unstructured_1_0_serialize_+0x1f2>
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800371e:	21a2      	movs	r1, #162	; 0xa2
 8003720:	4817      	ldr	r0, [pc, #92]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003722:	f00b fd99 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d805      	bhi.n	8003738 <uavcan_primitive_Unstructured_1_0_serialize_+0x204>
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <uavcan_primitive_Unstructured_1_0_serialize_+0x25c>)
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003730:	21a5      	movs	r1, #165	; 0xa5
 8003732:	4813      	ldr	r0, [pc, #76]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003734:	f00b fd90 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800373e:	d905      	bls.n	800374c <uavcan_primitive_Unstructured_1_0_serialize_+0x218>
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <uavcan_primitive_Unstructured_1_0_serialize_+0x260>)
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 8003744:	21a6      	movs	r1, #166	; 0xa6
 8003746:	480e      	ldr	r0, [pc, #56]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 8003748:	f00b fd86 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <uavcan_primitive_Unstructured_1_0_serialize_+0x22e>
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <uavcan_primitive_Unstructured_1_0_serialize_+0x244>)
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <uavcan_primitive_Unstructured_1_0_serialize_+0x248>)
 800375a:	21a7      	movs	r1, #167	; 0xa7
 800375c:	4808      	ldr	r0, [pc, #32]	; (8003780 <uavcan_primitive_Unstructured_1_0_serialize_+0x24c>)
 800375e:	f00b fd7b 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3740      	adds	r7, #64	; 0x40
 8003770:	46bd      	mov	sp, r7
 8003772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003776:	bf00      	nop
 8003778:	08011eb0 	.word	0x08011eb0
 800377c:	08014840 	.word	0x08014840
 8003780:	080125d4 	.word	0x080125d4
 8003784:	08012570 	.word	0x08012570
 8003788:	08011f78 	.word	0x08011f78
 800378c:	08011fa8 	.word	0x08011fa8
 8003790:	080125a4 	.word	0x080125a4
 8003794:	080125bc 	.word	0x080125bc

08003798 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037be:	f06f 0301 	mvn.w	r3, #1
 80037c2:	e08c      	b.n	80038de <uavcan_primitive_Unstructured_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x150>)
 80037cc:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x5c>
 80037e8:	4b40      	ldr	r3, [pc, #256]	; (80038ec <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 80037ea:	4a41      	ldr	r2, [pc, #260]	; (80038f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 80037ec:	21ce      	movs	r1, #206	; 0xce
 80037ee:	4841      	ldr	r0, [pc, #260]	; (80038f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 80037f0:	f00b fd32 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80037f4:	2310      	movs	r3, #16
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	f7fd fe26 	bl	800144c <nunavutGetU16>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3310      	adds	r3, #16
 800380e:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381a:	d902      	bls.n	8003822 <uavcan_primitive_Unstructured_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800381c:	f06f 0309 	mvn.w	r3, #9
 8003820:	e05d      	b.n	80038de <uavcan_primitive_Unstructured_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <uavcan_primitive_Unstructured_1_0_deserialize_+0xa0>
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 8003830:	21d6      	movs	r1, #214	; 0xd6
 8003832:	4830      	ldr	r0, [pc, #192]	; (80038f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 8003834:	f00b fd10 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e025      	b.n	800388a <uavcan_primitive_Unstructured_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 800384c:	21d9      	movs	r1, #217	; 0xd9
 800384e:	4829      	ldr	r0, [pc, #164]	; (80038f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 8003850:	f00b fd02 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3308      	adds	r3, #8
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	429a      	cmp	r2, r3
 800385c:	d30a      	bcc.n	8003874 <uavcan_primitive_Unstructured_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	7819      	ldrb	r1, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	460a      	mov	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e004      	b.n	800387e <uavcan_primitive_Unstructured_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3308      	adds	r3, #8
 8003882:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	3301      	adds	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3d3      	bcc.n	800383e <uavcan_primitive_Unstructured_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3307      	adds	r3, #7
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x11e>
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <uavcan_primitive_Unstructured_1_0_deserialize_+0x154>)
 80038ac:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 80038ae:	21e5      	movs	r1, #229	; 0xe5
 80038b0:	4810      	ldr	r0, [pc, #64]	; (80038f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 80038b2:	f00b fcd1 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80038b6:	6939      	ldr	r1, [r7, #16]
 80038b8:	69f8      	ldr	r0, [r7, #28]
 80038ba:	f7fd fb39 	bl	8000f30 <nunavutChooseMin>
 80038be:	4603      	mov	r3, r0
 80038c0:	08da      	lsrs	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d205      	bcs.n	80038dc <uavcan_primitive_Unstructured_1_0_deserialize_+0x144>
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x160>)
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x158>)
 80038d4:	21e7      	movs	r1, #231	; 0xe7
 80038d6:	4807      	ldr	r0, [pc, #28]	; (80038f4 <uavcan_primitive_Unstructured_1_0_deserialize_+0x15c>)
 80038d8:	f00b fcbe 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	08011fe0 	.word	0x08011fe0
 80038ec:	08011eb0 	.word	0x08011eb0
 80038f0:	08014400 	.word	0x08014400
 80038f4:	080125d4 	.word	0x080125d4
 80038f8:	08011fe4 	.word	0x08011fe4

080038fc <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b08e      	sub	sp, #56	; 0x38
 8003902:	af04      	add	r7, sp, #16
 8003904:	6178      	str	r0, [r7, #20]
 8003906:	6139      	str	r1, [r7, #16]
 8003908:	60fa      	str	r2, [r7, #12]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <uavcan_primitive_array_Bit_1_0_serialize_+0x20>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <uavcan_primitive_array_Bit_1_0_serialize_+0x20>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <uavcan_primitive_array_Bit_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800391c:	f06f 0301 	mvn.w	r3, #1
 8003920:	e0cd      	b.n	8003abe <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003930:	d202      	bcs.n	8003938 <uavcan_primitive_array_Bit_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003932:	f06f 0302 	mvn.w	r3, #2
 8003936:	e0c2      	b.n	8003abe <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <uavcan_primitive_array_Bit_1_0_serialize_+0x56>
 8003946:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 8003948:	4a60      	ldr	r2, [pc, #384]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 800394a:	2182      	movs	r1, #130	; 0x82
 800394c:	4860      	ldr	r0, [pc, #384]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 800394e:	f00b fc83 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2200      	movs	r2, #0
 8003956:	469a      	mov	sl, r3
 8003958:	4693      	mov	fp, r2
 800395a:	f51a 6401 	adds.w	r4, sl, #2064	; 0x810
 800395e:	f14b 0500 	adc.w	r5, fp, #0
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	2200      	movs	r2, #0
 8003968:	4698      	mov	r8, r3
 800396a:	4691      	mov	r9, r2
 800396c:	45a0      	cmp	r8, r4
 800396e:	eb79 0305 	sbcs.w	r3, r9, r5
 8003972:	d205      	bcs.n	8003980 <uavcan_primitive_array_Bit_1_0_serialize_+0x84>
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d8>)
 8003976:	4a55      	ldr	r2, [pc, #340]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003978:	2183      	movs	r1, #131	; 0x83
 800397a:	4855      	ldr	r0, [pc, #340]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 800397c:	f00b fc6c 	bl	800f258 <__assert_func>
        if (obj->value.count > 2048)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d902      	bls.n	8003992 <uavcan_primitive_array_Bit_1_0_serialize_+0x96>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800398c:	f06f 0309 	mvn.w	r3, #9
 8003990:	e095      	b.n	8003abe <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003998:	2200      	movs	r2, #0
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	2310      	movs	r3, #16
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039a6:	e9cd 3400 	strd	r3, r4, [sp]
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	6938      	ldr	r0, [r7, #16]
 80039b0:	f7fd fc70 	bl	8001294 <nunavutSetUxx>
 80039b4:	4603      	mov	r3, r0
 80039b6:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 80039b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da02      	bge.n	80039c6 <uavcan_primitive_array_Bit_1_0_serialize_+0xca>
        {
            return _err0_;
 80039c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039c4:	e07b      	b.n	8003abe <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        offset_bits += 16U;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3310      	adds	r3, #16
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <uavcan_primitive_array_Bit_1_0_serialize_+0xe6>
 80039d6:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 80039d8:	4a3c      	ldr	r2, [pc, #240]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 80039da:	218f      	movs	r1, #143	; 0x8f
 80039dc:	483c      	ldr	r0, [pc, #240]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 80039de:	f00b fc3b 	bl	800f258 <__assert_func>
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2100      	movs	r1, #0
 80039ec:	9100      	str	r1, [sp, #0]
 80039ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f0:	6938      	ldr	r0, [r7, #16]
 80039f2:	f7fd fac7 	bl	8000f84 <nunavutCopyBits>
        offset_bits += obj->value.count;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	4413      	add	r3, r2
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d035      	beq.n	8003a78 <uavcan_primitive_array_Bit_1_0_serialize_+0x17c>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f1c3 0308 	rsb	r3, r3, #8
 8003a1a:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8003a1c:	7fbb      	ldrb	r3, [r7, #30]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <uavcan_primitive_array_Bit_1_0_serialize_+0x132>
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1dc>)
 8003a24:	4a29      	ldr	r2, [pc, #164]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a26:	2197      	movs	r1, #151	; 0x97
 8003a28:	4829      	ldr	r0, [pc, #164]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a2a:	f00b fc15 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a2e:	7fbb      	ldrb	r3, [r7, #30]
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	6938      	ldr	r0, [r7, #16]
 8003a44:	f7fd fc26 	bl	8001294 <nunavutSetUxx>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003a4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da02      	bge.n	8003a5a <uavcan_primitive_array_Bit_1_0_serialize_+0x15e>
        {
            return _err1_;
 8003a54:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a58:	e031      	b.n	8003abe <uavcan_primitive_array_Bit_1_0_serialize_+0x1c2>
        }
        offset_bits += _pad0_;
 8003a5a:	7fbb      	ldrb	r3, [r7, #30]
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	4413      	add	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <uavcan_primitive_array_Bit_1_0_serialize_+0x17c>
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 8003a6e:	4a17      	ldr	r2, [pc, #92]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a70:	219e      	movs	r1, #158	; 0x9e
 8003a72:	4817      	ldr	r0, [pc, #92]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a74:	f00b fbf0 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	2b0f      	cmp	r3, #15
 8003a7c:	d805      	bhi.n	8003a8a <uavcan_primitive_array_Bit_1_0_serialize_+0x18e>
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <uavcan_primitive_array_Bit_1_0_serialize_+0x1e0>)
 8003a80:	4a12      	ldr	r2, [pc, #72]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a82:	21a1      	movs	r1, #161	; 0xa1
 8003a84:	4812      	ldr	r0, [pc, #72]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a86:	f00b fbe7 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003a90:	d905      	bls.n	8003a9e <uavcan_primitive_array_Bit_1_0_serialize_+0x1a2>
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e4>)
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003a96:	21a2      	movs	r1, #162	; 0xa2
 8003a98:	480d      	ldr	r0, [pc, #52]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003a9a:	f00b fbdd 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <uavcan_primitive_array_Bit_1_0_serialize_+0x1b8>
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <uavcan_primitive_array_Bit_1_0_serialize_+0x1cc>)
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <uavcan_primitive_array_Bit_1_0_serialize_+0x1d0>)
 8003aac:	21a3      	movs	r1, #163	; 0xa3
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <uavcan_primitive_array_Bit_1_0_serialize_+0x1d4>)
 8003ab0:	f00b fbd2 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac8:	08011eb0 	.word	0x08011eb0
 8003acc:	08014870 	.word	0x08014870
 8003ad0:	08012658 	.word	0x08012658
 8003ad4:	08012570 	.word	0x08012570
 8003ad8:	08011fa8 	.word	0x08011fa8
 8003adc:	080125a4 	.word	0x080125a4
 8003ae0:	080125bc 	.word	0x080125bc

08003ae4 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b0a:	f06f 0301 	mvn.w	r3, #1
 8003b0e:	e06d      	b.n	8003bec <uavcan_primitive_array_Bit_1_0_deserialize_+0x108>
    }
    if (buffer == NULL)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003b16:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x110>)
 8003b18:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <uavcan_primitive_array_Bit_1_0_deserialize_+0x5c>
 8003b34:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003b36:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003b38:	21ca      	movs	r1, #202	; 0xca
 8003b3a:	4831      	ldr	r0, [pc, #196]	; (8003c00 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003b3c:	f00b fb8c 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003b40:	2310      	movs	r3, #16
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	69f9      	ldr	r1, [r7, #28]
 8003b46:	68b8      	ldr	r0, [r7, #8]
 8003b48:	f7fd fc80 	bl	800144c <nunavutGetU16>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3310      	adds	r3, #16
 8003b5a:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d902      	bls.n	8003b6e <uavcan_primitive_array_Bit_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b68:	f06f 0309 	mvn.w	r3, #9
 8003b6c:	e03e      	b.n	8003bec <uavcan_primitive_array_Bit_1_0_deserialize_+0x108>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <uavcan_primitive_array_Bit_1_0_deserialize_+0xa0>
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003b7a:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003b7c:	21d2      	movs	r1, #210	; 0xd2
 8003b7e:	4820      	ldr	r0, [pc, #128]	; (8003c00 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003b80:	f00b fb6a 	bl	800f258 <__assert_func>
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	f7fd fb3c 	bl	8001210 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3307      	adds	r3, #7
 8003ba8:	f023 0307 	bic.w	r3, r3, #7
 8003bac:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <uavcan_primitive_array_Bit_1_0_deserialize_+0xe0>
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x114>)
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003bbc:	21d6      	movs	r1, #214	; 0xd6
 8003bbe:	4810      	ldr	r0, [pc, #64]	; (8003c00 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003bc0:	f00b fb4a 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7fd f9b2 	bl	8000f30 <nunavutChooseMin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d205      	bcs.n	8003bea <uavcan_primitive_array_Bit_1_0_deserialize_+0x106>
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <uavcan_primitive_array_Bit_1_0_deserialize_+0x120>)
 8003be0:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <uavcan_primitive_array_Bit_1_0_deserialize_+0x118>)
 8003be2:	21d8      	movs	r1, #216	; 0xd8
 8003be4:	4806      	ldr	r0, [pc, #24]	; (8003c00 <uavcan_primitive_array_Bit_1_0_deserialize_+0x11c>)
 8003be6:	f00b fb37 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08011fe0 	.word	0x08011fe0
 8003bf8:	08011eb0 	.word	0x08011eb0
 8003bfc:	08014430 	.word	0x08014430
 8003c00:	08012658 	.word	0x08012658
 8003c04:	08011fe4 	.word	0x08011fe4

08003c08 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b094      	sub	sp, #80	; 0x50
 8003c0e:	af04      	add	r7, sp, #16
 8003c10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c12:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c14:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x20>
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <uavcan_primitive_array_Integer16_1_0_serialize_+0x20>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <uavcan_primitive_array_Integer16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c28:	f06f 0301 	mvn.w	r3, #1
 8003c2c:	e10d      	b.n	8003e4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	00da      	lsls	r2, r3, #3
 8003c38:	f640 0307 	movw	r3, #2055	; 0x807
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d802      	bhi.n	8003c46 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003c40:	f06f 0302 	mvn.w	r3, #2
 8003c44:	e101      	b.n	8003e4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <uavcan_primitive_array_Integer16_1_0_serialize_+0x58>
 8003c54:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003c56:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003c58:	2181      	movs	r1, #129	; 0x81
 8003c5a:	4880      	ldr	r0, [pc, #512]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003c5c:	f00b fafc 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	2200      	movs	r2, #0
 8003c64:	469a      	mov	sl, r3
 8003c66:	4693      	mov	fp, r2
 8003c68:	f640 0308 	movw	r3, #2056	; 0x808
 8003c6c:	eb1a 0803 	adds.w	r8, sl, r3
 8003c70:	f14b 0900 	adc.w	r9, fp, #0
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c82:	460b      	mov	r3, r1
 8003c84:	4543      	cmp	r3, r8
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb73 0309 	sbcs.w	r3, r3, r9
 8003c8c:	d205      	bcs.n	8003c9a <uavcan_primitive_array_Integer16_1_0_serialize_+0x92>
 8003c8e:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <uavcan_primitive_array_Integer16_1_0_serialize_+0x258>)
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003c92:	2182      	movs	r1, #130	; 0x82
 8003c94:	4871      	ldr	r0, [pc, #452]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003c96:	f00b fadf 	bl	800f258 <__assert_func>
        if (obj->value.count > 128)
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d902      	bls.n	8003caa <uavcan_primitive_array_Integer16_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ca4:	f06f 0309 	mvn.w	r3, #9
 8003ca8:	e0cf      	b.n	8003e4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b2ca      	uxtb	r2, r1
 8003cba:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd0>
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003cce:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003cd0:	218a      	movs	r1, #138	; 0x8a
 8003cd2:	4862      	ldr	r0, [pc, #392]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003cd4:	f00b fac0 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cdc:	e04b      	b.n	8003d76 <uavcan_primitive_array_Integer16_1_0_serialize_+0x16e>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <uavcan_primitive_array_Integer16_1_0_serialize_+0xec>
 8003ce8:	4b5a      	ldr	r3, [pc, #360]	; (8003e54 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003cec:	218d      	movs	r1, #141	; 0x8d
 8003cee:	485b      	ldr	r0, [pc, #364]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003cf0:	f00b fab2 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	617a      	str	r2, [r7, #20]
 8003cfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d00:	460b      	mov	r3, r1
 8003d02:	f113 0410 	adds.w	r4, r3, #16
 8003d06:	4613      	mov	r3, r2
 8003d08:	f143 0500 	adc.w	r5, r3, #0
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	2200      	movs	r2, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	60fa      	str	r2, [r7, #12]
 8003d16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	4613      	mov	r3, r2
 8003d20:	41ab      	sbcs	r3, r5
 8003d22:	d205      	bcs.n	8003d30 <uavcan_primitive_array_Integer16_1_0_serialize_+0x128>
 8003d24:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <uavcan_primitive_array_Integer16_1_0_serialize_+0x25c>)
 8003d26:	4a4c      	ldr	r2, [pc, #304]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003d28:	218e      	movs	r1, #142	; 0x8e
 8003d2a:	484c      	ldr	r0, [pc, #304]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003d2c:	f00b fa94 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 16U);
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d34:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	17da      	asrs	r2, r3, #31
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	2310      	movs	r3, #16
 8003d42:	9302      	str	r3, [sp, #8]
 8003d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d48:	e9cd 2300 	strd	r2, r3, [sp]
 8003d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d52:	f7fd fb23 	bl	800139c <nunavutSetIxx>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8003d5c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da02      	bge.n	8003d6a <uavcan_primitive_array_Integer16_1_0_serialize_+0x162>
            {
                return _err0_;
 8003d64:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003d68:	e06f      	b.n	8003e4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
            }
            offset_bits += 16U;
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	3301      	adds	r3, #1
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d3ad      	bcc.n	8003cde <uavcan_primitive_array_Integer16_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03a      	beq.n	8003e02 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1fa>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f1c3 0308 	rsb	r3, r3, #8
 8003d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8003d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1aa>
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <uavcan_primitive_array_Integer16_1_0_serialize_+0x260>)
 8003da8:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003daa:	219b      	movs	r1, #155	; 0x9b
 8003dac:	482b      	ldr	r0, [pc, #172]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003dae:	f00b fa53 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9cd 2300 	strd	r2, r3, [sp]
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dca:	f7fd fa63 	bl	8001294 <nunavutSetUxx>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 8003dd4:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da02      	bge.n	8003de2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1da>
        {
            return _err1_;
 8003ddc:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003de0:	e033      	b.n	8003e4a <uavcan_primitive_array_Integer16_1_0_serialize_+0x242>
        }
        offset_bits += _pad0_;
 8003de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de8:	4413      	add	r3, r2
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1fa>
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003df8:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003dfa:	21a2      	movs	r1, #162	; 0xa2
 8003dfc:	4817      	ldr	r0, [pc, #92]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003dfe:	f00b fa2b 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8003e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e04:	2b07      	cmp	r3, #7
 8003e06:	d805      	bhi.n	8003e14 <uavcan_primitive_array_Integer16_1_0_serialize_+0x20c>
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <uavcan_primitive_array_Integer16_1_0_serialize_+0x264>)
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003e0c:	21a5      	movs	r1, #165	; 0xa5
 8003e0e:	4813      	ldr	r0, [pc, #76]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003e10:	f00b fa22 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8003e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e16:	f640 0208 	movw	r2, #2056	; 0x808
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d905      	bls.n	8003e2a <uavcan_primitive_array_Integer16_1_0_serialize_+0x222>
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <uavcan_primitive_array_Integer16_1_0_serialize_+0x268>)
 8003e20:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003e22:	21a6      	movs	r1, #166	; 0xa6
 8003e24:	480d      	ldr	r0, [pc, #52]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003e26:	f00b fa17 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <uavcan_primitive_array_Integer16_1_0_serialize_+0x238>
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24c>)
 8003e36:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <uavcan_primitive_array_Integer16_1_0_serialize_+0x250>)
 8003e38:	21a7      	movs	r1, #167	; 0xa7
 8003e3a:	4808      	ldr	r0, [pc, #32]	; (8003e5c <uavcan_primitive_array_Integer16_1_0_serialize_+0x254>)
 8003e3c:	f00b fa0c 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	08da      	lsrs	r2, r3, #3
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3740      	adds	r7, #64	; 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e54:	08011eb0 	.word	0x08011eb0
 8003e58:	080148fc 	.word	0x080148fc
 8003e5c:	080126d8 	.word	0x080126d8
 8003e60:	08012474 	.word	0x08012474
 8003e64:	08012760 	.word	0x08012760
 8003e68:	08011fa8 	.word	0x08011fa8
 8003e6c:	08011fb4 	.word	0x08011fb4
 8003e70:	080124d8 	.word	0x080124d8

08003e74 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	e08a      	b.n	8003fb6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x142>
    }
    if (buffer == NULL)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x14c>)
 8003ea8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x5c>
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003ec6:	4a40      	ldr	r2, [pc, #256]	; (8003fc8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003ec8:	21ce      	movs	r1, #206	; 0xce
 8003eca:	4840      	ldr	r0, [pc, #256]	; (8003fcc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003ecc:	f00b f9c4 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d309      	bcc.n	8003eee <uavcan_primitive_array_Integer16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003eec:	e003      	b.n	8003ef6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d902      	bls.n	8003f0c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f06:	f06f 0309 	mvn.w	r3, #9
 8003f0a:	e054      	b.n	8003fb6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x142>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xae>
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f1a:	21dd      	movs	r1, #221	; 0xdd
 8003f1c:	482b      	ldr	r0, [pc, #172]	; (8003fcc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f1e:	f00b f99b 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e01c      	b.n	8003f62 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xee>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <uavcan_primitive_array_Integer16_1_0_deserialize_+0xca>
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f36:	21e0      	movs	r1, #224	; 0xe0
 8003f38:	4824      	ldr	r0, [pc, #144]	; (8003fcc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f3a:	f00b f98d 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003f3e:	2310      	movs	r3, #16
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f7fd fc54 	bl	80017f2 <nunavutGetI16>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        offset_bits += 16U;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3310      	adds	r3, #16
 8003f5a:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3dc      	bcc.n	8003f28 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3307      	adds	r3, #7
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x11a>
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x150>)
 8003f84:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003f86:	21e5      	movs	r1, #229	; 0xe5
 8003f88:	4810      	ldr	r0, [pc, #64]	; (8003fcc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003f8a:	f00b f965 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003f8e:	6939      	ldr	r1, [r7, #16]
 8003f90:	69f8      	ldr	r0, [r7, #28]
 8003f92:	f7fc ffcd 	bl	8000f30 <nunavutChooseMin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d205      	bcs.n	8003fb4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x140>
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x15c>)
 8003faa:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x154>)
 8003fac:	21e7      	movs	r1, #231	; 0xe7
 8003fae:	4807      	ldr	r0, [pc, #28]	; (8003fcc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x158>)
 8003fb0:	f00b f952 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08011fe0 	.word	0x08011fe0
 8003fc4:	08011eb0 	.word	0x08011eb0
 8003fc8:	080144f4 	.word	0x080144f4
 8003fcc:	080126d8 	.word	0x080126d8
 8003fd0:	08011fe4 	.word	0x08011fe4

08003fd4 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b094      	sub	sp, #80	; 0x50
 8003fda:	af04      	add	r7, sp, #16
 8003fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003fde:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fe0:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x20>
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x20>
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <uavcan_primitive_array_Integer32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ff4:	f06f 0301 	mvn.w	r3, #1
 8003ff8:	e10c      	b.n	8004214 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	00da      	lsls	r2, r3, #3
 8004004:	f640 0307 	movw	r3, #2055	; 0x807
 8004008:	429a      	cmp	r2, r3
 800400a:	d802      	bhi.n	8004012 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800400c:	f06f 0302 	mvn.w	r3, #2
 8004010:	e100      	b.n	8004214 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <uavcan_primitive_array_Integer32_1_0_serialize_+0x58>
 8004020:	4b7f      	ldr	r3, [pc, #508]	; (8004220 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 8004022:	4a80      	ldr	r2, [pc, #512]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004024:	2181      	movs	r1, #129	; 0x81
 8004026:	4880      	ldr	r0, [pc, #512]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004028:	f00b f916 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	2200      	movs	r2, #0
 8004030:	469a      	mov	sl, r3
 8004032:	4693      	mov	fp, r2
 8004034:	f640 0308 	movw	r3, #2056	; 0x808
 8004038:	eb1a 0803 	adds.w	r8, sl, r3
 800403c:	f14b 0900 	adc.w	r9, fp, #0
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	2200      	movs	r2, #0
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800404e:	460b      	mov	r3, r1
 8004050:	4543      	cmp	r3, r8
 8004052:	4613      	mov	r3, r2
 8004054:	eb73 0309 	sbcs.w	r3, r3, r9
 8004058:	d205      	bcs.n	8004066 <uavcan_primitive_array_Integer32_1_0_serialize_+0x92>
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <uavcan_primitive_array_Integer32_1_0_serialize_+0x258>)
 800405c:	4a71      	ldr	r2, [pc, #452]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 800405e:	2182      	movs	r1, #130	; 0x82
 8004060:	4871      	ldr	r0, [pc, #452]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004062:	f00b f8f9 	bl	800f258 <__assert_func>
        if (obj->value.count > 64)
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d902      	bls.n	8004076 <uavcan_primitive_array_Integer32_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004070:	f06f 0309 	mvn.w	r3, #9
 8004074:	e0ce      	b.n	8004214 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004082:	4413      	add	r3, r2
 8004084:	b2ca      	uxtb	r2, r1
 8004086:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	3308      	adds	r3, #8
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800408e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd0>
 8004098:	4b61      	ldr	r3, [pc, #388]	; (8004220 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 800409a:	4a62      	ldr	r2, [pc, #392]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 800409c:	218a      	movs	r1, #138	; 0x8a
 800409e:	4862      	ldr	r0, [pc, #392]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80040a0:	f00b f8da 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80040a4:	2300      	movs	r3, #0
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a8:	e04a      	b.n	8004140 <uavcan_primitive_array_Integer32_1_0_serialize_+0x16c>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <uavcan_primitive_array_Integer32_1_0_serialize_+0xec>
 80040b4:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 80040b6:	4a5b      	ldr	r2, [pc, #364]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80040b8:	218d      	movs	r1, #141	; 0x8d
 80040ba:	485b      	ldr	r0, [pc, #364]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80040bc:	f00b f8cc 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 80040c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c2:	2200      	movs	r2, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	617a      	str	r2, [r7, #20]
 80040c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040cc:	460b      	mov	r3, r1
 80040ce:	f113 0420 	adds.w	r4, r3, #32
 80040d2:	4613      	mov	r3, r2
 80040d4:	f143 0500 	adc.w	r5, r3, #0
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	2200      	movs	r2, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	60fa      	str	r2, [r7, #12]
 80040e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040e6:	460b      	mov	r3, r1
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	4613      	mov	r3, r2
 80040ec:	41ab      	sbcs	r3, r5
 80040ee:	d205      	bcs.n	80040fc <uavcan_primitive_array_Integer32_1_0_serialize_+0x128>
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <uavcan_primitive_array_Integer32_1_0_serialize_+0x25c>)
 80040f2:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80040f4:	218e      	movs	r1, #142	; 0x8e
 80040f6:	484c      	ldr	r0, [pc, #304]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80040f8:	f00b f8ae 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 32U);
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	17da      	asrs	r2, r3, #31
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	2320      	movs	r3, #32
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004112:	e9cd 2300 	strd	r2, r3, [sp]
 8004116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411c:	f7fd f93e 	bl	800139c <nunavutSetIxx>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8004126:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800412a:	2b00      	cmp	r3, #0
 800412c:	da02      	bge.n	8004134 <uavcan_primitive_array_Integer32_1_0_serialize_+0x160>
            {
                return _err0_;
 800412e:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004132:	e06f      	b.n	8004214 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
            }
            offset_bits += 32U;
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	3320      	adds	r3, #32
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	3301      	adds	r3, #1
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004148:	429a      	cmp	r2, r3
 800414a:	d3ae      	bcc.n	80040aa <uavcan_primitive_array_Integer32_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03a      	beq.n	80041cc <uavcan_primitive_array_Integer32_1_0_serialize_+0x1f8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f1c3 0308 	rsb	r3, r3, #8
 8004164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8004168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <uavcan_primitive_array_Integer32_1_0_serialize_+0x1a8>
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <uavcan_primitive_array_Integer32_1_0_serialize_+0x260>)
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004174:	219b      	movs	r1, #155	; 0x9b
 8004176:	482c      	ldr	r0, [pc, #176]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004178:	f00b f86e 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800417c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004180:	9302      	str	r3, [sp, #8]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9cd 2300 	strd	r2, r3, [sp]
 800418e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004190:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004194:	f7fd f87e 	bl	8001294 <nunavutSetUxx>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 800419e:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da02      	bge.n	80041ac <uavcan_primitive_array_Integer32_1_0_serialize_+0x1d8>
        {
            return _err1_;
 80041a6:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80041aa:	e033      	b.n	8004214 <uavcan_primitive_array_Integer32_1_0_serialize_+0x240>
        }
        offset_bits += _pad0_;
 80041ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041b2:	4413      	add	r3, r2
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <uavcan_primitive_array_Integer32_1_0_serialize_+0x1f8>
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041c4:	21a2      	movs	r1, #162	; 0xa2
 80041c6:	4818      	ldr	r0, [pc, #96]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041c8:	f00b f846 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	2b07      	cmp	r3, #7
 80041d0:	d805      	bhi.n	80041de <uavcan_primitive_array_Integer32_1_0_serialize_+0x20a>
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <uavcan_primitive_array_Integer32_1_0_serialize_+0x264>)
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041d6:	21a5      	movs	r1, #165	; 0xa5
 80041d8:	4813      	ldr	r0, [pc, #76]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041da:	f00b f83d 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	f640 0208 	movw	r2, #2056	; 0x808
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d905      	bls.n	80041f4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x220>
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <uavcan_primitive_array_Integer32_1_0_serialize_+0x268>)
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 80041ec:	21a6      	movs	r1, #166	; 0xa6
 80041ee:	480e      	ldr	r0, [pc, #56]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 80041f0:	f00b f832 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <uavcan_primitive_array_Integer32_1_0_serialize_+0x236>
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24c>)
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <uavcan_primitive_array_Integer32_1_0_serialize_+0x250>)
 8004202:	21a7      	movs	r1, #167	; 0xa7
 8004204:	4808      	ldr	r0, [pc, #32]	; (8004228 <uavcan_primitive_array_Integer32_1_0_serialize_+0x254>)
 8004206:	f00b f827 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3740      	adds	r7, #64	; 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421e:	bf00      	nop
 8004220:	08011eb0 	.word	0x08011eb0
 8004224:	080148cc 	.word	0x080148cc
 8004228:	08012790 	.word	0x08012790
 800422c:	08012474 	.word	0x08012474
 8004230:	08012324 	.word	0x08012324
 8004234:	08011fa8 	.word	0x08011fa8
 8004238:	08011fb4 	.word	0x08011fb4
 800423c:	080124d8 	.word	0x080124d8

08004240 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004266:	f06f 0301 	mvn.w	r3, #1
 800426a:	e089      	b.n	8004380 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004272:	4b45      	ldr	r3, [pc, #276]	; (8004388 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x148>)
 8004274:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x5c>
 8004290:	4b3e      	ldr	r3, [pc, #248]	; (800438c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 8004292:	4a3f      	ldr	r2, [pc, #252]	; (8004390 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004294:	21ce      	movs	r1, #206	; 0xce
 8004296:	483f      	ldr	r0, [pc, #252]	; (8004394 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 8004298:	f00a ffde 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3308      	adds	r3, #8
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d309      	bcc.n	80042ba <uavcan_primitive_array_Integer32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80042b8:	e003      	b.n	80042c2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3308      	adds	r3, #8
 80042c6:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d902      	bls.n	80042d8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042d2:	f06f 0309 	mvn.w	r3, #9
 80042d6:	e053      	b.n	8004380 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x140>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <uavcan_primitive_array_Integer32_1_0_deserialize_+0xae>
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 80042e4:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 80042e6:	21dd      	movs	r1, #221	; 0xdd
 80042e8:	482a      	ldr	r0, [pc, #168]	; (8004394 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 80042ea:	f00a ffb5 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e01b      	b.n	800432c <uavcan_primitive_array_Integer32_1_0_deserialize_+0xec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <uavcan_primitive_array_Integer32_1_0_deserialize_+0xca>
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004302:	21e0      	movs	r1, #224	; 0xe0
 8004304:	4823      	ldr	r0, [pc, #140]	; (8004394 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 8004306:	f00a ffa7 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI32(&buffer[0], capacity_bytes, offset_bits, 32);
 800430a:	2320      	movs	r3, #32
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f7fd fac5 	bl	80018a0 <nunavutGetI32>
 8004316:	4601      	mov	r1, r0
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        offset_bits += 32U;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	3320      	adds	r3, #32
 8004324:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3301      	adds	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3dd      	bcc.n	80042f4 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3307      	adds	r3, #7
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x118>
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x14c>)
 800434e:	4a10      	ldr	r2, [pc, #64]	; (8004390 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004350:	21e5      	movs	r1, #229	; 0xe5
 8004352:	4810      	ldr	r0, [pc, #64]	; (8004394 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 8004354:	f00a ff80 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004358:	6939      	ldr	r1, [r7, #16]
 800435a:	69f8      	ldr	r0, [r7, #28]
 800435c:	f7fc fde8 	bl	8000f30 <nunavutChooseMin>
 8004360:	4603      	mov	r3, r0
 8004362:	08da      	lsrs	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	429a      	cmp	r2, r3
 8004370:	d205      	bcs.n	800437e <uavcan_primitive_array_Integer32_1_0_deserialize_+0x13e>
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x158>)
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x150>)
 8004376:	21e7      	movs	r1, #231	; 0xe7
 8004378:	4806      	ldr	r0, [pc, #24]	; (8004394 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x154>)
 800437a:	f00a ff6d 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08011fe0 	.word	0x08011fe0
 800438c:	08011eb0 	.word	0x08011eb0
 8004390:	080144b0 	.word	0x080144b0
 8004394:	08012790 	.word	0x08012790
 8004398:	08011fe4 	.word	0x08011fe4

0800439c <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800439c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a0:	b092      	sub	sp, #72	; 0x48
 80043a2:	af04      	add	r7, sp, #16
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24
 80043a6:	6239      	str	r1, [r7, #32]
 80043a8:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x20>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x20>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <uavcan_primitive_array_Integer64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043bc:	f06f 0301 	mvn.w	r3, #1
 80043c0:	e109      	b.n	80045d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	f640 0207 	movw	r2, #2055	; 0x807
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d802      	bhi.n	80043da <uavcan_primitive_array_Integer64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80043d4:	f06f 0302 	mvn.w	r3, #2
 80043d8:	e0fd      	b.n	80045d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x58>
 80043e8:	4b7d      	ldr	r3, [pc, #500]	; (80045e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 80043ec:	2181      	movs	r1, #129	; 0x81
 80043ee:	487e      	ldr	r0, [pc, #504]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 80043f0:	f00a ff32 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	2200      	movs	r2, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	617a      	str	r2, [r7, #20]
 80043fc:	f640 0308 	movw	r3, #2056	; 0x808
 8004400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004404:	4602      	mov	r2, r0
 8004406:	eb12 0803 	adds.w	r8, r2, r3
 800440a:	460b      	mov	r3, r1
 800440c:	f143 0900 	adc.w	r9, r3, #0
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	2200      	movs	r2, #0
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	60fa      	str	r2, [r7, #12]
 800441a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800441e:	460b      	mov	r3, r1
 8004420:	4543      	cmp	r3, r8
 8004422:	4613      	mov	r3, r2
 8004424:	eb73 0309 	sbcs.w	r3, r3, r9
 8004428:	d205      	bcs.n	8004436 <uavcan_primitive_array_Integer64_1_0_serialize_+0x9a>
 800442a:	4b70      	ldr	r3, [pc, #448]	; (80045ec <uavcan_primitive_array_Integer64_1_0_serialize_+0x250>)
 800442c:	4a6d      	ldr	r2, [pc, #436]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800442e:	2182      	movs	r1, #130	; 0x82
 8004430:	486d      	ldr	r0, [pc, #436]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004432:	f00a ff11 	bl	800f258 <__assert_func>
        if (obj->value.count > 32)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800443c:	2b20      	cmp	r3, #32
 800443e:	d902      	bls.n	8004446 <uavcan_primitive_array_Integer64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004440:	f06f 0309 	mvn.w	r3, #9
 8004444:	e0c7      	b.n	80045d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	08db      	lsrs	r3, r3, #3
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	4413      	add	r3, r2
 8004454:	b2ca      	uxtb	r2, r1
 8004456:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445a:	3308      	adds	r3, #8
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd8>
 8004468:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 800446a:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 800446c:	218a      	movs	r1, #138	; 0x8a
 800446e:	485e      	ldr	r0, [pc, #376]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 8004470:	f00a fef2 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004474:	2300      	movs	r3, #0
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
 8004478:	e043      	b.n	8004502 <uavcan_primitive_array_Integer64_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <uavcan_primitive_array_Integer64_1_0_serialize_+0xf4>
 8004484:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 8004486:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004488:	218d      	movs	r1, #141	; 0x8d
 800448a:	4857      	ldr	r0, [pc, #348]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800448c:	f00a fee4 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2200      	movs	r2, #0
 8004494:	469a      	mov	sl, r3
 8004496:	4693      	mov	fp, r2
 8004498:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 800449c:	f14b 0500 	adc.w	r5, fp, #0
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	2200      	movs	r2, #0
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044ae:	460b      	mov	r3, r1
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	4613      	mov	r3, r2
 80044b4:	41ab      	sbcs	r3, r5
 80044b6:	d205      	bcs.n	80044c4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x128>
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x254>)
 80044ba:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 80044bc:	218e      	movs	r1, #142	; 0x8e
 80044be:	484a      	ldr	r0, [pc, #296]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 80044c0:	f00a feca 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetIxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 64U);
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	2140      	movs	r1, #64	; 0x40
 80044d2:	9102      	str	r1, [sp, #8]
 80044d4:	e9cd 2300 	strd	r2, r3, [sp]
 80044d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044dc:	6a38      	ldr	r0, [r7, #32]
 80044de:	f7fc ff5d 	bl	800139c <nunavutSetIxx>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 80044e8:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da02      	bge.n	80044f6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x15a>
            {
                return _err0_;
 80044f0:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80044f4:	e06f      	b.n	80045d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
            }
            offset_bits += 64U;
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	3340      	adds	r3, #64	; 0x40
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3301      	adds	r3, #1
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450a:	429a      	cmp	r2, r3
 800450c:	d3b5      	bcc.n	800447a <uavcan_primitive_array_Integer64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03a      	beq.n	800458e <uavcan_primitive_array_Integer64_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f1c3 0308 	rsb	r3, r3, #8
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 800452a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <uavcan_primitive_array_Integer64_1_0_serialize_+0x1a2>
 8004532:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x258>)
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004536:	219b      	movs	r1, #155	; 0x9b
 8004538:	482b      	ldr	r0, [pc, #172]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800453a:	f00a fe8d 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800453e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004542:	9302      	str	r3, [sp, #8]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9cd 2300 	strd	r2, r3, [sp]
 8004550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004554:	6a38      	ldr	r0, [r7, #32]
 8004556:	f7fc fe9d 	bl	8001294 <nunavutSetUxx>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8004560:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004564:	2b00      	cmp	r3, #0
 8004566:	da02      	bge.n	800456e <uavcan_primitive_array_Integer64_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8004568:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800456c:	e033      	b.n	80045d6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x23a>
        }
        offset_bits += _pad0_;
 800456e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004574:	4413      	add	r3, r2
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <uavcan_primitive_array_Integer64_1_0_serialize_+0x1f2>
 8004582:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 8004584:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004586:	21a2      	movs	r1, #162	; 0xa2
 8004588:	4817      	ldr	r0, [pc, #92]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800458a:	f00a fe65 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	2b07      	cmp	r3, #7
 8004592:	d805      	bhi.n	80045a0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x204>
 8004594:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x25c>)
 8004596:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 8004598:	21a5      	movs	r1, #165	; 0xa5
 800459a:	4813      	ldr	r0, [pc, #76]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 800459c:	f00a fe5c 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	f640 0208 	movw	r2, #2056	; 0x808
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d905      	bls.n	80045b6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x21a>
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <uavcan_primitive_array_Integer64_1_0_serialize_+0x260>)
 80045ac:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 80045ae:	21a6      	movs	r1, #166	; 0xa6
 80045b0:	480d      	ldr	r0, [pc, #52]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 80045b2:	f00a fe51 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <uavcan_primitive_array_Integer64_1_0_serialize_+0x230>
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x244>)
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x248>)
 80045c4:	21a7      	movs	r1, #167	; 0xa7
 80045c6:	4808      	ldr	r0, [pc, #32]	; (80045e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24c>)
 80045c8:	f00a fe46 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	08da      	lsrs	r2, r3, #3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3738      	adds	r7, #56	; 0x38
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e0:	08011eb0 	.word	0x08011eb0
 80045e4:	0801489c 	.word	0x0801489c
 80045e8:	08012818 	.word	0x08012818
 80045ec:	08012474 	.word	0x08012474
 80045f0:	080124a8 	.word	0x080124a8
 80045f4:	08011fa8 	.word	0x08011fa8
 80045f8:	08011fb4 	.word	0x08011fb4
 80045fc:	080124d8 	.word	0x080124d8

08004600 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d006      	beq.n	8004626 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004626:	f06f 0301 	mvn.w	r3, #1
 800462a:	e08c      	b.n	8004746 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x150>)
 8004634:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x5c>
 8004650:	4b40      	ldr	r3, [pc, #256]	; (8004754 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 8004652:	4a41      	ldr	r2, [pc, #260]	; (8004758 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 8004654:	21ce      	movs	r1, #206	; 0xce
 8004656:	4841      	ldr	r0, [pc, #260]	; (800475c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 8004658:	f00a fdfe 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3308      	adds	r3, #8
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	429a      	cmp	r2, r3
 8004664:	d309      	bcc.n	800467a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004678:	e003      	b.n	8004682 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3308      	adds	r3, #8
 8004686:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800468e:	2b20      	cmp	r3, #32
 8004690:	d902      	bls.n	8004698 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004692:	f06f 0309 	mvn.w	r3, #9
 8004696:	e056      	b.n	8004746 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <uavcan_primitive_array_Integer64_1_0_deserialize_+0xae>
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 80046a4:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 80046a6:	21dd      	movs	r1, #221	; 0xdd
 80046a8:	482c      	ldr	r0, [pc, #176]	; (800475c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 80046aa:	f00a fdd5 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e01e      	b.n	80046f2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <uavcan_primitive_array_Integer64_1_0_deserialize_+0xca>
 80046be:	4b25      	ldr	r3, [pc, #148]	; (8004754 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 80046c2:	21e0      	movs	r1, #224	; 0xe0
 80046c4:	4825      	ldr	r0, [pc, #148]	; (800475c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 80046c6:	f00a fdc7 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI64(&buffer[0], capacity_bytes, offset_bits, 64);
 80046ca:	2340      	movs	r3, #64	; 0x40
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	6979      	ldr	r1, [r7, #20]
 80046d0:	68b8      	ldr	r0, [r7, #8]
 80046d2:	f7fd f937 	bl	8001944 <nunavutGetI64>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	00c9      	lsls	r1, r1, #3
 80046e0:	4401      	add	r1, r0
 80046e2:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3340      	adds	r3, #64	; 0x40
 80046ea:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3da      	bcc.n	80046b4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3307      	adds	r3, #7
 8004702:	f023 0307 	bic.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x11e>
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x154>)
 8004714:	4a10      	ldr	r2, [pc, #64]	; (8004758 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 8004716:	21e5      	movs	r1, #229	; 0xe5
 8004718:	4810      	ldr	r0, [pc, #64]	; (800475c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 800471a:	f00a fd9d 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800471e:	6939      	ldr	r1, [r7, #16]
 8004720:	69f8      	ldr	r0, [r7, #28]
 8004722:	f7fc fc05 	bl	8000f30 <nunavutChooseMin>
 8004726:	4603      	mov	r3, r0
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	d205      	bcs.n	8004744 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x144>
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x160>)
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x158>)
 800473c:	21e7      	movs	r1, #231	; 0xe7
 800473e:	4807      	ldr	r0, [pc, #28]	; (800475c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x15c>)
 8004740:	f00a fd8a 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	08011fe0 	.word	0x08011fe0
 8004754:	08011eb0 	.word	0x08011eb0
 8004758:	0801446c 	.word	0x0801446c
 800475c:	08012818 	.word	0x08012818
 8004760:	08011fe4 	.word	0x08011fe4

08004764 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b094      	sub	sp, #80	; 0x50
 800476a:	af04      	add	r7, sp, #16
 800476c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800476e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004770:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <uavcan_primitive_array_Integer8_1_0_serialize_+0x20>
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <uavcan_primitive_array_Integer8_1_0_serialize_+0x20>
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <uavcan_primitive_array_Integer8_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004784:	f06f 0301 	mvn.w	r3, #1
 8004788:	e10a      	b.n	80049a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004798:	d202      	bcs.n	80047a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800479a:	f06f 0302 	mvn.w	r3, #2
 800479e:	e0ff      	b.n	80049a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <uavcan_primitive_array_Integer8_1_0_serialize_+0x56>
 80047ae:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 80047b0:	4a7f      	ldr	r2, [pc, #508]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 80047b2:	2181      	movs	r1, #129	; 0x81
 80047b4:	487f      	ldr	r0, [pc, #508]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 80047b6:	f00a fd4f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	2200      	movs	r2, #0
 80047be:	469a      	mov	sl, r3
 80047c0:	4693      	mov	fp, r2
 80047c2:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 80047c6:	f14b 0900 	adc.w	r9, fp, #0
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	2200      	movs	r2, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	61fa      	str	r2, [r7, #28]
 80047d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047d8:	460b      	mov	r3, r1
 80047da:	4543      	cmp	r3, r8
 80047dc:	4613      	mov	r3, r2
 80047de:	eb73 0309 	sbcs.w	r3, r3, r9
 80047e2:	d205      	bcs.n	80047f0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x8c>
 80047e4:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <uavcan_primitive_array_Integer8_1_0_serialize_+0x254>)
 80047e6:	4a72      	ldr	r2, [pc, #456]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 80047e8:	2182      	movs	r1, #130	; 0x82
 80047ea:	4872      	ldr	r0, [pc, #456]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 80047ec:	f00a fd34 	bl	800f258 <__assert_func>
        if (obj->value.count > 256)
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d902      	bls.n	8004802 <uavcan_primitive_array_Integer8_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80047fc:	f06f 0309 	mvn.w	r3, #9
 8004800:	e0ce      	b.n	80049a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004808:	2200      	movs	r2, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	617a      	str	r2, [r7, #20]
 800480e:	2310      	movs	r3, #16
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004816:	e9cd 2300 	strd	r2, r3, [sp]
 800481a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800481c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800481e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004820:	f7fc fd38 	bl	8001294 <nunavutSetUxx>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 800482a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800482e:	2b00      	cmp	r3, #0
 8004830:	da02      	bge.n	8004838 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004832:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004836:	e0b3      	b.n	80049a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        offset_bits += 16U;
 8004838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483a:	3310      	adds	r3, #16
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800483e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <uavcan_primitive_array_Integer8_1_0_serialize_+0xf0>
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 800484a:	4a59      	ldr	r2, [pc, #356]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 800484c:	218e      	movs	r1, #142	; 0x8e
 800484e:	4859      	ldr	r0, [pc, #356]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004850:	f00a fd02 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004854:	2300      	movs	r3, #0
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
 8004858:	e039      	b.n	80048ce <uavcan_primitive_array_Integer8_1_0_serialize_+0x16a>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <uavcan_primitive_array_Integer8_1_0_serialize_+0x10c>
 8004864:	4b51      	ldr	r3, [pc, #324]	; (80049ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 8004866:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004868:	2191      	movs	r1, #145	; 0x91
 800486a:	4852      	ldr	r0, [pc, #328]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800486c:	f00a fcf4 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	2200      	movs	r2, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	60fa      	str	r2, [r7, #12]
 8004878:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800487c:	460b      	mov	r3, r1
 800487e:	f113 0408 	adds.w	r4, r3, #8
 8004882:	4613      	mov	r3, r2
 8004884:	f143 0500 	adc.w	r5, r3, #0
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	2200      	movs	r2, #0
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004896:	460b      	mov	r3, r1
 8004898:	42a3      	cmp	r3, r4
 800489a:	4613      	mov	r3, r2
 800489c:	41ab      	sbcs	r3, r5
 800489e:	d205      	bcs.n	80048ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x148>
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <uavcan_primitive_array_Integer8_1_0_serialize_+0x258>)
 80048a2:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 80048a4:	2192      	movs	r1, #146	; 0x92
 80048a6:	4843      	ldr	r0, [pc, #268]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 80048a8:	f00a fcd6 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	4413      	add	r3, r2
 80048b2:	f993 1000 	ldrsb.w	r1, [r3]
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048bc:	4413      	add	r3, r2
 80048be:	b2ca      	uxtb	r2, r1
 80048c0:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	3308      	adds	r3, #8
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	3301      	adds	r3, #1
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80048d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3bf      	bcc.n	800485a <uavcan_primitive_array_Integer8_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03a      	beq.n	800495a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1f6>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f1c3 0308 	rsb	r3, r3, #8
 80048f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 80048f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1a6>
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x25c>)
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004902:	219b      	movs	r1, #155	; 0x9b
 8004904:	482b      	ldr	r0, [pc, #172]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004906:	f00a fca7 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800490a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9cd 2300 	strd	r2, r3, [sp]
 800491c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f7fc fcb7 	bl	8001294 <nunavutSetUxx>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 800492c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004930:	2b00      	cmp	r3, #0
 8004932:	da02      	bge.n	800493a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1d6>
        {
            return _err1_;
 8004934:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004938:	e032      	b.n	80049a0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x23c>
        }
        offset_bits += _pad0_;
 800493a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800493e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004940:	4413      	add	r3, r2
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1f6>
 800494e:	4b17      	ldr	r3, [pc, #92]	; (80049ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 8004950:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004952:	21a2      	movs	r1, #162	; 0xa2
 8004954:	4817      	ldr	r0, [pc, #92]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004956:	f00a fc7f 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d805      	bhi.n	800496c <uavcan_primitive_array_Integer8_1_0_serialize_+0x208>
 8004960:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x260>)
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004964:	21a5      	movs	r1, #165	; 0xa5
 8004966:	4813      	ldr	r0, [pc, #76]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004968:	f00a fc76 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004972:	d905      	bls.n	8004980 <uavcan_primitive_array_Integer8_1_0_serialize_+0x21c>
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <uavcan_primitive_array_Integer8_1_0_serialize_+0x264>)
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 8004978:	21a6      	movs	r1, #166	; 0xa6
 800497a:	480e      	ldr	r0, [pc, #56]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 800497c:	f00a fc6c 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <uavcan_primitive_array_Integer8_1_0_serialize_+0x232>
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <uavcan_primitive_array_Integer8_1_0_serialize_+0x248>)
 800498c:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24c>)
 800498e:	21a7      	movs	r1, #167	; 0xa7
 8004990:	4808      	ldr	r0, [pc, #32]	; (80049b4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x250>)
 8004992:	f00a fc61 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3740      	adds	r7, #64	; 0x40
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	08011eb0 	.word	0x08011eb0
 80049b0:	0801492c 	.word	0x0801492c
 80049b4:	080128a0 	.word	0x080128a0
 80049b8:	08012570 	.word	0x08012570
 80049bc:	08011f78 	.word	0x08011f78
 80049c0:	08011fa8 	.word	0x08011fa8
 80049c4:	080125a4 	.word	0x080125a4
 80049c8:	080125bc 	.word	0x080125bc

080049cc <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d006      	beq.n	80049f2 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80049f2:	f06f 0301 	mvn.w	r3, #1
 80049f6:	e084      	b.n	8004b02 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x136>
    }
    if (buffer == NULL)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80049fe:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x140>)
 8004a00:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x5c>
 8004a1c:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004a1e:	4a3d      	ldr	r2, [pc, #244]	; (8004b14 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004a20:	21ce      	movs	r1, #206	; 0xce
 8004a22:	483d      	ldr	r0, [pc, #244]	; (8004b18 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004a24:	f00a fc18 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004a28:	2310      	movs	r3, #16
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	f7fc fd0c 	bl	800144c <nunavutGetU16>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3310      	adds	r3, #16
 8004a42:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d902      	bls.n	8004a56 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a50:	f06f 0309 	mvn.w	r3, #9
 8004a54:	e055      	b.n	8004b02 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x136>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xa0>
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004a64:	21d6      	movs	r1, #214	; 0xd6
 8004a66:	482c      	ldr	r0, [pc, #176]	; (8004b18 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004a68:	f00a fbf6 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e01d      	b.n	8004aae <uavcan_primitive_array_Integer8_1_0_deserialize_+0xe2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004a80:	21d9      	movs	r1, #217	; 0xd9
 8004a82:	4825      	ldr	r0, [pc, #148]	; (8004b18 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004a84:	f00a fbe8 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetI8(&buffer[0], capacity_bytes, offset_bits, 8);
 8004a88:	2308      	movs	r3, #8
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f7fc fe58 	bl	8001744 <nunavutGetI8>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4619      	mov	r1, r3
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d3db      	bcc.n	8004a72 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3307      	adds	r3, #7
 8004abe:	f023 0307 	bic.w	r3, r3, #7
 8004ac2:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <uavcan_primitive_array_Integer8_1_0_deserialize_+0x10e>
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x144>)
 8004ad0:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004ad2:	21de      	movs	r1, #222	; 0xde
 8004ad4:	4810      	ldr	r0, [pc, #64]	; (8004b18 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004ad6:	f00a fbbf 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004ada:	6939      	ldr	r1, [r7, #16]
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f7fc fa27 	bl	8000f30 <nunavutChooseMin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	08da      	lsrs	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d205      	bcs.n	8004b00 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x134>
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x150>)
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x148>)
 8004af8:	21e0      	movs	r1, #224	; 0xe0
 8004afa:	4807      	ldr	r0, [pc, #28]	; (8004b18 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x14c>)
 8004afc:	f00a fbac 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08011fe0 	.word	0x08011fe0
 8004b10:	08011eb0 	.word	0x08011eb0
 8004b14:	08014528 	.word	0x08014528
 8004b18:	080128a0 	.word	0x080128a0
 8004b1c:	08011fe4 	.word	0x08011fe4

08004b20 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b094      	sub	sp, #80	; 0x50
 8004b26:	af04      	add	r7, sp, #16
 8004b28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b2c:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x20>
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x20>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <uavcan_primitive_array_Natural16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b40:	f06f 0301 	mvn.w	r3, #1
 8004b44:	e10d      	b.n	8004d62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	00da      	lsls	r2, r3, #3
 8004b50:	f640 0307 	movw	r3, #2055	; 0x807
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d802      	bhi.n	8004b5e <uavcan_primitive_array_Natural16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004b58:	f06f 0302 	mvn.w	r3, #2
 8004b5c:	e101      	b.n	8004d62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <uavcan_primitive_array_Natural16_1_0_serialize_+0x58>
 8004b6c:	4b7f      	ldr	r3, [pc, #508]	; (8004d6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004b6e:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004b70:	2181      	movs	r1, #129	; 0x81
 8004b72:	4880      	ldr	r0, [pc, #512]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004b74:	f00a fb70 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8004b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	4693      	mov	fp, r2
 8004b80:	f640 0308 	movw	r3, #2056	; 0x808
 8004b84:	eb1a 0803 	adds.w	r8, sl, r3
 8004b88:	f14b 0900 	adc.w	r9, fp, #0
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	2200      	movs	r2, #0
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	61fa      	str	r2, [r7, #28]
 8004b96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4543      	cmp	r3, r8
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb73 0309 	sbcs.w	r3, r3, r9
 8004ba4:	d205      	bcs.n	8004bb2 <uavcan_primitive_array_Natural16_1_0_serialize_+0x92>
 8004ba6:	4b74      	ldr	r3, [pc, #464]	; (8004d78 <uavcan_primitive_array_Natural16_1_0_serialize_+0x258>)
 8004ba8:	4a71      	ldr	r2, [pc, #452]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004baa:	2182      	movs	r1, #130	; 0x82
 8004bac:	4871      	ldr	r0, [pc, #452]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004bae:	f00a fb53 	bl	800f258 <__assert_func>
        if (obj->value.count > 128)
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d902      	bls.n	8004bc2 <uavcan_primitive_array_Natural16_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004bbc:	f06f 0309 	mvn.w	r3, #9
 8004bc0:	e0cf      	b.n	8004d62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bce:	4413      	add	r3, r2
 8004bd0:	b2ca      	uxtb	r2, r1
 8004bd2:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd0>
 8004be4:	4b61      	ldr	r3, [pc, #388]	; (8004d6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004be6:	4a62      	ldr	r2, [pc, #392]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004be8:	218a      	movs	r1, #138	; 0x8a
 8004bea:	4862      	ldr	r0, [pc, #392]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004bec:	f00a fb34 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf4:	e04b      	b.n	8004c8e <uavcan_primitive_array_Natural16_1_0_serialize_+0x16e>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <uavcan_primitive_array_Natural16_1_0_serialize_+0xec>
 8004c00:	4b5a      	ldr	r3, [pc, #360]	; (8004d6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004c02:	4a5b      	ldr	r2, [pc, #364]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004c04:	218d      	movs	r1, #141	; 0x8d
 8004c06:	485b      	ldr	r0, [pc, #364]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004c08:	f00a fb26 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2200      	movs	r2, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	617a      	str	r2, [r7, #20]
 8004c14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	f113 0410 	adds.w	r4, r3, #16
 8004c1e:	4613      	mov	r3, r2
 8004c20:	f143 0500 	adc.w	r5, r3, #0
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	60fa      	str	r2, [r7, #12]
 8004c2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c32:	460b      	mov	r3, r1
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	4613      	mov	r3, r2
 8004c38:	41ab      	sbcs	r3, r5
 8004c3a:	d205      	bcs.n	8004c48 <uavcan_primitive_array_Natural16_1_0_serialize_+0x128>
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <uavcan_primitive_array_Natural16_1_0_serialize_+0x25c>)
 8004c3e:	4a4c      	ldr	r2, [pc, #304]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004c40:	218e      	movs	r1, #142	; 0x8e
 8004c42:	484c      	ldr	r0, [pc, #304]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004c44:	f00a fb08 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 16U);
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2200      	movs	r2, #0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	2310      	movs	r3, #16
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	e9cd 2300 	strd	r2, r3, [sp]
 8004c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c6a:	f7fc fb13 	bl	8001294 <nunavutSetUxx>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 8004c74:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da02      	bge.n	8004c82 <uavcan_primitive_array_Natural16_1_0_serialize_+0x162>
            {
                return _err0_;
 8004c7c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004c80:	e06f      	b.n	8004d62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
            }
            offset_bits += 16U;
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	3310      	adds	r3, #16
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3ad      	bcc.n	8004bf6 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d03a      	beq.n	8004d1a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1fa>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f1c3 0308 	rsb	r3, r3, #8
 8004cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8004cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <uavcan_primitive_array_Natural16_1_0_serialize_+0x1aa>
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <uavcan_primitive_array_Natural16_1_0_serialize_+0x260>)
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004cc2:	219b      	movs	r1, #155	; 0x9b
 8004cc4:	482b      	ldr	r0, [pc, #172]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004cc6:	f00a fac7 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9cd 2300 	strd	r2, r3, [sp]
 8004cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f7fc fad7 	bl	8001294 <nunavutSetUxx>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 8004cec:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da02      	bge.n	8004cfa <uavcan_primitive_array_Natural16_1_0_serialize_+0x1da>
        {
            return _err1_;
 8004cf4:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004cf8:	e033      	b.n	8004d62 <uavcan_primitive_array_Natural16_1_0_serialize_+0x242>
        }
        offset_bits += _pad0_;
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d00:	4413      	add	r3, r2
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1fa>
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004d10:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d12:	21a2      	movs	r1, #162	; 0xa2
 8004d14:	4817      	ldr	r0, [pc, #92]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d16:	f00a fa9f 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	2b07      	cmp	r3, #7
 8004d1e:	d805      	bhi.n	8004d2c <uavcan_primitive_array_Natural16_1_0_serialize_+0x20c>
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <uavcan_primitive_array_Natural16_1_0_serialize_+0x264>)
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d24:	21a5      	movs	r1, #165	; 0xa5
 8004d26:	4813      	ldr	r0, [pc, #76]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d28:	f00a fa96 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2e:	f640 0208 	movw	r2, #2056	; 0x808
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d905      	bls.n	8004d42 <uavcan_primitive_array_Natural16_1_0_serialize_+0x222>
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <uavcan_primitive_array_Natural16_1_0_serialize_+0x268>)
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d3a:	21a6      	movs	r1, #166	; 0xa6
 8004d3c:	480d      	ldr	r0, [pc, #52]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d3e:	f00a fa8b 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <uavcan_primitive_array_Natural16_1_0_serialize_+0x238>
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24c>)
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <uavcan_primitive_array_Natural16_1_0_serialize_+0x250>)
 8004d50:	21a7      	movs	r1, #167	; 0xa7
 8004d52:	4808      	ldr	r0, [pc, #32]	; (8004d74 <uavcan_primitive_array_Natural16_1_0_serialize_+0x254>)
 8004d54:	f00a fa80 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5a:	08da      	lsrs	r2, r3, #3
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3740      	adds	r7, #64	; 0x40
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6c:	08011eb0 	.word	0x08011eb0
 8004d70:	080149bc 	.word	0x080149bc
 8004d74:	08012928 	.word	0x08012928
 8004d78:	08012474 	.word	0x08012474
 8004d7c:	08012760 	.word	0x08012760
 8004d80:	08011fa8 	.word	0x08011fa8
 8004d84:	08011fb4 	.word	0x08011fb4
 8004d88:	080124d8 	.word	0x080124d8

08004d8c <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004db2:	f06f 0301 	mvn.w	r3, #1
 8004db6:	e08a      	b.n	8004ece <uavcan_primitive_array_Natural16_1_0_deserialize_+0x142>
    }
    if (buffer == NULL)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004dbe:	4b46      	ldr	r3, [pc, #280]	; (8004ed8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x14c>)
 8004dc0:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x5c>
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004dde:	4a40      	ldr	r2, [pc, #256]	; (8004ee0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004de0:	21ce      	movs	r1, #206	; 0xce
 8004de2:	4840      	ldr	r0, [pc, #256]	; (8004ee4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004de4:	f00a fa38 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3308      	adds	r3, #8
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d309      	bcc.n	8004e06 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e04:	e003      	b.n	8004e0e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3308      	adds	r3, #8
 8004e12:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d902      	bls.n	8004e24 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004e1e:	f06f 0309 	mvn.w	r3, #9
 8004e22:	e054      	b.n	8004ece <uavcan_primitive_array_Natural16_1_0_deserialize_+0x142>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <uavcan_primitive_array_Natural16_1_0_deserialize_+0xae>
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e32:	21dd      	movs	r1, #221	; 0xdd
 8004e34:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e36:	f00a fa0f 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e01c      	b.n	8004e7a <uavcan_primitive_array_Natural16_1_0_deserialize_+0xee>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xca>
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e4c:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e4e:	21e0      	movs	r1, #224	; 0xe0
 8004e50:	4824      	ldr	r0, [pc, #144]	; (8004ee4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004e52:	f00a fa01 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004e56:	2310      	movs	r3, #16
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f7fc faf5 	bl	800144c <nunavutGetU16>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        offset_bits += 16U;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3310      	adds	r3, #16
 8004e72:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3dc      	bcc.n	8004e40 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3307      	adds	r3, #7
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x11a>
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x150>)
 8004e9c:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004e9e:	21e5      	movs	r1, #229	; 0xe5
 8004ea0:	4810      	ldr	r0, [pc, #64]	; (8004ee4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004ea2:	f00a f9d9 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	69f8      	ldr	r0, [r7, #28]
 8004eaa:	f7fc f841 	bl	8000f30 <nunavutChooseMin>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	08da      	lsrs	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d205      	bcs.n	8004ecc <uavcan_primitive_array_Natural16_1_0_deserialize_+0x140>
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x15c>)
 8004ec2:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x154>)
 8004ec4:	21e7      	movs	r1, #231	; 0xe7
 8004ec6:	4807      	ldr	r0, [pc, #28]	; (8004ee4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x158>)
 8004ec8:	f00a f9c6 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08011fe0 	.word	0x08011fe0
 8004edc:	08011eb0 	.word	0x08011eb0
 8004ee0:	080145d4 	.word	0x080145d4
 8004ee4:	08012928 	.word	0x08012928
 8004ee8:	08011fe4 	.word	0x08011fe4

08004eec <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef0:	b094      	sub	sp, #80	; 0x50
 8004ef2:	af04      	add	r7, sp, #16
 8004ef4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ef6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ef8:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <uavcan_primitive_array_Natural32_1_0_serialize_+0x20>
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <uavcan_primitive_array_Natural32_1_0_serialize_+0x20>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <uavcan_primitive_array_Natural32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004f0c:	f06f 0301 	mvn.w	r3, #1
 8004f10:	e10c      	b.n	800512c <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	00da      	lsls	r2, r3, #3
 8004f1c:	f640 0307 	movw	r3, #2055	; 0x807
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d802      	bhi.n	8004f2a <uavcan_primitive_array_Natural32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004f24:	f06f 0302 	mvn.w	r3, #2
 8004f28:	e100      	b.n	800512c <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <uavcan_primitive_array_Natural32_1_0_serialize_+0x58>
 8004f38:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004f3a:	4a80      	ldr	r2, [pc, #512]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004f3c:	2181      	movs	r1, #129	; 0x81
 8004f3e:	4880      	ldr	r0, [pc, #512]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004f40:	f00a f98a 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	2200      	movs	r2, #0
 8004f48:	469a      	mov	sl, r3
 8004f4a:	4693      	mov	fp, r2
 8004f4c:	f640 0308 	movw	r3, #2056	; 0x808
 8004f50:	eb1a 0803 	adds.w	r8, sl, r3
 8004f54:	f14b 0900 	adc.w	r9, fp, #0
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	61fa      	str	r2, [r7, #28]
 8004f62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f66:	460b      	mov	r3, r1
 8004f68:	4543      	cmp	r3, r8
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	eb73 0309 	sbcs.w	r3, r3, r9
 8004f70:	d205      	bcs.n	8004f7e <uavcan_primitive_array_Natural32_1_0_serialize_+0x92>
 8004f72:	4b74      	ldr	r3, [pc, #464]	; (8005144 <uavcan_primitive_array_Natural32_1_0_serialize_+0x258>)
 8004f74:	4a71      	ldr	r2, [pc, #452]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004f76:	2182      	movs	r1, #130	; 0x82
 8004f78:	4871      	ldr	r0, [pc, #452]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004f7a:	f00a f96d 	bl	800f258 <__assert_func>
        if (obj->value.count > 64)
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d902      	bls.n	8004f8e <uavcan_primitive_array_Natural32_1_0_serialize_+0xa2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004f88:	f06f 0309 	mvn.w	r3, #9
 8004f8c:	e0ce      	b.n	800512c <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	08db      	lsrs	r3, r3, #3
 8004f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9a:	4413      	add	r3, r2
 8004f9c:	b2ca      	uxtb	r2, r1
 8004f9e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <uavcan_primitive_array_Natural32_1_0_serialize_+0xd0>
 8004fb0:	4b61      	ldr	r3, [pc, #388]	; (8005138 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004fb2:	4a62      	ldr	r2, [pc, #392]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004fb4:	218a      	movs	r1, #138	; 0x8a
 8004fb6:	4862      	ldr	r0, [pc, #392]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004fb8:	f00a f94e 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc0:	e04a      	b.n	8005058 <uavcan_primitive_array_Natural32_1_0_serialize_+0x16c>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <uavcan_primitive_array_Natural32_1_0_serialize_+0xec>
 8004fcc:	4b5a      	ldr	r3, [pc, #360]	; (8005138 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8004fce:	4a5b      	ldr	r2, [pc, #364]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8004fd0:	218d      	movs	r1, #141	; 0x8d
 8004fd2:	485b      	ldr	r0, [pc, #364]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8004fd4:	f00a f940 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	617a      	str	r2, [r7, #20]
 8004fe0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	f113 0420 	adds.w	r4, r3, #32
 8004fea:	4613      	mov	r3, r2
 8004fec:	f143 0500 	adc.w	r5, r3, #0
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	60fa      	str	r2, [r7, #12]
 8004ffa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ffe:	460b      	mov	r3, r1
 8005000:	42a3      	cmp	r3, r4
 8005002:	4613      	mov	r3, r2
 8005004:	41ab      	sbcs	r3, r5
 8005006:	d205      	bcs.n	8005014 <uavcan_primitive_array_Natural32_1_0_serialize_+0x128>
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <uavcan_primitive_array_Natural32_1_0_serialize_+0x25c>)
 800500a:	4a4c      	ldr	r2, [pc, #304]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 800500c:	218e      	movs	r1, #142	; 0x8e
 800500e:	484c      	ldr	r0, [pc, #304]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8005010:	f00a f922 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 32U);
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501c:	2200      	movs	r2, #0
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	2320      	movs	r3, #32
 8005024:	9302      	str	r3, [sp, #8]
 8005026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800502a:	e9cd 2300 	strd	r2, r3, [sp]
 800502e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005034:	f7fc f92e 	bl	8001294 <nunavutSetUxx>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            if (_err0_ < 0)
 800503e:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8005042:	2b00      	cmp	r3, #0
 8005044:	da02      	bge.n	800504c <uavcan_primitive_array_Natural32_1_0_serialize_+0x160>
            {
                return _err0_;
 8005046:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800504a:	e06f      	b.n	800512c <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
            }
            offset_bits += 32U;
 800504c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504e:	3320      	adds	r3, #32
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	3301      	adds	r3, #1
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800505e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005060:	429a      	cmp	r2, r3
 8005062:	d3ae      	bcc.n	8004fc2 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03a      	beq.n	80050e4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1f8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f1c3 0308 	rsb	r3, r3, #8
 800507c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005080:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1a8>
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <uavcan_primitive_array_Natural32_1_0_serialize_+0x260>)
 800508a:	4a2c      	ldr	r2, [pc, #176]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 800508c:	219b      	movs	r1, #155	; 0x9b
 800508e:	482c      	ldr	r0, [pc, #176]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8005090:	f00a f8e2 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9cd 2300 	strd	r2, r3, [sp]
 80050a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ac:	f7fc f8f2 	bl	8001294 <nunavutSetUxx>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        if (_err1_ < 0)
 80050b6:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da02      	bge.n	80050c4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1d8>
        {
            return _err1_;
 80050be:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80050c2:	e033      	b.n	800512c <uavcan_primitive_array_Natural32_1_0_serialize_+0x240>
        }
        offset_bits += _pad0_;
 80050c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ca:	4413      	add	r3, r2
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1f8>
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 80050da:	4a18      	ldr	r2, [pc, #96]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050dc:	21a2      	movs	r1, #162	; 0xa2
 80050de:	4818      	ldr	r0, [pc, #96]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050e0:	f00a f8ba 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	2b07      	cmp	r3, #7
 80050e8:	d805      	bhi.n	80050f6 <uavcan_primitive_array_Natural32_1_0_serialize_+0x20a>
 80050ea:	4b19      	ldr	r3, [pc, #100]	; (8005150 <uavcan_primitive_array_Natural32_1_0_serialize_+0x264>)
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 80050ee:	21a5      	movs	r1, #165	; 0xa5
 80050f0:	4813      	ldr	r0, [pc, #76]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 80050f2:	f00a f8b1 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	f640 0208 	movw	r2, #2056	; 0x808
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d905      	bls.n	800510c <uavcan_primitive_array_Natural32_1_0_serialize_+0x220>
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <uavcan_primitive_array_Natural32_1_0_serialize_+0x268>)
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 8005104:	21a6      	movs	r1, #166	; 0xa6
 8005106:	480e      	ldr	r0, [pc, #56]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 8005108:	f00a f8a6 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <uavcan_primitive_array_Natural32_1_0_serialize_+0x236>
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24c>)
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <uavcan_primitive_array_Natural32_1_0_serialize_+0x250>)
 800511a:	21a7      	movs	r1, #167	; 0xa7
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <uavcan_primitive_array_Natural32_1_0_serialize_+0x254>)
 800511e:	f00a f89b 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005124:	08da      	lsrs	r2, r3, #3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3740      	adds	r7, #64	; 0x40
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	08011eb0 	.word	0x08011eb0
 800513c:	0801498c 	.word	0x0801498c
 8005140:	080129b0 	.word	0x080129b0
 8005144:	08012474 	.word	0x08012474
 8005148:	08012324 	.word	0x08012324
 800514c:	08011fa8 	.word	0x08011fa8
 8005150:	08011fb4 	.word	0x08011fb4
 8005154:	080124d8 	.word	0x080124d8

08005158 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800517e:	f06f 0301 	mvn.w	r3, #1
 8005182:	e089      	b.n	8005298 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x148>)
 800518c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x5c>
 80051a8:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 80051aa:	4a3f      	ldr	r2, [pc, #252]	; (80052a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 80051ac:	21ce      	movs	r1, #206	; 0xce
 80051ae:	483f      	ldr	r0, [pc, #252]	; (80052ac <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 80051b0:	f00a f852 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3308      	adds	r3, #8
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d309      	bcc.n	80051d2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	08db      	lsrs	r3, r3, #3
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051d0:	e003      	b.n	80051da <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3308      	adds	r3, #8
 80051de:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d902      	bls.n	80051f0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80051ea:	f06f 0309 	mvn.w	r3, #9
 80051ee:	e053      	b.n	8005298 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x140>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xae>
 80051fa:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 80051fc:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 80051fe:	21dd      	movs	r1, #221	; 0xdd
 8005200:	482a      	ldr	r0, [pc, #168]	; (80052ac <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 8005202:	f00a f829 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e01b      	b.n	8005244 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xca>
 8005216:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 8005218:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 800521a:	21e0      	movs	r1, #224	; 0xe0
 800521c:	4823      	ldr	r0, [pc, #140]	; (80052ac <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 800521e:	f00a f81b 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8005222:	2320      	movs	r3, #32
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f7fc f955 	bl	80014d8 <nunavutGetU32>
 800522e:	4601      	mov	r1, r0
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        offset_bits += 32U;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3320      	adds	r3, #32
 800523c:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3dd      	bcc.n	800520c <uavcan_primitive_array_Natural32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3307      	adds	r3, #7
 8005254:	f023 0307 	bic.w	r3, r3, #7
 8005258:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x118>
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x14c>)
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 8005268:	21e5      	movs	r1, #229	; 0xe5
 800526a:	4810      	ldr	r0, [pc, #64]	; (80052ac <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 800526c:	f009 fff4 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005270:	6939      	ldr	r1, [r7, #16]
 8005272:	69f8      	ldr	r0, [r7, #28]
 8005274:	f7fb fe5c 	bl	8000f30 <nunavutChooseMin>
 8005278:	4603      	mov	r3, r0
 800527a:	08da      	lsrs	r2, r3, #3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	429a      	cmp	r2, r3
 8005288:	d205      	bcs.n	8005296 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x13e>
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x158>)
 800528c:	4a06      	ldr	r2, [pc, #24]	; (80052a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x150>)
 800528e:	21e7      	movs	r1, #231	; 0xe7
 8005290:	4806      	ldr	r0, [pc, #24]	; (80052ac <uavcan_primitive_array_Natural32_1_0_deserialize_+0x154>)
 8005292:	f009 ffe1 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	08011fe0 	.word	0x08011fe0
 80052a4:	08011eb0 	.word	0x08011eb0
 80052a8:	080145a0 	.word	0x080145a0
 80052ac:	080129b0 	.word	0x080129b0
 80052b0:	08011fe4 	.word	0x08011fe4

080052b4 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80052b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b8:	b092      	sub	sp, #72	; 0x48
 80052ba:	af04      	add	r7, sp, #16
 80052bc:	6278      	str	r0, [r7, #36]	; 0x24
 80052be:	6239      	str	r1, [r7, #32]
 80052c0:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x20>
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x20>
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <uavcan_primitive_array_Natural64_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80052d4:	f06f 0301 	mvn.w	r3, #1
 80052d8:	e109      	b.n	80054ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	f640 0207 	movw	r2, #2055	; 0x807
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d802      	bhi.n	80052f2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80052ec:	f06f 0302 	mvn.w	r3, #2
 80052f0:	e0fd      	b.n	80054ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <uavcan_primitive_array_Natural64_1_0_serialize_+0x58>
 8005300:	4b7d      	ldr	r3, [pc, #500]	; (80054f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 8005302:	4a7e      	ldr	r2, [pc, #504]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005304:	2181      	movs	r1, #129	; 0x81
 8005306:	487e      	ldr	r0, [pc, #504]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005308:	f009 ffa6 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	2200      	movs	r2, #0
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	617a      	str	r2, [r7, #20]
 8005314:	f640 0308 	movw	r3, #2056	; 0x808
 8005318:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800531c:	4602      	mov	r2, r0
 800531e:	eb12 0803 	adds.w	r8, r2, r3
 8005322:	460b      	mov	r3, r1
 8005324:	f143 0900 	adc.w	r9, r3, #0
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	2200      	movs	r2, #0
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	60fa      	str	r2, [r7, #12]
 8005332:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005336:	460b      	mov	r3, r1
 8005338:	4543      	cmp	r3, r8
 800533a:	4613      	mov	r3, r2
 800533c:	eb73 0309 	sbcs.w	r3, r3, r9
 8005340:	d205      	bcs.n	800534e <uavcan_primitive_array_Natural64_1_0_serialize_+0x9a>
 8005342:	4b70      	ldr	r3, [pc, #448]	; (8005504 <uavcan_primitive_array_Natural64_1_0_serialize_+0x250>)
 8005344:	4a6d      	ldr	r2, [pc, #436]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005346:	2182      	movs	r1, #130	; 0x82
 8005348:	486d      	ldr	r0, [pc, #436]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 800534a:	f009 ff85 	bl	800f258 <__assert_func>
        if (obj->value.count > 32)
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005354:	2b20      	cmp	r3, #32
 8005356:	d902      	bls.n	800535e <uavcan_primitive_array_Natural64_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005358:	f06f 0309 	mvn.w	r3, #9
 800535c:	e0c7      	b.n	80054ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	4413      	add	r3, r2
 800536c:	b2ca      	uxtb	r2, r1
 800536e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	3308      	adds	r3, #8
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <uavcan_primitive_array_Natural64_1_0_serialize_+0xd8>
 8005380:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 8005382:	4a5e      	ldr	r2, [pc, #376]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 8005384:	218a      	movs	r1, #138	; 0x8a
 8005386:	485e      	ldr	r0, [pc, #376]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005388:	f009 ff66 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800538c:	2300      	movs	r3, #0
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
 8005390:	e043      	b.n	800541a <uavcan_primitive_array_Natural64_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <uavcan_primitive_array_Natural64_1_0_serialize_+0xf4>
 800539c:	4b56      	ldr	r3, [pc, #344]	; (80054f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 800539e:	4a57      	ldr	r2, [pc, #348]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80053a0:	218d      	movs	r1, #141	; 0x8d
 80053a2:	4857      	ldr	r0, [pc, #348]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80053a4:	f009 ff58 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	2200      	movs	r2, #0
 80053ac:	469a      	mov	sl, r3
 80053ae:	4693      	mov	fp, r2
 80053b0:	f11a 0440 	adds.w	r4, sl, #64	; 0x40
 80053b4:	f14b 0500 	adc.w	r5, fp, #0
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	2200      	movs	r2, #0
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053c6:	460b      	mov	r3, r1
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	4613      	mov	r3, r2
 80053cc:	41ab      	sbcs	r3, r5
 80053ce:	d205      	bcs.n	80053dc <uavcan_primitive_array_Natural64_1_0_serialize_+0x128>
 80053d0:	4b4d      	ldr	r3, [pc, #308]	; (8005508 <uavcan_primitive_array_Natural64_1_0_serialize_+0x254>)
 80053d2:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80053d4:	218e      	movs	r1, #142	; 0x8e
 80053d6:	484a      	ldr	r0, [pc, #296]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80053d8:	f009 ff3e 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_], 64U);
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	2140      	movs	r1, #64	; 0x40
 80053ea:	9102      	str	r1, [sp, #8]
 80053ec:	e9cd 2300 	strd	r2, r3, [sp]
 80053f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f4:	6a38      	ldr	r0, [r7, #32]
 80053f6:	f7fb ff4d 	bl	8001294 <nunavutSetUxx>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 8005400:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8005404:	2b00      	cmp	r3, #0
 8005406:	da02      	bge.n	800540e <uavcan_primitive_array_Natural64_1_0_serialize_+0x15a>
            {
                return _err0_;
 8005408:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 800540c:	e06f      	b.n	80054ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
            }
            offset_bits += 64U;
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	3340      	adds	r3, #64	; 0x40
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	3301      	adds	r3, #1
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005422:	429a      	cmp	r2, r3
 8005424:	d3b5      	bcc.n	8005392 <uavcan_primitive_array_Natural64_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	2b00      	cmp	r3, #0
 800542e:	d03a      	beq.n	80054a6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f1c3 0308 	rsb	r3, r3, #8
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1a2>
 800544a:	4b30      	ldr	r3, [pc, #192]	; (800550c <uavcan_primitive_array_Natural64_1_0_serialize_+0x258>)
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 800544e:	219b      	movs	r1, #155	; 0x9b
 8005450:	482b      	ldr	r0, [pc, #172]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 8005452:	f009 ff01 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9cd 2300 	strd	r2, r3, [sp]
 8005468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800546a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800546c:	6a38      	ldr	r0, [r7, #32]
 800546e:	f7fb ff11 	bl	8001294 <nunavutSetUxx>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 8005478:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800547c:	2b00      	cmp	r3, #0
 800547e:	da02      	bge.n	8005486 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8005480:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8005484:	e033      	b.n	80054ee <uavcan_primitive_array_Natural64_1_0_serialize_+0x23a>
        }
        offset_bits += _pad0_;
 8005486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800548a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548c:	4413      	add	r3, r2
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1f2>
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 800549e:	21a2      	movs	r1, #162	; 0xa2
 80054a0:	4817      	ldr	r0, [pc, #92]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80054a2:	f009 fed9 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d805      	bhi.n	80054b8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x204>
 80054ac:	4b18      	ldr	r3, [pc, #96]	; (8005510 <uavcan_primitive_array_Natural64_1_0_serialize_+0x25c>)
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80054b0:	21a5      	movs	r1, #165	; 0xa5
 80054b2:	4813      	ldr	r0, [pc, #76]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80054b4:	f009 fed0 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	f640 0208 	movw	r2, #2056	; 0x808
 80054be:	4293      	cmp	r3, r2
 80054c0:	d905      	bls.n	80054ce <uavcan_primitive_array_Natural64_1_0_serialize_+0x21a>
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <uavcan_primitive_array_Natural64_1_0_serialize_+0x260>)
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80054c6:	21a6      	movs	r1, #166	; 0xa6
 80054c8:	480d      	ldr	r0, [pc, #52]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80054ca:	f009 fec5 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x230>
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x244>)
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <uavcan_primitive_array_Natural64_1_0_serialize_+0x248>)
 80054dc:	21a7      	movs	r1, #167	; 0xa7
 80054de:	4808      	ldr	r0, [pc, #32]	; (8005500 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24c>)
 80054e0:	f009 feba 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	08da      	lsrs	r2, r3, #3
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3738      	adds	r7, #56	; 0x38
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f8:	08011eb0 	.word	0x08011eb0
 80054fc:	0801495c 	.word	0x0801495c
 8005500:	08012a38 	.word	0x08012a38
 8005504:	08012474 	.word	0x08012474
 8005508:	080124a8 	.word	0x080124a8
 800550c:	08011fa8 	.word	0x08011fa8
 8005510:	08011fb4 	.word	0x08011fb4
 8005514:	080124d8 	.word	0x080124d8

08005518 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800553e:	f06f 0301 	mvn.w	r3, #1
 8005542:	e08c      	b.n	800565e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x150>)
 800554c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x5c>
 8005568:	4b40      	ldr	r3, [pc, #256]	; (800566c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 800556a:	4a41      	ldr	r2, [pc, #260]	; (8005670 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 800556c:	21ce      	movs	r1, #206	; 0xce
 800556e:	4841      	ldr	r0, [pc, #260]	; (8005674 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005570:	f009 fe72 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	3308      	adds	r3, #8
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d309      	bcc.n	8005592 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	08db      	lsrs	r3, r3, #3
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005590:	e003      	b.n	800559a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3308      	adds	r3, #8
 800559e:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 32U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d902      	bls.n	80055b0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80055aa:	f06f 0309 	mvn.w	r3, #9
 80055ae:	e056      	b.n	800565e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xae>
 80055ba:	4b2c      	ldr	r3, [pc, #176]	; (800566c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 80055bc:	4a2c      	ldr	r2, [pc, #176]	; (8005670 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 80055be:	21dd      	movs	r1, #221	; 0xdd
 80055c0:	482c      	ldr	r0, [pc, #176]	; (8005674 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 80055c2:	f009 fe49 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e01e      	b.n	800560a <uavcan_primitive_array_Natural64_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xca>
 80055d6:	4b25      	ldr	r3, [pc, #148]	; (800566c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 80055d8:	4a25      	ldr	r2, [pc, #148]	; (8005670 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 80055da:	21e0      	movs	r1, #224	; 0xe0
 80055dc:	4825      	ldr	r0, [pc, #148]	; (8005674 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 80055de:	f009 fe3b 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetU64(&buffer[0], capacity_bytes, offset_bits, 64);
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	68b8      	ldr	r0, [r7, #8]
 80055ea:	f7fb ffbf 	bl	800156c <nunavutGetU64>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	00c9      	lsls	r1, r1, #3
 80055f8:	4401      	add	r1, r0
 80055fa:	e9c1 2300 	strd	r2, r3, [r1]
        offset_bits += 64U;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3340      	adds	r3, #64	; 0x40
 8005602:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3301      	adds	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	429a      	cmp	r2, r3
 8005614:	d3da      	bcc.n	80055cc <uavcan_primitive_array_Natural64_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3307      	adds	r3, #7
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x11e>
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x154>)
 800562c:	4a10      	ldr	r2, [pc, #64]	; (8005670 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 800562e:	21e5      	movs	r1, #229	; 0xe5
 8005630:	4810      	ldr	r0, [pc, #64]	; (8005674 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005632:	f009 fe11 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005636:	6939      	ldr	r1, [r7, #16]
 8005638:	69f8      	ldr	r0, [r7, #28]
 800563a:	f7fb fc79 	bl	8000f30 <nunavutChooseMin>
 800563e:	4603      	mov	r3, r0
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	d205      	bcs.n	800565c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x144>
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x160>)
 8005652:	4a07      	ldr	r2, [pc, #28]	; (8005670 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x158>)
 8005654:	21e7      	movs	r1, #231	; 0xe7
 8005656:	4807      	ldr	r0, [pc, #28]	; (8005674 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x15c>)
 8005658:	f009 fdfe 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	08011fe0 	.word	0x08011fe0
 800566c:	08011eb0 	.word	0x08011eb0
 8005670:	0801456c 	.word	0x0801456c
 8005674:	08012a38 	.word	0x08012a38
 8005678:	08011fe4 	.word	0x08011fe4

0800567c <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b094      	sub	sp, #80	; 0x50
 8005682:	af04      	add	r7, sp, #16
 8005684:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005686:	62b9      	str	r1, [r7, #40]	; 0x28
 8005688:	627a      	str	r2, [r7, #36]	; 0x24
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <uavcan_primitive_array_Natural8_1_0_serialize_+0x20>
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <uavcan_primitive_array_Natural8_1_0_serialize_+0x20>
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <uavcan_primitive_array_Natural8_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800569c:	f06f 0301 	mvn.w	r3, #1
 80056a0:	e108      	b.n	80058b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80056b0:	d202      	bcs.n	80056b8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80056b2:	f06f 0302 	mvn.w	r3, #2
 80056b6:	e0fd      	b.n	80058b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80056bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <uavcan_primitive_array_Natural8_1_0_serialize_+0x56>
 80056c6:	4b7e      	ldr	r3, [pc, #504]	; (80058c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 80056c8:	4a7e      	ldr	r2, [pc, #504]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 80056ca:	2181      	movs	r1, #129	; 0x81
 80056cc:	487e      	ldr	r0, [pc, #504]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80056ce:	f009 fdc3 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	2200      	movs	r2, #0
 80056d6:	469a      	mov	sl, r3
 80056d8:	4693      	mov	fp, r2
 80056da:	f51a 6801 	adds.w	r8, sl, #2064	; 0x810
 80056de:	f14b 0900 	adc.w	r9, fp, #0
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	2200      	movs	r2, #0
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	61fa      	str	r2, [r7, #28]
 80056ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80056f0:	460b      	mov	r3, r1
 80056f2:	4543      	cmp	r3, r8
 80056f4:	4613      	mov	r3, r2
 80056f6:	eb73 0309 	sbcs.w	r3, r3, r9
 80056fa:	d205      	bcs.n	8005708 <uavcan_primitive_array_Natural8_1_0_serialize_+0x8c>
 80056fc:	4b73      	ldr	r3, [pc, #460]	; (80058cc <uavcan_primitive_array_Natural8_1_0_serialize_+0x250>)
 80056fe:	4a71      	ldr	r2, [pc, #452]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005700:	2182      	movs	r1, #130	; 0x82
 8005702:	4871      	ldr	r0, [pc, #452]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005704:	f009 fda8 	bl	800f258 <__assert_func>
        if (obj->value.count > 256)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d902      	bls.n	800571a <uavcan_primitive_array_Natural8_1_0_serialize_+0x9e>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005714:	f06f 0309 	mvn.w	r3, #9
 8005718:	e0cc      	b.n	80058b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        // Array length prefix: truncated uint16
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->value.count, 16U);
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005720:	2200      	movs	r2, #0
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	617a      	str	r2, [r7, #20]
 8005726:	2310      	movs	r3, #16
 8005728:	9302      	str	r3, [sp, #8]
 800572a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800572e:	e9cd 2300 	strd	r2, r3, [sp]
 8005732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005738:	f7fb fdac 	bl	8001294 <nunavutSetUxx>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (_err0_ < 0)
 8005742:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005746:	2b00      	cmp	r3, #0
 8005748:	da02      	bge.n	8005750 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 800574a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800574e:	e0b1      	b.n	80058b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        offset_bits += 16U;
 8005750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005752:	3310      	adds	r3, #16
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <uavcan_primitive_array_Natural8_1_0_serialize_+0xf0>
 8005760:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005762:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005764:	218e      	movs	r1, #142	; 0x8e
 8005766:	4858      	ldr	r0, [pc, #352]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005768:	f009 fd76 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800576c:	2300      	movs	r3, #0
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005770:	e037      	b.n	80057e2 <uavcan_primitive_array_Natural8_1_0_serialize_+0x166>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <uavcan_primitive_array_Natural8_1_0_serialize_+0x10c>
 800577c:	4b50      	ldr	r3, [pc, #320]	; (80058c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 800577e:	4a51      	ldr	r2, [pc, #324]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005780:	2191      	movs	r1, #145	; 0x91
 8005782:	4851      	ldr	r0, [pc, #324]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005784:	f009 fd68 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	2200      	movs	r2, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	60fa      	str	r2, [r7, #12]
 8005790:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005794:	460b      	mov	r3, r1
 8005796:	f113 0408 	adds.w	r4, r3, #8
 800579a:	4613      	mov	r3, r2
 800579c:	f143 0500 	adc.w	r5, r3, #0
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	2200      	movs	r2, #0
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057ae:	460b      	mov	r3, r1
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	4613      	mov	r3, r2
 80057b4:	41ab      	sbcs	r3, r5
 80057b6:	d205      	bcs.n	80057c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x148>
 80057b8:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x254>)
 80057ba:	4a42      	ldr	r2, [pc, #264]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 80057bc:	2192      	movs	r1, #146	; 0x92
 80057be:	4842      	ldr	r0, [pc, #264]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80057c0:	f009 fd4a 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->value.elements[_index0_]);  // C std, 6.3.1.3 Signed and unsigned integers
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	08db      	lsrs	r3, r3, #3
 80057c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ca:	4413      	add	r3, r2
 80057cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d0:	440a      	add	r2, r1
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	3308      	adds	r3, #8
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	3301      	adds	r3, #1
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80057e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3c1      	bcc.n	8005772 <uavcan_primitive_array_Natural8_1_0_serialize_+0xf6>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d03a      	beq.n	800586e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1f2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80057f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f1c3 0308 	rsb	r3, r3, #8
 8005806:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        NUNAVUT_ASSERT(_pad0_ > 0);
 800580a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1a2>
 8005812:	4b30      	ldr	r3, [pc, #192]	; (80058d4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x258>)
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005816:	219b      	movs	r1, #155	; 0x9b
 8005818:	482b      	ldr	r0, [pc, #172]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800581a:	f009 fd1d 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800581e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9cd 2300 	strd	r2, r3, [sp]
 8005830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005832:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f7fb fd2d 	bl	8001294 <nunavutSetUxx>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if (_err1_ < 0)
 8005840:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8005844:	2b00      	cmp	r3, #0
 8005846:	da02      	bge.n	800584e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1d2>
        {
            return _err1_;
 8005848:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800584c:	e032      	b.n	80058b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x238>
        }
        offset_bits += _pad0_;
 800584e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005854:	4413      	add	r3, r2
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1f2>
 8005862:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 8005864:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005866:	21a2      	movs	r1, #162	; 0xa2
 8005868:	4817      	ldr	r0, [pc, #92]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800586a:	f009 fcf5 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d805      	bhi.n	8005880 <uavcan_primitive_array_Natural8_1_0_serialize_+0x204>
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x25c>)
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 8005878:	21a5      	movs	r1, #165	; 0xa5
 800587a:	4813      	ldr	r0, [pc, #76]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 800587c:	f009 fcec 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8005886:	d905      	bls.n	8005894 <uavcan_primitive_array_Natural8_1_0_serialize_+0x218>
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <uavcan_primitive_array_Natural8_1_0_serialize_+0x260>)
 800588a:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 800588c:	21a6      	movs	r1, #166	; 0xa6
 800588e:	480e      	ldr	r0, [pc, #56]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 8005890:	f009 fce2 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <uavcan_primitive_array_Natural8_1_0_serialize_+0x22e>
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x244>)
 80058a0:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x248>)
 80058a2:	21a7      	movs	r1, #167	; 0xa7
 80058a4:	4808      	ldr	r0, [pc, #32]	; (80058c8 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24c>)
 80058a6:	f009 fcd7 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	08da      	lsrs	r2, r3, #3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3740      	adds	r7, #64	; 0x40
 80058b8:	46bd      	mov	sp, r7
 80058ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058be:	bf00      	nop
 80058c0:	08011eb0 	.word	0x08011eb0
 80058c4:	080149ec 	.word	0x080149ec
 80058c8:	08012ac0 	.word	0x08012ac0
 80058cc:	08012570 	.word	0x08012570
 80058d0:	08011f78 	.word	0x08011f78
 80058d4:	08011fa8 	.word	0x08011fa8
 80058d8:	080125a4 	.word	0x080125a4
 80058dc:	080125bc 	.word	0x080125bc

080058e0 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005906:	f06f 0301 	mvn.w	r3, #1
 800590a:	e08c      	b.n	8005a26 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x146>
    }
    if (buffer == NULL)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005912:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x150>)
 8005914:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x5c>
 8005930:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 8005932:	4a41      	ldr	r2, [pc, #260]	; (8005a38 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005934:	21ce      	movs	r1, #206	; 0xce
 8005936:	4841      	ldr	r0, [pc, #260]	; (8005a3c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 8005938:	f009 fc8e 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800593c:	2310      	movs	r3, #16
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	68b8      	ldr	r0, [r7, #8]
 8005944:	f7fb fd82 	bl	800144c <nunavutGetU16>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3310      	adds	r3, #16
 8005956:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 256U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d902      	bls.n	800596a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x8a>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005964:	f06f 0309 	mvn.w	r3, #9
 8005968:	e05d      	b.n	8005a26 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x146>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xa0>
 8005974:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 8005976:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005978:	21d6      	movs	r1, #214	; 0xd6
 800597a:	4830      	ldr	r0, [pc, #192]	; (8005a3c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 800597c:	f009 fc6c 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	e025      	b.n	80059d2 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xf2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>
 8005990:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 8005992:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005994:	21d9      	movs	r1, #217	; 0xd9
 8005996:	4829      	ldr	r0, [pc, #164]	; (8005a3c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 8005998:	f009 fc5e 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3308      	adds	r3, #8
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d30a      	bcc.n	80059bc <uavcan_primitive_array_Natural8_1_0_deserialize_+0xdc>
        {
            out_obj->value.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	7819      	ldrb	r1, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	460a      	mov	r2, r1
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e004      	b.n	80059c6 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xe6>
        }
        else
        {
            out_obj->value.elements[_index1_] = 0U;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4413      	add	r3, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3308      	adds	r3, #8
 80059ca:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3d3      	bcc.n	8005986 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xa6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3307      	adds	r3, #7
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <uavcan_primitive_array_Natural8_1_0_deserialize_+0x11e>
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x154>)
 80059f4:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 80059f6:	21e5      	movs	r1, #229	; 0xe5
 80059f8:	4810      	ldr	r0, [pc, #64]	; (8005a3c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 80059fa:	f009 fc2d 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80059fe:	6939      	ldr	r1, [r7, #16]
 8005a00:	69f8      	ldr	r0, [r7, #28]
 8005a02:	f7fb fa95 	bl	8000f30 <nunavutChooseMin>
 8005a06:	4603      	mov	r3, r0
 8005a08:	08da      	lsrs	r2, r3, #3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d205      	bcs.n	8005a24 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x144>
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x160>)
 8005a1a:	4a07      	ldr	r2, [pc, #28]	; (8005a38 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x158>)
 8005a1c:	21e7      	movs	r1, #231	; 0xe7
 8005a1e:	4807      	ldr	r0, [pc, #28]	; (8005a3c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x15c>)
 8005a20:	f009 fc1a 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	08011fe0 	.word	0x08011fe0
 8005a34:	08011eb0 	.word	0x08011eb0
 8005a38:	08014608 	.word	0x08014608
 8005a3c:	08012ac0 	.word	0x08012ac0
 8005a40:	08011fe4 	.word	0x08011fe4

08005a44 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b094      	sub	sp, #80	; 0x50
 8005a4a:	af04      	add	r7, sp, #16
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a4e:	6239      	str	r1, [r7, #32]
 8005a50:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <uavcan_primitive_array_Real16_1_0_serialize_+0x20>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <uavcan_primitive_array_Real16_1_0_serialize_+0x20>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <uavcan_primitive_array_Real16_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005a64:	f06f 0301 	mvn.w	r3, #1
 8005a68:	e130      	b.n	8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	f640 0207 	movw	r2, #2055	; 0x807
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d802      	bhi.n	8005a82 <uavcan_primitive_array_Real16_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005a7c:	f06f 0302 	mvn.w	r3, #2
 8005a80:	e124      	b.n	8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <uavcan_primitive_array_Real16_1_0_serialize_+0x58>
 8005a90:	4b91      	ldr	r3, [pc, #580]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005a92:	4a92      	ldr	r2, [pc, #584]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	4892      	ldr	r0, [pc, #584]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005a98:	f009 fbde 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	617a      	str	r2, [r7, #20]
 8005aa4:	f640 0308 	movw	r3, #2056	; 0x808
 8005aa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aac:	4602      	mov	r2, r0
 8005aae:	eb12 0803 	adds.w	r8, r2, r3
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	f143 0900 	adc.w	r9, r3, #0
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	2200      	movs	r2, #0
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	60fa      	str	r2, [r7, #12]
 8005ac2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4543      	cmp	r3, r8
 8005aca:	4613      	mov	r3, r2
 8005acc:	eb73 0309 	sbcs.w	r3, r3, r9
 8005ad0:	d205      	bcs.n	8005ade <uavcan_primitive_array_Real16_1_0_serialize_+0x9a>
 8005ad2:	4b84      	ldr	r3, [pc, #528]	; (8005ce4 <uavcan_primitive_array_Real16_1_0_serialize_+0x2a0>)
 8005ad4:	4a81      	ldr	r2, [pc, #516]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005ad6:	2181      	movs	r1, #129	; 0x81
 8005ad8:	4881      	ldr	r0, [pc, #516]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005ada:	f009 fbbd 	bl	800f258 <__assert_func>
        if (obj->value.count > 128)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d902      	bls.n	8005aee <uavcan_primitive_array_Real16_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005ae8:	f06f 0309 	mvn.w	r3, #9
 8005aec:	e0ee      	b.n	8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	b2ca      	uxtb	r2, r1
 8005afe:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	3308      	adds	r3, #8
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
 8005b10:	4b71      	ldr	r3, [pc, #452]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005b12:	4a72      	ldr	r2, [pc, #456]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005b14:	2189      	movs	r1, #137	; 0x89
 8005b16:	4872      	ldr	r0, [pc, #456]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005b18:	f009 fb9e 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b20:	e06a      	b.n	8005bf8 <uavcan_primitive_array_Real16_1_0_serialize_+0x1b4>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <uavcan_primitive_array_Real16_1_0_serialize_+0xf4>
 8005b2c:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005b2e:	4a6b      	ldr	r2, [pc, #428]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005b30:	218c      	movs	r1, #140	; 0x8c
 8005b32:	486b      	ldr	r0, [pc, #428]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005b34:	f009 fb90 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	469a      	mov	sl, r3
 8005b3e:	4693      	mov	fp, r2
 8005b40:	f11a 0410 	adds.w	r4, sl, #16
 8005b44:	f14b 0500 	adc.w	r5, fp, #0
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b56:	460b      	mov	r3, r1
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	41ab      	sbcs	r3, r5
 8005b5e:	d205      	bcs.n	8005b6c <uavcan_primitive_array_Real16_1_0_serialize_+0x128>
 8005b60:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <uavcan_primitive_array_Real16_1_0_serialize_+0x2a4>)
 8005b62:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005b64:	218d      	movs	r1, #141	; 0x8d
 8005b66:	485e      	ldr	r0, [pc, #376]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005b68:	f009 fb76 	bl	800f258 <__assert_func>
            float _sat0_ = obj->value.elements[_index0_];
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
            if (isfinite(_sat0_))
 8005b78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b7c:	eef0 7ae7 	vabs.f32	s15, s15
 8005b80:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005cec <uavcan_primitive_array_Real16_1_0_serialize_+0x2a8>
 8005b84:	eef4 7a47 	vcmp.f32	s15, s14
 8005b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8c:	bf8c      	ite	hi
 8005b8e:	2301      	movhi	r3, #1
 8005b90:	2300      	movls	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f083 0301 	eor.w	r3, r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <uavcan_primitive_array_Real16_1_0_serialize_+0x186>
            {
                if (_sat0_ < ((float) -65504.0))
 8005b9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ba2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005cf0 <uavcan_primitive_array_Real16_1_0_serialize_+0x2ac>
 8005ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	d501      	bpl.n	8005bb4 <uavcan_primitive_array_Real16_1_0_serialize_+0x170>
                {
                    _sat0_ = ((float) -65504.0);
 8005bb0:	4b50      	ldr	r3, [pc, #320]	; (8005cf4 <uavcan_primitive_array_Real16_1_0_serialize_+0x2b0>)
 8005bb2:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (_sat0_ > ((float) 65504.0))
 8005bb4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005bb8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005cf8 <uavcan_primitive_array_Real16_1_0_serialize_+0x2b4>
 8005bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	dd01      	ble.n	8005bca <uavcan_primitive_array_Real16_1_0_serialize_+0x186>
                {
                    _sat0_ = ((float) 65504.0);
 8005bc6:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <uavcan_primitive_array_Real16_1_0_serialize_+0x2b8>)
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }
            const int8_t _err0_ = nunavutSetF16(&buffer[0], capacity_bytes, offset_bits, _sat0_);
 8005bca:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8005bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd2:	6a38      	ldr	r0, [r7, #32]
 8005bd4:	f7fb ffcc 	bl	8001b70 <nunavutSetF16>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if (_err0_ < 0)
 8005bde:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da02      	bge.n	8005bec <uavcan_primitive_array_Real16_1_0_serialize_+0x1a8>
            {
                return _err0_;
 8005be6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005bea:	e06f      	b.n	8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
            }
            offset_bits += 16U;
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	3310      	adds	r3, #16
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d38e      	bcc.n	8005b22 <uavcan_primitive_array_Real16_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03a      	beq.n	8005c84 <uavcan_primitive_array_Real16_1_0_serialize_+0x240>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f1c3 0308 	rsb	r3, r3, #8
 8005c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <uavcan_primitive_array_Real16_1_0_serialize_+0x1f0>
 8005c28:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <uavcan_primitive_array_Real16_1_0_serialize_+0x2bc>)
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c2c:	21a5      	movs	r1, #165	; 0xa5
 8005c2e:	482c      	ldr	r0, [pc, #176]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c30:	f009 fb12 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9cd 2300 	strd	r2, r3, [sp]
 8005c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4a:	6a38      	ldr	r0, [r7, #32]
 8005c4c:	f7fb fb22 	bl	8001294 <nunavutSetUxx>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (_err1_ < 0)
 8005c56:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da02      	bge.n	8005c64 <uavcan_primitive_array_Real16_1_0_serialize_+0x220>
        {
            return _err1_;
 8005c5e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005c62:	e033      	b.n	8005ccc <uavcan_primitive_array_Real16_1_0_serialize_+0x288>
        }
        offset_bits += _pad0_;
 8005c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <uavcan_primitive_array_Real16_1_0_serialize_+0x240>
 8005c78:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005c7a:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c7c:	21ac      	movs	r1, #172	; 0xac
 8005c7e:	4818      	ldr	r0, [pc, #96]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c80:	f009 faea 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 8005c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c86:	2b07      	cmp	r3, #7
 8005c88:	d805      	bhi.n	8005c96 <uavcan_primitive_array_Real16_1_0_serialize_+0x252>
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <uavcan_primitive_array_Real16_1_0_serialize_+0x2c0>)
 8005c8c:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005c8e:	21af      	movs	r1, #175	; 0xaf
 8005c90:	4813      	ldr	r0, [pc, #76]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005c92:	f009 fae1 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	f640 0208 	movw	r2, #2056	; 0x808
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d905      	bls.n	8005cac <uavcan_primitive_array_Real16_1_0_serialize_+0x268>
 8005ca0:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <uavcan_primitive_array_Real16_1_0_serialize_+0x2c4>)
 8005ca2:	4a0e      	ldr	r2, [pc, #56]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005ca4:	21b0      	movs	r1, #176	; 0xb0
 8005ca6:	480e      	ldr	r0, [pc, #56]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005ca8:	f009 fad6 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <uavcan_primitive_array_Real16_1_0_serialize_+0x27e>
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <uavcan_primitive_array_Real16_1_0_serialize_+0x294>)
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <uavcan_primitive_array_Real16_1_0_serialize_+0x298>)
 8005cba:	21b1      	movs	r1, #177	; 0xb1
 8005cbc:	4808      	ldr	r0, [pc, #32]	; (8005ce0 <uavcan_primitive_array_Real16_1_0_serialize_+0x29c>)
 8005cbe:	f009 facb 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	08da      	lsrs	r2, r3, #3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3740      	adds	r7, #64	; 0x40
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08011eb0 	.word	0x08011eb0
 8005cdc:	08014a7c 	.word	0x08014a7c
 8005ce0:	08012b48 	.word	0x08012b48
 8005ce4:	08012474 	.word	0x08012474
 8005ce8:	08012760 	.word	0x08012760
 8005cec:	7f7fffff 	.word	0x7f7fffff
 8005cf0:	c77fe000 	.word	0xc77fe000
 8005cf4:	c77fe000 	.word	0xc77fe000
 8005cf8:	477fe000 	.word	0x477fe000
 8005cfc:	477fe000 	.word	0x477fe000
 8005d00:	08011fa8 	.word	0x08011fa8
 8005d04:	08011fb4 	.word	0x08011fb4
 8005d08:	080124d8 	.word	0x080124d8

08005d0c <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d006      	beq.n	8005d32 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005d32:	f06f 0301 	mvn.w	r3, #1
 8005d36:	e08b      	b.n	8005e50 <uavcan_primitive_array_Real16_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005d3e:	4b46      	ldr	r3, [pc, #280]	; (8005e58 <uavcan_primitive_array_Real16_1_0_deserialize_+0x14c>)
 8005d40:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <uavcan_primitive_array_Real16_1_0_deserialize_+0x5c>
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005d5e:	4a40      	ldr	r2, [pc, #256]	; (8005e60 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005d60:	21d8      	movs	r1, #216	; 0xd8
 8005d62:	4840      	ldr	r0, [pc, #256]	; (8005e64 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005d64:	f009 fa78 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d309      	bcc.n	8005d86 <uavcan_primitive_array_Real16_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005d84:	e003      	b.n	8005d8e <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3308      	adds	r3, #8
 8005d92:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d902      	bls.n	8005da4 <uavcan_primitive_array_Real16_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005d9e:	f06f 0309 	mvn.w	r3, #9
 8005da2:	e055      	b.n	8005e50 <uavcan_primitive_array_Real16_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
 8005dae:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005db0:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005db2:	21e7      	movs	r1, #231	; 0xe7
 8005db4:	482b      	ldr	r0, [pc, #172]	; (8005e64 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005db6:	f009 fa4f 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e01d      	b.n	8005dfc <uavcan_primitive_array_Real16_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xca>
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005dcc:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005dce:	21ea      	movs	r1, #234	; 0xea
 8005dd0:	4824      	ldr	r0, [pc, #144]	; (8005e64 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005dd2:	f009 fa41 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	68b8      	ldr	r0, [r7, #8]
 8005ddc:	f7fb fee7 	bl	8001bae <nunavutGetF16>
 8005de0:	eef0 7a40 	vmov.f32	s15, s0
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	3310      	adds	r3, #16
 8005df4:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d3db      	bcc.n	8005dc0 <uavcan_primitive_array_Real16_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3307      	adds	r3, #7
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <uavcan_primitive_array_Real16_1_0_deserialize_+0x11c>
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <uavcan_primitive_array_Real16_1_0_deserialize_+0x150>)
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005e20:	21ef      	movs	r1, #239	; 0xef
 8005e22:	4810      	ldr	r0, [pc, #64]	; (8005e64 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005e24:	f009 fa18 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005e28:	6939      	ldr	r1, [r7, #16]
 8005e2a:	69f8      	ldr	r0, [r7, #28]
 8005e2c:	f7fb f880 	bl	8000f30 <nunavutChooseMin>
 8005e30:	4603      	mov	r3, r0
 8005e32:	08da      	lsrs	r2, r3, #3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d205      	bcs.n	8005e4e <uavcan_primitive_array_Real16_1_0_deserialize_+0x142>
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <uavcan_primitive_array_Real16_1_0_deserialize_+0x15c>)
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <uavcan_primitive_array_Real16_1_0_deserialize_+0x154>)
 8005e46:	21f1      	movs	r1, #241	; 0xf1
 8005e48:	4806      	ldr	r0, [pc, #24]	; (8005e64 <uavcan_primitive_array_Real16_1_0_deserialize_+0x158>)
 8005e4a:	f009 fa05 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	08011fe0 	.word	0x08011fe0
 8005e5c:	08011eb0 	.word	0x08011eb0
 8005e60:	0801469c 	.word	0x0801469c
 8005e64:	08012b48 	.word	0x08012b48
 8005e68:	08011fe4 	.word	0x08011fe4

08005e6c <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e70:	b092      	sub	sp, #72	; 0x48
 8005e72:	af04      	add	r7, sp, #16
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24
 8005e76:	6239      	str	r1, [r7, #32]
 8005e78:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <uavcan_primitive_array_Real32_1_0_serialize_+0x20>
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <uavcan_primitive_array_Real32_1_0_serialize_+0x20>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <uavcan_primitive_array_Real32_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005e8c:	f06f 0301 	mvn.w	r3, #1
 8005e90:	e107      	b.n	80060a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	f640 0207 	movw	r2, #2055	; 0x807
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d802      	bhi.n	8005eaa <uavcan_primitive_array_Real32_1_0_serialize_+0x3e>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005ea4:	f06f 0302 	mvn.w	r3, #2
 8005ea8:	e0fb      	b.n	80060a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <uavcan_primitive_array_Real32_1_0_serialize_+0x58>
 8005eb8:	4b7c      	ldr	r3, [pc, #496]	; (80060ac <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005eba:	4a7d      	ldr	r2, [pc, #500]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	487d      	ldr	r0, [pc, #500]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005ec0:	f009 f9ca 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	617a      	str	r2, [r7, #20]
 8005ecc:	f640 0308 	movw	r3, #2056	; 0x808
 8005ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	eb12 0803 	adds.w	r8, r2, r3
 8005eda:	460b      	mov	r3, r1
 8005edc:	f143 0900 	adc.w	r9, r3, #0
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	60fa      	str	r2, [r7, #12]
 8005eea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4543      	cmp	r3, r8
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	eb73 0309 	sbcs.w	r3, r3, r9
 8005ef8:	d205      	bcs.n	8005f06 <uavcan_primitive_array_Real32_1_0_serialize_+0x9a>
 8005efa:	4b6f      	ldr	r3, [pc, #444]	; (80060b8 <uavcan_primitive_array_Real32_1_0_serialize_+0x24c>)
 8005efc:	4a6c      	ldr	r2, [pc, #432]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005efe:	2181      	movs	r1, #129	; 0x81
 8005f00:	486c      	ldr	r0, [pc, #432]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f02:	f009 f9a9 	bl	800f258 <__assert_func>
        if (obj->value.count > 64)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d902      	bls.n	8005f16 <uavcan_primitive_array_Real32_1_0_serialize_+0xaa>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005f10:	f06f 0309 	mvn.w	r3, #9
 8005f14:	e0c5      	b.n	80060a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	08db      	lsrs	r3, r3, #3
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	4413      	add	r3, r2
 8005f24:	b2ca      	uxtb	r2, r1
 8005f26:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <uavcan_primitive_array_Real32_1_0_serialize_+0xd8>
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005f3a:	4a5d      	ldr	r2, [pc, #372]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f3c:	2189      	movs	r1, #137	; 0x89
 8005f3e:	485d      	ldr	r0, [pc, #372]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f40:	f009 f98a 	bl	800f258 <__assert_func>
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005f44:	2300      	movs	r3, #0
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
 8005f48:	e041      	b.n	8005fce <uavcan_primitive_array_Real32_1_0_serialize_+0x162>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <uavcan_primitive_array_Real32_1_0_serialize_+0xf4>
 8005f54:	4b55      	ldr	r3, [pc, #340]	; (80060ac <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8005f56:	4a56      	ldr	r2, [pc, #344]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f58:	218c      	movs	r1, #140	; 0x8c
 8005f5a:	4856      	ldr	r0, [pc, #344]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f5c:	f009 f97c 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	2200      	movs	r2, #0
 8005f64:	469a      	mov	sl, r3
 8005f66:	4693      	mov	fp, r2
 8005f68:	f11a 0420 	adds.w	r4, sl, #32
 8005f6c:	f14b 0500 	adc.w	r5, fp, #0
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	2200      	movs	r2, #0
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	4613      	mov	r3, r2
 8005f84:	41ab      	sbcs	r3, r5
 8005f86:	d205      	bcs.n	8005f94 <uavcan_primitive_array_Real32_1_0_serialize_+0x128>
 8005f88:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <uavcan_primitive_array_Real32_1_0_serialize_+0x250>)
 8005f8a:	4a49      	ldr	r2, [pc, #292]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8005f8c:	218d      	movs	r1, #141	; 0x8d
 8005f8e:	4849      	ldr	r0, [pc, #292]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8005f90:	f009 f962 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- assume the native representation of float32 is conformant.
            static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
            const int8_t _err0_ = nunavutSetF32(&buffer[0], capacity_bytes, offset_bits, obj->value.elements[_index0_]);
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	edd3 7a00 	vldr	s15, [r3]
 8005fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6a38      	ldr	r0, [r7, #32]
 8005faa:	f7fb fe17 	bl	8001bdc <nunavutSetF32>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            if (_err0_ < 0)
 8005fb4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da02      	bge.n	8005fc2 <uavcan_primitive_array_Real32_1_0_serialize_+0x156>
            {
                return _err0_;
 8005fbc:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8005fc0:	e06f      	b.n	80060a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
            }
            offset_bits += 32U;
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	3320      	adds	r3, #32
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	3301      	adds	r3, #1
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d3b7      	bcc.n	8005f4a <uavcan_primitive_array_Real32_1_0_serialize_+0xde>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d03a      	beq.n	800605a <uavcan_primitive_array_Real32_1_0_serialize_+0x1ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f1c3 0308 	rsb	r3, r3, #8
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        NUNAVUT_ASSERT(_pad0_ > 0);
 8005ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <uavcan_primitive_array_Real32_1_0_serialize_+0x19e>
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <uavcan_primitive_array_Real32_1_0_serialize_+0x254>)
 8006000:	4a2b      	ldr	r2, [pc, #172]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006002:	219b      	movs	r1, #155	; 0x9b
 8006004:	482b      	ldr	r0, [pc, #172]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006006:	f009 f927 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800600a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800600e:	9302      	str	r3, [sp, #8]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9cd 2300 	strd	r2, r3, [sp]
 800601c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800601e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006020:	6a38      	ldr	r0, [r7, #32]
 8006022:	f7fb f937 	bl	8001294 <nunavutSetUxx>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (_err1_ < 0)
 800602c:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8006030:	2b00      	cmp	r3, #0
 8006032:	da02      	bge.n	800603a <uavcan_primitive_array_Real32_1_0_serialize_+0x1ce>
        {
            return _err1_;
 8006034:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8006038:	e033      	b.n	80060a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x236>
        }
        offset_bits += _pad0_;
 800603a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800603e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006040:	4413      	add	r3, r2
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <uavcan_primitive_array_Real32_1_0_serialize_+0x1ee>
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 8006050:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006052:	21a2      	movs	r1, #162	; 0xa2
 8006054:	4817      	ldr	r0, [pc, #92]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006056:	f009 f8ff 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	2b07      	cmp	r3, #7
 800605e:	d805      	bhi.n	800606c <uavcan_primitive_array_Real32_1_0_serialize_+0x200>
 8006060:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <uavcan_primitive_array_Real32_1_0_serialize_+0x258>)
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006064:	21a5      	movs	r1, #165	; 0xa5
 8006066:	4813      	ldr	r0, [pc, #76]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006068:	f009 f8f6 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	f640 0208 	movw	r2, #2056	; 0x808
 8006072:	4293      	cmp	r3, r2
 8006074:	d905      	bls.n	8006082 <uavcan_primitive_array_Real32_1_0_serialize_+0x216>
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <uavcan_primitive_array_Real32_1_0_serialize_+0x25c>)
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 800607a:	21a6      	movs	r1, #166	; 0xa6
 800607c:	480d      	ldr	r0, [pc, #52]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 800607e:	f009 f8eb 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <uavcan_primitive_array_Real32_1_0_serialize_+0x22c>
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <uavcan_primitive_array_Real32_1_0_serialize_+0x240>)
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <uavcan_primitive_array_Real32_1_0_serialize_+0x244>)
 8006090:	21a7      	movs	r1, #167	; 0xa7
 8006092:	4808      	ldr	r0, [pc, #32]	; (80060b4 <uavcan_primitive_array_Real32_1_0_serialize_+0x248>)
 8006094:	f009 f8e0 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	08da      	lsrs	r2, r3, #3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3738      	adds	r7, #56	; 0x38
 80060a6:	46bd      	mov	sp, r7
 80060a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ac:	08011eb0 	.word	0x08011eb0
 80060b0:	08014a4c 	.word	0x08014a4c
 80060b4:	08012bcc 	.word	0x08012bcc
 80060b8:	08012474 	.word	0x08012474
 80060bc:	08012324 	.word	0x08012324
 80060c0:	08011fa8 	.word	0x08011fa8
 80060c4:	08011fb4 	.word	0x08011fb4
 80060c8:	080124d8 	.word	0x080124d8

080060cc <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80060f2:	f06f 0301 	mvn.w	r3, #1
 80060f6:	e08b      	b.n	8006210 <uavcan_primitive_array_Real32_1_0_deserialize_+0x144>
    }
    if (buffer == NULL)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80060fe:	4b46      	ldr	r3, [pc, #280]	; (8006218 <uavcan_primitive_array_Real32_1_0_deserialize_+0x14c>)
 8006100:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <uavcan_primitive_array_Real32_1_0_deserialize_+0x5c>
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 800611e:	4a40      	ldr	r2, [pc, #256]	; (8006220 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 8006120:	21ce      	movs	r1, #206	; 0xce
 8006122:	4840      	ldr	r0, [pc, #256]	; (8006224 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 8006124:	f009 f898 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3308      	adds	r3, #8
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d309      	bcc.n	8006146 <uavcan_primitive_array_Real32_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4413      	add	r3, r2
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006144:	e003      	b.n	800614e <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3308      	adds	r3, #8
 8006152:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 64U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d902      	bls.n	8006164 <uavcan_primitive_array_Real32_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800615e:	f06f 0309 	mvn.w	r3, #9
 8006162:	e055      	b.n	8006210 <uavcan_primitive_array_Real32_1_0_deserialize_+0x144>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <uavcan_primitive_array_Real32_1_0_deserialize_+0xae>
 800616e:	4b2b      	ldr	r3, [pc, #172]	; (800621c <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 8006170:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 8006172:	21dd      	movs	r1, #221	; 0xdd
 8006174:	482b      	ldr	r0, [pc, #172]	; (8006224 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 8006176:	f009 f86f 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e01d      	b.n	80061bc <uavcan_primitive_array_Real32_1_0_deserialize_+0xf0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <uavcan_primitive_array_Real32_1_0_deserialize_+0xca>
 800618a:	4b24      	ldr	r3, [pc, #144]	; (800621c <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 800618e:	21e0      	movs	r1, #224	; 0xe0
 8006190:	4824      	ldr	r0, [pc, #144]	; (8006224 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 8006192:	f009 f861 	bl	800f258 <__assert_func>
        out_obj->value.elements[_index1_] = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f7fb fd3a 	bl	8001c14 <nunavutGetF32>
 80061a0:	eef0 7a40 	vmov.f32	s15, s0
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 32U;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3320      	adds	r3, #32
 80061b4:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d3db      	bcc.n	8006180 <uavcan_primitive_array_Real32_1_0_deserialize_+0xb4>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3307      	adds	r3, #7
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <uavcan_primitive_array_Real32_1_0_deserialize_+0x11c>
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <uavcan_primitive_array_Real32_1_0_deserialize_+0x150>)
 80061de:	4a10      	ldr	r2, [pc, #64]	; (8006220 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 80061e0:	21e5      	movs	r1, #229	; 0xe5
 80061e2:	4810      	ldr	r0, [pc, #64]	; (8006224 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 80061e4:	f009 f838 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80061e8:	6939      	ldr	r1, [r7, #16]
 80061ea:	69f8      	ldr	r0, [r7, #28]
 80061ec:	f7fa fea0 	bl	8000f30 <nunavutChooseMin>
 80061f0:	4603      	mov	r3, r0
 80061f2:	08da      	lsrs	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d205      	bcs.n	800620e <uavcan_primitive_array_Real32_1_0_deserialize_+0x142>
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <uavcan_primitive_array_Real32_1_0_deserialize_+0x15c>)
 8006204:	4a06      	ldr	r2, [pc, #24]	; (8006220 <uavcan_primitive_array_Real32_1_0_deserialize_+0x154>)
 8006206:	21e7      	movs	r1, #231	; 0xe7
 8006208:	4806      	ldr	r0, [pc, #24]	; (8006224 <uavcan_primitive_array_Real32_1_0_deserialize_+0x158>)
 800620a:	f009 f825 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	08011fe0 	.word	0x08011fe0
 800621c:	08011eb0 	.word	0x08011eb0
 8006220:	0801466c 	.word	0x0801466c
 8006224:	08012bcc 	.word	0x08012bcc
 8006228:	08011fe4 	.word	0x08011fe4

0800622c <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0ec      	sub	sp, #432	; 0x1b0
 8006232:	af04      	add	r7, sp, #16
 8006234:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
 8006238:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800623c:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8006240:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <uavcan_register_Value_1_0_serialize_+0x2c>
 8006248:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <uavcan_register_Value_1_0_serialize_+0x2c>
 8006250:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <uavcan_register_Value_1_0_serialize_+0x34>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8006258:	f06f 0301 	mvn.w	r3, #1
 800625c:	f001 bb89 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8006260:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 800626a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800626e:	00da      	lsls	r2, r3, #3
 8006270:	f640 0317 	movw	r3, #2071	; 0x817
 8006274:	429a      	cmp	r2, r3
 8006276:	d803      	bhi.n	8006280 <uavcan_register_Value_1_0_serialize_+0x54>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8006278:	f06f 0302 	mvn.w	r3, #2
 800627c:	f001 bb79 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8006286:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800628a:	08da      	lsrs	r2, r3, #3
 800628c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006290:	441a      	add	r2, r3
 8006292:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006296:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800629a:	7013      	strb	r3, [r2, #0]
        offset_bits += 8U;
 800629c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062a0:	3308      	adds	r3, #8
 80062a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    }
    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80062a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80062aa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d17c      	bne.n	80063ac <uavcan_register_Value_1_0_serialize_+0x180>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80062b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <uavcan_register_Value_1_0_serialize_+0x9e>
 80062be:	4bc1      	ldr	r3, [pc, #772]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 80062c0:	4ac1      	ldr	r2, [pc, #772]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062c2:	21be      	movs	r1, #190	; 0xbe
 80062c4:	48c1      	ldr	r0, [pc, #772]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062c6:	f008 ffc7 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80062ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <uavcan_register_Value_1_0_serialize_+0xb6>
 80062d6:	4bbb      	ldr	r3, [pc, #748]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 80062d8:	4abb      	ldr	r2, [pc, #748]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062da:	21bf      	movs	r1, #191	; 0xbf
 80062dc:	48bb      	ldr	r0, [pc, #748]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062de:	f008 ffbb 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
 80062e2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d905      	bls.n	80062fc <uavcan_register_Value_1_0_serialize_+0xd0>
 80062f0:	4bb7      	ldr	r3, [pc, #732]	; (80065d0 <uavcan_register_Value_1_0_serialize_+0x3a4>)
 80062f2:	4ab5      	ldr	r2, [pc, #724]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80062f4:	21c0      	movs	r1, #192	; 0xc0
 80062f6:	48b5      	ldr	r0, [pc, #724]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80062f8:	f008 ffae 	bl	800f258 <__assert_func>
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006302:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <uavcan_register_Value_1_0_serialize_+0xee>
 800630e:	4bad      	ldr	r3, [pc, #692]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006310:	4aad      	ldr	r2, [pc, #692]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006312:	21c2      	movs	r1, #194	; 0xc2
 8006314:	48ad      	ldr	r0, [pc, #692]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006316:	f008 ff9f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 800631a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800631e:	08da      	lsrs	r2, r3, #3
 8006320:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006324:	4413      	add	r3, r2
 8006326:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800632a:	429a      	cmp	r2, r3
 800632c:	d205      	bcs.n	800633a <uavcan_register_Value_1_0_serialize_+0x10e>
 800632e:	4ba9      	ldr	r3, [pc, #676]	; (80065d4 <uavcan_register_Value_1_0_serialize_+0x3a8>)
 8006330:	4aa5      	ldr	r2, [pc, #660]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006332:	21c3      	movs	r1, #195	; 0xc3
 8006334:	48a5      	ldr	r0, [pc, #660]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006336:	f008 ff8f 	bl	800f258 <__assert_func>
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800633a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 800633e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006342:	08db      	lsrs	r3, r3, #3
 8006344:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006348:	4413      	add	r3, r2
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800634a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800634e:	4619      	mov	r1, r3
 8006350:	f7fc fec8 	bl	80030e4 <uavcan_primitive_Empty_1_0_serialize_>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
        if (_err0_ < 0)
 800635a:	f997 3189 	ldrsb.w	r3, [r7, #393]	; 0x189
 800635e:	2b00      	cmp	r3, #0
 8006360:	da03      	bge.n	800636a <uavcan_register_Value_1_0_serialize_+0x13e>
        {
            return _err0_;
 8006362:	f997 3189 	ldrsb.w	r3, [r7, #393]	; 0x189
 8006366:	f001 bb04 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
 800636a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <uavcan_register_Value_1_0_serialize_+0x154>
 8006374:	4b98      	ldr	r3, [pc, #608]	; (80065d8 <uavcan_register_Value_1_0_serialize_+0x3ac>)
 8006376:	4a94      	ldr	r2, [pc, #592]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006378:	21cb      	movs	r1, #203	; 0xcb
 800637a:	4894      	ldr	r0, [pc, #592]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800637c:	f008 ff6c 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8006380:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800638a:	4413      	add	r3, r2
 800638c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006390:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800639a:	429a      	cmp	r2, r3
 800639c:	f241 8273 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 80063a0:	4b8e      	ldr	r3, [pc, #568]	; (80065dc <uavcan_register_Value_1_0_serialize_+0x3b0>)
 80063a2:	4a89      	ldr	r2, [pc, #548]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80063a4:	21cd      	movs	r1, #205	; 0xcd
 80063a6:	4889      	ldr	r0, [pc, #548]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80063a8:	f008 ff56 	bl	800f258 <__assert_func>
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 80063ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80063b0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 80a1 	bne.w	80064fc <uavcan_register_Value_1_0_serialize_+0x2d0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80063ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <uavcan_register_Value_1_0_serialize_+0x1a6>
 80063c6:	4b7f      	ldr	r3, [pc, #508]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 80063c8:	4a7f      	ldr	r2, [pc, #508]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80063ca:	21d1      	movs	r1, #209	; 0xd1
 80063cc:	487f      	ldr	r0, [pc, #508]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80063ce:	f008 ff43 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80063d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <uavcan_register_Value_1_0_serialize_+0x1be>
 80063de:	4b79      	ldr	r3, [pc, #484]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 80063e0:	4a79      	ldr	r2, [pc, #484]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80063e2:	21d2      	movs	r1, #210	; 0xd2
 80063e4:	4879      	ldr	r0, [pc, #484]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80063e6:	f008 ff37 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80063ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80063f4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80063f8:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80063fc:	460b      	mov	r3, r1
 80063fe:	f513 6401 	adds.w	r4, r3, #2064	; 0x810
 8006402:	4613      	mov	r3, r2
 8006404:	f143 0500 	adc.w	r5, r3, #0
 8006408:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006414:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006418:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800641c:	460b      	mov	r3, r1
 800641e:	42a3      	cmp	r3, r4
 8006420:	4613      	mov	r3, r2
 8006422:	41ab      	sbcs	r3, r5
 8006424:	d205      	bcs.n	8006432 <uavcan_register_Value_1_0_serialize_+0x206>
 8006426:	4b6e      	ldr	r3, [pc, #440]	; (80065e0 <uavcan_register_Value_1_0_serialize_+0x3b4>)
 8006428:	4a67      	ldr	r2, [pc, #412]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800642a:	21d3      	movs	r1, #211	; 0xd3
 800642c:	4867      	ldr	r0, [pc, #412]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800642e:	f008 ff13 	bl	800f258 <__assert_func>
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8006432:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006436:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800643a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <uavcan_register_Value_1_0_serialize_+0x226>
 8006446:	4b5f      	ldr	r3, [pc, #380]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006448:	4a5f      	ldr	r2, [pc, #380]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800644a:	21d5      	movs	r1, #213	; 0xd5
 800644c:	485f      	ldr	r0, [pc, #380]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800644e:	f008 ff03 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8006452:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006456:	08da      	lsrs	r2, r3, #3
 8006458:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800645c:	4413      	add	r3, r2
 800645e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006462:	429a      	cmp	r2, r3
 8006464:	d205      	bcs.n	8006472 <uavcan_register_Value_1_0_serialize_+0x246>
 8006466:	4b5f      	ldr	r3, [pc, #380]	; (80065e4 <uavcan_register_Value_1_0_serialize_+0x3b8>)
 8006468:	4a57      	ldr	r2, [pc, #348]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800646a:	21d6      	movs	r1, #214	; 0xd6
 800646c:	4857      	ldr	r0, [pc, #348]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800646e:	f008 fef3 	bl	800f258 <__assert_func>
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8006472:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 8006476:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006480:	4413      	add	r3, r2
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8006482:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8006486:	4619      	mov	r1, r3
 8006488:	f7fc fe70 	bl	800316c <uavcan_primitive_String_1_0_serialize_>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
        if (_err1_ < 0)
 8006492:	f997 318a 	ldrsb.w	r3, [r7, #394]	; 0x18a
 8006496:	2b00      	cmp	r3, #0
 8006498:	da03      	bge.n	80064a2 <uavcan_register_Value_1_0_serialize_+0x276>
        {
            return _err1_;
 800649a:	f997 318a 	ldrsb.w	r3, [r7, #394]	; 0x18a
 800649e:	f001 ba68 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
 80064a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	2b0f      	cmp	r3, #15
 80064aa:	d805      	bhi.n	80064b8 <uavcan_register_Value_1_0_serialize_+0x28c>
 80064ac:	4b4e      	ldr	r3, [pc, #312]	; (80065e8 <uavcan_register_Value_1_0_serialize_+0x3bc>)
 80064ae:	4a46      	ldr	r2, [pc, #280]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80064b0:	21de      	movs	r1, #222	; 0xde
 80064b2:	4846      	ldr	r0, [pc, #280]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064b4:	f008 fed0 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
 80064b8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80064c2:	d905      	bls.n	80064d0 <uavcan_register_Value_1_0_serialize_+0x2a4>
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <uavcan_register_Value_1_0_serialize_+0x3c0>)
 80064c6:	4a40      	ldr	r2, [pc, #256]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80064c8:	21df      	movs	r1, #223	; 0xdf
 80064ca:	4840      	ldr	r0, [pc, #256]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064cc:	f008 fec4 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80064d0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80064da:	4413      	add	r3, r2
 80064dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80064e0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f241 81cb 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 80064f0:	4b3a      	ldr	r3, [pc, #232]	; (80065dc <uavcan_register_Value_1_0_serialize_+0x3b0>)
 80064f2:	4a35      	ldr	r2, [pc, #212]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80064f4:	21e1      	movs	r1, #225	; 0xe1
 80064f6:	4835      	ldr	r0, [pc, #212]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80064f8:	f008 feae 	bl	800f258 <__assert_func>
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 80064fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006500:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006504:	2b02      	cmp	r3, #2
 8006506:	f040 80ba 	bne.w	800667e <uavcan_register_Value_1_0_serialize_+0x452>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800650a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <uavcan_register_Value_1_0_serialize_+0x2f6>
 8006516:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006518:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800651a:	21e5      	movs	r1, #229	; 0xe5
 800651c:	482b      	ldr	r0, [pc, #172]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 800651e:	f008 fe9b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006522:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <uavcan_register_Value_1_0_serialize_+0x30e>
 800652e:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 8006530:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 8006532:	21e6      	movs	r1, #230	; 0xe6
 8006534:	4825      	ldr	r0, [pc, #148]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006536:	f008 fe8f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 800653a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800653e:	2200      	movs	r2, #0
 8006540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006544:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006548:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800654c:	460b      	mov	r3, r1
 800654e:	f513 6801 	adds.w	r8, r3, #2064	; 0x810
 8006552:	4613      	mov	r3, r2
 8006554:	f143 0900 	adc.w	r9, r3, #0
 8006558:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006564:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006568:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800656c:	460b      	mov	r3, r1
 800656e:	4543      	cmp	r3, r8
 8006570:	4613      	mov	r3, r2
 8006572:	eb73 0309 	sbcs.w	r3, r3, r9
 8006576:	d205      	bcs.n	8006584 <uavcan_register_Value_1_0_serialize_+0x358>
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <uavcan_register_Value_1_0_serialize_+0x3b4>)
 800657a:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800657c:	21e7      	movs	r1, #231	; 0xe7
 800657e:	4813      	ldr	r0, [pc, #76]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 8006580:	f008 fe6a 	bl	800f258 <__assert_func>
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8006584:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006588:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800658c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <uavcan_register_Value_1_0_serialize_+0x378>
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <uavcan_register_Value_1_0_serialize_+0x398>)
 800659a:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 800659c:	21e9      	movs	r1, #233	; 0xe9
 800659e:	480b      	ldr	r0, [pc, #44]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80065a0:	f008 fe5a 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
 80065a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80065a8:	08da      	lsrs	r2, r3, #3
 80065aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80065ae:	4413      	add	r3, r2
 80065b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d21d      	bcs.n	80065f4 <uavcan_register_Value_1_0_serialize_+0x3c8>
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <uavcan_register_Value_1_0_serialize_+0x3c4>)
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <uavcan_register_Value_1_0_serialize_+0x39c>)
 80065bc:	21ea      	movs	r1, #234	; 0xea
 80065be:	4803      	ldr	r0, [pc, #12]	; (80065cc <uavcan_register_Value_1_0_serialize_+0x3a0>)
 80065c0:	f008 fe4a 	bl	800f258 <__assert_func>
 80065c4:	08011eb0 	.word	0x08011eb0
 80065c8:	080147f0 	.word	0x080147f0
 80065cc:	08012c50 	.word	0x08012c50
 80065d0:	08012ccc 	.word	0x08012ccc
 80065d4:	0801208c 	.word	0x0801208c
 80065d8:	08012cfc 	.word	0x08012cfc
 80065dc:	08012104 	.word	0x08012104
 80065e0:	08012570 	.word	0x08012570
 80065e4:	08012374 	.word	0x08012374
 80065e8:	08012d1c 	.word	0x08012d1c
 80065ec:	08012d3c 	.word	0x08012d3c
 80065f0:	08012d5c 	.word	0x08012d5c
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80065f4:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 80065f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006602:	4413      	add	r3, r2
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8006604:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8006608:	4619      	mov	r1, r3
 800660a:	f7fc ff93 	bl	8003534 <uavcan_primitive_Unstructured_1_0_serialize_>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
        if (_err2_ < 0)
 8006614:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 8006618:	2b00      	cmp	r3, #0
 800661a:	da03      	bge.n	8006624 <uavcan_register_Value_1_0_serialize_+0x3f8>
        {
            return _err2_;
 800661c:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 8006620:	f001 b9a7 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
 8006624:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d805      	bhi.n	800663a <uavcan_register_Value_1_0_serialize_+0x40e>
 800662e:	4bc7      	ldr	r3, [pc, #796]	; (800694c <uavcan_register_Value_1_0_serialize_+0x720>)
 8006630:	4ac7      	ldr	r2, [pc, #796]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006632:	21f2      	movs	r1, #242	; 0xf2
 8006634:	48c7      	ldr	r0, [pc, #796]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006636:	f008 fe0f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
 800663a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006644:	d905      	bls.n	8006652 <uavcan_register_Value_1_0_serialize_+0x426>
 8006646:	4bc4      	ldr	r3, [pc, #784]	; (8006958 <uavcan_register_Value_1_0_serialize_+0x72c>)
 8006648:	4ac1      	ldr	r2, [pc, #772]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800664a:	21f3      	movs	r1, #243	; 0xf3
 800664c:	48c1      	ldr	r0, [pc, #772]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 800664e:	f008 fe03 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8006652:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800665c:	4413      	add	r3, r2
 800665e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006662:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800666c:	429a      	cmp	r2, r3
 800666e:	f241 810a 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8006672:	4bba      	ldr	r3, [pc, #744]	; (800695c <uavcan_register_Value_1_0_serialize_+0x730>)
 8006674:	4ab6      	ldr	r2, [pc, #728]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006676:	21f5      	movs	r1, #245	; 0xf5
 8006678:	48b6      	ldr	r0, [pc, #728]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 800667a:	f008 fded 	bl	800f258 <__assert_func>
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 800667e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006682:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006686:	2b03      	cmp	r3, #3
 8006688:	f040 80a5 	bne.w	80067d6 <uavcan_register_Value_1_0_serialize_+0x5aa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800668c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <uavcan_register_Value_1_0_serialize_+0x478>
 8006698:	4bb1      	ldr	r3, [pc, #708]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 800669a:	4aad      	ldr	r2, [pc, #692]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800669c:	21f9      	movs	r1, #249	; 0xf9
 800669e:	48ad      	ldr	r0, [pc, #692]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80066a0:	f008 fdda 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80066a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <uavcan_register_Value_1_0_serialize_+0x490>
 80066b0:	4bab      	ldr	r3, [pc, #684]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 80066b2:	4aa7      	ldr	r2, [pc, #668]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80066b4:	21fa      	movs	r1, #250	; 0xfa
 80066b6:	48a7      	ldr	r0, [pc, #668]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80066b8:	f008 fdce 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80066bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80066ca:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80066ce:	460b      	mov	r3, r1
 80066d0:	f513 6a01 	adds.w	sl, r3, #2064	; 0x810
 80066d4:	4613      	mov	r3, r2
 80066d6:	f143 0b00 	adc.w	fp, r3, #0
 80066da:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066e6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80066ea:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80066ee:	460b      	mov	r3, r1
 80066f0:	4553      	cmp	r3, sl
 80066f2:	4613      	mov	r3, r2
 80066f4:	eb73 030b 	sbcs.w	r3, r3, fp
 80066f8:	d205      	bcs.n	8006706 <uavcan_register_Value_1_0_serialize_+0x4da>
 80066fa:	4b9a      	ldr	r3, [pc, #616]	; (8006964 <uavcan_register_Value_1_0_serialize_+0x738>)
 80066fc:	4a94      	ldr	r2, [pc, #592]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80066fe:	21fb      	movs	r1, #251	; 0xfb
 8006700:	4894      	ldr	r0, [pc, #592]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006702:	f008 fda9 	bl	800f258 <__assert_func>
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 8006706:	f44f 7381 	mov.w	r3, #258	; 0x102
 800670a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800670e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <uavcan_register_Value_1_0_serialize_+0x4fa>
 800671a:	4b91      	ldr	r3, [pc, #580]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 800671c:	4a8c      	ldr	r2, [pc, #560]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800671e:	21fd      	movs	r1, #253	; 0xfd
 8006720:	488c      	ldr	r0, [pc, #560]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006722:	f008 fd99 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
 8006726:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800672a:	08da      	lsrs	r2, r3, #3
 800672c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006730:	4413      	add	r3, r2
 8006732:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006736:	429a      	cmp	r2, r3
 8006738:	d205      	bcs.n	8006746 <uavcan_register_Value_1_0_serialize_+0x51a>
 800673a:	4b8b      	ldr	r3, [pc, #556]	; (8006968 <uavcan_register_Value_1_0_serialize_+0x73c>)
 800673c:	4a84      	ldr	r2, [pc, #528]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800673e:	21fe      	movs	r1, #254	; 0xfe
 8006740:	4884      	ldr	r0, [pc, #528]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006742:	f008 fd89 	bl	800f258 <__assert_func>
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8006746:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 800674a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800674e:	08db      	lsrs	r3, r3, #3
 8006750:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006754:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8006756:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800675a:	4619      	mov	r1, r3
 800675c:	f7fd f8ce 	bl	80038fc <uavcan_primitive_array_Bit_1_0_serialize_>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
        if (_err3_ < 0)
 8006766:	f997 318c 	ldrsb.w	r3, [r7, #396]	; 0x18c
 800676a:	2b00      	cmp	r3, #0
 800676c:	da03      	bge.n	8006776 <uavcan_register_Value_1_0_serialize_+0x54a>
        {
            return _err3_;
 800676e:	f997 318c 	ldrsb.w	r3, [r7, #396]	; 0x18c
 8006772:	f001 b8fe 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
 8006776:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	2b0f      	cmp	r3, #15
 800677e:	d806      	bhi.n	800678e <uavcan_register_Value_1_0_serialize_+0x562>
 8006780:	4b7a      	ldr	r3, [pc, #488]	; (800696c <uavcan_register_Value_1_0_serialize_+0x740>)
 8006782:	4a73      	ldr	r2, [pc, #460]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006784:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006788:	4872      	ldr	r0, [pc, #456]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 800678a:	f008 fd65 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
 800678e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006798:	d906      	bls.n	80067a8 <uavcan_register_Value_1_0_serialize_+0x57c>
 800679a:	4b75      	ldr	r3, [pc, #468]	; (8006970 <uavcan_register_Value_1_0_serialize_+0x744>)
 800679c:	4a6c      	ldr	r2, [pc, #432]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800679e:	f240 1107 	movw	r1, #263	; 0x107
 80067a2:	486c      	ldr	r0, [pc, #432]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067a4:	f008 fd58 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 80067a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80067b2:	4413      	add	r3, r2
 80067b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80067b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f241 805f 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 80067c8:	4b64      	ldr	r3, [pc, #400]	; (800695c <uavcan_register_Value_1_0_serialize_+0x730>)
 80067ca:	4a61      	ldr	r2, [pc, #388]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80067cc:	f240 1109 	movw	r1, #265	; 0x109
 80067d0:	4860      	ldr	r0, [pc, #384]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067d2:	f008 fd41 	bl	800f258 <__assert_func>
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80067d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80067da:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80067de:	2b04      	cmp	r3, #4
 80067e0:	f040 80d0 	bne.w	8006984 <uavcan_register_Value_1_0_serialize_+0x758>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80067e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <uavcan_register_Value_1_0_serialize_+0x5d2>
 80067f0:	4b5b      	ldr	r3, [pc, #364]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 80067f2:	4a57      	ldr	r2, [pc, #348]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80067f4:	f240 110d 	movw	r1, #269	; 0x10d
 80067f8:	4856      	ldr	r0, [pc, #344]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80067fa:	f008 fd2d 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80067fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <uavcan_register_Value_1_0_serialize_+0x5ec>
 800680a:	4b55      	ldr	r3, [pc, #340]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 800680c:	4a50      	ldr	r2, [pc, #320]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800680e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006812:	4850      	ldr	r0, [pc, #320]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006814:	f008 fd20 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006818:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006822:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006826:	f640 0308 	movw	r3, #2056	; 0x808
 800682a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800682e:	4602      	mov	r2, r0
 8006830:	18d3      	adds	r3, r2, r3
 8006832:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006836:	460b      	mov	r3, r1
 8006838:	f143 0300 	adc.w	r3, r3, #0
 800683c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006840:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800684c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006850:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8006854:	4623      	mov	r3, r4
 8006856:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800685a:	4602      	mov	r2, r0
 800685c:	4293      	cmp	r3, r2
 800685e:	462b      	mov	r3, r5
 8006860:	460a      	mov	r2, r1
 8006862:	4193      	sbcs	r3, r2
 8006864:	d206      	bcs.n	8006874 <uavcan_register_Value_1_0_serialize_+0x648>
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <uavcan_register_Value_1_0_serialize_+0x748>)
 8006868:	4a39      	ldr	r2, [pc, #228]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800686a:	f240 110f 	movw	r1, #271	; 0x10f
 800686e:	4839      	ldr	r0, [pc, #228]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006870:	f008 fcf2 	bl	800f258 <__assert_func>
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8006874:	f240 1301 	movw	r3, #257	; 0x101
 8006878:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800687c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <uavcan_register_Value_1_0_serialize_+0x66a>
 8006888:	4b35      	ldr	r3, [pc, #212]	; (8006960 <uavcan_register_Value_1_0_serialize_+0x734>)
 800688a:	4a31      	ldr	r2, [pc, #196]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 800688c:	f240 1111 	movw	r1, #273	; 0x111
 8006890:	4830      	ldr	r0, [pc, #192]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006892:	f008 fce1 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
 8006896:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800689a:	08da      	lsrs	r2, r3, #3
 800689c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80068a0:	4413      	add	r3, r2
 80068a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d206      	bcs.n	80068b8 <uavcan_register_Value_1_0_serialize_+0x68c>
 80068aa:	4b33      	ldr	r3, [pc, #204]	; (8006978 <uavcan_register_Value_1_0_serialize_+0x74c>)
 80068ac:	4a28      	ldr	r2, [pc, #160]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80068ae:	f44f 7189 	mov.w	r1, #274	; 0x112
 80068b2:	4828      	ldr	r0, [pc, #160]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80068b4:	f008 fcd0 	bl	800f258 <__assert_func>
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80068b8:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 80068bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80068c6:	4413      	add	r3, r2
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80068c8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7fd fd65 	bl	800439c <uavcan_primitive_array_Integer64_1_0_serialize_>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
        if (_err4_ < 0)
 80068d8:	f997 318d 	ldrsb.w	r3, [r7, #397]	; 0x18d
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da03      	bge.n	80068e8 <uavcan_register_Value_1_0_serialize_+0x6bc>
        {
            return _err4_;
 80068e0:	f997 318d 	ldrsb.w	r3, [r7, #397]	; 0x18d
 80068e4:	f001 b845 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
 80068e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	2b07      	cmp	r3, #7
 80068f0:	d806      	bhi.n	8006900 <uavcan_register_Value_1_0_serialize_+0x6d4>
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <uavcan_register_Value_1_0_serialize_+0x750>)
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 80068f6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80068fa:	4816      	ldr	r0, [pc, #88]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 80068fc:	f008 fcac 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
 8006900:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	f640 0208 	movw	r2, #2056	; 0x808
 800690a:	4293      	cmp	r3, r2
 800690c:	d906      	bls.n	800691c <uavcan_register_Value_1_0_serialize_+0x6f0>
 800690e:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <uavcan_register_Value_1_0_serialize_+0x754>)
 8006910:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006912:	f240 111b 	movw	r1, #283	; 0x11b
 8006916:	480f      	ldr	r0, [pc, #60]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006918:	f008 fc9e 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800691c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800692c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006936:	429a      	cmp	r2, r3
 8006938:	f240 87a5 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <uavcan_register_Value_1_0_serialize_+0x730>)
 800693e:	4a04      	ldr	r2, [pc, #16]	; (8006950 <uavcan_register_Value_1_0_serialize_+0x724>)
 8006940:	f240 111d 	movw	r1, #285	; 0x11d
 8006944:	4803      	ldr	r0, [pc, #12]	; (8006954 <uavcan_register_Value_1_0_serialize_+0x728>)
 8006946:	f008 fc87 	bl	800f258 <__assert_func>
 800694a:	bf00      	nop
 800694c:	08012d94 	.word	0x08012d94
 8006950:	080147f0 	.word	0x080147f0
 8006954:	08012c50 	.word	0x08012c50
 8006958:	08012db4 	.word	0x08012db4
 800695c:	08012104 	.word	0x08012104
 8006960:	08011eb0 	.word	0x08011eb0
 8006964:	08012570 	.word	0x08012570
 8006968:	08012dd4 	.word	0x08012dd4
 800696c:	08012e0c 	.word	0x08012e0c
 8006970:	08012e2c 	.word	0x08012e2c
 8006974:	08012474 	.word	0x08012474
 8006978:	08012e4c 	.word	0x08012e4c
 800697c:	08012e84 	.word	0x08012e84
 8006980:	08012ea4 	.word	0x08012ea4
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8006984:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006988:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800698c:	2b05      	cmp	r3, #5
 800698e:	f040 80b3 	bne.w	8006af8 <uavcan_register_Value_1_0_serialize_+0x8cc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006992:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d006      	beq.n	80069ac <uavcan_register_Value_1_0_serialize_+0x780>
 800699e:	4bc4      	ldr	r3, [pc, #784]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 80069a0:	4ac4      	ldr	r2, [pc, #784]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 80069a2:	f240 1121 	movw	r1, #289	; 0x121
 80069a6:	48c4      	ldr	r0, [pc, #784]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 80069a8:	f008 fc56 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80069ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <uavcan_register_Value_1_0_serialize_+0x79a>
 80069b8:	4bbd      	ldr	r3, [pc, #756]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 80069ba:	4abe      	ldr	r2, [pc, #760]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 80069bc:	f44f 7191 	mov.w	r1, #290	; 0x122
 80069c0:	48bd      	ldr	r0, [pc, #756]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 80069c2:	f008 fc49 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80069c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069d0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d4:	f640 0308 	movw	r3, #2056	; 0x808
 80069d8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80069dc:	4602      	mov	r2, r0
 80069de:	18d3      	adds	r3, r2, r3
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069e4:	460b      	mov	r3, r1
 80069e6:	f143 0300 	adc.w	r3, r3, #0
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ee:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069fe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006a02:	4623      	mov	r3, r4
 8006a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	460a      	mov	r2, r1
 8006a10:	4193      	sbcs	r3, r2
 8006a12:	d206      	bcs.n	8006a22 <uavcan_register_Value_1_0_serialize_+0x7f6>
 8006a14:	4ba9      	ldr	r3, [pc, #676]	; (8006cbc <uavcan_register_Value_1_0_serialize_+0xa90>)
 8006a16:	4aa7      	ldr	r2, [pc, #668]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a18:	f240 1123 	movw	r1, #291	; 0x123
 8006a1c:	48a6      	ldr	r0, [pc, #664]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a1e:	f008 fc1b 	bl	800f258 <__assert_func>
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8006a22:	f240 1301 	movw	r3, #257	; 0x101
 8006a26:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006a2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <uavcan_register_Value_1_0_serialize_+0x818>
 8006a36:	4b9e      	ldr	r3, [pc, #632]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006a38:	4a9e      	ldr	r2, [pc, #632]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a3a:	f240 1125 	movw	r1, #293	; 0x125
 8006a3e:	489e      	ldr	r0, [pc, #632]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a40:	f008 fc0a 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
 8006a44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a48:	08da      	lsrs	r2, r3, #3
 8006a4a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d206      	bcs.n	8006a66 <uavcan_register_Value_1_0_serialize_+0x83a>
 8006a58:	4b99      	ldr	r3, [pc, #612]	; (8006cc0 <uavcan_register_Value_1_0_serialize_+0xa94>)
 8006a5a:	4a96      	ldr	r2, [pc, #600]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006a5c:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006a60:	4895      	ldr	r0, [pc, #596]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006a62:	f008 fbf9 	bl	800f258 <__assert_func>
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8006a66:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8006a6a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006a74:	4413      	add	r3, r2
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8006a76:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7fd faaa 	bl	8003fd4 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
        if (_err5_ < 0)
 8006a86:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da03      	bge.n	8006a96 <uavcan_register_Value_1_0_serialize_+0x86a>
        {
            return _err5_;
 8006a8e:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8006a92:	f000 bf6e 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
 8006a96:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	d806      	bhi.n	8006aae <uavcan_register_Value_1_0_serialize_+0x882>
 8006aa0:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <uavcan_register_Value_1_0_serialize_+0xa98>)
 8006aa2:	4a84      	ldr	r2, [pc, #528]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006aa4:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8006aa8:	4883      	ldr	r0, [pc, #524]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006aaa:	f008 fbd5 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
 8006aae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	f640 0208 	movw	r2, #2056	; 0x808
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d906      	bls.n	8006aca <uavcan_register_Value_1_0_serialize_+0x89e>
 8006abc:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <uavcan_register_Value_1_0_serialize_+0xa9c>)
 8006abe:	4a7d      	ldr	r2, [pc, #500]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006ac0:	f240 112f 	movw	r1, #303	; 0x12f
 8006ac4:	487c      	ldr	r0, [pc, #496]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006ac6:	f008 fbc7 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8006aca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006ada:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	f240 86ce 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8006aea:	4b78      	ldr	r3, [pc, #480]	; (8006ccc <uavcan_register_Value_1_0_serialize_+0xaa0>)
 8006aec:	4a71      	ldr	r2, [pc, #452]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006aee:	f240 1131 	movw	r1, #305	; 0x131
 8006af2:	4871      	ldr	r0, [pc, #452]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006af4:	f008 fbb0 	bl	800f258 <__assert_func>
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8006af8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006afc:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	f040 80b3 	bne.w	8006c6c <uavcan_register_Value_1_0_serialize_+0xa40>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006b06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d006      	beq.n	8006b20 <uavcan_register_Value_1_0_serialize_+0x8f4>
 8006b12:	4b67      	ldr	r3, [pc, #412]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006b14:	4a67      	ldr	r2, [pc, #412]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b16:	f240 1135 	movw	r1, #309	; 0x135
 8006b1a:	4867      	ldr	r0, [pc, #412]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b1c:	f008 fb9c 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006b20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <uavcan_register_Value_1_0_serialize_+0x90e>
 8006b2c:	4b60      	ldr	r3, [pc, #384]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006b2e:	4a61      	ldr	r2, [pc, #388]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b30:	f44f 719b 	mov.w	r1, #310	; 0x136
 8006b34:	4860      	ldr	r0, [pc, #384]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b36:	f008 fb8f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006b3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b48:	f640 0308 	movw	r3, #2056	; 0x808
 8006b4c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006b50:	4602      	mov	r2, r0
 8006b52:	18d3      	adds	r3, r2, r3
 8006b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b58:	460b      	mov	r3, r1
 8006b5a:	f143 0300 	adc.w	r3, r3, #0
 8006b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b62:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b72:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8006b76:	4623      	mov	r3, r4
 8006b78:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	462b      	mov	r3, r5
 8006b82:	460a      	mov	r2, r1
 8006b84:	4193      	sbcs	r3, r2
 8006b86:	d206      	bcs.n	8006b96 <uavcan_register_Value_1_0_serialize_+0x96a>
 8006b88:	4b4c      	ldr	r3, [pc, #304]	; (8006cbc <uavcan_register_Value_1_0_serialize_+0xa90>)
 8006b8a:	4a4a      	ldr	r2, [pc, #296]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006b8c:	f240 1137 	movw	r1, #311	; 0x137
 8006b90:	4849      	ldr	r0, [pc, #292]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006b92:	f008 fb61 	bl	800f258 <__assert_func>
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8006b96:	f240 1301 	movw	r3, #257	; 0x101
 8006b9a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006b9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d006      	beq.n	8006bb8 <uavcan_register_Value_1_0_serialize_+0x98c>
 8006baa:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006bac:	4a41      	ldr	r2, [pc, #260]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006bae:	f240 1139 	movw	r1, #313	; 0x139
 8006bb2:	4841      	ldr	r0, [pc, #260]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006bb4:	f008 fb50 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
 8006bb8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006bbc:	08da      	lsrs	r2, r3, #3
 8006bbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d206      	bcs.n	8006bda <uavcan_register_Value_1_0_serialize_+0x9ae>
 8006bcc:	4b40      	ldr	r3, [pc, #256]	; (8006cd0 <uavcan_register_Value_1_0_serialize_+0xaa4>)
 8006bce:	4a39      	ldr	r2, [pc, #228]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006bd0:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8006bd4:	4838      	ldr	r0, [pc, #224]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006bd6:	f008 fb3f 	bl	800f258 <__assert_func>
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8006bda:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8006bde:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006be8:	4413      	add	r3, r2
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8006bea:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f7fd f80a 	bl	8003c08 <uavcan_primitive_array_Integer16_1_0_serialize_>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
        if (_err6_ < 0)
 8006bfa:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da03      	bge.n	8006c0a <uavcan_register_Value_1_0_serialize_+0x9de>
        {
            return _err6_;
 8006c02:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8006c06:	f000 beb4 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
 8006c0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	2b07      	cmp	r3, #7
 8006c12:	d806      	bhi.n	8006c22 <uavcan_register_Value_1_0_serialize_+0x9f6>
 8006c14:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <uavcan_register_Value_1_0_serialize_+0xaa8>)
 8006c16:	4a27      	ldr	r2, [pc, #156]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c18:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006c1c:	4826      	ldr	r0, [pc, #152]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c1e:	f008 fb1b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
 8006c22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	f640 0208 	movw	r2, #2056	; 0x808
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d906      	bls.n	8006c3e <uavcan_register_Value_1_0_serialize_+0xa12>
 8006c30:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <uavcan_register_Value_1_0_serialize_+0xaac>)
 8006c32:	4a20      	ldr	r2, [pc, #128]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c34:	f240 1143 	movw	r1, #323	; 0x143
 8006c38:	481f      	ldr	r0, [pc, #124]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c3a:	f008 fb0d 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8006c3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006c4e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f240 8614 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8006c5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <uavcan_register_Value_1_0_serialize_+0xaa0>)
 8006c60:	4a14      	ldr	r2, [pc, #80]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c62:	f240 1145 	movw	r1, #325	; 0x145
 8006c66:	4814      	ldr	r0, [pc, #80]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c68:	f008 faf6 	bl	800f258 <__assert_func>
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8006c6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006c70:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006c74:	2b07      	cmp	r3, #7
 8006c76:	f040 80c8 	bne.w	8006e0a <uavcan_register_Value_1_0_serialize_+0xbde>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006c7a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d006      	beq.n	8006c94 <uavcan_register_Value_1_0_serialize_+0xa68>
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006c8a:	f240 1149 	movw	r1, #329	; 0x149
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006c90:	f008 fae2 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006c94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01d      	beq.n	8006cdc <uavcan_register_Value_1_0_serialize_+0xab0>
 8006ca0:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <uavcan_register_Value_1_0_serialize_+0xa84>)
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <uavcan_register_Value_1_0_serialize_+0xa88>)
 8006ca4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006ca8:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <uavcan_register_Value_1_0_serialize_+0xa8c>)
 8006caa:	f008 fad5 	bl	800f258 <__assert_func>
 8006cae:	bf00      	nop
 8006cb0:	08011eb0 	.word	0x08011eb0
 8006cb4:	080147f0 	.word	0x080147f0
 8006cb8:	08012c50 	.word	0x08012c50
 8006cbc:	08012474 	.word	0x08012474
 8006cc0:	08012ec4 	.word	0x08012ec4
 8006cc4:	08012efc 	.word	0x08012efc
 8006cc8:	08012f1c 	.word	0x08012f1c
 8006ccc:	08012104 	.word	0x08012104
 8006cd0:	08012f3c 	.word	0x08012f3c
 8006cd4:	08012f74 	.word	0x08012f74
 8006cd8:	08012f94 	.word	0x08012f94
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 8006cdc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ce6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006cee:	460b      	mov	r3, r1
 8006cf0:	f513 6301 	adds.w	r3, r3, #2064	; 0x810
 8006cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	f143 0300 	adc.w	r3, r3, #0
 8006cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d02:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d0e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d12:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8006d16:	4623      	mov	r3, r4
 8006d18:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	462b      	mov	r3, r5
 8006d22:	460a      	mov	r2, r1
 8006d24:	4193      	sbcs	r3, r2
 8006d26:	d206      	bcs.n	8006d36 <uavcan_register_Value_1_0_serialize_+0xb0a>
 8006d28:	4bc4      	ldr	r3, [pc, #784]	; (800703c <uavcan_register_Value_1_0_serialize_+0xe10>)
 8006d2a:	4ac5      	ldr	r2, [pc, #788]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d2c:	f240 114b 	movw	r1, #331	; 0x14b
 8006d30:	48c4      	ldr	r0, [pc, #784]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d32:	f008 fa91 	bl	800f258 <__assert_func>
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8006d36:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006d3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006d3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <uavcan_register_Value_1_0_serialize_+0xb2c>
 8006d4a:	4bbf      	ldr	r3, [pc, #764]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006d4c:	4abc      	ldr	r2, [pc, #752]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d4e:	f240 114d 	movw	r1, #333	; 0x14d
 8006d52:	48bc      	ldr	r0, [pc, #752]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d54:	f008 fa80 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
 8006d58:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d5c:	08da      	lsrs	r2, r3, #3
 8006d5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d62:	4413      	add	r3, r2
 8006d64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d206      	bcs.n	8006d7a <uavcan_register_Value_1_0_serialize_+0xb4e>
 8006d6c:	4bb7      	ldr	r3, [pc, #732]	; (800704c <uavcan_register_Value_1_0_serialize_+0xe20>)
 8006d6e:	4ab4      	ldr	r2, [pc, #720]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006d70:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8006d74:	48b3      	ldr	r0, [pc, #716]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006d76:	f008 fa6f 	bl	800f258 <__assert_func>
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8006d7a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8006d7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006d88:	4413      	add	r3, r2
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8006d8a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f7fd fce8 	bl	8004764 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
        if (_err7_ < 0)
 8006d9a:	f997 3190 	ldrsb.w	r3, [r7, #400]	; 0x190
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da03      	bge.n	8006daa <uavcan_register_Value_1_0_serialize_+0xb7e>
        {
            return _err7_;
 8006da2:	f997 3190 	ldrsb.w	r3, [r7, #400]	; 0x190
 8006da6:	f000 bde4 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
 8006daa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d806      	bhi.n	8006dc2 <uavcan_register_Value_1_0_serialize_+0xb96>
 8006db4:	4ba6      	ldr	r3, [pc, #664]	; (8007050 <uavcan_register_Value_1_0_serialize_+0xe24>)
 8006db6:	4aa2      	ldr	r2, [pc, #648]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006db8:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8006dbc:	48a1      	ldr	r0, [pc, #644]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006dbe:	f008 fa4b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
 8006dc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006dcc:	d906      	bls.n	8006ddc <uavcan_register_Value_1_0_serialize_+0xbb0>
 8006dce:	4ba1      	ldr	r3, [pc, #644]	; (8007054 <uavcan_register_Value_1_0_serialize_+0xe28>)
 8006dd0:	4a9b      	ldr	r2, [pc, #620]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006dd2:	f240 1157 	movw	r1, #343	; 0x157
 8006dd6:	489b      	ldr	r0, [pc, #620]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006dd8:	f008 fa3e 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8006ddc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006de6:	4413      	add	r3, r2
 8006de8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006dec:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f240 8545 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8006dfc:	4b96      	ldr	r3, [pc, #600]	; (8007058 <uavcan_register_Value_1_0_serialize_+0xe2c>)
 8006dfe:	4a90      	ldr	r2, [pc, #576]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e00:	f240 1159 	movw	r1, #345	; 0x159
 8006e04:	488f      	ldr	r0, [pc, #572]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e06:	f008 fa27 	bl	800f258 <__assert_func>
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8006e0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006e0e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	f040 80b3 	bne.w	8006f7e <uavcan_register_Value_1_0_serialize_+0xd52>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006e18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <uavcan_register_Value_1_0_serialize_+0xc06>
 8006e24:	4b88      	ldr	r3, [pc, #544]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006e26:	4a86      	ldr	r2, [pc, #536]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e28:	f240 115d 	movw	r1, #349	; 0x15d
 8006e2c:	4885      	ldr	r0, [pc, #532]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e2e:	f008 fa13 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006e32:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <uavcan_register_Value_1_0_serialize_+0xc20>
 8006e3e:	4b82      	ldr	r3, [pc, #520]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006e40:	4a7f      	ldr	r2, [pc, #508]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e42:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006e46:	487f      	ldr	r0, [pc, #508]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006e48:	f008 fa06 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006e4c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e5a:	f640 0308 	movw	r3, #2056	; 0x808
 8006e5e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e62:	4602      	mov	r2, r0
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	f143 0300 	adc.w	r3, r3, #0
 8006e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e74:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e84:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e88:	4623      	mov	r3, r4
 8006e8a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	462b      	mov	r3, r5
 8006e94:	460a      	mov	r2, r1
 8006e96:	4193      	sbcs	r3, r2
 8006e98:	d206      	bcs.n	8006ea8 <uavcan_register_Value_1_0_serialize_+0xc7c>
 8006e9a:	4b70      	ldr	r3, [pc, #448]	; (800705c <uavcan_register_Value_1_0_serialize_+0xe30>)
 8006e9c:	4a68      	ldr	r2, [pc, #416]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006e9e:	f240 115f 	movw	r1, #351	; 0x15f
 8006ea2:	4868      	ldr	r0, [pc, #416]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006ea4:	f008 f9d8 	bl	800f258 <__assert_func>
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8006ea8:	f240 1301 	movw	r3, #257	; 0x101
 8006eac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006eb0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <uavcan_register_Value_1_0_serialize_+0xc9e>
 8006ebc:	4b62      	ldr	r3, [pc, #392]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006ebe:	4a60      	ldr	r2, [pc, #384]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006ec0:	f240 1161 	movw	r1, #353	; 0x161
 8006ec4:	485f      	ldr	r0, [pc, #380]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006ec6:	f008 f9c7 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
 8006eca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ece:	08da      	lsrs	r2, r3, #3
 8006ed0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d206      	bcs.n	8006eec <uavcan_register_Value_1_0_serialize_+0xcc0>
 8006ede:	4b60      	ldr	r3, [pc, #384]	; (8007060 <uavcan_register_Value_1_0_serialize_+0xe34>)
 8006ee0:	4a57      	ldr	r2, [pc, #348]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006ee2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ee6:	4857      	ldr	r0, [pc, #348]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006ee8:	f008 f9b6 	bl	800f258 <__assert_func>
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8006eec:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8006ef0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006efa:	4413      	add	r3, r2
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8006efc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8006f00:	4619      	mov	r1, r3
 8006f02:	f7fe f9d7 	bl	80052b4 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
        if (_err8_ < 0)
 8006f0c:	f997 3191 	ldrsb.w	r3, [r7, #401]	; 0x191
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da03      	bge.n	8006f1c <uavcan_register_Value_1_0_serialize_+0xcf0>
        {
            return _err8_;
 8006f14:	f997 3191 	ldrsb.w	r3, [r7, #401]	; 0x191
 8006f18:	f000 bd2b 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
 8006f1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	d806      	bhi.n	8006f34 <uavcan_register_Value_1_0_serialize_+0xd08>
 8006f26:	4b4f      	ldr	r3, [pc, #316]	; (8007064 <uavcan_register_Value_1_0_serialize_+0xe38>)
 8006f28:	4a45      	ldr	r2, [pc, #276]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f2a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8006f2e:	4845      	ldr	r0, [pc, #276]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f30:	f008 f992 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
 8006f34:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	f640 0208 	movw	r2, #2056	; 0x808
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d906      	bls.n	8006f50 <uavcan_register_Value_1_0_serialize_+0xd24>
 8006f42:	4b49      	ldr	r3, [pc, #292]	; (8007068 <uavcan_register_Value_1_0_serialize_+0xe3c>)
 8006f44:	4a3e      	ldr	r2, [pc, #248]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f46:	f240 116b 	movw	r1, #363	; 0x16b
 8006f4a:	483e      	ldr	r0, [pc, #248]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f4c:	f008 f984 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8006f50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8006f60:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f240 848b 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <uavcan_register_Value_1_0_serialize_+0xe2c>)
 8006f72:	4a33      	ldr	r2, [pc, #204]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f74:	f240 116d 	movw	r1, #365	; 0x16d
 8006f78:	4832      	ldr	r0, [pc, #200]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006f7a:	f008 f96d 	bl	800f258 <__assert_func>
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8006f7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f82:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	f040 80ca 	bne.w	8007120 <uavcan_register_Value_1_0_serialize_+0xef4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006f8c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <uavcan_register_Value_1_0_serialize_+0xd7a>
 8006f98:	4b2b      	ldr	r3, [pc, #172]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006f9a:	4a29      	ldr	r2, [pc, #164]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006f9c:	f240 1171 	movw	r1, #369	; 0x171
 8006fa0:	4828      	ldr	r0, [pc, #160]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006fa2:	f008 f959 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8006fa6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <uavcan_register_Value_1_0_serialize_+0xd94>
 8006fb2:	4b25      	ldr	r3, [pc, #148]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 8006fb4:	4a22      	ldr	r2, [pc, #136]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8006fb6:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8006fba:	4822      	ldr	r0, [pc, #136]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8006fbc:	f008 f94c 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8006fc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fce:	f640 0308 	movw	r3, #2056	; 0x808
 8006fd2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	18d3      	adds	r3, r2, r3
 8006fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fde:	460b      	mov	r3, r1
 8006fe0:	f143 0300 	adc.w	r3, r3, #0
 8006fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fe8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ff4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ffe:	4602      	mov	r2, r0
 8007000:	4293      	cmp	r3, r2
 8007002:	462b      	mov	r3, r5
 8007004:	460a      	mov	r2, r1
 8007006:	4193      	sbcs	r3, r2
 8007008:	d206      	bcs.n	8007018 <uavcan_register_Value_1_0_serialize_+0xdec>
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <uavcan_register_Value_1_0_serialize_+0xe30>)
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 800700e:	f240 1173 	movw	r1, #371	; 0x173
 8007012:	480c      	ldr	r0, [pc, #48]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8007014:	f008 f920 	bl	800f258 <__assert_func>
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8007018:	f240 1301 	movw	r3, #257	; 0x101
 800701c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007020:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01f      	beq.n	800706c <uavcan_register_Value_1_0_serialize_+0xe40>
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <uavcan_register_Value_1_0_serialize_+0xe1c>)
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <uavcan_register_Value_1_0_serialize_+0xe14>)
 8007030:	f240 1175 	movw	r1, #373	; 0x175
 8007034:	4803      	ldr	r0, [pc, #12]	; (8007044 <uavcan_register_Value_1_0_serialize_+0xe18>)
 8007036:	f008 f90f 	bl	800f258 <__assert_func>
 800703a:	bf00      	nop
 800703c:	08012570 	.word	0x08012570
 8007040:	080147f0 	.word	0x080147f0
 8007044:	08012c50 	.word	0x08012c50
 8007048:	08011eb0 	.word	0x08011eb0
 800704c:	08012fb4 	.word	0x08012fb4
 8007050:	08012fec 	.word	0x08012fec
 8007054:	0801300c 	.word	0x0801300c
 8007058:	08012104 	.word	0x08012104
 800705c:	08012474 	.word	0x08012474
 8007060:	0801302c 	.word	0x0801302c
 8007064:	08013064 	.word	0x08013064
 8007068:	08013084 	.word	0x08013084
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
 800706c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007076:	4413      	add	r3, r2
 8007078:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800707c:	429a      	cmp	r2, r3
 800707e:	d206      	bcs.n	800708e <uavcan_register_Value_1_0_serialize_+0xe62>
 8007080:	4bc7      	ldr	r3, [pc, #796]	; (80073a0 <uavcan_register_Value_1_0_serialize_+0x1174>)
 8007082:	4ac8      	ldr	r2, [pc, #800]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007084:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8007088:	48c7      	ldr	r0, [pc, #796]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 800708a:	f008 f8e5 	bl	800f258 <__assert_func>
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800708e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8007092:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007096:	08db      	lsrs	r3, r3, #3
 8007098:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800709c:	4413      	add	r3, r2
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800709e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80070a2:	4619      	mov	r1, r3
 80070a4:	f7fd ff22 	bl	8004eec <uavcan_primitive_array_Natural32_1_0_serialize_>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
        if (_err9_ < 0)
 80070ae:	f997 3192 	ldrsb.w	r3, [r7, #402]	; 0x192
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da03      	bge.n	80070be <uavcan_register_Value_1_0_serialize_+0xe92>
        {
            return _err9_;
 80070b6:	f997 3192 	ldrsb.w	r3, [r7, #402]	; 0x192
 80070ba:	f000 bc5a 	b.w	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
 80070be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	d806      	bhi.n	80070d6 <uavcan_register_Value_1_0_serialize_+0xeaa>
 80070c8:	4bb8      	ldr	r3, [pc, #736]	; (80073ac <uavcan_register_Value_1_0_serialize_+0x1180>)
 80070ca:	4ab6      	ldr	r2, [pc, #728]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80070cc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80070d0:	48b5      	ldr	r0, [pc, #724]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80070d2:	f008 f8c1 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
 80070d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	f640 0208 	movw	r2, #2056	; 0x808
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d906      	bls.n	80070f2 <uavcan_register_Value_1_0_serialize_+0xec6>
 80070e4:	4bb2      	ldr	r3, [pc, #712]	; (80073b0 <uavcan_register_Value_1_0_serialize_+0x1184>)
 80070e6:	4aaf      	ldr	r2, [pc, #700]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80070e8:	f240 117f 	movw	r1, #383	; 0x17f
 80070ec:	48ae      	ldr	r0, [pc, #696]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80070ee:	f008 f8b3 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 80070f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80070fc:	4413      	add	r3, r2
 80070fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007102:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800710c:	429a      	cmp	r2, r3
 800710e:	f240 83ba 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8007112:	4ba8      	ldr	r3, [pc, #672]	; (80073b4 <uavcan_register_Value_1_0_serialize_+0x1188>)
 8007114:	4aa3      	ldr	r2, [pc, #652]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007116:	f240 1181 	movw	r1, #385	; 0x181
 800711a:	48a3      	ldr	r0, [pc, #652]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 800711c:	f008 f89c 	bl	800f258 <__assert_func>
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8007120:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007124:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007128:	2b0a      	cmp	r3, #10
 800712a:	f040 80ac 	bne.w	8007286 <uavcan_register_Value_1_0_serialize_+0x105a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800712e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d006      	beq.n	8007148 <uavcan_register_Value_1_0_serialize_+0xf1c>
 800713a:	4b9f      	ldr	r3, [pc, #636]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 800713c:	4a99      	ldr	r2, [pc, #612]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800713e:	f240 1185 	movw	r1, #389	; 0x185
 8007142:	4899      	ldr	r0, [pc, #612]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007144:	f008 f888 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007148:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	2b00      	cmp	r3, #0
 8007152:	d006      	beq.n	8007162 <uavcan_register_Value_1_0_serialize_+0xf36>
 8007154:	4b98      	ldr	r3, [pc, #608]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 8007156:	4a93      	ldr	r2, [pc, #588]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007158:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800715c:	4892      	ldr	r0, [pc, #584]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 800715e:	f008 f87b 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8007162:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007166:	2200      	movs	r2, #0
 8007168:	673b      	str	r3, [r7, #112]	; 0x70
 800716a:	677a      	str	r2, [r7, #116]	; 0x74
 800716c:	f640 0308 	movw	r3, #2056	; 0x808
 8007170:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007174:	4602      	mov	r2, r0
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	66bb      	str	r3, [r7, #104]	; 0x68
 800717a:	460b      	mov	r3, r1
 800717c:	f143 0300 	adc.w	r3, r3, #0
 8007180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007182:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	2200      	movs	r2, #0
 800718a:	663b      	str	r3, [r7, #96]	; 0x60
 800718c:	667a      	str	r2, [r7, #100]	; 0x64
 800718e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007192:	4623      	mov	r3, r4
 8007194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007198:	4602      	mov	r2, r0
 800719a:	4293      	cmp	r3, r2
 800719c:	462b      	mov	r3, r5
 800719e:	460a      	mov	r2, r1
 80071a0:	4193      	sbcs	r3, r2
 80071a2:	d206      	bcs.n	80071b2 <uavcan_register_Value_1_0_serialize_+0xf86>
 80071a4:	4b85      	ldr	r3, [pc, #532]	; (80073bc <uavcan_register_Value_1_0_serialize_+0x1190>)
 80071a6:	4a7f      	ldr	r2, [pc, #508]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80071a8:	f240 1187 	movw	r1, #391	; 0x187
 80071ac:	487e      	ldr	r0, [pc, #504]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80071ae:	f008 f853 	bl	800f258 <__assert_func>
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 80071b2:	f240 1301 	movw	r3, #257	; 0x101
 80071b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80071ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d006      	beq.n	80071d4 <uavcan_register_Value_1_0_serialize_+0xfa8>
 80071c6:	4b7c      	ldr	r3, [pc, #496]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 80071c8:	4a76      	ldr	r2, [pc, #472]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80071ca:	f240 1189 	movw	r1, #393	; 0x189
 80071ce:	4876      	ldr	r0, [pc, #472]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80071d0:	f008 f842 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
 80071d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80071d8:	08da      	lsrs	r2, r3, #3
 80071da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80071de:	4413      	add	r3, r2
 80071e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d206      	bcs.n	80071f6 <uavcan_register_Value_1_0_serialize_+0xfca>
 80071e8:	4b75      	ldr	r3, [pc, #468]	; (80073c0 <uavcan_register_Value_1_0_serialize_+0x1194>)
 80071ea:	4a6e      	ldr	r2, [pc, #440]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80071ec:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80071f0:	486d      	ldr	r0, [pc, #436]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80071f2:	f008 f831 	bl	800f258 <__assert_func>
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80071f6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 80071fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80071fe:	08db      	lsrs	r3, r3, #3
 8007200:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007204:	4413      	add	r3, r2
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8007206:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800720a:	4619      	mov	r1, r3
 800720c:	f7fd fc88 	bl	8004b20 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
        if (_err10_ < 0)
 8007216:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 800721a:	2b00      	cmp	r3, #0
 800721c:	da02      	bge.n	8007224 <uavcan_register_Value_1_0_serialize_+0xff8>
        {
            return _err10_;
 800721e:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007222:	e3a6      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
 8007224:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	2b07      	cmp	r3, #7
 800722c:	d806      	bhi.n	800723c <uavcan_register_Value_1_0_serialize_+0x1010>
 800722e:	4b65      	ldr	r3, [pc, #404]	; (80073c4 <uavcan_register_Value_1_0_serialize_+0x1198>)
 8007230:	4a5c      	ldr	r2, [pc, #368]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007232:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8007236:	485c      	ldr	r0, [pc, #368]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007238:	f008 f80e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
 800723c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	f640 0208 	movw	r2, #2056	; 0x808
 8007246:	4293      	cmp	r3, r2
 8007248:	d906      	bls.n	8007258 <uavcan_register_Value_1_0_serialize_+0x102c>
 800724a:	4b5f      	ldr	r3, [pc, #380]	; (80073c8 <uavcan_register_Value_1_0_serialize_+0x119c>)
 800724c:	4a55      	ldr	r2, [pc, #340]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800724e:	f240 1193 	movw	r1, #403	; 0x193
 8007252:	4855      	ldr	r0, [pc, #340]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007254:	f008 f800 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8007258:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007262:	4413      	add	r3, r2
 8007264:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007268:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007272:	429a      	cmp	r2, r3
 8007274:	f240 8307 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8007278:	4b4e      	ldr	r3, [pc, #312]	; (80073b4 <uavcan_register_Value_1_0_serialize_+0x1188>)
 800727a:	4a4a      	ldr	r2, [pc, #296]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800727c:	f240 1195 	movw	r1, #405	; 0x195
 8007280:	4849      	ldr	r0, [pc, #292]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007282:	f007 ffe9 	bl	800f258 <__assert_func>
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8007286:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800728a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800728e:	2b0b      	cmp	r3, #11
 8007290:	f040 80c6 	bne.w	8007420 <uavcan_register_Value_1_0_serialize_+0x11f4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007294:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <uavcan_register_Value_1_0_serialize_+0x1082>
 80072a0:	4b45      	ldr	r3, [pc, #276]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 80072a2:	4a40      	ldr	r2, [pc, #256]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80072a4:	f240 1199 	movw	r1, #409	; 0x199
 80072a8:	483f      	ldr	r0, [pc, #252]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80072aa:	f007 ffd5 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80072ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <uavcan_register_Value_1_0_serialize_+0x109c>
 80072ba:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 80072bc:	4a39      	ldr	r2, [pc, #228]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 80072be:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80072c2:	4839      	ldr	r0, [pc, #228]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 80072c4:	f007 ffc8 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
 80072c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072cc:	2200      	movs	r2, #0
 80072ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80072d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80072d6:	460b      	mov	r3, r1
 80072d8:	f513 6301 	adds.w	r3, r3, #2064	; 0x810
 80072dc:	653b      	str	r3, [r7, #80]	; 0x50
 80072de:	4613      	mov	r3, r2
 80072e0:	f143 0300 	adc.w	r3, r3, #0
 80072e4:	657b      	str	r3, [r7, #84]	; 0x54
 80072e6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	2200      	movs	r2, #0
 80072ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072f2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80072f6:	4623      	mov	r3, r4
 80072f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072fc:	4602      	mov	r2, r0
 80072fe:	4293      	cmp	r3, r2
 8007300:	462b      	mov	r3, r5
 8007302:	460a      	mov	r2, r1
 8007304:	4193      	sbcs	r3, r2
 8007306:	d206      	bcs.n	8007316 <uavcan_register_Value_1_0_serialize_+0x10ea>
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <uavcan_register_Value_1_0_serialize_+0x11a0>)
 800730a:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800730c:	f240 119b 	movw	r1, #411	; 0x19b
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007312:	f007 ffa1 	bl	800f258 <__assert_func>
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 8007316:	f44f 7381 	mov.w	r3, #258	; 0x102
 800731a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800731e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <uavcan_register_Value_1_0_serialize_+0x110c>
 800732a:	4b23      	ldr	r3, [pc, #140]	; (80073b8 <uavcan_register_Value_1_0_serialize_+0x118c>)
 800732c:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 800732e:	f240 119d 	movw	r1, #413	; 0x19d
 8007332:	481d      	ldr	r0, [pc, #116]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007334:	f007 ff90 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
 8007338:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800733c:	08da      	lsrs	r2, r3, #3
 800733e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007342:	4413      	add	r3, r2
 8007344:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007348:	429a      	cmp	r2, r3
 800734a:	d206      	bcs.n	800735a <uavcan_register_Value_1_0_serialize_+0x112e>
 800734c:	4b20      	ldr	r3, [pc, #128]	; (80073d0 <uavcan_register_Value_1_0_serialize_+0x11a4>)
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007350:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8007354:	4814      	ldr	r0, [pc, #80]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 8007356:	f007 ff7f 	bl	800f258 <__assert_func>
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 800735a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 800735e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007368:	4413      	add	r3, r2
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 800736a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800736e:	4619      	mov	r1, r3
 8007370:	f7fe f984 	bl	800567c <uavcan_primitive_array_Natural8_1_0_serialize_>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
        if (_err11_ < 0)
 800737a:	f997 3194 	ldrsb.w	r3, [r7, #404]	; 0x194
 800737e:	2b00      	cmp	r3, #0
 8007380:	da02      	bge.n	8007388 <uavcan_register_Value_1_0_serialize_+0x115c>
        {
            return _err11_;
 8007382:	f997 3194 	ldrsb.w	r3, [r7, #404]	; 0x194
 8007386:	e2f4      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
 8007388:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d822      	bhi.n	80073d8 <uavcan_register_Value_1_0_serialize_+0x11ac>
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <uavcan_register_Value_1_0_serialize_+0x11a8>)
 8007394:	4a03      	ldr	r2, [pc, #12]	; (80073a4 <uavcan_register_Value_1_0_serialize_+0x1178>)
 8007396:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800739a:	4803      	ldr	r0, [pc, #12]	; (80073a8 <uavcan_register_Value_1_0_serialize_+0x117c>)
 800739c:	f007 ff5c 	bl	800f258 <__assert_func>
 80073a0:	080130a4 	.word	0x080130a4
 80073a4:	080147f0 	.word	0x080147f0
 80073a8:	08012c50 	.word	0x08012c50
 80073ac:	080130dc 	.word	0x080130dc
 80073b0:	080130fc 	.word	0x080130fc
 80073b4:	08012104 	.word	0x08012104
 80073b8:	08011eb0 	.word	0x08011eb0
 80073bc:	08012474 	.word	0x08012474
 80073c0:	0801311c 	.word	0x0801311c
 80073c4:	08013154 	.word	0x08013154
 80073c8:	08013174 	.word	0x08013174
 80073cc:	08012570 	.word	0x08012570
 80073d0:	08013198 	.word	0x08013198
 80073d4:	080131d0 	.word	0x080131d0
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
 80073d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80073e2:	d906      	bls.n	80073f2 <uavcan_register_Value_1_0_serialize_+0x11c6>
 80073e4:	4bc1      	ldr	r3, [pc, #772]	; (80076ec <uavcan_register_Value_1_0_serialize_+0x14c0>)
 80073e6:	4ac2      	ldr	r2, [pc, #776]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80073e8:	f240 11a7 	movw	r1, #423	; 0x1a7
 80073ec:	48c1      	ldr	r0, [pc, #772]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80073ee:	f007 ff33 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 80073f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80073fc:	4413      	add	r3, r2
 80073fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007402:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800740c:	429a      	cmp	r2, r3
 800740e:	f240 823a 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8007412:	4bb9      	ldr	r3, [pc, #740]	; (80076f8 <uavcan_register_Value_1_0_serialize_+0x14cc>)
 8007414:	4ab6      	ldr	r2, [pc, #728]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007416:	f240 11a9 	movw	r1, #425	; 0x1a9
 800741a:	48b6      	ldr	r0, [pc, #728]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800741c:	f007 ff1c 	bl	800f258 <__assert_func>
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8007420:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007424:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007428:	2b0c      	cmp	r3, #12
 800742a:	f040 80ac 	bne.w	8007586 <uavcan_register_Value_1_0_serialize_+0x135a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800742e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <uavcan_register_Value_1_0_serialize_+0x121c>
 800743a:	4bb0      	ldr	r3, [pc, #704]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 800743c:	4aac      	ldr	r2, [pc, #688]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800743e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8007442:	48ac      	ldr	r0, [pc, #688]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007444:	f007 ff08 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007448:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <uavcan_register_Value_1_0_serialize_+0x1236>
 8007454:	4ba9      	ldr	r3, [pc, #676]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 8007456:	4aa6      	ldr	r2, [pc, #664]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800745c:	48a5      	ldr	r0, [pc, #660]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800745e:	f007 fefb 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 8007462:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007466:	2200      	movs	r2, #0
 8007468:	643b      	str	r3, [r7, #64]	; 0x40
 800746a:	647a      	str	r2, [r7, #68]	; 0x44
 800746c:	f640 0308 	movw	r3, #2056	; 0x808
 8007470:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007474:	4602      	mov	r2, r0
 8007476:	18d3      	adds	r3, r2, r3
 8007478:	63bb      	str	r3, [r7, #56]	; 0x38
 800747a:	460b      	mov	r3, r1
 800747c:	f143 0300 	adc.w	r3, r3, #0
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007482:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	2200      	movs	r2, #0
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
 800748c:	637a      	str	r2, [r7, #52]	; 0x34
 800748e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007492:	4623      	mov	r3, r4
 8007494:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007498:	4602      	mov	r2, r0
 800749a:	4293      	cmp	r3, r2
 800749c:	462b      	mov	r3, r5
 800749e:	460a      	mov	r2, r1
 80074a0:	4193      	sbcs	r3, r2
 80074a2:	d206      	bcs.n	80074b2 <uavcan_register_Value_1_0_serialize_+0x1286>
 80074a4:	4b96      	ldr	r3, [pc, #600]	; (8007700 <uavcan_register_Value_1_0_serialize_+0x14d4>)
 80074a6:	4a92      	ldr	r2, [pc, #584]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80074a8:	f240 11af 	movw	r1, #431	; 0x1af
 80074ac:	4891      	ldr	r0, [pc, #580]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80074ae:	f007 fed3 	bl	800f258 <__assert_func>
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 80074b2:	f240 1301 	movw	r3, #257	; 0x101
 80074b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80074ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <uavcan_register_Value_1_0_serialize_+0x12a8>
 80074c6:	4b8d      	ldr	r3, [pc, #564]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 80074c8:	4a89      	ldr	r2, [pc, #548]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80074ca:	f240 11b1 	movw	r1, #433	; 0x1b1
 80074ce:	4889      	ldr	r0, [pc, #548]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80074d0:	f007 fec2 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
 80074d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80074d8:	08da      	lsrs	r2, r3, #3
 80074da:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80074de:	4413      	add	r3, r2
 80074e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d206      	bcs.n	80074f6 <uavcan_register_Value_1_0_serialize_+0x12ca>
 80074e8:	4b86      	ldr	r3, [pc, #536]	; (8007704 <uavcan_register_Value_1_0_serialize_+0x14d8>)
 80074ea:	4a81      	ldr	r2, [pc, #516]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80074ec:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80074f0:	4880      	ldr	r0, [pc, #512]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80074f2:	f007 feb1 	bl	800f258 <__assert_func>
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 80074f6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 80074fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80074fe:	08db      	lsrs	r3, r3, #3
 8007500:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007504:	4413      	add	r3, r2
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8007506:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800750a:	4619      	mov	r1, r3
 800750c:	f7fb fc0a 	bl	8002d24 <uavcan_primitive_array_Real64_1_0_serialize_>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
        if (_err12_ < 0)
 8007516:	f997 3195 	ldrsb.w	r3, [r7, #405]	; 0x195
 800751a:	2b00      	cmp	r3, #0
 800751c:	da02      	bge.n	8007524 <uavcan_register_Value_1_0_serialize_+0x12f8>
        {
            return _err12_;
 800751e:	f997 3195 	ldrsb.w	r3, [r7, #405]	; 0x195
 8007522:	e226      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
 8007524:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	2b07      	cmp	r3, #7
 800752c:	d806      	bhi.n	800753c <uavcan_register_Value_1_0_serialize_+0x1310>
 800752e:	4b76      	ldr	r3, [pc, #472]	; (8007708 <uavcan_register_Value_1_0_serialize_+0x14dc>)
 8007530:	4a6f      	ldr	r2, [pc, #444]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007532:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8007536:	486f      	ldr	r0, [pc, #444]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007538:	f007 fe8e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
 800753c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	f640 0208 	movw	r2, #2056	; 0x808
 8007546:	4293      	cmp	r3, r2
 8007548:	d906      	bls.n	8007558 <uavcan_register_Value_1_0_serialize_+0x132c>
 800754a:	4b70      	ldr	r3, [pc, #448]	; (800770c <uavcan_register_Value_1_0_serialize_+0x14e0>)
 800754c:	4a68      	ldr	r2, [pc, #416]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800754e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8007552:	4868      	ldr	r0, [pc, #416]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007554:	f007 fe80 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8007558:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007562:	4413      	add	r3, r2
 8007564:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007568:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007572:	429a      	cmp	r2, r3
 8007574:	f240 8187 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8007578:	4b5f      	ldr	r3, [pc, #380]	; (80076f8 <uavcan_register_Value_1_0_serialize_+0x14cc>)
 800757a:	4a5d      	ldr	r2, [pc, #372]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800757c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8007580:	485c      	ldr	r0, [pc, #368]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007582:	f007 fe69 	bl	800f258 <__assert_func>
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8007586:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800758a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800758e:	2b0d      	cmp	r3, #13
 8007590:	f040 80c4 	bne.w	800771c <uavcan_register_Value_1_0_serialize_+0x14f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007594:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <uavcan_register_Value_1_0_serialize_+0x1382>
 80075a0:	4b56      	ldr	r3, [pc, #344]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 80075a2:	4a53      	ldr	r2, [pc, #332]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80075a4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80075a8:	4852      	ldr	r0, [pc, #328]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80075aa:	f007 fe55 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80075ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <uavcan_register_Value_1_0_serialize_+0x139c>
 80075ba:	4b50      	ldr	r3, [pc, #320]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 80075bc:	4a4c      	ldr	r2, [pc, #304]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80075be:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80075c2:	484c      	ldr	r0, [pc, #304]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80075c4:	f007 fe48 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 80075c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80075cc:	2200      	movs	r2, #0
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d2:	f640 0308 	movw	r3, #2056	; 0x808
 80075d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075da:	4602      	mov	r2, r0
 80075dc:	18d3      	adds	r3, r2, r3
 80075de:	623b      	str	r3, [r7, #32]
 80075e0:	460b      	mov	r3, r1
 80075e2:	f143 0300 	adc.w	r3, r3, #0
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
 80075e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	2200      	movs	r2, #0
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80075f8:	4623      	mov	r3, r4
 80075fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075fe:	4602      	mov	r2, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	462b      	mov	r3, r5
 8007604:	460a      	mov	r2, r1
 8007606:	4193      	sbcs	r3, r2
 8007608:	d206      	bcs.n	8007618 <uavcan_register_Value_1_0_serialize_+0x13ec>
 800760a:	4b3d      	ldr	r3, [pc, #244]	; (8007700 <uavcan_register_Value_1_0_serialize_+0x14d4>)
 800760c:	4a38      	ldr	r2, [pc, #224]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 800760e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007612:	4838      	ldr	r0, [pc, #224]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007614:	f007 fe20 	bl	800f258 <__assert_func>
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8007618:	f240 1301 	movw	r3, #257	; 0x101
 800761c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007620:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <uavcan_register_Value_1_0_serialize_+0x140e>
 800762c:	4b33      	ldr	r3, [pc, #204]	; (80076fc <uavcan_register_Value_1_0_serialize_+0x14d0>)
 800762e:	4a30      	ldr	r2, [pc, #192]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007630:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007634:	482f      	ldr	r0, [pc, #188]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007636:	f007 fe0f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
 800763a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800763e:	08da      	lsrs	r2, r3, #3
 8007640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007644:	4413      	add	r3, r2
 8007646:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800764a:	429a      	cmp	r2, r3
 800764c:	d206      	bcs.n	800765c <uavcan_register_Value_1_0_serialize_+0x1430>
 800764e:	4b30      	ldr	r3, [pc, #192]	; (8007710 <uavcan_register_Value_1_0_serialize_+0x14e4>)
 8007650:	4a27      	ldr	r2, [pc, #156]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007652:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8007656:	4827      	ldr	r0, [pc, #156]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 8007658:	f007 fdfe 	bl	800f258 <__assert_func>
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800765c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8007660:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007664:	08db      	lsrs	r3, r3, #3
 8007666:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800766a:	4413      	add	r3, r2
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800766c:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8007670:	4619      	mov	r1, r3
 8007672:	f7fe fbfb 	bl	8005e6c <uavcan_primitive_array_Real32_1_0_serialize_>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
        if (_err13_ < 0)
 800767c:	f997 3196 	ldrsb.w	r3, [r7, #406]	; 0x196
 8007680:	2b00      	cmp	r3, #0
 8007682:	da02      	bge.n	800768a <uavcan_register_Value_1_0_serialize_+0x145e>
        {
            return _err13_;
 8007684:	f997 3196 	ldrsb.w	r3, [r7, #406]	; 0x196
 8007688:	e173      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
 800768a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	2b07      	cmp	r3, #7
 8007692:	d806      	bhi.n	80076a2 <uavcan_register_Value_1_0_serialize_+0x1476>
 8007694:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <uavcan_register_Value_1_0_serialize_+0x14e8>)
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 8007698:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800769c:	4815      	ldr	r0, [pc, #84]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 800769e:	f007 fddb 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
 80076a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	f640 0208 	movw	r2, #2056	; 0x808
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d906      	bls.n	80076be <uavcan_register_Value_1_0_serialize_+0x1492>
 80076b0:	4b19      	ldr	r3, [pc, #100]	; (8007718 <uavcan_register_Value_1_0_serialize_+0x14ec>)
 80076b2:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80076b4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80076b8:	480e      	ldr	r0, [pc, #56]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80076ba:	f007 fdcd 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 80076be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80076c8:	4413      	add	r3, r2
 80076ca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80076ce:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80076d8:	429a      	cmp	r2, r3
 80076da:	f240 80d4 	bls.w	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <uavcan_register_Value_1_0_serialize_+0x14cc>)
 80076e0:	4a03      	ldr	r2, [pc, #12]	; (80076f0 <uavcan_register_Value_1_0_serialize_+0x14c4>)
 80076e2:	f240 11d1 	movw	r1, #465	; 0x1d1
 80076e6:	4803      	ldr	r0, [pc, #12]	; (80076f4 <uavcan_register_Value_1_0_serialize_+0x14c8>)
 80076e8:	f007 fdb6 	bl	800f258 <__assert_func>
 80076ec:	080131f0 	.word	0x080131f0
 80076f0:	080147f0 	.word	0x080147f0
 80076f4:	08012c50 	.word	0x08012c50
 80076f8:	08012104 	.word	0x08012104
 80076fc:	08011eb0 	.word	0x08011eb0
 8007700:	08012474 	.word	0x08012474
 8007704:	08013214 	.word	0x08013214
 8007708:	0801324c 	.word	0x0801324c
 800770c:	0801326c 	.word	0x0801326c
 8007710:	08013290 	.word	0x08013290
 8007714:	080132c8 	.word	0x080132c8
 8007718:	080132e8 	.word	0x080132e8
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 800771c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007720:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007724:	2b0e      	cmp	r3, #14
 8007726:	f040 80ab 	bne.w	8007880 <uavcan_register_Value_1_0_serialize_+0x1654>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800772a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <uavcan_register_Value_1_0_serialize_+0x1518>
 8007736:	4b92      	ldr	r3, [pc, #584]	; (8007980 <uavcan_register_Value_1_0_serialize_+0x1754>)
 8007738:	4a92      	ldr	r2, [pc, #584]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800773a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800773e:	4892      	ldr	r0, [pc, #584]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007740:	f007 fd8a 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007744:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <uavcan_register_Value_1_0_serialize_+0x1532>
 8007750:	4b8b      	ldr	r3, [pc, #556]	; (8007980 <uavcan_register_Value_1_0_serialize_+0x1754>)
 8007752:	4a8c      	ldr	r2, [pc, #560]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007754:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007758:	488b      	ldr	r0, [pc, #556]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 800775a:	f007 fd7d 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
 800775e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007762:	2200      	movs	r2, #0
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	617a      	str	r2, [r7, #20]
 8007768:	f640 0308 	movw	r3, #2056	; 0x808
 800776c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007770:	4602      	mov	r2, r0
 8007772:	18d3      	adds	r3, r2, r3
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	460b      	mov	r3, r1
 8007778:	f143 0300 	adc.w	r3, r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	2200      	movs	r2, #0
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800778e:	4623      	mov	r3, r4
 8007790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007794:	4602      	mov	r2, r0
 8007796:	4293      	cmp	r3, r2
 8007798:	462b      	mov	r3, r5
 800779a:	460a      	mov	r2, r1
 800779c:	4193      	sbcs	r3, r2
 800779e:	d206      	bcs.n	80077ae <uavcan_register_Value_1_0_serialize_+0x1582>
 80077a0:	4b7a      	ldr	r3, [pc, #488]	; (800798c <uavcan_register_Value_1_0_serialize_+0x1760>)
 80077a2:	4a78      	ldr	r2, [pc, #480]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80077a4:	f240 11d7 	movw	r1, #471	; 0x1d7
 80077a8:	4877      	ldr	r0, [pc, #476]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 80077aa:	f007 fd55 	bl	800f258 <__assert_func>
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 80077ae:	f240 1301 	movw	r3, #257	; 0x101
 80077b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80077b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <uavcan_register_Value_1_0_serialize_+0x15a4>
 80077c2:	4b6f      	ldr	r3, [pc, #444]	; (8007980 <uavcan_register_Value_1_0_serialize_+0x1754>)
 80077c4:	4a6f      	ldr	r2, [pc, #444]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80077c6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077ca:	486f      	ldr	r0, [pc, #444]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 80077cc:	f007 fd44 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
 80077d0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80077d4:	08da      	lsrs	r2, r3, #3
 80077d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80077da:	4413      	add	r3, r2
 80077dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d206      	bcs.n	80077f2 <uavcan_register_Value_1_0_serialize_+0x15c6>
 80077e4:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <uavcan_register_Value_1_0_serialize_+0x1764>)
 80077e6:	4a67      	ldr	r2, [pc, #412]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80077e8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80077ec:	4866      	ldr	r0, [pc, #408]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 80077ee:	f007 fd33 	bl	800f258 <__assert_func>
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80077f2:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 80077f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80077fa:	08db      	lsrs	r3, r3, #3
 80077fc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007800:	4413      	add	r3, r2
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8007802:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007806:	4619      	mov	r1, r3
 8007808:	f7fe f91c 	bl	8005a44 <uavcan_primitive_array_Real16_1_0_serialize_>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
        if (_err14_ < 0)
 8007812:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007816:	2b00      	cmp	r3, #0
 8007818:	da02      	bge.n	8007820 <uavcan_register_Value_1_0_serialize_+0x15f4>
        {
            return _err14_;
 800781a:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 800781e:	e0a8      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
 8007820:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	2b07      	cmp	r3, #7
 8007828:	d806      	bhi.n	8007838 <uavcan_register_Value_1_0_serialize_+0x160c>
 800782a:	4b5a      	ldr	r3, [pc, #360]	; (8007994 <uavcan_register_Value_1_0_serialize_+0x1768>)
 800782c:	4a55      	ldr	r2, [pc, #340]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800782e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007832:	4855      	ldr	r0, [pc, #340]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007834:	f007 fd10 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
 8007838:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	f640 0208 	movw	r2, #2056	; 0x808
 8007842:	4293      	cmp	r3, r2
 8007844:	d906      	bls.n	8007854 <uavcan_register_Value_1_0_serialize_+0x1628>
 8007846:	4b54      	ldr	r3, [pc, #336]	; (8007998 <uavcan_register_Value_1_0_serialize_+0x176c>)
 8007848:	4a4e      	ldr	r2, [pc, #312]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800784a:	f240 11e3 	movw	r1, #483	; 0x1e3
 800784e:	484e      	ldr	r0, [pc, #312]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007850:	f007 fd02 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8007854:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800785e:	4413      	add	r3, r2
 8007860:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8007864:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800786e:	429a      	cmp	r2, r3
 8007870:	d909      	bls.n	8007886 <uavcan_register_Value_1_0_serialize_+0x165a>
 8007872:	4b4a      	ldr	r3, [pc, #296]	; (800799c <uavcan_register_Value_1_0_serialize_+0x1770>)
 8007874:	4a43      	ldr	r2, [pc, #268]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007876:	f240 11e5 	movw	r1, #485	; 0x1e5
 800787a:	4843      	ldr	r0, [pc, #268]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 800787c:	f007 fcec 	bl	800f258 <__assert_func>
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8007880:	f06f 030a 	mvn.w	r3, #10
 8007884:	e075      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8007886:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	2b00      	cmp	r3, #0
 8007890:	d043      	beq.n	800791a <uavcan_register_Value_1_0_serialize_+0x16ee>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8007892:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f1c3 0308 	rsb	r3, r3, #8
 80078a2:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
        NUNAVUT_ASSERT(_pad0_ > 0);
 80078a6:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <uavcan_register_Value_1_0_serialize_+0x1690>
 80078ae:	4b3c      	ldr	r3, [pc, #240]	; (80079a0 <uavcan_register_Value_1_0_serialize_+0x1774>)
 80078b0:	4a34      	ldr	r2, [pc, #208]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 80078b2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80078b6:	4834      	ldr	r0, [pc, #208]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 80078b8:	f007 fcce 	bl	800f258 <__assert_func>
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80078bc:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	e9cd 2300 	strd	r2, r3, [sp]
 80078ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80078d2:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80078d6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80078da:	f7f9 fcdb 	bl	8001294 <nunavutSetUxx>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
        if (_err15_ < 0)
 80078e4:	f997 3187 	ldrsb.w	r3, [r7, #391]	; 0x187
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da02      	bge.n	80078f2 <uavcan_register_Value_1_0_serialize_+0x16c6>
        {
            return _err15_;
 80078ec:	f997 3187 	ldrsb.w	r3, [r7, #391]	; 0x187
 80078f0:	e03f      	b.n	8007972 <uavcan_register_Value_1_0_serialize_+0x1746>
        }
        offset_bits += _pad0_;
 80078f2:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80078f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80078fa:	4413      	add	r3, r2
 80078fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007900:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <uavcan_register_Value_1_0_serialize_+0x16ee>
 800790c:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <uavcan_register_Value_1_0_serialize_+0x1754>)
 800790e:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007910:	f240 11f5 	movw	r1, #501	; 0x1f5
 8007914:	481c      	ldr	r0, [pc, #112]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007916:	f007 fc9f 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 8ULL);
 800791a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800791e:	2b07      	cmp	r3, #7
 8007920:	d806      	bhi.n	8007930 <uavcan_register_Value_1_0_serialize_+0x1704>
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <uavcan_register_Value_1_0_serialize_+0x1778>)
 8007924:	4a17      	ldr	r2, [pc, #92]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007926:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800792a:	4817      	ldr	r0, [pc, #92]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 800792c:	f007 fc94 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);
 8007930:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007934:	f640 0218 	movw	r2, #2072	; 0x818
 8007938:	4293      	cmp	r3, r2
 800793a:	d906      	bls.n	800794a <uavcan_register_Value_1_0_serialize_+0x171e>
 800793c:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <uavcan_register_Value_1_0_serialize_+0x177c>)
 800793e:	4a11      	ldr	r2, [pc, #68]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 8007940:	f240 11f9 	movw	r1, #505	; 0x1f9
 8007944:	4810      	ldr	r0, [pc, #64]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007946:	f007 fc87 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800794a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <uavcan_register_Value_1_0_serialize_+0x1738>
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <uavcan_register_Value_1_0_serialize_+0x1754>)
 8007958:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <uavcan_register_Value_1_0_serialize_+0x1758>)
 800795a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800795e:	480a      	ldr	r0, [pc, #40]	; (8007988 <uavcan_register_Value_1_0_serialize_+0x175c>)
 8007960:	f007 fc7a 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8007964:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007968:	08da      	lsrs	r2, r3, #3
 800796a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800796e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8007978:	46bd      	mov	sp, r7
 800797a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800797e:	bf00      	nop
 8007980:	08011eb0 	.word	0x08011eb0
 8007984:	080147f0 	.word	0x080147f0
 8007988:	08012c50 	.word	0x08012c50
 800798c:	08012474 	.word	0x08012474
 8007990:	0801330c 	.word	0x0801330c
 8007994:	08013344 	.word	0x08013344
 8007998:	08013364 	.word	0x08013364
 800799c:	08012104 	.word	0x08012104
 80079a0:	08011fa8 	.word	0x08011fa8
 80079a4:	08011fb4 	.word	0x08011fb4
 80079a8:	08013388 	.word	0x08013388

080079ac <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b09a      	sub	sp, #104	; 0x68
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <uavcan_register_Value_1_0_deserialize_+0x26>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d006      	beq.n	80079d2 <uavcan_register_Value_1_0_deserialize_+0x26>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <uavcan_register_Value_1_0_deserialize_+0x2e>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <uavcan_register_Value_1_0_deserialize_+0x2e>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80079d2:	f06f 0301 	mvn.w	r3, #1
 80079d6:	f000 bce9 	b.w	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
    }
    if (buffer == NULL)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <uavcan_register_Value_1_0_deserialize_+0x38>
    {
        buffer = (const uint8_t*)"";
 80079e0:	4bab      	ldr	r3, [pc, #684]	; (8007c90 <uavcan_register_Value_1_0_deserialize_+0x2e4>)
 80079e2:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80079ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	667b      	str	r3, [r7, #100]	; 0x64
    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80079f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f6:	3308      	adds	r3, #8
 80079f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d308      	bcc.n	8007a10 <uavcan_register_Value_1_0_deserialize_+0x64>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 80079fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a00:	08db      	lsrs	r3, r3, #3
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8007a0e:	e003      	b.n	8007a18 <uavcan_register_Value_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 8007a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	667b      	str	r3, [r7, #100]	; 0x64
    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d149      	bne.n	8007abc <uavcan_register_Value_1_0_deserialize_+0x110>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <uavcan_register_Value_1_0_deserialize_+0x94>
 8007a32:	4b98      	ldr	r3, [pc, #608]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a34:	4a98      	ldr	r2, [pc, #608]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a36:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8007a3a:	4898      	ldr	r0, [pc, #608]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a3c:	f007 fc0c 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d006      	beq.n	8007a58 <uavcan_register_Value_1_0_deserialize_+0xac>
 8007a4a:	4b92      	ldr	r3, [pc, #584]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a4c:	4a92      	ldr	r2, [pc, #584]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a4e:	f240 212d 	movw	r1, #557	; 0x22d
 8007a52:	4892      	ldr	r0, [pc, #584]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a54:	f007 fc00 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7f9 fa66 	bl	8000f30 <nunavutChooseMin>
 8007a64:	4602      	mov	r2, r0
 8007a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d006      	beq.n	8007a84 <uavcan_register_Value_1_0_deserialize_+0xd8>
 8007a76:	4b87      	ldr	r3, [pc, #540]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007a78:	4a87      	ldr	r2, [pc, #540]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007a7a:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007a7e:	4887      	ldr	r0, [pc, #540]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007a80:	f007 fbea 	bl	800f258 <__assert_func>
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8007a84:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8007a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a88:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007a92:	4619      	mov	r1, r3
 8007a94:	f7fb fb42 	bl	800311c <uavcan_primitive_Empty_1_0_deserialize_>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 8007a9e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da03      	bge.n	8007aae <uavcan_register_Value_1_0_deserialize_+0x102>
            {
                return _err16_;
 8007aa6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8007aaa:	f000 bc7f 	b.w	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8007aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ab4:	4413      	add	r3, r2
 8007ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8007ab8:	f000 bc52 	b.w	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d149      	bne.n	8007b5a <uavcan_register_Value_1_0_deserialize_+0x1ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d006      	beq.n	8007ade <uavcan_register_Value_1_0_deserialize_+0x132>
 8007ad0:	4b70      	ldr	r3, [pc, #448]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007ad2:	4a71      	ldr	r2, [pc, #452]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007ad4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8007ad8:	4870      	ldr	r0, [pc, #448]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007ada:	f007 fbbd 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <uavcan_register_Value_1_0_deserialize_+0x14a>
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007aea:	4a6b      	ldr	r2, [pc, #428]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007aec:	f240 213d 	movw	r1, #573	; 0x23d
 8007af0:	486a      	ldr	r0, [pc, #424]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007af2:	f007 fbb1 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af8:	08db      	lsrs	r3, r3, #3
 8007afa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7f9 fa17 	bl	8000f30 <nunavutChooseMin>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <uavcan_register_Value_1_0_deserialize_+0x176>
 8007b14:	4b5f      	ldr	r3, [pc, #380]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b16:	4a60      	ldr	r2, [pc, #384]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b1c:	485f      	ldr	r0, [pc, #380]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b1e:	f007 fb9b 	bl	800f258 <__assert_func>
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8007b22:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8007b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b26:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7fb fc4d 	bl	80033d0 <uavcan_primitive_String_1_0_deserialize_>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8007b3c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da03      	bge.n	8007b4c <uavcan_register_Value_1_0_deserialize_+0x1a0>
            {
                return _err17_;
 8007b44:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8007b48:	f000 bc30 	b.w	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b52:	4413      	add	r3, r2
 8007b54:	667b      	str	r3, [r7, #100]	; 0x64
 8007b56:	f000 bc03 	b.w	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d147      	bne.n	8007bf4 <uavcan_register_Value_1_0_deserialize_+0x248>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d006      	beq.n	8007b7c <uavcan_register_Value_1_0_deserialize_+0x1d0>
 8007b6e:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b70:	4a49      	ldr	r2, [pc, #292]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b72:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8007b76:	4849      	ldr	r0, [pc, #292]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b78:	f007 fb6e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <uavcan_register_Value_1_0_deserialize_+0x1e8>
 8007b86:	4b43      	ldr	r3, [pc, #268]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007b88:	4a43      	ldr	r2, [pc, #268]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007b8a:	f240 214d 	movw	r1, #589	; 0x24d
 8007b8e:	4843      	ldr	r0, [pc, #268]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007b90:	f007 fb62 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	08db      	lsrs	r3, r3, #3
 8007b98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7f9 f9c8 	bl	8000f30 <nunavutChooseMin>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <uavcan_register_Value_1_0_deserialize_+0x214>
 8007bb2:	4b38      	ldr	r3, [pc, #224]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007bb4:	4a38      	ldr	r2, [pc, #224]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007bb6:	f44f 7114 	mov.w	r1, #592	; 0x250
 8007bba:	4838      	ldr	r0, [pc, #224]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007bbc:	f007 fb4c 	bl	800f258 <__assert_func>
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8007bc0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8007bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc4:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007bce:	4619      	mov	r1, r3
 8007bd0:	f7fb fde2 	bl	8003798 <uavcan_primitive_Unstructured_1_0_deserialize_>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8007bda:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da02      	bge.n	8007be8 <uavcan_register_Value_1_0_deserialize_+0x23c>
            {
                return _err18_;
 8007be2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007be6:	e3e1      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8007be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bee:	4413      	add	r3, r2
 8007bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf2:	e3b5      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d150      	bne.n	8007ca0 <uavcan_register_Value_1_0_deserialize_+0x2f4>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d006      	beq.n	8007c16 <uavcan_register_Value_1_0_deserialize_+0x26a>
 8007c08:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007c0a:	4a23      	ldr	r2, [pc, #140]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007c0c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8007c10:	4822      	ldr	r0, [pc, #136]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007c12:	f007 fb21 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <uavcan_register_Value_1_0_deserialize_+0x282>
 8007c20:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007c22:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007c24:	f240 215d 	movw	r1, #605	; 0x25d
 8007c28:	481c      	ldr	r0, [pc, #112]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007c2a:	f007 fb15 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c30:	08db      	lsrs	r3, r3, #3
 8007c32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7f9 f97b 	bl	8000f30 <nunavutChooseMin>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <uavcan_register_Value_1_0_deserialize_+0x2ae>
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <uavcan_register_Value_1_0_deserialize_+0x2e8>)
 8007c4e:	4a12      	ldr	r2, [pc, #72]	; (8007c98 <uavcan_register_Value_1_0_deserialize_+0x2ec>)
 8007c50:	f44f 7118 	mov.w	r1, #608	; 0x260
 8007c54:	4811      	ldr	r0, [pc, #68]	; (8007c9c <uavcan_register_Value_1_0_deserialize_+0x2f0>)
 8007c56:	f007 faff 	bl	800f258 <__assert_func>
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8007c5a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5e:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f7fb ff3b 	bl	8003ae4 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 8007c74:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da02      	bge.n	8007c82 <uavcan_register_Value_1_0_deserialize_+0x2d6>
            {
                return _err19_;
 8007c7c:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8007c80:	e394      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c88:	4413      	add	r3, r2
 8007c8a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c8c:	e368      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
 8007c8e:	bf00      	nop
 8007c90:	08011fe0 	.word	0x08011fe0
 8007c94:	08011eb0 	.word	0x08011eb0
 8007c98:	080143ac 	.word	0x080143ac
 8007c9c:	08012c50 	.word	0x08012c50
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d147      	bne.n	8007d3a <uavcan_register_Value_1_0_deserialize_+0x38e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d006      	beq.n	8007cc2 <uavcan_register_Value_1_0_deserialize_+0x316>
 8007cb4:	4bae      	ldr	r3, [pc, #696]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007cb6:	4aaf      	ldr	r2, [pc, #700]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007cb8:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007cbc:	48ae      	ldr	r0, [pc, #696]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007cbe:	f007 facb 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <uavcan_register_Value_1_0_deserialize_+0x32e>
 8007ccc:	4ba8      	ldr	r3, [pc, #672]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007cce:	4aa9      	ldr	r2, [pc, #676]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007cd0:	f240 216d 	movw	r1, #621	; 0x26d
 8007cd4:	48a8      	ldr	r0, [pc, #672]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007cd6:	f007 fabf 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cdc:	08db      	lsrs	r3, r3, #3
 8007cde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7f9 f925 	bl	8000f30 <nunavutChooseMin>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <uavcan_register_Value_1_0_deserialize_+0x35a>
 8007cf8:	4b9d      	ldr	r3, [pc, #628]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007cfa:	4a9e      	ldr	r2, [pc, #632]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007cfc:	f44f 711c 	mov.w	r1, #624	; 0x270
 8007d00:	489d      	ldr	r0, [pc, #628]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d02:	f007 faa9 	bl	800f258 <__assert_func>
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8007d06:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8007d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0a:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007d14:	4619      	mov	r1, r3
 8007d16:	f7fc fc73 	bl	8004600 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8007d20:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	da02      	bge.n	8007d2e <uavcan_register_Value_1_0_deserialize_+0x382>
            {
                return _err20_;
 8007d28:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8007d2c:	e33e      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d34:	4413      	add	r3, r2
 8007d36:	667b      	str	r3, [r7, #100]	; 0x64
 8007d38:	e312      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d147      	bne.n	8007dd4 <uavcan_register_Value_1_0_deserialize_+0x428>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d006      	beq.n	8007d5c <uavcan_register_Value_1_0_deserialize_+0x3b0>
 8007d4e:	4b88      	ldr	r3, [pc, #544]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d50:	4a88      	ldr	r2, [pc, #544]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d52:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007d56:	4888      	ldr	r0, [pc, #544]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d58:	f007 fa7e 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <uavcan_register_Value_1_0_deserialize_+0x3c8>
 8007d66:	4b82      	ldr	r3, [pc, #520]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d68:	4a82      	ldr	r2, [pc, #520]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d6a:	f240 217d 	movw	r1, #637	; 0x27d
 8007d6e:	4882      	ldr	r0, [pc, #520]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d70:	f007 fa72 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f9 f8d8 	bl	8000f30 <nunavutChooseMin>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <uavcan_register_Value_1_0_deserialize_+0x3f4>
 8007d92:	4b77      	ldr	r3, [pc, #476]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007d94:	4a77      	ldr	r2, [pc, #476]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007d96:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d9a:	4877      	ldr	r0, [pc, #476]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007d9c:	f007 fa5c 	bl	800f258 <__assert_func>
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8007da0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8007da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da4:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007dae:	4619      	mov	r1, r3
 8007db0:	f7fc fa46 	bl	8004240 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8007dba:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da02      	bge.n	8007dc8 <uavcan_register_Value_1_0_deserialize_+0x41c>
            {
                return _err21_;
 8007dc2:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8007dc6:	e2f1      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dce:	4413      	add	r3, r2
 8007dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007dd2:	e2c5      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007dda:	2b06      	cmp	r3, #6
 8007ddc:	d147      	bne.n	8007e6e <uavcan_register_Value_1_0_deserialize_+0x4c2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <uavcan_register_Value_1_0_deserialize_+0x44a>
 8007de8:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007dea:	4a62      	ldr	r2, [pc, #392]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007dec:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8007df0:	4861      	ldr	r0, [pc, #388]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007df2:	f007 fa31 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <uavcan_register_Value_1_0_deserialize_+0x462>
 8007e00:	4b5b      	ldr	r3, [pc, #364]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e02:	4a5c      	ldr	r2, [pc, #368]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e04:	f240 218d 	movw	r1, #653	; 0x28d
 8007e08:	485b      	ldr	r0, [pc, #364]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e0a:	f007 fa25 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7f9 f88b 	bl	8000f30 <nunavutChooseMin>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <uavcan_register_Value_1_0_deserialize_+0x48e>
 8007e2c:	4b50      	ldr	r3, [pc, #320]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e2e:	4a51      	ldr	r2, [pc, #324]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e30:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007e34:	4850      	ldr	r0, [pc, #320]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e36:	f007 fa0f 	bl	800f258 <__assert_func>
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8007e3a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8007e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e3e:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7fc f813 	bl	8003e74 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 8007e54:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da02      	bge.n	8007e62 <uavcan_register_Value_1_0_deserialize_+0x4b6>
            {
                return _err22_;
 8007e5c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007e60:	e2a4      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e68:	4413      	add	r3, r2
 8007e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8007e6c:	e278      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007e74:	2b07      	cmp	r3, #7
 8007e76:	d147      	bne.n	8007f08 <uavcan_register_Value_1_0_deserialize_+0x55c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <uavcan_register_Value_1_0_deserialize_+0x4e4>
 8007e82:	4b3b      	ldr	r3, [pc, #236]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e84:	4a3b      	ldr	r2, [pc, #236]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e86:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8007e8a:	483b      	ldr	r0, [pc, #236]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007e8c:	f007 f9e4 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <uavcan_register_Value_1_0_deserialize_+0x4fc>
 8007e9a:	4b35      	ldr	r3, [pc, #212]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007e9c:	4a35      	ldr	r2, [pc, #212]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007e9e:	f240 219d 	movw	r1, #669	; 0x29d
 8007ea2:	4835      	ldr	r0, [pc, #212]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007ea4:	f007 f9d8 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7f9 f83e 	bl	8000f30 <nunavutChooseMin>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <uavcan_register_Value_1_0_deserialize_+0x528>
 8007ec6:	4b2a      	ldr	r3, [pc, #168]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007eca:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8007ece:	482a      	ldr	r0, [pc, #168]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007ed0:	f007 f9c2 	bl	800f258 <__assert_func>
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8007ed4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8007ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed8:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f7fc fd72 	bl	80049cc <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8007eee:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da02      	bge.n	8007efc <uavcan_register_Value_1_0_deserialize_+0x550>
            {
                return _err23_;
 8007ef6:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8007efa:	e257      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f02:	4413      	add	r3, r2
 8007f04:	667b      	str	r3, [r7, #100]	; 0x64
 8007f06:	e22b      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d14e      	bne.n	8007fb0 <uavcan_register_Value_1_0_deserialize_+0x604>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <uavcan_register_Value_1_0_deserialize_+0x57e>
 8007f1c:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007f20:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8007f24:	4814      	ldr	r0, [pc, #80]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007f26:	f007 f997 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d006      	beq.n	8007f42 <uavcan_register_Value_1_0_deserialize_+0x596>
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007f36:	4a0f      	ldr	r2, [pc, #60]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007f38:	f240 21ad 	movw	r1, #685	; 0x2ad
 8007f3c:	480e      	ldr	r0, [pc, #56]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007f3e:	f007 f98b 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f44:	08db      	lsrs	r3, r3, #3
 8007f46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7f8 fff1 	bl	8000f30 <nunavutChooseMin>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <uavcan_register_Value_1_0_deserialize_+0x5d0>
 8007f60:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <uavcan_register_Value_1_0_deserialize_+0x5c4>)
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <uavcan_register_Value_1_0_deserialize_+0x5c8>)
 8007f64:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8007f68:	4803      	ldr	r0, [pc, #12]	; (8007f78 <uavcan_register_Value_1_0_deserialize_+0x5cc>)
 8007f6a:	f007 f975 	bl	800f258 <__assert_func>
 8007f6e:	bf00      	nop
 8007f70:	08011eb0 	.word	0x08011eb0
 8007f74:	080143ac 	.word	0x080143ac
 8007f78:	08012c50 	.word	0x08012c50
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8007f7c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8007f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f80:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	4413      	add	r3, r2
 8007f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f7fd fac4 	bl	8005518 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8007f96:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da02      	bge.n	8007fa4 <uavcan_register_Value_1_0_deserialize_+0x5f8>
            {
                return _err24_;
 8007f9e:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8007fa2:	e203      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007faa:	4413      	add	r3, r2
 8007fac:	667b      	str	r3, [r7, #100]	; 0x64
 8007fae:	e1d7      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d147      	bne.n	800804a <uavcan_register_Value_1_0_deserialize_+0x69e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <uavcan_register_Value_1_0_deserialize_+0x626>
 8007fc4:	4bae      	ldr	r3, [pc, #696]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8007fc6:	4aaf      	ldr	r2, [pc, #700]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8007fc8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007fcc:	48ae      	ldr	r0, [pc, #696]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8007fce:	f007 f943 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <uavcan_register_Value_1_0_deserialize_+0x63e>
 8007fdc:	4ba8      	ldr	r3, [pc, #672]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8007fde:	4aa9      	ldr	r2, [pc, #676]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8007fe0:	f240 21bd 	movw	r1, #701	; 0x2bd
 8007fe4:	48a8      	ldr	r0, [pc, #672]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8007fe6:	f007 f937 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8007fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7f8 ff9d 	bl	8000f30 <nunavutChooseMin>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8007ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <uavcan_register_Value_1_0_deserialize_+0x66a>
 8008008:	4b9d      	ldr	r3, [pc, #628]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 800800a:	4a9e      	ldr	r2, [pc, #632]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800800c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8008010:	489d      	ldr	r0, [pc, #628]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008012:	f007 f921 	bl	800f258 <__assert_func>
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8008016:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8008018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800801a:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	4413      	add	r3, r2
 8008020:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008024:	4619      	mov	r1, r3
 8008026:	f7fd f897 	bl	8005158 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 8008030:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8008034:	2b00      	cmp	r3, #0
 8008036:	da02      	bge.n	800803e <uavcan_register_Value_1_0_deserialize_+0x692>
            {
                return _err25_;
 8008038:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800803c:	e1b6      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008044:	4413      	add	r3, r2
 8008046:	667b      	str	r3, [r7, #100]	; 0x64
 8008048:	e18a      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008050:	2b0a      	cmp	r3, #10
 8008052:	d147      	bne.n	80080e4 <uavcan_register_Value_1_0_deserialize_+0x738>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <uavcan_register_Value_1_0_deserialize_+0x6c0>
 800805e:	4b88      	ldr	r3, [pc, #544]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008060:	4a88      	ldr	r2, [pc, #544]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008062:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8008066:	4888      	ldr	r0, [pc, #544]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008068:	f007 f8f6 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800806c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d006      	beq.n	8008084 <uavcan_register_Value_1_0_deserialize_+0x6d8>
 8008076:	4b82      	ldr	r3, [pc, #520]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008078:	4a82      	ldr	r2, [pc, #520]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 800807a:	f240 21cd 	movw	r1, #717	; 0x2cd
 800807e:	4882      	ldr	r0, [pc, #520]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008080:	f007 f8ea 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800808a:	4618      	mov	r0, r3
 800808c:	f7f8 ff50 	bl	8000f30 <nunavutChooseMin>
 8008090:	4602      	mov	r2, r0
 8008092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <uavcan_register_Value_1_0_deserialize_+0x704>
 80080a2:	4b77      	ldr	r3, [pc, #476]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80080a4:	4a77      	ldr	r2, [pc, #476]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80080a6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80080aa:	4877      	ldr	r0, [pc, #476]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80080ac:	f007 f8d4 	bl	800f258 <__assert_func>
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80080b0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 80080b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080b4:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	f107 0220 	add.w	r2, r7, #32
 80080be:	4619      	mov	r1, r3
 80080c0:	f7fc fe64 	bl	8004d8c <uavcan_primitive_array_Natural16_1_0_deserialize_>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 80080ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da02      	bge.n	80080d8 <uavcan_register_Value_1_0_deserialize_+0x72c>
            {
                return _err26_;
 80080d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080d6:	e169      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080de:	4413      	add	r3, r2
 80080e0:	667b      	str	r3, [r7, #100]	; 0x64
 80080e2:	e13d      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d147      	bne.n	800817e <uavcan_register_Value_1_0_deserialize_+0x7d2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80080ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <uavcan_register_Value_1_0_deserialize_+0x75a>
 80080f8:	4b61      	ldr	r3, [pc, #388]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80080fa:	4a62      	ldr	r2, [pc, #392]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80080fc:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8008100:	4861      	ldr	r0, [pc, #388]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008102:	f007 f8a9 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	2b00      	cmp	r3, #0
 800810e:	d006      	beq.n	800811e <uavcan_register_Value_1_0_deserialize_+0x772>
 8008110:	4b5b      	ldr	r3, [pc, #364]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008112:	4a5c      	ldr	r2, [pc, #368]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008114:	f240 21dd 	movw	r1, #733	; 0x2dd
 8008118:	485b      	ldr	r0, [pc, #364]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800811a:	f007 f89d 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800811e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008120:	08db      	lsrs	r3, r3, #3
 8008122:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008124:	4618      	mov	r0, r3
 8008126:	f7f8 ff03 	bl	8000f30 <nunavutChooseMin>
 800812a:	4602      	mov	r2, r0
 800812c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	2b00      	cmp	r3, #0
 800813a:	d006      	beq.n	800814a <uavcan_register_Value_1_0_deserialize_+0x79e>
 800813c:	4b50      	ldr	r3, [pc, #320]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 800813e:	4a51      	ldr	r2, [pc, #324]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008140:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8008144:	4850      	ldr	r0, [pc, #320]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008146:	f007 f887 	bl	800f258 <__assert_func>
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800814a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 800814c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814e:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	4413      	add	r3, r2
 8008154:	f107 021c 	add.w	r2, r7, #28
 8008158:	4619      	mov	r1, r3
 800815a:	f7fd fbc1 	bl	80058e0 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 8008164:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8008168:	2b00      	cmp	r3, #0
 800816a:	da02      	bge.n	8008172 <uavcan_register_Value_1_0_deserialize_+0x7c6>
            {
                return _err27_;
 800816c:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8008170:	e11c      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008178:	4413      	add	r3, r2
 800817a:	667b      	str	r3, [r7, #100]	; 0x64
 800817c:	e0f0      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008184:	2b0c      	cmp	r3, #12
 8008186:	d147      	bne.n	8008218 <uavcan_register_Value_1_0_deserialize_+0x86c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <uavcan_register_Value_1_0_deserialize_+0x7f4>
 8008192:	4b3b      	ldr	r3, [pc, #236]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008194:	4a3b      	ldr	r2, [pc, #236]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008196:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800819a:	483b      	ldr	r0, [pc, #236]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800819c:	f007 f85c 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d006      	beq.n	80081b8 <uavcan_register_Value_1_0_deserialize_+0x80c>
 80081aa:	4b35      	ldr	r3, [pc, #212]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80081ac:	4a35      	ldr	r2, [pc, #212]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80081ae:	f240 21ed 	movw	r1, #749	; 0x2ed
 80081b2:	4835      	ldr	r0, [pc, #212]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80081b4:	f007 f850 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80081b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ba:	08db      	lsrs	r3, r3, #3
 80081bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f8 feb6 	bl	8000f30 <nunavutChooseMin>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c8:	1a9b      	subs	r3, r3, r2
 80081ca:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80081cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d006      	beq.n	80081e4 <uavcan_register_Value_1_0_deserialize_+0x838>
 80081d6:	4b2a      	ldr	r3, [pc, #168]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 80081d8:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 80081da:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80081de:	482a      	ldr	r0, [pc, #168]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 80081e0:	f007 f83a 	bl	800f258 <__assert_func>
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80081e4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80081e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e8:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	f107 0218 	add.w	r2, r7, #24
 80081f2:	4619      	mov	r1, r3
 80081f4:	f7fa fec6 	bl	8002f84 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 80081fe:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8008202:	2b00      	cmp	r3, #0
 8008204:	da02      	bge.n	800820c <uavcan_register_Value_1_0_deserialize_+0x860>
            {
                return _err28_;
 8008206:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800820a:	e0cf      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008212:	4413      	add	r3, r2
 8008214:	667b      	str	r3, [r7, #100]	; 0x64
 8008216:	e0a3      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800821e:	2b0d      	cmp	r3, #13
 8008220:	d14e      	bne.n	80082c0 <uavcan_register_Value_1_0_deserialize_+0x914>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	2b00      	cmp	r3, #0
 800822a:	d006      	beq.n	800823a <uavcan_register_Value_1_0_deserialize_+0x88e>
 800822c:	4b14      	ldr	r3, [pc, #80]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 800822e:	4a15      	ldr	r2, [pc, #84]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008230:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8008234:	4814      	ldr	r0, [pc, #80]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 8008236:	f007 f80f 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800823a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <uavcan_register_Value_1_0_deserialize_+0x8a6>
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008246:	4a0f      	ldr	r2, [pc, #60]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008248:	f240 21fd 	movw	r1, #765	; 0x2fd
 800824c:	480e      	ldr	r0, [pc, #56]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800824e:	f007 f803 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008254:	08db      	lsrs	r3, r3, #3
 8008256:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008258:	4618      	mov	r0, r3
 800825a:	f7f8 fe69 	bl	8000f30 <nunavutChooseMin>
 800825e:	4602      	mov	r2, r0
 8008260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00d      	beq.n	800828c <uavcan_register_Value_1_0_deserialize_+0x8e0>
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <uavcan_register_Value_1_0_deserialize_+0x8d4>)
 8008272:	4a04      	ldr	r2, [pc, #16]	; (8008284 <uavcan_register_Value_1_0_deserialize_+0x8d8>)
 8008274:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008278:	4803      	ldr	r0, [pc, #12]	; (8008288 <uavcan_register_Value_1_0_deserialize_+0x8dc>)
 800827a:	f006 ffed 	bl	800f258 <__assert_func>
 800827e:	bf00      	nop
 8008280:	08011eb0 	.word	0x08011eb0
 8008284:	080143ac 	.word	0x080143ac
 8008288:	08012c50 	.word	0x08012c50
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 800828c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 800828e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008290:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4413      	add	r3, r2
 8008296:	f107 0214 	add.w	r2, r7, #20
 800829a:	4619      	mov	r1, r3
 800829c:	f7fd ff16 	bl	80060cc <uavcan_primitive_array_Real32_1_0_deserialize_>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 80082a6:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da02      	bge.n	80082b4 <uavcan_register_Value_1_0_deserialize_+0x908>
            {
                return _err29_;
 80082ae:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80082b2:	e07b      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082ba:	4413      	add	r3, r2
 80082bc:	667b      	str	r3, [r7, #100]	; 0x64
 80082be:	e04f      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80082c6:	2b0e      	cmp	r3, #14
 80082c8:	d147      	bne.n	800835a <uavcan_register_Value_1_0_deserialize_+0x9ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80082ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <uavcan_register_Value_1_0_deserialize_+0x936>
 80082d4:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 80082d6:	4a38      	ldr	r2, [pc, #224]	; (80083b8 <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80082d8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80082dc:	4837      	ldr	r0, [pc, #220]	; (80083bc <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80082de:	f006 ffbb 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80082e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <uavcan_register_Value_1_0_deserialize_+0x94e>
 80082ec:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 80082ee:	4a32      	ldr	r2, [pc, #200]	; (80083b8 <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80082f0:	f240 310d 	movw	r1, #781	; 0x30d
 80082f4:	4831      	ldr	r0, [pc, #196]	; (80083bc <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80082f6:	f006 ffaf 	bl	800f258 <__assert_func>
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80082fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fc:	08db      	lsrs	r3, r3, #3
 80082fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008300:	4618      	mov	r0, r3
 8008302:	f7f8 fe15 	bl	8000f30 <nunavutChooseMin>
 8008306:	4602      	mov	r2, r0
 8008308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800830e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <uavcan_register_Value_1_0_deserialize_+0x97a>
 8008318:	4b26      	ldr	r3, [pc, #152]	; (80083b4 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 800831a:	4a27      	ldr	r2, [pc, #156]	; (80083b8 <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 800831c:	f44f 7144 	mov.w	r1, #784	; 0x310
 8008320:	4826      	ldr	r0, [pc, #152]	; (80083bc <uavcan_register_Value_1_0_deserialize_+0xa10>)
 8008322:	f006 ff99 	bl	800f258 <__assert_func>
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8008326:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8008328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832a:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	f107 0210 	add.w	r2, r7, #16
 8008334:	4619      	mov	r1, r3
 8008336:	f7fd fce9 	bl	8005d0c <uavcan_primitive_array_Real16_1_0_deserialize_>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8008340:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8008344:	2b00      	cmp	r3, #0
 8008346:	da02      	bge.n	800834e <uavcan_register_Value_1_0_deserialize_+0x9a2>
            {
                return _err30_;
 8008348:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800834c:	e02e      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008354:	4413      	add	r3, r2
 8008356:	667b      	str	r3, [r7, #100]	; 0x64
 8008358:	e002      	b.n	8008360 <uavcan_register_Value_1_0_deserialize_+0x9b4>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 800835a:	f06f 030a 	mvn.w	r3, #10
 800835e:	e025      	b.n	80083ac <uavcan_register_Value_1_0_deserialize_+0xa00>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008362:	3307      	adds	r3, #7
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800836a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <uavcan_register_Value_1_0_deserialize_+0x9d6>
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <uavcan_register_Value_1_0_deserialize_+0xa08>)
 8008376:	4a10      	ldr	r2, [pc, #64]	; (80083b8 <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 8008378:	f240 311f 	movw	r1, #799	; 0x31f
 800837c:	480f      	ldr	r0, [pc, #60]	; (80083bc <uavcan_register_Value_1_0_deserialize_+0xa10>)
 800837e:	f006 ff6b 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8008382:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008384:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008386:	f7f8 fdd3 	bl	8000f30 <nunavutChooseMin>
 800838a:	4603      	mov	r3, r0
 800838c:	08da      	lsrs	r2, r3, #3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008398:	429a      	cmp	r2, r3
 800839a:	d206      	bcs.n	80083aa <uavcan_register_Value_1_0_deserialize_+0x9fe>
 800839c:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <uavcan_register_Value_1_0_deserialize_+0xa14>)
 800839e:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <uavcan_register_Value_1_0_deserialize_+0xa0c>)
 80083a0:	f240 3121 	movw	r1, #801	; 0x321
 80083a4:	4805      	ldr	r0, [pc, #20]	; (80083bc <uavcan_register_Value_1_0_deserialize_+0xa10>)
 80083a6:	f006 ff57 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3768      	adds	r7, #104	; 0x68
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	08011eb0 	.word	0x08011eb0
 80083b8:	080143ac 	.word	0x080143ac
 80083bc:	08012c50 	.word	0x08012c50
 80083c0:	08011fe4 	.word	0x08011fe4

080083c4 <uavcan_register_Value_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_Value_1_0_initialize_(uavcan_register_Value_1_0* const out_obj)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <uavcan_register_Value_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_Value_1_0_deserialize_(out_obj, &buf, &size_bytes);
 80083da:	f107 0210 	add.w	r2, r7, #16
 80083de:	f107 030f 	add.w	r3, r7, #15
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff fae1 	bl	80079ac <uavcan_register_Value_1_0_deserialize_>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80083ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da06      	bge.n	8008404 <uavcan_register_Value_1_0_initialize_+0x40>
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <uavcan_register_Value_1_0_initialize_+0x48>)
 80083f8:	4a05      	ldr	r2, [pc, #20]	; (8008410 <uavcan_register_Value_1_0_initialize_+0x4c>)
 80083fa:	f44f 714c 	mov.w	r1, #816	; 0x330
 80083fe:	4805      	ldr	r0, [pc, #20]	; (8008414 <uavcan_register_Value_1_0_initialize_+0x50>)
 8008400:	f006 ff2a 	bl	800f258 <__assert_func>
        (void) err;
    }
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	08012138 	.word	0x08012138
 8008410:	08014764 	.word	0x08014764
 8008414:	08012c50 	.word	0x08012c50

08008418 <uavcan_register_Value_1_0_select_empty_>:
/// Mark option "empty" active without initializing it. Does nothing if @param obj is NULL.
static inline void uavcan_register_Value_1_0_select_empty_(uavcan_register_Value_1_0* const obj)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
    if (obj != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <uavcan_register_Value_1_0_select_empty_+0x16>
    {
        obj->_tag_ = 0;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <uavcan_register_Value_1_0_select_natural16_>:
    return ((obj != NULL) && (obj->_tag_ == 9));
}

/// Mark option "natural16" active without initializing it. Does nothing if @param obj is NULL.
static inline void uavcan_register_Value_1_0_select_natural16_(uavcan_register_Value_1_0* const obj)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
    if (obj != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <uavcan_register_Value_1_0_select_natural16_+0x16>
    {
        obj->_tag_ = 10;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	220a      	movs	r2, #10
 800844c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800845c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008460:	b08c      	sub	sp, #48	; 0x30
 8008462:	af04      	add	r7, sp, #16
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x20>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x20>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800847c:	f06f 0301 	mvn.w	r3, #1
 8008480:	e099      	b.n	80085b6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	2b37      	cmp	r3, #55	; 0x37
 800848e:	d802      	bhi.n	8008496 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8008490:	f06f 0302 	mvn.w	r3, #2
 8008494:	e08f      	b.n	80085b6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x54>
 80084a4:	4b46      	ldr	r3, [pc, #280]	; (80085c0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 80084a6:	4a47      	ldr	r2, [pc, #284]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 80084a8:	217c      	movs	r1, #124	; 0x7c
 80084aa:	4847      	ldr	r0, [pc, #284]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 80084ac:	f006 fed4 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2200      	movs	r2, #0
 80084b4:	469a      	mov	sl, r3
 80084b6:	4693      	mov	fp, r2
 80084b8:	f11a 0438 	adds.w	r4, sl, #56	; 0x38
 80084bc:	f14b 0500 	adc.w	r5, fp, #0
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	2200      	movs	r2, #0
 80084c6:	4698      	mov	r8, r3
 80084c8:	4691      	mov	r9, r2
 80084ca:	45a0      	cmp	r8, r4
 80084cc:	eb79 0305 	sbcs.w	r3, r9, r5
 80084d0:	d205      	bcs.n	80084de <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x82>
 80084d2:	4b3e      	ldr	r3, [pc, #248]	; (80085cc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x170>)
 80084d4:	4a3b      	ldr	r2, [pc, #236]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 80084d6:	217d      	movs	r1, #125	; 0x7d
 80084d8:	483b      	ldr	r0, [pc, #236]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 80084da:	f006 febd 	bl	800f258 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, obj->microsecond, 56U);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	2138      	movs	r1, #56	; 0x38
 80084e6:	9102      	str	r1, [sp, #8]
 80084e8:	e9cd 2300 	strd	r2, r3, [sp]
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f7f8 fecf 	bl	8001294 <nunavutSetUxx>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
        if (_err0_ < 0)
 80084fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	da02      	bge.n	8008508 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        {
            return _err0_;
 8008502:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008506:	e056      	b.n	80085b6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
        }
        offset_bits += 56U;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	3338      	adds	r3, #56	; 0x38
 800850c:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	2b00      	cmp	r3, #0
 8008516:	d035      	beq.n	8008584 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x128>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f1c3 0308 	rsb	r3, r3, #8
 8008526:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8008528:	7dbb      	ldrb	r3, [r7, #22]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d105      	bne.n	800853a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xde>
 800852e:	4b28      	ldr	r3, [pc, #160]	; (80085d0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x174>)
 8008530:	4a24      	ldr	r2, [pc, #144]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 8008532:	2188      	movs	r1, #136	; 0x88
 8008534:	4824      	ldr	r0, [pc, #144]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008536:	f006 fe8f 	bl	800f258 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800853a:	7dbb      	ldrb	r3, [r7, #22]
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	f04f 0300 	mov.w	r3, #0
 8008546:	e9cd 2300 	strd	r2, r3, [sp]
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	69b9      	ldr	r1, [r7, #24]
 800854e:	68b8      	ldr	r0, [r7, #8]
 8008550:	f7f8 fea0 	bl	8001294 <nunavutSetUxx>
 8008554:	4603      	mov	r3, r0
 8008556:	757b      	strb	r3, [r7, #21]
        if (_err1_ < 0)
 8008558:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da02      	bge.n	8008566 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x10a>
        {
            return _err1_;
 8008560:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008564:	e027      	b.n	80085b6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x15a>
        }
        offset_bits += _pad0_;
 8008566:	7dbb      	ldrb	r3, [r7, #22]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x128>
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 800857a:	4a12      	ldr	r2, [pc, #72]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 800857c:	218f      	movs	r1, #143	; 0x8f
 800857e:	4812      	ldr	r0, [pc, #72]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008580:	f006 fe6a 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b38      	cmp	r3, #56	; 0x38
 8008588:	d005      	beq.n	8008596 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x13a>
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x178>)
 800858c:	4a0d      	ldr	r2, [pc, #52]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 800858e:	2192      	movs	r1, #146	; 0x92
 8008590:	480d      	ldr	r0, [pc, #52]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 8008592:	f006 fe61 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x150>
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x164>)
 80085a2:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x168>)
 80085a4:	2193      	movs	r1, #147	; 0x93
 80085a6:	4808      	ldr	r0, [pc, #32]	; (80085c8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x16c>)
 80085a8:	f006 fe56 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	08da      	lsrs	r2, r3, #3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085c0:	08011eb0 	.word	0x08011eb0
 80085c4:	080147bc 	.word	0x080147bc
 80085c8:	080133a0 	.word	0x080133a0
 80085cc:	08013428 	.word	0x08013428
 80085d0:	08011fa8 	.word	0x08011fa8
 80085d4:	080123d8 	.word	0x080123d8

080085d8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
    uavcan_time_SynchronizedTimestamp_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x26>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x26>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x2c>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80085fe:	f06f 0301 	mvn.w	r3, #1
 8008602:	e049      	b.n	8008698 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xc0>
    }
    if (buffer == NULL)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xc8>)
 800860c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]
    // truncated uint56 microsecond
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x5c>
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xcc>)
 800862a:	4a1f      	ldr	r2, [pc, #124]	; (80086a8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 800862c:	21ba      	movs	r1, #186	; 0xba
 800862e:	481f      	ldr	r0, [pc, #124]	; (80086ac <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 8008630:	f006 fe12 	bl	800f258 <__assert_func>
    out_obj->microsecond = nunavutGetU64(&buffer[0], capacity_bytes, offset_bits, 56);
 8008634:	2338      	movs	r3, #56	; 0x38
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	68b8      	ldr	r0, [r7, #8]
 800863c:	f7f8 ff96 	bl	800156c <nunavutGetU64>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	68f9      	ldr	r1, [r7, #12]
 8008646:	e9c1 2300 	strd	r2, r3, [r1]
    offset_bits += 56U;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	3338      	adds	r3, #56	; 0x38
 800864e:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3307      	adds	r3, #7
 8008654:	f023 0307 	bic.w	r3, r3, #7
 8008658:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0x98>
 8008664:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xcc>)
 8008666:	4a10      	ldr	r2, [pc, #64]	; (80086a8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 8008668:	21be      	movs	r1, #190	; 0xbe
 800866a:	4810      	ldr	r0, [pc, #64]	; (80086ac <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 800866c:	f006 fdf4 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8008670:	69b9      	ldr	r1, [r7, #24]
 8008672:	6978      	ldr	r0, [r7, #20]
 8008674:	f7f8 fc5c 	bl	8000f30 <nunavutChooseMin>
 8008678:	4603      	mov	r3, r0
 800867a:	08da      	lsrs	r2, r3, #3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	429a      	cmp	r2, r3
 8008688:	d205      	bcs.n	8008696 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xbe>
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd8>)
 800868c:	4a06      	ldr	r2, [pc, #24]	; (80086a8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd0>)
 800868e:	21c0      	movs	r1, #192	; 0xc0
 8008690:	4806      	ldr	r0, [pc, #24]	; (80086ac <uavcan_time_SynchronizedTimestamp_1_0_deserialize_+0xd4>)
 8008692:	f006 fde1 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	08011fe0 	.word	0x08011fe0
 80086a4:	08011eb0 	.word	0x08011eb0
 80086a8:	08014730 	.word	0x08014730
 80086ac:	080133a0 	.word	0x080133a0
 80086b0:	08011fe4 	.word	0x08011fe4

080086b4 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80086da:	f06f 0301 	mvn.w	r3, #1
 80086de:	e0bf      	b.n	8008860 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
    }
    if (buffer == NULL)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80086e6:	4b60      	ldr	r3, [pc, #384]	; (8008868 <uavcan_register_Access_Request_1_0_deserialize_+0x1b4>)
 80086e8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <uavcan_register_Access_Request_1_0_deserialize_+0x5c>
 8008704:	4b59      	ldr	r3, [pc, #356]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 8008706:	4a5a      	ldr	r2, [pc, #360]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008708:	21ec      	movs	r1, #236	; 0xec
 800870a:	485a      	ldr	r0, [pc, #360]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 800870c:	f006 fda4 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <uavcan_register_Access_Request_1_0_deserialize_+0x72>
 800871a:	4b54      	ldr	r3, [pc, #336]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 800871c:	4a54      	ldr	r2, [pc, #336]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 800871e:	21ed      	movs	r1, #237	; 0xed
 8008720:	4854      	ldr	r0, [pc, #336]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008722:	f006 fd99 	bl	800f258 <__assert_func>
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800872c:	4618      	mov	r0, r3
 800872e:	f7f8 fbff 	bl	8000f30 <nunavutChooseMin>
 8008732:	4602      	mov	r2, r0
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <uavcan_register_Access_Request_1_0_deserialize_+0x9c>
 8008744:	4b49      	ldr	r3, [pc, #292]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 8008746:	4a4a      	ldr	r2, [pc, #296]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008748:	21f0      	movs	r1, #240	; 0xf0
 800874a:	484a      	ldr	r0, [pc, #296]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 800874c:	f006 fd84 	bl	800f258 <__assert_func>
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8008750:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	f107 0214 	add.w	r2, r7, #20
 800875e:	4619      	mov	r1, r3
 8008760:	f7f9 fbbe 	bl	8001ee0 <uavcan_register_Name_1_0_deserialize_>
 8008764:	4603      	mov	r3, r0
 8008766:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8008768:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800876c:	2b00      	cmp	r3, #0
 800876e:	da02      	bge.n	8008776 <uavcan_register_Access_Request_1_0_deserialize_+0xc2>
        {
            return _err4_;
 8008770:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008774:	e074      	b.n	8008860 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	3307      	adds	r3, #7
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <uavcan_register_Access_Request_1_0_deserialize_+0xec>
 8008794:	4b35      	ldr	r3, [pc, #212]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 8008796:	4a36      	ldr	r2, [pc, #216]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008798:	21fb      	movs	r1, #251	; 0xfb
 800879a:	4836      	ldr	r0, [pc, #216]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 800879c:	f006 fd5c 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <uavcan_register_Access_Request_1_0_deserialize_+0x102>
 80087aa:	4b30      	ldr	r3, [pc, #192]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80087ac:	4a30      	ldr	r2, [pc, #192]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 80087ae:	21fc      	movs	r1, #252	; 0xfc
 80087b0:	4830      	ldr	r0, [pc, #192]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 80087b2:	f006 fd51 	bl	800f258 <__assert_func>
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	08db      	lsrs	r3, r3, #3
 80087ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f8 fbb7 	bl	8000f30 <nunavutChooseMin>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <uavcan_register_Access_Request_1_0_deserialize_+0x12c>
 80087d4:	4b25      	ldr	r3, [pc, #148]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 80087d6:	4a26      	ldr	r2, [pc, #152]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 80087d8:	21ff      	movs	r1, #255	; 0xff
 80087da:	4826      	ldr	r0, [pc, #152]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 80087dc:	f006 fd3c 	bl	800f258 <__assert_func>
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	f107 0210 	add.w	r2, r7, #16
 80087f2:	4619      	mov	r1, r3
 80087f4:	f7ff f8da 	bl	80079ac <uavcan_register_Value_1_0_deserialize_>
 80087f8:	4603      	mov	r3, r0
 80087fa:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 80087fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008800:	2b00      	cmp	r3, #0
 8008802:	da02      	bge.n	800880a <uavcan_register_Access_Request_1_0_deserialize_+0x156>
        {
            return _err5_;
 8008804:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008808:	e02a      	b.n	8008860 <uavcan_register_Access_Request_1_0_deserialize_+0x1ac>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	3307      	adds	r3, #7
 8008818:	f023 0307 	bic.w	r3, r3, #7
 800881c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	2b00      	cmp	r3, #0
 8008826:	d006      	beq.n	8008836 <uavcan_register_Access_Request_1_0_deserialize_+0x182>
 8008828:	4b10      	ldr	r3, [pc, #64]	; (800886c <uavcan_register_Access_Request_1_0_deserialize_+0x1b8>)
 800882a:	4a11      	ldr	r2, [pc, #68]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 800882c:	f240 1109 	movw	r1, #265	; 0x109
 8008830:	4810      	ldr	r0, [pc, #64]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 8008832:	f006 fd11 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8008836:	6a39      	ldr	r1, [r7, #32]
 8008838:	69f8      	ldr	r0, [r7, #28]
 800883a:	f7f8 fb79 	bl	8000f30 <nunavutChooseMin>
 800883e:	4603      	mov	r3, r0
 8008840:	08da      	lsrs	r2, r3, #3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	d206      	bcs.n	800885e <uavcan_register_Access_Request_1_0_deserialize_+0x1aa>
 8008850:	4b09      	ldr	r3, [pc, #36]	; (8008878 <uavcan_register_Access_Request_1_0_deserialize_+0x1c4>)
 8008852:	4a07      	ldr	r2, [pc, #28]	; (8008870 <uavcan_register_Access_Request_1_0_deserialize_+0x1bc>)
 8008854:	f240 110b 	movw	r1, #267	; 0x10b
 8008858:	4806      	ldr	r0, [pc, #24]	; (8008874 <uavcan_register_Access_Request_1_0_deserialize_+0x1c0>)
 800885a:	f006 fcfd 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	; 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	08011fe0 	.word	0x08011fe0
 800886c:	08011eb0 	.word	0x08011eb0
 8008870:	0801437c 	.word	0x0801437c
 8008874:	08013458 	.word	0x08013458
 8008878:	08011fe4 	.word	0x08011fe4

0800887c <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800887c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008880:	b0a6      	sub	sp, #152	; 0x98
 8008882:	af04      	add	r7, sp, #16
 8008884:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008886:	66b9      	str	r1, [r7, #104]	; 0x68
 8008888:	667a      	str	r2, [r7, #100]	; 0x64
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800888a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <uavcan_register_Access_Response_1_0_serialize_+0x20>
 8008890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <uavcan_register_Access_Response_1_0_serialize_+0x20>
 8008896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <uavcan_register_Access_Response_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800889c:	f06f 0301 	mvn.w	r3, #1
 80088a0:	e2f8      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80088a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 80088aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088ae:	00da      	lsls	r2, r3, #3
 80088b0:	f640 0357 	movw	r3, #2135	; 0x857
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d802      	bhi.n	80088be <uavcan_register_Access_Response_1_0_serialize_+0x42>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80088b8:	f06f 0302 	mvn.w	r3, #2
 80088bc:	e2ea      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80088c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <uavcan_register_Access_Response_1_0_serialize_+0x62>
 80088d0:	4bc2      	ldr	r3, [pc, #776]	; (8008bdc <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80088d2:	4ac3      	ldr	r2, [pc, #780]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80088d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80088d8:	48c2      	ldr	r0, [pc, #776]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80088da:	f006 fcbd 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80088de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <uavcan_register_Access_Response_1_0_serialize_+0x7c>
 80088ea:	4bbc      	ldr	r3, [pc, #752]	; (8008bdc <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80088ec:	4abc      	ldr	r2, [pc, #752]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80088ee:	f240 1161 	movw	r1, #353	; 0x161
 80088f2:	48bc      	ldr	r0, [pc, #752]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80088f4:	f006 fcb0 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
 80088f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088fc:	2200      	movs	r2, #0
 80088fe:	4698      	mov	r8, r3
 8008900:	4691      	mov	r9, r2
 8008902:	f118 0438 	adds.w	r4, r8, #56	; 0x38
 8008906:	f149 0500 	adc.w	r5, r9, #0
 800890a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	2200      	movs	r2, #0
 8008912:	469a      	mov	sl, r3
 8008914:	4693      	mov	fp, r2
 8008916:	45a2      	cmp	sl, r4
 8008918:	eb7b 0305 	sbcs.w	r3, fp, r5
 800891c:	d206      	bcs.n	800892c <uavcan_register_Access_Response_1_0_serialize_+0xb0>
 800891e:	4bb2      	ldr	r3, [pc, #712]	; (8008be8 <uavcan_register_Access_Response_1_0_serialize_+0x36c>)
 8008920:	4aaf      	ldr	r2, [pc, #700]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008922:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008926:	48af      	ldr	r0, [pc, #700]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008928:	f006 fc96 	bl	800f258 <__assert_func>
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 800892c:	2307      	movs	r3, #7
 800892e:	677b      	str	r3, [r7, #116]	; 0x74
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	2b00      	cmp	r3, #0
 800893a:	d006      	beq.n	800894a <uavcan_register_Access_Response_1_0_serialize_+0xce>
 800893c:	4ba7      	ldr	r3, [pc, #668]	; (8008bdc <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 800893e:	4aa8      	ldr	r2, [pc, #672]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008940:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8008944:	48a7      	ldr	r0, [pc, #668]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008946:	f006 fc87 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
 800894a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800894e:	08da      	lsrs	r2, r3, #3
 8008950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008952:	441a      	add	r2, r3
 8008954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008958:	4293      	cmp	r3, r2
 800895a:	d206      	bcs.n	800896a <uavcan_register_Access_Response_1_0_serialize_+0xee>
 800895c:	4ba3      	ldr	r3, [pc, #652]	; (8008bec <uavcan_register_Access_Response_1_0_serialize_+0x370>)
 800895e:	4aa0      	ldr	r2, [pc, #640]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008960:	f240 1165 	movw	r1, #357	; 0x165
 8008964:	489f      	ldr	r0, [pc, #636]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008966:	f006 fc77 	bl	800f258 <__assert_func>
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800896a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 800896c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008970:	08da      	lsrs	r2, r3, #3
 8008972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008974:	1899      	adds	r1, r3, r2
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8008976:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800897a:	461a      	mov	r2, r3
 800897c:	f7ff fd6e 	bl	800845c <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if (_err6_ < 0)
 8008986:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800898a:	2b00      	cmp	r3, #0
 800898c:	da02      	bge.n	8008994 <uavcan_register_Access_Response_1_0_serialize_+0x118>
        {
            return _err6_;
 800898e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8008992:	e27f      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
 8008994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	2b38      	cmp	r3, #56	; 0x38
 800899a:	d006      	beq.n	80089aa <uavcan_register_Access_Response_1_0_serialize_+0x12e>
 800899c:	4b94      	ldr	r3, [pc, #592]	; (8008bf0 <uavcan_register_Access_Response_1_0_serialize_+0x374>)
 800899e:	4a90      	ldr	r2, [pc, #576]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80089a0:	f240 116d 	movw	r1, #365	; 0x16d
 80089a4:	488f      	ldr	r0, [pc, #572]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80089a6:	f006 fc57 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80089aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ac:	00da      	lsls	r2, r3, #3
 80089ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089b2:	4413      	add	r3, r2
 80089b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80089b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089bc:	00da      	lsls	r2, r3, #3
 80089be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d906      	bls.n	80089d4 <uavcan_register_Access_Response_1_0_serialize_+0x158>
 80089c6:	4b8b      	ldr	r3, [pc, #556]	; (8008bf4 <uavcan_register_Access_Response_1_0_serialize_+0x378>)
 80089c8:	4a85      	ldr	r2, [pc, #532]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80089ca:	f240 116f 	movw	r1, #367	; 0x16f
 80089ce:	4885      	ldr	r0, [pc, #532]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80089d0:	f006 fc42 	bl	800f258 <__assert_func>
    }
    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80089d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <uavcan_register_Access_Response_1_0_serialize_+0x172>
 80089e0:	4b7e      	ldr	r3, [pc, #504]	; (8008bdc <uavcan_register_Access_Response_1_0_serialize_+0x360>)
 80089e2:	4a7f      	ldr	r2, [pc, #508]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 80089e4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80089e8:	487e      	ldr	r0, [pc, #504]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 80089ea:	f006 fc35 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
 80089ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089f2:	2200      	movs	r2, #0
 80089f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80089f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80089f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80089fc:	460b      	mov	r3, r1
 80089fe:	3301      	adds	r3, #1
 8008a00:	653b      	str	r3, [r7, #80]	; 0x50
 8008a02:	4613      	mov	r3, r2
 8008a04:	f143 0300 	adc.w	r3, r3, #0
 8008a08:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	2200      	movs	r2, #0
 8008a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a16:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a20:	4602      	mov	r2, r0
 8008a22:	4293      	cmp	r3, r2
 8008a24:	462b      	mov	r3, r5
 8008a26:	460a      	mov	r2, r1
 8008a28:	4193      	sbcs	r3, r2
 8008a2a:	d206      	bcs.n	8008a3a <uavcan_register_Access_Response_1_0_serialize_+0x1be>
 8008a2c:	4b72      	ldr	r3, [pc, #456]	; (8008bf8 <uavcan_register_Access_Response_1_0_serialize_+0x37c>)
 8008a2e:	4a6c      	ldr	r2, [pc, #432]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008a30:	f240 1173 	movw	r1, #371	; 0x173
 8008a34:	486b      	ldr	r0, [pc, #428]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008a36:	f006 fc0f 	bl	800f258 <__assert_func>
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8008a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3c:	7a1b      	ldrb	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <uavcan_register_Access_Response_1_0_serialize_+0x1ca>
 8008a42:	2101      	movs	r1, #1
 8008a44:	e000      	b.n	8008a48 <uavcan_register_Access_Response_1_0_serialize_+0x1cc>
 8008a46:	2100      	movs	r1, #0
 8008a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a4c:	08da      	lsrs	r2, r3, #3
 8008a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a50:	441a      	add	r2, r3
 8008a52:	460b      	mov	r3, r1
 8008a54:	7013      	strb	r3, [r2, #0]
        offset_bits += 1U;
 8008a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
 8008a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a64:	2200      	movs	r2, #0
 8008a66:	643b      	str	r3, [r7, #64]	; 0x40
 8008a68:	647a      	str	r2, [r7, #68]	; 0x44
 8008a6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a6e:	460b      	mov	r3, r1
 8008a70:	3301      	adds	r3, #1
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a74:	4613      	mov	r3, r2
 8008a76:	f143 0300 	adc.w	r3, r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	2200      	movs	r2, #0
 8008a84:	633b      	str	r3, [r7, #48]	; 0x30
 8008a86:	637a      	str	r2, [r7, #52]	; 0x34
 8008a88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a8c:	4623      	mov	r3, r4
 8008a8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a92:	4602      	mov	r2, r0
 8008a94:	4293      	cmp	r3, r2
 8008a96:	462b      	mov	r3, r5
 8008a98:	460a      	mov	r2, r1
 8008a9a:	4193      	sbcs	r3, r2
 8008a9c:	d206      	bcs.n	8008aac <uavcan_register_Access_Response_1_0_serialize_+0x230>
 8008a9e:	4b56      	ldr	r3, [pc, #344]	; (8008bf8 <uavcan_register_Access_Response_1_0_serialize_+0x37c>)
 8008aa0:	4a4f      	ldr	r2, [pc, #316]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008aa2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008aa6:	484f      	ldr	r0, [pc, #316]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008aa8:	f006 fbd6 	bl	800f258 <__assert_func>
        if (obj->persistent)
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	7a5b      	ldrb	r3, [r3, #9]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d016      	beq.n	8008ae2 <uavcan_register_Access_Response_1_0_serialize_+0x266>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8008ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008abc:	4413      	add	r3, r2
 8008abe:	7818      	ldrb	r0, [r3, #0]
 8008ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac4:	f003 0207 	and.w	r2, r3, #7
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4093      	lsls	r3, r2
 8008acc:	b2d9      	uxtb	r1, r3
 8008ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad2:	08da      	lsrs	r2, r3, #3
 8008ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad6:	441a      	add	r2, r3
 8008ad8:	ea40 0301 	orr.w	r3, r0, r1
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	7013      	strb	r3, [r2, #0]
 8008ae0:	e017      	b.n	8008b12 <uavcan_register_Access_Response_1_0_serialize_+0x296>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8008ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ae6:	08db      	lsrs	r3, r3, #3
 8008ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aea:	4413      	add	r3, r2
 8008aec:	7818      	ldrb	r0, [r3, #0]
 8008aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af2:	f003 0207 	and.w	r2, r3, #7
 8008af6:	2301      	movs	r3, #1
 8008af8:	4093      	lsls	r3, r2
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	43db      	mvns	r3, r3
 8008afe:	b2d9      	uxtb	r1, r3
 8008b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b04:	08da      	lsrs	r2, r3, #3
 8008b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b08:	441a      	add	r2, r3
 8008b0a:	ea00 0301 	and.w	r3, r0, r1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	7013      	strb	r3, [r2, #0]
        }
        offset_bits += 1U;
 8008b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b16:	3301      	adds	r3, #1
 8008b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
 8008b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b20:	2200      	movs	r2, #0
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b26:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	3306      	adds	r3, #6
 8008b2e:	623b      	str	r3, [r7, #32]
 8008b30:	4613      	mov	r3, r2
 8008b32:	f143 0300 	adc.w	r3, r3, #0
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
 8008b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	2200      	movs	r2, #0
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	61fa      	str	r2, [r7, #28]
 8008b44:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008b48:	4623      	mov	r3, r4
 8008b4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	462b      	mov	r3, r5
 8008b54:	460a      	mov	r2, r1
 8008b56:	4193      	sbcs	r3, r2
 8008b58:	d206      	bcs.n	8008b68 <uavcan_register_Access_Response_1_0_serialize_+0x2ec>
 8008b5a:	4b28      	ldr	r3, [pc, #160]	; (8008bfc <uavcan_register_Access_Response_1_0_serialize_+0x380>)
 8008b5c:	4a20      	ldr	r2, [pc, #128]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008b5e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8008b62:	4820      	ldr	r0, [pc, #128]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008b64:	f006 fb78 	bl	800f258 <__assert_func>
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8008b68:	2306      	movs	r3, #6
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	e9cd 2300 	strd	r2, r3, [sp]
 8008b78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b7c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008b80:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008b82:	f7f8 fb87 	bl	8001294 <nunavutSetUxx>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        if (_err7_ < 0)
 8008b8c:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da02      	bge.n	8008b9a <uavcan_register_Access_Response_1_0_serialize_+0x31e>
        {
            return _err7_;
 8008b94:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8008b98:	e17c      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += 6UL;
 8008b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b9e:	3306      	adds	r3, #6
 8008ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8008ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d057      	beq.n	8008c60 <uavcan_register_Access_Response_1_0_serialize_+0x3e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8008bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	f1c3 0308 	rsb	r3, r3, #8
 8008bc0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        NUNAVUT_ASSERT(_pad2_ > 0);
 8008bc4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11b      	bne.n	8008c04 <uavcan_register_Access_Response_1_0_serialize_+0x388>
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <uavcan_register_Access_Response_1_0_serialize_+0x384>)
 8008bce:	4a04      	ldr	r2, [pc, #16]	; (8008be0 <uavcan_register_Access_Response_1_0_serialize_+0x364>)
 8008bd0:	f240 118f 	movw	r1, #399	; 0x18f
 8008bd4:	4803      	ldr	r0, [pc, #12]	; (8008be4 <uavcan_register_Access_Response_1_0_serialize_+0x368>)
 8008bd6:	f006 fb3f 	bl	800f258 <__assert_func>
 8008bda:	bf00      	nop
 8008bdc:	08011eb0 	.word	0x08011eb0
 8008be0:	0801478c 	.word	0x0801478c
 8008be4:	08013458 	.word	0x08013458
 8008be8:	08013428 	.word	0x08013428
 8008bec:	08012e4c 	.word	0x08012e4c
 8008bf0:	080134d4 	.word	0x080134d4
 8008bf4:	08012104 	.word	0x08012104
 8008bf8:	080134f4 	.word	0x080134f4
 8008bfc:	08013524 	.word	0x08013524
 8008c00:	080123cc 	.word	0x080123cc
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8008c04:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008c08:	9302      	str	r3, [sp, #8]
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	f04f 0300 	mov.w	r3, #0
 8008c12:	e9cd 2300 	strd	r2, r3, [sp]
 8008c16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c1a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008c20:	f7f8 fb38 	bl	8001294 <nunavutSetUxx>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        if (_err8_ < 0)
 8008c2a:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da02      	bge.n	8008c38 <uavcan_register_Access_Response_1_0_serialize_+0x3bc>
        {
            return _err8_;
 8008c32:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8008c36:	e12d      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += _pad2_;
 8008c38:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008c3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d006      	beq.n	8008c60 <uavcan_register_Access_Response_1_0_serialize_+0x3e4>
 8008c52:	4b93      	ldr	r3, [pc, #588]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c54:	4a93      	ldr	r2, [pc, #588]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c56:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8008c5a:	4893      	ldr	r0, [pc, #588]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c5c:	f006 fafc 	bl	800f258 <__assert_func>
    }
    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d006      	beq.n	8008c7a <uavcan_register_Access_Response_1_0_serialize_+0x3fe>
 8008c6c:	4b8c      	ldr	r3, [pc, #560]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c6e:	4a8d      	ldr	r2, [pc, #564]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c70:	f240 1199 	movw	r1, #409	; 0x199
 8008c74:	488c      	ldr	r0, [pc, #560]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c76:	f006 faef 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <uavcan_register_Access_Response_1_0_serialize_+0x418>
 8008c86:	4b86      	ldr	r3, [pc, #536]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008c88:	4a86      	ldr	r2, [pc, #536]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008c8a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008c8e:	4886      	ldr	r0, [pc, #536]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008c90:	f006 fae2 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
 8008c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c98:	2200      	movs	r2, #0
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	617a      	str	r2, [r7, #20]
 8008c9e:	f640 0318 	movw	r3, #2072	; 0x818
 8008ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	60bb      	str	r3, [r7, #8]
 8008cac:	460b      	mov	r3, r1
 8008cae:	f143 0300 	adc.w	r3, r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	2200      	movs	r2, #0
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	462b      	mov	r3, r5
 8008cd0:	460a      	mov	r2, r1
 8008cd2:	4193      	sbcs	r3, r2
 8008cd4:	d206      	bcs.n	8008ce4 <uavcan_register_Access_Response_1_0_serialize_+0x468>
 8008cd6:	4b75      	ldr	r3, [pc, #468]	; (8008eac <uavcan_register_Access_Response_1_0_serialize_+0x630>)
 8008cd8:	4a72      	ldr	r2, [pc, #456]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008cda:	f240 119b 	movw	r1, #411	; 0x19b
 8008cde:	4872      	ldr	r0, [pc, #456]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008ce0:	f006 faba 	bl	800f258 <__assert_func>
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8008ce4:	f240 1303 	movw	r3, #259	; 0x103
 8008ce8:	673b      	str	r3, [r7, #112]	; 0x70
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d006      	beq.n	8008d04 <uavcan_register_Access_Response_1_0_serialize_+0x488>
 8008cf6:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008cf8:	4a6a      	ldr	r2, [pc, #424]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008cfa:	f240 119d 	movw	r1, #413	; 0x19d
 8008cfe:	486a      	ldr	r0, [pc, #424]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d00:	f006 faaa 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
 8008d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d08:	08da      	lsrs	r2, r3, #3
 8008d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d206      	bcs.n	8008d24 <uavcan_register_Access_Response_1_0_serialize_+0x4a8>
 8008d16:	4b66      	ldr	r3, [pc, #408]	; (8008eb0 <uavcan_register_Access_Response_1_0_serialize_+0x634>)
 8008d18:	4a62      	ldr	r2, [pc, #392]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d1a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8008d1e:	4862      	ldr	r0, [pc, #392]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d20:	f006 fa9a 	bl	800f258 <__assert_func>
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8008d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d26:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8008d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d32:	4413      	add	r3, r2
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8008d34:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f7fd fa77 	bl	800622c <uavcan_register_Value_1_0_serialize_>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        if (_err9_ < 0)
 8008d44:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da02      	bge.n	8008d52 <uavcan_register_Access_Response_1_0_serialize_+0x4d6>
        {
            return _err9_;
 8008d4c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8008d50:	e0a0      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
 8008d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d806      	bhi.n	8008d68 <uavcan_register_Access_Response_1_0_serialize_+0x4ec>
 8008d5a:	4b56      	ldr	r3, [pc, #344]	; (8008eb4 <uavcan_register_Access_Response_1_0_serialize_+0x638>)
 8008d5c:	4a51      	ldr	r2, [pc, #324]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d5e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8008d62:	4851      	ldr	r0, [pc, #324]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d64:	f006 fa78 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
 8008d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	f640 0218 	movw	r2, #2072	; 0x818
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d906      	bls.n	8008d82 <uavcan_register_Access_Response_1_0_serialize_+0x506>
 8008d74:	4b50      	ldr	r3, [pc, #320]	; (8008eb8 <uavcan_register_Access_Response_1_0_serialize_+0x63c>)
 8008d76:	4a4b      	ldr	r2, [pc, #300]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008d78:	f240 11a7 	movw	r1, #423	; 0x1a7
 8008d7c:	484a      	ldr	r0, [pc, #296]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008d7e:	f006 fa6b 	bl	800f258 <__assert_func>
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8008d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8008d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d906      	bls.n	8008dac <uavcan_register_Access_Response_1_0_serialize_+0x530>
 8008d9e:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <uavcan_register_Access_Response_1_0_serialize_+0x640>)
 8008da0:	4a40      	ldr	r2, [pc, #256]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008da2:	f240 11a9 	movw	r1, #425	; 0x1a9
 8008da6:	4840      	ldr	r0, [pc, #256]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008da8:	f006 fa56 	bl	800f258 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8008dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d042      	beq.n	8008e3e <uavcan_register_Access_Response_1_0_serialize_+0x5c2>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8008db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f1c3 0308 	rsb	r3, r3, #8
 8008dc8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
        NUNAVUT_ASSERT(_pad3_ > 0);
 8008dcc:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <uavcan_register_Access_Response_1_0_serialize_+0x566>
 8008dd4:	4b3a      	ldr	r3, [pc, #232]	; (8008ec0 <uavcan_register_Access_Response_1_0_serialize_+0x644>)
 8008dd6:	4a33      	ldr	r2, [pc, #204]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ddc:	4832      	ldr	r0, [pc, #200]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008dde:	f006 fa3b 	bl	800f258 <__assert_func>
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8008de2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008de6:	9302      	str	r3, [sp, #8]
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	e9cd 2300 	strd	r2, r3, [sp]
 8008df4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008df8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008dfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008dfe:	f7f8 fa49 	bl	8001294 <nunavutSetUxx>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        if (_err10_ < 0)
 8008e08:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da02      	bge.n	8008e16 <uavcan_register_Access_Response_1_0_serialize_+0x59a>
        {
            return _err10_;
 8008e10:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8008e14:	e03e      	b.n	8008e94 <uavcan_register_Access_Response_1_0_serialize_+0x618>
        }
        offset_bits += _pad3_;
 8008e16:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8008e1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008e1e:	4413      	add	r3, r2
 8008e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <uavcan_register_Access_Response_1_0_serialize_+0x5c2>
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008e32:	4a1c      	ldr	r2, [pc, #112]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e34:	f240 11b5 	movw	r1, #437	; 0x1b5
 8008e38:	481b      	ldr	r0, [pc, #108]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e3a:	f006 fa0d 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 72ULL);
 8008e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e42:	2b47      	cmp	r3, #71	; 0x47
 8008e44:	d806      	bhi.n	8008e54 <uavcan_register_Access_Response_1_0_serialize_+0x5d8>
 8008e46:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <uavcan_register_Access_Response_1_0_serialize_+0x648>)
 8008e48:	4a16      	ldr	r2, [pc, #88]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e4a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008e4e:	4816      	ldr	r0, [pc, #88]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e50:	f006 fa02 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);
 8008e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e58:	f640 0258 	movw	r2, #2136	; 0x858
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d906      	bls.n	8008e6e <uavcan_register_Access_Response_1_0_serialize_+0x5f2>
 8008e60:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <uavcan_register_Access_Response_1_0_serialize_+0x64c>)
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e64:	f240 11b9 	movw	r1, #441	; 0x1b9
 8008e68:	480f      	ldr	r0, [pc, #60]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e6a:	f006 f9f5 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d006      	beq.n	8008e88 <uavcan_register_Access_Response_1_0_serialize_+0x60c>
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <uavcan_register_Access_Response_1_0_serialize_+0x624>)
 8008e7c:	4a09      	ldr	r2, [pc, #36]	; (8008ea4 <uavcan_register_Access_Response_1_0_serialize_+0x628>)
 8008e7e:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8008e82:	4809      	ldr	r0, [pc, #36]	; (8008ea8 <uavcan_register_Access_Response_1_0_serialize_+0x62c>)
 8008e84:	f006 f9e8 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8008e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e8c:	08da      	lsrs	r2, r3, #3
 8008e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e90:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3788      	adds	r7, #136	; 0x88
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e9e:	bf00      	nop
 8008ea0:	08011eb0 	.word	0x08011eb0
 8008ea4:	0801478c 	.word	0x0801478c
 8008ea8:	08013458 	.word	0x08013458
 8008eac:	08013554 	.word	0x08013554
 8008eb0:	08012ec4 	.word	0x08012ec4
 8008eb4:	08012efc 	.word	0x08012efc
 8008eb8:	08013588 	.word	0x08013588
 8008ebc:	08012104 	.word	0x08012104
 8008ec0:	080135a8 	.word	0x080135a8
 8008ec4:	080135b4 	.word	0x080135b4
 8008ec8:	080135cc 	.word	0x080135cc

08008ecc <uavcan_register_Access_Response_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_deserialize_(
    uavcan_register_Access_Response_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <uavcan_register_Access_Response_1_0_deserialize_+0x26>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <uavcan_register_Access_Response_1_0_deserialize_+0x26>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <uavcan_register_Access_Response_1_0_deserialize_+0x2c>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <uavcan_register_Access_Response_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8008ef2:	f06f 0301 	mvn.w	r3, #1
 8008ef6:	e10c      	b.n	8009112 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
    }
    if (buffer == NULL)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <uavcan_register_Access_Response_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8008efe:	4b87      	ldr	r3, [pc, #540]	; (800911c <uavcan_register_Access_Response_1_0_deserialize_+0x250>)
 8008f00:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]
    // uavcan.time.SynchronizedTimestamp.1.0 timestamp
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d006      	beq.n	8008f2a <uavcan_register_Access_Response_1_0_deserialize_+0x5e>
 8008f1c:	4b80      	ldr	r3, [pc, #512]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f1e:	4a81      	ldr	r2, [pc, #516]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f20:	f240 11e1 	movw	r1, #481	; 0x1e1
 8008f24:	4880      	ldr	r0, [pc, #512]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f26:	f006 f997 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <uavcan_register_Access_Response_1_0_deserialize_+0x76>
 8008f34:	4b7a      	ldr	r3, [pc, #488]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f36:	4a7b      	ldr	r2, [pc, #492]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f38:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008f3c:	487a      	ldr	r0, [pc, #488]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f3e:	f006 f98b 	bl	800f258 <__assert_func>
    {
        size_t _size_bytes6_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	08db      	lsrs	r3, r3, #3
 8008f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7f7 fff1 	bl	8000f30 <nunavutChooseMin>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <uavcan_register_Access_Response_1_0_deserialize_+0xa2>
 8008f60:	4b6f      	ldr	r3, [pc, #444]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008f62:	4a70      	ldr	r2, [pc, #448]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008f64:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008f68:	486f      	ldr	r0, [pc, #444]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008f6a:	f006 f975 	bl	800f258 <__assert_func>
        const int8_t _err11_ = uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
 8008f6e:	68f8      	ldr	r0, [r7, #12]
            &out_obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes6_);
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	08db      	lsrs	r3, r3, #3
        const int8_t _err11_ = uavcan_time_SynchronizedTimestamp_1_0_deserialize_(
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	f107 0214 	add.w	r2, r7, #20
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f7ff fb2b 	bl	80085d8 <uavcan_time_SynchronizedTimestamp_1_0_deserialize_>
 8008f82:	4603      	mov	r3, r0
 8008f84:	76fb      	strb	r3, [r7, #27]
        if (_err11_ < 0)
 8008f86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da02      	bge.n	8008f94 <uavcan_register_Access_Response_1_0_deserialize_+0xc8>
        {
            return _err11_;
 8008f8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f92:	e0be      	b.n	8009112 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
        }
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested serialized representation.
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	61fb      	str	r3, [r7, #28]
    }
    // saturated bool mutable
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <uavcan_register_Access_Response_1_0_deserialize_+0xea>
 8008fa8:	4b5d      	ldr	r3, [pc, #372]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8008faa:	4a5e      	ldr	r2, [pc, #376]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8008fac:	f240 11ef 	movw	r1, #495	; 0x1ef
 8008fb0:	485d      	ldr	r0, [pc, #372]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8008fb2:	f006 f951 	bl	800f258 <__assert_func>
    if (offset_bits < capacity_bits)
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d20e      	bcs.n	8008fdc <uavcan_register_Access_Response_1_0_deserialize_+0x110>
    {
        out_obj->_mutable = (buffer[offset_bits / 8U] & 1U) != 0U;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	08db      	lsrs	r3, r3, #3
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	721a      	strb	r2, [r3, #8]
 8008fda:	e002      	b.n	8008fe2 <uavcan_register_Access_Response_1_0_deserialize_+0x116>
    }
    else
    {
        out_obj->_mutable = false;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	721a      	strb	r2, [r3, #8]
    }
    offset_bits += 1U;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
    // saturated bool persistent
    if (offset_bits < capacity_bits)
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d214      	bcs.n	800901a <uavcan_register_Access_Response_1_0_deserialize_+0x14e>
    {
        out_obj->persistent = (buffer[offset_bits / 8U] & (1U << (offset_bits % 8U))) != 0U;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf14      	ite	ne
 800900e:	2301      	movne	r3, #1
 8009010:	2300      	moveq	r3, #0
 8009012:	b2da      	uxtb	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	725a      	strb	r2, [r3, #9]
 8009018:	e002      	b.n	8009020 <uavcan_register_Access_Response_1_0_deserialize_+0x154>
    }
    else
    {
        out_obj->persistent = false;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	725a      	strb	r2, [r3, #9]
    }
    offset_bits += 1U;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	3301      	adds	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
    // void6
    offset_bits += 6;
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	3306      	adds	r3, #6
 800902a:	61fb      	str	r3, [r7, #28]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	3307      	adds	r3, #7
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	61fb      	str	r3, [r7, #28]
    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <uavcan_register_Access_Response_1_0_deserialize_+0x182>
 8009040:	4b37      	ldr	r3, [pc, #220]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8009042:	4a38      	ldr	r2, [pc, #224]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8009044:	f240 2107 	movw	r1, #519	; 0x207
 8009048:	4837      	ldr	r0, [pc, #220]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 800904a:	f006 f905 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <uavcan_register_Access_Response_1_0_deserialize_+0x19a>
 8009058:	4b31      	ldr	r3, [pc, #196]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 800905a:	4a32      	ldr	r2, [pc, #200]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 800905c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009060:	4831      	ldr	r0, [pc, #196]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 8009062:	f006 f8f9 	bl	800f258 <__assert_func>
    {
        size_t _size_bytes7_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	08db      	lsrs	r3, r3, #3
 800906a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800906c:	4618      	mov	r0, r3
 800906e:	f7f7 ff5f 	bl	8000f30 <nunavutChooseMin>
 8009072:	4602      	mov	r2, r0
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	1a9b      	subs	r3, r3, r2
 8009078:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <uavcan_register_Access_Response_1_0_deserialize_+0x1c6>
 8009084:	4b26      	ldr	r3, [pc, #152]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 8009086:	4a27      	ldr	r2, [pc, #156]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8009088:	f240 210b 	movw	r1, #523	; 0x20b
 800908c:	4826      	ldr	r0, [pc, #152]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 800908e:	f006 f8e3 	bl	800f258 <__assert_func>
        const int8_t _err12_ = uavcan_register_Value_1_0_deserialize_(
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f103 0010 	add.w	r0, r3, #16
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes7_);
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	08db      	lsrs	r3, r3, #3
        const int8_t _err12_ = uavcan_register_Value_1_0_deserialize_(
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	f107 0210 	add.w	r2, r7, #16
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7fe fc81 	bl	80079ac <uavcan_register_Value_1_0_deserialize_>
 80090aa:	4603      	mov	r3, r0
 80090ac:	76bb      	strb	r3, [r7, #26]
        if (_err12_ < 0)
 80090ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da02      	bge.n	80090bc <uavcan_register_Access_Response_1_0_deserialize_+0x1f0>
        {
            return _err12_;
 80090b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090ba:	e02a      	b.n	8009112 <uavcan_register_Access_Response_1_0_deserialize_+0x246>
        }
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested serialized representation.
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	61fb      	str	r3, [r7, #28]
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	3307      	adds	r3, #7
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d006      	beq.n	80090e8 <uavcan_register_Access_Response_1_0_deserialize_+0x21c>
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <uavcan_register_Access_Response_1_0_deserialize_+0x254>)
 80090dc:	4a11      	ldr	r2, [pc, #68]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 80090de:	f240 2115 	movw	r1, #533	; 0x215
 80090e2:	4811      	ldr	r0, [pc, #68]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 80090e4:	f006 f8b8 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80090e8:	6a39      	ldr	r1, [r7, #32]
 80090ea:	69f8      	ldr	r0, [r7, #28]
 80090ec:	f7f7 ff20 	bl	8000f30 <nunavutChooseMin>
 80090f0:	4603      	mov	r3, r0
 80090f2:	08da      	lsrs	r2, r3, #3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fe:	429a      	cmp	r2, r3
 8009100:	d206      	bcs.n	8009110 <uavcan_register_Access_Response_1_0_deserialize_+0x244>
 8009102:	4b0a      	ldr	r3, [pc, #40]	; (800912c <uavcan_register_Access_Response_1_0_deserialize_+0x260>)
 8009104:	4a07      	ldr	r2, [pc, #28]	; (8009124 <uavcan_register_Access_Response_1_0_deserialize_+0x258>)
 8009106:	f240 2117 	movw	r1, #535	; 0x217
 800910a:	4807      	ldr	r0, [pc, #28]	; (8009128 <uavcan_register_Access_Response_1_0_deserialize_+0x25c>)
 800910c:	f006 f8a4 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3728      	adds	r7, #40	; 0x28
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08011fe0 	.word	0x08011fe0
 8009120:	08011eb0 	.word	0x08011eb0
 8009124:	080146fc 	.word	0x080146fc
 8009128:	08013458 	.word	0x08013458
 800912c:	08011fe4 	.word	0x08011fe4

08009130 <uavcan_register_Access_Response_1_0_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_register_Access_Response_1_0_initialize_(uavcan_register_Access_Response_1_0* const out_obj)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d018      	beq.n	8009170 <uavcan_register_Access_Response_1_0_initialize_+0x40>
    {
        size_t size_bytes = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_register_Access_Response_1_0_deserialize_(out_obj, &buf, &size_bytes);
 8009146:	f107 0210 	add.w	r2, r7, #16
 800914a:	f107 030f 	add.w	r3, r7, #15
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7ff febb 	bl	8008ecc <uavcan_register_Access_Response_1_0_deserialize_>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 800915a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800915e:	2b00      	cmp	r3, #0
 8009160:	da06      	bge.n	8009170 <uavcan_register_Access_Response_1_0_initialize_+0x40>
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <uavcan_register_Access_Response_1_0_initialize_+0x48>)
 8009164:	4a05      	ldr	r2, [pc, #20]	; (800917c <uavcan_register_Access_Response_1_0_initialize_+0x4c>)
 8009166:	f240 2126 	movw	r1, #550	; 0x226
 800916a:	4805      	ldr	r0, [pc, #20]	; (8009180 <uavcan_register_Access_Response_1_0_initialize_+0x50>)
 800916c:	f006 f874 	bl	800f258 <__assert_func>
        (void) err;
    }
}
 8009170:	bf00      	nop
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	08012138 	.word	0x08012138
 800917c:	080146cc 	.word	0x080146cc
 8009180:	08013458 	.word	0x08013458

08009184 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Request_1_3_deserialize_(
    uavcan_node_ExecuteCommand_Request_1_3* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d009      	beq.n	80091aa <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x26>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x26>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x2c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80091aa:	f06f 0301 	mvn.w	r3, #1
 80091ae:	e0b1      	b.n	8009314 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x190>
    }
    if (buffer == NULL)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80091b6:	4b59      	ldr	r3, [pc, #356]	; (800931c <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x198>)
 80091b8:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
    // saturated uint16 command
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x5c>
 80091d4:	4b52      	ldr	r3, [pc, #328]	; (8009320 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 80091d6:	4a53      	ldr	r2, [pc, #332]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80091d8:	21f3      	movs	r1, #243	; 0xf3
 80091da:	4853      	ldr	r0, [pc, #332]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80091dc:	f006 f83c 	bl	800f258 <__assert_func>
    out_obj->command = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80091e0:	2310      	movs	r3, #16
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	68b8      	ldr	r0, [r7, #8]
 80091e8:	f7f8 f930 	bl	800144c <nunavutGetU16>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	801a      	strh	r2, [r3, #0]
    offset_bits += 16U;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3310      	adds	r3, #16
 80091f8:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=255] parameter
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x8c>
 8009204:	4b46      	ldr	r3, [pc, #280]	; (8009320 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 8009206:	4a47      	ldr	r2, [pc, #284]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 8009208:	21f7      	movs	r1, #247	; 0xf7
 800920a:	4847      	ldr	r0, [pc, #284]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 800920c:	f006 f824 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	3308      	adds	r3, #8
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d309      	bcc.n	800922e <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xaa>
    {
        out_obj->parameter.count = buffer[offset_bits / 8U] & 255U;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	08db      	lsrs	r3, r3, #3
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800922c:	e003      	b.n	8009236 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xb2>
    }
    else
    {
        out_obj->parameter.count = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    }
    offset_bits += 8U;
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	3308      	adds	r3, #8
 800923a:	61fb      	str	r3, [r7, #28]
    if (out_obj->parameter.count > 255U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d902      	bls.n	800924c <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xc8>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8009246:	f06f 0309 	mvn.w	r3, #9
 800924a:	e063      	b.n	8009314 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x190>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b00      	cmp	r3, #0
 8009254:	d006      	beq.n	8009264 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xe0>
 8009256:	4b32      	ldr	r3, [pc, #200]	; (8009320 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 8009258:	4a32      	ldr	r2, [pc, #200]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 800925a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800925e:	4832      	ldr	r0, [pc, #200]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 8009260:	f005 fffa 	bl	800f258 <__assert_func>
    for (size_t _index1_ = 0U; _index1_ < out_obj->parameter.count; ++_index1_)
 8009264:	2300      	movs	r3, #0
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	e028      	b.n	80092bc <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x138>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xfe>
 8009274:	4b2a      	ldr	r3, [pc, #168]	; (8009320 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 8009276:	4a2b      	ldr	r2, [pc, #172]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 8009278:	f240 1109 	movw	r1, #265	; 0x109
 800927c:	482a      	ldr	r0, [pc, #168]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 800927e:	f005 ffeb 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	3308      	adds	r3, #8
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	d30b      	bcc.n	80092a4 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x120>
        {
            out_obj->parameter.elements[_index1_] = buffer[offset_bits / 8U] & 255U;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	08db      	lsrs	r3, r3, #3
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4413      	add	r3, r2
 8009294:	7819      	ldrb	r1, [r3, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	460a      	mov	r2, r1
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	e005      	b.n	80092b0 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x12c>
        }
        else
        {
            out_obj->parameter.elements[_index1_] = 0U;
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	4413      	add	r3, r2
 80092aa:	3304      	adds	r3, #4
 80092ac:	2200      	movs	r2, #0
 80092ae:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	3308      	adds	r3, #8
 80092b4:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->parameter.count; ++_index1_)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	3301      	adds	r3, #1
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d3d0      	bcc.n	800926a <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0xe6>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	3307      	adds	r3, #7
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x166>
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x19c>)
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 80092e0:	f240 1115 	movw	r1, #277	; 0x115
 80092e4:	4810      	ldr	r0, [pc, #64]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 80092e6:	f005 ffb7 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80092ea:	6939      	ldr	r1, [r7, #16]
 80092ec:	69f8      	ldr	r0, [r7, #28]
 80092ee:	f7f7 fe1f 	bl	8000f30 <nunavutChooseMin>
 80092f2:	4603      	mov	r3, r0
 80092f4:	08da      	lsrs	r2, r3, #3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	429a      	cmp	r2, r3
 8009302:	d206      	bcs.n	8009312 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x18e>
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a8>)
 8009306:	4a07      	ldr	r2, [pc, #28]	; (8009324 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a0>)
 8009308:	f240 1117 	movw	r1, #279	; 0x117
 800930c:	4806      	ldr	r0, [pc, #24]	; (8009328 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_+0x1a4>)
 800930e:	f005 ffa3 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	08011fe0 	.word	0x08011fe0
 8009320:	08011eb0 	.word	0x08011eb0
 8009324:	08014aac 	.word	0x08014aac
 8009328:	080135e4 	.word	0x080135e4
 800932c:	08011fe4 	.word	0x08011fe4

08009330 <uavcan_node_ExecuteCommand_Response_1_3_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Response_1_3_serialize_(
    const uavcan_node_ExecuteCommand_Response_1_3* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8009330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009334:	b098      	sub	sp, #96	; 0x60
 8009336:	af04      	add	r7, sp, #16
 8009338:	63f8      	str	r0, [r7, #60]	; 0x3c
 800933a:	63b9      	str	r1, [r7, #56]	; 0x38
 800933c:	637a      	str	r2, [r7, #52]	; 0x34
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800933e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x20>
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x20>
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8009350:	f06f 0301 	mvn.w	r3, #1
 8009354:	e137      	b.n	80095c6 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	647b      	str	r3, [r7, #68]	; 0x44
    if ((8U * (size_t) capacity_bytes) < 384UL)
 800935c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009364:	d202      	bcs.n	800936c <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8009366:	f06f 0302 	mvn.w	r3, #2
 800936a:	e12c      	b.n	80095c6 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	64fb      	str	r3, [r7, #76]	; 0x4c
    {   // saturated uint8 status
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d006      	beq.n	8009388 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x58>
 800937a:	4b95      	ldr	r3, [pc, #596]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 800937c:	4a95      	ldr	r2, [pc, #596]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800937e:	f240 1183 	movw	r1, #387	; 0x183
 8009382:	4895      	ldr	r0, [pc, #596]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009384:	f005 ff68 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8009388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938a:	2200      	movs	r2, #0
 800938c:	62bb      	str	r3, [r7, #40]	; 0x28
 800938e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009390:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009394:	460b      	mov	r3, r1
 8009396:	f113 0a08 	adds.w	sl, r3, #8
 800939a:	4613      	mov	r3, r2
 800939c:	f143 0b00 	adc.w	fp, r3, #0
 80093a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	2200      	movs	r2, #0
 80093a6:	623b      	str	r3, [r7, #32]
 80093a8:	627a      	str	r2, [r7, #36]	; 0x24
 80093aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093ae:	460b      	mov	r3, r1
 80093b0:	4553      	cmp	r3, sl
 80093b2:	4613      	mov	r3, r2
 80093b4:	eb73 030b 	sbcs.w	r3, r3, fp
 80093b8:	d206      	bcs.n	80093c8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x98>
 80093ba:	4b88      	ldr	r3, [pc, #544]	; (80095dc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2ac>)
 80093bc:	4a85      	ldr	r2, [pc, #532]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80093be:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80093c2:	4885      	ldr	r0, [pc, #532]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80093c4:	f005 ff48 	bl	800f258 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->status);  // C std, 6.3.1.3 Signed and unsigned integers
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	08db      	lsrs	r3, r3, #3
 80093cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ce:	441a      	add	r2, r3
 80093d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	7013      	strb	r3, [r2, #0]
        offset_bits += 8U;
 80093d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d8:	3308      	adds	r3, #8
 80093da:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    {   // saturated uint8[<=46] output
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80093dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d006      	beq.n	80093f4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0xc4>
 80093e6:	4b7a      	ldr	r3, [pc, #488]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 80093e8:	4a7a      	ldr	r2, [pc, #488]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80093ea:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80093ee:	487a      	ldr	r0, [pc, #488]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80093f0:	f005 ff32 	bl	800f258 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 376ULL) <= (capacity_bytes * 8U));
 80093f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f6:	2200      	movs	r2, #0
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	61fa      	str	r2, [r7, #28]
 80093fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009400:	460b      	mov	r3, r1
 8009402:	f513 78bc 	adds.w	r8, r3, #376	; 0x178
 8009406:	4613      	mov	r3, r2
 8009408:	f143 0900 	adc.w	r9, r3, #0
 800940c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	2200      	movs	r2, #0
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	617a      	str	r2, [r7, #20]
 8009416:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800941a:	460b      	mov	r3, r1
 800941c:	4543      	cmp	r3, r8
 800941e:	4613      	mov	r3, r2
 8009420:	eb73 0309 	sbcs.w	r3, r3, r9
 8009424:	d206      	bcs.n	8009434 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x104>
 8009426:	4b6e      	ldr	r3, [pc, #440]	; (80095e0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b0>)
 8009428:	4a6a      	ldr	r2, [pc, #424]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800942a:	f240 118b 	movw	r1, #395	; 0x18b
 800942e:	486a      	ldr	r0, [pc, #424]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009430:	f005 ff12 	bl	800f258 <__assert_func>
        if (obj->output.count > 46)
 8009434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009438:	2b2e      	cmp	r3, #46	; 0x2e
 800943a:	d902      	bls.n	8009442 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x112>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800943c:	f06f 0309 	mvn.w	r3, #9
 8009440:	e0c1      	b.n	80095c6 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->output.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009448:	08db      	lsrs	r3, r3, #3
 800944a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800944c:	4413      	add	r3, r2
 800944e:	b2ca      	uxtb	r2, r1
 8009450:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	3308      	adds	r3, #8
 8009456:	64fb      	str	r3, [r7, #76]	; 0x4c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	2b00      	cmp	r3, #0
 8009460:	d006      	beq.n	8009470 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x140>
 8009462:	4b5b      	ldr	r3, [pc, #364]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009464:	4a5b      	ldr	r2, [pc, #364]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009466:	f240 1193 	movw	r1, #403	; 0x193
 800946a:	485b      	ldr	r0, [pc, #364]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800946c:	f005 fef4 	bl	800f258 <__assert_func>
        for (size_t _index2_ = 0U; _index2_ < obj->output.count; ++_index2_)
 8009470:	2300      	movs	r3, #0
 8009472:	64bb      	str	r3, [r7, #72]	; 0x48
 8009474:	e03a      	b.n	80094ec <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x1bc>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	2b00      	cmp	r3, #0
 800947e:	d006      	beq.n	800948e <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x15e>
 8009480:	4b53      	ldr	r3, [pc, #332]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 8009482:	4a54      	ldr	r2, [pc, #336]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009484:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8009488:	4853      	ldr	r0, [pc, #332]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800948a:	f005 fee5 	bl	800f258 <__assert_func>
            NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 800948e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009490:	2200      	movs	r2, #0
 8009492:	60bb      	str	r3, [r7, #8]
 8009494:	60fa      	str	r2, [r7, #12]
 8009496:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800949a:	460b      	mov	r3, r1
 800949c:	f113 0408 	adds.w	r4, r3, #8
 80094a0:	4613      	mov	r3, r2
 80094a2:	f143 0500 	adc.w	r5, r3, #0
 80094a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	2200      	movs	r2, #0
 80094ac:	603b      	str	r3, [r7, #0]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094b4:	460b      	mov	r3, r1
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	4613      	mov	r3, r2
 80094ba:	41ab      	sbcs	r3, r5
 80094bc:	d206      	bcs.n	80094cc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x19c>
 80094be:	4b47      	ldr	r3, [pc, #284]	; (80095dc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2ac>)
 80094c0:	4a44      	ldr	r2, [pc, #272]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80094c2:	f240 1197 	movw	r1, #407	; 0x197
 80094c6:	4844      	ldr	r0, [pc, #272]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80094c8:	f005 fec6 	bl	800f258 <__assert_func>
            // Saturation code not emitted -- native representation matches the serialized representation.
            buffer[offset_bits / 8U] = (uint8_t)(obj->output.elements[_index2_]);  // C std, 6.3.1.3 Signed and unsigned integers
 80094cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ce:	08db      	lsrs	r3, r3, #3
 80094d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094d2:	4413      	add	r3, r2
 80094d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094d8:	440a      	add	r2, r1
 80094da:	3204      	adds	r2, #4
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	701a      	strb	r2, [r3, #0]
            offset_bits += 8U;
 80094e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e2:	3308      	adds	r3, #8
 80094e4:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (size_t _index2_ = 0U; _index2_ < obj->output.count; ++_index2_)
 80094e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e8:	3301      	adds	r3, #1
 80094ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80094ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d3bf      	bcc.n	8009476 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x146>
        }
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80094f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d03c      	beq.n	800957a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x24a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 0307 	and.w	r3, r3, #7
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f1c3 0308 	rsb	r3, r3, #8
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        NUNAVUT_ASSERT(_pad1_ > 0);
 8009512:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x1f8>
 800951a:	4b32      	ldr	r3, [pc, #200]	; (80095e4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b4>)
 800951c:	4a2d      	ldr	r2, [pc, #180]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800951e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8009522:	482d      	ldr	r0, [pc, #180]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009524:	f005 fe98 	bl	800f258 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8009528:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	e9cd 2300 	strd	r2, r3, [sp]
 800953a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800953c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800953e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009540:	f7f7 fea8 	bl	8001294 <nunavutSetUxx>
 8009544:	4603      	mov	r3, r0
 8009546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        if (_err2_ < 0)
 800954a:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800954e:	2b00      	cmp	r3, #0
 8009550:	da02      	bge.n	8009558 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x228>
        {
            return _err2_;
 8009552:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8009556:	e036      	b.n	80095c6 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x296>
        }
        offset_bits += _pad1_;
 8009558:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800955c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800955e:	4413      	add	r3, r2
 8009560:	64fb      	str	r3, [r7, #76]	; 0x4c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x24a>
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 800956e:	4a19      	ldr	r2, [pc, #100]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009570:	f240 11a7 	movw	r1, #423	; 0x1a7
 8009574:	4818      	ldr	r0, [pc, #96]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 8009576:	f005 fe6f 	bl	800f258 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 16ULL);
 800957a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957c:	2b0f      	cmp	r3, #15
 800957e:	d806      	bhi.n	800958e <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x25e>
 8009580:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2b8>)
 8009582:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 8009584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009588:	4813      	ldr	r0, [pc, #76]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 800958a:	f005 fe65 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 384ULL);
 800958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009590:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009594:	d906      	bls.n	80095a4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x274>
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2bc>)
 8009598:	4a0e      	ldr	r2, [pc, #56]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 800959a:	f240 11ab 	movw	r1, #427	; 0x1ab
 800959e:	480e      	ldr	r0, [pc, #56]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80095a0:	f005 fe5a 	bl	800f258 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80095a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d006      	beq.n	80095bc <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x28c>
 80095ae:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a0>)
 80095b0:	4a08      	ldr	r2, [pc, #32]	; (80095d4 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a4>)
 80095b2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <uavcan_node_ExecuteCommand_Response_1_3_serialize_+0x2a8>)
 80095b8:	f005 fe4e 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80095bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095be:	08da      	lsrs	r2, r3, #3
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3750      	adds	r7, #80	; 0x50
 80095ca:	46bd      	mov	sp, r7
 80095cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d0:	08011eb0 	.word	0x08011eb0
 80095d4:	08014b4c 	.word	0x08014b4c
 80095d8:	080135e4 	.word	0x080135e4
 80095dc:	08011f78 	.word	0x08011f78
 80095e0:	08013664 	.word	0x08013664
 80095e4:	0801212c 	.word	0x0801212c
 80095e8:	080125a4 	.word	0x080125a4
 80095ec:	08013694 	.word	0x08013694

080095f0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_ExecuteCommand_Response_1_3_deserialize_(
    uavcan_node_ExecuteCommand_Response_1_3* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x26>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x26>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x2c>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8009616:	f06f 0301 	mvn.w	r3, #1
 800961a:	e0b5      	b.n	8009788 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x198>
    }
    if (buffer == NULL)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8009622:	4b5b      	ldr	r3, [pc, #364]	; (8009790 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a0>)
 8009624:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
    // saturated uint8 status
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d006      	beq.n	800964e <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x5e>
 8009640:	4b54      	ldr	r3, [pc, #336]	; (8009794 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009642:	4a55      	ldr	r2, [pc, #340]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009644:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009648:	4854      	ldr	r0, [pc, #336]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 800964a:	f005 fe05 	bl	800f258 <__assert_func>
    if ((offset_bits + 8U) <= capacity_bits)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	3308      	adds	r3, #8
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	429a      	cmp	r2, r3
 8009656:	d307      	bcc.n	8009668 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x78>
    {
        out_obj->status = buffer[offset_bits / 8U] & 255U;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	08db      	lsrs	r3, r3, #3
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	4413      	add	r3, r2
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	e002      	b.n	800966e <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x7e>
    }
    else
    {
        out_obj->status = 0U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 8U;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	3308      	adds	r3, #8
 8009672:	61fb      	str	r3, [r7, #28]
    // saturated uint8[<=46] output
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b00      	cmp	r3, #0
 800967c:	d006      	beq.n	800968c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x9c>
 800967e:	4b45      	ldr	r3, [pc, #276]	; (8009794 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009680:	4a45      	ldr	r2, [pc, #276]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009682:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009686:	4845      	ldr	r0, [pc, #276]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 8009688:	f005 fde6 	bl	800f258 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	3308      	adds	r3, #8
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	429a      	cmp	r2, r3
 8009694:	d308      	bcc.n	80096a8 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xb8>
    {
        out_obj->output.count = buffer[offset_bits / 8U] & 255U;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	4413      	add	r3, r2
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	635a      	str	r2, [r3, #52]	; 0x34
 80096a6:	e002      	b.n	80096ae <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xbe>
    }
    else
    {
        out_obj->output.count = 0U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	635a      	str	r2, [r3, #52]	; 0x34
    }
    offset_bits += 8U;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3308      	adds	r3, #8
 80096b2:	61fb      	str	r3, [r7, #28]
    if (out_obj->output.count > 46U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	2b2e      	cmp	r3, #46	; 0x2e
 80096ba:	d902      	bls.n	80096c2 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xd2>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80096bc:	f06f 0309 	mvn.w	r3, #9
 80096c0:	e062      	b.n	8009788 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x198>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f003 0307 	and.w	r3, r3, #7
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xea>
 80096cc:	4b31      	ldr	r3, [pc, #196]	; (8009794 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 80096ce:	4a32      	ldr	r2, [pc, #200]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 80096d0:	f240 11ed 	movw	r1, #493	; 0x1ed
 80096d4:	4831      	ldr	r0, [pc, #196]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 80096d6:	f005 fdbf 	bl	800f258 <__assert_func>
    for (size_t _index3_ = 0U; _index3_ < out_obj->output.count; ++_index3_)
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e028      	b.n	8009732 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x142>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d006      	beq.n	80096f8 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x108>
 80096ea:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 80096ec:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 80096ee:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80096f2:	482a      	ldr	r0, [pc, #168]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 80096f4:	f005 fdb0 	bl	800f258 <__assert_func>
        if ((offset_bits + 8U) <= capacity_bits)
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	3308      	adds	r3, #8
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d30b      	bcc.n	800971a <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x12a>
        {
            out_obj->output.elements[_index3_] = buffer[offset_bits / 8U] & 255U;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	08db      	lsrs	r3, r3, #3
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4413      	add	r3, r2
 800970a:	7819      	ldrb	r1, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	3304      	adds	r3, #4
 8009714:	460a      	mov	r2, r1
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e005      	b.n	8009726 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x136>
        }
        else
        {
            out_obj->output.elements[_index3_] = 0U;
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	4413      	add	r3, r2
 8009720:	3304      	adds	r3, #4
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 8U;
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	3308      	adds	r3, #8
 800972a:	61fb      	str	r3, [r7, #28]
    for (size_t _index3_ = 0U; _index3_ < out_obj->output.count; ++_index3_)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	3301      	adds	r3, #1
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	429a      	cmp	r2, r3
 800973a:	d3d1      	bcc.n	80096e0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0xf0>
    }
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	3307      	adds	r3, #7
 8009740:	f023 0307 	bic.w	r3, r3, #7
 8009744:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	2b00      	cmp	r3, #0
 800974e:	d006      	beq.n	800975e <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x16e>
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a4>)
 8009752:	4a11      	ldr	r2, [pc, #68]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 8009754:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8009758:	4810      	ldr	r0, [pc, #64]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 800975a:	f005 fd7d 	bl	800f258 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800975e:	6939      	ldr	r1, [r7, #16]
 8009760:	69f8      	ldr	r0, [r7, #28]
 8009762:	f7f7 fbe5 	bl	8000f30 <nunavutChooseMin>
 8009766:	4603      	mov	r3, r0
 8009768:	08da      	lsrs	r2, r3, #3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	429a      	cmp	r2, r3
 8009776:	d206      	bcs.n	8009786 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x196>
 8009778:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1b0>)
 800977a:	4a07      	ldr	r2, [pc, #28]	; (8009798 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1a8>)
 800977c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8009780:	4806      	ldr	r0, [pc, #24]	; (800979c <uavcan_node_ExecuteCommand_Response_1_3_deserialize_+0x1ac>)
 8009782:	f005 fd69 	bl	800f258 <__assert_func>
    return NUNAVUT_SUCCESS;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	08011fe0 	.word	0x08011fe0
 8009794:	08011eb0 	.word	0x08011eb0
 8009798:	08014b14 	.word	0x08014b14
 800979c:	080135e4 	.word	0x080135e4
 80097a0:	08011fe4 	.word	0x08011fe4

080097a4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_>:
/// Initialize an instance to default values. Does nothing if @param out_obj is NULL.
/// This function intentionally leaves inactive elements uninitialized; for example, members of a variable-length
/// array beyond its length are left uninitialized; aliased union memory that is not used by the first union field
/// is left uninitialized, etc. If full zero-initialization is desired, just use memset(&obj, 0, sizeof(obj)).
static inline void uavcan_node_ExecuteCommand_Response_1_3_initialize_(uavcan_node_ExecuteCommand_Response_1_3* const out_obj)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
    if (out_obj != NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x40>
    {
        size_t size_bytes = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	613b      	str	r3, [r7, #16]
        const uint8_t buf = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
        const int8_t err = uavcan_node_ExecuteCommand_Response_1_3_deserialize_(out_obj, &buf, &size_bytes);
 80097ba:	f107 0210 	add.w	r2, r7, #16
 80097be:	f107 030f 	add.w	r3, r7, #15
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ff13 	bl	80095f0 <uavcan_node_ExecuteCommand_Response_1_3_deserialize_>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(err >= 0);
 80097ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	da06      	bge.n	80097e4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x40>
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x48>)
 80097d8:	4a05      	ldr	r2, [pc, #20]	; (80097f0 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x4c>)
 80097da:	f240 210d 	movw	r1, #525	; 0x20d
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_+0x50>)
 80097e0:	f005 fd3a 	bl	800f258 <__assert_func>
        (void) err;
    }
}
 80097e4:	bf00      	nop
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	08012138 	.word	0x08012138
 80097f0:	08014ae0 	.word	0x08014ae0
 80097f4:	080135e4 	.word	0x080135e4

080097f8 <save_registers_to_flash>:
#define FLASH_BASE_ADDR       0x08060000U
volatile bool restart_pending = false;



void save_registers_to_flash(void) {
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80097fe:	f004 fb35 	bl	800de6c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;
    uint32_t SectorError;

    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009802:	2300      	movs	r3, #0
 8009804:	607b      	str	r3, [r7, #4]
    erase.Sector = FLASH_SECTOR_TO_ERASE;
 8009806:	2307      	movs	r3, #7
 8009808:	60fb      	str	r3, [r7, #12]
    erase.NbSectors = 1;
 800980a:	2301      	movs	r3, #1
 800980c:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800980e:	2302      	movs	r3, #2
 8009810:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&erase, &SectorError) != HAL_OK) {
 8009812:	463a      	mov	r2, r7
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f004 fc99 	bl	800e150 <HAL_FLASHEx_Erase>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <save_registers_to_flash+0x32>
        HAL_FLASH_Lock();
 8009824:	f004 fb44 	bl	800deb0 <HAL_FLASH_Lock>
 8009828:	e01e      	b.n	8009868 <save_registers_to_flash+0x70>
        return;
    }

    uint32_t address = FLASH_BASE_ADDR;
 800982a:	4b11      	ldr	r3, [pc, #68]	; (8009870 <save_registers_to_flash+0x78>)
 800982c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < g_num_registers; i++) {
 800982e:	2300      	movs	r3, #0
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	e013      	b.n	800985c <save_registers_to_flash+0x64>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, g_register_values[i]);
 8009834:	4a0f      	ldr	r2, [pc, #60]	; (8009874 <save_registers_to_flash+0x7c>)
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983c:	b29b      	uxth	r3, r3
 800983e:	2200      	movs	r2, #0
 8009840:	461c      	mov	r4, r3
 8009842:	4615      	mov	r5, r2
 8009844:	4622      	mov	r2, r4
 8009846:	462b      	mov	r3, r5
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	2001      	movs	r0, #1
 800984c:	f004 faba 	bl	800ddc4 <HAL_FLASH_Program>
        address += 2;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	3302      	adds	r3, #2
 8009854:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < g_num_registers; i++) {
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	3301      	adds	r3, #1
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	2204      	movs	r2, #4
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	4293      	cmp	r3, r2
 8009862:	d3e7      	bcc.n	8009834 <save_registers_to_flash+0x3c>
    }

    HAL_FLASH_Lock();
 8009864:	f004 fb24 	bl	800deb0 <HAL_FLASH_Lock>
}
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bdb0      	pop	{r4, r5, r7, pc}
 800986e:	bf00      	nop
 8009870:	08060000 	.word	0x08060000
 8009874:	20000000 	.word	0x20000000

08009878 <load_registers_from_flash>:

void load_registers_from_flash(void) {
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
    const uint16_t* flash_data = (uint16_t*)FLASH_BASE_ADDR;
 800987e:	4b17      	ldr	r3, [pc, #92]	; (80098dc <load_registers_from_flash+0x64>)
 8009880:	607b      	str	r3, [r7, #4]

    // Only load if data is not all 0xFFFF
    for (size_t i = 0; i < g_num_registers; i++) {
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	e00b      	b.n	80098a0 <load_registers_from_flash+0x28>
        if (flash_data[i] == 0xFFFF) return;  // flash uninitialized
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009896:	4293      	cmp	r3, r2
 8009898:	d01a      	beq.n	80098d0 <load_registers_from_flash+0x58>
    for (size_t i = 0; i < g_num_registers; i++) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3301      	adds	r3, #1
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	2204      	movs	r2, #4
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d3ef      	bcc.n	8009888 <load_registers_from_flash+0x10>
    }

    for (size_t i = 0; i < g_num_registers; i++) {
 80098a8:	2300      	movs	r3, #0
 80098aa:	60bb      	str	r3, [r7, #8]
 80098ac:	e00b      	b.n	80098c6 <load_registers_from_flash+0x4e>
        g_register_values[i] = flash_data[i];
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	8819      	ldrh	r1, [r3, #0]
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <load_registers_from_flash+0x68>)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < g_num_registers; i++) {
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60bb      	str	r3, [r7, #8]
 80098c6:	2204      	movs	r2, #4
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d3ef      	bcc.n	80098ae <load_registers_from_flash+0x36>
 80098ce:	e000      	b.n	80098d2 <load_registers_from_flash+0x5a>
        if (flash_data[i] == 0xFFFF) return;  // flash uninitialized
 80098d0:	bf00      	nop
    }
}
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	08060000 	.word	0x08060000
 80098e0:	20000000 	.word	0x20000000

080098e4 <micros>:
// Application-specific function prototypes
void process_canard_TX_queue(void);

// return useconds - not implemented yet
uint32_t micros(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  return 0;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <initCyphal>:
/* USER CODE END PFP */
static CanardRxSubscription g_reg_list_service_subscription;

void initCyphal(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af04      	add	r7, sp, #16
    /* Subscribe to Register List Service */
    int8_t result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_register_List_1_0_FIXED_PORT_ID_,
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <initCyphal+0x98>)
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	4a24      	ldr	r2, [pc, #144]	; (8009990 <initCyphal+0x9c>)
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	e9cd 2300 	strd	r2, r3, [sp]
 8009908:	2302      	movs	r3, #2
 800990a:	f240 1281 	movw	r2, #385	; 0x181
 800990e:	2102      	movs	r1, #2
 8009910:	4820      	ldr	r0, [pc, #128]	; (8009994 <initCyphal+0xa0>)
 8009912:	f003 f967 	bl	800cbe4 <canardRxSubscribe>
 8009916:	4603      	mov	r3, r0
 8009918:	71fb      	strb	r3, [r7, #7]
                                      uavcan_register_List_Request_1_0_EXTENT_BYTES_,
                                      CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_reg_list_service_subscription);
    if (result < 0) Error_Handler();
 800991a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991e:	2b00      	cmp	r3, #0
 8009920:	da01      	bge.n	8009926 <initCyphal+0x32>
 8009922:	f000 fd8c 	bl	800a43e <Error_Handler>

    /* Subscribe to Register Access Service */
    result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_register_Access_1_0_FIXED_PORT_ID_,
 8009926:	4b1c      	ldr	r3, [pc, #112]	; (8009998 <initCyphal+0xa4>)
 8009928:	9302      	str	r3, [sp, #8]
 800992a:	4a19      	ldr	r2, [pc, #100]	; (8009990 <initCyphal+0x9c>)
 800992c:	f04f 0300 	mov.w	r3, #0
 8009930:	e9cd 2300 	strd	r2, r3, [sp]
 8009934:	f240 2303 	movw	r3, #515	; 0x203
 8009938:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800993c:	2102      	movs	r1, #2
 800993e:	4815      	ldr	r0, [pc, #84]	; (8009994 <initCyphal+0xa0>)
 8009940:	f003 f950 	bl	800cbe4 <canardRxSubscribe>
 8009944:	4603      	mov	r3, r0
 8009946:	71fb      	strb	r3, [r7, #7]
                               uavcan_register_Access_Request_1_0_EXTENT_BYTES_,
                               CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_reg_access_service_subscription);
    if (result < 0) Error_Handler();
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da01      	bge.n	8009954 <initCyphal+0x60>
 8009950:	f000 fd75 	bl	800a43e <Error_Handler>

    /* Subscribe to ExecuteCommand Service */
    result = canardRxSubscribe(&canard, CanardTransferKindRequest, uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_,
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <initCyphal+0xa8>)
 8009956:	9302      	str	r3, [sp, #8]
 8009958:	4a0d      	ldr	r2, [pc, #52]	; (8009990 <initCyphal+0x9c>)
 800995a:	f04f 0300 	mov.w	r3, #0
 800995e:	e9cd 2300 	strd	r2, r3, [sp]
 8009962:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009966:	f240 12b3 	movw	r2, #435	; 0x1b3
 800996a:	2102      	movs	r1, #2
 800996c:	4809      	ldr	r0, [pc, #36]	; (8009994 <initCyphal+0xa0>)
 800996e:	f003 f939 	bl	800cbe4 <canardRxSubscribe>
 8009972:	4603      	mov	r3, r0
 8009974:	71fb      	strb	r3, [r7, #7]
                               uavcan_node_ExecuteCommand_Request_1_3_EXTENT_BYTES_,
                               CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, &g_exec_command_service_subscription);
    if (result < 0) Error_Handler();
 8009976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800997a:	2b00      	cmp	r3, #0
 800997c:	da01      	bge.n	8009982 <initCyphal+0x8e>
 800997e:	f000 fd5e 	bl	800a43e <Error_Handler>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	200006c8 	.word	0x200006c8
 8009990:	001e8480 	.word	0x001e8480
 8009994:	20000224 	.word	0x20000224
 8009998:	20000490 	.word	0x20000490
 800999c:	20000260 	.word	0x20000260

080099a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80099a0:	b5b0      	push	{r4, r5, r7, lr}
 80099a2:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 80099a6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80099a8:	f003 fa06 	bl	800cdb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80099ac:	f000 f8fe 	bl	8009bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80099b0:	f000 f99e 	bl	8009cf0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80099b4:	f000 f966 	bl	8009c84 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  load_registers_from_flash();
 80099b8:	f7ff ff5e 	bl	8009878 <load_registers_from_flash>
  HAL_CAN_Start(&hcan1);
 80099bc:	4870      	ldr	r0, [pc, #448]	; (8009b80 <main+0x1e0>)
 80099be:	f003 fc6d 	bl	800d29c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80099c2:	2102      	movs	r1, #2
 80099c4:	486e      	ldr	r0, [pc, #440]	; (8009b80 <main+0x1e0>)
 80099c6:	f003 fe9f 	bl	800d708 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef Filter;

  // accept all frames - filtration is managed by software
  Filter.FilterIdHigh = 0x0000;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
  Filter.FilterIdLow = 0x0000;
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  Filter.FilterMaskIdHigh = 0x0000;
 80099d6:	2300      	movs	r3, #0
 80099d8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  Filter.FilterMaskIdLow = 0x0000;
 80099dc:	2300      	movs	r3, #0
 80099de:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  Filter.FilterBank = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
  Filter.FilterActivation = ENABLE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  Filter.SlaveStartFilterBank = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8009a06:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	485c      	ldr	r0, [pc, #368]	; (8009b80 <main+0x1e0>)
 8009a0e:	f003 fb65 	bl	800d0dc <HAL_CAN_ConfigFilter>

  // Initialization of a canard instance with the previous allocator
  canard = canardInit(&memAllocate, &memFree);
 8009a12:	4c5c      	ldr	r4, [pc, #368]	; (8009b84 <main+0x1e4>)
 8009a14:	463b      	mov	r3, r7
 8009a16:	4a5c      	ldr	r2, [pc, #368]	; (8009b88 <main+0x1e8>)
 8009a18:	495c      	ldr	r1, [pc, #368]	; (8009b8c <main+0x1ec>)
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f002 ff36 	bl	800c88c <canardInit>
 8009a20:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009a24:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8009a28:	461d      	mov	r5, r3
 8009a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initCyphal();
 8009a36:	f7ff ff5d 	bl	80098f4 <initCyphal>
  canard.node_id = 96;
 8009a3a:	4b52      	ldr	r3, [pc, #328]	; (8009b84 <main+0x1e4>)
 8009a3c:	2260      	movs	r2, #96	; 0x60
 8009a3e:	711a      	strb	r2, [r3, #4]

  queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
 8009a40:	4c53      	ldr	r4, [pc, #332]	; (8009b90 <main+0x1f0>)
 8009a42:	463b      	mov	r3, r7
 8009a44:	2208      	movs	r2, #8
 8009a46:	2164      	movs	r1, #100	; 0x64
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f002 ff5d 	bl	800c908 <canardTxInit>
 8009a4e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009a52:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8009a56:	461d      	mov	r5, r3
 8009a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	6023      	str	r3, [r4, #0]
                        CANARD_MTU_CAN_CLASSIC);

  CanardRxSubscription subscription; // Transfer subscription state.

  if( canardRxSubscribe((CanardInstance *const)&canard,
 8009a60:	f240 6154 	movw	r1, #1620	; 0x654
 8009a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a68:	9302      	str	r3, [sp, #8]
 8009a6a:	4a4a      	ldr	r2, [pc, #296]	; (8009b94 <main+0x1f4>)
 8009a6c:	f04f 0300 	mov.w	r3, #0
 8009a70:	e9cd 2300 	strd	r2, r3, [sp]
 8009a74:	f240 1301 	movw	r3, #257	; 0x101
 8009a78:	460a      	mov	r2, r1
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	4841      	ldr	r0, [pc, #260]	; (8009b84 <main+0x1e4>)
 8009a7e:	f003 f8b1 	bl	800cbe4 <canardRxSubscribe>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d001      	beq.n	8009a8c <main+0xec>
                        MSG_PORT_ID,
                        uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &subscription) != 1 )
                        {
                          Error_Handler();
 8009a88:	f000 fcd9 	bl	800a43e <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Create a heartbeat message
    uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 8009a8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009a90:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009a94:	461a      	mov	r2, r3
 8009a96:	2300      	movs	r3, #0
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	6053      	str	r3, [r2, #4]
 8009a9c:	4b3e      	ldr	r3, [pc, #248]	; (8009b98 <main+0x1f8>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009aa4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009aa8:	601a      	str	r2, [r3, #0]
                                                .health = {uavcan_node_Health_1_0_NOMINAL},
                                                .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

    // Serialize the heartbeat message
    if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 8009aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009aae:	4a3b      	ldr	r2, [pc, #236]	; (8009b9c <main+0x1fc>)
 8009ab0:	493b      	ldr	r1, [pc, #236]	; (8009ba0 <main+0x200>)
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f8 fe98 	bl	80027e8 <uavcan_node_Heartbeat_1_0_serialize_>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da01      	bge.n	8009ac2 <main+0x122>
    {
      Error_Handler();
 8009abe:	f000 fcbe 	bl	800a43e <Error_Handler>
    }

    // Create a transfer for the heartbeat message
    const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
 8009ac2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009ac6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8009aca:	2204      	movs	r2, #4
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009ad2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	705a      	strb	r2, [r3, #1]
 8009ada:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009ade:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8009ae2:	f641 5255 	movw	r2, #7509	; 0x1d55
 8009ae6:	805a      	strh	r2, [r3, #2]
 8009ae8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009aec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	711a      	strb	r2, [r3, #4]
 8009af4:	4b2b      	ldr	r3, [pc, #172]	; (8009ba4 <main+0x204>)
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009afc:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8009b00:	715a      	strb	r2, [r3, #5]
                                                      .transfer_kind = CanardTransferKindMessage,
                                                      .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
                                                      .remote_node_id = CANARD_NODE_ID_UNSET,
                                                      .transfer_id = my_message_transfer_id,};

    if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
 8009b02:	4b26      	ldr	r3, [pc, #152]	; (8009b9c <main+0x1fc>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a26      	ldr	r2, [pc, #152]	; (8009ba0 <main+0x200>)
 8009b08:	9202      	str	r2, [sp, #8]
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	f107 0320 	add.w	r3, r7, #32
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	491a      	ldr	r1, [pc, #104]	; (8009b84 <main+0x1e4>)
 8009b1c:	481c      	ldr	r0, [pc, #112]	; (8009b90 <main+0x1f0>)
 8009b1e:	f002 ff11 	bl	800c944 <canardTxPush>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da01      	bge.n	8009b2c <main+0x18c>
                    0,     					// Zero if transmission deadline is not limited.
                    &transfer_metadata,
                    hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
                    hbeat_ser_buf) < 0 )
                    {
                      Error_Handler();
 8009b28:	f000 fc89 	bl	800a43e <Error_Handler>
                    }

    // Block for a second before generating the next transfer
    uint32_t timestamp = HAL_GetTick();
 8009b2c:	f003 f9aa 	bl	800ce84 <HAL_GetTick>
 8009b30:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
    while( HAL_GetTick() < timestamp + 1000u )
 8009b34:	e004      	b.n	8009b40 <main+0x1a0>
    {
      process_canard_TX_queue();
 8009b36:	f000 f92b 	bl	8009d90 <process_canard_TX_queue>
      HAL_Delay(10);
 8009b3a:	200a      	movs	r0, #10
 8009b3c:	f003 f9ae 	bl	800ce9c <HAL_Delay>
    while( HAL_GetTick() < timestamp + 1000u )
 8009b40:	f003 f9a0 	bl	800ce84 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009b4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d3f1      	bcc.n	8009b36 <main+0x196>
    }

    // Increase uptime
    test_uptimeSec++;
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <main+0x1f8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3301      	adds	r3, #1
 8009b58:	4a0f      	ldr	r2, [pc, #60]	; (8009b98 <main+0x1f8>)
 8009b5a:	6013      	str	r3, [r2, #0]
    // Increment the transfer_id variable
    my_message_transfer_id++;
 8009b5c:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <main+0x204>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	3301      	adds	r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <main+0x204>)
 8009b66:	701a      	strb	r2, [r3, #0]

    /* USER CODE END WHILE */
    if (restart_pending)
 8009b68:	4b0f      	ldr	r3, [pc, #60]	; (8009ba8 <main+0x208>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d08c      	beq.n	8009a8c <main+0xec>
    {
    	save_registers_to_flash();
 8009b72:	f7ff fe41 	bl	80097f8 <save_registers_to_flash>
        HAL_Delay(100);  // Let Yakut receive the response before reset
 8009b76:	2064      	movs	r0, #100	; 0x64
 8009b78:	f003 f990 	bl	800ce9c <HAL_Delay>
        NVIC_SystemReset();
 8009b7c:	f7f7 f9c2 	bl	8000f04 <__NVIC_SystemReset>
 8009b80:	200001fc 	.word	0x200001fc
 8009b84:	20000224 	.word	0x20000224
 8009b88:	0800a427 	.word	0x0800a427
 8009b8c:	0800a40d 	.word	0x0800a40d
 8009b90:	20000240 	.word	0x20000240
 8009b94:	001e8480 	.word	0x001e8480
 8009b98:	20000258 	.word	0x20000258
 8009b9c:	20000008 	.word	0x20000008
 8009ba0:	200006b8 	.word	0x200006b8
 8009ba4:	20000254 	.word	0x20000254
 8009ba8:	20000488 	.word	0x20000488

08009bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b094      	sub	sp, #80	; 0x50
 8009bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bb2:	f107 031c 	add.w	r3, r7, #28
 8009bb6:	2234      	movs	r2, #52	; 0x34
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f006 f9bd 	bl	800ff3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bc0:	f107 0308 	add.w	r3, r7, #8
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	605a      	str	r2, [r3, #4]
 8009bca:	609a      	str	r2, [r3, #8]
 8009bcc:	60da      	str	r2, [r3, #12]
 8009bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	607b      	str	r3, [r7, #4]
 8009bd4:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <SystemClock_Config+0xd0>)
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	4a28      	ldr	r2, [pc, #160]	; (8009c7c <SystemClock_Config+0xd0>)
 8009bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bde:	6413      	str	r3, [r2, #64]	; 0x40
 8009be0:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <SystemClock_Config+0xd0>)
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bec:	2300      	movs	r3, #0
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4b23      	ldr	r3, [pc, #140]	; (8009c80 <SystemClock_Config+0xd4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a22      	ldr	r2, [pc, #136]	; (8009c80 <SystemClock_Config+0xd4>)
 8009bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	4b20      	ldr	r3, [pc, #128]	; (8009c80 <SystemClock_Config+0xd4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c12:	2302      	movs	r3, #2
 8009c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8009c20:	23a0      	movs	r3, #160	; 0xa0
 8009c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c24:	2302      	movs	r3, #2
 8009c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009c28:	2302      	movs	r3, #2
 8009c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c30:	f107 031c 	add.w	r3, r7, #28
 8009c34:	4618      	mov	r0, r3
 8009c36:	f005 f871 	bl	800ed1c <HAL_RCC_OscConfig>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009c40:	f000 fbfd 	bl	800a43e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c44:	230f      	movs	r3, #15
 8009c46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	2105      	movs	r1, #5
 8009c62:	4618      	mov	r0, r3
 8009c64:	f004 fd44 	bl	800e6f0 <HAL_RCC_ClockConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8009c6e:	f000 fbe6 	bl	800a43e <Error_Handler>
  }
}
 8009c72:	bf00      	nop
 8009c74:	3750      	adds	r7, #80	; 0x50
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	40023800 	.word	0x40023800
 8009c80:	40007000 	.word	0x40007000

08009c84 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009c88:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009c8a:	4a18      	ldr	r2, [pc, #96]	; (8009cec <MX_CAN1_Init+0x68>)
 8009c8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8009c8e:	4b16      	ldr	r3, [pc, #88]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009c90:	2204      	movs	r2, #4
 8009c92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009c94:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009ca2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8009ca6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009cae:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8009cc0:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009cc6:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009cd2:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <MX_CAN1_Init+0x64>)
 8009cd4:	f003 f906 	bl	800cee4 <HAL_CAN_Init>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8009cde:	f000 fbae 	bl	800a43e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009ce2:	bf00      	nop
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200001fc 	.word	0x200001fc
 8009cec:	40006400 	.word	0x40006400

08009cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	605a      	str	r2, [r3, #4]
 8009d00:	609a      	str	r2, [r3, #8]
 8009d02:	60da      	str	r2, [r3, #12]
 8009d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
 8009d0a:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0e:	4a1e      	ldr	r2, [pc, #120]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d14:	6313      	str	r3, [r2, #48]	; 0x30
 8009d16:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d22:	2300      	movs	r3, #0
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d2c:	f043 0301 	orr.w	r3, r3, #1
 8009d30:	6313      	str	r3, [r2, #48]	; 0x30
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d3e:	2300      	movs	r3, #0
 8009d40:	603b      	str	r3, [r7, #0]
 8009d42:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	4a10      	ldr	r2, [pc, #64]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d48:	f043 0302 	orr.w	r3, r3, #2
 8009d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <MX_GPIO_Init+0x98>)
 8009d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2120      	movs	r1, #32
 8009d5e:	480b      	ldr	r0, [pc, #44]	; (8009d8c <MX_GPIO_Init+0x9c>)
 8009d60:	f004 fcac 	bl	800e6bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009d64:	2320      	movs	r3, #32
 8009d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4804      	ldr	r0, [pc, #16]	; (8009d8c <MX_GPIO_Init+0x9c>)
 8009d7c:	f004 fb0a 	bl	800e394 <HAL_GPIO_Init>

}
 8009d80:	bf00      	nop
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	40020000 	.word	0x40020000

08009d90 <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
 8009d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d94:	b08b      	sub	sp, #44	; 0x2c
 8009d96:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9c:	e039      	b.n	8009e12 <process_canard_TX_queue+0x82>
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	d00c      	beq.n	8009dc2 <process_canard_TX_queue+0x32>
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8009dae:	f7ff fd99 	bl	80098e4 <micros>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2200      	movs	r2, #0
 8009db6:	461c      	mov	r4, r3
 8009db8:	4615      	mov	r5, r2
 8009dba:	4544      	cmp	r4, r8
 8009dbc:	eb75 0309 	sbcs.w	r3, r5, r9
 8009dc0:	d21d      	bcs.n	8009dfe <process_canard_TX_queue+0x6e>
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61bb      	str	r3, [r7, #24]

      TxHeader.DLC = ti->frame.payload_size;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	61fb      	str	r3, [r7, #28]
      TxHeader.ExtId = ti->frame.extended_can_id;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	613b      	str	r3, [r7, #16]

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dde:	1d3b      	adds	r3, r7, #4
 8009de0:	4618      	mov	r0, r3
 8009de2:	f006 f93a 	bl	801005a <memcpy>

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8009de6:	463b      	mov	r3, r7
 8009de8:	1d3a      	adds	r2, r7, #4
 8009dea:	f107 010c 	add.w	r1, r7, #12
 8009dee:	480f      	ldr	r0, [pc, #60]	; (8009e2c <process_canard_TX_queue+0x9c>)
 8009df0:	f003 fa98 	bl	800d324 <HAL_CAN_AddTxMessage>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <process_canard_TX_queue+0x6e>
      {
        break;
 8009dfa:	bf00      	nop
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}
 8009dfc:	e010      	b.n	8009e20 <process_canard_TX_queue+0x90>
    canard.memory_free(&canard, canardTxPop(&queue, ti));
 8009dfe:	4b0c      	ldr	r3, [pc, #48]	; (8009e30 <process_canard_TX_queue+0xa0>)
 8009e00:	68de      	ldr	r6, [r3, #12]
 8009e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e04:	480b      	ldr	r0, [pc, #44]	; (8009e34 <process_canard_TX_queue+0xa4>)
 8009e06:	f002 fe3c 	bl	800ca82 <canardTxPop>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4808      	ldr	r0, [pc, #32]	; (8009e30 <process_canard_TX_queue+0xa0>)
 8009e10:	47b0      	blx	r6
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8009e12:	4808      	ldr	r0, [pc, #32]	; (8009e34 <process_canard_TX_queue+0xa4>)
 8009e14:	f002 fe20 	bl	800ca58 <canardTxPeek>
 8009e18:	6278      	str	r0, [r7, #36]	; 0x24
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1be      	bne.n	8009d9e <process_canard_TX_queue+0xe>
}
 8009e20:	bf00      	nop
 8009e22:	372c      	adds	r7, #44	; 0x2c
 8009e24:	46bd      	mov	sp, r7
 8009e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e2a:	bf00      	nop
 8009e2c:	200001fc 	.word	0x200001fc
 8009e30:	20000224 	.word	0x20000224
 8009e34:	20000240 	.word	0x20000240

08009e38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e3c:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009e46:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8009e4a:	6018      	str	r0, [r3, #0]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0};
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8009e52:	2300      	movs	r3, #0
 8009e54:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0

    /* Read the pending CAN message */
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8009e58:	f207 71cc 	addw	r1, r7, #1996	; 0x7cc
 8009e5c:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8009e60:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009e64:	f2a3 70e4 	subw	r0, r3, #2020	; 0x7e4
 8009e68:	460b      	mov	r3, r1
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6800      	ldr	r0, [r0, #0]
 8009e6e:	f003 fb29 	bl	800d4c4 <HAL_CAN_GetRxMessage>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f040 829e 	bne.w	800a3b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x57e>
        return; // Error reading CAN message
    }

    /* Wrap into CanardFrame */
    CanardFrame rxf;
    rxf.extended_can_id = RxHeader.ExtId;
 8009e7a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8009e7e:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
    rxf.payload_size = RxHeader.DLC;
 8009e82:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8009e86:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    rxf.payload = RxData;
 8009e8a:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 8009e8e:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8

    /* Attempt to parse into a CanardRxTransfer */
    CanardRxTransfer transfer;
    if (canardRxAccept(&canard, micros(), &rxf, 0, &transfer, NULL) != 1)
 8009e92:	f7ff fd27 	bl	80098e4 <micros>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2200      	movs	r2, #0
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	61fa      	str	r2, [r7, #28]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009eb6:	48dd      	ldr	r0, [pc, #884]	; (800a22c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8009eb8:	f002 fe04 	bl	800cac4 <canardRxAccept>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	f040 827b 	bne.w	800a3ba <HAL_CAN_RxFifo0MsgPendingCallback+0x582>
    {
        return; // Not a valid Cyphal transfer or still incomplete
    }

    /* Identify and Handle Requests */
    if (transfer.metadata.transfer_kind == CanardTransferKindRequest)
 8009ec4:	f897 37a9 	ldrb.w	r3, [r7, #1961]	; 0x7a9
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	f040 826c 	bne.w	800a3a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56e>
    {
        /* ---- Handle Register List Request (List_1_0) ---- */
        if (transfer.metadata.port_id == uavcan_register_List_1_0_FIXED_PORT_ID_)
 8009ece:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 8009ed2:	f240 1281 	movw	r2, #385	; 0x181
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	f040 8087 	bne.w	8009fea <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
        {
            uavcan_register_List_Request_1_0 request;
            size_t request_payload_size = transfer.payload_size;
 8009edc:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8009ee0:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0

            if (uavcan_register_List_Request_1_0_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 8009ee4:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8009ee8:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8009eec:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f8 f8ad 	bl	8002050 <uavcan_register_List_Request_1_0_deserialize_>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f2c0 8260 	blt.w	800a3be <HAL_CAN_RxFifo0MsgPendingCallback+0x586>
                return;

            uavcan_register_List_Response_1_0 response;
            uavcan_register_List_Response_1_0_initialize_(&response);
 8009efe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f8 fad6 	bl	80024b4 <uavcan_register_List_Response_1_0_initialize_>

            if (request.index < g_num_registers)
 8009f08:	f8b7 37a4 	ldrh.w	r3, [r7, #1956]	; 0x7a4
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2304      	movs	r3, #4
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d226      	bcs.n	8009f62 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            {
                const char* reg_name = g_register_names[request.index];
 8009f14:	f8b7 37a4 	ldrh.w	r3, [r7, #1956]	; 0x7a4
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4bc5      	ldr	r3, [pc, #788]	; (800a230 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
                size_t name_len = strlen(reg_name);
 8009f24:	f8d7 07f0 	ldr.w	r0, [r7, #2032]	; 0x7f0
 8009f28:	f7f6 f9d2 	bl	80002d0 <strlen>
 8009f2c:	f8c7 0804 	str.w	r0, [r7, #2052]	; 0x804
                if (name_len > 255U) name_len = 255U;
 8009f30:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8009f34:	2bff      	cmp	r3, #255	; 0xff
 8009f36:	d902      	bls.n	8009f3e <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
 8009f38:	23ff      	movs	r3, #255	; 0xff
 8009f3a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
                memcpy(response.name.name.elements, reg_name, name_len);
 8009f3e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009f42:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8009f46:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f006 f885 	bl	801005a <memcpy>
                response.name.name.count = name_len;
 8009f50:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009f54:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009f58:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8009f5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009f60:	e006      	b.n	8009f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
            }
            else
            {
                response.name.name.count = 0U;
 8009f62:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8009f66:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            }

            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_register_List_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 8009f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f74:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
            uavcan_register_List_Response_1_0_serialize_(&response, resp_payload, &resp_payload_size);
 8009f78:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8009f7c:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8009f80:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f8 f8d1 	bl	800212c <uavcan_register_List_Response_1_0_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 8009f8a:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 8009f8e:	f887 3794 	strb.w	r3, [r7, #1940]	; 0x794
 8009f92:	2301      	movs	r3, #1
 8009f94:	f887 3795 	strb.w	r3, [r7, #1941]	; 0x795
 8009f98:	f240 1381 	movw	r3, #385	; 0x181
 8009f9c:	f8a7 3796 	strh.w	r3, [r7, #1942]	; 0x796
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_register_List_1_0_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 8009fa0:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 8009fa4:	f887 3798 	strb.w	r3, [r7, #1944]	; 0x798
                .transfer_id = transfer.metadata.transfer_id,
 8009fa8:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 8009fac:	f887 3799 	strb.w	r3, [r7, #1945]	; 0x799
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 8009fb0:	f7ff fc98 	bl	80098e4 <micros>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	469a      	mov	sl, r3
 8009fba:	4693      	mov	fp, r2
 8009fbc:	4b9d      	ldr	r3, [pc, #628]	; (800a234 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8009fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	f14b 0300 	adc.w	r3, fp, #0
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8009fce:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8009fd2:	9202      	str	r2, [sp, #8]
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fe0:	4992      	ldr	r1, [pc, #584]	; (800a22c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8009fe2:	4895      	ldr	r0, [pc, #596]	; (800a238 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8009fe4:	f002 fcae 	bl	800c944 <canardTxPush>
 8009fe8:	e1dd      	b.n	800a3a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56e>
        }

        /* ---- Handle Register Access Request (Access_1_0) ---- */
        else if (transfer.metadata.port_id == uavcan_register_Access_1_0_FIXED_PORT_ID_)
 8009fea:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 8009fee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009ff2:	f040 80e8 	bne.w	800a1c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x38e>
        {
            uavcan_register_Access_Request_1_0 request;
            size_t request_payload_size = transfer.payload_size;
 8009ff6:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8009ffa:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790

            if (uavcan_register_Access_Request_1_0_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 8009ffe:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800a002:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 800a006:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fb52 	bl	80086b4 <uavcan_register_Access_Request_1_0_deserialize_>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	f2c0 81d5 	blt.w	800a3c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x58a>
                return;

            uavcan_register_Access_Response_1_0 response;
            uavcan_register_Access_Response_1_0_initialize_(&response);
 800a018:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff f887 	bl	8009130 <uavcan_register_Access_Response_1_0_initialize_>
            uavcan_register_Value_1_0_initialize_(&response.value);
 800a022:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a026:	3310      	adds	r3, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe f9cb 	bl	80083c4 <uavcan_register_Value_1_0_initialize_>

            char reg_name[256] = {0};
 800a02e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a032:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	3304      	adds	r3, #4
 800a03c:	22fc      	movs	r2, #252	; 0xfc
 800a03e:	2100      	movs	r1, #0
 800a040:	4618      	mov	r0, r3
 800a042:	f005 ff7a 	bl	800ff3a <memset>
            memcpy(reg_name, request.name.name.elements, request.name.name.count);
 800a046:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a04a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a04e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a052:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 800a056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a05a:	4618      	mov	r0, r3
 800a05c:	f005 fffd 	bl	801005a <memcpy>
            reg_name[request.name.name.count] = '\0';
 800a060:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a064:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a068:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a06c:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800a070:	f2a2 72dc 	subw	r2, r2, #2012	; 0x7dc
 800a074:	2100      	movs	r1, #0
 800a076:	54d1      	strb	r1, [r2, r3]

            bool is_write_request = request.value._tag_ != 0;
 800a078:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a07c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a080:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800a084:	2b00      	cmp	r3, #0
 800a086:	bf14      	ite	ne
 800a088:	2301      	movne	r3, #1
 800a08a:	2300      	moveq	r3, #0
 800a08c:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
            int found_index = -1;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
            for (size_t i = 0; i < g_num_registers; i++)
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800a09e:	e017      	b.n	800a0d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>
            {
                if (strcmp(reg_name, g_register_names[i]) == 0)
 800a0a0:	4a63      	ldr	r2, [pc, #396]	; (800a230 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 800a0a2:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 800a0a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f6 f8ad 	bl	8000210 <strcmp>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x28e>
                {
                    found_index = i;
 800a0bc:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 800a0c0:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
                    break;
 800a0c4:	e009      	b.n	800a0da <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
            for (size_t i = 0; i < g_num_registers; i++)
 800a0c6:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800a0d0:	2204      	movs	r2, #4
 800a0d2:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d3e2      	bcc.n	800a0a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
                }
            }

            if (found_index != -1)
 800a0da:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800a0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e2:	d02e      	beq.n	800a142 <HAL_CAN_RxFifo0MsgPendingCallback+0x30a>
            {
                if (is_write_request && request.value.natural16.value.count > 0)
 800a0e4:	f897 37f7 	ldrb.w	r3, [r7, #2039]	; 0x7f7
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d012      	beq.n	800a112 <HAL_CAN_RxFifo0MsgPendingCallback+0x2da>
 800a0ec:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a0f0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a0f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <HAL_CAN_RxFifo0MsgPendingCallback+0x2da>
                {
                    g_register_values[found_index] = (uint16_t)request.value.natural16.value.elements[0];
 800a0fc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a100:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a104:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
 800a108:	4a4c      	ldr	r2, [pc, #304]	; (800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 800a10a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800a10e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                }

                uavcan_register_Value_1_0_select_natural16_(&response.value);
 800a112:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a116:	3310      	adds	r3, #16
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe f98e 	bl	800843a <uavcan_register_Value_1_0_select_natural16_>
                response.value.natural16.value.count = 1;
 800a11e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a122:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a126:	2201      	movs	r2, #1
 800a128:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                response.value.natural16.value.elements[0] = g_register_values[found_index];
 800a12c:	4a43      	ldr	r2, [pc, #268]	; (800a23c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 800a12e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800a132:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a136:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a13a:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a13e:	821a      	strh	r2, [r3, #16]
 800a140:	e005      	b.n	800a14e <HAL_CAN_RxFifo0MsgPendingCallback+0x316>
            }
            else
            {
                uavcan_register_Value_1_0_select_empty_(&response.value);
 800a142:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a146:	3310      	adds	r3, #16
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe f965 	bl	8008418 <uavcan_register_Value_1_0_select_empty_>
            }

            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_register_Access_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 800a14e:	f240 130b 	movw	r3, #267	; 0x10b
 800a152:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
            uavcan_register_Access_Response_1_0_serialize_(&response, resp_payload, &resp_payload_size);
 800a156:	f207 728c 	addw	r2, r7, #1932	; 0x78c
 800a15a:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800a15e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fb8a 	bl	800887c <uavcan_register_Access_Response_1_0_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 800a168:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 800a16c:	f887 3784 	strb.w	r3, [r7, #1924]	; 0x784
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3785 	strb.w	r3, [r7, #1925]	; 0x785
 800a176:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a17a:	f8a7 3786 	strh.w	r3, [r7, #1926]	; 0x786
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_register_Access_1_0_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 800a17e:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 800a182:	f887 3788 	strb.w	r3, [r7, #1928]	; 0x788
                .transfer_id = transfer.metadata.transfer_id,
 800a186:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 800a18a:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 800a18e:	f7ff fba9 	bl	80098e4 <micros>
 800a192:	4603      	mov	r3, r0
 800a194:	2200      	movs	r2, #0
 800a196:	461c      	mov	r4, r3
 800a198:	4615      	mov	r5, r2
 800a19a:	4b26      	ldr	r3, [pc, #152]	; (800a234 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 800a19c:	18e3      	adds	r3, r4, r3
 800a19e:	60bb      	str	r3, [r7, #8]
 800a1a0:	f145 0300 	adc.w	r3, r5, #0
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	f8d7 378c 	ldr.w	r3, [r7, #1932]	; 0x78c
 800a1aa:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800a1ae:	9202      	str	r2, [sp, #8]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1bc:	491b      	ldr	r1, [pc, #108]	; (800a22c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 800a1be:	481e      	ldr	r0, [pc, #120]	; (800a238 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 800a1c0:	f002 fbc0 	bl	800c944 <canardTxPush>
 800a1c4:	e0ef      	b.n	800a3a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56e>
        }

        /* ---- Handle ExecuteCommand Request (ExecuteCommand_1_3) ---- */
        else if (transfer.metadata.port_id == uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_)
 800a1c6:	f8b7 37aa 	ldrh.w	r3, [r7, #1962]	; 0x7aa
 800a1ca:	f240 12b3 	movw	r2, #435	; 0x1b3
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	f040 80e9 	bne.w	800a3a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56e>
        {
            uavcan_node_ExecuteCommand_Request_1_3 request;
            size_t request_payload_size = transfer.payload_size;
 800a1d4:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 800a1d8:	f8c7 3780 	str.w	r3, [r7, #1920]	; 0x780

            if (uavcan_node_ExecuteCommand_Request_1_3_deserialize_(&request, (const uint8_t*)transfer.payload, &request_payload_size) < 0)
 800a1dc:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800a1e0:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800a1e4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe ffcb 	bl	8009184 <uavcan_node_ExecuteCommand_Request_1_3_deserialize_>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f2c0 80e8 	blt.w	800a3c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x58e>
                return;

            uavcan_node_ExecuteCommand_Response_1_3 response;
            uavcan_node_ExecuteCommand_Response_1_3_initialize_(&response);
 800a1f6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff fad2 	bl	80097a4 <uavcan_node_ExecuteCommand_Response_1_3_initialize_>
//                    strcpy((char*)response.output.elements, "Unknown command");
//                    response.output.count = strlen("Unknown command");
//                    break;
//            }

            switch (request.command)
 800a200:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a204:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a20e:	4293      	cmp	r3, r2
 800a210:	d016      	beq.n	800a240 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>
 800a212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a216:	da75      	bge.n	800a304 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>
 800a218:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d055      	beq.n	800a2cc <HAL_CAN_RxFifo0MsgPendingCallback+0x494>
 800a220:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a224:	4293      	cmp	r3, r2
 800a226:	d024      	beq.n	800a272 <HAL_CAN_RxFifo0MsgPendingCallback+0x43a>
 800a228:	e06c      	b.n	800a304 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>
 800a22a:	bf00      	nop
 800a22c:	20000224 	.word	0x20000224
 800a230:	080141c4 	.word	0x080141c4
 800a234:	000f4240 	.word	0x000f4240
 800a238:	20000240 	.word	0x20000240
 800a23c:	20000000 	.word	0x20000000
//                    response.output.count = strlen("Restarting...");
//                    HAL_Delay(100);  // give time for response to send
//                    NVIC_SystemReset();
//                    break;
            case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_RESTART:
                response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a240:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a244:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
                strcpy((char*)response.output.elements, "Restarting...");
 800a24c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a250:	3304      	adds	r3, #4
 800a252:	4a60      	ldr	r2, [pc, #384]	; (800a3d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x59c>)
 800a254:	461c      	mov	r4, r3
 800a256:	4613      	mov	r3, r2
 800a258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a25a:	c407      	stmia	r4!, {r0, r1, r2}
 800a25c:	8023      	strh	r3, [r4, #0]
                response.output.count = strlen("Restarting...");
 800a25e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a262:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a266:	220d      	movs	r2, #13
 800a268:	635a      	str	r2, [r3, #52]	; 0x34
                restart_pending = true;  // Delay reset until response is sent
 800a26a:	4b5b      	ldr	r3, [pc, #364]	; (800a3d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a0>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	701a      	strb	r2, [r3, #0]
                break;
 800a270:	e05e      	b.n	800a330 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>


                case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_FACTORY_RESET:
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a272:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a276:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a27a:	2200      	movs	r2, #0
 800a27c:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Factory reset...");
 800a27e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a282:	3304      	adds	r3, #4
 800a284:	4a55      	ldr	r2, [pc, #340]	; (800a3dc <HAL_CAN_RxFifo0MsgPendingCallback+0x5a4>)
 800a286:	461c      	mov	r4, r3
 800a288:	4615      	mov	r5, r2
 800a28a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a28c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	7023      	strb	r3, [r4, #0]
                    response.output.count = strlen("Factory reset...");
 800a292:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a296:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a29a:	2210      	movs	r2, #16
 800a29c:	635a      	str	r2, [r3, #52]	; 0x34
                    // Optional: zero g_register_values and re-save
                    for (size_t i = 0; i < g_num_registers; i++) g_register_values[i] = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 800a2a4:	e00a      	b.n	800a2bc <HAL_CAN_RxFifo0MsgPendingCallback+0x484>
 800a2a6:	4a4e      	ldr	r2, [pc, #312]	; (800a3e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a8>)
 800a2a8:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a2b2:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 800a2bc:	2204      	movs	r2, #4
 800a2be:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d3ef      	bcc.n	800a2a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x46e>
                    save_registers_to_flash();
 800a2c6:	f7ff fa97 	bl	80097f8 <save_registers_to_flash>
                    break;
 800a2ca:	e031      	b.n	800a330 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>

                case uavcan_node_ExecuteCommand_Request_1_3_COMMAND_STORE_PERSISTENT_STATES:
                    save_registers_to_flash();
 800a2cc:	f7ff fa94 	bl	80097f8 <save_registers_to_flash>
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_SUCCESS;
 800a2d0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a2d4:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Storing registers...");
 800a2dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	4a40      	ldr	r2, [pc, #256]	; (800a3e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ac>)
 800a2e4:	461c      	mov	r4, r3
 800a2e6:	4615      	mov	r5, r2
 800a2e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2f0:	6020      	str	r0, [r4, #0]
 800a2f2:	3404      	adds	r4, #4
 800a2f4:	7021      	strb	r1, [r4, #0]
                    response.output.count = strlen("Storing registers...");
 800a2f6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a2fa:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a2fe:	2214      	movs	r2, #20
 800a300:	635a      	str	r2, [r3, #52]	; 0x34
                    break;
 800a302:	e015      	b.n	800a330 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>

                default:
                    response.status = uavcan_node_ExecuteCommand_Response_1_3_STATUS_BAD_COMMAND;
 800a304:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a308:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a30c:	2203      	movs	r2, #3
 800a30e:	701a      	strb	r2, [r3, #0]
                    strcpy((char*)response.output.elements, "Unknown command");
 800a310:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a314:	3304      	adds	r3, #4
 800a316:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b0>)
 800a318:	461c      	mov	r4, r3
 800a31a:	4613      	mov	r3, r2
 800a31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    response.output.count = strlen("Unknown command");
 800a322:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800a326:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800a32a:	220f      	movs	r2, #15
 800a32c:	635a      	str	r2, [r3, #52]	; 0x34
                    break;
 800a32e:	bf00      	nop



            /* Serialize and Send Response */
            uint8_t resp_payload[uavcan_node_ExecuteCommand_Response_1_3_SERIALIZATION_BUFFER_SIZE_BYTES_];
            size_t resp_payload_size = sizeof(resp_payload);
 800a330:	2330      	movs	r3, #48	; 0x30
 800a332:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
            uavcan_node_ExecuteCommand_Response_1_3_serialize_(&response, resp_payload, &resp_payload_size);
 800a336:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 800a33a:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800a33e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fff4 	bl	8009330 <uavcan_node_ExecuteCommand_Response_1_3_serialize_>

            CanardTransferMetadata meta = {
                .priority = transfer.metadata.priority,
 800a348:	f897 37a8 	ldrb.w	r3, [r7, #1960]	; 0x7a8
            CanardTransferMetadata meta = {
 800a34c:	f887 3774 	strb.w	r3, [r7, #1908]	; 0x774
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3775 	strb.w	r3, [r7, #1909]	; 0x775
 800a356:	f240 13b3 	movw	r3, #435	; 0x1b3
 800a35a:	f8a7 3776 	strh.w	r3, [r7, #1910]	; 0x776
                .transfer_kind = CanardTransferKindResponse,
                .port_id = uavcan_node_ExecuteCommand_1_3_FIXED_PORT_ID_,
                .remote_node_id = transfer.metadata.remote_node_id,
 800a35e:	f897 37ac 	ldrb.w	r3, [r7, #1964]	; 0x7ac
            CanardTransferMetadata meta = {
 800a362:	f887 3778 	strb.w	r3, [r7, #1912]	; 0x778
                .transfer_id = transfer.metadata.transfer_id,
 800a366:	f897 37ad 	ldrb.w	r3, [r7, #1965]	; 0x7ad
            CanardTransferMetadata meta = {
 800a36a:	f887 3779 	strb.w	r3, [r7, #1913]	; 0x779
            };

            canardTxPush(&queue, &canard, micros() + 1000000ULL, &meta, resp_payload_size, resp_payload);
 800a36e:	f7ff fab9 	bl	80098e4 <micros>
 800a372:	4603      	mov	r3, r0
 800a374:	2200      	movs	r2, #0
 800a376:	4698      	mov	r8, r3
 800a378:	4691      	mov	r9, r2
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <HAL_CAN_RxFifo0MsgPendingCallback+0x5b4>)
 800a37c:	eb18 0303 	adds.w	r3, r8, r3
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	f149 0300 	adc.w	r3, r9, #0
 800a386:	607b      	str	r3, [r7, #4]
 800a388:	f8d7 377c 	ldr.w	r3, [r7, #1916]	; 0x77c
 800a38c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800a390:	9202      	str	r2, [sp, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	f207 7374 	addw	r3, r7, #1908	; 0x774
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39e:	4914      	ldr	r1, [pc, #80]	; (800a3f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 800a3a0:	4814      	ldr	r0, [pc, #80]	; (800a3f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5bc>)
 800a3a2:	f002 facf 	bl	800c944 <canardTxPush>
        }
    }

    /* Free memory used for payload */
    canard.memory_free(&canard, transfer.payload);
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	480f      	ldr	r0, [pc, #60]	; (800a3f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 800a3b2:	4798      	blx	r3
 800a3b4:	e008      	b.n	800a3c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
        return; // Error reading CAN message
 800a3b6:	bf00      	nop
 800a3b8:	e006      	b.n	800a3c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
        return; // Not a valid Cyphal transfer or still incomplete
 800a3ba:	bf00      	nop
 800a3bc:	e004      	b.n	800a3c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
                return;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
                return;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
                return;
 800a3c6:	bf00      	nop
}
 800a3c8:	f607 0708 	addw	r7, r7, #2056	; 0x808
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3d2:	bf00      	nop
 800a3d4:	080136f0 	.word	0x080136f0
 800a3d8:	20000488 	.word	0x20000488
 800a3dc:	08013700 	.word	0x08013700
 800a3e0:	20000000 	.word	0x20000000
 800a3e4:	08013714 	.word	0x08013714
 800a3e8:	0801372c 	.word	0x0801372c
 800a3ec:	000f4240 	.word	0x000f4240
 800a3f0:	20000224 	.word	0x20000224
 800a3f4:	20000240 	.word	0x20000240

0800a3f8 <HAL_CAN_RxFifo1MsgPendingCallback>:


#pragma optimize=s none
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  return ;
 800a400:	bf00      	nop
}
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <memAllocate>:

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  (void) ins;
  return malloc(amount);
 800a416:	6838      	ldr	r0, [r7, #0]
 800a418:	f004 ff3c 	bl	800f294 <malloc>
 800a41c:	4603      	mov	r3, r0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 800a430:	6838      	ldr	r0, [r7, #0]
 800a432:	f004 ff37 	bl	800f2a4 <free>
}
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a43e:	b480      	push	{r7}
 800a440:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a442:	b672      	cpsid	i
}
 800a444:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a446:	e7fe      	b.n	800a446 <Error_Handler+0x8>

0800a448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <HAL_MspInit+0x4c>)
 800a454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a456:	4a0f      	ldr	r2, [pc, #60]	; (800a494 <HAL_MspInit+0x4c>)
 800a458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a45c:	6453      	str	r3, [r2, #68]	; 0x44
 800a45e:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <HAL_MspInit+0x4c>)
 800a460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a466:	607b      	str	r3, [r7, #4]
 800a468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a46a:	2300      	movs	r3, #0
 800a46c:	603b      	str	r3, [r7, #0]
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <HAL_MspInit+0x4c>)
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	4a08      	ldr	r2, [pc, #32]	; (800a494 <HAL_MspInit+0x4c>)
 800a474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a478:	6413      	str	r3, [r2, #64]	; 0x40
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <HAL_MspInit+0x4c>)
 800a47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a486:	2007      	movs	r0, #7
 800a488:	f003 fc5a 	bl	800dd40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	40023800 	.word	0x40023800

0800a498 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	; 0x28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	605a      	str	r2, [r3, #4]
 800a4aa:	609a      	str	r2, [r3, #8]
 800a4ac:	60da      	str	r2, [r3, #12]
 800a4ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a1d      	ldr	r2, [pc, #116]	; (800a52c <HAL_CAN_MspInit+0x94>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d134      	bne.n	800a524 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	4b1c      	ldr	r3, [pc, #112]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4c8:	6413      	str	r3, [r2, #64]	; 0x40
 800a4ca:	4b19      	ldr	r3, [pc, #100]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	4b15      	ldr	r3, [pc, #84]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	4a14      	ldr	r2, [pc, #80]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4e6:	4b12      	ldr	r3, [pc, #72]	; (800a530 <HAL_CAN_MspInit+0x98>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a4f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a500:	2303      	movs	r3, #3
 800a502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a504:	2309      	movs	r3, #9
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a508:	f107 0314 	add.w	r3, r7, #20
 800a50c:	4619      	mov	r1, r3
 800a50e:	4809      	ldr	r0, [pc, #36]	; (800a534 <HAL_CAN_MspInit+0x9c>)
 800a510:	f003 ff40 	bl	800e394 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	2014      	movs	r0, #20
 800a51a:	f003 fc1c 	bl	800dd56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a51e:	2014      	movs	r0, #20
 800a520:	f003 fc35 	bl	800dd8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a524:	bf00      	nop
 800a526:	3728      	adds	r7, #40	; 0x28
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40006400 	.word	0x40006400
 800a530:	40023800 	.word	0x40023800
 800a534:	40020000 	.word	0x40020000

0800a538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a53c:	e7fe      	b.n	800a53c <NMI_Handler+0x4>

0800a53e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a53e:	b480      	push	{r7}
 800a540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a542:	e7fe      	b.n	800a542 <HardFault_Handler+0x4>

0800a544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a548:	e7fe      	b.n	800a548 <MemManage_Handler+0x4>

0800a54a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a54a:	b480      	push	{r7}
 800a54c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a54e:	e7fe      	b.n	800a54e <BusFault_Handler+0x4>

0800a550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a550:	b480      	push	{r7}
 800a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a554:	e7fe      	b.n	800a554 <UsageFault_Handler+0x4>

0800a556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a556:	b480      	push	{r7}
 800a558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a55a:	bf00      	nop
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a568:	bf00      	nop
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a572:	b480      	push	{r7}
 800a574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a576:	bf00      	nop
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a584:	f002 fc6a 	bl	800ce5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a590:	4802      	ldr	r0, [pc, #8]	; (800a59c <CAN1_RX0_IRQHandler+0x10>)
 800a592:	f003 f8df 	bl	800d754 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a596:	bf00      	nop
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	200001fc 	.word	0x200001fc

0800a5a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  return 1;
 800a5a4:	2301      	movs	r3, #1
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <_kill>:

int _kill(int pid, int sig)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a5ba:	f005 fd21 	bl	8010000 <__errno>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2216      	movs	r2, #22
 800a5c2:	601a      	str	r2, [r3, #0]
  return -1;
 800a5c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <_exit>:

void _exit (int status)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff ffe7 	bl	800a5b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a5e2:	e7fe      	b.n	800a5e2 <_exit+0x12>

0800a5e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e00a      	b.n	800a60c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a5f6:	f3af 8000 	nop.w
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	60ba      	str	r2, [r7, #8]
 800a602:	b2ca      	uxtb	r2, r1
 800a604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	3301      	adds	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	dbf0      	blt.n	800a5f6 <_read+0x12>
  }

  return len;
 800a614:	687b      	ldr	r3, [r7, #4]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e009      	b.n	800a644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	60ba      	str	r2, [r7, #8]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	3301      	adds	r3, #1
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	dbf1      	blt.n	800a630 <_write+0x12>
  }
  return len;
 800a64c:	687b      	ldr	r3, [r7, #4]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <_close>:

int _close(int file)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a65e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a67e:	605a      	str	r2, [r3, #4]
  return 0;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <_isatty>:

int _isatty(int file)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a696:	2301      	movs	r3, #1
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a6c8:	4a14      	ldr	r2, [pc, #80]	; (800a71c <_sbrk+0x5c>)
 800a6ca:	4b15      	ldr	r3, [pc, #84]	; (800a720 <_sbrk+0x60>)
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a6d4:	4b13      	ldr	r3, [pc, #76]	; (800a724 <_sbrk+0x64>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <_sbrk+0x64>)
 800a6de:	4a12      	ldr	r2, [pc, #72]	; (800a728 <_sbrk+0x68>)
 800a6e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a6e2:	4b10      	ldr	r3, [pc, #64]	; (800a724 <_sbrk+0x64>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d207      	bcs.n	800a700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a6f0:	f005 fc86 	bl	8010000 <__errno>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	220c      	movs	r2, #12
 800a6f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fe:	e009      	b.n	800a714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a700:	4b08      	ldr	r3, [pc, #32]	; (800a724 <_sbrk+0x64>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <_sbrk+0x64>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	4a05      	ldr	r2, [pc, #20]	; (800a724 <_sbrk+0x64>)
 800a710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	20020000 	.word	0x20020000
 800a720:	00000400 	.word	0x00000400
 800a724:	200008f0 	.word	0x200008f0
 800a728:	20000a68 	.word	0x20000a68

0800a72c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a730:	4b06      	ldr	r3, [pc, #24]	; (800a74c <SystemInit+0x20>)
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a736:	4a05      	ldr	r2, [pc, #20]	; (800a74c <SystemInit+0x20>)
 800a738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a73c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a740:	bf00      	nop
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	e000ed00 	.word	0xe000ed00

0800a750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a750:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a788 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a754:	f7ff ffea 	bl	800a72c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a758:	480c      	ldr	r0, [pc, #48]	; (800a78c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a75a:	490d      	ldr	r1, [pc, #52]	; (800a790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a75c:	4a0d      	ldr	r2, [pc, #52]	; (800a794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a75e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a760:	e002      	b.n	800a768 <LoopCopyDataInit>

0800a762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a766:	3304      	adds	r3, #4

0800a768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a76a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a76c:	d3f9      	bcc.n	800a762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a76e:	4a0a      	ldr	r2, [pc, #40]	; (800a798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a770:	4c0a      	ldr	r4, [pc, #40]	; (800a79c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a772:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a774:	e001      	b.n	800a77a <LoopFillZerobss>

0800a776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a778:	3204      	adds	r2, #4

0800a77a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a77a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a77c:	d3fb      	bcc.n	800a776 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800a77e:	f005 fc45 	bl	801000c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a782:	f7ff f90d 	bl	80099a0 <main>
  bx  lr    
 800a786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a78c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a790:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800a794:	080153d8 	.word	0x080153d8
  ldr r2, =_sbss
 800a798:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800a79c:	20000a64 	.word	0x20000a64

0800a7a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a7a0:	e7fe      	b.n	800a7a0 <ADC_IRQHandler>

0800a7a2 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800a7b6:	e007      	b.n	800a7c8 <cavlFindExtremum+0x26>
    {
        result = c;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f4      	bne.n	800a7b8 <cavlFindExtremum+0x16>
    }
    return result;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d014      	beq.n	800a818 <cavlPrivateRotate+0x3c>
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	f083 0301 	eor.w	r3, r3, #1
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <cavlPrivateRotate+0x3c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80c:	db04      	blt.n	800a818 <cavlPrivateRotate+0x3c>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a814:	2b01      	cmp	r3, #1
 800a816:	dd05      	ble.n	800a824 <cavlPrivateRotate+0x48>
 800a818:	4b2a      	ldr	r3, [pc, #168]	; (800a8c4 <cavlPrivateRotate+0xe8>)
 800a81a:	4a2b      	ldr	r2, [pc, #172]	; (800a8c8 <cavlPrivateRotate+0xec>)
 800a81c:	2162      	movs	r1, #98	; 0x62
 800a81e:	482b      	ldr	r0, [pc, #172]	; (800a8cc <cavlPrivateRotate+0xf0>)
 800a820:	f004 fd1a 	bl	800f258 <__assert_func>
    Cavl* const z = x->lr[!r];
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	f083 0301 	eor.w	r3, r3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00e      	beq.n	800a85c <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4299      	cmp	r1, r3
 800a84c:	bf0c      	ite	eq
 800a84e:	2301      	moveq	r3, #1
 800a850:	2300      	movne	r3, #0
 800a852:	b2db      	uxtb	r3, r3
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	f082 0201 	eor.w	r2, r2, #1
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	4610      	mov	r0, r2
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	0083      	lsls	r3, r0, #2
 800a882:	440b      	add	r3, r1
 800a884:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	f083 0301 	eor.w	r3, r3, #1
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d009      	beq.n	800a8ae <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	f083 0301 	eor.w	r3, r3, #1
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800a8ae:	78fb      	ldrb	r3, [r7, #3]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	605a      	str	r2, [r3, #4]
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0801373c 	.word	0x0801373c
 800a8c8:	08014efc 	.word	0x08014efc
 800a8cc:	08013794 	.word	0x08013794

0800a8d0 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <cavlPrivateAdjustBalance+0x28>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ec:	db04      	blt.n	800a8f8 <cavlPrivateAdjustBalance+0x28>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	dd05      	ble.n	800a904 <cavlPrivateAdjustBalance+0x34>
 800a8f8:	4b61      	ldr	r3, [pc, #388]	; (800aa80 <cavlPrivateAdjustBalance+0x1b0>)
 800a8fa:	4a62      	ldr	r2, [pc, #392]	; (800aa84 <cavlPrivateAdjustBalance+0x1b4>)
 800a8fc:	2177      	movs	r1, #119	; 0x77
 800a8fe:	4862      	ldr	r0, [pc, #392]	; (800aa88 <cavlPrivateAdjustBalance+0x1b8>)
 800a900:	f004 fcaa 	bl	800f258 <__assert_func>
    Cavl*        out    = x;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	78fa      	ldrb	r2, [r7, #3]
 800a912:	2a00      	cmp	r2, #0
 800a914:	d001      	beq.n	800a91a <cavlPrivateAdjustBalance+0x4a>
 800a916:	2201      	movs	r2, #1
 800a918:	e000      	b.n	800a91c <cavlPrivateAdjustBalance+0x4c>
 800a91a:	22ff      	movs	r2, #255	; 0xff
 800a91c:	4413      	add	r3, r2
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800a922:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92a:	db04      	blt.n	800a936 <cavlPrivateAdjustBalance+0x66>
 800a92c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a930:	2b01      	cmp	r3, #1
 800a932:	f340 809c 	ble.w	800aa6e <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800a936:	7cfb      	ldrb	r3, [r7, #19]
 800a938:	09db      	lsrs	r3, r3, #7
 800a93a:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800a93c:	7cbb      	ldrb	r3, [r7, #18]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <cavlPrivateAdjustBalance+0x76>
 800a942:	2301      	movs	r3, #1
 800a944:	e001      	b.n	800a94a <cavlPrivateAdjustBalance+0x7a>
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800a94c:	7cbb      	ldrb	r3, [r7, #18]
 800a94e:	f083 0301 	eor.w	r3, r3, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <cavlPrivateAdjustBalance+0xa0>
 800a964:	4b49      	ldr	r3, [pc, #292]	; (800aa8c <cavlPrivateAdjustBalance+0x1bc>)
 800a966:	4a47      	ldr	r2, [pc, #284]	; (800aa84 <cavlPrivateAdjustBalance+0x1b4>)
 800a968:	217f      	movs	r1, #127	; 0x7f
 800a96a:	4847      	ldr	r0, [pc, #284]	; (800aa88 <cavlPrivateAdjustBalance+0x1b8>)
 800a96c:	f004 fc74 	bl	800f258 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a976:	461a      	mov	r2, r3
 800a978:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a97c:	fb02 f303 	mul.w	r3, r2, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc1c      	bgt.n	800a9be <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800a988:	7cbb      	ldrb	r3, [r7, #18]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ff25 	bl	800a7dc <cavlPrivateRotate>
            if (0 == z->bf)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d109      	bne.n	800a9b0 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800a99c:	7c7b      	ldrb	r3, [r7, #17]
 800a99e:	425b      	negs	r3, r3
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	b25a      	sxtb	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7c7a      	ldrb	r2, [r7, #17]
 800a9ac:	731a      	strb	r2, [r3, #12]
    {
 800a9ae:	e061      	b.n	800aa74 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	731a      	strb	r2, [r3, #12]
    {
 800a9bc:	e05a      	b.n	800aa74 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800a9be:	7cbb      	ldrb	r3, [r7, #18]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d105      	bne.n	800a9dc <cavlPrivateAdjustBalance+0x10c>
 800a9d0:	4b2f      	ldr	r3, [pc, #188]	; (800aa90 <cavlPrivateAdjustBalance+0x1c0>)
 800a9d2:	4a2c      	ldr	r2, [pc, #176]	; (800aa84 <cavlPrivateAdjustBalance+0x1b4>)
 800a9d4:	2192      	movs	r1, #146	; 0x92
 800a9d6:	482c      	ldr	r0, [pc, #176]	; (800aa88 <cavlPrivateAdjustBalance+0x1b8>)
 800a9d8:	f004 fc3e 	bl	800f258 <__assert_func>
            out = y;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800a9e0:	7cbb      	ldrb	r3, [r7, #18]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	bf14      	ite	ne
 800a9e6:	2301      	movne	r3, #1
 800a9e8:	2300      	moveq	r3, #0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f083 0301 	eor.w	r3, r3, #1
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff feee 	bl	800a7dc <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800aa00:	7cbb      	ldrb	r3, [r7, #18]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fee9 	bl	800a7dc <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800aa10:	461a      	mov	r2, r3
 800aa12:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800aa16:	fb02 f303 	mul.w	r3, r2, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da09      	bge.n	800aa32 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7c7a      	ldrb	r2, [r7, #17]
 800aa22:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2200      	movs	r2, #0
 800aa28:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	731a      	strb	r2, [r3, #12]
    {
 800aa30:	e020      	b.n	800aa74 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800aa3e:	fb02 f303 	mul.w	r3, r2, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd0c      	ble.n	800aa60 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800aa52:	7c7b      	ldrb	r3, [r7, #17]
 800aa54:	425b      	negs	r3, r3
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	b25a      	sxtb	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	731a      	strb	r2, [r3, #12]
    {
 800aa5e:	e009      	b.n	800aa74 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	731a      	strb	r2, [r3, #12]
    {
 800aa6c:	e002      	b.n	800aa74 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7cfa      	ldrb	r2, [r7, #19]
 800aa72:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800aa74:	697b      	ldr	r3, [r7, #20]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	080137c8 	.word	0x080137c8
 800aa84:	08014ee0 	.word	0x08014ee0
 800aa88:	08013794 	.word	0x08013794
 800aa8c:	08013800 	.word	0x08013800
 800aa90:	08013814 	.word	0x08013814

0800aa94 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <cavlPrivateRetraceOnGrowth+0x18>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <cavlPrivateRetraceOnGrowth+0x24>
 800aaac:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <cavlPrivateRetraceOnGrowth+0xa8>)
 800aaae:	4a24      	ldr	r2, [pc, #144]	; (800ab40 <cavlPrivateRetraceOnGrowth+0xac>)
 800aab0:	21b5      	movs	r1, #181	; 0xb5
 800aab2:	4824      	ldr	r0, [pc, #144]	; (800ab44 <cavlPrivateRetraceOnGrowth+0xb0>)
 800aab4:	f004 fbd0 	bl	800f258 <__assert_func>
    Cavl* c = added;      // Child
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800aac2:	e023      	b.n	800ab0c <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	bf0c      	ite	eq
 800aace:	2301      	moveq	r3, #1
 800aad0:	2300      	movne	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d005      	beq.n	800aaf0 <cavlPrivateRetraceOnGrowth+0x5c>
 800aae4:	4b18      	ldr	r3, [pc, #96]	; (800ab48 <cavlPrivateRetraceOnGrowth+0xb4>)
 800aae6:	4a16      	ldr	r2, [pc, #88]	; (800ab40 <cavlPrivateRetraceOnGrowth+0xac>)
 800aae8:	21bb      	movs	r1, #187	; 0xbb
 800aaea:	4816      	ldr	r0, [pc, #88]	; (800ab44 <cavlPrivateRetraceOnGrowth+0xb0>)
 800aaec:	f004 fbb4 	bl	800f258 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6938      	ldr	r0, [r7, #16]
 800aaf6:	f7ff feeb 	bl	800a8d0 <cavlPrivateAdjustBalance>
 800aafa:	6178      	str	r0, [r7, #20]
        p = c->up;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1d8      	bne.n	800aac4 <cavlPrivateRetraceOnGrowth+0x30>
 800ab12:	e000      	b.n	800ab16 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800ab14:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <cavlPrivateRetraceOnGrowth+0x94>
 800ab1c:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <cavlPrivateRetraceOnGrowth+0xb8>)
 800ab1e:	4a08      	ldr	r2, [pc, #32]	; (800ab40 <cavlPrivateRetraceOnGrowth+0xac>)
 800ab20:	21c3      	movs	r1, #195	; 0xc3
 800ab22:	4808      	ldr	r0, [pc, #32]	; (800ab44 <cavlPrivateRetraceOnGrowth+0xb0>)
 800ab24:	f004 fb98 	bl	800f258 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <cavlPrivateRetraceOnGrowth+0x9e>
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	e000      	b.n	800ab34 <cavlPrivateRetraceOnGrowth+0xa0>
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	08013828 	.word	0x08013828
 800ab40:	08014ec4 	.word	0x08014ec4
 800ab44:	08013794 	.word	0x08013794
 800ab48:	08013854 	.word	0x08013854
 800ab4c:	08013864 	.word	0x08013864

0800ab50 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	; 0x28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d065      	beq.n	800ac34 <cavlSearch+0xe4>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d062      	beq.n	800ac34 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800ab78:	e02f      	b.n	800abda <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4611      	mov	r1, r2
 800ab82:	68b8      	ldr	r0, [r7, #8]
 800ab84:	4798      	blx	r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800ab8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d103      	bne.n	800ab9a <cavlSearch+0x4a>
            {
                out = *n;
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800ab98:	e023      	b.n	800abe2 <cavlSearch+0x92>
            }
            up = *n;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfcc      	ite	gt
 800abac:	2301      	movgt	r3, #1
 800abae:	2300      	movle	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	3304      	adds	r3, #4
 800abb8:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00b      	beq.n	800abda <cavlSearch+0x8a>
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6a3a      	ldr	r2, [r7, #32]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d005      	beq.n	800abda <cavlSearch+0x8a>
 800abce:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <cavlSearch+0xf0>)
 800abd0:	4a1c      	ldr	r2, [pc, #112]	; (800ac44 <cavlSearch+0xf4>)
 800abd2:	21db      	movs	r1, #219	; 0xdb
 800abd4:	481c      	ldr	r0, [pc, #112]	; (800ac48 <cavlSearch+0xf8>)
 800abd6:	f004 fb3f 	bl	800f258 <__assert_func>
        while (*n != NULL)
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1cb      	bne.n	800ab7a <cavlSearch+0x2a>
        }
        if (NULL == out)
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d125      	bne.n	800ac34 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <cavlSearch+0xa8>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	68b8      	ldr	r0, [r7, #8]
 800abf2:	4798      	blx	r3
 800abf4:	4603      	mov	r3, r0
 800abf6:	e000      	b.n	800abfa <cavlSearch+0xaa>
 800abf8:	2300      	movs	r3, #0
 800abfa:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d018      	beq.n	800ac34 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac06:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2200      	movs	r2, #0
 800ac12:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	6a3a      	ldr	r2, [r7, #32]
 800ac18:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800ac20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac22:	f7ff ff37 	bl	800aa94 <cavlPrivateRetraceOnGrowth>
 800ac26:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <cavlSearch+0xe4>
                {
                    *root = rt;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3728      	adds	r7, #40	; 0x28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	08013878 	.word	0x08013878
 800ac44:	08014eb8 	.word	0x08014eb8
 800ac48:	08013794 	.word	0x08013794

0800ac4c <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 8116 	beq.w	800ae8a <cavlRemove+0x23e>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 8112 	beq.w	800ae8a <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <cavlRemove+0x2e>
 800ac6e:	4b89      	ldr	r3, [pc, #548]	; (800ae94 <cavlRemove+0x248>)
 800ac70:	4a89      	ldr	r2, [pc, #548]	; (800ae98 <cavlRemove+0x24c>)
 800ac72:	21f6      	movs	r1, #246	; 0xf6
 800ac74:	4889      	ldr	r0, [pc, #548]	; (800ae9c <cavlRemove+0x250>)
 800ac76:	f004 faef 	bl	800f258 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <cavlRemove+0x4c>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d005      	beq.n	800ac98 <cavlRemove+0x4c>
 800ac8c:	4b84      	ldr	r3, [pc, #528]	; (800aea0 <cavlRemove+0x254>)
 800ac8e:	4a82      	ldr	r2, [pc, #520]	; (800ae98 <cavlRemove+0x24c>)
 800ac90:	21f7      	movs	r1, #247	; 0xf7
 800ac92:	4882      	ldr	r0, [pc, #520]	; (800ae9c <cavlRemove+0x250>)
 800ac94:	f004 fae0 	bl	800f258 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d073      	beq.n	800ad90 <cavlRemove+0x144>
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d06f      	beq.n	800ad90 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2100      	movs	r1, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fd73 	bl	800a7a2 <cavlFindExtremum>
 800acbc:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <cavlRemove+0x88>
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <cavlRemove+0x88>
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <cavlRemove+0x94>
 800acd4:	4b73      	ldr	r3, [pc, #460]	; (800aea4 <cavlRemove+0x258>)
 800acd6:	4a70      	ldr	r2, [pc, #448]	; (800ae98 <cavlRemove+0x24c>)
 800acd8:	21ff      	movs	r1, #255	; 0xff
 800acda:	4870      	ldr	r0, [pc, #448]	; (800ae9c <cavlRemove+0x250>)
 800acdc:	f004 fabc 	bl	800f258 <__assert_func>
            re->bf        = node->bf;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d025      	beq.n	800ad50 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d006      	beq.n	800ad22 <cavlRemove+0xd6>
 800ad14:	4b64      	ldr	r3, [pc, #400]	; (800aea8 <cavlRemove+0x25c>)
 800ad16:	4a60      	ldr	r2, [pc, #384]	; (800ae98 <cavlRemove+0x24c>)
 800ad18:	f44f 7183 	mov.w	r1, #262	; 0x106
 800ad1c:	485f      	ldr	r0, [pc, #380]	; (800ae9c <cavlRemove+0x250>)
 800ad1e:	f004 fa9b 	bl	800f258 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	601a      	str	r2, [r3, #0]
                r             = false;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	76fb      	strb	r3, [r7, #27]
 800ad4e:	e003      	b.n	800ad58 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800ad54:	2301      	movs	r3, #1
 800ad56:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00f      	beq.n	800ad88 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	4299      	cmp	r1, r3
 800ad76:	bf0c      	ite	eq
 800ad78:	2301      	moveq	r3, #1
 800ad7a:	2300      	movne	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	605a      	str	r2, [r3, #4]
        {
 800ad86:	e046      	b.n	800ae16 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	601a      	str	r2, [r3, #0]
        {
 800ad8e:	e042      	b.n	800ae16 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800ada4:	7cfb      	ldrb	r3, [r7, #19]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d006      	beq.n	800adc0 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800adb2:	7cfb      	ldrb	r3, [r7, #19]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d020      	beq.n	800ae08 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	bf0c      	ite	eq
 800add0:	2301      	moveq	r3, #1
 800add2:	2300      	movne	r3, #0
 800add4:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800add6:	7cfb      	ldrb	r3, [r7, #19]
 800add8:	7ef8      	ldrb	r0, [r7, #27]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	69f9      	ldr	r1, [r7, #28]
 800ade4:	0083      	lsls	r3, r0, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800adea:	7efb      	ldrb	r3, [r7, #27]
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00e      	beq.n	800ae16 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800adf8:	7efb      	ldrb	r3, [r7, #27]
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	e006      	b.n	800ae16 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800ae08:	7cfb      	ldrb	r3, [r7, #19]
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d036      	beq.n	800ae8a <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800ae20:	7efb      	ldrb	r3, [r7, #27]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bf14      	ite	ne
 800ae26:	2301      	movne	r3, #1
 800ae28:	2300      	moveq	r3, #0
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f083 0301 	eor.w	r3, r3, #1
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	4619      	mov	r1, r3
 800ae3a:	69f8      	ldr	r0, [r7, #28]
 800ae3c:	f7ff fd48 	bl	800a8d0 <cavlPrivateAdjustBalance>
 800ae40:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10b      	bne.n	800ae6a <cavlRemove+0x21e>
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	bf0c      	ite	eq
 800ae62:	2301      	moveq	r3, #1
 800ae64:	2300      	movne	r3, #0
 800ae66:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800ae68:	e7da      	b.n	800ae20 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10c      	bne.n	800ae8a <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d106      	bne.n	800ae84 <cavlRemove+0x238>
 800ae76:	4b0d      	ldr	r3, [pc, #52]	; (800aeac <cavlRemove+0x260>)
 800ae78:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <cavlRemove+0x24c>)
 800ae7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800ae7e:	4807      	ldr	r0, [pc, #28]	; (800ae9c <cavlRemove+0x250>)
 800ae80:	f004 f9ea 	bl	800f258 <__assert_func>
                *root = c;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800ae8a:	bf00      	nop
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	080138a0 	.word	0x080138a0
 800ae98:	08014f40 	.word	0x08014f40
 800ae9c:	08013794 	.word	0x08013794
 800aea0:	080138b8 	.word	0x080138b8
 800aea4:	080138e8 	.word	0x080138e8
 800aea8:	08013938 	.word	0x08013938
 800aeac:	08013864 	.word	0x08013864

0800aeb0 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800aeb8:	687b      	ldr	r3, [r7, #4]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	4603      	mov	r3, r0
 800aed0:	460a      	mov	r2, r1
 800aed2:	80fb      	strh	r3, [r7, #6]
 800aed4:	4613      	mov	r3, r2
 800aed6:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	0a1b      	lsrs	r3, r3, #8
 800aee2:	b299      	uxth	r1, r3
 800aee4:	797b      	ldrb	r3, [r7, #5]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	404b      	eors	r3, r1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4905      	ldr	r1, [pc, #20]	; (800af04 <crcAddByte+0x3c>)
 800aef0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800aef4:	4053      	eors	r3, r2
 800aef6:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	08014b90 	.word	0x08014b90

0800af08 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d108      	bne.n	800af2e <crcAdd+0x26>
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <crcAdd+0x26>
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <crcAdd+0x64>)
 800af24:	4a12      	ldr	r2, [pc, #72]	; (800af70 <crcAdd+0x68>)
 800af26:	2189      	movs	r1, #137	; 0x89
 800af28:	4812      	ldr	r0, [pc, #72]	; (800af74 <crcAdd+0x6c>)
 800af2a:	f004 f995 	bl	800f258 <__assert_func>
    TransferCRC    out = crc;
 800af2e:	89fb      	ldrh	r3, [r7, #14]
 800af30:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e00e      	b.n	800af5a <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	781a      	ldrb	r2, [r3, #0]
 800af40:	8bfb      	ldrh	r3, [r7, #30]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff ffbf 	bl	800aec8 <crcAddByte>
 800af4a:	4603      	mov	r3, r0
 800af4c:	83fb      	strh	r3, [r7, #30]
        ++p;
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	3301      	adds	r3, #1
 800af52:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	3301      	adds	r3, #1
 800af58:	617b      	str	r3, [r7, #20]
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d3ec      	bcc.n	800af3c <crcAdd+0x34>
    }
    return out;
 800af62:	8bfb      	ldrh	r3, [r7, #30]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	08013948 	.word	0x08013948
 800af70:	08014e0c 	.word	0x08014e0c
 800af74:	08013970 	.word	0x08013970

0800af78 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	460a      	mov	r2, r1
 800af82:	80fb      	strh	r3, [r7, #6]
 800af84:	4613      	mov	r3, r2
 800af86:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800af88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	da05      	bge.n	800af9c <txMakeMessageSessionSpecifier+0x24>
 800af90:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <txMakeMessageSessionSpecifier+0x54>)
 800af92:	4a0f      	ldr	r2, [pc, #60]	; (800afd0 <txMakeMessageSessionSpecifier+0x58>)
 800af94:	21ab      	movs	r1, #171	; 0xab
 800af96:	480f      	ldr	r0, [pc, #60]	; (800afd4 <txMakeMessageSessionSpecifier+0x5c>)
 800af98:	f004 f95e 	bl	800f258 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa2:	d305      	bcc.n	800afb0 <txMakeMessageSessionSpecifier+0x38>
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <txMakeMessageSessionSpecifier+0x60>)
 800afa6:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <txMakeMessageSessionSpecifier+0x58>)
 800afa8:	21ac      	movs	r1, #172	; 0xac
 800afaa:	480a      	ldr	r0, [pc, #40]	; (800afd4 <txMakeMessageSessionSpecifier+0x5c>)
 800afac:	f004 f954 	bl	800f258 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800afba:	797a      	ldrb	r2, [r7, #5]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	4313      	orrs	r3, r2
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	080139a0 	.word	0x080139a0
 800afd0:	08014e14 	.word	0x08014e14
 800afd4:	08013970 	.word	0x08013970
 800afd8:	080139b4 	.word	0x080139b4

0800afdc <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	4611      	mov	r1, r2
 800afe8:	461a      	mov	r2, r3
 800afea:	4623      	mov	r3, r4
 800afec:	80fb      	strh	r3, [r7, #6]
 800afee:	4603      	mov	r3, r0
 800aff0:	717b      	strb	r3, [r7, #5]
 800aff2:	460b      	mov	r3, r1
 800aff4:	713b      	strb	r3, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800affa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	da05      	bge.n	800b00e <txMakeServiceSessionSpecifier+0x32>
 800b002:	4b17      	ldr	r3, [pc, #92]	; (800b060 <txMakeServiceSessionSpecifier+0x84>)
 800b004:	4a17      	ldr	r2, [pc, #92]	; (800b064 <txMakeServiceSessionSpecifier+0x88>)
 800b006:	21b6      	movs	r1, #182	; 0xb6
 800b008:	4817      	ldr	r0, [pc, #92]	; (800b068 <txMakeServiceSessionSpecifier+0x8c>)
 800b00a:	f004 f925 	bl	800f258 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800b00e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b012:	2b00      	cmp	r3, #0
 800b014:	da05      	bge.n	800b022 <txMakeServiceSessionSpecifier+0x46>
 800b016:	4b15      	ldr	r3, [pc, #84]	; (800b06c <txMakeServiceSessionSpecifier+0x90>)
 800b018:	4a12      	ldr	r2, [pc, #72]	; (800b064 <txMakeServiceSessionSpecifier+0x88>)
 800b01a:	21b7      	movs	r1, #183	; 0xb7
 800b01c:	4812      	ldr	r0, [pc, #72]	; (800b068 <txMakeServiceSessionSpecifier+0x8c>)
 800b01e:	f004 f91b 	bl	800f258 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b028:	d305      	bcc.n	800b036 <txMakeServiceSessionSpecifier+0x5a>
 800b02a:	4b11      	ldr	r3, [pc, #68]	; (800b070 <txMakeServiceSessionSpecifier+0x94>)
 800b02c:	4a0d      	ldr	r2, [pc, #52]	; (800b064 <txMakeServiceSessionSpecifier+0x88>)
 800b02e:	21b8      	movs	r1, #184	; 0xb8
 800b030:	480d      	ldr	r0, [pc, #52]	; (800b068 <txMakeServiceSessionSpecifier+0x8c>)
 800b032:	f004 f911 	bl	800f258 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b036:	793a      	ldrb	r2, [r7, #4]
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	01db      	lsls	r3, r3, #7
 800b03c:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b03e:	88fb      	ldrh	r3, [r7, #6]
 800b040:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b042:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b044:	797a      	ldrb	r2, [r7, #5]
 800b046:	2a00      	cmp	r2, #0
 800b048:	d002      	beq.n	800b050 <txMakeServiceSessionSpecifier+0x74>
 800b04a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b04e:	e000      	b.n	800b052 <txMakeServiceSessionSpecifier+0x76>
 800b050:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b052:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd90      	pop	{r4, r7, pc}
 800b060:	080139a0 	.word	0x080139a0
 800b064:	08014e34 	.word	0x08014e34
 800b068:	08013970 	.word	0x08013970
 800b06c:	080139c8 	.word	0x080139c8
 800b070:	080139dc 	.word	0x080139dc

0800b074 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800b07c:	2340      	movs	r3, #64	; 0x40
 800b07e:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b07      	cmp	r3, #7
 800b088:	d802      	bhi.n	800b090 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800b08a:	2308      	movs	r3, #8
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	e014      	b.n	800b0ba <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	429a      	cmp	r2, r3
 800b096:	d808      	bhi.n	800b0aa <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800b098:	4a0c      	ldr	r2, [pc, #48]	; (800b0cc <adjustPresentationLayerMTU+0x58>)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <adjustPresentationLayerMTU+0x5c>)
 800b0a4:	5c9b      	ldrb	r3, [r3, r2]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e007      	b.n	800b0ba <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800b0aa:	4a08      	ldr	r2, [pc, #32]	; (800b0cc <adjustPresentationLayerMTU+0x58>)
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <adjustPresentationLayerMTU+0x5c>)
 800b0b6:	5c9b      	ldrb	r3, [r3, r2]
 800b0b8:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3b01      	subs	r3, #1
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	08014da0 	.word	0x08014da0
 800b0d0:	08014d90 	.word	0x08014d90

0800b0d4 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d105      	bne.n	800b0f4 <txMakeCANID+0x20>
 800b0e8:	4b60      	ldr	r3, [pc, #384]	; (800b26c <txMakeCANID+0x198>)
 800b0ea:	4a61      	ldr	r2, [pc, #388]	; (800b270 <txMakeCANID+0x19c>)
 800b0ec:	21d8      	movs	r1, #216	; 0xd8
 800b0ee:	4861      	ldr	r0, [pc, #388]	; (800b274 <txMakeCANID+0x1a0>)
 800b0f0:	f004 f8b2 	bl	800f258 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <txMakeCANID+0x32>
 800b0fa:	4b5f      	ldr	r3, [pc, #380]	; (800b278 <txMakeCANID+0x1a4>)
 800b0fc:	4a5c      	ldr	r2, [pc, #368]	; (800b270 <txMakeCANID+0x19c>)
 800b0fe:	21d9      	movs	r1, #217	; 0xd9
 800b100:	485c      	ldr	r0, [pc, #368]	; (800b274 <txMakeCANID+0x1a0>)
 800b102:	f004 f8a9 	bl	800f258 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b106:	f06f 0301 	mvn.w	r3, #1
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	785b      	ldrb	r3, [r3, #1]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d157      	bne.n	800b1c4 <txMakeCANID+0xf0>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	2bff      	cmp	r3, #255	; 0xff
 800b11a:	d153      	bne.n	800b1c4 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b124:	d24e      	bcs.n	800b1c4 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	db11      	blt.n	800b152 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	885b      	ldrh	r3, [r3, #2]
 800b132:	78fa      	ldrb	r2, [r7, #3]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff ff1e 	bl	800af78 <txMakeMessageSessionSpecifier>
 800b13c:	4603      	mov	r3, r0
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	da75      	bge.n	800b232 <txMakeCANID+0x15e>
 800b146:	4b4d      	ldr	r3, [pc, #308]	; (800b27c <txMakeCANID+0x1a8>)
 800b148:	4a49      	ldr	r2, [pc, #292]	; (800b270 <txMakeCANID+0x19c>)
 800b14a:	21e1      	movs	r1, #225	; 0xe1
 800b14c:	4849      	ldr	r0, [pc, #292]	; (800b274 <txMakeCANID+0x1a0>)
 800b14e:	f004 f883 	bl	800f258 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	429a      	cmp	r2, r3
 800b158:	d830      	bhi.n	800b1bc <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d108      	bne.n	800b172 <txMakeCANID+0x9e>
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <txMakeCANID+0x9e>
 800b166:	4b46      	ldr	r3, [pc, #280]	; (800b280 <txMakeCANID+0x1ac>)
 800b168:	4a41      	ldr	r2, [pc, #260]	; (800b270 <txMakeCANID+0x19c>)
 800b16a:	21e5      	movs	r1, #229	; 0xe5
 800b16c:	4841      	ldr	r0, [pc, #260]	; (800b274 <txMakeCANID+0x1a0>)
 800b16e:	f004 f873 	bl	800f258 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	68b9      	ldr	r1, [r7, #8]
 800b176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b17a:	f7ff fec5 	bl	800af08 <crcAdd>
 800b17e:	4603      	mov	r3, r0
 800b180:	b2db      	uxtb	r3, r3
 800b182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	885b      	ldrh	r3, [r3, #2]
 800b18e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff feef 	bl	800af78 <txMakeMessageSessionSpecifier>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a0:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1a8:	d305      	bcc.n	800b1b6 <txMakeCANID+0xe2>
 800b1aa:	4b36      	ldr	r3, [pc, #216]	; (800b284 <txMakeCANID+0x1b0>)
 800b1ac:	4a30      	ldr	r2, [pc, #192]	; (800b270 <txMakeCANID+0x19c>)
 800b1ae:	21e8      	movs	r1, #232	; 0xe8
 800b1b0:	4830      	ldr	r0, [pc, #192]	; (800b274 <txMakeCANID+0x1a0>)
 800b1b2:	f004 f851 	bl	800f258 <__assert_func>
            out = (int32_t) spec;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b1ba:	e03a      	b.n	800b232 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800b1bc:	f06f 0301 	mvn.w	r3, #1
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b1c2:	e036      	b.n	800b232 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d003      	beq.n	800b1d4 <txMakeCANID+0x100>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	785b      	ldrb	r3, [r3, #1]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d12a      	bne.n	800b22a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	791b      	ldrb	r3, [r3, #4]
 800b1d8:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	db25      	blt.n	800b22a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	885b      	ldrh	r3, [r3, #2]
 800b1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e6:	d220      	bcs.n	800b22a <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b1e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	db18      	blt.n	800b222 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	bf0c      	ite	eq
 800b1fc:	2301      	moveq	r3, #1
 800b1fe:	2300      	movne	r3, #0
 800b200:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	f7ff fee8 	bl	800afdc <txMakeServiceSessionSpecifier>
 800b20c:	4603      	mov	r3, r0
 800b20e:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	da0f      	bge.n	800b236 <txMakeCANID+0x162>
 800b216:	4b19      	ldr	r3, [pc, #100]	; (800b27c <txMakeCANID+0x1a8>)
 800b218:	4a15      	ldr	r2, [pc, #84]	; (800b270 <txMakeCANID+0x19c>)
 800b21a:	21f9      	movs	r1, #249	; 0xf9
 800b21c:	4815      	ldr	r0, [pc, #84]	; (800b274 <txMakeCANID+0x1a0>)
 800b21e:	f004 f81b 	bl	800f258 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800b222:	f06f 0301 	mvn.w	r3, #1
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b228:	e005      	b.n	800b236 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b22a:	f06f 0301 	mvn.w	r3, #1
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
 800b230:	e002      	b.n	800b238 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b236:	bf00      	nop
    }

    if (out >= 0)
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	db10      	blt.n	800b260 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2b07      	cmp	r3, #7
 800b248:	d807      	bhi.n	800b25a <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	069a      	lsls	r2, r3, #26
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	627b      	str	r3, [r7, #36]	; 0x24
 800b258:	e002      	b.n	800b260 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b25a:	f06f 0301 	mvn.w	r3, #1
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b262:	4618      	mov	r0, r3
 800b264:	3728      	adds	r7, #40	; 0x28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	080139f0 	.word	0x080139f0
 800b270:	08014e00 	.word	0x08014e00
 800b274:	08013970 	.word	0x08013970
 800b278:	08013a04 	.word	0x08013a04
 800b27c:	08013a20 	.word	0x08013a20
 800b280:	08013a2c 	.word	0x08013a2c
 800b284:	08013a60 	.word	0x08013a60

0800b288 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800b288:	b590      	push	{r4, r7, lr}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	461a      	mov	r2, r3
 800b296:	4623      	mov	r3, r4
 800b298:	71fb      	strb	r3, [r7, #7]
 800b29a:	4603      	mov	r3, r0
 800b29c:	71bb      	strb	r3, [r7, #6]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	717b      	strb	r3, [r7, #5]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800b2a6:	79fb      	ldrb	r3, [r7, #7]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d009      	beq.n	800b2c0 <txMakeTailByte+0x38>
 800b2ac:	797b      	ldrb	r3, [r7, #5]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d006      	beq.n	800b2c0 <txMakeTailByte+0x38>
 800b2b2:	4b13      	ldr	r3, [pc, #76]	; (800b300 <txMakeTailByte+0x78>)
 800b2b4:	4a13      	ldr	r2, [pc, #76]	; (800b304 <txMakeTailByte+0x7c>)
 800b2b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800b2ba:	4813      	ldr	r0, [pc, #76]	; (800b308 <txMakeTailByte+0x80>)
 800b2bc:	f003 ffcc 	bl	800f258 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <txMakeTailByte+0x42>
 800b2c6:	2280      	movs	r2, #128	; 0x80
 800b2c8:	e000      	b.n	800b2cc <txMakeTailByte+0x44>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	79bb      	ldrb	r3, [r7, #6]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <txMakeTailByte+0x4e>
 800b2d2:	2340      	movs	r3, #64	; 0x40
 800b2d4:	e000      	b.n	800b2d8 <txMakeTailByte+0x50>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800b2dc:	797a      	ldrb	r2, [r7, #5]
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d001      	beq.n	800b2e6 <txMakeTailByte+0x5e>
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	e000      	b.n	800b2e8 <txMakeTailByte+0x60>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800b2ec:	793b      	ldrb	r3, [r7, #4]
 800b2ee:	f003 031f 	and.w	r3, r3, #31
 800b2f2:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	b2db      	uxtb	r3, r3
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd90      	pop	{r4, r7, pc}
 800b300:	08013a7c 	.word	0x08013a7c
 800b304:	08014ea8 	.word	0x08014ea8
 800b308:	08013970 	.word	0x08013970

0800b30c <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b40      	cmp	r3, #64	; 0x40
 800b318:	d906      	bls.n	800b328 <txRoundFramePayloadSizeUp+0x1c>
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <txRoundFramePayloadSizeUp+0x4c>)
 800b31c:	4a0f      	ldr	r2, [pc, #60]	; (800b35c <txRoundFramePayloadSizeUp+0x50>)
 800b31e:	f240 1123 	movw	r1, #291	; 0x123
 800b322:	480f      	ldr	r0, [pc, #60]	; (800b360 <txRoundFramePayloadSizeUp+0x54>)
 800b324:	f003 ff98 	bl	800f258 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800b328:	4a0e      	ldr	r2, [pc, #56]	; (800b364 <txRoundFramePayloadSizeUp+0x58>)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4413      	add	r3, r2
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b0f      	cmp	r3, #15
 800b336:	d906      	bls.n	800b346 <txRoundFramePayloadSizeUp+0x3a>
 800b338:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <txRoundFramePayloadSizeUp+0x5c>)
 800b33a:	4a08      	ldr	r2, [pc, #32]	; (800b35c <txRoundFramePayloadSizeUp+0x50>)
 800b33c:	f44f 7193 	mov.w	r1, #294	; 0x126
 800b340:	4807      	ldr	r0, [pc, #28]	; (800b360 <txRoundFramePayloadSizeUp+0x54>)
 800b342:	f003 ff89 	bl	800f258 <__assert_func>
    return CanardCANDLCToLength[y];
 800b346:	4a09      	ldr	r2, [pc, #36]	; (800b36c <txRoundFramePayloadSizeUp+0x60>)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	781b      	ldrb	r3, [r3, #0]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	08013aa4 	.word	0x08013aa4
 800b35c:	08014e78 	.word	0x08014e78
 800b360:	08013970 	.word	0x08013970
 800b364:	08014da0 	.word	0x08014da0
 800b368:	08013aec 	.word	0x08013aec
 800b36c:	08014d90 	.word	0x08014d90

0800b370 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <txAllocateQueueItem+0x22>
 800b384:	4b1f      	ldr	r3, [pc, #124]	; (800b404 <txAllocateQueueItem+0x94>)
 800b386:	4a20      	ldr	r2, [pc, #128]	; (800b408 <txAllocateQueueItem+0x98>)
 800b388:	f44f 7198 	mov.w	r1, #304	; 0x130
 800b38c:	481f      	ldr	r0, [pc, #124]	; (800b40c <txAllocateQueueItem+0x9c>)
 800b38e:	f003 ff63 	bl	800f258 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <txAllocateQueueItem+0x36>
 800b398:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <txAllocateQueueItem+0xa0>)
 800b39a:	4a1b      	ldr	r2, [pc, #108]	; (800b408 <txAllocateQueueItem+0x98>)
 800b39c:	f240 1131 	movw	r1, #305	; 0x131
 800b3a0:	481a      	ldr	r0, [pc, #104]	; (800b40c <txAllocateQueueItem+0x9c>)
 800b3a2:	f003 ff59 	bl	800f258 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	6a3a      	ldr	r2, [r7, #32]
 800b3ac:	3230      	adds	r2, #48	; 0x30
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	4798      	blx	r3
 800b3b4:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d01e      	beq.n	800b3fa <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800b3da:	6979      	ldr	r1, [r7, #20]
 800b3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e0:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	6a3a      	ldr	r2, [r7, #32]
 800b3e8:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	621a      	str	r2, [r3, #32]
    }
    return out;
 800b3fa:	697b      	ldr	r3, [r7, #20]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	08013b34 	.word	0x08013b34
 800b408:	08014e94 	.word	0x08014e94
 800b40c:	08013970 	.word	0x08013970
 800b410:	08013b48 	.word	0x08013b48

0800b414 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <txAVLPredicate+0x1e>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <txAVLPredicate+0x2c>
 800b432:	4b0a      	ldr	r3, [pc, #40]	; (800b45c <txAVLPredicate+0x48>)
 800b434:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <txAVLPredicate+0x4c>)
 800b436:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b43a:	480a      	ldr	r0, [pc, #40]	; (800b464 <txAVLPredicate+0x50>)
 800b43c:	f003 ff0c 	bl	800f258 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d301      	bcc.n	800b450 <txAVLPredicate+0x3c>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e001      	b.n	800b454 <txAVLPredicate+0x40>
 800b450:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	08013b5c 	.word	0x08013b5c
 800b460:	08014e68 	.word	0x08014e68
 800b464:	08013970 	.word	0x08013970

0800b468 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b08d      	sub	sp, #52	; 0x34
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d106      	bne.n	800b48a <txPushSingleFrame+0x22>
 800b47c:	4b5c      	ldr	r3, [pc, #368]	; (800b5f0 <txPushSingleFrame+0x188>)
 800b47e:	4a5d      	ldr	r2, [pc, #372]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b480:	f240 1159 	movw	r1, #345	; 0x159
 800b484:	485c      	ldr	r0, [pc, #368]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b486:	f003 fee7 	bl	800f258 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800b48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d109      	bne.n	800b4a4 <txPushSingleFrame+0x3c>
 800b490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b492:	2b00      	cmp	r3, #0
 800b494:	d006      	beq.n	800b4a4 <txPushSingleFrame+0x3c>
 800b496:	4b59      	ldr	r3, [pc, #356]	; (800b5fc <txPushSingleFrame+0x194>)
 800b498:	4a56      	ldr	r2, [pc, #344]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b49a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800b49e:	4856      	ldr	r0, [pc, #344]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b4a0:	f003 feda 	bl	800f258 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800b4a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff ff2f 	bl	800b30c <txRoundFramePayloadSizeUp>
 800b4ae:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800b4b0:	6a3a      	ldr	r2, [r7, #32]
 800b4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d806      	bhi.n	800b4c6 <txPushSingleFrame+0x5e>
 800b4b8:	4b51      	ldr	r3, [pc, #324]	; (800b600 <txPushSingleFrame+0x198>)
 800b4ba:	4a4e      	ldr	r2, [pc, #312]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b4bc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b4c0:	484d      	ldr	r0, [pc, #308]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b4c2:	f003 fec9 	bl	800f258 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800b4c6:	6a3a      	ldr	r2, [r7, #32]
 800b4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d4:	4413      	add	r3, r2
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	6a3a      	ldr	r2, [r7, #32]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d006      	beq.n	800b4ec <txPushSingleFrame+0x84>
 800b4de:	4b49      	ldr	r3, [pc, #292]	; (800b604 <txPushSingleFrame+0x19c>)
 800b4e0:	4a44      	ldr	r2, [pc, #272]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b4e2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800b4e6:	4844      	ldr	r0, [pc, #272]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b4e8:	f003 feb6 	bl	800f258 <__assert_func>
    int32_t       out = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d209      	bcs.n	800b510 <txPushSingleFrame+0xa8>
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b506:	68b8      	ldr	r0, [r7, #8]
 800b508:	f7ff ff32 	bl	800b370 <txAllocateQueueItem>
 800b50c:	4603      	mov	r3, r0
 800b50e:	e000      	b.n	800b512 <txPushSingleFrame+0xaa>
 800b510:	2300      	movs	r3, #0
    TxItem* const tqi =
 800b512:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d054      	beq.n	800b5c4 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800b51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d010      	beq.n	800b542 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800b520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <txPushSingleFrame+0xcc>
 800b526:	4b38      	ldr	r3, [pc, #224]	; (800b608 <txPushSingleFrame+0x1a0>)
 800b528:	4a32      	ldr	r2, [pc, #200]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b52a:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b52e:	4832      	ldr	r0, [pc, #200]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b530:	f003 fe92 	bl	800f258 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	3330      	adds	r3, #48	; 0x30
 800b538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b53a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b53c:	4618      	mov	r0, r3
 800b53e:	f004 fd8c 	bl	801005a <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800b542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b544:	3330      	adds	r3, #48	; 0x30
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	4413      	add	r3, r2
 800b54a:	69fa      	ldr	r2, [r7, #28]
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f004 fcf3 	bl	800ff3a <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	1e5c      	subs	r4, r3, #1
 800b558:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b55c:	2201      	movs	r2, #1
 800b55e:	2101      	movs	r1, #1
 800b560:	2001      	movs	r0, #1
 800b562:	f7ff fe91 	bl	800b288 <txMakeTailByte>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	4423      	add	r3, r4
 800b56e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f103 000c 	add.w	r0, r3, #12
 800b578:	69b9      	ldr	r1, [r7, #24]
 800b57a:	4b24      	ldr	r3, [pc, #144]	; (800b60c <txPushSingleFrame+0x1a4>)
 800b57c:	4a24      	ldr	r2, [pc, #144]	; (800b610 <txPushSingleFrame+0x1a8>)
 800b57e:	f7ff fae7 	bl	800ab50 <cavlSearch>
 800b582:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d006      	beq.n	800b59a <txPushSingleFrame+0x132>
 800b58c:	4b21      	ldr	r3, [pc, #132]	; (800b614 <txPushSingleFrame+0x1ac>)
 800b58e:	4a19      	ldr	r2, [pc, #100]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b590:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800b594:	4818      	ldr	r0, [pc, #96]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b596:	f003 fe5f 	bl	800f258 <__assert_func>
        que->size++;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d906      	bls.n	800b5be <txPushSingleFrame+0x156>
 800b5b0:	4b19      	ldr	r3, [pc, #100]	; (800b618 <txPushSingleFrame+0x1b0>)
 800b5b2:	4a10      	ldr	r2, [pc, #64]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b5b4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800b5b8:	480f      	ldr	r0, [pc, #60]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b5ba:	f003 fe4d 	bl	800f258 <__assert_func>
        out = 1;  // One frame enqueued.
 800b5be:	2301      	movs	r3, #1
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5c2:	e002      	b.n	800b5ca <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800b5c4:	f06f 0302 	mvn.w	r3, #2
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	db09      	blt.n	800b5e4 <txPushSingleFrame+0x17c>
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d006      	beq.n	800b5e4 <txPushSingleFrame+0x17c>
 800b5d6:	4b11      	ldr	r3, [pc, #68]	; (800b61c <txPushSingleFrame+0x1b4>)
 800b5d8:	4a06      	ldr	r2, [pc, #24]	; (800b5f4 <txPushSingleFrame+0x18c>)
 800b5da:	f240 117b 	movw	r1, #379	; 0x17b
 800b5de:	4806      	ldr	r0, [pc, #24]	; (800b5f8 <txPushSingleFrame+0x190>)
 800b5e0:	f003 fe3a 	bl	800f258 <__assert_func>
    return out;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	372c      	adds	r7, #44	; 0x2c
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd90      	pop	{r4, r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	08013b34 	.word	0x08013b34
 800b5f4:	08014e54 	.word	0x08014e54
 800b5f8:	08013970 	.word	0x08013970
 800b5fc:	08013b90 	.word	0x08013b90
 800b600:	08013bc0 	.word	0x08013bc0
 800b604:	08013be4 	.word	0x08013be4
 800b608:	08013c20 	.word	0x08013c20
 800b60c:	0800aeb1 	.word	0x0800aeb1
 800b610:	0800b415 	.word	0x0800b415
 800b614:	08013c38 	.word	0x08013c38
 800b618:	08013c50 	.word	0x08013c50
 800b61c:	08013c6c 	.word	0x08013c6c

0800b620 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b093      	sub	sp, #76	; 0x4c
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d106      	bne.n	800b640 <txGenerateMultiFrameChain+0x20>
 800b632:	4b93      	ldr	r3, [pc, #588]	; (800b880 <txGenerateMultiFrameChain+0x260>)
 800b634:	4a93      	ldr	r2, [pc, #588]	; (800b884 <txGenerateMultiFrameChain+0x264>)
 800b636:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800b63a:	4893      	ldr	r0, [pc, #588]	; (800b888 <txGenerateMultiFrameChain+0x268>)
 800b63c:	f003 fe0c 	bl	800f258 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d106      	bne.n	800b654 <txGenerateMultiFrameChain+0x34>
 800b646:	4b91      	ldr	r3, [pc, #580]	; (800b88c <txGenerateMultiFrameChain+0x26c>)
 800b648:	4a8e      	ldr	r2, [pc, #568]	; (800b884 <txGenerateMultiFrameChain+0x264>)
 800b64a:	f240 1189 	movw	r1, #393	; 0x189
 800b64e:	488e      	ldr	r0, [pc, #568]	; (800b888 <txGenerateMultiFrameChain+0x268>)
 800b650:	f003 fe02 	bl	800f258 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d806      	bhi.n	800b66a <txGenerateMultiFrameChain+0x4a>
 800b65c:	4b8c      	ldr	r3, [pc, #560]	; (800b890 <txGenerateMultiFrameChain+0x270>)
 800b65e:	4a89      	ldr	r2, [pc, #548]	; (800b884 <txGenerateMultiFrameChain+0x264>)
 800b660:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800b664:	4888      	ldr	r0, [pc, #544]	; (800b888 <txGenerateMultiFrameChain+0x268>)
 800b666:	f003 fdf7 	bl	800f258 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800b66a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <txGenerateMultiFrameChain+0x5e>
 800b670:	4b88      	ldr	r3, [pc, #544]	; (800b894 <txGenerateMultiFrameChain+0x274>)
 800b672:	4a84      	ldr	r2, [pc, #528]	; (800b884 <txGenerateMultiFrameChain+0x264>)
 800b674:	f240 118b 	movw	r1, #395	; 0x18b
 800b678:	4883      	ldr	r0, [pc, #524]	; (800b888 <txGenerateMultiFrameChain+0x268>)
 800b67a:	f003 fded 	bl	800f258 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800b67e:	2300      	movs	r3, #0
 800b680:	613b      	str	r3, [r7, #16]
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	2300      	movs	r3, #0
 800b688:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b68c:	3302      	adds	r3, #2
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800b694:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b698:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b69c:	f7ff fc34 	bl	800af08 <crcAdd>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800b6aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ac:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800b6ae:	e0d4      	b.n	800b85a <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800b6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ba:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d908      	bls.n	800b6d4 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800b6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff fe1e 	bl	800b30c <txRoundFramePayloadSizeUp>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	e001      	b.n	800b6d8 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6e4:	68b8      	ldr	r0, [r7, #8]
 800b6e6:	f7ff fe43 	bl	800b370 <txAllocateQueueItem>
 800b6ea:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	613b      	str	r3, [r7, #16]
 800b6f6:	e002      	b.n	800b6fe <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	6a3a      	ldr	r2, [r7, #32]
 800b6fc:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 80ae 	beq.w	800b866 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	3b01      	subs	r3, #1
 800b70e:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800b714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b718:	429a      	cmp	r2, r3
 800b71a:	d21c      	bcs.n	800b756 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800b71c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800b724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d901      	bls.n	800b730 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	3330      	adds	r3, #48	; 0x30
 800b734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b738:	4618      	mov	r0, r3
 800b73a:	f004 fc8e 	bl	801005a <memcpy>
            frame_offset = frame_offset + move_size;
 800b73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	4413      	add	r3, r2
 800b744:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800b746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	4413      	add	r3, r2
 800b74c:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800b74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	4413      	add	r3, r2
 800b754:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800b756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d343      	bcc.n	800b7e6 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b75e:	e00f      	b.n	800b780 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	4413      	add	r3, r2
 800b766:	3330      	adds	r3, #48	; 0x30
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3301      	adds	r3, #1
 800b770:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800b772:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b774:	2100      	movs	r1, #0
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fba6 	bl	800aec8 <crcAddByte>
 800b77c:	4603      	mov	r3, r0
 800b77e:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	3302      	adds	r3, #2
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	429a      	cmp	r2, r3
 800b788:	d8ea      	bhi.n	800b760 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800b78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d213      	bcs.n	800b7ba <txGenerateMultiFrameChain+0x19a>
 800b792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b796:	429a      	cmp	r2, r3
 800b798:	d10f      	bne.n	800b7ba <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800b79a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b79c:	0a1b      	lsrs	r3, r3, #8
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	b2d9      	uxtb	r1, r3
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3330      	adds	r3, #48	; 0x30
 800b7aa:	460a      	mov	r2, r1
 800b7ac:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d211      	bcs.n	800b7e6 <txGenerateMultiFrameChain+0x1c6>
 800b7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d90d      	bls.n	800b7e6 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b7ce:	b2d9      	uxtb	r1, r3
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	4413      	add	r3, r2
 800b7d4:	3330      	adds	r3, #48	; 0x30
 800b7d6:	460a      	mov	r2, r1
 800b7d8:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	3301      	adds	r3, #1
 800b7de:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d006      	beq.n	800b800 <txGenerateMultiFrameChain+0x1e0>
 800b7f2:	4b29      	ldr	r3, [pc, #164]	; (800b898 <txGenerateMultiFrameChain+0x278>)
 800b7f4:	4a23      	ldr	r2, [pc, #140]	; (800b884 <txGenerateMultiFrameChain+0x264>)
 800b7f6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800b7fa:	4823      	ldr	r0, [pc, #140]	; (800b888 <txGenerateMultiFrameChain+0x268>)
 800b7fc:	f003 fd2c 	bl	800f258 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	bf0c      	ite	eq
 800b808:	2301      	moveq	r3, #1
 800b80a:	2300      	movne	r3, #0
 800b80c:	b2d8      	uxtb	r0, r3
 800b80e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	429a      	cmp	r2, r3
 800b814:	bf2c      	ite	cs
 800b816:	2301      	movcs	r3, #1
 800b818:	2300      	movcc	r3, #0
 800b81a:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b81c:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b81e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b822:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800b826:	f7ff fd2f 	bl	800b288 <txMakeTailByte>
 800b82a:	4603      	mov	r3, r0
 800b82c:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b830:	4423      	add	r3, r4
 800b832:	3330      	adds	r3, #48	; 0x30
 800b834:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800b836:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bf14      	ite	ne
 800b83e:	2301      	movne	r3, #1
 800b840:	2300      	moveq	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f083 0301 	eor.w	r3, r3, #1
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800b84e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800b85a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	429a      	cmp	r2, r3
 800b860:	f4ff af26 	bcc.w	800b6b0 <txGenerateMultiFrameChain+0x90>
 800b864:	e000      	b.n	800b868 <txGenerateMultiFrameChain+0x248>
            break;
 800b866:	bf00      	nop
    }
    return out;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	461c      	mov	r4, r3
 800b86c:	f107 0310 	add.w	r3, r7, #16
 800b870:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	3744      	adds	r7, #68	; 0x44
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}
 800b880:	08013b34 	.word	0x08013b34
 800b884:	08014f24 	.word	0x08014f24
 800b888:	08013970 	.word	0x08013970
 800b88c:	08013c84 	.word	0x08013c84
 800b890:	08013ca0 	.word	0x08013ca0
 800b894:	08013c20 	.word	0x08013c20
 800b898:	08013cc8 	.word	0x08013cc8

0800b89c <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b094      	sub	sp, #80	; 0x50
 800b8a0:	af06      	add	r7, sp, #24
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <txPushMultiFrame+0x18>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d106      	bne.n	800b8c2 <txPushMultiFrame+0x26>
 800b8b4:	4b65      	ldr	r3, [pc, #404]	; (800ba4c <txPushMultiFrame+0x1b0>)
 800b8b6:	4a66      	ldr	r2, [pc, #408]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b8b8:	f240 11ed 	movw	r1, #493	; 0x1ed
 800b8bc:	4865      	ldr	r0, [pc, #404]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b8be:	f003 fccb 	bl	800f258 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <txPushMultiFrame+0x3a>
 800b8c8:	4b63      	ldr	r3, [pc, #396]	; (800ba58 <txPushMultiFrame+0x1bc>)
 800b8ca:	4a61      	ldr	r2, [pc, #388]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b8cc:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800b8d0:	4860      	ldr	r0, [pc, #384]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b8d2:	f003 fcc1 	bl	800f258 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b8d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d806      	bhi.n	800b8ec <txPushMultiFrame+0x50>
 800b8de:	4b5f      	ldr	r3, [pc, #380]	; (800ba5c <txPushMultiFrame+0x1c0>)
 800b8e0:	4a5b      	ldr	r2, [pc, #364]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b8e2:	f240 11ef 	movw	r1, #495	; 0x1ef
 800b8e6:	485b      	ldr	r0, [pc, #364]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b8e8:	f003 fcb6 	bl	800f258 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f2:	3302      	adds	r3, #2
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800b8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	1e5a      	subs	r2, r3, #1
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	fbb2 f3f3 	udiv	r3, r2, r3
 800b904:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d806      	bhi.n	800b91a <txPushMultiFrame+0x7e>
 800b90c:	4b54      	ldr	r3, [pc, #336]	; (800ba60 <txPushMultiFrame+0x1c4>)
 800b90e:	4a50      	ldr	r2, [pc, #320]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b910:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b914:	484f      	ldr	r0, [pc, #316]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b916:	f003 fc9f 	bl	800f258 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	441a      	add	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d87b      	bhi.n	800ba22 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800b92a:	f107 0010 	add.w	r0, r7, #16
 800b92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b93a:	9303      	str	r3, [sp, #12]
 800b93c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b93e:	9302      	str	r3, [sp, #8]
 800b940:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b944:	e9cd 2300 	strd	r2, r3, [sp]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	68b9      	ldr	r1, [r7, #8]
 800b94c:	f7ff fe68 	bl	800b620 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d051      	beq.n	800b9fa <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f103 000c 	add.w	r0, r3, #12
 800b960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b962:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <txPushMultiFrame+0x1c8>)
 800b964:	4a40      	ldr	r2, [pc, #256]	; (800ba68 <txPushMultiFrame+0x1cc>)
 800b966:	f7ff f8f3 	bl	800ab50 <cavlSearch>
 800b96a:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	429a      	cmp	r2, r3
 800b972:	d006      	beq.n	800b982 <txPushMultiFrame+0xe6>
 800b974:	4b3d      	ldr	r3, [pc, #244]	; (800ba6c <txPushMultiFrame+0x1d0>)
 800b976:	4a36      	ldr	r2, [pc, #216]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b978:	f240 2106 	movw	r1, #518	; 0x206
 800b97c:	4835      	ldr	r0, [pc, #212]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b97e:	f003 fc6b 	bl	800f258 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <txPushMultiFrame+0xfc>
 800b98a:	4b39      	ldr	r3, [pc, #228]	; (800ba70 <txPushMultiFrame+0x1d4>)
 800b98c:	4a30      	ldr	r2, [pc, #192]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b98e:	f240 2107 	movw	r1, #519	; 0x207
 800b992:	4830      	ldr	r0, [pc, #192]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b994:	f003 fc60 	bl	800f258 <__assert_func>
                next = next->next_in_transfer;
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1da      	bne.n	800b95a <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d006      	beq.n	800b9ba <txPushMultiFrame+0x11e>
 800b9ac:	4b31      	ldr	r3, [pc, #196]	; (800ba74 <txPushMultiFrame+0x1d8>)
 800b9ae:	4a28      	ldr	r2, [pc, #160]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b9b0:	f240 210a 	movw	r1, #522	; 0x20a
 800b9b4:	4827      	ldr	r0, [pc, #156]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b9b6:	f003 fc4f 	bl	800f258 <__assert_func>
            que->size += sq.size;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	441a      	add	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	689a      	ldr	r2, [r3, #8]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d906      	bls.n	800b9e0 <txPushMultiFrame+0x144>
 800b9d2:	4b29      	ldr	r3, [pc, #164]	; (800ba78 <txPushMultiFrame+0x1dc>)
 800b9d4:	4a1e      	ldr	r2, [pc, #120]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b9d6:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800b9da:	481e      	ldr	r0, [pc, #120]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b9dc:	f003 fc3c 	bl	800f258 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	da06      	bge.n	800b9f4 <txPushMultiFrame+0x158>
 800b9e6:	4b25      	ldr	r3, [pc, #148]	; (800ba7c <txPushMultiFrame+0x1e0>)
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800b9ea:	f240 210d 	movw	r1, #525	; 0x20d
 800b9ee:	4819      	ldr	r0, [pc, #100]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800b9f0:	f003 fc32 	bl	800f258 <__assert_func>
            out = (int32_t) sq.size;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f8:	e016      	b.n	800ba28 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800b9fa:	f06f 0302 	mvn.w	r3, #2
 800b9fe:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800ba04:	e009      	b.n	800ba1a <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	4798      	blx	r3
                head = next;
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1f2      	bne.n	800ba06 <txPushMultiFrame+0x16a>
 800ba20:	e002      	b.n	800ba28 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ba22:	f06f 0302 	mvn.w	r3, #2
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	db09      	blt.n	800ba42 <txPushMultiFrame+0x1a6>
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	dc06      	bgt.n	800ba42 <txPushMultiFrame+0x1a6>
 800ba34:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <txPushMultiFrame+0x1e4>)
 800ba36:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <txPushMultiFrame+0x1b4>)
 800ba38:	f44f 7108 	mov.w	r1, #544	; 0x220
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <txPushMultiFrame+0x1b8>)
 800ba3e:	f003 fc0b 	bl	800f258 <__assert_func>
    return out;
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3738      	adds	r7, #56	; 0x38
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	08013d04 	.word	0x08013d04
 800ba50:	08014f10 	.word	0x08014f10
 800ba54:	08013970 	.word	0x08013970
 800ba58:	08013c84 	.word	0x08013c84
 800ba5c:	08013ca0 	.word	0x08013ca0
 800ba60:	08013d34 	.word	0x08013d34
 800ba64:	0800aeb1 	.word	0x0800aeb1
 800ba68:	0800b415 	.word	0x0800b415
 800ba6c:	08013d44 	.word	0x08013d44
 800ba70:	08013d58 	.word	0x08013d58
 800ba74:	08013d74 	.word	0x08013d74
 800ba78:	08013c50 	.word	0x08013c50
 800ba7c:	08013d8c 	.word	0x08013d8c
 800ba80:	08013db0 	.word	0x08013db0

0800ba84 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d106      	bne.n	800baa6 <rxTryParseFrame+0x22>
 800ba98:	4b96      	ldr	r3, [pc, #600]	; (800bcf4 <rxTryParseFrame+0x270>)
 800ba9a:	4a97      	ldr	r2, [pc, #604]	; (800bcf8 <rxTryParseFrame+0x274>)
 800ba9c:	f240 214f 	movw	r1, #591	; 0x24f
 800baa0:	4896      	ldr	r0, [pc, #600]	; (800bcfc <rxTryParseFrame+0x278>)
 800baa2:	f003 fbd9 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baae:	d306      	bcc.n	800babe <rxTryParseFrame+0x3a>
 800bab0:	4b93      	ldr	r3, [pc, #588]	; (800bd00 <rxTryParseFrame+0x27c>)
 800bab2:	4a91      	ldr	r2, [pc, #580]	; (800bcf8 <rxTryParseFrame+0x274>)
 800bab4:	f44f 7114 	mov.w	r1, #592	; 0x250
 800bab8:	4890      	ldr	r0, [pc, #576]	; (800bcfc <rxTryParseFrame+0x278>)
 800baba:	f003 fbcd 	bl	800f258 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <rxTryParseFrame+0x4e>
 800bac4:	4b8f      	ldr	r3, [pc, #572]	; (800bd04 <rxTryParseFrame+0x280>)
 800bac6:	4a8c      	ldr	r2, [pc, #560]	; (800bcf8 <rxTryParseFrame+0x274>)
 800bac8:	f240 2151 	movw	r1, #593	; 0x251
 800bacc:	488b      	ldr	r0, [pc, #556]	; (800bcfc <rxTryParseFrame+0x278>)
 800bace:	f003 fbc3 	bl	800f258 <__assert_func>
    bool valid = false;
 800bad2:	2300      	movs	r3, #0
 800bad4:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 8105 	beq.w	800bcea <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <rxTryParseFrame+0x72>
 800bae8:	4b87      	ldr	r3, [pc, #540]	; (800bd08 <rxTryParseFrame+0x284>)
 800baea:	4a83      	ldr	r2, [pc, #524]	; (800bcf8 <rxTryParseFrame+0x274>)
 800baec:	f240 2155 	movw	r1, #597	; 0x255
 800baf0:	4882      	ldr	r0, [pc, #520]	; (800bcfc <rxTryParseFrame+0x278>)
 800baf2:	f003 fbb1 	bl	800f258 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bafc:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	0e9b      	lsrs	r3, r3, #26
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	f003 0307 	and.w	r3, r3, #7
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d128      	bne.n	800bb80 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2200      	movs	r2, #0
 800bb32:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	0a1b      	lsrs	r3, r3, #8
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	22ff      	movs	r2, #255	; 0xff
 800bb52:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	22ff      	movs	r2, #255	; 0xff
 800bb58:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <rxTryParseFrame+0xee>
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <rxTryParseFrame+0xee>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e000      	b.n	800bb74 <rxTryParseFrame+0xf0>
 800bb72:	2300      	movs	r3, #0
 800bb74:	77fb      	strb	r3, [r7, #31]
 800bb76:	7ffb      	ldrb	r3, [r7, #31]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	77fb      	strb	r3, [r7, #31]
 800bb7e:	e02c      	b.n	800bbda <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <rxTryParseFrame+0x10a>
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	e000      	b.n	800bb90 <rxTryParseFrame+0x10c>
 800bb8e:	2201      	movs	r2, #1
            out->transfer_kind =
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	0b9b      	lsrs	r3, r3, #14
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	09db      	lsrs	r3, r3, #7
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d107      	bne.n	800bbce <rxTryParseFrame+0x14a>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	7b1a      	ldrb	r2, [r3, #12]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	7b5b      	ldrb	r3, [r3, #13]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d001      	beq.n	800bbce <rxTryParseFrame+0x14a>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <rxTryParseFrame+0x14c>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	77fb      	strb	r3, [r7, #31]
 800bbd2:	7ffb      	ldrb	r3, [r7, #31]
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	1e5a      	subs	r2, r3, #1
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	699a      	ldr	r2, [r3, #24]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	f003 031f 	and.w	r3, r3, #31
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800bc06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	09db      	lsrs	r3, r3, #7
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bf14      	ite	ne
 800bc1e:	2301      	movne	r3, #1
 800bc20:	2300      	moveq	r3, #0
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bf14      	ite	ne
 800bc32:	2301      	movne	r3, #1
 800bc34:	2300      	moveq	r3, #0
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00c      	beq.n	800bc5c <rxTryParseFrame+0x1d8>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	7bdb      	ldrb	r3, [r3, #15]
 800bc46:	f083 0301 	eor.w	r3, r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <rxTryParseFrame+0x1d4>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	7c5b      	ldrb	r3, [r3, #17]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <rxTryParseFrame+0x1d8>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e000      	b.n	800bc5e <rxTryParseFrame+0x1da>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	77fb      	strb	r3, [r7, #31]
 800bc60:	7ffb      	ldrb	r3, [r7, #31]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800bc68:	7ffb      	ldrb	r3, [r7, #31]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00d      	beq.n	800bc8a <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	7c1b      	ldrb	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d103      	bne.n	800bc86 <rxTryParseFrame+0x202>
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	7b1b      	ldrb	r3, [r3, #12]
 800bc82:	2bff      	cmp	r3, #255	; 0xff
 800bc84:	d001      	beq.n	800bc8a <rxTryParseFrame+0x206>
        valid = valid &&
 800bc86:	2301      	movs	r3, #1
 800bc88:	e000      	b.n	800bc8c <rxTryParseFrame+0x208>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	77fb      	strb	r3, [r7, #31]
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800bc96:	7ffb      	ldrb	r3, [r7, #31]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <rxTryParseFrame+0x22c>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	2b06      	cmp	r3, #6
 800bca2:	d803      	bhi.n	800bcac <rxTryParseFrame+0x228>
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	7c1b      	ldrb	r3, [r3, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <rxTryParseFrame+0x22c>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <rxTryParseFrame+0x22e>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	7ffb      	ldrb	r3, [r7, #31]
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800bcbc:	7ffb      	ldrb	r3, [r7, #31]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00d      	beq.n	800bcde <rxTryParseFrame+0x25a>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d107      	bne.n	800bcda <rxTryParseFrame+0x256>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	7bdb      	ldrb	r3, [r3, #15]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <rxTryParseFrame+0x25a>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	7c1b      	ldrb	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <rxTryParseFrame+0x25a>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <rxTryParseFrame+0x25c>
 800bcde:	2300      	movs	r3, #0
 800bce0:	77fb      	strb	r3, [r7, #31]
 800bce2:	7ffb      	ldrb	r3, [r7, #31]
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800bcea:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	08013dc8 	.word	0x08013dc8
 800bcf8:	08014f60 	.word	0x08014f60
 800bcfc:	08013970 	.word	0x08013970
 800bd00:	08013de0 	.word	0x08013de0
 800bd04:	08013e10 	.word	0x08013e10
 800bd08:	08013e24 	.word	0x08013e24

0800bd0c <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d106      	bne.n	800bd2a <rxInitTransferMetadataFromFrame+0x1e>
 800bd1c:	4b19      	ldr	r3, [pc, #100]	; (800bd84 <rxInitTransferMetadataFromFrame+0x78>)
 800bd1e:	4a1a      	ldr	r2, [pc, #104]	; (800bd88 <rxInitTransferMetadataFromFrame+0x7c>)
 800bd20:	f44f 7124 	mov.w	r1, #656	; 0x290
 800bd24:	4819      	ldr	r0, [pc, #100]	; (800bd8c <rxInitTransferMetadataFromFrame+0x80>)
 800bd26:	f003 fa97 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <rxInitTransferMetadataFromFrame+0x34>
 800bd32:	4b17      	ldr	r3, [pc, #92]	; (800bd90 <rxInitTransferMetadataFromFrame+0x84>)
 800bd34:	4a14      	ldr	r2, [pc, #80]	; (800bd88 <rxInitTransferMetadataFromFrame+0x7c>)
 800bd36:	f240 2191 	movw	r1, #657	; 0x291
 800bd3a:	4814      	ldr	r0, [pc, #80]	; (800bd8c <rxInitTransferMetadataFromFrame+0x80>)
 800bd3c:	f003 fa8c 	bl	800f258 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <rxInitTransferMetadataFromFrame+0x48>
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <rxInitTransferMetadataFromFrame+0x88>)
 800bd48:	4a0f      	ldr	r2, [pc, #60]	; (800bd88 <rxInitTransferMetadataFromFrame+0x7c>)
 800bd4a:	f240 2192 	movw	r1, #658	; 0x292
 800bd4e:	480f      	ldr	r0, [pc, #60]	; (800bd8c <rxInitTransferMetadataFromFrame+0x80>)
 800bd50:	f003 fa82 	bl	800f258 <__assert_func>
    out_transfer->priority       = frame->priority;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7a1a      	ldrb	r2, [r3, #8]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7a5a      	ldrb	r2, [r3, #9]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	895a      	ldrh	r2, [r3, #10]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	7b1a      	ldrb	r2, [r3, #12]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7b9a      	ldrb	r2, [r3, #14]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	715a      	strb	r2, [r3, #5]
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	08013dc8 	.word	0x08013dc8
 800bd88:	0801500c 	.word	0x0801500c
 800bd8c:	08013970 	.word	0x08013970
 800bd90:	08013e24 	.word	0x08013e24
 800bd94:	08013e44 	.word	0x08013e44

0800bd98 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	460a      	mov	r2, r1
 800bda2:	71fb      	strb	r3, [r7, #7]
 800bda4:	4613      	mov	r3, r2
 800bda6:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	2b1f      	cmp	r3, #31
 800bdac:	d906      	bls.n	800bdbc <rxComputeTransferIDDifference+0x24>
 800bdae:	4b15      	ldr	r3, [pc, #84]	; (800be04 <rxComputeTransferIDDifference+0x6c>)
 800bdb0:	4a15      	ldr	r2, [pc, #84]	; (800be08 <rxComputeTransferIDDifference+0x70>)
 800bdb2:	f240 219d 	movw	r1, #669	; 0x29d
 800bdb6:	4815      	ldr	r0, [pc, #84]	; (800be0c <rxComputeTransferIDDifference+0x74>)
 800bdb8:	f003 fa4e 	bl	800f258 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800bdbc:	79bb      	ldrb	r3, [r7, #6]
 800bdbe:	2b1f      	cmp	r3, #31
 800bdc0:	d906      	bls.n	800bdd0 <rxComputeTransferIDDifference+0x38>
 800bdc2:	4b13      	ldr	r3, [pc, #76]	; (800be10 <rxComputeTransferIDDifference+0x78>)
 800bdc4:	4a10      	ldr	r2, [pc, #64]	; (800be08 <rxComputeTransferIDDifference+0x70>)
 800bdc6:	f240 219e 	movw	r1, #670	; 0x29e
 800bdca:	4810      	ldr	r0, [pc, #64]	; (800be0c <rxComputeTransferIDDifference+0x74>)
 800bdcc:	f003 fa44 	bl	800f258 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	79bb      	ldrb	r3, [r7, #6]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800bdde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	da07      	bge.n	800bdf6 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800bde6:	2320      	movs	r3, #32
 800bde8:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800bdea:	7b7b      	ldrb	r3, [r7, #13]
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	89fb      	ldrh	r3, [r7, #14]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800bdf6:	89fb      	ldrh	r3, [r7, #14]
 800bdf8:	b2db      	uxtb	r3, r3
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08013e60 	.word	0x08013e60
 800be08:	08014fa8 	.word	0x08014fa8
 800be0c:	08013970 	.word	0x08013970
 800be10:	08013e78 	.word	0x08013e78

0800be14 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d106      	bne.n	800be36 <rxSessionWritePayload+0x22>
 800be28:	4b67      	ldr	r3, [pc, #412]	; (800bfc8 <rxSessionWritePayload+0x1b4>)
 800be2a:	4a68      	ldr	r2, [pc, #416]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800be2c:	f240 21ae 	movw	r1, #686	; 0x2ae
 800be30:	4867      	ldr	r0, [pc, #412]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800be32:	f003 fa11 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d106      	bne.n	800be4a <rxSessionWritePayload+0x36>
 800be3c:	4b65      	ldr	r3, [pc, #404]	; (800bfd4 <rxSessionWritePayload+0x1c0>)
 800be3e:	4a63      	ldr	r2, [pc, #396]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800be40:	f240 21af 	movw	r1, #687	; 0x2af
 800be44:	4862      	ldr	r0, [pc, #392]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800be46:	f003 fa07 	bl	800f258 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <rxSessionWritePayload+0x50>
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d006      	beq.n	800be64 <rxSessionWritePayload+0x50>
 800be56:	4b60      	ldr	r3, [pc, #384]	; (800bfd8 <rxSessionWritePayload+0x1c4>)
 800be58:	4a5c      	ldr	r2, [pc, #368]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800be5a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800be5e:	485c      	ldr	r0, [pc, #368]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800be60:	f003 f9fa 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d206      	bcs.n	800be7c <rxSessionWritePayload+0x68>
 800be6e:	4b5b      	ldr	r3, [pc, #364]	; (800bfdc <rxSessionWritePayload+0x1c8>)
 800be70:	4a56      	ldr	r2, [pc, #344]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800be72:	f240 21b1 	movw	r1, #689	; 0x2b1
 800be76:	4856      	ldr	r0, [pc, #344]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800be78:	f003 f9ee 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	d906      	bls.n	800be96 <rxSessionWritePayload+0x82>
 800be88:	4b55      	ldr	r3, [pc, #340]	; (800bfe0 <rxSessionWritePayload+0x1cc>)
 800be8a:	4a50      	ldr	r2, [pc, #320]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800be8c:	f240 21b2 	movw	r1, #690	; 0x2b2
 800be90:	484f      	ldr	r0, [pc, #316]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800be92:	f003 f9e1 	bl	800f258 <__assert_func>

    rxs->total_payload_size += payload_size;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	689a      	ldr	r2, [r3, #8]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	441a      	add	r2, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d115      	bne.n	800bed6 <rxSessionWritePayload+0xc2>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d012      	beq.n	800bed6 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <rxSessionWritePayload+0xb2>
 800beb8:	4b4a      	ldr	r3, [pc, #296]	; (800bfe4 <rxSessionWritePayload+0x1d0>)
 800beba:	4a44      	ldr	r2, [pc, #272]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bebc:	f240 21b9 	movw	r1, #697	; 0x2b9
 800bec0:	4843      	ldr	r0, [pc, #268]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bec2:	f003 f9c9 	bl	800f258 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	4798      	blx	r3
 800bed0:	4602      	mov	r2, r0
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d04e      	beq.n	800bf80 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	4413      	add	r3, r2
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d229      	bcs.n	800bf48 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d206      	bcs.n	800bf0c <rxSessionWritePayload+0xf8>
 800befe:	4b37      	ldr	r3, [pc, #220]	; (800bfdc <rxSessionWritePayload+0x1c8>)
 800bf00:	4a32      	ldr	r2, [pc, #200]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bf02:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800bf06:	4832      	ldr	r0, [pc, #200]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bf08:	f003 f9a6 	bl	800f258 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	68da      	ldr	r2, [r3, #12]
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d006      	beq.n	800bf32 <rxSessionWritePayload+0x11e>
 800bf24:	4b30      	ldr	r3, [pc, #192]	; (800bfe8 <rxSessionWritePayload+0x1d4>)
 800bf26:	4a29      	ldr	r2, [pc, #164]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bf28:	f240 21c6 	movw	r1, #710	; 0x2c6
 800bf2c:	4828      	ldr	r0, [pc, #160]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bf2e:	f003 f993 	bl	800f258 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d306      	bcc.n	800bf48 <rxSessionWritePayload+0x134>
 800bf3a:	4b2c      	ldr	r3, [pc, #176]	; (800bfec <rxSessionWritePayload+0x1d8>)
 800bf3c:	4a23      	ldr	r2, [pc, #140]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bf3e:	f240 21c7 	movw	r1, #711	; 0x2c7
 800bf42:	4823      	ldr	r0, [pc, #140]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bf44:	f003 f988 	bl	800f258 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	691a      	ldr	r2, [r3, #16]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	4413      	add	r3, r2
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	6a39      	ldr	r1, [r7, #32]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f004 f87f 	bl	801005a <memcpy>
        rxs->payload_size += bytes_to_copy;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	68da      	ldr	r2, [r3, #12]
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	441a      	add	r2, r3
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d219      	bcs.n	800bfa6 <rxSessionWritePayload+0x192>
 800bf72:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <rxSessionWritePayload+0x1c8>)
 800bf74:	4a15      	ldr	r2, [pc, #84]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bf76:	f240 21d1 	movw	r1, #721	; 0x2d1
 800bf7a:	4815      	ldr	r0, [pc, #84]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bf7c:	f003 f96c 	bl	800f258 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d006      	beq.n	800bf96 <rxSessionWritePayload+0x182>
 800bf88:	4b16      	ldr	r3, [pc, #88]	; (800bfe4 <rxSessionWritePayload+0x1d0>)
 800bf8a:	4a10      	ldr	r2, [pc, #64]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bf8c:	f240 21d5 	movw	r1, #725	; 0x2d5
 800bf90:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bf92:	f003 f961 	bl	800f258 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <rxSessionWritePayload+0x18e>
 800bf9c:	f06f 0302 	mvn.w	r3, #2
 800bfa0:	e000      	b.n	800bfa4 <rxSessionWritePayload+0x190>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800bfa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dd06      	ble.n	800bfbc <rxSessionWritePayload+0x1a8>
 800bfae:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <rxSessionWritePayload+0x1dc>)
 800bfb0:	4a06      	ldr	r2, [pc, #24]	; (800bfcc <rxSessionWritePayload+0x1b8>)
 800bfb2:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 800bfb6:	4806      	ldr	r0, [pc, #24]	; (800bfd0 <rxSessionWritePayload+0x1bc>)
 800bfb8:	f003 f94e 	bl	800f258 <__assert_func>
    return out;
 800bfbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	08013b34 	.word	0x08013b34
 800bfcc:	08014fe0 	.word	0x08014fe0
 800bfd0:	08013970 	.word	0x08013970
 800bfd4:	08013e90 	.word	0x08013e90
 800bfd8:	08013a2c 	.word	0x08013a2c
 800bfdc:	08013ea4 	.word	0x08013ea4
 800bfe0:	08013ec0 	.word	0x08013ec0
 800bfe4:	08013ef0 	.word	0x08013ef0
 800bfe8:	08013f08 	.word	0x08013f08
 800bfec:	08013f38 	.word	0x08013f38
 800bff0:	08013f58 	.word	0x08013f58

0800bff4 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d106      	bne.n	800c012 <rxSessionRestart+0x1e>
 800c004:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <rxSessionRestart+0x7c>)
 800c006:	4a1b      	ldr	r2, [pc, #108]	; (800c074 <rxSessionRestart+0x80>)
 800c008:	f240 21de 	movw	r1, #734	; 0x2de
 800c00c:	481a      	ldr	r0, [pc, #104]	; (800c078 <rxSessionRestart+0x84>)
 800c00e:	f003 f923 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <rxSessionRestart+0x32>
 800c018:	4b18      	ldr	r3, [pc, #96]	; (800c07c <rxSessionRestart+0x88>)
 800c01a:	4a16      	ldr	r2, [pc, #88]	; (800c074 <rxSessionRestart+0x80>)
 800c01c:	f240 21df 	movw	r1, #735	; 0x2df
 800c020:	4815      	ldr	r0, [pc, #84]	; (800c078 <rxSessionRestart+0x84>)
 800c022:	f003 f919 	bl	800f258 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	6912      	ldr	r2, [r2, #16]
 800c02e:	4611      	mov	r1, r2
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2200      	movs	r2, #0
 800c03e:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c04c:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	7d9b      	ldrb	r3, [r3, #22]
 800c052:	3301      	adds	r3, #1
 800c054:	b2db      	uxtb	r3, r3
 800c056:	f003 031f 	and.w	r3, r3, #31
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2201      	movs	r2, #1
 800c064:	761a      	strb	r2, [r3, #24]
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	08013b34 	.word	0x08013b34
 800c074:	08014ff8 	.word	0x08014ff8
 800c078:	08013970 	.word	0x08013970
 800c07c:	08013e90 	.word	0x08013e90

0800c080 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af02      	add	r7, sp, #8
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d106      	bne.n	800c0a2 <rxSessionAcceptFrame+0x22>
 800c094:	4b81      	ldr	r3, [pc, #516]	; (800c29c <rxSessionAcceptFrame+0x21c>)
 800c096:	4a82      	ldr	r2, [pc, #520]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c098:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800c09c:	4881      	ldr	r0, [pc, #516]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c09e:	f003 f8db 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d106      	bne.n	800c0b6 <rxSessionAcceptFrame+0x36>
 800c0a8:	4b7f      	ldr	r3, [pc, #508]	; (800c2a8 <rxSessionAcceptFrame+0x228>)
 800c0aa:	4a7d      	ldr	r2, [pc, #500]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c0ac:	f240 21f1 	movw	r1, #753	; 0x2f1
 800c0b0:	487c      	ldr	r0, [pc, #496]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c0b2:	f003 f8d1 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <rxSessionAcceptFrame+0x4a>
 800c0bc:	4b7b      	ldr	r3, [pc, #492]	; (800c2ac <rxSessionAcceptFrame+0x22c>)
 800c0be:	4a78      	ldr	r2, [pc, #480]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c0c0:	f240 21f2 	movw	r1, #754	; 0x2f2
 800c0c4:	4877      	ldr	r0, [pc, #476]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c0c6:	f003 f8c7 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <rxSessionAcceptFrame+0x60>
 800c0d2:	4b77      	ldr	r3, [pc, #476]	; (800c2b0 <rxSessionAcceptFrame+0x230>)
 800c0d4:	4a72      	ldr	r2, [pc, #456]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c0d6:	f240 21f3 	movw	r1, #755	; 0x2f3
 800c0da:	4872      	ldr	r0, [pc, #456]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c0dc:	f003 f8bc 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	7b9b      	ldrb	r3, [r3, #14]
 800c0e4:	2b1f      	cmp	r3, #31
 800c0e6:	d906      	bls.n	800c0f6 <rxSessionAcceptFrame+0x76>
 800c0e8:	4b72      	ldr	r3, [pc, #456]	; (800c2b4 <rxSessionAcceptFrame+0x234>)
 800c0ea:	4a6d      	ldr	r2, [pc, #436]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c0ec:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800c0f0:	486c      	ldr	r0, [pc, #432]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c0f2:	f003 f8b1 	bl	800f258 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d106      	bne.n	800c10a <rxSessionAcceptFrame+0x8a>
 800c0fc:	4b6e      	ldr	r3, [pc, #440]	; (800c2b8 <rxSessionAcceptFrame+0x238>)
 800c0fe:	4a68      	ldr	r2, [pc, #416]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c100:	f240 21f5 	movw	r1, #757	; 0x2f5
 800c104:	4867      	ldr	r0, [pc, #412]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c106:	f003 f8a7 	bl	800f258 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	7bdb      	ldrb	r3, [r3, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d005      	beq.n	800c11e <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	7bdb      	ldrb	r3, [r3, #15]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d005      	beq.n	800c132 <rxSessionAcceptFrame+0xb2>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7c1b      	ldrb	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <rxSessionAcceptFrame+0xb2>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <rxSessionAcceptFrame+0xb4>
 800c132:	2300      	movs	r3, #0
 800c134:	75bb      	strb	r3, [r7, #22]
 800c136:	7dbb      	ldrb	r3, [r7, #22]
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800c13e:	7dbb      	ldrb	r3, [r7, #22]
 800c140:	f083 0301 	eor.w	r3, r3, #1
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00c      	beq.n	800c164 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	8a98      	ldrh	r0, [r3, #20]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6959      	ldr	r1, [r3, #20]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	461a      	mov	r2, r3
 800c158:	f7fe fed6 	bl	800af08 <crcAdd>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	695a      	ldr	r2, [r3, #20]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	4613      	mov	r3, r2
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff fe4d 	bl	800be14 <rxSessionWritePayload>
 800c17a:	4603      	mov	r3, r0
 800c17c:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800c17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c182:	2b00      	cmp	r3, #0
 800c184:	da10      	bge.n	800c1a8 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800c186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c18a:	f113 0f03 	cmn.w	r3, #3
 800c18e:	d006      	beq.n	800c19e <rxSessionAcceptFrame+0x11e>
 800c190:	4b4a      	ldr	r3, [pc, #296]	; (800c2bc <rxSessionAcceptFrame+0x23c>)
 800c192:	4a43      	ldr	r2, [pc, #268]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c194:	f240 3107 	movw	r1, #775	; 0x307
 800c198:	4842      	ldr	r0, [pc, #264]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c19a:	f003 f85d 	bl	800f258 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff ff27 	bl	800bff4 <rxSessionRestart>
 800c1a6:	e072      	b.n	800c28e <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	7c1b      	ldrb	r3, [r3, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d05f      	beq.n	800c270 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800c1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <rxSessionAcceptFrame+0x146>
 800c1b8:	4b41      	ldr	r3, [pc, #260]	; (800c2c0 <rxSessionAcceptFrame+0x240>)
 800c1ba:	4a39      	ldr	r2, [pc, #228]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c1bc:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800c1c0:	4838      	ldr	r0, [pc, #224]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c1c2:	f003 f849 	bl	800f258 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800c1c6:	7dbb      	ldrb	r3, [r7, #22]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <rxSessionAcceptFrame+0x154>
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	8a9b      	ldrh	r3, [r3, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d148      	bne.n	800c266 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff fd95 	bl	800bd0c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	6a39      	ldr	r1, [r7, #32]
 800c1ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	429a      	cmp	r2, r3
 800c208:	d206      	bcs.n	800c218 <rxSessionAcceptFrame+0x198>
 800c20a:	4b2e      	ldr	r3, [pc, #184]	; (800c2c4 <rxSessionAcceptFrame+0x244>)
 800c20c:	4a24      	ldr	r2, [pc, #144]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c20e:	f240 3116 	movw	r1, #790	; 0x316
 800c212:	4824      	ldr	r0, [pc, #144]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c214:	f003 f820 	bl	800f258 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800c224:	7dbb      	ldrb	r3, [r7, #22]
 800c226:	f083 0301 	eor.w	r3, r3, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d017      	beq.n	800c260 <rxSessionAcceptFrame+0x1e0>
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d814      	bhi.n	800c260 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800c236:	6a3b      	ldr	r3, [r7, #32]
 800c238:	691a      	ldr	r2, [r3, #16]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	f1c3 0302 	rsb	r3, r3, #2
 800c240:	429a      	cmp	r2, r3
 800c242:	d206      	bcs.n	800c252 <rxSessionAcceptFrame+0x1d2>
 800c244:	4b20      	ldr	r3, [pc, #128]	; (800c2c8 <rxSessionAcceptFrame+0x248>)
 800c246:	4a16      	ldr	r2, [pc, #88]	; (800c2a0 <rxSessionAcceptFrame+0x220>)
 800c248:	f240 311a 	movw	r1, #794	; 0x31a
 800c24c:	4815      	ldr	r0, [pc, #84]	; (800c2a4 <rxSessionAcceptFrame+0x224>)
 800c24e:	f003 f803 	bl	800f258 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	4413      	add	r3, r2
 800c25a:	1e9a      	subs	r2, r3, #2
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2200      	movs	r2, #0
 800c264:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800c266:	68b9      	ldr	r1, [r7, #8]
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fec3 	bl	800bff4 <rxSessionRestart>
 800c26e:	e00e      	b.n	800c28e <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	7e1b      	ldrb	r3, [r3, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	bf14      	ite	ne
 800c278:	2301      	movne	r3, #1
 800c27a:	2300      	moveq	r3, #0
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	f083 0301 	eor.w	r3, r3, #1
 800c282:	b2db      	uxtb	r3, r3
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800c28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	08013b34 	.word	0x08013b34
 800c2a0:	08014fc8 	.word	0x08014fc8
 800c2a4:	08013970 	.word	0x08013970
 800c2a8:	08013e90 	.word	0x08013e90
 800c2ac:	08013dc8 	.word	0x08013dc8
 800c2b0:	08013e24 	.word	0x08013e24
 800c2b4:	08013f64 	.word	0x08013f64
 800c2b8:	08013e44 	.word	0x08013e44
 800c2bc:	08013f8c 	.word	0x08013f8c
 800c2c0:	08013f98 	.word	0x08013f98
 800c2c4:	08013fa4 	.word	0x08013fa4
 800c2c8:	08013fd4 	.word	0x08013fd4

0800c2cc <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 800c2cc:	b5b0      	push	{r4, r5, r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d106      	bne.n	800c2ee <rxSessionSynchronize+0x22>
 800c2e0:	4b5c      	ldr	r3, [pc, #368]	; (800c454 <rxSessionSynchronize+0x188>)
 800c2e2:	4a5d      	ldr	r2, [pc, #372]	; (800c458 <rxSessionSynchronize+0x18c>)
 800c2e4:	f44f 7150 	mov.w	r1, #832	; 0x340
 800c2e8:	485c      	ldr	r0, [pc, #368]	; (800c45c <rxSessionSynchronize+0x190>)
 800c2ea:	f002 ffb5 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <rxSessionSynchronize+0x36>
 800c2f4:	4b5a      	ldr	r3, [pc, #360]	; (800c460 <rxSessionSynchronize+0x194>)
 800c2f6:	4a58      	ldr	r2, [pc, #352]	; (800c458 <rxSessionSynchronize+0x18c>)
 800c2f8:	f240 3141 	movw	r1, #833	; 0x341
 800c2fc:	4857      	ldr	r0, [pc, #348]	; (800c45c <rxSessionSynchronize+0x190>)
 800c2fe:	f002 ffab 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	7d9b      	ldrb	r3, [r3, #22]
 800c306:	2b1f      	cmp	r3, #31
 800c308:	d906      	bls.n	800c318 <rxSessionSynchronize+0x4c>
 800c30a:	4b56      	ldr	r3, [pc, #344]	; (800c464 <rxSessionSynchronize+0x198>)
 800c30c:	4a52      	ldr	r2, [pc, #328]	; (800c458 <rxSessionSynchronize+0x18c>)
 800c30e:	f240 3142 	movw	r1, #834	; 0x342
 800c312:	4852      	ldr	r0, [pc, #328]	; (800c45c <rxSessionSynchronize+0x190>)
 800c314:	f002 ffa0 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	7b9b      	ldrb	r3, [r3, #14]
 800c31c:	2b1f      	cmp	r3, #31
 800c31e:	d906      	bls.n	800c32e <rxSessionSynchronize+0x62>
 800c320:	4b51      	ldr	r3, [pc, #324]	; (800c468 <rxSessionSynchronize+0x19c>)
 800c322:	4a4d      	ldr	r2, [pc, #308]	; (800c458 <rxSessionSynchronize+0x18c>)
 800c324:	f240 3143 	movw	r1, #835	; 0x343
 800c328:	484c      	ldr	r0, [pc, #304]	; (800c45c <rxSessionSynchronize+0x190>)
 800c32a:	f002 ff95 	bl	800f258 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	7ddb      	ldrb	r3, [r3, #23]
 800c332:	79fa      	ldrb	r2, [r7, #7]
 800c334:	429a      	cmp	r2, r3
 800c336:	bf0c      	ite	eq
 800c338:	2301      	moveq	r3, #1
 800c33a:	2300      	movne	r3, #0
 800c33c:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	7d9a      	ldrb	r2, [r3, #22]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	7b9b      	ldrb	r3, [r3, #14]
 800c346:	429a      	cmp	r2, r3
 800c348:	bf0c      	ite	eq
 800c34a:	2301      	moveq	r3, #1
 800c34c:	2300      	movne	r3, #0
 800c34e:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	7d9a      	ldrb	r2, [r3, #22]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	7b9b      	ldrb	r3, [r3, #14]
 800c358:	4619      	mov	r1, r3
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7ff fd1c 	bl	800bd98 <rxComputeTransferIDDifference>
 800c360:	4603      	mov	r3, r0
 800c362:	2b01      	cmp	r3, #1
 800c364:	bf8c      	ite	hi
 800c366:	2301      	movhi	r3, #1
 800c368:	2300      	movls	r3, #0
 800c36a:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	68f9      	ldr	r1, [r7, #12]
 800c374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c378:	4290      	cmp	r0, r2
 800c37a:	eb71 0303 	sbcs.w	r3, r1, r3
 800c37e:	d20f      	bcs.n	800c3a0 <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	1a84      	subs	r4, r0, r2
 800c38e:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c396:	42a2      	cmp	r2, r4
 800c398:	41ab      	sbcs	r3, r5
 800c39a:	d201      	bcs.n	800c3a0 <rxSessionSynchronize+0xd4>
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <rxSessionSynchronize+0xd6>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	753b      	strb	r3, [r7, #20]
 800c3a4:	7d3b      	ldrb	r3, [r7, #20]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bf0c      	ite	eq
 800c3b4:	2301      	moveq	r3, #1
 800c3b6:	2300      	movne	r3, #0
 800c3b8:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 800c3c0:	7d7b      	ldrb	r3, [r7, #21]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d114      	bne.n	800c3f0 <rxSessionSynchronize+0x124>
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 800c3cc:	7d3b      	ldrb	r3, [r7, #20]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10e      	bne.n	800c3f0 <rxSessionSynchronize+0x124>
 800c3d2:	7d3b      	ldrb	r3, [r7, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 800c3d8:	7d7b      	ldrb	r3, [r7, #21]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d108      	bne.n	800c3f0 <rxSessionSynchronize+0x124>
 800c3de:	7d3b      	ldrb	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d007      	beq.n	800c3f4 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 800c3e4:	7dbb      	ldrb	r3, [r7, #22]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d004      	beq.n	800c3f4 <rxSessionSynchronize+0x128>
 800c3ea:	7cfb      	ldrb	r3, [r7, #19]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e000      	b.n	800c3f6 <rxSessionSynchronize+0x12a>
 800c3f4:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 800c3f6:	74bb      	strb	r3, [r7, #18]
 800c3f8:	7cbb      	ldrb	r3, [r7, #18]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	7bdb      	ldrb	r3, [r3, #15]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d021      	beq.n	800c44c <rxSessionSynchronize+0x180>
 800c408:	7cbb      	ldrb	r3, [r7, #18]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d01e      	beq.n	800c44c <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	7bdb      	ldrb	r3, [r3, #15]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <rxSessionSynchronize+0x158>
 800c416:	4b15      	ldr	r3, [pc, #84]	; (800c46c <rxSessionSynchronize+0x1a0>)
 800c418:	4a0f      	ldr	r2, [pc, #60]	; (800c458 <rxSessionSynchronize+0x18c>)
 800c41a:	f240 3159 	movw	r1, #857	; 0x359
 800c41e:	480f      	ldr	r0, [pc, #60]	; (800c45c <rxSessionSynchronize+0x190>)
 800c420:	f002 ff1a 	bl	800f258 <__assert_func>
        rxs->total_payload_size    = 0U;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2200      	movs	r2, #0
 800c428:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c436:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	7b9a      	ldrb	r2, [r3, #14]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	79fa      	ldrb	r2, [r7, #7]
 800c44a:	75da      	strb	r2, [r3, #23]
    }
}
 800c44c:	bf00      	nop
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bdb0      	pop	{r4, r5, r7, pc}
 800c454:	08013e90 	.word	0x08013e90
 800c458:	08014f90 	.word	0x08014f90
 800c45c:	08013970 	.word	0x08013970
 800c460:	08013dc8 	.word	0x08013dc8
 800c464:	0801400c 	.word	0x0801400c
 800c468:	08013f64 	.word	0x08013f64
 800c46c:	08014034 	.word	0x08014034

0800c470 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af02      	add	r7, sp, #8
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d106      	bne.n	800c492 <rxSessionUpdate+0x22>
 800c484:	4b48      	ldr	r3, [pc, #288]	; (800c5a8 <rxSessionUpdate+0x138>)
 800c486:	4a49      	ldr	r2, [pc, #292]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c488:	f240 3172 	movw	r1, #882	; 0x372
 800c48c:	4848      	ldr	r0, [pc, #288]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c48e:	f002 fee3 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <rxSessionUpdate+0x36>
 800c498:	4b46      	ldr	r3, [pc, #280]	; (800c5b4 <rxSessionUpdate+0x144>)
 800c49a:	4a44      	ldr	r2, [pc, #272]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c49c:	f240 3173 	movw	r1, #883	; 0x373
 800c4a0:	4843      	ldr	r0, [pc, #268]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c4a2:	f002 fed9 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d106      	bne.n	800c4ba <rxSessionUpdate+0x4a>
 800c4ac:	4b42      	ldr	r3, [pc, #264]	; (800c5b8 <rxSessionUpdate+0x148>)
 800c4ae:	4a3f      	ldr	r2, [pc, #252]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c4b0:	f44f 715d 	mov.w	r1, #884	; 0x374
 800c4b4:	483e      	ldr	r0, [pc, #248]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c4b6:	f002 fecf 	bl	800f258 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <rxSessionUpdate+0x5e>
 800c4c0:	4b3e      	ldr	r3, [pc, #248]	; (800c5bc <rxSessionUpdate+0x14c>)
 800c4c2:	4a3a      	ldr	r2, [pc, #232]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c4c4:	f240 3175 	movw	r1, #885	; 0x375
 800c4c8:	4839      	ldr	r0, [pc, #228]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c4ca:	f002 fec5 	bl	800f258 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	7d9b      	ldrb	r3, [r3, #22]
 800c4d2:	2b1f      	cmp	r3, #31
 800c4d4:	d906      	bls.n	800c4e4 <rxSessionUpdate+0x74>
 800c4d6:	4b3a      	ldr	r3, [pc, #232]	; (800c5c0 <rxSessionUpdate+0x150>)
 800c4d8:	4a34      	ldr	r2, [pc, #208]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c4da:	f240 3176 	movw	r1, #886	; 0x376
 800c4de:	4834      	ldr	r0, [pc, #208]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c4e0:	f002 feba 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7b9b      	ldrb	r3, [r3, #14]
 800c4e8:	2b1f      	cmp	r3, #31
 800c4ea:	d906      	bls.n	800c4fa <rxSessionUpdate+0x8a>
 800c4ec:	4b35      	ldr	r3, [pc, #212]	; (800c5c4 <rxSessionUpdate+0x154>)
 800c4ee:	4a2f      	ldr	r2, [pc, #188]	; (800c5ac <rxSessionUpdate+0x13c>)
 800c4f0:	f240 3177 	movw	r1, #887	; 0x377
 800c4f4:	482e      	ldr	r0, [pc, #184]	; (800c5b0 <rxSessionUpdate+0x140>)
 800c4f6:	f002 feaf 	bl	800f258 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 800c4fa:	78f9      	ldrb	r1, [r7, #3]
 800c4fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c500:	e9cd 2300 	strd	r2, r3, [sp]
 800c504:	460a      	mov	r2, r1
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	68b8      	ldr	r0, [r7, #8]
 800c50a:	f7ff fedf 	bl	800c2cc <rxSessionSynchronize>
    int8_t out = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	7ddb      	ldrb	r3, [r3, #23]
 800c516:	78fa      	ldrb	r2, [r7, #3]
 800c518:	429a      	cmp	r2, r3
 800c51a:	bf0c      	ite	eq
 800c51c:	2301      	moveq	r3, #1
 800c51e:	2300      	movne	r3, #0
 800c520:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7c5a      	ldrb	r2, [r3, #17]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	7e1b      	ldrb	r3, [r3, #24]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	bf0c      	ite	eq
 800c52e:	2301      	moveq	r3, #1
 800c530:	2300      	movne	r3, #0
 800c532:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	7b9a      	ldrb	r2, [r3, #14]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	7d9b      	ldrb	r3, [r3, #22]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	bf0c      	ite	eq
 800c540:	2301      	moveq	r3, #1
 800c542:	2300      	movne	r3, #0
 800c544:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 800c552:	2b00      	cmp	r3, #0
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	e006      	b.n	800c56c <rxSessionUpdate+0xfc>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	bf14      	ite	ne
 800c566:	2301      	movne	r3, #1
 800c568:	2300      	moveq	r3, #0
 800c56a:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 800c56c:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 800c56e:	7dbb      	ldrb	r3, [r7, #22]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <rxSessionUpdate+0x12a>
 800c574:	7d7b      	ldrb	r3, [r7, #21]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00f      	beq.n	800c59a <rxSessionUpdate+0x12a>
 800c57a:	7d3b      	ldrb	r3, [r7, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00c      	beq.n	800c59a <rxSessionUpdate+0x12a>
 800c580:	7cfb      	ldrb	r3, [r7, #19]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68b9      	ldr	r1, [r7, #8]
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f7ff fd75 	bl	800c080 <rxSessionAcceptFrame>
 800c596:	4603      	mov	r3, r0
 800c598:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 800c59a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08013b34 	.word	0x08013b34
 800c5ac:	08014f80 	.word	0x08014f80
 800c5b0:	08013970 	.word	0x08013970
 800c5b4:	08013e90 	.word	0x08013e90
 800c5b8:	08013dc8 	.word	0x08013dc8
 800c5bc:	08013e44 	.word	0x08013e44
 800c5c0:	0801400c 	.word	0x0801400c
 800c5c4:	08013f64 	.word	0x08013f64

0800c5c8 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b08c      	sub	sp, #48	; 0x30
 800c5cc:	af04      	add	r7, sp, #16
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d106      	bne.n	800c5ea <rxAcceptFrame+0x22>
 800c5dc:	4b85      	ldr	r3, [pc, #532]	; (800c7f4 <rxAcceptFrame+0x22c>)
 800c5de:	4a86      	ldr	r2, [pc, #536]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c5e0:	f240 3196 	movw	r1, #918	; 0x396
 800c5e4:	4885      	ldr	r0, [pc, #532]	; (800c7fc <rxAcceptFrame+0x234>)
 800c5e6:	f002 fe37 	bl	800f258 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d106      	bne.n	800c5fe <rxAcceptFrame+0x36>
 800c5f0:	4b83      	ldr	r3, [pc, #524]	; (800c800 <rxAcceptFrame+0x238>)
 800c5f2:	4a81      	ldr	r2, [pc, #516]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c5f4:	f240 3197 	movw	r1, #919	; 0x397
 800c5f8:	4880      	ldr	r0, [pc, #512]	; (800c7fc <rxAcceptFrame+0x234>)
 800c5fa:	f002 fe2d 	bl	800f258 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	8b9a      	ldrh	r2, [r3, #28]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	895b      	ldrh	r3, [r3, #10]
 800c606:	429a      	cmp	r2, r3
 800c608:	d006      	beq.n	800c618 <rxAcceptFrame+0x50>
 800c60a:	4b7e      	ldr	r3, [pc, #504]	; (800c804 <rxAcceptFrame+0x23c>)
 800c60c:	4a7a      	ldr	r2, [pc, #488]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c60e:	f44f 7166 	mov.w	r1, #920	; 0x398
 800c612:	487a      	ldr	r0, [pc, #488]	; (800c7fc <rxAcceptFrame+0x234>)
 800c614:	f002 fe20 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <rxAcceptFrame+0x64>
 800c61e:	4b7a      	ldr	r3, [pc, #488]	; (800c808 <rxAcceptFrame+0x240>)
 800c620:	4a75      	ldr	r2, [pc, #468]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c622:	f240 3199 	movw	r1, #921	; 0x399
 800c626:	4875      	ldr	r0, [pc, #468]	; (800c7fc <rxAcceptFrame+0x234>)
 800c628:	f002 fe16 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <rxAcceptFrame+0x7a>
 800c634:	4b75      	ldr	r3, [pc, #468]	; (800c80c <rxAcceptFrame+0x244>)
 800c636:	4a70      	ldr	r2, [pc, #448]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c638:	f240 319a 	movw	r1, #922	; 0x39a
 800c63c:	486f      	ldr	r0, [pc, #444]	; (800c7fc <rxAcceptFrame+0x234>)
 800c63e:	f002 fe0b 	bl	800f258 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	7b9b      	ldrb	r3, [r3, #14]
 800c646:	2b1f      	cmp	r3, #31
 800c648:	d906      	bls.n	800c658 <rxAcceptFrame+0x90>
 800c64a:	4b71      	ldr	r3, [pc, #452]	; (800c810 <rxAcceptFrame+0x248>)
 800c64c:	4a6a      	ldr	r2, [pc, #424]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c64e:	f240 319b 	movw	r1, #923	; 0x39b
 800c652:	486a      	ldr	r0, [pc, #424]	; (800c7fc <rxAcceptFrame+0x234>)
 800c654:	f002 fe00 	bl	800f258 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7b5b      	ldrb	r3, [r3, #13]
 800c65c:	2bff      	cmp	r3, #255	; 0xff
 800c65e:	d00c      	beq.n	800c67a <rxAcceptFrame+0xb2>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	791a      	ldrb	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7b5b      	ldrb	r3, [r3, #13]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d006      	beq.n	800c67a <rxAcceptFrame+0xb2>
 800c66c:	4b69      	ldr	r3, [pc, #420]	; (800c814 <rxAcceptFrame+0x24c>)
 800c66e:	4a62      	ldr	r2, [pc, #392]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c670:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800c674:	4861      	ldr	r0, [pc, #388]	; (800c7fc <rxAcceptFrame+0x234>)
 800c676:	f002 fdef 	bl	800f258 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <rxAcceptFrame+0xc6>
 800c680:	4b65      	ldr	r3, [pc, #404]	; (800c818 <rxAcceptFrame+0x250>)
 800c682:	4a5d      	ldr	r2, [pc, #372]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c684:	f240 319d 	movw	r1, #925	; 0x39d
 800c688:	485c      	ldr	r0, [pc, #368]	; (800c7fc <rxAcceptFrame+0x234>)
 800c68a:	f002 fde5 	bl	800f258 <__assert_func>

    int8_t out = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7b1b      	ldrb	r3, [r3, #12]
 800c696:	b25b      	sxtb	r3, r3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	db6c      	blt.n	800c776 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7b1b      	ldrb	r3, [r3, #12]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d134      	bne.n	800c718 <rxAcceptFrame+0x150>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	7bdb      	ldrb	r3, [r3, #15]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d030      	beq.n	800c718 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	2120      	movs	r1, #32
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	4798      	blx	r3
 800c6c0:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7b1b      	ldrb	r3, [r3, #12]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d01d      	beq.n	800c714 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	6939      	ldr	r1, [r7, #16]
 800c6e0:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6fc:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	7b9a      	ldrb	r2, [r3, #14]
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	78fa      	ldrb	r2, [r7, #3]
 800c70a:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2201      	movs	r2, #1
 800c710:	761a      	strb	r2, [r3, #24]
 800c712:	e001      	b.n	800c718 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c714:	23fd      	movs	r3, #253	; 0xfd
 800c716:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7b1b      	ldrb	r3, [r3, #12]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	3308      	adds	r3, #8
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d05e      	beq.n	800c7e8 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800c72a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d006      	beq.n	800c740 <rxAcceptFrame+0x178>
 800c732:	4b3a      	ldr	r3, [pc, #232]	; (800c81c <rxAcceptFrame+0x254>)
 800c734:	4a30      	ldr	r2, [pc, #192]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c736:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800c73a:	4830      	ldr	r0, [pc, #192]	; (800c7fc <rxAcceptFrame+0x234>)
 800c73c:	f002 fd8c 	bl	800f258 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7b1b      	ldrb	r3, [r3, #12]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	3308      	adds	r3, #8
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c754:	68b9      	ldr	r1, [r7, #8]
 800c756:	6989      	ldr	r1, [r1, #24]
 800c758:	78fd      	ldrb	r5, [r7, #3]
 800c75a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c75c:	9003      	str	r0, [sp, #12]
 800c75e:	9102      	str	r1, [sp, #8]
 800c760:	e9cd 2300 	strd	r2, r3, [sp]
 800c764:	462b      	mov	r3, r5
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4621      	mov	r1, r4
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7ff fe80 	bl	800c470 <rxSessionUpdate>
 800c770:	4603      	mov	r3, r0
 800c772:	77fb      	strb	r3, [r7, #31]
 800c774:	e038      	b.n	800c7e8 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7b1b      	ldrb	r3, [r3, #12]
 800c77a:	2bff      	cmp	r3, #255	; 0xff
 800c77c:	d006      	beq.n	800c78c <rxAcceptFrame+0x1c4>
 800c77e:	4b28      	ldr	r3, [pc, #160]	; (800c820 <rxAcceptFrame+0x258>)
 800c780:	4a1d      	ldr	r2, [pc, #116]	; (800c7f8 <rxAcceptFrame+0x230>)
 800c782:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800c786:	481d      	ldr	r0, [pc, #116]	; (800c7fc <rxAcceptFrame+0x234>)
 800c788:	f002 fd66 	bl	800f258 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	695a      	ldr	r2, [r3, #20]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800c794:	4293      	cmp	r3, r2
 800c796:	bf28      	it	cs
 800c798:	4613      	movcs	r3, r2
 800c79a:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	69b9      	ldr	r1, [r7, #24]
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	4798      	blx	r3
 800c7a6:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d01a      	beq.n	800c7e4 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff faaa 	bl	800bd0c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	69ba      	ldr	r2, [r7, #24]
 800c7c8:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6978      	ldr	r0, [r7, #20]
 800c7da:	f003 fc3e 	bl	801005a <memcpy>
            out = 1;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	77fb      	strb	r3, [r7, #31]
 800c7e2:	e001      	b.n	800c7e8 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c7e4:	23fd      	movs	r3, #253	; 0xfd
 800c7e6:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800c7e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3720      	adds	r7, #32
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bdb0      	pop	{r4, r5, r7, pc}
 800c7f4:	08013b34 	.word	0x08013b34
 800c7f8:	08014f70 	.word	0x08014f70
 800c7fc:	08013970 	.word	0x08013970
 800c800:	08014050 	.word	0x08014050
 800c804:	0801406c 	.word	0x0801406c
 800c808:	08013dc8 	.word	0x08013dc8
 800c80c:	08013e24 	.word	0x08013e24
 800c810:	08013f64 	.word	0x08013f64
 800c814:	08014094 	.word	0x08014094
 800c818:	08013e44 	.word	0x08013e44
 800c81c:	080140ec 	.word	0x080140ec
 800c820:	080140f8 	.word	0x080140f8

0800c824 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	8b9b      	ldrh	r3, [r3, #28]
 800c838:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800c83a:	89fa      	ldrh	r2, [r7, #14]
 800c83c:	89bb      	ldrh	r3, [r7, #12]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d00a      	beq.n	800c858 <rxSubscriptionPredicateOnPortID+0x34>
 800c842:	89fa      	ldrh	r2, [r7, #14]
 800c844:	89bb      	ldrh	r3, [r7, #12]
 800c846:	429a      	cmp	r2, r3
 800c848:	bf8c      	ite	hi
 800c84a:	2301      	movhi	r3, #1
 800c84c:	2300      	movls	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	4b05      	ldr	r3, [pc, #20]	; (800c868 <rxSubscriptionPredicateOnPortID+0x44>)
 800c854:	569b      	ldrsb	r3, [r3, r2]
 800c856:	e000      	b.n	800c85a <rxSubscriptionPredicateOnPortID+0x36>
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	08014f5c 	.word	0x08014f5c

0800c86c <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	331c      	adds	r3, #28
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff ffd1 	bl	800c824 <rxSubscriptionPredicateOnPortID>
 800c882:	4603      	mov	r3, r0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800c88c:	b5b0      	push	{r4, r5, r7, lr}
 800c88e:	b08c      	sub	sp, #48	; 0x30
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <canardInit+0x20>
 800c89e:	4b16      	ldr	r3, [pc, #88]	; (800c8f8 <canardInit+0x6c>)
 800c8a0:	4a16      	ldr	r2, [pc, #88]	; (800c8fc <canardInit+0x70>)
 800c8a2:	f240 4104 	movw	r1, #1028	; 0x404
 800c8a6:	4816      	ldr	r0, [pc, #88]	; (800c900 <canardInit+0x74>)
 800c8a8:	f002 fcd6 	bl	800f258 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <canardInit+0x34>
 800c8b2:	4b14      	ldr	r3, [pc, #80]	; (800c904 <canardInit+0x78>)
 800c8b4:	4a11      	ldr	r2, [pc, #68]	; (800c8fc <canardInit+0x70>)
 800c8b6:	f240 4105 	movw	r1, #1029	; 0x405
 800c8ba:	4811      	ldr	r0, [pc, #68]	; (800c900 <canardInit+0x74>)
 800c8bc:	f002 fccc 	bl	800f258 <__assert_func>
    const CanardInstance out = {
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	23ff      	movs	r3, #255	; 0xff
 800c8c6:	763b      	strb	r3, [r7, #24]
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	623b      	str	r3, [r7, #32]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	627b      	str	r3, [r7, #36]	; 0x24
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d8:	2300      	movs	r3, #0
 800c8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	461d      	mov	r5, r3
 800c8e0:	f107 0414 	add.w	r4, r7, #20
 800c8e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c8ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	3730      	adds	r7, #48	; 0x30
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c8f8:	08014118 	.word	0x08014118
 800c8fc:	08014de4 	.word	0x08014de4
 800c900:	08013970 	.word	0x08013970
 800c904:	08014138 	.word	0x08014138

0800c908 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800c908:	b4b0      	push	{r4, r5, r7}
 800c90a:	b08b      	sub	sp, #44	; 0x2c
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	61bb      	str	r3, [r7, #24]
 800c91c:	2300      	movs	r3, #0
 800c91e:	61fb      	str	r3, [r7, #28]
 800c920:	2300      	movs	r3, #0
 800c922:	623b      	str	r3, [r7, #32]
 800c924:	2300      	movs	r3, #0
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	461d      	mov	r5, r3
 800c92c:	f107 0414 	add.w	r4, r7, #20
 800c930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	602b      	str	r3, [r5, #0]
}
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	372c      	adds	r7, #44	; 0x2c
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bcb0      	pop	{r4, r5, r7}
 800c940:	4770      	bx	lr
	...

0800c944 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08e      	sub	sp, #56	; 0x38
 800c948:	af06      	add	r7, sp, #24
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c952:	f06f 0301 	mvn.w	r3, #1
 800c956:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d062      	beq.n	800ca24 <canardTxPush+0xe0>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d05f      	beq.n	800ca24 <canardTxPush+0xe0>
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	2b00      	cmp	r3, #0
 800c968:	d05c      	beq.n	800ca24 <canardTxPush+0xe0>
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d102      	bne.n	800c976 <canardTxPush+0x32>
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d156      	bne.n	800ca24 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fe fb7a 	bl	800b074 <adjustPresentationLayerMTU>
 800c980:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	791a      	ldrb	r2, [r3, #4]
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4613      	mov	r3, r2
 800c98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c98e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c992:	f7fe fb9f 	bl	800b0d4 <txMakeCANID>
 800c996:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	db40      	blt.n	800ca20 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800c99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d81c      	bhi.n	800c9e0 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800c9a6:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800c9a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9aa:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800c9ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ae:	9103      	str	r1, [sp, #12]
 800c9b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9b2:	9102      	str	r1, [sp, #8]
 800c9b4:	9201      	str	r2, [sp, #4]
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9bc:	68b9      	ldr	r1, [r7, #8]
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7fe fd52 	bl	800b468 <txPushSingleFrame>
 800c9c4:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	db2b      	blt.n	800ca24 <canardTxPush+0xe0>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d028      	beq.n	800ca24 <canardTxPush+0xe0>
 800c9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <canardTxPush+0x100>)
 800c9d4:	4a1c      	ldr	r2, [pc, #112]	; (800ca48 <canardTxPush+0x104>)
 800c9d6:	f240 4133 	movw	r1, #1075	; 0x433
 800c9da:	481c      	ldr	r0, [pc, #112]	; (800ca4c <canardTxPush+0x108>)
 800c9dc:	f002 fc3c 	bl	800f258 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800c9e0:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800c9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e4:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800c9e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9e8:	9105      	str	r1, [sp, #20]
 800c9ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ec:	9104      	str	r1, [sp, #16]
 800c9ee:	9203      	str	r2, [sp, #12]
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	68b9      	ldr	r1, [r7, #8]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7fe ff4c 	bl	800b89c <txPushMultiFrame>
 800ca04:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db0b      	blt.n	800ca24 <canardTxPush+0xe0>
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	dc08      	bgt.n	800ca24 <canardTxPush+0xe0>
 800ca12:	4b0f      	ldr	r3, [pc, #60]	; (800ca50 <canardTxPush+0x10c>)
 800ca14:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <canardTxPush+0x104>)
 800ca16:	f240 413f 	movw	r1, #1087	; 0x43f
 800ca1a:	480c      	ldr	r0, [pc, #48]	; (800ca4c <canardTxPush+0x108>)
 800ca1c:	f002 fc1c 	bl	800f258 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d106      	bne.n	800ca38 <canardTxPush+0xf4>
 800ca2a:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <canardTxPush+0x110>)
 800ca2c:	4a06      	ldr	r2, [pc, #24]	; (800ca48 <canardTxPush+0x104>)
 800ca2e:	f240 4147 	movw	r1, #1095	; 0x447
 800ca32:	4806      	ldr	r0, [pc, #24]	; (800ca4c <canardTxPush+0x108>)
 800ca34:	f002 fc10 	bl	800f258 <__assert_func>
    return out;
 800ca38:	69fb      	ldr	r3, [r7, #28]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	08013c6c 	.word	0x08013c6c
 800ca48:	08014df0 	.word	0x08014df0
 800ca4c:	08013970 	.word	0x08013970
 800ca50:	08013db0 	.word	0x08013db0
 800ca54:	08014154 	.word	0x08014154

0800ca58 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fd fe96 	bl	800a7a2 <cavlFindExtremum>
 800ca76:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800ca78:	68fb      	ldr	r3, [r7, #12]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d010      	beq.n	800cab8 <canardTxPop+0x36>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00d      	beq.n	800cab8 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	330c      	adds	r3, #12
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe f8cf 	bl	800ac4c <cavlRemove>
        que->size--;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	1e5a      	subs	r2, r3, #1
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	609a      	str	r2, [r3, #8]
    }
    return out;
 800cab8:	68fb      	ldr	r3, [r7, #12]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b090      	sub	sp, #64	; 0x40
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cad0:	23fe      	movs	r3, #254	; 0xfe
 800cad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d068      	beq.n	800cbae <canardRxAccept+0xea>
 800cadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d065      	beq.n	800cbae <canardRxAccept+0xea>
 800cae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d062      	beq.n	800cbae <canardRxAccept+0xea>
 800cae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf0:	d25d      	bcs.n	800cbae <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800caf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf4:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d103      	bne.n	800cb02 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800cafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d155      	bne.n	800cbae <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800cb02:	f107 0310 	add.w	r3, r7, #16
 800cb06:	2220      	movs	r2, #32
 800cb08:	2100      	movs	r1, #0
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f003 fa15 	bl	800ff3a <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800cb10:	f107 0310 	add.w	r3, r7, #16
 800cb14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb1a:	f7fe ffb3 	bl	800ba84 <rxTryParseFrame>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d041      	beq.n	800cba8 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800cb24:	7f7b      	ldrb	r3, [r7, #29]
 800cb26:	2bff      	cmp	r3, #255	; 0xff
 800cb28:	d004      	beq.n	800cb34 <canardRxAccept+0x70>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	791a      	ldrb	r2, [r3, #4]
 800cb2e:	7f7b      	ldrb	r3, [r7, #29]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d135      	bne.n	800cba0 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800cb34:	7e7b      	ldrb	r3, [r7, #25]
 800cb36:	3304      	adds	r3, #4
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	18d0      	adds	r0, r2, r3
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	f103 010a 	add.w	r1, r3, #10
 800cb46:	2300      	movs	r3, #0
 800cb48:	4a21      	ldr	r2, [pc, #132]	; (800cbd0 <canardRxAccept+0x10c>)
 800cb4a:	f7fe f801 	bl	800ab50 <cavlSearch>
 800cb4e:	6338      	str	r0, [r7, #48]	; 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 800cb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d002      	beq.n	800cb5c <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800cb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5a:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d01a      	beq.n	800cb98 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	8b9a      	ldrh	r2, [r3, #28]
 800cb66:	8b7b      	ldrh	r3, [r7, #26]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d006      	beq.n	800cb7a <canardRxAccept+0xb6>
 800cb6c:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <canardRxAccept+0x110>)
 800cb6e:	4a1a      	ldr	r2, [pc, #104]	; (800cbd8 <canardRxAccept+0x114>)
 800cb70:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800cb74:	4819      	ldr	r0, [pc, #100]	; (800cbdc <canardRxAccept+0x118>)
 800cb76:	f002 fb6f 	bl	800f258 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 800cb7a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800cb7e:	f107 0210 	add.w	r2, r7, #16
 800cb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	460b      	mov	r3, r1
 800cb88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7ff fd1c 	bl	800c5c8 <rxAcceptFrame>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800cb96:	e00a      	b.n	800cbae <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800cb9e:	e006      	b.n	800cbae <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800cba0:	2300      	movs	r3, #0
 800cba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cba6:	e002      	b.n	800cbae <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800cbae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	dd06      	ble.n	800cbc4 <canardRxAccept+0x100>
 800cbb6:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <canardRxAccept+0x11c>)
 800cbb8:	4a07      	ldr	r2, [pc, #28]	; (800cbd8 <canardRxAccept+0x114>)
 800cbba:	f240 419a 	movw	r1, #1178	; 0x49a
 800cbbe:	4807      	ldr	r0, [pc, #28]	; (800cbdc <canardRxAccept+0x118>)
 800cbc0:	f002 fb4a 	bl	800f258 <__assert_func>
    return out;
 800cbc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3738      	adds	r7, #56	; 0x38
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	0800c825 	.word	0x0800c825
 800cbd4:	08014160 	.word	0x08014160
 800cbd8:	08014f4c 	.word	0x08014f4c
 800cbdc:	08013970 	.word	0x08013970
 800cbe0:	08014180 	.word	0x08014180

0800cbe4 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	72fb      	strb	r3, [r7, #11]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cbf6:	23fe      	movs	r3, #254	; 0xfe
 800cbf8:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d04a      	beq.n	800cc9a <canardRxSubscribe+0xb6>
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d047      	beq.n	800cc9a <canardRxSubscribe+0xb6>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d844      	bhi.n	800cc9a <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800cc10:	893a      	ldrh	r2, [r7, #8]
 800cc12:	7afb      	ldrb	r3, [r7, #11]
 800cc14:	4619      	mov	r1, r3
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f000 f850 	bl	800ccbc <canardRxUnsubscribe>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800cc20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	db38      	blt.n	800cc9a <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800cc28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	893a      	ldrh	r2, [r7, #8]
 800cc3c:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cc3e:	2300      	movs	r3, #0
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	e009      	b.n	800cc58 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800cc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	3308      	adds	r3, #8
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	3301      	adds	r3, #1
 800cc56:	61bb      	str	r3, [r7, #24]
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc5c:	d9f2      	bls.n	800cc44 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	3304      	adds	r3, #4
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	18d0      	adds	r0, r2, r3
 800cc68:	4b0f      	ldr	r3, [pc, #60]	; (800cca8 <canardRxSubscribe+0xc4>)
 800cc6a:	4a10      	ldr	r2, [pc, #64]	; (800ccac <canardRxSubscribe+0xc8>)
 800cc6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc6e:	f7fd ff6f 	bl	800ab50 <cavlSearch>
 800cc72:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d006      	beq.n	800cc8a <canardRxSubscribe+0xa6>
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <canardRxSubscribe+0xcc>)
 800cc7e:	4a0d      	ldr	r2, [pc, #52]	; (800ccb4 <canardRxSubscribe+0xd0>)
 800cc80:	f240 41be 	movw	r1, #1214	; 0x4be
 800cc84:	480c      	ldr	r0, [pc, #48]	; (800ccb8 <canardRxSubscribe+0xd4>)
 800cc86:	f002 fae7 	bl	800f258 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800cc8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfd4      	ite	le
 800cc92:	2301      	movle	r3, #1
 800cc94:	2300      	movgt	r3, #0
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cc9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3720      	adds	r7, #32
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	0800aeb1 	.word	0x0800aeb1
 800ccac:	0800c86d 	.word	0x0800c86d
 800ccb0:	0801418c 	.word	0x0801418c
 800ccb4:	0801502c 	.word	0x0801502c
 800ccb8:	08013970 	.word	0x08013970

0800ccbc <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cccc:	23fe      	movs	r3, #254	; 0xfe
 800ccce:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d05f      	beq.n	800cd9a <canardRxUnsubscribe+0xde>
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d85c      	bhi.n	800cd9a <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800cce0:	883b      	ldrh	r3, [r7, #0]
 800cce2:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3304      	adds	r3, #4
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	18d0      	adds	r0, r2, r3
 800ccee:	f107 010e 	add.w	r1, r7, #14
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4a2c      	ldr	r2, [pc, #176]	; (800cda8 <canardRxUnsubscribe+0xec>)
 800ccf6:	f7fd ff2b 	bl	800ab50 <cavlSearch>
 800ccfa:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d049      	beq.n	800cd96 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	3304      	adds	r3, #4
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7fd ff9b 	bl	800ac4c <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	8b9b      	ldrh	r3, [r3, #28]
 800cd1a:	883a      	ldrh	r2, [r7, #0]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d006      	beq.n	800cd2e <canardRxUnsubscribe+0x72>
 800cd20:	4b22      	ldr	r3, [pc, #136]	; (800cdac <canardRxUnsubscribe+0xf0>)
 800cd22:	4a23      	ldr	r2, [pc, #140]	; (800cdb0 <canardRxUnsubscribe+0xf4>)
 800cd24:	f240 41d3 	movw	r1, #1235	; 0x4d3
 800cd28:	4822      	ldr	r0, [pc, #136]	; (800cdb4 <canardRxUnsubscribe+0xf8>)
 800cd2a:	f002 fa95 	bl	800f258 <__assert_func>
            out = 1;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cd32:	2300      	movs	r3, #0
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	e02a      	b.n	800cd8e <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68da      	ldr	r2, [r3, #12]
 800cd3c:	6939      	ldr	r1, [r7, #16]
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	3308      	adds	r3, #8
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	440b      	add	r3, r1
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d007      	beq.n	800cd5c <canardRxUnsubscribe+0xa0>
 800cd4c:	6939      	ldr	r1, [r7, #16]
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	3308      	adds	r3, #8
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	440b      	add	r3, r1
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	e000      	b.n	800cd5e <canardRxUnsubscribe+0xa2>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	6939      	ldr	r1, [r7, #16]
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	440b      	add	r3, r1
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4619      	mov	r1, r3
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	3308      	adds	r3, #8
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	2200      	movs	r2, #0
 800cd86:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	61bb      	str	r3, [r7, #24]
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2b7f      	cmp	r3, #127	; 0x7f
 800cd92:	d9d1      	bls.n	800cd38 <canardRxUnsubscribe+0x7c>
 800cd94:	e001      	b.n	800cd9a <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cd9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3720      	adds	r7, #32
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	0800c825 	.word	0x0800c825
 800cdac:	080141ac 	.word	0x080141ac
 800cdb0:	08015040 	.word	0x08015040
 800cdb4:	08013970 	.word	0x08013970

0800cdb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cdbc:	4b0e      	ldr	r3, [pc, #56]	; (800cdf8 <HAL_Init+0x40>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a0d      	ldr	r2, [pc, #52]	; (800cdf8 <HAL_Init+0x40>)
 800cdc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cdc8:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <HAL_Init+0x40>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a0a      	ldr	r2, [pc, #40]	; (800cdf8 <HAL_Init+0x40>)
 800cdce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cdd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cdd4:	4b08      	ldr	r3, [pc, #32]	; (800cdf8 <HAL_Init+0x40>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a07      	ldr	r2, [pc, #28]	; (800cdf8 <HAL_Init+0x40>)
 800cdda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cde0:	2003      	movs	r0, #3
 800cde2:	f000 ffad 	bl	800dd40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cde6:	2000      	movs	r0, #0
 800cde8:	f000 f808 	bl	800cdfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cdec:	f7fd fb2c 	bl	800a448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	40023c00 	.word	0x40023c00

0800cdfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ce04:	4b12      	ldr	r3, [pc, #72]	; (800ce50 <HAL_InitTick+0x54>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <HAL_InitTick+0x58>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce12:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 ffc5 	bl	800ddaa <HAL_SYSTICK_Config>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d001      	beq.n	800ce2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	e00e      	b.n	800ce48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b0f      	cmp	r3, #15
 800ce2e:	d80a      	bhi.n	800ce46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ce30:	2200      	movs	r2, #0
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295
 800ce38:	f000 ff8d 	bl	800dd56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ce3c:	4a06      	ldr	r2, [pc, #24]	; (800ce58 <HAL_InitTick+0x5c>)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e000      	b.n	800ce48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	2000000c 	.word	0x2000000c
 800ce54:	20000014 	.word	0x20000014
 800ce58:	20000010 	.word	0x20000010

0800ce5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <HAL_IncTick+0x20>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	4b06      	ldr	r3, [pc, #24]	; (800ce80 <HAL_IncTick+0x24>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	4a04      	ldr	r2, [pc, #16]	; (800ce80 <HAL_IncTick+0x24>)
 800ce6e:	6013      	str	r3, [r2, #0]
}
 800ce70:	bf00      	nop
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20000014 	.word	0x20000014
 800ce80:	200008f4 	.word	0x200008f4

0800ce84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ce84:	b480      	push	{r7}
 800ce86:	af00      	add	r7, sp, #0
  return uwTick;
 800ce88:	4b03      	ldr	r3, [pc, #12]	; (800ce98 <HAL_GetTick+0x14>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200008f4 	.word	0x200008f4

0800ce9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cea4:	f7ff ffee 	bl	800ce84 <HAL_GetTick>
 800cea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d005      	beq.n	800cec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ceb6:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <HAL_Delay+0x44>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cec2:	bf00      	nop
 800cec4:	f7ff ffde 	bl	800ce84 <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d8f7      	bhi.n	800cec4 <HAL_Delay+0x28>
  {
  }
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20000014 	.word	0x20000014

0800cee4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e0ed      	b.n	800d0d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d102      	bne.n	800cf08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7fd fac8 	bl	800a498 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f042 0201 	orr.w	r2, r2, #1
 800cf16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cf18:	f7ff ffb4 	bl	800ce84 <HAL_GetTick>
 800cf1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cf1e:	e012      	b.n	800cf46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cf20:	f7ff ffb0 	bl	800ce84 <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	2b0a      	cmp	r3, #10
 800cf2c:	d90b      	bls.n	800cf46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2205      	movs	r2, #5
 800cf3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e0c5      	b.n	800d0d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0e5      	beq.n	800cf20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f022 0202 	bic.w	r2, r2, #2
 800cf62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cf64:	f7ff ff8e 	bl	800ce84 <HAL_GetTick>
 800cf68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cf6a:	e012      	b.n	800cf92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cf6c:	f7ff ff8a 	bl	800ce84 <HAL_GetTick>
 800cf70:	4602      	mov	r2, r0
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	2b0a      	cmp	r3, #10
 800cf78:	d90b      	bls.n	800cf92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2205      	movs	r2, #5
 800cf8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e09f      	b.n	800d0d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	f003 0302 	and.w	r3, r3, #2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1e5      	bne.n	800cf6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7e1b      	ldrb	r3, [r3, #24]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d108      	bne.n	800cfba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	e007      	b.n	800cfca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7e5b      	ldrb	r3, [r3, #25]
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d108      	bne.n	800cfe4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	e007      	b.n	800cff4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7e9b      	ldrb	r3, [r3, #26]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d108      	bne.n	800d00e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0220 	orr.w	r2, r2, #32
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	e007      	b.n	800d01e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f022 0220 	bic.w	r2, r2, #32
 800d01c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7edb      	ldrb	r3, [r3, #27]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d108      	bne.n	800d038 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f022 0210 	bic.w	r2, r2, #16
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	e007      	b.n	800d048 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0210 	orr.w	r2, r2, #16
 800d046:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	7f1b      	ldrb	r3, [r3, #28]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d108      	bne.n	800d062 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f042 0208 	orr.w	r2, r2, #8
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e007      	b.n	800d072 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f022 0208 	bic.w	r2, r2, #8
 800d070:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7f5b      	ldrb	r3, [r3, #29]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d108      	bne.n	800d08c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f042 0204 	orr.w	r2, r2, #4
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	e007      	b.n	800d09c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f022 0204 	bic.w	r2, r2, #4
 800d09a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	ea42 0103 	orr.w	r1, r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	1e5a      	subs	r2, r3, #1
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
	...

0800d0dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d0f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800d0f4:	7cfb      	ldrb	r3, [r7, #19]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d003      	beq.n	800d102 <HAL_CAN_ConfigFilter+0x26>
 800d0fa:	7cfb      	ldrb	r3, [r7, #19]
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	f040 80be 	bne.w	800d27e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800d102:	4b65      	ldr	r3, [pc, #404]	; (800d298 <HAL_CAN_ConfigFilter+0x1bc>)
 800d104:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d10c:	f043 0201 	orr.w	r2, r3, #1
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d11c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	431a      	orrs	r2, r3
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	f003 031f 	and.w	r3, r3, #31
 800d142:	2201      	movs	r2, #1
 800d144:	fa02 f303 	lsl.w	r3, r2, r3
 800d148:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	43db      	mvns	r3, r3
 800d154:	401a      	ands	r2, r3
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d123      	bne.n	800d1ac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	43db      	mvns	r3, r3
 800d16e:	401a      	ands	r2, r3
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d186:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	3248      	adds	r2, #72	; 0x48
 800d18c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d1a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	3348      	adds	r3, #72	; 0x48
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d122      	bne.n	800d1fa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d1d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	3248      	adds	r2, #72	; 0x48
 800d1da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d1ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d1f0:	6979      	ldr	r1, [r7, #20]
 800d1f2:	3348      	adds	r3, #72	; 0x48
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	440b      	add	r3, r1
 800d1f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	43db      	mvns	r3, r3
 800d20c:	401a      	ands	r2, r3
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d214:	e007      	b.n	800d226 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	431a      	orrs	r2, r3
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d109      	bne.n	800d242 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	43db      	mvns	r3, r3
 800d238:	401a      	ands	r2, r3
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d240:	e007      	b.n	800d252 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	431a      	orrs	r2, r3
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d107      	bne.n	800d26a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	431a      	orrs	r2, r3
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d270:	f023 0201 	bic.w	r2, r3, #1
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	e006      	b.n	800d28c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
  }
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	371c      	adds	r7, #28
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	40006400 	.word	0x40006400

0800d29c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d12e      	bne.n	800d30e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f022 0201 	bic.w	r2, r2, #1
 800d2c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d2c8:	f7ff fddc 	bl	800ce84 <HAL_GetTick>
 800d2cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d2ce:	e012      	b.n	800d2f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d2d0:	f7ff fdd8 	bl	800ce84 <HAL_GetTick>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	2b0a      	cmp	r3, #10
 800d2dc:	d90b      	bls.n	800d2f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e012      	b.n	800d31c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1e5      	bne.n	800d2d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	e006      	b.n	800d31c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
  }
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800d324:	b480      	push	{r7}
 800d326:	b089      	sub	sp, #36	; 0x24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d338:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d342:	7ffb      	ldrb	r3, [r7, #31]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d003      	beq.n	800d350 <HAL_CAN_AddTxMessage+0x2c>
 800d348:	7ffb      	ldrb	r3, [r7, #31]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	f040 80ad 	bne.w	800d4aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d360:	2b00      	cmp	r3, #0
 800d362:	d105      	bne.n	800d370 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 8095 	beq.w	800d49a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	0e1b      	lsrs	r3, r3, #24
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d37a:	2201      	movs	r2, #1
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	409a      	lsls	r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10d      	bne.n	800d3a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	6809      	ldr	r1, [r1, #0]
 800d39a:	431a      	orrs	r2, r3
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	3318      	adds	r3, #24
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	440b      	add	r3, r1
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	e00f      	b.n	800d3c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d3b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d3b8:	68f9      	ldr	r1, [r7, #12]
 800d3ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d3bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	3318      	adds	r3, #24
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	440b      	add	r3, r1
 800d3c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6819      	ldr	r1, [r3, #0]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	691a      	ldr	r2, [r3, #16]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	3318      	adds	r3, #24
 800d3d4:	011b      	lsls	r3, r3, #4
 800d3d6:	440b      	add	r3, r1
 800d3d8:	3304      	adds	r3, #4
 800d3da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d111      	bne.n	800d408 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	3318      	adds	r3, #24
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	4413      	add	r3, r2
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	6811      	ldr	r1, [r2, #0]
 800d3f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	3318      	adds	r3, #24
 800d400:	011b      	lsls	r3, r3, #4
 800d402:	440b      	add	r3, r1
 800d404:	3304      	adds	r3, #4
 800d406:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3307      	adds	r3, #7
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	061a      	lsls	r2, r3, #24
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	3306      	adds	r3, #6
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	041b      	lsls	r3, r3, #16
 800d418:	431a      	orrs	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3305      	adds	r3, #5
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	021b      	lsls	r3, r3, #8
 800d422:	4313      	orrs	r3, r2
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	3204      	adds	r2, #4
 800d428:	7812      	ldrb	r2, [r2, #0]
 800d42a:	4610      	mov	r0, r2
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	6811      	ldr	r1, [r2, #0]
 800d430:	ea43 0200 	orr.w	r2, r3, r0
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	011b      	lsls	r3, r3, #4
 800d438:	440b      	add	r3, r1
 800d43a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800d43e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3303      	adds	r3, #3
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	061a      	lsls	r2, r3, #24
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3302      	adds	r3, #2
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	041b      	lsls	r3, r3, #16
 800d450:	431a      	orrs	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3301      	adds	r3, #1
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	021b      	lsls	r3, r3, #8
 800d45a:	4313      	orrs	r3, r2
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	7812      	ldrb	r2, [r2, #0]
 800d460:	4610      	mov	r0, r2
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	6811      	ldr	r1, [r2, #0]
 800d466:	ea43 0200 	orr.w	r2, r3, r0
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	011b      	lsls	r3, r3, #4
 800d46e:	440b      	add	r3, r1
 800d470:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	3318      	adds	r3, #24
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	4413      	add	r3, r2
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	6811      	ldr	r1, [r2, #0]
 800d488:	f043 0201 	orr.w	r2, r3, #1
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	3318      	adds	r3, #24
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	440b      	add	r3, r1
 800d494:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d496:	2300      	movs	r3, #0
 800d498:	e00e      	b.n	800d4b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e006      	b.n	800d4b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
  }
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3724      	adds	r7, #36	; 0x24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d4da:	7dfb      	ldrb	r3, [r7, #23]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d003      	beq.n	800d4e8 <HAL_CAN_GetRxMessage+0x24>
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	f040 8103 	bne.w	800d6ee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10e      	bne.n	800d50c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	f003 0303 	and.w	r3, r3, #3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d116      	bne.n	800d52a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e0f7      	b.n	800d6fc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	f003 0303 	and.w	r3, r3, #3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d107      	bne.n	800d52a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e0e8      	b.n	800d6fc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	331b      	adds	r3, #27
 800d532:	011b      	lsls	r3, r3, #4
 800d534:	4413      	add	r3, r2
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f003 0204 	and.w	r2, r3, #4
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10c      	bne.n	800d562 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	331b      	adds	r3, #27
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	4413      	add	r3, r2
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	0d5b      	lsrs	r3, r3, #21
 800d558:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	e00b      	b.n	800d57a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	331b      	adds	r3, #27
 800d56a:	011b      	lsls	r3, r3, #4
 800d56c:	4413      	add	r3, r2
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	08db      	lsrs	r3, r3, #3
 800d572:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	331b      	adds	r3, #27
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	4413      	add	r3, r2
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f003 0202 	and.w	r2, r3, #2
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	331b      	adds	r3, #27
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	4413      	add	r3, r2
 800d59c:	3304      	adds	r3, #4
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d003      	beq.n	800d5b0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2208      	movs	r2, #8
 800d5ac:	611a      	str	r2, [r3, #16]
 800d5ae:	e00b      	b.n	800d5c8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	331b      	adds	r3, #27
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	4413      	add	r3, r2
 800d5bc:	3304      	adds	r3, #4
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 020f 	and.w	r2, r3, #15
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	331b      	adds	r3, #27
 800d5d0:	011b      	lsls	r3, r3, #4
 800d5d2:	4413      	add	r3, r2
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	0a1b      	lsrs	r3, r3, #8
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	331b      	adds	r3, #27
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	4413      	add	r3, r2
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	0c1b      	lsrs	r3, r3, #16
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	011b      	lsls	r3, r3, #4
 800d600:	4413      	add	r3, r2
 800d602:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	011b      	lsls	r3, r3, #4
 800d616:	4413      	add	r3, r2
 800d618:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	0a1a      	lsrs	r2, r3, #8
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	b2d2      	uxtb	r2, r2
 800d626:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	011b      	lsls	r3, r3, #4
 800d630:	4413      	add	r3, r2
 800d632:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	0c1a      	lsrs	r2, r3, #16
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	3302      	adds	r3, #2
 800d63e:	b2d2      	uxtb	r2, r2
 800d640:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	011b      	lsls	r3, r3, #4
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	0e1a      	lsrs	r2, r3, #24
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3303      	adds	r3, #3
 800d658:	b2d2      	uxtb	r2, r2
 800d65a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	011b      	lsls	r3, r3, #4
 800d664:	4413      	add	r3, r2
 800d666:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	3304      	adds	r3, #4
 800d670:	b2d2      	uxtb	r2, r2
 800d672:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	011b      	lsls	r3, r3, #4
 800d67c:	4413      	add	r3, r2
 800d67e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	0a1a      	lsrs	r2, r3, #8
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	3305      	adds	r3, #5
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	011b      	lsls	r3, r3, #4
 800d696:	4413      	add	r3, r2
 800d698:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	0c1a      	lsrs	r2, r3, #16
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	3306      	adds	r3, #6
 800d6a4:	b2d2      	uxtb	r2, r2
 800d6a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	0e1a      	lsrs	r2, r3, #24
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	3307      	adds	r3, #7
 800d6be:	b2d2      	uxtb	r2, r2
 800d6c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d108      	bne.n	800d6da <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 0220 	orr.w	r2, r2, #32
 800d6d6:	60da      	str	r2, [r3, #12]
 800d6d8:	e007      	b.n	800d6ea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	691a      	ldr	r2, [r3, #16]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f042 0220 	orr.w	r2, r2, #32
 800d6e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e006      	b.n	800d6fc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
  }
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	371c      	adds	r7, #28
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d718:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d002      	beq.n	800d726 <HAL_CAN_ActivateNotification+0x1e>
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d109      	bne.n	800d73a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6959      	ldr	r1, [r3, #20]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	683a      	ldr	r2, [r7, #0]
 800d732:	430a      	orrs	r2, r1
 800d734:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	e006      	b.n	800d748 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d746:	2301      	movs	r3, #1
  }
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08a      	sub	sp, #40	; 0x28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d07c      	beq.n	800d894 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d023      	beq.n	800d7ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	f003 0302 	and.w	r3, r3, #2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f983 	bl	800dac2 <HAL_CAN_TxMailbox0CompleteCallback>
 800d7bc:	e016      	b.n	800d7ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d0:	e00c      	b.n	800d7ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	f003 0308 	and.w	r3, r3, #8
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d004      	beq.n	800d7e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7e4:	e002      	b.n	800d7ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f989 	bl	800dafe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d024      	beq.n	800d840 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f963 	bl	800dad6 <HAL_CAN_TxMailbox1CompleteCallback>
 800d810:	e016      	b.n	800d840 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d004      	beq.n	800d826 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
 800d824:	e00c      	b.n	800d840 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d004      	beq.n	800d83a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d836:	627b      	str	r3, [r7, #36]	; 0x24
 800d838:	e002      	b.n	800d840 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f969 	bl	800db12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d024      	beq.n	800d894 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d852:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f943 	bl	800daea <HAL_CAN_TxMailbox2CompleteCallback>
 800d864:	e016      	b.n	800d894 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
 800d878:	e00c      	b.n	800d894 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d88a:	627b      	str	r3, [r7, #36]	; 0x24
 800d88c:	e002      	b.n	800d894 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f949 	bl	800db26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	f003 0308 	and.w	r3, r3, #8
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00c      	beq.n	800d8b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f003 0310 	and.w	r3, r3, #16
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d8ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2210      	movs	r2, #16
 800d8b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	f003 0304 	and.w	r3, r3, #4
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00b      	beq.n	800d8da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f003 0308 	and.w	r3, r3, #8
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2208      	movs	r2, #8
 800d8d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f930 	bl	800db3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f003 0302 	and.w	r3, r3, #2
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d009      	beq.n	800d8f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	f003 0303 	and.w	r3, r3, #3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7fc faa0 	bl	8009e38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00c      	beq.n	800d91c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f003 0310 	and.w	r3, r3, #16
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d007      	beq.n	800d91c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d912:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2210      	movs	r2, #16
 800d91a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	f003 0320 	and.w	r3, r3, #32
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00b      	beq.n	800d93e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	f003 0308 	and.w	r3, r3, #8
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d006      	beq.n	800d93e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2208      	movs	r2, #8
 800d936:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f908 	bl	800db4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	f003 0310 	and.w	r3, r3, #16
 800d944:	2b00      	cmp	r3, #0
 800d946:	d009      	beq.n	800d95c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7fc fd4e 	bl	800a3f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	f003 0310 	and.w	r3, r3, #16
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d006      	beq.n	800d97e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2210      	movs	r2, #16
 800d976:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f8f2 	bl	800db62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00b      	beq.n	800d9a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	f003 0308 	and.w	r3, r3, #8
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d006      	beq.n	800d9a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2208      	movs	r2, #8
 800d998:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f8eb 	bl	800db76 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d07b      	beq.n	800daa2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d072      	beq.n	800da9a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d008      	beq.n	800d9d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d003      	beq.n	800d9d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	f043 0301 	orr.w	r3, r3, #1
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d9d0:	6a3b      	ldr	r3, [r7, #32]
 800d9d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d008      	beq.n	800d9ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	f043 0302 	orr.w	r3, r3, #2
 800d9ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d008      	beq.n	800da08 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d003      	beq.n	800da08 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	f043 0304 	orr.w	r3, r3, #4
 800da06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d043      	beq.n	800da9a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d03e      	beq.n	800da9a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da22:	2b60      	cmp	r3, #96	; 0x60
 800da24:	d02b      	beq.n	800da7e <HAL_CAN_IRQHandler+0x32a>
 800da26:	2b60      	cmp	r3, #96	; 0x60
 800da28:	d82e      	bhi.n	800da88 <HAL_CAN_IRQHandler+0x334>
 800da2a:	2b50      	cmp	r3, #80	; 0x50
 800da2c:	d022      	beq.n	800da74 <HAL_CAN_IRQHandler+0x320>
 800da2e:	2b50      	cmp	r3, #80	; 0x50
 800da30:	d82a      	bhi.n	800da88 <HAL_CAN_IRQHandler+0x334>
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	d019      	beq.n	800da6a <HAL_CAN_IRQHandler+0x316>
 800da36:	2b40      	cmp	r3, #64	; 0x40
 800da38:	d826      	bhi.n	800da88 <HAL_CAN_IRQHandler+0x334>
 800da3a:	2b30      	cmp	r3, #48	; 0x30
 800da3c:	d010      	beq.n	800da60 <HAL_CAN_IRQHandler+0x30c>
 800da3e:	2b30      	cmp	r3, #48	; 0x30
 800da40:	d822      	bhi.n	800da88 <HAL_CAN_IRQHandler+0x334>
 800da42:	2b10      	cmp	r3, #16
 800da44:	d002      	beq.n	800da4c <HAL_CAN_IRQHandler+0x2f8>
 800da46:	2b20      	cmp	r3, #32
 800da48:	d005      	beq.n	800da56 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800da4a:	e01d      	b.n	800da88 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	f043 0308 	orr.w	r3, r3, #8
 800da52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da54:	e019      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	f043 0310 	orr.w	r3, r3, #16
 800da5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da5e:	e014      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	f043 0320 	orr.w	r3, r3, #32
 800da66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da68:	e00f      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da72:	e00a      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da7c:	e005      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800da86:	e000      	b.n	800da8a <HAL_CAN_IRQHandler+0x336>
            break;
 800da88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	699a      	ldr	r2, [r3, #24]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800da98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2204      	movs	r2, #4
 800daa0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d008      	beq.n	800daba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	431a      	orrs	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f868 	bl	800db8a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800daba:	bf00      	nop
 800dabc:	3728      	adds	r7, #40	; 0x28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b083      	sub	sp, #12
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800daea:	b480      	push	{r7}
 800daec:	b083      	sub	sp, #12
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800daf2:	bf00      	nop
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800dafe:	b480      	push	{r7}
 800db00:	b083      	sub	sp, #12
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800db06:	bf00      	nop
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800db12:	b480      	push	{r7}
 800db14:	b083      	sub	sp, #12
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800db26:	b480      	push	{r7}
 800db28:	b083      	sub	sp, #12
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800db2e:	bf00      	nop
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800db42:	bf00      	nop
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800db4e:	b480      	push	{r7}
 800db50:	b083      	sub	sp, #12
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800db56:	bf00      	nop
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800db6a:	bf00      	nop
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b083      	sub	sp, #12
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
	...

0800dba0 <__NVIC_SetPriorityGrouping>:
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dbb0:	4b0c      	ldr	r3, [pc, #48]	; (800dbe4 <__NVIC_SetPriorityGrouping+0x44>)
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dbc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dbcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dbd2:	4a04      	ldr	r2, [pc, #16]	; (800dbe4 <__NVIC_SetPriorityGrouping+0x44>)
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	60d3      	str	r3, [r2, #12]
}
 800dbd8:	bf00      	nop
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	e000ed00 	.word	0xe000ed00

0800dbe8 <__NVIC_GetPriorityGrouping>:
{
 800dbe8:	b480      	push	{r7}
 800dbea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dbec:	4b04      	ldr	r3, [pc, #16]	; (800dc00 <__NVIC_GetPriorityGrouping+0x18>)
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	0a1b      	lsrs	r3, r3, #8
 800dbf2:	f003 0307 	and.w	r3, r3, #7
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	e000ed00 	.word	0xe000ed00

0800dc04 <__NVIC_EnableIRQ>:
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	db0b      	blt.n	800dc2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	f003 021f 	and.w	r2, r3, #31
 800dc1c:	4907      	ldr	r1, [pc, #28]	; (800dc3c <__NVIC_EnableIRQ+0x38>)
 800dc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc22:	095b      	lsrs	r3, r3, #5
 800dc24:	2001      	movs	r0, #1
 800dc26:	fa00 f202 	lsl.w	r2, r0, r2
 800dc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800dc2e:	bf00      	nop
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	e000e100 	.word	0xe000e100

0800dc40 <__NVIC_SetPriority>:
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	6039      	str	r1, [r7, #0]
 800dc4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	db0a      	blt.n	800dc6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	490c      	ldr	r1, [pc, #48]	; (800dc8c <__NVIC_SetPriority+0x4c>)
 800dc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc5e:	0112      	lsls	r2, r2, #4
 800dc60:	b2d2      	uxtb	r2, r2
 800dc62:	440b      	add	r3, r1
 800dc64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dc68:	e00a      	b.n	800dc80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	4908      	ldr	r1, [pc, #32]	; (800dc90 <__NVIC_SetPriority+0x50>)
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	f003 030f 	and.w	r3, r3, #15
 800dc76:	3b04      	subs	r3, #4
 800dc78:	0112      	lsls	r2, r2, #4
 800dc7a:	b2d2      	uxtb	r2, r2
 800dc7c:	440b      	add	r3, r1
 800dc7e:	761a      	strb	r2, [r3, #24]
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	e000e100 	.word	0xe000e100
 800dc90:	e000ed00 	.word	0xe000ed00

0800dc94 <NVIC_EncodePriority>:
{
 800dc94:	b480      	push	{r7}
 800dc96:	b089      	sub	sp, #36	; 0x24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f003 0307 	and.w	r3, r3, #7
 800dca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	f1c3 0307 	rsb	r3, r3, #7
 800dcae:	2b04      	cmp	r3, #4
 800dcb0:	bf28      	it	cs
 800dcb2:	2304      	movcs	r3, #4
 800dcb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	2b06      	cmp	r3, #6
 800dcbc:	d902      	bls.n	800dcc4 <NVIC_EncodePriority+0x30>
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	3b03      	subs	r3, #3
 800dcc2:	e000      	b.n	800dcc6 <NVIC_EncodePriority+0x32>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd2:	43da      	mvns	r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	401a      	ands	r2, r3
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dcdc:	f04f 31ff 	mov.w	r1, #4294967295
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	fa01 f303 	lsl.w	r3, r1, r3
 800dce6:	43d9      	mvns	r1, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dcec:	4313      	orrs	r3, r2
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3724      	adds	r7, #36	; 0x24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
	...

0800dcfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dd0c:	d301      	bcc.n	800dd12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e00f      	b.n	800dd32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dd12:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <SysTick_Config+0x40>)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3b01      	subs	r3, #1
 800dd18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dd1a:	210f      	movs	r1, #15
 800dd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd20:	f7ff ff8e 	bl	800dc40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <SysTick_Config+0x40>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dd2a:	4b04      	ldr	r3, [pc, #16]	; (800dd3c <SysTick_Config+0x40>)
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	e000e010 	.word	0xe000e010

0800dd40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff ff29 	bl	800dba0 <__NVIC_SetPriorityGrouping>
}
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b086      	sub	sp, #24
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	607a      	str	r2, [r7, #4]
 800dd62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dd68:	f7ff ff3e 	bl	800dbe8 <__NVIC_GetPriorityGrouping>
 800dd6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	68b9      	ldr	r1, [r7, #8]
 800dd72:	6978      	ldr	r0, [r7, #20]
 800dd74:	f7ff ff8e 	bl	800dc94 <NVIC_EncodePriority>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff ff5d 	bl	800dc40 <__NVIC_SetPriority>
}
 800dd86:	bf00      	nop
 800dd88:	3718      	adds	r7, #24
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b082      	sub	sp, #8
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	4603      	mov	r3, r0
 800dd96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dd98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff ff31 	bl	800dc04 <__NVIC_EnableIRQ>
}
 800dda2:	bf00      	nop
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b082      	sub	sp, #8
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff ffa2 	bl	800dcfc <SysTick_Config>
 800ddb8:	4603      	mov	r3, r0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ddd6:	4b23      	ldr	r3, [pc, #140]	; (800de64 <HAL_FLASH_Program+0xa0>)
 800ddd8:	7e1b      	ldrb	r3, [r3, #24]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d101      	bne.n	800dde2 <HAL_FLASH_Program+0x1e>
 800ddde:	2302      	movs	r3, #2
 800dde0:	e03b      	b.n	800de5a <HAL_FLASH_Program+0x96>
 800dde2:	4b20      	ldr	r3, [pc, #128]	; (800de64 <HAL_FLASH_Program+0xa0>)
 800dde4:	2201      	movs	r2, #1
 800dde6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dde8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ddec:	f000 f870 	bl	800ded0 <FLASH_WaitForLastOperation>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d12b      	bne.n	800de52 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d105      	bne.n	800de0c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800de00:	783b      	ldrb	r3, [r7, #0]
 800de02:	4619      	mov	r1, r3
 800de04:	68b8      	ldr	r0, [r7, #8]
 800de06:	f000 f91b 	bl	800e040 <FLASH_Program_Byte>
 800de0a:	e016      	b.n	800de3a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d105      	bne.n	800de1e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800de12:	883b      	ldrh	r3, [r7, #0]
 800de14:	4619      	mov	r1, r3
 800de16:	68b8      	ldr	r0, [r7, #8]
 800de18:	f000 f8ee 	bl	800dff8 <FLASH_Program_HalfWord>
 800de1c:	e00d      	b.n	800de3a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d105      	bne.n	800de30 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	4619      	mov	r1, r3
 800de28:	68b8      	ldr	r0, [r7, #8]
 800de2a:	f000 f8c3 	bl	800dfb4 <FLASH_Program_Word>
 800de2e:	e004      	b.n	800de3a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800de30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f000 f88b 	bl	800df50 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800de3e:	f000 f847 	bl	800ded0 <FLASH_WaitForLastOperation>
 800de42:	4603      	mov	r3, r0
 800de44:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800de46:	4b08      	ldr	r3, [pc, #32]	; (800de68 <HAL_FLASH_Program+0xa4>)
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	4a07      	ldr	r2, [pc, #28]	; (800de68 <HAL_FLASH_Program+0xa4>)
 800de4c:	f023 0301 	bic.w	r3, r3, #1
 800de50:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800de52:	4b04      	ldr	r3, [pc, #16]	; (800de64 <HAL_FLASH_Program+0xa0>)
 800de54:	2200      	movs	r2, #0
 800de56:	761a      	strb	r2, [r3, #24]

  return status;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	200008f8 	.word	0x200008f8
 800de68:	40023c00 	.word	0x40023c00

0800de6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800de76:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <HAL_FLASH_Unlock+0x38>)
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	da0b      	bge.n	800de96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <HAL_FLASH_Unlock+0x38>)
 800de80:	4a09      	ldr	r2, [pc, #36]	; (800dea8 <HAL_FLASH_Unlock+0x3c>)
 800de82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800de84:	4b07      	ldr	r3, [pc, #28]	; (800dea4 <HAL_FLASH_Unlock+0x38>)
 800de86:	4a09      	ldr	r2, [pc, #36]	; (800deac <HAL_FLASH_Unlock+0x40>)
 800de88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800de8a:	4b06      	ldr	r3, [pc, #24]	; (800dea4 <HAL_FLASH_Unlock+0x38>)
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	da01      	bge.n	800de96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800de96:	79fb      	ldrb	r3, [r7, #7]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	40023c00 	.word	0x40023c00
 800dea8:	45670123 	.word	0x45670123
 800deac:	cdef89ab 	.word	0xcdef89ab

0800deb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800deb0:	b480      	push	{r7}
 800deb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800deb4:	4b05      	ldr	r3, [pc, #20]	; (800decc <HAL_FLASH_Lock+0x1c>)
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	4a04      	ldr	r2, [pc, #16]	; (800decc <HAL_FLASH_Lock+0x1c>)
 800deba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800debe:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	40023c00 	.word	0x40023c00

0800ded0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dedc:	4b1a      	ldr	r3, [pc, #104]	; (800df48 <FLASH_WaitForLastOperation+0x78>)
 800dede:	2200      	movs	r2, #0
 800dee0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800dee2:	f7fe ffcf 	bl	800ce84 <HAL_GetTick>
 800dee6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800dee8:	e010      	b.n	800df0c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def0:	d00c      	beq.n	800df0c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d007      	beq.n	800df08 <FLASH_WaitForLastOperation+0x38>
 800def8:	f7fe ffc4 	bl	800ce84 <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d201      	bcs.n	800df0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800df08:	2303      	movs	r3, #3
 800df0a:	e019      	b.n	800df40 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800df0c:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <FLASH_WaitForLastOperation+0x7c>)
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1e8      	bne.n	800deea <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800df18:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <FLASH_WaitForLastOperation+0x7c>)
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800df24:	4b09      	ldr	r3, [pc, #36]	; (800df4c <FLASH_WaitForLastOperation+0x7c>)
 800df26:	2201      	movs	r2, #1
 800df28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800df2a:	4b08      	ldr	r3, [pc, #32]	; (800df4c <FLASH_WaitForLastOperation+0x7c>)
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800df32:	2b00      	cmp	r3, #0
 800df34:	d003      	beq.n	800df3e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800df36:	f000 f8a5 	bl	800e084 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e000      	b.n	800df40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800df3e:	2300      	movs	r3, #0

}
 800df40:	4618      	mov	r0, r3
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	200008f8 	.word	0x200008f8
 800df4c:	40023c00 	.word	0x40023c00

0800df50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800df5c:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	4a13      	ldr	r2, [pc, #76]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	4a10      	ldr	r2, [pc, #64]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800df72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800df74:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	4a0d      	ldr	r2, [pc, #52]	; (800dfb0 <FLASH_Program_DoubleWord+0x60>)
 800df7a:	f043 0301 	orr.w	r3, r3, #1
 800df7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	683a      	ldr	r2, [r7, #0]
 800df84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800df86:	f3bf 8f6f 	isb	sy
}
 800df8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800df8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df90:	f04f 0200 	mov.w	r2, #0
 800df94:	f04f 0300 	mov.w	r3, #0
 800df98:	000a      	movs	r2, r1
 800df9a:	2300      	movs	r3, #0
 800df9c:	68f9      	ldr	r1, [r7, #12]
 800df9e:	3104      	adds	r1, #4
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	600b      	str	r3, [r1, #0]
}
 800dfa4:	bf00      	nop
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	40023c00 	.word	0x40023c00

0800dfb4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	4a0c      	ldr	r2, [pc, #48]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800dfca:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	4a09      	ldr	r2, [pc, #36]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800dfd6:	4b07      	ldr	r3, [pc, #28]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	4a06      	ldr	r2, [pc, #24]	; (800dff4 <FLASH_Program_Word+0x40>)
 800dfdc:	f043 0301 	orr.w	r3, r3, #1
 800dfe0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	601a      	str	r2, [r3, #0]
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	40023c00 	.word	0x40023c00

0800dff8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	460b      	mov	r3, r1
 800e002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e004:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	4a0c      	ldr	r2, [pc, #48]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e00e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e010:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	4a09      	ldr	r2, [pc, #36]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e01a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e01c:	4b07      	ldr	r3, [pc, #28]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	4a06      	ldr	r2, [pc, #24]	; (800e03c <FLASH_Program_HalfWord+0x44>)
 800e022:	f043 0301 	orr.w	r3, r3, #1
 800e026:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	887a      	ldrh	r2, [r7, #2]
 800e02c:	801a      	strh	r2, [r3, #0]
}
 800e02e:	bf00      	nop
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	40023c00 	.word	0x40023c00

0800e040 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e04c:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	4a0b      	ldr	r2, [pc, #44]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e058:	4b09      	ldr	r3, [pc, #36]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e05a:	4a09      	ldr	r2, [pc, #36]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	4a06      	ldr	r2, [pc, #24]	; (800e080 <FLASH_Program_Byte+0x40>)
 800e066:	f043 0301 	orr.w	r3, r3, #1
 800e06a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	78fa      	ldrb	r2, [r7, #3]
 800e070:	701a      	strb	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	40023c00 	.word	0x40023c00

0800e084 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800e084:	b480      	push	{r7}
 800e086:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e088:	4b2f      	ldr	r3, [pc, #188]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	f003 0310 	and.w	r3, r3, #16
 800e090:	2b00      	cmp	r3, #0
 800e092:	d008      	beq.n	800e0a6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e094:	4b2d      	ldr	r3, [pc, #180]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	f043 0310 	orr.w	r3, r3, #16
 800e09c:	4a2b      	ldr	r2, [pc, #172]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e09e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e0a0:	4b29      	ldr	r3, [pc, #164]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0a2:	2210      	movs	r2, #16
 800e0a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e0a6:	4b28      	ldr	r3, [pc, #160]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	f003 0320 	and.w	r3, r3, #32
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d008      	beq.n	800e0c4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e0b2:	4b26      	ldr	r3, [pc, #152]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	f043 0308 	orr.w	r3, r3, #8
 800e0ba:	4a24      	ldr	r2, [pc, #144]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e0be:	4b22      	ldr	r3, [pc, #136]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0c0:	2220      	movs	r2, #32
 800e0c2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e0c4:	4b20      	ldr	r3, [pc, #128]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d008      	beq.n	800e0e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e0d0:	4b1e      	ldr	r3, [pc, #120]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0d2:	69db      	ldr	r3, [r3, #28]
 800e0d4:	f043 0304 	orr.w	r3, r3, #4
 800e0d8:	4a1c      	ldr	r2, [pc, #112]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e0dc:	4b1a      	ldr	r3, [pc, #104]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0de:	2240      	movs	r2, #64	; 0x40
 800e0e0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e0e2:	4b19      	ldr	r3, [pc, #100]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d008      	beq.n	800e100 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e0ee:	4b17      	ldr	r3, [pc, #92]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0f0:	69db      	ldr	r3, [r3, #28]
 800e0f2:	f043 0302 	orr.w	r3, r3, #2
 800e0f6:	4a15      	ldr	r2, [pc, #84]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e0f8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e0fa:	4b13      	ldr	r3, [pc, #76]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e0fc:	2280      	movs	r2, #128	; 0x80
 800e0fe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e100:	4b11      	ldr	r3, [pc, #68]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e10c:	4b0f      	ldr	r3, [pc, #60]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	f043 0301 	orr.w	r3, r3, #1
 800e114:	4a0d      	ldr	r2, [pc, #52]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e116:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e118:	4b0b      	ldr	r3, [pc, #44]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e11a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e11e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e120:	4b09      	ldr	r3, [pc, #36]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	f003 0302 	and.w	r3, r3, #2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d008      	beq.n	800e13e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e12c:	4b07      	ldr	r3, [pc, #28]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	f043 0320 	orr.w	r3, r3, #32
 800e134:	4a05      	ldr	r2, [pc, #20]	; (800e14c <FLASH_SetErrorCode+0xc8>)
 800e136:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e138:	4b03      	ldr	r3, [pc, #12]	; (800e148 <FLASH_SetErrorCode+0xc4>)
 800e13a:	2202      	movs	r2, #2
 800e13c:	60da      	str	r2, [r3, #12]
  }
}
 800e13e:	bf00      	nop
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	40023c00 	.word	0x40023c00
 800e14c:	200008f8 	.word	0x200008f8

0800e150 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e162:	4b31      	ldr	r3, [pc, #196]	; (800e228 <HAL_FLASHEx_Erase+0xd8>)
 800e164:	7e1b      	ldrb	r3, [r3, #24]
 800e166:	2b01      	cmp	r3, #1
 800e168:	d101      	bne.n	800e16e <HAL_FLASHEx_Erase+0x1e>
 800e16a:	2302      	movs	r3, #2
 800e16c:	e058      	b.n	800e220 <HAL_FLASHEx_Erase+0xd0>
 800e16e:	4b2e      	ldr	r3, [pc, #184]	; (800e228 <HAL_FLASHEx_Erase+0xd8>)
 800e170:	2201      	movs	r2, #1
 800e172:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e174:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e178:	f7ff feaa 	bl	800ded0 <FLASH_WaitForLastOperation>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d148      	bne.n	800e218 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	f04f 32ff 	mov.w	r2, #4294967295
 800e18c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d115      	bne.n	800e1c2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	4610      	mov	r0, r2
 800e1a4:	f000 f844 	bl	800e230 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e1a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e1ac:	f7ff fe90 	bl	800ded0 <FLASH_WaitForLastOperation>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e1b4:	4b1d      	ldr	r3, [pc, #116]	; (800e22c <HAL_FLASHEx_Erase+0xdc>)
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	4a1c      	ldr	r2, [pc, #112]	; (800e22c <HAL_FLASHEx_Erase+0xdc>)
 800e1ba:	f023 0304 	bic.w	r3, r3, #4
 800e1be:	6113      	str	r3, [r2, #16]
 800e1c0:	e028      	b.n	800e214 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	60bb      	str	r3, [r7, #8]
 800e1c8:	e01c      	b.n	800e204 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	68b8      	ldr	r0, [r7, #8]
 800e1d4:	f000 f850 	bl	800e278 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e1d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e1dc:	f7ff fe78 	bl	800ded0 <FLASH_WaitForLastOperation>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e1e4:	4b11      	ldr	r3, [pc, #68]	; (800e22c <HAL_FLASHEx_Erase+0xdc>)
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	4a10      	ldr	r2, [pc, #64]	; (800e22c <HAL_FLASHEx_Erase+0xdc>)
 800e1ea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800e1ee:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	601a      	str	r2, [r3, #0]
          break;
 800e1fc:	e00a      	b.n	800e214 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	3301      	adds	r3, #1
 800e202:	60bb      	str	r3, [r7, #8]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68da      	ldr	r2, [r3, #12]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	4413      	add	r3, r2
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	429a      	cmp	r2, r3
 800e212:	d3da      	bcc.n	800e1ca <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e214:	f000 f878 	bl	800e308 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e218:	4b03      	ldr	r3, [pc, #12]	; (800e228 <HAL_FLASHEx_Erase+0xd8>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	761a      	strb	r2, [r3, #24]

  return status;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	200008f8 	.word	0x200008f8
 800e22c:	40023c00 	.word	0x40023c00

0800e230 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	4603      	mov	r3, r0
 800e238:	6039      	str	r1, [r7, #0]
 800e23a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e23c:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <FLASH_MassErase+0x44>)
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	4a0c      	ldr	r2, [pc, #48]	; (800e274 <FLASH_MassErase+0x44>)
 800e242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <FLASH_MassErase+0x44>)
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	4a09      	ldr	r2, [pc, #36]	; (800e274 <FLASH_MassErase+0x44>)
 800e24e:	f043 0304 	orr.w	r3, r3, #4
 800e252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800e254:	4b07      	ldr	r3, [pc, #28]	; (800e274 <FLASH_MassErase+0x44>)
 800e256:	691a      	ldr	r2, [r3, #16]
 800e258:	79fb      	ldrb	r3, [r7, #7]
 800e25a:	021b      	lsls	r3, r3, #8
 800e25c:	4313      	orrs	r3, r2
 800e25e:	4a05      	ldr	r2, [pc, #20]	; (800e274 <FLASH_MassErase+0x44>)
 800e260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e264:	6113      	str	r3, [r2, #16]
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	40023c00 	.word	0x40023c00

0800e278 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e284:	2300      	movs	r3, #0
 800e286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800e28e:	2300      	movs	r3, #0
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e010      	b.n	800e2b6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e294:	78fb      	ldrb	r3, [r7, #3]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d103      	bne.n	800e2a2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e29a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e29e:	60fb      	str	r3, [r7, #12]
 800e2a0:	e009      	b.n	800e2b6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e2a2:	78fb      	ldrb	r3, [r7, #3]
 800e2a4:	2b02      	cmp	r3, #2
 800e2a6:	d103      	bne.n	800e2b0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	e002      	b.n	800e2b6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e2b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e2b4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e2b6:	4b13      	ldr	r3, [pc, #76]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	4a12      	ldr	r2, [pc, #72]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e2c2:	4b10      	ldr	r3, [pc, #64]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2c4:	691a      	ldr	r2, [r3, #16]
 800e2c6:	490f      	ldr	r1, [pc, #60]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	4a0c      	ldr	r2, [pc, #48]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e2d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e2da:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2dc:	691a      	ldr	r2, [r3, #16]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	4a07      	ldr	r2, [pc, #28]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2e6:	f043 0302 	orr.w	r3, r3, #2
 800e2ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e2ec:	4b05      	ldr	r3, [pc, #20]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	4a04      	ldr	r2, [pc, #16]	; (800e304 <FLASH_Erase_Sector+0x8c>)
 800e2f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2f6:	6113      	str	r3, [r2, #16]
}
 800e2f8:	bf00      	nop
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	40023c00 	.word	0x40023c00

0800e308 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e308:	b480      	push	{r7}
 800e30a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800e30c:	4b20      	ldr	r3, [pc, #128]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e314:	2b00      	cmp	r3, #0
 800e316:	d017      	beq.n	800e348 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e318:	4b1d      	ldr	r3, [pc, #116]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a1c      	ldr	r2, [pc, #112]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e31e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e322:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e324:	4b1a      	ldr	r3, [pc, #104]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a19      	ldr	r2, [pc, #100]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e32a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	4b17      	ldr	r3, [pc, #92]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a16      	ldr	r2, [pc, #88]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e33a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e33c:	4b14      	ldr	r3, [pc, #80]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a13      	ldr	r2, [pc, #76]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e346:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800e348:	4b11      	ldr	r3, [pc, #68]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e350:	2b00      	cmp	r3, #0
 800e352:	d017      	beq.n	800e384 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e354:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a0d      	ldr	r2, [pc, #52]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e35a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e35e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	4b08      	ldr	r3, [pc, #32]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a07      	ldr	r2, [pc, #28]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e376:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a04      	ldr	r2, [pc, #16]	; (800e390 <FLASH_FlushCaches+0x88>)
 800e37e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e382:	6013      	str	r3, [r2, #0]
  }
}
 800e384:	bf00      	nop
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	40023c00 	.word	0x40023c00

0800e394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e394:	b480      	push	{r7}
 800e396:	b089      	sub	sp, #36	; 0x24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	61fb      	str	r3, [r7, #28]
 800e3ae:	e165      	b.n	800e67c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	f040 8154 	bne.w	800e676 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	f003 0303 	and.w	r3, r3, #3
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d005      	beq.n	800e3e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d130      	bne.n	800e448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	005b      	lsls	r3, r3, #1
 800e3f0:	2203      	movs	r2, #3
 800e3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f6:	43db      	mvns	r3, r3
 800e3f8:	69ba      	ldr	r2, [r7, #24]
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	68da      	ldr	r2, [r3, #12]
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	fa02 f303 	lsl.w	r3, r2, r3
 800e40a:	69ba      	ldr	r2, [r7, #24]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e41c:	2201      	movs	r2, #1
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	fa02 f303 	lsl.w	r3, r2, r3
 800e424:	43db      	mvns	r3, r3
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	4013      	ands	r3, r2
 800e42a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	091b      	lsrs	r3, r3, #4
 800e432:	f003 0201 	and.w	r2, r3, #1
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	fa02 f303 	lsl.w	r3, r2, r3
 800e43c:	69ba      	ldr	r2, [r7, #24]
 800e43e:	4313      	orrs	r3, r2
 800e440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	f003 0303 	and.w	r3, r3, #3
 800e450:	2b03      	cmp	r3, #3
 800e452:	d017      	beq.n	800e484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	2203      	movs	r2, #3
 800e460:	fa02 f303 	lsl.w	r3, r2, r3
 800e464:	43db      	mvns	r3, r3
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	4013      	ands	r3, r2
 800e46a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	689a      	ldr	r2, [r3, #8]
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	005b      	lsls	r3, r3, #1
 800e474:	fa02 f303 	lsl.w	r3, r2, r3
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69ba      	ldr	r2, [r7, #24]
 800e482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	f003 0303 	and.w	r3, r3, #3
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d123      	bne.n	800e4d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	08da      	lsrs	r2, r3, #3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3208      	adds	r2, #8
 800e498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	f003 0307 	and.w	r3, r3, #7
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	220f      	movs	r2, #15
 800e4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ac:	43db      	mvns	r3, r3
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	691a      	ldr	r2, [r3, #16]
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	f003 0307 	and.w	r3, r3, #7
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c4:	69ba      	ldr	r2, [r7, #24]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	08da      	lsrs	r2, r3, #3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	3208      	adds	r2, #8
 800e4d2:	69b9      	ldr	r1, [r7, #24]
 800e4d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	2203      	movs	r2, #3
 800e4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e8:	43db      	mvns	r3, r3
 800e4ea:	69ba      	ldr	r2, [r7, #24]
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	f003 0203 	and.w	r2, r3, #3
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e500:	69ba      	ldr	r2, [r7, #24]
 800e502:	4313      	orrs	r3, r2
 800e504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	69ba      	ldr	r2, [r7, #24]
 800e50a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 80ae 	beq.w	800e676 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e51a:	2300      	movs	r3, #0
 800e51c:	60fb      	str	r3, [r7, #12]
 800e51e:	4b5d      	ldr	r3, [pc, #372]	; (800e694 <HAL_GPIO_Init+0x300>)
 800e520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e522:	4a5c      	ldr	r2, [pc, #368]	; (800e694 <HAL_GPIO_Init+0x300>)
 800e524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e528:	6453      	str	r3, [r2, #68]	; 0x44
 800e52a:	4b5a      	ldr	r3, [pc, #360]	; (800e694 <HAL_GPIO_Init+0x300>)
 800e52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e536:	4a58      	ldr	r2, [pc, #352]	; (800e698 <HAL_GPIO_Init+0x304>)
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	3302      	adds	r3, #2
 800e53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	f003 0303 	and.w	r3, r3, #3
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	220f      	movs	r2, #15
 800e54e:	fa02 f303 	lsl.w	r3, r2, r3
 800e552:	43db      	mvns	r3, r3
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	4013      	ands	r3, r2
 800e558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a4f      	ldr	r2, [pc, #316]	; (800e69c <HAL_GPIO_Init+0x308>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d025      	beq.n	800e5ae <HAL_GPIO_Init+0x21a>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a4e      	ldr	r2, [pc, #312]	; (800e6a0 <HAL_GPIO_Init+0x30c>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d01f      	beq.n	800e5aa <HAL_GPIO_Init+0x216>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a4d      	ldr	r2, [pc, #308]	; (800e6a4 <HAL_GPIO_Init+0x310>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d019      	beq.n	800e5a6 <HAL_GPIO_Init+0x212>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a4c      	ldr	r2, [pc, #304]	; (800e6a8 <HAL_GPIO_Init+0x314>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d013      	beq.n	800e5a2 <HAL_GPIO_Init+0x20e>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a4b      	ldr	r2, [pc, #300]	; (800e6ac <HAL_GPIO_Init+0x318>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d00d      	beq.n	800e59e <HAL_GPIO_Init+0x20a>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a4a      	ldr	r2, [pc, #296]	; (800e6b0 <HAL_GPIO_Init+0x31c>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d007      	beq.n	800e59a <HAL_GPIO_Init+0x206>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a49      	ldr	r2, [pc, #292]	; (800e6b4 <HAL_GPIO_Init+0x320>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d101      	bne.n	800e596 <HAL_GPIO_Init+0x202>
 800e592:	2306      	movs	r3, #6
 800e594:	e00c      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e596:	2307      	movs	r3, #7
 800e598:	e00a      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e59a:	2305      	movs	r3, #5
 800e59c:	e008      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e59e:	2304      	movs	r3, #4
 800e5a0:	e006      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e004      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e002      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e000      	b.n	800e5b0 <HAL_GPIO_Init+0x21c>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	69fa      	ldr	r2, [r7, #28]
 800e5b2:	f002 0203 	and.w	r2, r2, #3
 800e5b6:	0092      	lsls	r2, r2, #2
 800e5b8:	4093      	lsls	r3, r2
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e5c0:	4935      	ldr	r1, [pc, #212]	; (800e698 <HAL_GPIO_Init+0x304>)
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	089b      	lsrs	r3, r3, #2
 800e5c6:	3302      	adds	r3, #2
 800e5c8:	69ba      	ldr	r2, [r7, #24]
 800e5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e5ce:	4b3a      	ldr	r3, [pc, #232]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	43db      	mvns	r3, r3
 800e5d8:	69ba      	ldr	r2, [r7, #24]
 800e5da:	4013      	ands	r3, r2
 800e5dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d003      	beq.n	800e5f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e5ea:	69ba      	ldr	r2, [r7, #24]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e5f2:	4a31      	ldr	r2, [pc, #196]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e5f8:	4b2f      	ldr	r3, [pc, #188]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	43db      	mvns	r3, r3
 800e602:	69ba      	ldr	r2, [r7, #24]
 800e604:	4013      	ands	r3, r2
 800e606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d003      	beq.n	800e61c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	4313      	orrs	r3, r2
 800e61a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e61c:	4a26      	ldr	r2, [pc, #152]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e622:	4b25      	ldr	r3, [pc, #148]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	43db      	mvns	r3, r3
 800e62c:	69ba      	ldr	r2, [r7, #24]
 800e62e:	4013      	ands	r3, r2
 800e630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e63e:	69ba      	ldr	r2, [r7, #24]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	4313      	orrs	r3, r2
 800e644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e646:	4a1c      	ldr	r2, [pc, #112]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e64c:	4b1a      	ldr	r3, [pc, #104]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	43db      	mvns	r3, r3
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	4013      	ands	r3, r2
 800e65a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d003      	beq.n	800e670 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e668:	69ba      	ldr	r2, [r7, #24]
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e670:	4a11      	ldr	r2, [pc, #68]	; (800e6b8 <HAL_GPIO_Init+0x324>)
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	3301      	adds	r3, #1
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	2b0f      	cmp	r3, #15
 800e680:	f67f ae96 	bls.w	800e3b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop
 800e688:	3724      	adds	r7, #36	; 0x24
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop
 800e694:	40023800 	.word	0x40023800
 800e698:	40013800 	.word	0x40013800
 800e69c:	40020000 	.word	0x40020000
 800e6a0:	40020400 	.word	0x40020400
 800e6a4:	40020800 	.word	0x40020800
 800e6a8:	40020c00 	.word	0x40020c00
 800e6ac:	40021000 	.word	0x40021000
 800e6b0:	40021400 	.word	0x40021400
 800e6b4:	40021800 	.word	0x40021800
 800e6b8:	40013c00 	.word	0x40013c00

0800e6bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	807b      	strh	r3, [r7, #2]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e6cc:	787b      	ldrb	r3, [r7, #1]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e6d2:	887a      	ldrh	r2, [r7, #2]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e6d8:	e003      	b.n	800e6e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e6da:	887b      	ldrh	r3, [r7, #2]
 800e6dc:	041a      	lsls	r2, r3, #16
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	619a      	str	r2, [r3, #24]
}
 800e6e2:	bf00      	nop
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
	...

0800e6f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e700:	2301      	movs	r3, #1
 800e702:	e0cc      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e704:	4b68      	ldr	r3, [pc, #416]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 030f 	and.w	r3, r3, #15
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d90c      	bls.n	800e72c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e712:	4b65      	ldr	r3, [pc, #404]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	b2d2      	uxtb	r2, r2
 800e718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e71a:	4b63      	ldr	r3, [pc, #396]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 030f 	and.w	r3, r3, #15
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	429a      	cmp	r2, r3
 800e726:	d001      	beq.n	800e72c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e0b8      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f003 0302 	and.w	r3, r3, #2
 800e734:	2b00      	cmp	r3, #0
 800e736:	d020      	beq.n	800e77a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0304 	and.w	r3, r3, #4
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e744:	4b59      	ldr	r3, [pc, #356]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	4a58      	ldr	r2, [pc, #352]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e74a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e74e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 0308 	and.w	r3, r3, #8
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d005      	beq.n	800e768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e75c:	4b53      	ldr	r3, [pc, #332]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	4a52      	ldr	r2, [pc, #328]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e768:	4b50      	ldr	r3, [pc, #320]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	494d      	ldr	r1, [pc, #308]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e776:	4313      	orrs	r3, r2
 800e778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d044      	beq.n	800e810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d107      	bne.n	800e79e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e78e:	4b47      	ldr	r3, [pc, #284]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e796:	2b00      	cmp	r3, #0
 800e798:	d119      	bne.n	800e7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e07f      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d003      	beq.n	800e7ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d107      	bne.n	800e7be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e7ae:	4b3f      	ldr	r3, [pc, #252]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d109      	bne.n	800e7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e06f      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7be:	4b3b      	ldr	r3, [pc, #236]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f003 0302 	and.w	r3, r3, #2
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e067      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e7ce:	4b37      	ldr	r3, [pc, #220]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f023 0203 	bic.w	r2, r3, #3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	4934      	ldr	r1, [pc, #208]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e7e0:	f7fe fb50 	bl	800ce84 <HAL_GetTick>
 800e7e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7e6:	e00a      	b.n	800e7fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7e8:	f7fe fb4c 	bl	800ce84 <HAL_GetTick>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d901      	bls.n	800e7fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e04f      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7fe:	4b2b      	ldr	r3, [pc, #172]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	f003 020c 	and.w	r2, r3, #12
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d1eb      	bne.n	800e7e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e810:	4b25      	ldr	r3, [pc, #148]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 030f 	and.w	r3, r3, #15
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d20c      	bcs.n	800e838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e81e:	4b22      	ldr	r3, [pc, #136]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	b2d2      	uxtb	r2, r2
 800e824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e826:	4b20      	ldr	r3, [pc, #128]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 030f 	and.w	r3, r3, #15
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d001      	beq.n	800e838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	e032      	b.n	800e89e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f003 0304 	and.w	r3, r3, #4
 800e840:	2b00      	cmp	r3, #0
 800e842:	d008      	beq.n	800e856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e844:	4b19      	ldr	r3, [pc, #100]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	4916      	ldr	r1, [pc, #88]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e852:	4313      	orrs	r3, r2
 800e854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 0308 	and.w	r3, r3, #8
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d009      	beq.n	800e876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e862:	4b12      	ldr	r3, [pc, #72]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	490e      	ldr	r1, [pc, #56]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e872:	4313      	orrs	r3, r2
 800e874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e876:	f000 f821 	bl	800e8bc <HAL_RCC_GetSysClockFreq>
 800e87a:	4602      	mov	r2, r0
 800e87c:	4b0b      	ldr	r3, [pc, #44]	; (800e8ac <HAL_RCC_ClockConfig+0x1bc>)
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	091b      	lsrs	r3, r3, #4
 800e882:	f003 030f 	and.w	r3, r3, #15
 800e886:	490a      	ldr	r1, [pc, #40]	; (800e8b0 <HAL_RCC_ClockConfig+0x1c0>)
 800e888:	5ccb      	ldrb	r3, [r1, r3]
 800e88a:	fa22 f303 	lsr.w	r3, r2, r3
 800e88e:	4a09      	ldr	r2, [pc, #36]	; (800e8b4 <HAL_RCC_ClockConfig+0x1c4>)
 800e890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e892:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <HAL_RCC_ClockConfig+0x1c8>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe fab0 	bl	800cdfc <HAL_InitTick>

  return HAL_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	40023c00 	.word	0x40023c00
 800e8ac:	40023800 	.word	0x40023800
 800e8b0:	08014b80 	.word	0x08014b80
 800e8b4:	2000000c 	.word	0x2000000c
 800e8b8:	20000010 	.word	0x20000010

0800e8bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8c0:	b0ae      	sub	sp, #184	; 0xb8
 800e8c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e8e2:	4bcb      	ldr	r3, [pc, #812]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	f003 030c 	and.w	r3, r3, #12
 800e8ea:	2b0c      	cmp	r3, #12
 800e8ec:	f200 8206 	bhi.w	800ecfc <HAL_RCC_GetSysClockFreq+0x440>
 800e8f0:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f6:	bf00      	nop
 800e8f8:	0800e92d 	.word	0x0800e92d
 800e8fc:	0800ecfd 	.word	0x0800ecfd
 800e900:	0800ecfd 	.word	0x0800ecfd
 800e904:	0800ecfd 	.word	0x0800ecfd
 800e908:	0800e935 	.word	0x0800e935
 800e90c:	0800ecfd 	.word	0x0800ecfd
 800e910:	0800ecfd 	.word	0x0800ecfd
 800e914:	0800ecfd 	.word	0x0800ecfd
 800e918:	0800e93d 	.word	0x0800e93d
 800e91c:	0800ecfd 	.word	0x0800ecfd
 800e920:	0800ecfd 	.word	0x0800ecfd
 800e924:	0800ecfd 	.word	0x0800ecfd
 800e928:	0800eb2d 	.word	0x0800eb2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e92c:	4bb9      	ldr	r3, [pc, #740]	; (800ec14 <HAL_RCC_GetSysClockFreq+0x358>)
 800e92e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e932:	e1e7      	b.n	800ed04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e934:	4bb8      	ldr	r3, [pc, #736]	; (800ec18 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800e93a:	e1e3      	b.n	800ed04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e93c:	4bb4      	ldr	r3, [pc, #720]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e948:	4bb1      	ldr	r3, [pc, #708]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d071      	beq.n	800ea38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e954:	4bae      	ldr	r3, [pc, #696]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	099b      	lsrs	r3, r3, #6
 800e95a:	2200      	movs	r2, #0
 800e95c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e960:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e96c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e970:	2300      	movs	r3, #0
 800e972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e97a:	4622      	mov	r2, r4
 800e97c:	462b      	mov	r3, r5
 800e97e:	f04f 0000 	mov.w	r0, #0
 800e982:	f04f 0100 	mov.w	r1, #0
 800e986:	0159      	lsls	r1, r3, #5
 800e988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e98c:	0150      	lsls	r0, r2, #5
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	4621      	mov	r1, r4
 800e994:	1a51      	subs	r1, r2, r1
 800e996:	6439      	str	r1, [r7, #64]	; 0x40
 800e998:	4629      	mov	r1, r5
 800e99a:	eb63 0301 	sbc.w	r3, r3, r1
 800e99e:	647b      	str	r3, [r7, #68]	; 0x44
 800e9a0:	f04f 0200 	mov.w	r2, #0
 800e9a4:	f04f 0300 	mov.w	r3, #0
 800e9a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	018b      	lsls	r3, r1, #6
 800e9b0:	4641      	mov	r1, r8
 800e9b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	018a      	lsls	r2, r1, #6
 800e9ba:	4641      	mov	r1, r8
 800e9bc:	1a51      	subs	r1, r2, r1
 800e9be:	63b9      	str	r1, [r7, #56]	; 0x38
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	eb63 0301 	sbc.w	r3, r3, r1
 800e9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9c8:	f04f 0200 	mov.w	r2, #0
 800e9cc:	f04f 0300 	mov.w	r3, #0
 800e9d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	00cb      	lsls	r3, r1, #3
 800e9d8:	4641      	mov	r1, r8
 800e9da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e9de:	4641      	mov	r1, r8
 800e9e0:	00ca      	lsls	r2, r1, #3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	189b      	adds	r3, r3, r2
 800e9ec:	633b      	str	r3, [r7, #48]	; 0x30
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	460a      	mov	r2, r1
 800e9f2:	eb42 0303 	adc.w	r3, r2, r3
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800e9f8:	f04f 0200 	mov.w	r2, #0
 800e9fc:	f04f 0300 	mov.w	r3, #0
 800ea00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ea04:	4629      	mov	r1, r5
 800ea06:	024b      	lsls	r3, r1, #9
 800ea08:	4621      	mov	r1, r4
 800ea0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ea0e:	4621      	mov	r1, r4
 800ea10:	024a      	lsls	r2, r1, #9
 800ea12:	4610      	mov	r0, r2
 800ea14:	4619      	mov	r1, r3
 800ea16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ea20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ea24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ea28:	f7f2 f8ee 	bl	8000c08 <__aeabi_uldivmod>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4613      	mov	r3, r2
 800ea32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea36:	e067      	b.n	800eb08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ea38:	4b75      	ldr	r3, [pc, #468]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	099b      	lsrs	r3, r3, #6
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ea48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea50:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea52:	2300      	movs	r3, #0
 800ea54:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	462b      	mov	r3, r5
 800ea5e:	f04f 0000 	mov.w	r0, #0
 800ea62:	f04f 0100 	mov.w	r1, #0
 800ea66:	0159      	lsls	r1, r3, #5
 800ea68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ea6c:	0150      	lsls	r0, r2, #5
 800ea6e:	4602      	mov	r2, r0
 800ea70:	460b      	mov	r3, r1
 800ea72:	4621      	mov	r1, r4
 800ea74:	1a51      	subs	r1, r2, r1
 800ea76:	62b9      	str	r1, [r7, #40]	; 0x28
 800ea78:	4629      	mov	r1, r5
 800ea7a:	eb63 0301 	sbc.w	r3, r3, r1
 800ea7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea80:	f04f 0200 	mov.w	r2, #0
 800ea84:	f04f 0300 	mov.w	r3, #0
 800ea88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800ea8c:	4649      	mov	r1, r9
 800ea8e:	018b      	lsls	r3, r1, #6
 800ea90:	4641      	mov	r1, r8
 800ea92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ea96:	4641      	mov	r1, r8
 800ea98:	018a      	lsls	r2, r1, #6
 800ea9a:	4641      	mov	r1, r8
 800ea9c:	ebb2 0a01 	subs.w	sl, r2, r1
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	eb63 0b01 	sbc.w	fp, r3, r1
 800eaa6:	f04f 0200 	mov.w	r2, #0
 800eaaa:	f04f 0300 	mov.w	r3, #0
 800eaae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eab2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eaba:	4692      	mov	sl, r2
 800eabc:	469b      	mov	fp, r3
 800eabe:	4623      	mov	r3, r4
 800eac0:	eb1a 0303 	adds.w	r3, sl, r3
 800eac4:	623b      	str	r3, [r7, #32]
 800eac6:	462b      	mov	r3, r5
 800eac8:	eb4b 0303 	adc.w	r3, fp, r3
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
 800eace:	f04f 0200 	mov.w	r2, #0
 800ead2:	f04f 0300 	mov.w	r3, #0
 800ead6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800eada:	4629      	mov	r1, r5
 800eadc:	028b      	lsls	r3, r1, #10
 800eade:	4621      	mov	r1, r4
 800eae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800eae4:	4621      	mov	r1, r4
 800eae6:	028a      	lsls	r2, r1, #10
 800eae8:	4610      	mov	r0, r2
 800eaea:	4619      	mov	r1, r3
 800eaec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	673b      	str	r3, [r7, #112]	; 0x70
 800eaf4:	677a      	str	r2, [r7, #116]	; 0x74
 800eaf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800eafa:	f7f2 f885 	bl	8000c08 <__aeabi_uldivmod>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4613      	mov	r3, r2
 800eb04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800eb08:	4b41      	ldr	r3, [pc, #260]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	0c1b      	lsrs	r3, r3, #16
 800eb0e:	f003 0303 	and.w	r3, r3, #3
 800eb12:	3301      	adds	r3, #1
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 800eb1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eb1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800eb2a:	e0eb      	b.n	800ed04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eb2c:	4b38      	ldr	r3, [pc, #224]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eb38:	4b35      	ldr	r3, [pc, #212]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d06b      	beq.n	800ec1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb44:	4b32      	ldr	r3, [pc, #200]	; (800ec10 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	099b      	lsrs	r3, r3, #6
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eb50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb56:	663b      	str	r3, [r7, #96]	; 0x60
 800eb58:	2300      	movs	r3, #0
 800eb5a:	667b      	str	r3, [r7, #100]	; 0x64
 800eb5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800eb60:	4622      	mov	r2, r4
 800eb62:	462b      	mov	r3, r5
 800eb64:	f04f 0000 	mov.w	r0, #0
 800eb68:	f04f 0100 	mov.w	r1, #0
 800eb6c:	0159      	lsls	r1, r3, #5
 800eb6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eb72:	0150      	lsls	r0, r2, #5
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4621      	mov	r1, r4
 800eb7a:	1a51      	subs	r1, r2, r1
 800eb7c:	61b9      	str	r1, [r7, #24]
 800eb7e:	4629      	mov	r1, r5
 800eb80:	eb63 0301 	sbc.w	r3, r3, r1
 800eb84:	61fb      	str	r3, [r7, #28]
 800eb86:	f04f 0200 	mov.w	r2, #0
 800eb8a:	f04f 0300 	mov.w	r3, #0
 800eb8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800eb92:	4659      	mov	r1, fp
 800eb94:	018b      	lsls	r3, r1, #6
 800eb96:	4651      	mov	r1, sl
 800eb98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eb9c:	4651      	mov	r1, sl
 800eb9e:	018a      	lsls	r2, r1, #6
 800eba0:	4651      	mov	r1, sl
 800eba2:	ebb2 0801 	subs.w	r8, r2, r1
 800eba6:	4659      	mov	r1, fp
 800eba8:	eb63 0901 	sbc.w	r9, r3, r1
 800ebac:	f04f 0200 	mov.w	r2, #0
 800ebb0:	f04f 0300 	mov.w	r3, #0
 800ebb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ebb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ebbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ebc0:	4690      	mov	r8, r2
 800ebc2:	4699      	mov	r9, r3
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	eb18 0303 	adds.w	r3, r8, r3
 800ebca:	613b      	str	r3, [r7, #16]
 800ebcc:	462b      	mov	r3, r5
 800ebce:	eb49 0303 	adc.w	r3, r9, r3
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	f04f 0200 	mov.w	r2, #0
 800ebd8:	f04f 0300 	mov.w	r3, #0
 800ebdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	024b      	lsls	r3, r1, #9
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ebea:	4621      	mov	r1, r4
 800ebec:	024a      	lsls	r2, r1, #9
 800ebee:	4610      	mov	r0, r2
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebfa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ebfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ec00:	f7f2 f802 	bl	8000c08 <__aeabi_uldivmod>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4613      	mov	r3, r2
 800ec0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ec0e:	e065      	b.n	800ecdc <HAL_RCC_GetSysClockFreq+0x420>
 800ec10:	40023800 	.word	0x40023800
 800ec14:	00f42400 	.word	0x00f42400
 800ec18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec1c:	4b3d      	ldr	r3, [pc, #244]	; (800ed14 <HAL_RCC_GetSysClockFreq+0x458>)
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	099b      	lsrs	r3, r3, #6
 800ec22:	2200      	movs	r2, #0
 800ec24:	4618      	mov	r0, r3
 800ec26:	4611      	mov	r1, r2
 800ec28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ec2c:	653b      	str	r3, [r7, #80]	; 0x50
 800ec2e:	2300      	movs	r3, #0
 800ec30:	657b      	str	r3, [r7, #84]	; 0x54
 800ec32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ec36:	4642      	mov	r2, r8
 800ec38:	464b      	mov	r3, r9
 800ec3a:	f04f 0000 	mov.w	r0, #0
 800ec3e:	f04f 0100 	mov.w	r1, #0
 800ec42:	0159      	lsls	r1, r3, #5
 800ec44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec48:	0150      	lsls	r0, r2, #5
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	4641      	mov	r1, r8
 800ec50:	1a51      	subs	r1, r2, r1
 800ec52:	60b9      	str	r1, [r7, #8]
 800ec54:	4649      	mov	r1, r9
 800ec56:	eb63 0301 	sbc.w	r3, r3, r1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	f04f 0200 	mov.w	r2, #0
 800ec60:	f04f 0300 	mov.w	r3, #0
 800ec64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ec68:	4659      	mov	r1, fp
 800ec6a:	018b      	lsls	r3, r1, #6
 800ec6c:	4651      	mov	r1, sl
 800ec6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ec72:	4651      	mov	r1, sl
 800ec74:	018a      	lsls	r2, r1, #6
 800ec76:	4651      	mov	r1, sl
 800ec78:	1a54      	subs	r4, r2, r1
 800ec7a:	4659      	mov	r1, fp
 800ec7c:	eb63 0501 	sbc.w	r5, r3, r1
 800ec80:	f04f 0200 	mov.w	r2, #0
 800ec84:	f04f 0300 	mov.w	r3, #0
 800ec88:	00eb      	lsls	r3, r5, #3
 800ec8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ec8e:	00e2      	lsls	r2, r4, #3
 800ec90:	4614      	mov	r4, r2
 800ec92:	461d      	mov	r5, r3
 800ec94:	4643      	mov	r3, r8
 800ec96:	18e3      	adds	r3, r4, r3
 800ec98:	603b      	str	r3, [r7, #0]
 800ec9a:	464b      	mov	r3, r9
 800ec9c:	eb45 0303 	adc.w	r3, r5, r3
 800eca0:	607b      	str	r3, [r7, #4]
 800eca2:	f04f 0200 	mov.w	r2, #0
 800eca6:	f04f 0300 	mov.w	r3, #0
 800ecaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ecae:	4629      	mov	r1, r5
 800ecb0:	028b      	lsls	r3, r1, #10
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ecb8:	4621      	mov	r1, r4
 800ecba:	028a      	lsls	r2, r1, #10
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecc8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ecca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ecce:	f7f1 ff9b 	bl	8000c08 <__aeabi_uldivmod>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ecdc:	4b0d      	ldr	r3, [pc, #52]	; (800ed14 <HAL_RCC_GetSysClockFreq+0x458>)
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	0f1b      	lsrs	r3, r3, #28
 800ece2:	f003 0307 	and.w	r3, r3, #7
 800ece6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 800ecea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ecee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ecf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ecfa:	e003      	b.n	800ed04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ecfc:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <HAL_RCC_GetSysClockFreq+0x45c>)
 800ecfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ed02:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ed04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	37b8      	adds	r7, #184	; 0xb8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed12:	bf00      	nop
 800ed14:	40023800 	.word	0x40023800
 800ed18:	00f42400 	.word	0x00f42400

0800ed1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e28d      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f003 0301 	and.w	r3, r3, #1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 8083 	beq.w	800ee42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ed3c:	4b94      	ldr	r3, [pc, #592]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	f003 030c 	and.w	r3, r3, #12
 800ed44:	2b04      	cmp	r3, #4
 800ed46:	d019      	beq.n	800ed7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ed48:	4b91      	ldr	r3, [pc, #580]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	f003 030c 	and.w	r3, r3, #12
        || \
 800ed50:	2b08      	cmp	r3, #8
 800ed52:	d106      	bne.n	800ed62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ed54:	4b8e      	ldr	r3, [pc, #568]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed60:	d00c      	beq.n	800ed7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed62:	4b8b      	ldr	r3, [pc, #556]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ed6a:	2b0c      	cmp	r3, #12
 800ed6c:	d112      	bne.n	800ed94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed6e:	4b88      	ldr	r3, [pc, #544]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed7a:	d10b      	bne.n	800ed94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed7c:	4b84      	ldr	r3, [pc, #528]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d05b      	beq.n	800ee40 <HAL_RCC_OscConfig+0x124>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d157      	bne.n	800ee40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e25a      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed9c:	d106      	bne.n	800edac <HAL_RCC_OscConfig+0x90>
 800ed9e:	4b7c      	ldr	r3, [pc, #496]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a7b      	ldr	r2, [pc, #492]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eda4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eda8:	6013      	str	r3, [r2, #0]
 800edaa:	e01d      	b.n	800ede8 <HAL_RCC_OscConfig+0xcc>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800edb4:	d10c      	bne.n	800edd0 <HAL_RCC_OscConfig+0xb4>
 800edb6:	4b76      	ldr	r3, [pc, #472]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a75      	ldr	r2, [pc, #468]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800edc0:	6013      	str	r3, [r2, #0]
 800edc2:	4b73      	ldr	r3, [pc, #460]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a72      	ldr	r2, [pc, #456]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edcc:	6013      	str	r3, [r2, #0]
 800edce:	e00b      	b.n	800ede8 <HAL_RCC_OscConfig+0xcc>
 800edd0:	4b6f      	ldr	r3, [pc, #444]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a6e      	ldr	r2, [pc, #440]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edda:	6013      	str	r3, [r2, #0]
 800eddc:	4b6c      	ldr	r3, [pc, #432]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a6b      	ldr	r2, [pc, #428]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ede2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ede6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d013      	beq.n	800ee18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edf0:	f7fe f848 	bl	800ce84 <HAL_GetTick>
 800edf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800edf6:	e008      	b.n	800ee0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800edf8:	f7fe f844 	bl	800ce84 <HAL_GetTick>
 800edfc:	4602      	mov	r2, r0
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	2b64      	cmp	r3, #100	; 0x64
 800ee04:	d901      	bls.n	800ee0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e21f      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee0a:	4b61      	ldr	r3, [pc, #388]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d0f0      	beq.n	800edf8 <HAL_RCC_OscConfig+0xdc>
 800ee16:	e014      	b.n	800ee42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee18:	f7fe f834 	bl	800ce84 <HAL_GetTick>
 800ee1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee1e:	e008      	b.n	800ee32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee20:	f7fe f830 	bl	800ce84 <HAL_GetTick>
 800ee24:	4602      	mov	r2, r0
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	2b64      	cmp	r3, #100	; 0x64
 800ee2c:	d901      	bls.n	800ee32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e20b      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee32:	4b57      	ldr	r3, [pc, #348]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1f0      	bne.n	800ee20 <HAL_RCC_OscConfig+0x104>
 800ee3e:	e000      	b.n	800ee42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f003 0302 	and.w	r3, r3, #2
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d06f      	beq.n	800ef2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ee4e:	4b50      	ldr	r3, [pc, #320]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	f003 030c 	and.w	r3, r3, #12
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d017      	beq.n	800ee8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ee5a:	4b4d      	ldr	r3, [pc, #308]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f003 030c 	and.w	r3, r3, #12
        || \
 800ee62:	2b08      	cmp	r3, #8
 800ee64:	d105      	bne.n	800ee72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ee66:	4b4a      	ldr	r3, [pc, #296]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00b      	beq.n	800ee8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee72:	4b47      	ldr	r3, [pc, #284]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ee7a:	2b0c      	cmp	r3, #12
 800ee7c:	d11c      	bne.n	800eeb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee7e:	4b44      	ldr	r3, [pc, #272]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d116      	bne.n	800eeb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee8a:	4b41      	ldr	r3, [pc, #260]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d005      	beq.n	800eea2 <HAL_RCC_OscConfig+0x186>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d001      	beq.n	800eea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e1d3      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eea2:	4b3b      	ldr	r3, [pc, #236]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	4937      	ldr	r1, [pc, #220]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eeb6:	e03a      	b.n	800ef2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d020      	beq.n	800ef02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eec0:	4b34      	ldr	r3, [pc, #208]	; (800ef94 <HAL_RCC_OscConfig+0x278>)
 800eec2:	2201      	movs	r2, #1
 800eec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eec6:	f7fd ffdd 	bl	800ce84 <HAL_GetTick>
 800eeca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eecc:	e008      	b.n	800eee0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eece:	f7fd ffd9 	bl	800ce84 <HAL_GetTick>
 800eed2:	4602      	mov	r2, r0
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d901      	bls.n	800eee0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800eedc:	2303      	movs	r3, #3
 800eede:	e1b4      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eee0:	4b2b      	ldr	r3, [pc, #172]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f003 0302 	and.w	r3, r3, #2
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d0f0      	beq.n	800eece <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eeec:	4b28      	ldr	r3, [pc, #160]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	4925      	ldr	r1, [pc, #148]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800eefc:	4313      	orrs	r3, r2
 800eefe:	600b      	str	r3, [r1, #0]
 800ef00:	e015      	b.n	800ef2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef02:	4b24      	ldr	r3, [pc, #144]	; (800ef94 <HAL_RCC_OscConfig+0x278>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef08:	f7fd ffbc 	bl	800ce84 <HAL_GetTick>
 800ef0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef0e:	e008      	b.n	800ef22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef10:	f7fd ffb8 	bl	800ce84 <HAL_GetTick>
 800ef14:	4602      	mov	r2, r0
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d901      	bls.n	800ef22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ef1e:	2303      	movs	r3, #3
 800ef20:	e193      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef22:	4b1b      	ldr	r3, [pc, #108]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f003 0302 	and.w	r3, r3, #2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1f0      	bne.n	800ef10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f003 0308 	and.w	r3, r3, #8
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d036      	beq.n	800efa8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	695b      	ldr	r3, [r3, #20]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d016      	beq.n	800ef70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef42:	4b15      	ldr	r3, [pc, #84]	; (800ef98 <HAL_RCC_OscConfig+0x27c>)
 800ef44:	2201      	movs	r2, #1
 800ef46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef48:	f7fd ff9c 	bl	800ce84 <HAL_GetTick>
 800ef4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef4e:	e008      	b.n	800ef62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef50:	f7fd ff98 	bl	800ce84 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d901      	bls.n	800ef62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e173      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef62:	4b0b      	ldr	r3, [pc, #44]	; (800ef90 <HAL_RCC_OscConfig+0x274>)
 800ef64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef66:	f003 0302 	and.w	r3, r3, #2
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0f0      	beq.n	800ef50 <HAL_RCC_OscConfig+0x234>
 800ef6e:	e01b      	b.n	800efa8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ef70:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <HAL_RCC_OscConfig+0x27c>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef76:	f7fd ff85 	bl	800ce84 <HAL_GetTick>
 800ef7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef7c:	e00e      	b.n	800ef9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef7e:	f7fd ff81 	bl	800ce84 <HAL_GetTick>
 800ef82:	4602      	mov	r2, r0
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d907      	bls.n	800ef9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	e15c      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
 800ef90:	40023800 	.word	0x40023800
 800ef94:	42470000 	.word	0x42470000
 800ef98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef9c:	4b8a      	ldr	r3, [pc, #552]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800ef9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efa0:	f003 0302 	and.w	r3, r3, #2
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1ea      	bne.n	800ef7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f003 0304 	and.w	r3, r3, #4
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 8097 	beq.w	800f0e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800efb6:	2300      	movs	r3, #0
 800efb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800efba:	4b83      	ldr	r3, [pc, #524]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800efbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10f      	bne.n	800efe6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800efc6:	2300      	movs	r3, #0
 800efc8:	60bb      	str	r3, [r7, #8]
 800efca:	4b7f      	ldr	r3, [pc, #508]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800efcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efce:	4a7e      	ldr	r2, [pc, #504]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800efd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efd4:	6413      	str	r3, [r2, #64]	; 0x40
 800efd6:	4b7c      	ldr	r3, [pc, #496]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800efd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efde:	60bb      	str	r3, [r7, #8]
 800efe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800efe2:	2301      	movs	r3, #1
 800efe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800efe6:	4b79      	ldr	r3, [pc, #484]	; (800f1cc <HAL_RCC_OscConfig+0x4b0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d118      	bne.n	800f024 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eff2:	4b76      	ldr	r3, [pc, #472]	; (800f1cc <HAL_RCC_OscConfig+0x4b0>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a75      	ldr	r2, [pc, #468]	; (800f1cc <HAL_RCC_OscConfig+0x4b0>)
 800eff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800effc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800effe:	f7fd ff41 	bl	800ce84 <HAL_GetTick>
 800f002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f004:	e008      	b.n	800f018 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f006:	f7fd ff3d 	bl	800ce84 <HAL_GetTick>
 800f00a:	4602      	mov	r2, r0
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	2b02      	cmp	r3, #2
 800f012:	d901      	bls.n	800f018 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f014:	2303      	movs	r3, #3
 800f016:	e118      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f018:	4b6c      	ldr	r3, [pc, #432]	; (800f1cc <HAL_RCC_OscConfig+0x4b0>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f020:	2b00      	cmp	r3, #0
 800f022:	d0f0      	beq.n	800f006 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d106      	bne.n	800f03a <HAL_RCC_OscConfig+0x31e>
 800f02c:	4b66      	ldr	r3, [pc, #408]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f030:	4a65      	ldr	r2, [pc, #404]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f032:	f043 0301 	orr.w	r3, r3, #1
 800f036:	6713      	str	r3, [r2, #112]	; 0x70
 800f038:	e01c      	b.n	800f074 <HAL_RCC_OscConfig+0x358>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	2b05      	cmp	r3, #5
 800f040:	d10c      	bne.n	800f05c <HAL_RCC_OscConfig+0x340>
 800f042:	4b61      	ldr	r3, [pc, #388]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f046:	4a60      	ldr	r2, [pc, #384]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f048:	f043 0304 	orr.w	r3, r3, #4
 800f04c:	6713      	str	r3, [r2, #112]	; 0x70
 800f04e:	4b5e      	ldr	r3, [pc, #376]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f052:	4a5d      	ldr	r2, [pc, #372]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f054:	f043 0301 	orr.w	r3, r3, #1
 800f058:	6713      	str	r3, [r2, #112]	; 0x70
 800f05a:	e00b      	b.n	800f074 <HAL_RCC_OscConfig+0x358>
 800f05c:	4b5a      	ldr	r3, [pc, #360]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f060:	4a59      	ldr	r2, [pc, #356]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f062:	f023 0301 	bic.w	r3, r3, #1
 800f066:	6713      	str	r3, [r2, #112]	; 0x70
 800f068:	4b57      	ldr	r3, [pc, #348]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06c:	4a56      	ldr	r2, [pc, #344]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f06e:	f023 0304 	bic.w	r3, r3, #4
 800f072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d015      	beq.n	800f0a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f07c:	f7fd ff02 	bl	800ce84 <HAL_GetTick>
 800f080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f082:	e00a      	b.n	800f09a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f084:	f7fd fefe 	bl	800ce84 <HAL_GetTick>
 800f088:	4602      	mov	r2, r0
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f092:	4293      	cmp	r3, r2
 800f094:	d901      	bls.n	800f09a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f096:	2303      	movs	r3, #3
 800f098:	e0d7      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f09a:	4b4b      	ldr	r3, [pc, #300]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0ee      	beq.n	800f084 <HAL_RCC_OscConfig+0x368>
 800f0a6:	e014      	b.n	800f0d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0a8:	f7fd feec 	bl	800ce84 <HAL_GetTick>
 800f0ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f0ae:	e00a      	b.n	800f0c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0b0:	f7fd fee8 	bl	800ce84 <HAL_GetTick>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d901      	bls.n	800f0c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	e0c1      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f0c6:	4b40      	ldr	r3, [pc, #256]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ca:	f003 0302 	and.w	r3, r3, #2
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1ee      	bne.n	800f0b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f0d2:	7dfb      	ldrb	r3, [r7, #23]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d105      	bne.n	800f0e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f0d8:	4b3b      	ldr	r3, [pc, #236]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0dc:	4a3a      	ldr	r2, [pc, #232]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f0de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	699b      	ldr	r3, [r3, #24]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 80ad 	beq.w	800f248 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f0ee:	4b36      	ldr	r3, [pc, #216]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	f003 030c 	and.w	r3, r3, #12
 800f0f6:	2b08      	cmp	r3, #8
 800f0f8:	d060      	beq.n	800f1bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d145      	bne.n	800f18e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f102:	4b33      	ldr	r3, [pc, #204]	; (800f1d0 <HAL_RCC_OscConfig+0x4b4>)
 800f104:	2200      	movs	r2, #0
 800f106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f108:	f7fd febc 	bl	800ce84 <HAL_GetTick>
 800f10c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f10e:	e008      	b.n	800f122 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f110:	f7fd feb8 	bl	800ce84 <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	d901      	bls.n	800f122 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f11e:	2303      	movs	r3, #3
 800f120:	e093      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f122:	4b29      	ldr	r3, [pc, #164]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1f0      	bne.n	800f110 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	69da      	ldr	r2, [r3, #28]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a1b      	ldr	r3, [r3, #32]
 800f136:	431a      	orrs	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13c:	019b      	lsls	r3, r3, #6
 800f13e:	431a      	orrs	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f144:	085b      	lsrs	r3, r3, #1
 800f146:	3b01      	subs	r3, #1
 800f148:	041b      	lsls	r3, r3, #16
 800f14a:	431a      	orrs	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	061b      	lsls	r3, r3, #24
 800f152:	431a      	orrs	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f158:	071b      	lsls	r3, r3, #28
 800f15a:	491b      	ldr	r1, [pc, #108]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f15c:	4313      	orrs	r3, r2
 800f15e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f160:	4b1b      	ldr	r3, [pc, #108]	; (800f1d0 <HAL_RCC_OscConfig+0x4b4>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f166:	f7fd fe8d 	bl	800ce84 <HAL_GetTick>
 800f16a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f16c:	e008      	b.n	800f180 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f16e:	f7fd fe89 	bl	800ce84 <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d901      	bls.n	800f180 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e064      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f180:	4b11      	ldr	r3, [pc, #68]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0f0      	beq.n	800f16e <HAL_RCC_OscConfig+0x452>
 800f18c:	e05c      	b.n	800f248 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f18e:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <HAL_RCC_OscConfig+0x4b4>)
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f194:	f7fd fe76 	bl	800ce84 <HAL_GetTick>
 800f198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f19a:	e008      	b.n	800f1ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f19c:	f7fd fe72 	bl	800ce84 <HAL_GetTick>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d901      	bls.n	800f1ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	e04d      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1ae:	4b06      	ldr	r3, [pc, #24]	; (800f1c8 <HAL_RCC_OscConfig+0x4ac>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f0      	bne.n	800f19c <HAL_RCC_OscConfig+0x480>
 800f1ba:	e045      	b.n	800f248 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d107      	bne.n	800f1d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e040      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
 800f1c8:	40023800 	.word	0x40023800
 800f1cc:	40007000 	.word	0x40007000
 800f1d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f1d4:	4b1f      	ldr	r3, [pc, #124]	; (800f254 <HAL_RCC_OscConfig+0x538>)
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d030      	beq.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d129      	bne.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d122      	bne.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f204:	4013      	ands	r3, r2
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f20a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d119      	bne.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21a:	085b      	lsrs	r3, r3, #1
 800f21c:	3b01      	subs	r3, #1
 800f21e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f220:	429a      	cmp	r2, r3
 800f222:	d10f      	bne.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f230:	429a      	cmp	r2, r3
 800f232:	d107      	bne.n	800f244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f23e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f240:	429a      	cmp	r2, r3
 800f242:	d001      	beq.n	800f248 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	40023800 	.word	0x40023800

0800f258 <__assert_func>:
 800f258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f25a:	4614      	mov	r4, r2
 800f25c:	461a      	mov	r2, r3
 800f25e:	4b09      	ldr	r3, [pc, #36]	; (800f284 <__assert_func+0x2c>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4605      	mov	r5, r0
 800f264:	68d8      	ldr	r0, [r3, #12]
 800f266:	b14c      	cbz	r4, 800f27c <__assert_func+0x24>
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <__assert_func+0x30>)
 800f26a:	9100      	str	r1, [sp, #0]
 800f26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f270:	4906      	ldr	r1, [pc, #24]	; (800f28c <__assert_func+0x34>)
 800f272:	462b      	mov	r3, r5
 800f274:	f000 fdd4 	bl	800fe20 <fiprintf>
 800f278:	f000 fefd 	bl	8010076 <abort>
 800f27c:	4b04      	ldr	r3, [pc, #16]	; (800f290 <__assert_func+0x38>)
 800f27e:	461c      	mov	r4, r3
 800f280:	e7f3      	b.n	800f26a <__assert_func+0x12>
 800f282:	bf00      	nop
 800f284:	20000070 	.word	0x20000070
 800f288:	08015054 	.word	0x08015054
 800f28c:	08015061 	.word	0x08015061
 800f290:	0801508f 	.word	0x0801508f

0800f294 <malloc>:
 800f294:	4b02      	ldr	r3, [pc, #8]	; (800f2a0 <malloc+0xc>)
 800f296:	4601      	mov	r1, r0
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	f000 b82b 	b.w	800f2f4 <_malloc_r>
 800f29e:	bf00      	nop
 800f2a0:	20000070 	.word	0x20000070

0800f2a4 <free>:
 800f2a4:	4b02      	ldr	r3, [pc, #8]	; (800f2b0 <free+0xc>)
 800f2a6:	4601      	mov	r1, r0
 800f2a8:	6818      	ldr	r0, [r3, #0]
 800f2aa:	f001 bd67 	b.w	8010d7c <_free_r>
 800f2ae:	bf00      	nop
 800f2b0:	20000070 	.word	0x20000070

0800f2b4 <sbrk_aligned>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	4e0e      	ldr	r6, [pc, #56]	; (800f2f0 <sbrk_aligned+0x3c>)
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	6831      	ldr	r1, [r6, #0]
 800f2bc:	4605      	mov	r5, r0
 800f2be:	b911      	cbnz	r1, 800f2c6 <sbrk_aligned+0x12>
 800f2c0:	f000 fe7c 	bl	800ffbc <_sbrk_r>
 800f2c4:	6030      	str	r0, [r6, #0]
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f000 fe77 	bl	800ffbc <_sbrk_r>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d00a      	beq.n	800f2e8 <sbrk_aligned+0x34>
 800f2d2:	1cc4      	adds	r4, r0, #3
 800f2d4:	f024 0403 	bic.w	r4, r4, #3
 800f2d8:	42a0      	cmp	r0, r4
 800f2da:	d007      	beq.n	800f2ec <sbrk_aligned+0x38>
 800f2dc:	1a21      	subs	r1, r4, r0
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f000 fe6c 	bl	800ffbc <_sbrk_r>
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	d101      	bne.n	800f2ec <sbrk_aligned+0x38>
 800f2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	bd70      	pop	{r4, r5, r6, pc}
 800f2f0:	2000091c 	.word	0x2000091c

0800f2f4 <_malloc_r>:
 800f2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f8:	1ccd      	adds	r5, r1, #3
 800f2fa:	f025 0503 	bic.w	r5, r5, #3
 800f2fe:	3508      	adds	r5, #8
 800f300:	2d0c      	cmp	r5, #12
 800f302:	bf38      	it	cc
 800f304:	250c      	movcc	r5, #12
 800f306:	2d00      	cmp	r5, #0
 800f308:	4607      	mov	r7, r0
 800f30a:	db01      	blt.n	800f310 <_malloc_r+0x1c>
 800f30c:	42a9      	cmp	r1, r5
 800f30e:	d905      	bls.n	800f31c <_malloc_r+0x28>
 800f310:	230c      	movs	r3, #12
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	2600      	movs	r6, #0
 800f316:	4630      	mov	r0, r6
 800f318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3f0 <_malloc_r+0xfc>
 800f320:	f000 f868 	bl	800f3f4 <__malloc_lock>
 800f324:	f8d8 3000 	ldr.w	r3, [r8]
 800f328:	461c      	mov	r4, r3
 800f32a:	bb5c      	cbnz	r4, 800f384 <_malloc_r+0x90>
 800f32c:	4629      	mov	r1, r5
 800f32e:	4638      	mov	r0, r7
 800f330:	f7ff ffc0 	bl	800f2b4 <sbrk_aligned>
 800f334:	1c43      	adds	r3, r0, #1
 800f336:	4604      	mov	r4, r0
 800f338:	d155      	bne.n	800f3e6 <_malloc_r+0xf2>
 800f33a:	f8d8 4000 	ldr.w	r4, [r8]
 800f33e:	4626      	mov	r6, r4
 800f340:	2e00      	cmp	r6, #0
 800f342:	d145      	bne.n	800f3d0 <_malloc_r+0xdc>
 800f344:	2c00      	cmp	r4, #0
 800f346:	d048      	beq.n	800f3da <_malloc_r+0xe6>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	4631      	mov	r1, r6
 800f34c:	4638      	mov	r0, r7
 800f34e:	eb04 0903 	add.w	r9, r4, r3
 800f352:	f000 fe33 	bl	800ffbc <_sbrk_r>
 800f356:	4581      	cmp	r9, r0
 800f358:	d13f      	bne.n	800f3da <_malloc_r+0xe6>
 800f35a:	6821      	ldr	r1, [r4, #0]
 800f35c:	1a6d      	subs	r5, r5, r1
 800f35e:	4629      	mov	r1, r5
 800f360:	4638      	mov	r0, r7
 800f362:	f7ff ffa7 	bl	800f2b4 <sbrk_aligned>
 800f366:	3001      	adds	r0, #1
 800f368:	d037      	beq.n	800f3da <_malloc_r+0xe6>
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	442b      	add	r3, r5
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	f8d8 3000 	ldr.w	r3, [r8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d038      	beq.n	800f3ea <_malloc_r+0xf6>
 800f378:	685a      	ldr	r2, [r3, #4]
 800f37a:	42a2      	cmp	r2, r4
 800f37c:	d12b      	bne.n	800f3d6 <_malloc_r+0xe2>
 800f37e:	2200      	movs	r2, #0
 800f380:	605a      	str	r2, [r3, #4]
 800f382:	e00f      	b.n	800f3a4 <_malloc_r+0xb0>
 800f384:	6822      	ldr	r2, [r4, #0]
 800f386:	1b52      	subs	r2, r2, r5
 800f388:	d41f      	bmi.n	800f3ca <_malloc_r+0xd6>
 800f38a:	2a0b      	cmp	r2, #11
 800f38c:	d917      	bls.n	800f3be <_malloc_r+0xca>
 800f38e:	1961      	adds	r1, r4, r5
 800f390:	42a3      	cmp	r3, r4
 800f392:	6025      	str	r5, [r4, #0]
 800f394:	bf18      	it	ne
 800f396:	6059      	strne	r1, [r3, #4]
 800f398:	6863      	ldr	r3, [r4, #4]
 800f39a:	bf08      	it	eq
 800f39c:	f8c8 1000 	streq.w	r1, [r8]
 800f3a0:	5162      	str	r2, [r4, r5]
 800f3a2:	604b      	str	r3, [r1, #4]
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	f104 060b 	add.w	r6, r4, #11
 800f3aa:	f000 f829 	bl	800f400 <__malloc_unlock>
 800f3ae:	f026 0607 	bic.w	r6, r6, #7
 800f3b2:	1d23      	adds	r3, r4, #4
 800f3b4:	1af2      	subs	r2, r6, r3
 800f3b6:	d0ae      	beq.n	800f316 <_malloc_r+0x22>
 800f3b8:	1b9b      	subs	r3, r3, r6
 800f3ba:	50a3      	str	r3, [r4, r2]
 800f3bc:	e7ab      	b.n	800f316 <_malloc_r+0x22>
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	6862      	ldr	r2, [r4, #4]
 800f3c2:	d1dd      	bne.n	800f380 <_malloc_r+0x8c>
 800f3c4:	f8c8 2000 	str.w	r2, [r8]
 800f3c8:	e7ec      	b.n	800f3a4 <_malloc_r+0xb0>
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	6864      	ldr	r4, [r4, #4]
 800f3ce:	e7ac      	b.n	800f32a <_malloc_r+0x36>
 800f3d0:	4634      	mov	r4, r6
 800f3d2:	6876      	ldr	r6, [r6, #4]
 800f3d4:	e7b4      	b.n	800f340 <_malloc_r+0x4c>
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	e7cc      	b.n	800f374 <_malloc_r+0x80>
 800f3da:	230c      	movs	r3, #12
 800f3dc:	603b      	str	r3, [r7, #0]
 800f3de:	4638      	mov	r0, r7
 800f3e0:	f000 f80e 	bl	800f400 <__malloc_unlock>
 800f3e4:	e797      	b.n	800f316 <_malloc_r+0x22>
 800f3e6:	6025      	str	r5, [r4, #0]
 800f3e8:	e7dc      	b.n	800f3a4 <_malloc_r+0xb0>
 800f3ea:	605b      	str	r3, [r3, #4]
 800f3ec:	deff      	udf	#255	; 0xff
 800f3ee:	bf00      	nop
 800f3f0:	20000918 	.word	0x20000918

0800f3f4 <__malloc_lock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_lock+0x8>)
 800f3f6:	f000 be2e 	b.w	8010056 <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	20000a60 	.word	0x20000a60

0800f400 <__malloc_unlock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_unlock+0x8>)
 800f402:	f000 be29 	b.w	8010058 <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	20000a60 	.word	0x20000a60

0800f40c <__cvt>:
 800f40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f410:	ec55 4b10 	vmov	r4, r5, d0
 800f414:	2d00      	cmp	r5, #0
 800f416:	460e      	mov	r6, r1
 800f418:	4619      	mov	r1, r3
 800f41a:	462b      	mov	r3, r5
 800f41c:	bfbb      	ittet	lt
 800f41e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f422:	461d      	movlt	r5, r3
 800f424:	2300      	movge	r3, #0
 800f426:	232d      	movlt	r3, #45	; 0x2d
 800f428:	700b      	strb	r3, [r1, #0]
 800f42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f42c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f430:	4691      	mov	r9, r2
 800f432:	f023 0820 	bic.w	r8, r3, #32
 800f436:	bfbc      	itt	lt
 800f438:	4622      	movlt	r2, r4
 800f43a:	4614      	movlt	r4, r2
 800f43c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f440:	d005      	beq.n	800f44e <__cvt+0x42>
 800f442:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f446:	d100      	bne.n	800f44a <__cvt+0x3e>
 800f448:	3601      	adds	r6, #1
 800f44a:	2102      	movs	r1, #2
 800f44c:	e000      	b.n	800f450 <__cvt+0x44>
 800f44e:	2103      	movs	r1, #3
 800f450:	ab03      	add	r3, sp, #12
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	ab02      	add	r3, sp, #8
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	ec45 4b10 	vmov	d0, r4, r5
 800f45c:	4653      	mov	r3, sl
 800f45e:	4632      	mov	r2, r6
 800f460:	f000 fe9a 	bl	8010198 <_dtoa_r>
 800f464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f468:	4607      	mov	r7, r0
 800f46a:	d102      	bne.n	800f472 <__cvt+0x66>
 800f46c:	f019 0f01 	tst.w	r9, #1
 800f470:	d022      	beq.n	800f4b8 <__cvt+0xac>
 800f472:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f476:	eb07 0906 	add.w	r9, r7, r6
 800f47a:	d110      	bne.n	800f49e <__cvt+0x92>
 800f47c:	783b      	ldrb	r3, [r7, #0]
 800f47e:	2b30      	cmp	r3, #48	; 0x30
 800f480:	d10a      	bne.n	800f498 <__cvt+0x8c>
 800f482:	2200      	movs	r2, #0
 800f484:	2300      	movs	r3, #0
 800f486:	4620      	mov	r0, r4
 800f488:	4629      	mov	r1, r5
 800f48a:	f7f1 fb4d 	bl	8000b28 <__aeabi_dcmpeq>
 800f48e:	b918      	cbnz	r0, 800f498 <__cvt+0x8c>
 800f490:	f1c6 0601 	rsb	r6, r6, #1
 800f494:	f8ca 6000 	str.w	r6, [sl]
 800f498:	f8da 3000 	ldr.w	r3, [sl]
 800f49c:	4499      	add	r9, r3
 800f49e:	2200      	movs	r2, #0
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	f7f1 fb3f 	bl	8000b28 <__aeabi_dcmpeq>
 800f4aa:	b108      	cbz	r0, 800f4b0 <__cvt+0xa4>
 800f4ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4b0:	2230      	movs	r2, #48	; 0x30
 800f4b2:	9b03      	ldr	r3, [sp, #12]
 800f4b4:	454b      	cmp	r3, r9
 800f4b6:	d307      	bcc.n	800f4c8 <__cvt+0xbc>
 800f4b8:	9b03      	ldr	r3, [sp, #12]
 800f4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4bc:	1bdb      	subs	r3, r3, r7
 800f4be:	4638      	mov	r0, r7
 800f4c0:	6013      	str	r3, [r2, #0]
 800f4c2:	b004      	add	sp, #16
 800f4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c8:	1c59      	adds	r1, r3, #1
 800f4ca:	9103      	str	r1, [sp, #12]
 800f4cc:	701a      	strb	r2, [r3, #0]
 800f4ce:	e7f0      	b.n	800f4b2 <__cvt+0xa6>

0800f4d0 <__exponent>:
 800f4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	bfb8      	it	lt
 800f4d8:	4249      	neglt	r1, r1
 800f4da:	f803 2b02 	strb.w	r2, [r3], #2
 800f4de:	bfb4      	ite	lt
 800f4e0:	222d      	movlt	r2, #45	; 0x2d
 800f4e2:	222b      	movge	r2, #43	; 0x2b
 800f4e4:	2909      	cmp	r1, #9
 800f4e6:	7042      	strb	r2, [r0, #1]
 800f4e8:	dd2a      	ble.n	800f540 <__exponent+0x70>
 800f4ea:	f10d 0207 	add.w	r2, sp, #7
 800f4ee:	4617      	mov	r7, r2
 800f4f0:	260a      	movs	r6, #10
 800f4f2:	4694      	mov	ip, r2
 800f4f4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f4f8:	fb06 1415 	mls	r4, r6, r5, r1
 800f4fc:	3430      	adds	r4, #48	; 0x30
 800f4fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f502:	460c      	mov	r4, r1
 800f504:	2c63      	cmp	r4, #99	; 0x63
 800f506:	f102 32ff 	add.w	r2, r2, #4294967295
 800f50a:	4629      	mov	r1, r5
 800f50c:	dcf1      	bgt.n	800f4f2 <__exponent+0x22>
 800f50e:	3130      	adds	r1, #48	; 0x30
 800f510:	f1ac 0402 	sub.w	r4, ip, #2
 800f514:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f518:	1c41      	adds	r1, r0, #1
 800f51a:	4622      	mov	r2, r4
 800f51c:	42ba      	cmp	r2, r7
 800f51e:	d30a      	bcc.n	800f536 <__exponent+0x66>
 800f520:	f10d 0209 	add.w	r2, sp, #9
 800f524:	eba2 020c 	sub.w	r2, r2, ip
 800f528:	42bc      	cmp	r4, r7
 800f52a:	bf88      	it	hi
 800f52c:	2200      	movhi	r2, #0
 800f52e:	4413      	add	r3, r2
 800f530:	1a18      	subs	r0, r3, r0
 800f532:	b003      	add	sp, #12
 800f534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f536:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f53a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f53e:	e7ed      	b.n	800f51c <__exponent+0x4c>
 800f540:	2330      	movs	r3, #48	; 0x30
 800f542:	3130      	adds	r1, #48	; 0x30
 800f544:	7083      	strb	r3, [r0, #2]
 800f546:	70c1      	strb	r1, [r0, #3]
 800f548:	1d03      	adds	r3, r0, #4
 800f54a:	e7f1      	b.n	800f530 <__exponent+0x60>

0800f54c <_printf_float>:
 800f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f550:	ed2d 8b02 	vpush	{d8}
 800f554:	b08d      	sub	sp, #52	; 0x34
 800f556:	460c      	mov	r4, r1
 800f558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f55c:	4616      	mov	r6, r2
 800f55e:	461f      	mov	r7, r3
 800f560:	4605      	mov	r5, r0
 800f562:	f000 fcf3 	bl	800ff4c <_localeconv_r>
 800f566:	f8d0 a000 	ldr.w	sl, [r0]
 800f56a:	4650      	mov	r0, sl
 800f56c:	f7f0 feb0 	bl	80002d0 <strlen>
 800f570:	2300      	movs	r3, #0
 800f572:	930a      	str	r3, [sp, #40]	; 0x28
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	9305      	str	r3, [sp, #20]
 800f578:	f8d8 3000 	ldr.w	r3, [r8]
 800f57c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f580:	3307      	adds	r3, #7
 800f582:	f023 0307 	bic.w	r3, r3, #7
 800f586:	f103 0208 	add.w	r2, r3, #8
 800f58a:	f8c8 2000 	str.w	r2, [r8]
 800f58e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f596:	9307      	str	r3, [sp, #28]
 800f598:	f8cd 8018 	str.w	r8, [sp, #24]
 800f59c:	ee08 0a10 	vmov	s16, r0
 800f5a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5a8:	4b9e      	ldr	r3, [pc, #632]	; (800f824 <_printf_float+0x2d8>)
 800f5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ae:	f7f1 faed 	bl	8000b8c <__aeabi_dcmpun>
 800f5b2:	bb88      	cbnz	r0, 800f618 <_printf_float+0xcc>
 800f5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5b8:	4b9a      	ldr	r3, [pc, #616]	; (800f824 <_printf_float+0x2d8>)
 800f5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f5be:	f7f1 fac7 	bl	8000b50 <__aeabi_dcmple>
 800f5c2:	bb48      	cbnz	r0, 800f618 <_printf_float+0xcc>
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f7f1 fab6 	bl	8000b3c <__aeabi_dcmplt>
 800f5d0:	b110      	cbz	r0, 800f5d8 <_printf_float+0x8c>
 800f5d2:	232d      	movs	r3, #45	; 0x2d
 800f5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5d8:	4a93      	ldr	r2, [pc, #588]	; (800f828 <_printf_float+0x2dc>)
 800f5da:	4b94      	ldr	r3, [pc, #592]	; (800f82c <_printf_float+0x2e0>)
 800f5dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f5e0:	bf94      	ite	ls
 800f5e2:	4690      	movls	r8, r2
 800f5e4:	4698      	movhi	r8, r3
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	9b05      	ldr	r3, [sp, #20]
 800f5ec:	f023 0304 	bic.w	r3, r3, #4
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	f04f 0900 	mov.w	r9, #0
 800f5f6:	9700      	str	r7, [sp, #0]
 800f5f8:	4633      	mov	r3, r6
 800f5fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	f000 f9da 	bl	800f9b8 <_printf_common>
 800f604:	3001      	adds	r0, #1
 800f606:	f040 8090 	bne.w	800f72a <_printf_float+0x1de>
 800f60a:	f04f 30ff 	mov.w	r0, #4294967295
 800f60e:	b00d      	add	sp, #52	; 0x34
 800f610:	ecbd 8b02 	vpop	{d8}
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f618:	4642      	mov	r2, r8
 800f61a:	464b      	mov	r3, r9
 800f61c:	4640      	mov	r0, r8
 800f61e:	4649      	mov	r1, r9
 800f620:	f7f1 fab4 	bl	8000b8c <__aeabi_dcmpun>
 800f624:	b140      	cbz	r0, 800f638 <_printf_float+0xec>
 800f626:	464b      	mov	r3, r9
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bfbc      	itt	lt
 800f62c:	232d      	movlt	r3, #45	; 0x2d
 800f62e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f632:	4a7f      	ldr	r2, [pc, #508]	; (800f830 <_printf_float+0x2e4>)
 800f634:	4b7f      	ldr	r3, [pc, #508]	; (800f834 <_printf_float+0x2e8>)
 800f636:	e7d1      	b.n	800f5dc <_printf_float+0x90>
 800f638:	6863      	ldr	r3, [r4, #4]
 800f63a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f63e:	9206      	str	r2, [sp, #24]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	d13f      	bne.n	800f6c4 <_printf_float+0x178>
 800f644:	2306      	movs	r3, #6
 800f646:	6063      	str	r3, [r4, #4]
 800f648:	9b05      	ldr	r3, [sp, #20]
 800f64a:	6861      	ldr	r1, [r4, #4]
 800f64c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f650:	2300      	movs	r3, #0
 800f652:	9303      	str	r3, [sp, #12]
 800f654:	ab0a      	add	r3, sp, #40	; 0x28
 800f656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f65a:	ab09      	add	r3, sp, #36	; 0x24
 800f65c:	ec49 8b10 	vmov	d0, r8, r9
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	6022      	str	r2, [r4, #0]
 800f664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f668:	4628      	mov	r0, r5
 800f66a:	f7ff fecf 	bl	800f40c <__cvt>
 800f66e:	9b06      	ldr	r3, [sp, #24]
 800f670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f672:	2b47      	cmp	r3, #71	; 0x47
 800f674:	4680      	mov	r8, r0
 800f676:	d108      	bne.n	800f68a <_printf_float+0x13e>
 800f678:	1cc8      	adds	r0, r1, #3
 800f67a:	db02      	blt.n	800f682 <_printf_float+0x136>
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	4299      	cmp	r1, r3
 800f680:	dd41      	ble.n	800f706 <_printf_float+0x1ba>
 800f682:	f1ab 0302 	sub.w	r3, fp, #2
 800f686:	fa5f fb83 	uxtb.w	fp, r3
 800f68a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f68e:	d820      	bhi.n	800f6d2 <_printf_float+0x186>
 800f690:	3901      	subs	r1, #1
 800f692:	465a      	mov	r2, fp
 800f694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f698:	9109      	str	r1, [sp, #36]	; 0x24
 800f69a:	f7ff ff19 	bl	800f4d0 <__exponent>
 800f69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6a0:	1813      	adds	r3, r2, r0
 800f6a2:	2a01      	cmp	r2, #1
 800f6a4:	4681      	mov	r9, r0
 800f6a6:	6123      	str	r3, [r4, #16]
 800f6a8:	dc02      	bgt.n	800f6b0 <_printf_float+0x164>
 800f6aa:	6822      	ldr	r2, [r4, #0]
 800f6ac:	07d2      	lsls	r2, r2, #31
 800f6ae:	d501      	bpl.n	800f6b4 <_printf_float+0x168>
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	6123      	str	r3, [r4, #16]
 800f6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d09c      	beq.n	800f5f6 <_printf_float+0xaa>
 800f6bc:	232d      	movs	r3, #45	; 0x2d
 800f6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6c2:	e798      	b.n	800f5f6 <_printf_float+0xaa>
 800f6c4:	9a06      	ldr	r2, [sp, #24]
 800f6c6:	2a47      	cmp	r2, #71	; 0x47
 800f6c8:	d1be      	bne.n	800f648 <_printf_float+0xfc>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1bc      	bne.n	800f648 <_printf_float+0xfc>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e7b9      	b.n	800f646 <_printf_float+0xfa>
 800f6d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f6d6:	d118      	bne.n	800f70a <_printf_float+0x1be>
 800f6d8:	2900      	cmp	r1, #0
 800f6da:	6863      	ldr	r3, [r4, #4]
 800f6dc:	dd0b      	ble.n	800f6f6 <_printf_float+0x1aa>
 800f6de:	6121      	str	r1, [r4, #16]
 800f6e0:	b913      	cbnz	r3, 800f6e8 <_printf_float+0x19c>
 800f6e2:	6822      	ldr	r2, [r4, #0]
 800f6e4:	07d0      	lsls	r0, r2, #31
 800f6e6:	d502      	bpl.n	800f6ee <_printf_float+0x1a2>
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	440b      	add	r3, r1
 800f6ec:	6123      	str	r3, [r4, #16]
 800f6ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800f6f0:	f04f 0900 	mov.w	r9, #0
 800f6f4:	e7de      	b.n	800f6b4 <_printf_float+0x168>
 800f6f6:	b913      	cbnz	r3, 800f6fe <_printf_float+0x1b2>
 800f6f8:	6822      	ldr	r2, [r4, #0]
 800f6fa:	07d2      	lsls	r2, r2, #31
 800f6fc:	d501      	bpl.n	800f702 <_printf_float+0x1b6>
 800f6fe:	3302      	adds	r3, #2
 800f700:	e7f4      	b.n	800f6ec <_printf_float+0x1a0>
 800f702:	2301      	movs	r3, #1
 800f704:	e7f2      	b.n	800f6ec <_printf_float+0x1a0>
 800f706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f70c:	4299      	cmp	r1, r3
 800f70e:	db05      	blt.n	800f71c <_printf_float+0x1d0>
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	6121      	str	r1, [r4, #16]
 800f714:	07d8      	lsls	r0, r3, #31
 800f716:	d5ea      	bpl.n	800f6ee <_printf_float+0x1a2>
 800f718:	1c4b      	adds	r3, r1, #1
 800f71a:	e7e7      	b.n	800f6ec <_printf_float+0x1a0>
 800f71c:	2900      	cmp	r1, #0
 800f71e:	bfd4      	ite	le
 800f720:	f1c1 0202 	rsble	r2, r1, #2
 800f724:	2201      	movgt	r2, #1
 800f726:	4413      	add	r3, r2
 800f728:	e7e0      	b.n	800f6ec <_printf_float+0x1a0>
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	055a      	lsls	r2, r3, #21
 800f72e:	d407      	bmi.n	800f740 <_printf_float+0x1f4>
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	4642      	mov	r2, r8
 800f734:	4631      	mov	r1, r6
 800f736:	4628      	mov	r0, r5
 800f738:	47b8      	blx	r7
 800f73a:	3001      	adds	r0, #1
 800f73c:	d12c      	bne.n	800f798 <_printf_float+0x24c>
 800f73e:	e764      	b.n	800f60a <_printf_float+0xbe>
 800f740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f744:	f240 80e0 	bls.w	800f908 <_printf_float+0x3bc>
 800f748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f74c:	2200      	movs	r2, #0
 800f74e:	2300      	movs	r3, #0
 800f750:	f7f1 f9ea 	bl	8000b28 <__aeabi_dcmpeq>
 800f754:	2800      	cmp	r0, #0
 800f756:	d034      	beq.n	800f7c2 <_printf_float+0x276>
 800f758:	4a37      	ldr	r2, [pc, #220]	; (800f838 <_printf_float+0x2ec>)
 800f75a:	2301      	movs	r3, #1
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	47b8      	blx	r7
 800f762:	3001      	adds	r0, #1
 800f764:	f43f af51 	beq.w	800f60a <_printf_float+0xbe>
 800f768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f76c:	429a      	cmp	r2, r3
 800f76e:	db02      	blt.n	800f776 <_printf_float+0x22a>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	07d8      	lsls	r0, r3, #31
 800f774:	d510      	bpl.n	800f798 <_printf_float+0x24c>
 800f776:	ee18 3a10 	vmov	r3, s16
 800f77a:	4652      	mov	r2, sl
 800f77c:	4631      	mov	r1, r6
 800f77e:	4628      	mov	r0, r5
 800f780:	47b8      	blx	r7
 800f782:	3001      	adds	r0, #1
 800f784:	f43f af41 	beq.w	800f60a <_printf_float+0xbe>
 800f788:	f04f 0800 	mov.w	r8, #0
 800f78c:	f104 091a 	add.w	r9, r4, #26
 800f790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f792:	3b01      	subs	r3, #1
 800f794:	4543      	cmp	r3, r8
 800f796:	dc09      	bgt.n	800f7ac <_printf_float+0x260>
 800f798:	6823      	ldr	r3, [r4, #0]
 800f79a:	079b      	lsls	r3, r3, #30
 800f79c:	f100 8107 	bmi.w	800f9ae <_printf_float+0x462>
 800f7a0:	68e0      	ldr	r0, [r4, #12]
 800f7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a4:	4298      	cmp	r0, r3
 800f7a6:	bfb8      	it	lt
 800f7a8:	4618      	movlt	r0, r3
 800f7aa:	e730      	b.n	800f60e <_printf_float+0xc2>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	464a      	mov	r2, r9
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	f43f af27 	beq.w	800f60a <_printf_float+0xbe>
 800f7bc:	f108 0801 	add.w	r8, r8, #1
 800f7c0:	e7e6      	b.n	800f790 <_printf_float+0x244>
 800f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dc39      	bgt.n	800f83c <_printf_float+0x2f0>
 800f7c8:	4a1b      	ldr	r2, [pc, #108]	; (800f838 <_printf_float+0x2ec>)
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	47b8      	blx	r7
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	f43f af19 	beq.w	800f60a <_printf_float+0xbe>
 800f7d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	d102      	bne.n	800f7e6 <_printf_float+0x29a>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d5d8      	bpl.n	800f798 <_printf_float+0x24c>
 800f7e6:	ee18 3a10 	vmov	r3, s16
 800f7ea:	4652      	mov	r2, sl
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	47b8      	blx	r7
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f43f af09 	beq.w	800f60a <_printf_float+0xbe>
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	f104 0a1a 	add.w	sl, r4, #26
 800f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f802:	425b      	negs	r3, r3
 800f804:	454b      	cmp	r3, r9
 800f806:	dc01      	bgt.n	800f80c <_printf_float+0x2c0>
 800f808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f80a:	e792      	b.n	800f732 <_printf_float+0x1e6>
 800f80c:	2301      	movs	r3, #1
 800f80e:	4652      	mov	r2, sl
 800f810:	4631      	mov	r1, r6
 800f812:	4628      	mov	r0, r5
 800f814:	47b8      	blx	r7
 800f816:	3001      	adds	r0, #1
 800f818:	f43f aef7 	beq.w	800f60a <_printf_float+0xbe>
 800f81c:	f109 0901 	add.w	r9, r9, #1
 800f820:	e7ee      	b.n	800f800 <_printf_float+0x2b4>
 800f822:	bf00      	nop
 800f824:	7fefffff 	.word	0x7fefffff
 800f828:	08015090 	.word	0x08015090
 800f82c:	08015094 	.word	0x08015094
 800f830:	08015098 	.word	0x08015098
 800f834:	0801509c 	.word	0x0801509c
 800f838:	080150a0 	.word	0x080150a0
 800f83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f840:	429a      	cmp	r2, r3
 800f842:	bfa8      	it	ge
 800f844:	461a      	movge	r2, r3
 800f846:	2a00      	cmp	r2, #0
 800f848:	4691      	mov	r9, r2
 800f84a:	dc37      	bgt.n	800f8bc <_printf_float+0x370>
 800f84c:	f04f 0b00 	mov.w	fp, #0
 800f850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f854:	f104 021a 	add.w	r2, r4, #26
 800f858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f85a:	9305      	str	r3, [sp, #20]
 800f85c:	eba3 0309 	sub.w	r3, r3, r9
 800f860:	455b      	cmp	r3, fp
 800f862:	dc33      	bgt.n	800f8cc <_printf_float+0x380>
 800f864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f868:	429a      	cmp	r2, r3
 800f86a:	db3b      	blt.n	800f8e4 <_printf_float+0x398>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	07da      	lsls	r2, r3, #31
 800f870:	d438      	bmi.n	800f8e4 <_printf_float+0x398>
 800f872:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f876:	eba2 0903 	sub.w	r9, r2, r3
 800f87a:	9b05      	ldr	r3, [sp, #20]
 800f87c:	1ad2      	subs	r2, r2, r3
 800f87e:	4591      	cmp	r9, r2
 800f880:	bfa8      	it	ge
 800f882:	4691      	movge	r9, r2
 800f884:	f1b9 0f00 	cmp.w	r9, #0
 800f888:	dc35      	bgt.n	800f8f6 <_printf_float+0x3aa>
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f892:	f104 0a1a 	add.w	sl, r4, #26
 800f896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f89a:	1a9b      	subs	r3, r3, r2
 800f89c:	eba3 0309 	sub.w	r3, r3, r9
 800f8a0:	4543      	cmp	r3, r8
 800f8a2:	f77f af79 	ble.w	800f798 <_printf_float+0x24c>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4652      	mov	r2, sl
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47b8      	blx	r7
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f43f aeaa 	beq.w	800f60a <_printf_float+0xbe>
 800f8b6:	f108 0801 	add.w	r8, r8, #1
 800f8ba:	e7ec      	b.n	800f896 <_printf_float+0x34a>
 800f8bc:	4613      	mov	r3, r2
 800f8be:	4631      	mov	r1, r6
 800f8c0:	4642      	mov	r2, r8
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	47b8      	blx	r7
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d1c0      	bne.n	800f84c <_printf_float+0x300>
 800f8ca:	e69e      	b.n	800f60a <_printf_float+0xbe>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	4631      	mov	r1, r6
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	9205      	str	r2, [sp, #20]
 800f8d4:	47b8      	blx	r7
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	f43f ae97 	beq.w	800f60a <_printf_float+0xbe>
 800f8dc:	9a05      	ldr	r2, [sp, #20]
 800f8de:	f10b 0b01 	add.w	fp, fp, #1
 800f8e2:	e7b9      	b.n	800f858 <_printf_float+0x30c>
 800f8e4:	ee18 3a10 	vmov	r3, s16
 800f8e8:	4652      	mov	r2, sl
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	47b8      	blx	r7
 800f8f0:	3001      	adds	r0, #1
 800f8f2:	d1be      	bne.n	800f872 <_printf_float+0x326>
 800f8f4:	e689      	b.n	800f60a <_printf_float+0xbe>
 800f8f6:	9a05      	ldr	r2, [sp, #20]
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	4442      	add	r2, r8
 800f8fc:	4631      	mov	r1, r6
 800f8fe:	4628      	mov	r0, r5
 800f900:	47b8      	blx	r7
 800f902:	3001      	adds	r0, #1
 800f904:	d1c1      	bne.n	800f88a <_printf_float+0x33e>
 800f906:	e680      	b.n	800f60a <_printf_float+0xbe>
 800f908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f90a:	2a01      	cmp	r2, #1
 800f90c:	dc01      	bgt.n	800f912 <_printf_float+0x3c6>
 800f90e:	07db      	lsls	r3, r3, #31
 800f910:	d53a      	bpl.n	800f988 <_printf_float+0x43c>
 800f912:	2301      	movs	r3, #1
 800f914:	4642      	mov	r2, r8
 800f916:	4631      	mov	r1, r6
 800f918:	4628      	mov	r0, r5
 800f91a:	47b8      	blx	r7
 800f91c:	3001      	adds	r0, #1
 800f91e:	f43f ae74 	beq.w	800f60a <_printf_float+0xbe>
 800f922:	ee18 3a10 	vmov	r3, s16
 800f926:	4652      	mov	r2, sl
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
 800f92e:	3001      	adds	r0, #1
 800f930:	f43f ae6b 	beq.w	800f60a <_printf_float+0xbe>
 800f934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f938:	2200      	movs	r2, #0
 800f93a:	2300      	movs	r3, #0
 800f93c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f940:	f7f1 f8f2 	bl	8000b28 <__aeabi_dcmpeq>
 800f944:	b9d8      	cbnz	r0, 800f97e <_printf_float+0x432>
 800f946:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f94a:	f108 0201 	add.w	r2, r8, #1
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	d10e      	bne.n	800f976 <_printf_float+0x42a>
 800f958:	e657      	b.n	800f60a <_printf_float+0xbe>
 800f95a:	2301      	movs	r3, #1
 800f95c:	4652      	mov	r2, sl
 800f95e:	4631      	mov	r1, r6
 800f960:	4628      	mov	r0, r5
 800f962:	47b8      	blx	r7
 800f964:	3001      	adds	r0, #1
 800f966:	f43f ae50 	beq.w	800f60a <_printf_float+0xbe>
 800f96a:	f108 0801 	add.w	r8, r8, #1
 800f96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f970:	3b01      	subs	r3, #1
 800f972:	4543      	cmp	r3, r8
 800f974:	dcf1      	bgt.n	800f95a <_printf_float+0x40e>
 800f976:	464b      	mov	r3, r9
 800f978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f97c:	e6da      	b.n	800f734 <_printf_float+0x1e8>
 800f97e:	f04f 0800 	mov.w	r8, #0
 800f982:	f104 0a1a 	add.w	sl, r4, #26
 800f986:	e7f2      	b.n	800f96e <_printf_float+0x422>
 800f988:	2301      	movs	r3, #1
 800f98a:	4642      	mov	r2, r8
 800f98c:	e7df      	b.n	800f94e <_printf_float+0x402>
 800f98e:	2301      	movs	r3, #1
 800f990:	464a      	mov	r2, r9
 800f992:	4631      	mov	r1, r6
 800f994:	4628      	mov	r0, r5
 800f996:	47b8      	blx	r7
 800f998:	3001      	adds	r0, #1
 800f99a:	f43f ae36 	beq.w	800f60a <_printf_float+0xbe>
 800f99e:	f108 0801 	add.w	r8, r8, #1
 800f9a2:	68e3      	ldr	r3, [r4, #12]
 800f9a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9a6:	1a5b      	subs	r3, r3, r1
 800f9a8:	4543      	cmp	r3, r8
 800f9aa:	dcf0      	bgt.n	800f98e <_printf_float+0x442>
 800f9ac:	e6f8      	b.n	800f7a0 <_printf_float+0x254>
 800f9ae:	f04f 0800 	mov.w	r8, #0
 800f9b2:	f104 0919 	add.w	r9, r4, #25
 800f9b6:	e7f4      	b.n	800f9a2 <_printf_float+0x456>

0800f9b8 <_printf_common>:
 800f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	4616      	mov	r6, r2
 800f9be:	4699      	mov	r9, r3
 800f9c0:	688a      	ldr	r2, [r1, #8]
 800f9c2:	690b      	ldr	r3, [r1, #16]
 800f9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	bfb8      	it	lt
 800f9cc:	4613      	movlt	r3, r2
 800f9ce:	6033      	str	r3, [r6, #0]
 800f9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	b10a      	cbz	r2, 800f9de <_printf_common+0x26>
 800f9da:	3301      	adds	r3, #1
 800f9dc:	6033      	str	r3, [r6, #0]
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	0699      	lsls	r1, r3, #26
 800f9e2:	bf42      	ittt	mi
 800f9e4:	6833      	ldrmi	r3, [r6, #0]
 800f9e6:	3302      	addmi	r3, #2
 800f9e8:	6033      	strmi	r3, [r6, #0]
 800f9ea:	6825      	ldr	r5, [r4, #0]
 800f9ec:	f015 0506 	ands.w	r5, r5, #6
 800f9f0:	d106      	bne.n	800fa00 <_printf_common+0x48>
 800f9f2:	f104 0a19 	add.w	sl, r4, #25
 800f9f6:	68e3      	ldr	r3, [r4, #12]
 800f9f8:	6832      	ldr	r2, [r6, #0]
 800f9fa:	1a9b      	subs	r3, r3, r2
 800f9fc:	42ab      	cmp	r3, r5
 800f9fe:	dc26      	bgt.n	800fa4e <_printf_common+0x96>
 800fa00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa04:	1e13      	subs	r3, r2, #0
 800fa06:	6822      	ldr	r2, [r4, #0]
 800fa08:	bf18      	it	ne
 800fa0a:	2301      	movne	r3, #1
 800fa0c:	0692      	lsls	r2, r2, #26
 800fa0e:	d42b      	bmi.n	800fa68 <_printf_common+0xb0>
 800fa10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa14:	4649      	mov	r1, r9
 800fa16:	4638      	mov	r0, r7
 800fa18:	47c0      	blx	r8
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d01e      	beq.n	800fa5c <_printf_common+0xa4>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	6922      	ldr	r2, [r4, #16]
 800fa22:	f003 0306 	and.w	r3, r3, #6
 800fa26:	2b04      	cmp	r3, #4
 800fa28:	bf02      	ittt	eq
 800fa2a:	68e5      	ldreq	r5, [r4, #12]
 800fa2c:	6833      	ldreq	r3, [r6, #0]
 800fa2e:	1aed      	subeq	r5, r5, r3
 800fa30:	68a3      	ldr	r3, [r4, #8]
 800fa32:	bf0c      	ite	eq
 800fa34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa38:	2500      	movne	r5, #0
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	bfc4      	itt	gt
 800fa3e:	1a9b      	subgt	r3, r3, r2
 800fa40:	18ed      	addgt	r5, r5, r3
 800fa42:	2600      	movs	r6, #0
 800fa44:	341a      	adds	r4, #26
 800fa46:	42b5      	cmp	r5, r6
 800fa48:	d11a      	bne.n	800fa80 <_printf_common+0xc8>
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	e008      	b.n	800fa60 <_printf_common+0xa8>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	4652      	mov	r2, sl
 800fa52:	4649      	mov	r1, r9
 800fa54:	4638      	mov	r0, r7
 800fa56:	47c0      	blx	r8
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d103      	bne.n	800fa64 <_printf_common+0xac>
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa64:	3501      	adds	r5, #1
 800fa66:	e7c6      	b.n	800f9f6 <_printf_common+0x3e>
 800fa68:	18e1      	adds	r1, r4, r3
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	2030      	movs	r0, #48	; 0x30
 800fa6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa72:	4422      	add	r2, r4
 800fa74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa7c:	3302      	adds	r3, #2
 800fa7e:	e7c7      	b.n	800fa10 <_printf_common+0x58>
 800fa80:	2301      	movs	r3, #1
 800fa82:	4622      	mov	r2, r4
 800fa84:	4649      	mov	r1, r9
 800fa86:	4638      	mov	r0, r7
 800fa88:	47c0      	blx	r8
 800fa8a:	3001      	adds	r0, #1
 800fa8c:	d0e6      	beq.n	800fa5c <_printf_common+0xa4>
 800fa8e:	3601      	adds	r6, #1
 800fa90:	e7d9      	b.n	800fa46 <_printf_common+0x8e>
	...

0800fa94 <_printf_i>:
 800fa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	7e0f      	ldrb	r7, [r1, #24]
 800fa9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa9c:	2f78      	cmp	r7, #120	; 0x78
 800fa9e:	4691      	mov	r9, r2
 800faa0:	4680      	mov	r8, r0
 800faa2:	460c      	mov	r4, r1
 800faa4:	469a      	mov	sl, r3
 800faa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faaa:	d807      	bhi.n	800fabc <_printf_i+0x28>
 800faac:	2f62      	cmp	r7, #98	; 0x62
 800faae:	d80a      	bhi.n	800fac6 <_printf_i+0x32>
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	f000 80d4 	beq.w	800fc5e <_printf_i+0x1ca>
 800fab6:	2f58      	cmp	r7, #88	; 0x58
 800fab8:	f000 80c0 	beq.w	800fc3c <_printf_i+0x1a8>
 800fabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fac4:	e03a      	b.n	800fb3c <_printf_i+0xa8>
 800fac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800faca:	2b15      	cmp	r3, #21
 800facc:	d8f6      	bhi.n	800fabc <_printf_i+0x28>
 800face:	a101      	add	r1, pc, #4	; (adr r1, 800fad4 <_printf_i+0x40>)
 800fad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fad4:	0800fb2d 	.word	0x0800fb2d
 800fad8:	0800fb41 	.word	0x0800fb41
 800fadc:	0800fabd 	.word	0x0800fabd
 800fae0:	0800fabd 	.word	0x0800fabd
 800fae4:	0800fabd 	.word	0x0800fabd
 800fae8:	0800fabd 	.word	0x0800fabd
 800faec:	0800fb41 	.word	0x0800fb41
 800faf0:	0800fabd 	.word	0x0800fabd
 800faf4:	0800fabd 	.word	0x0800fabd
 800faf8:	0800fabd 	.word	0x0800fabd
 800fafc:	0800fabd 	.word	0x0800fabd
 800fb00:	0800fc45 	.word	0x0800fc45
 800fb04:	0800fb6d 	.word	0x0800fb6d
 800fb08:	0800fbff 	.word	0x0800fbff
 800fb0c:	0800fabd 	.word	0x0800fabd
 800fb10:	0800fabd 	.word	0x0800fabd
 800fb14:	0800fc67 	.word	0x0800fc67
 800fb18:	0800fabd 	.word	0x0800fabd
 800fb1c:	0800fb6d 	.word	0x0800fb6d
 800fb20:	0800fabd 	.word	0x0800fabd
 800fb24:	0800fabd 	.word	0x0800fabd
 800fb28:	0800fc07 	.word	0x0800fc07
 800fb2c:	682b      	ldr	r3, [r5, #0]
 800fb2e:	1d1a      	adds	r2, r3, #4
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	602a      	str	r2, [r5, #0]
 800fb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e09f      	b.n	800fc80 <_printf_i+0x1ec>
 800fb40:	6820      	ldr	r0, [r4, #0]
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	0607      	lsls	r7, r0, #24
 800fb46:	f103 0104 	add.w	r1, r3, #4
 800fb4a:	6029      	str	r1, [r5, #0]
 800fb4c:	d501      	bpl.n	800fb52 <_printf_i+0xbe>
 800fb4e:	681e      	ldr	r6, [r3, #0]
 800fb50:	e003      	b.n	800fb5a <_printf_i+0xc6>
 800fb52:	0646      	lsls	r6, r0, #25
 800fb54:	d5fb      	bpl.n	800fb4e <_printf_i+0xba>
 800fb56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb5a:	2e00      	cmp	r6, #0
 800fb5c:	da03      	bge.n	800fb66 <_printf_i+0xd2>
 800fb5e:	232d      	movs	r3, #45	; 0x2d
 800fb60:	4276      	negs	r6, r6
 800fb62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb66:	485a      	ldr	r0, [pc, #360]	; (800fcd0 <_printf_i+0x23c>)
 800fb68:	230a      	movs	r3, #10
 800fb6a:	e012      	b.n	800fb92 <_printf_i+0xfe>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	6820      	ldr	r0, [r4, #0]
 800fb70:	1d19      	adds	r1, r3, #4
 800fb72:	6029      	str	r1, [r5, #0]
 800fb74:	0605      	lsls	r5, r0, #24
 800fb76:	d501      	bpl.n	800fb7c <_printf_i+0xe8>
 800fb78:	681e      	ldr	r6, [r3, #0]
 800fb7a:	e002      	b.n	800fb82 <_printf_i+0xee>
 800fb7c:	0641      	lsls	r1, r0, #25
 800fb7e:	d5fb      	bpl.n	800fb78 <_printf_i+0xe4>
 800fb80:	881e      	ldrh	r6, [r3, #0]
 800fb82:	4853      	ldr	r0, [pc, #332]	; (800fcd0 <_printf_i+0x23c>)
 800fb84:	2f6f      	cmp	r7, #111	; 0x6f
 800fb86:	bf0c      	ite	eq
 800fb88:	2308      	moveq	r3, #8
 800fb8a:	230a      	movne	r3, #10
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb92:	6865      	ldr	r5, [r4, #4]
 800fb94:	60a5      	str	r5, [r4, #8]
 800fb96:	2d00      	cmp	r5, #0
 800fb98:	bfa2      	ittt	ge
 800fb9a:	6821      	ldrge	r1, [r4, #0]
 800fb9c:	f021 0104 	bicge.w	r1, r1, #4
 800fba0:	6021      	strge	r1, [r4, #0]
 800fba2:	b90e      	cbnz	r6, 800fba8 <_printf_i+0x114>
 800fba4:	2d00      	cmp	r5, #0
 800fba6:	d04b      	beq.n	800fc40 <_printf_i+0x1ac>
 800fba8:	4615      	mov	r5, r2
 800fbaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbae:	fb03 6711 	mls	r7, r3, r1, r6
 800fbb2:	5dc7      	ldrb	r7, [r0, r7]
 800fbb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbb8:	4637      	mov	r7, r6
 800fbba:	42bb      	cmp	r3, r7
 800fbbc:	460e      	mov	r6, r1
 800fbbe:	d9f4      	bls.n	800fbaa <_printf_i+0x116>
 800fbc0:	2b08      	cmp	r3, #8
 800fbc2:	d10b      	bne.n	800fbdc <_printf_i+0x148>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	07de      	lsls	r6, r3, #31
 800fbc8:	d508      	bpl.n	800fbdc <_printf_i+0x148>
 800fbca:	6923      	ldr	r3, [r4, #16]
 800fbcc:	6861      	ldr	r1, [r4, #4]
 800fbce:	4299      	cmp	r1, r3
 800fbd0:	bfde      	ittt	le
 800fbd2:	2330      	movle	r3, #48	; 0x30
 800fbd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbdc:	1b52      	subs	r2, r2, r5
 800fbde:	6122      	str	r2, [r4, #16]
 800fbe0:	f8cd a000 	str.w	sl, [sp]
 800fbe4:	464b      	mov	r3, r9
 800fbe6:	aa03      	add	r2, sp, #12
 800fbe8:	4621      	mov	r1, r4
 800fbea:	4640      	mov	r0, r8
 800fbec:	f7ff fee4 	bl	800f9b8 <_printf_common>
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d14a      	bne.n	800fc8a <_printf_i+0x1f6>
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf8:	b004      	add	sp, #16
 800fbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	f043 0320 	orr.w	r3, r3, #32
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	4833      	ldr	r0, [pc, #204]	; (800fcd4 <_printf_i+0x240>)
 800fc08:	2778      	movs	r7, #120	; 0x78
 800fc0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6829      	ldr	r1, [r5, #0]
 800fc12:	061f      	lsls	r7, r3, #24
 800fc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc18:	d402      	bmi.n	800fc20 <_printf_i+0x18c>
 800fc1a:	065f      	lsls	r7, r3, #25
 800fc1c:	bf48      	it	mi
 800fc1e:	b2b6      	uxthmi	r6, r6
 800fc20:	07df      	lsls	r7, r3, #31
 800fc22:	bf48      	it	mi
 800fc24:	f043 0320 	orrmi.w	r3, r3, #32
 800fc28:	6029      	str	r1, [r5, #0]
 800fc2a:	bf48      	it	mi
 800fc2c:	6023      	strmi	r3, [r4, #0]
 800fc2e:	b91e      	cbnz	r6, 800fc38 <_printf_i+0x1a4>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	f023 0320 	bic.w	r3, r3, #32
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	2310      	movs	r3, #16
 800fc3a:	e7a7      	b.n	800fb8c <_printf_i+0xf8>
 800fc3c:	4824      	ldr	r0, [pc, #144]	; (800fcd0 <_printf_i+0x23c>)
 800fc3e:	e7e4      	b.n	800fc0a <_printf_i+0x176>
 800fc40:	4615      	mov	r5, r2
 800fc42:	e7bd      	b.n	800fbc0 <_printf_i+0x12c>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	6826      	ldr	r6, [r4, #0]
 800fc48:	6961      	ldr	r1, [r4, #20]
 800fc4a:	1d18      	adds	r0, r3, #4
 800fc4c:	6028      	str	r0, [r5, #0]
 800fc4e:	0635      	lsls	r5, r6, #24
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	d501      	bpl.n	800fc58 <_printf_i+0x1c4>
 800fc54:	6019      	str	r1, [r3, #0]
 800fc56:	e002      	b.n	800fc5e <_printf_i+0x1ca>
 800fc58:	0670      	lsls	r0, r6, #25
 800fc5a:	d5fb      	bpl.n	800fc54 <_printf_i+0x1c0>
 800fc5c:	8019      	strh	r1, [r3, #0]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	4615      	mov	r5, r2
 800fc64:	e7bc      	b.n	800fbe0 <_printf_i+0x14c>
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	1d1a      	adds	r2, r3, #4
 800fc6a:	602a      	str	r2, [r5, #0]
 800fc6c:	681d      	ldr	r5, [r3, #0]
 800fc6e:	6862      	ldr	r2, [r4, #4]
 800fc70:	2100      	movs	r1, #0
 800fc72:	4628      	mov	r0, r5
 800fc74:	f7f0 fadc 	bl	8000230 <memchr>
 800fc78:	b108      	cbz	r0, 800fc7e <_printf_i+0x1ea>
 800fc7a:	1b40      	subs	r0, r0, r5
 800fc7c:	6060      	str	r0, [r4, #4]
 800fc7e:	6863      	ldr	r3, [r4, #4]
 800fc80:	6123      	str	r3, [r4, #16]
 800fc82:	2300      	movs	r3, #0
 800fc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc88:	e7aa      	b.n	800fbe0 <_printf_i+0x14c>
 800fc8a:	6923      	ldr	r3, [r4, #16]
 800fc8c:	462a      	mov	r2, r5
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4640      	mov	r0, r8
 800fc92:	47d0      	blx	sl
 800fc94:	3001      	adds	r0, #1
 800fc96:	d0ad      	beq.n	800fbf4 <_printf_i+0x160>
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	079b      	lsls	r3, r3, #30
 800fc9c:	d413      	bmi.n	800fcc6 <_printf_i+0x232>
 800fc9e:	68e0      	ldr	r0, [r4, #12]
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	4298      	cmp	r0, r3
 800fca4:	bfb8      	it	lt
 800fca6:	4618      	movlt	r0, r3
 800fca8:	e7a6      	b.n	800fbf8 <_printf_i+0x164>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4632      	mov	r2, r6
 800fcae:	4649      	mov	r1, r9
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	47d0      	blx	sl
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	d09d      	beq.n	800fbf4 <_printf_i+0x160>
 800fcb8:	3501      	adds	r5, #1
 800fcba:	68e3      	ldr	r3, [r4, #12]
 800fcbc:	9903      	ldr	r1, [sp, #12]
 800fcbe:	1a5b      	subs	r3, r3, r1
 800fcc0:	42ab      	cmp	r3, r5
 800fcc2:	dcf2      	bgt.n	800fcaa <_printf_i+0x216>
 800fcc4:	e7eb      	b.n	800fc9e <_printf_i+0x20a>
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	f104 0619 	add.w	r6, r4, #25
 800fccc:	e7f5      	b.n	800fcba <_printf_i+0x226>
 800fcce:	bf00      	nop
 800fcd0:	080150a2 	.word	0x080150a2
 800fcd4:	080150b3 	.word	0x080150b3

0800fcd8 <std>:
 800fcd8:	2300      	movs	r3, #0
 800fcda:	b510      	push	{r4, lr}
 800fcdc:	4604      	mov	r4, r0
 800fcde:	e9c0 3300 	strd	r3, r3, [r0]
 800fce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fce6:	6083      	str	r3, [r0, #8]
 800fce8:	8181      	strh	r1, [r0, #12]
 800fcea:	6643      	str	r3, [r0, #100]	; 0x64
 800fcec:	81c2      	strh	r2, [r0, #14]
 800fcee:	6183      	str	r3, [r0, #24]
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2208      	movs	r2, #8
 800fcf4:	305c      	adds	r0, #92	; 0x5c
 800fcf6:	f000 f920 	bl	800ff3a <memset>
 800fcfa:	4b0d      	ldr	r3, [pc, #52]	; (800fd30 <std+0x58>)
 800fcfc:	6263      	str	r3, [r4, #36]	; 0x24
 800fcfe:	4b0d      	ldr	r3, [pc, #52]	; (800fd34 <std+0x5c>)
 800fd00:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd02:	4b0d      	ldr	r3, [pc, #52]	; (800fd38 <std+0x60>)
 800fd04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd06:	4b0d      	ldr	r3, [pc, #52]	; (800fd3c <std+0x64>)
 800fd08:	6323      	str	r3, [r4, #48]	; 0x30
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	; (800fd40 <std+0x68>)
 800fd0c:	6224      	str	r4, [r4, #32]
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d006      	beq.n	800fd20 <std+0x48>
 800fd12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fd16:	4294      	cmp	r4, r2
 800fd18:	d002      	beq.n	800fd20 <std+0x48>
 800fd1a:	33d0      	adds	r3, #208	; 0xd0
 800fd1c:	429c      	cmp	r4, r3
 800fd1e:	d105      	bne.n	800fd2c <std+0x54>
 800fd20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd28:	f000 b994 	b.w	8010054 <__retarget_lock_init_recursive>
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	bf00      	nop
 800fd30:	0800fe81 	.word	0x0800fe81
 800fd34:	0800fea3 	.word	0x0800fea3
 800fd38:	0800fedb 	.word	0x0800fedb
 800fd3c:	0800feff 	.word	0x0800feff
 800fd40:	20000920 	.word	0x20000920

0800fd44 <stdio_exit_handler>:
 800fd44:	4a02      	ldr	r2, [pc, #8]	; (800fd50 <stdio_exit_handler+0xc>)
 800fd46:	4903      	ldr	r1, [pc, #12]	; (800fd54 <stdio_exit_handler+0x10>)
 800fd48:	4803      	ldr	r0, [pc, #12]	; (800fd58 <stdio_exit_handler+0x14>)
 800fd4a:	f000 b87b 	b.w	800fe44 <_fwalk_sglue>
 800fd4e:	bf00      	nop
 800fd50:	20000018 	.word	0x20000018
 800fd54:	080118a1 	.word	0x080118a1
 800fd58:	20000024 	.word	0x20000024

0800fd5c <cleanup_stdio>:
 800fd5c:	6841      	ldr	r1, [r0, #4]
 800fd5e:	4b0c      	ldr	r3, [pc, #48]	; (800fd90 <cleanup_stdio+0x34>)
 800fd60:	4299      	cmp	r1, r3
 800fd62:	b510      	push	{r4, lr}
 800fd64:	4604      	mov	r4, r0
 800fd66:	d001      	beq.n	800fd6c <cleanup_stdio+0x10>
 800fd68:	f001 fd9a 	bl	80118a0 <_fflush_r>
 800fd6c:	68a1      	ldr	r1, [r4, #8]
 800fd6e:	4b09      	ldr	r3, [pc, #36]	; (800fd94 <cleanup_stdio+0x38>)
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <cleanup_stdio+0x1e>
 800fd74:	4620      	mov	r0, r4
 800fd76:	f001 fd93 	bl	80118a0 <_fflush_r>
 800fd7a:	68e1      	ldr	r1, [r4, #12]
 800fd7c:	4b06      	ldr	r3, [pc, #24]	; (800fd98 <cleanup_stdio+0x3c>)
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d004      	beq.n	800fd8c <cleanup_stdio+0x30>
 800fd82:	4620      	mov	r0, r4
 800fd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd88:	f001 bd8a 	b.w	80118a0 <_fflush_r>
 800fd8c:	bd10      	pop	{r4, pc}
 800fd8e:	bf00      	nop
 800fd90:	20000920 	.word	0x20000920
 800fd94:	20000988 	.word	0x20000988
 800fd98:	200009f0 	.word	0x200009f0

0800fd9c <global_stdio_init.part.0>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <global_stdio_init.part.0+0x30>)
 800fda0:	4c0b      	ldr	r4, [pc, #44]	; (800fdd0 <global_stdio_init.part.0+0x34>)
 800fda2:	4a0c      	ldr	r2, [pc, #48]	; (800fdd4 <global_stdio_init.part.0+0x38>)
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	4620      	mov	r0, r4
 800fda8:	2200      	movs	r2, #0
 800fdaa:	2104      	movs	r1, #4
 800fdac:	f7ff ff94 	bl	800fcd8 <std>
 800fdb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	2109      	movs	r1, #9
 800fdb8:	f7ff ff8e 	bl	800fcd8 <std>
 800fdbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc6:	2112      	movs	r1, #18
 800fdc8:	f7ff bf86 	b.w	800fcd8 <std>
 800fdcc:	20000a58 	.word	0x20000a58
 800fdd0:	20000920 	.word	0x20000920
 800fdd4:	0800fd45 	.word	0x0800fd45

0800fdd8 <__sfp_lock_acquire>:
 800fdd8:	4801      	ldr	r0, [pc, #4]	; (800fde0 <__sfp_lock_acquire+0x8>)
 800fdda:	f000 b93c 	b.w	8010056 <__retarget_lock_acquire_recursive>
 800fdde:	bf00      	nop
 800fde0:	20000a61 	.word	0x20000a61

0800fde4 <__sfp_lock_release>:
 800fde4:	4801      	ldr	r0, [pc, #4]	; (800fdec <__sfp_lock_release+0x8>)
 800fde6:	f000 b937 	b.w	8010058 <__retarget_lock_release_recursive>
 800fdea:	bf00      	nop
 800fdec:	20000a61 	.word	0x20000a61

0800fdf0 <__sinit>:
 800fdf0:	b510      	push	{r4, lr}
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	f7ff fff0 	bl	800fdd8 <__sfp_lock_acquire>
 800fdf8:	6a23      	ldr	r3, [r4, #32]
 800fdfa:	b11b      	cbz	r3, 800fe04 <__sinit+0x14>
 800fdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe00:	f7ff bff0 	b.w	800fde4 <__sfp_lock_release>
 800fe04:	4b04      	ldr	r3, [pc, #16]	; (800fe18 <__sinit+0x28>)
 800fe06:	6223      	str	r3, [r4, #32]
 800fe08:	4b04      	ldr	r3, [pc, #16]	; (800fe1c <__sinit+0x2c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1f5      	bne.n	800fdfc <__sinit+0xc>
 800fe10:	f7ff ffc4 	bl	800fd9c <global_stdio_init.part.0>
 800fe14:	e7f2      	b.n	800fdfc <__sinit+0xc>
 800fe16:	bf00      	nop
 800fe18:	0800fd5d 	.word	0x0800fd5d
 800fe1c:	20000a58 	.word	0x20000a58

0800fe20 <fiprintf>:
 800fe20:	b40e      	push	{r1, r2, r3}
 800fe22:	b503      	push	{r0, r1, lr}
 800fe24:	4601      	mov	r1, r0
 800fe26:	ab03      	add	r3, sp, #12
 800fe28:	4805      	ldr	r0, [pc, #20]	; (800fe40 <fiprintf+0x20>)
 800fe2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe2e:	6800      	ldr	r0, [r0, #0]
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	f001 fb95 	bl	8011560 <_vfiprintf_r>
 800fe36:	b002      	add	sp, #8
 800fe38:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe3c:	b003      	add	sp, #12
 800fe3e:	4770      	bx	lr
 800fe40:	20000070 	.word	0x20000070

0800fe44 <_fwalk_sglue>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4607      	mov	r7, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe54:	f1b9 0901 	subs.w	r9, r9, #1
 800fe58:	d505      	bpl.n	800fe66 <_fwalk_sglue+0x22>
 800fe5a:	6824      	ldr	r4, [r4, #0]
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d1f7      	bne.n	800fe50 <_fwalk_sglue+0xc>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d907      	bls.n	800fe7c <_fwalk_sglue+0x38>
 800fe6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe70:	3301      	adds	r3, #1
 800fe72:	d003      	beq.n	800fe7c <_fwalk_sglue+0x38>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4638      	mov	r0, r7
 800fe78:	47c0      	blx	r8
 800fe7a:	4306      	orrs	r6, r0
 800fe7c:	3568      	adds	r5, #104	; 0x68
 800fe7e:	e7e9      	b.n	800fe54 <_fwalk_sglue+0x10>

0800fe80 <__sread>:
 800fe80:	b510      	push	{r4, lr}
 800fe82:	460c      	mov	r4, r1
 800fe84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe88:	f000 f886 	bl	800ff98 <_read_r>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	bfab      	itete	ge
 800fe90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe92:	89a3      	ldrhlt	r3, [r4, #12]
 800fe94:	181b      	addge	r3, r3, r0
 800fe96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe9a:	bfac      	ite	ge
 800fe9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe9e:	81a3      	strhlt	r3, [r4, #12]
 800fea0:	bd10      	pop	{r4, pc}

0800fea2 <__swrite>:
 800fea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea6:	461f      	mov	r7, r3
 800fea8:	898b      	ldrh	r3, [r1, #12]
 800feaa:	05db      	lsls	r3, r3, #23
 800feac:	4605      	mov	r5, r0
 800feae:	460c      	mov	r4, r1
 800feb0:	4616      	mov	r6, r2
 800feb2:	d505      	bpl.n	800fec0 <__swrite+0x1e>
 800feb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb8:	2302      	movs	r3, #2
 800feba:	2200      	movs	r2, #0
 800febc:	f000 f85a 	bl	800ff74 <_lseek_r>
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800feca:	81a3      	strh	r3, [r4, #12]
 800fecc:	4632      	mov	r2, r6
 800fece:	463b      	mov	r3, r7
 800fed0:	4628      	mov	r0, r5
 800fed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fed6:	f000 b881 	b.w	800ffdc <_write_r>

0800feda <__sseek>:
 800feda:	b510      	push	{r4, lr}
 800fedc:	460c      	mov	r4, r1
 800fede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee2:	f000 f847 	bl	800ff74 <_lseek_r>
 800fee6:	1c43      	adds	r3, r0, #1
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	bf15      	itete	ne
 800feec:	6560      	strne	r0, [r4, #84]	; 0x54
 800feee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fef6:	81a3      	strheq	r3, [r4, #12]
 800fef8:	bf18      	it	ne
 800fefa:	81a3      	strhne	r3, [r4, #12]
 800fefc:	bd10      	pop	{r4, pc}

0800fefe <__sclose>:
 800fefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff02:	f000 b827 	b.w	800ff54 <_close_r>

0800ff06 <memmove>:
 800ff06:	4288      	cmp	r0, r1
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	eb01 0402 	add.w	r4, r1, r2
 800ff0e:	d902      	bls.n	800ff16 <memmove+0x10>
 800ff10:	4284      	cmp	r4, r0
 800ff12:	4623      	mov	r3, r4
 800ff14:	d807      	bhi.n	800ff26 <memmove+0x20>
 800ff16:	1e43      	subs	r3, r0, #1
 800ff18:	42a1      	cmp	r1, r4
 800ff1a:	d008      	beq.n	800ff2e <memmove+0x28>
 800ff1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff24:	e7f8      	b.n	800ff18 <memmove+0x12>
 800ff26:	4402      	add	r2, r0
 800ff28:	4601      	mov	r1, r0
 800ff2a:	428a      	cmp	r2, r1
 800ff2c:	d100      	bne.n	800ff30 <memmove+0x2a>
 800ff2e:	bd10      	pop	{r4, pc}
 800ff30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff38:	e7f7      	b.n	800ff2a <memmove+0x24>

0800ff3a <memset>:
 800ff3a:	4402      	add	r2, r0
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d100      	bne.n	800ff44 <memset+0xa>
 800ff42:	4770      	bx	lr
 800ff44:	f803 1b01 	strb.w	r1, [r3], #1
 800ff48:	e7f9      	b.n	800ff3e <memset+0x4>
	...

0800ff4c <_localeconv_r>:
 800ff4c:	4800      	ldr	r0, [pc, #0]	; (800ff50 <_localeconv_r+0x4>)
 800ff4e:	4770      	bx	lr
 800ff50:	20000164 	.word	0x20000164

0800ff54 <_close_r>:
 800ff54:	b538      	push	{r3, r4, r5, lr}
 800ff56:	4d06      	ldr	r5, [pc, #24]	; (800ff70 <_close_r+0x1c>)
 800ff58:	2300      	movs	r3, #0
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	4608      	mov	r0, r1
 800ff5e:	602b      	str	r3, [r5, #0]
 800ff60:	f7fa fb79 	bl	800a656 <_close>
 800ff64:	1c43      	adds	r3, r0, #1
 800ff66:	d102      	bne.n	800ff6e <_close_r+0x1a>
 800ff68:	682b      	ldr	r3, [r5, #0]
 800ff6a:	b103      	cbz	r3, 800ff6e <_close_r+0x1a>
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	bd38      	pop	{r3, r4, r5, pc}
 800ff70:	20000a5c 	.word	0x20000a5c

0800ff74 <_lseek_r>:
 800ff74:	b538      	push	{r3, r4, r5, lr}
 800ff76:	4d07      	ldr	r5, [pc, #28]	; (800ff94 <_lseek_r+0x20>)
 800ff78:	4604      	mov	r4, r0
 800ff7a:	4608      	mov	r0, r1
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	2200      	movs	r2, #0
 800ff80:	602a      	str	r2, [r5, #0]
 800ff82:	461a      	mov	r2, r3
 800ff84:	f7fa fb8e 	bl	800a6a4 <_lseek>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	d102      	bne.n	800ff92 <_lseek_r+0x1e>
 800ff8c:	682b      	ldr	r3, [r5, #0]
 800ff8e:	b103      	cbz	r3, 800ff92 <_lseek_r+0x1e>
 800ff90:	6023      	str	r3, [r4, #0]
 800ff92:	bd38      	pop	{r3, r4, r5, pc}
 800ff94:	20000a5c 	.word	0x20000a5c

0800ff98 <_read_r>:
 800ff98:	b538      	push	{r3, r4, r5, lr}
 800ff9a:	4d07      	ldr	r5, [pc, #28]	; (800ffb8 <_read_r+0x20>)
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	4608      	mov	r0, r1
 800ffa0:	4611      	mov	r1, r2
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	602a      	str	r2, [r5, #0]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f7fa fb1c 	bl	800a5e4 <_read>
 800ffac:	1c43      	adds	r3, r0, #1
 800ffae:	d102      	bne.n	800ffb6 <_read_r+0x1e>
 800ffb0:	682b      	ldr	r3, [r5, #0]
 800ffb2:	b103      	cbz	r3, 800ffb6 <_read_r+0x1e>
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	bd38      	pop	{r3, r4, r5, pc}
 800ffb8:	20000a5c 	.word	0x20000a5c

0800ffbc <_sbrk_r>:
 800ffbc:	b538      	push	{r3, r4, r5, lr}
 800ffbe:	4d06      	ldr	r5, [pc, #24]	; (800ffd8 <_sbrk_r+0x1c>)
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	4608      	mov	r0, r1
 800ffc6:	602b      	str	r3, [r5, #0]
 800ffc8:	f7fa fb7a 	bl	800a6c0 <_sbrk>
 800ffcc:	1c43      	adds	r3, r0, #1
 800ffce:	d102      	bne.n	800ffd6 <_sbrk_r+0x1a>
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	b103      	cbz	r3, 800ffd6 <_sbrk_r+0x1a>
 800ffd4:	6023      	str	r3, [r4, #0]
 800ffd6:	bd38      	pop	{r3, r4, r5, pc}
 800ffd8:	20000a5c 	.word	0x20000a5c

0800ffdc <_write_r>:
 800ffdc:	b538      	push	{r3, r4, r5, lr}
 800ffde:	4d07      	ldr	r5, [pc, #28]	; (800fffc <_write_r+0x20>)
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	4608      	mov	r0, r1
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	602a      	str	r2, [r5, #0]
 800ffea:	461a      	mov	r2, r3
 800ffec:	f7fa fb17 	bl	800a61e <_write>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d102      	bne.n	800fffa <_write_r+0x1e>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	b103      	cbz	r3, 800fffa <_write_r+0x1e>
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	bd38      	pop	{r3, r4, r5, pc}
 800fffc:	20000a5c 	.word	0x20000a5c

08010000 <__errno>:
 8010000:	4b01      	ldr	r3, [pc, #4]	; (8010008 <__errno+0x8>)
 8010002:	6818      	ldr	r0, [r3, #0]
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	20000070 	.word	0x20000070

0801000c <__libc_init_array>:
 801000c:	b570      	push	{r4, r5, r6, lr}
 801000e:	4d0d      	ldr	r5, [pc, #52]	; (8010044 <__libc_init_array+0x38>)
 8010010:	4c0d      	ldr	r4, [pc, #52]	; (8010048 <__libc_init_array+0x3c>)
 8010012:	1b64      	subs	r4, r4, r5
 8010014:	10a4      	asrs	r4, r4, #2
 8010016:	2600      	movs	r6, #0
 8010018:	42a6      	cmp	r6, r4
 801001a:	d109      	bne.n	8010030 <__libc_init_array+0x24>
 801001c:	4d0b      	ldr	r5, [pc, #44]	; (801004c <__libc_init_array+0x40>)
 801001e:	4c0c      	ldr	r4, [pc, #48]	; (8010050 <__libc_init_array+0x44>)
 8010020:	f001 fdfa 	bl	8011c18 <_init>
 8010024:	1b64      	subs	r4, r4, r5
 8010026:	10a4      	asrs	r4, r4, #2
 8010028:	2600      	movs	r6, #0
 801002a:	42a6      	cmp	r6, r4
 801002c:	d105      	bne.n	801003a <__libc_init_array+0x2e>
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	f855 3b04 	ldr.w	r3, [r5], #4
 8010034:	4798      	blx	r3
 8010036:	3601      	adds	r6, #1
 8010038:	e7ee      	b.n	8010018 <__libc_init_array+0xc>
 801003a:	f855 3b04 	ldr.w	r3, [r5], #4
 801003e:	4798      	blx	r3
 8010040:	3601      	adds	r6, #1
 8010042:	e7f2      	b.n	801002a <__libc_init_array+0x1e>
 8010044:	080153d0 	.word	0x080153d0
 8010048:	080153d0 	.word	0x080153d0
 801004c:	080153d0 	.word	0x080153d0
 8010050:	080153d4 	.word	0x080153d4

08010054 <__retarget_lock_init_recursive>:
 8010054:	4770      	bx	lr

08010056 <__retarget_lock_acquire_recursive>:
 8010056:	4770      	bx	lr

08010058 <__retarget_lock_release_recursive>:
 8010058:	4770      	bx	lr

0801005a <memcpy>:
 801005a:	440a      	add	r2, r1
 801005c:	4291      	cmp	r1, r2
 801005e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010062:	d100      	bne.n	8010066 <memcpy+0xc>
 8010064:	4770      	bx	lr
 8010066:	b510      	push	{r4, lr}
 8010068:	f811 4b01 	ldrb.w	r4, [r1], #1
 801006c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010070:	4291      	cmp	r1, r2
 8010072:	d1f9      	bne.n	8010068 <memcpy+0xe>
 8010074:	bd10      	pop	{r4, pc}

08010076 <abort>:
 8010076:	b508      	push	{r3, lr}
 8010078:	2006      	movs	r0, #6
 801007a:	f001 fcf7 	bl	8011a6c <raise>
 801007e:	2001      	movs	r0, #1
 8010080:	f7fa faa6 	bl	800a5d0 <_exit>

08010084 <quorem>:
 8010084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	6903      	ldr	r3, [r0, #16]
 801008a:	690c      	ldr	r4, [r1, #16]
 801008c:	42a3      	cmp	r3, r4
 801008e:	4607      	mov	r7, r0
 8010090:	db7e      	blt.n	8010190 <quorem+0x10c>
 8010092:	3c01      	subs	r4, #1
 8010094:	f101 0814 	add.w	r8, r1, #20
 8010098:	f100 0514 	add.w	r5, r0, #20
 801009c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100a0:	9301      	str	r3, [sp, #4]
 80100a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100aa:	3301      	adds	r3, #1
 80100ac:	429a      	cmp	r2, r3
 80100ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80100ba:	d331      	bcc.n	8010120 <quorem+0x9c>
 80100bc:	f04f 0e00 	mov.w	lr, #0
 80100c0:	4640      	mov	r0, r8
 80100c2:	46ac      	mov	ip, r5
 80100c4:	46f2      	mov	sl, lr
 80100c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80100ca:	b293      	uxth	r3, r2
 80100cc:	fb06 e303 	mla	r3, r6, r3, lr
 80100d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100d4:	0c1a      	lsrs	r2, r3, #16
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	ebaa 0303 	sub.w	r3, sl, r3
 80100dc:	f8dc a000 	ldr.w	sl, [ip]
 80100e0:	fa13 f38a 	uxtah	r3, r3, sl
 80100e4:	fb06 220e 	mla	r2, r6, lr, r2
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	9b00      	ldr	r3, [sp, #0]
 80100ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100f0:	b292      	uxth	r2, r2
 80100f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80100f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80100fe:	4581      	cmp	r9, r0
 8010100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010104:	f84c 3b04 	str.w	r3, [ip], #4
 8010108:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801010c:	d2db      	bcs.n	80100c6 <quorem+0x42>
 801010e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010112:	b92b      	cbnz	r3, 8010120 <quorem+0x9c>
 8010114:	9b01      	ldr	r3, [sp, #4]
 8010116:	3b04      	subs	r3, #4
 8010118:	429d      	cmp	r5, r3
 801011a:	461a      	mov	r2, r3
 801011c:	d32c      	bcc.n	8010178 <quorem+0xf4>
 801011e:	613c      	str	r4, [r7, #16]
 8010120:	4638      	mov	r0, r7
 8010122:	f001 f8f3 	bl	801130c <__mcmp>
 8010126:	2800      	cmp	r0, #0
 8010128:	db22      	blt.n	8010170 <quorem+0xec>
 801012a:	3601      	adds	r6, #1
 801012c:	4629      	mov	r1, r5
 801012e:	2000      	movs	r0, #0
 8010130:	f858 2b04 	ldr.w	r2, [r8], #4
 8010134:	f8d1 c000 	ldr.w	ip, [r1]
 8010138:	b293      	uxth	r3, r2
 801013a:	1ac3      	subs	r3, r0, r3
 801013c:	0c12      	lsrs	r2, r2, #16
 801013e:	fa13 f38c 	uxtah	r3, r3, ip
 8010142:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801014a:	b29b      	uxth	r3, r3
 801014c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010150:	45c1      	cmp	r9, r8
 8010152:	f841 3b04 	str.w	r3, [r1], #4
 8010156:	ea4f 4022 	mov.w	r0, r2, asr #16
 801015a:	d2e9      	bcs.n	8010130 <quorem+0xac>
 801015c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010164:	b922      	cbnz	r2, 8010170 <quorem+0xec>
 8010166:	3b04      	subs	r3, #4
 8010168:	429d      	cmp	r5, r3
 801016a:	461a      	mov	r2, r3
 801016c:	d30a      	bcc.n	8010184 <quorem+0x100>
 801016e:	613c      	str	r4, [r7, #16]
 8010170:	4630      	mov	r0, r6
 8010172:	b003      	add	sp, #12
 8010174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010178:	6812      	ldr	r2, [r2, #0]
 801017a:	3b04      	subs	r3, #4
 801017c:	2a00      	cmp	r2, #0
 801017e:	d1ce      	bne.n	801011e <quorem+0x9a>
 8010180:	3c01      	subs	r4, #1
 8010182:	e7c9      	b.n	8010118 <quorem+0x94>
 8010184:	6812      	ldr	r2, [r2, #0]
 8010186:	3b04      	subs	r3, #4
 8010188:	2a00      	cmp	r2, #0
 801018a:	d1f0      	bne.n	801016e <quorem+0xea>
 801018c:	3c01      	subs	r4, #1
 801018e:	e7eb      	b.n	8010168 <quorem+0xe4>
 8010190:	2000      	movs	r0, #0
 8010192:	e7ee      	b.n	8010172 <quorem+0xee>
 8010194:	0000      	movs	r0, r0
	...

08010198 <_dtoa_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	ed2d 8b04 	vpush	{d8-d9}
 80101a0:	69c5      	ldr	r5, [r0, #28]
 80101a2:	b093      	sub	sp, #76	; 0x4c
 80101a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101a8:	ec57 6b10 	vmov	r6, r7, d0
 80101ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101b0:	9107      	str	r1, [sp, #28]
 80101b2:	4604      	mov	r4, r0
 80101b4:	920a      	str	r2, [sp, #40]	; 0x28
 80101b6:	930d      	str	r3, [sp, #52]	; 0x34
 80101b8:	b975      	cbnz	r5, 80101d8 <_dtoa_r+0x40>
 80101ba:	2010      	movs	r0, #16
 80101bc:	f7ff f86a 	bl	800f294 <malloc>
 80101c0:	4602      	mov	r2, r0
 80101c2:	61e0      	str	r0, [r4, #28]
 80101c4:	b920      	cbnz	r0, 80101d0 <_dtoa_r+0x38>
 80101c6:	4bae      	ldr	r3, [pc, #696]	; (8010480 <_dtoa_r+0x2e8>)
 80101c8:	21ef      	movs	r1, #239	; 0xef
 80101ca:	48ae      	ldr	r0, [pc, #696]	; (8010484 <_dtoa_r+0x2ec>)
 80101cc:	f7ff f844 	bl	800f258 <__assert_func>
 80101d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101d4:	6005      	str	r5, [r0, #0]
 80101d6:	60c5      	str	r5, [r0, #12]
 80101d8:	69e3      	ldr	r3, [r4, #28]
 80101da:	6819      	ldr	r1, [r3, #0]
 80101dc:	b151      	cbz	r1, 80101f4 <_dtoa_r+0x5c>
 80101de:	685a      	ldr	r2, [r3, #4]
 80101e0:	604a      	str	r2, [r1, #4]
 80101e2:	2301      	movs	r3, #1
 80101e4:	4093      	lsls	r3, r2
 80101e6:	608b      	str	r3, [r1, #8]
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fe53 	bl	8010e94 <_Bfree>
 80101ee:	69e3      	ldr	r3, [r4, #28]
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	1e3b      	subs	r3, r7, #0
 80101f6:	bfbb      	ittet	lt
 80101f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80101fc:	9303      	strlt	r3, [sp, #12]
 80101fe:	2300      	movge	r3, #0
 8010200:	2201      	movlt	r2, #1
 8010202:	bfac      	ite	ge
 8010204:	f8c8 3000 	strge.w	r3, [r8]
 8010208:	f8c8 2000 	strlt.w	r2, [r8]
 801020c:	4b9e      	ldr	r3, [pc, #632]	; (8010488 <_dtoa_r+0x2f0>)
 801020e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010212:	ea33 0308 	bics.w	r3, r3, r8
 8010216:	d11b      	bne.n	8010250 <_dtoa_r+0xb8>
 8010218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801021a:	f242 730f 	movw	r3, #9999	; 0x270f
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010224:	4333      	orrs	r3, r6
 8010226:	f000 8593 	beq.w	8010d50 <_dtoa_r+0xbb8>
 801022a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801022c:	b963      	cbnz	r3, 8010248 <_dtoa_r+0xb0>
 801022e:	4b97      	ldr	r3, [pc, #604]	; (801048c <_dtoa_r+0x2f4>)
 8010230:	e027      	b.n	8010282 <_dtoa_r+0xea>
 8010232:	4b97      	ldr	r3, [pc, #604]	; (8010490 <_dtoa_r+0x2f8>)
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	9800      	ldr	r0, [sp, #0]
 801023e:	b013      	add	sp, #76	; 0x4c
 8010240:	ecbd 8b04 	vpop	{d8-d9}
 8010244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010248:	4b90      	ldr	r3, [pc, #576]	; (801048c <_dtoa_r+0x2f4>)
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	3303      	adds	r3, #3
 801024e:	e7f3      	b.n	8010238 <_dtoa_r+0xa0>
 8010250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010254:	2200      	movs	r2, #0
 8010256:	ec51 0b17 	vmov	r0, r1, d7
 801025a:	eeb0 8a47 	vmov.f32	s16, s14
 801025e:	eef0 8a67 	vmov.f32	s17, s15
 8010262:	2300      	movs	r3, #0
 8010264:	f7f0 fc60 	bl	8000b28 <__aeabi_dcmpeq>
 8010268:	4681      	mov	r9, r0
 801026a:	b160      	cbz	r0, 8010286 <_dtoa_r+0xee>
 801026c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801026e:	2301      	movs	r3, #1
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 8568 	beq.w	8010d4a <_dtoa_r+0xbb2>
 801027a:	4b86      	ldr	r3, [pc, #536]	; (8010494 <_dtoa_r+0x2fc>)
 801027c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801027e:	6013      	str	r3, [r2, #0]
 8010280:	3b01      	subs	r3, #1
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	e7da      	b.n	801023c <_dtoa_r+0xa4>
 8010286:	aa10      	add	r2, sp, #64	; 0x40
 8010288:	a911      	add	r1, sp, #68	; 0x44
 801028a:	4620      	mov	r0, r4
 801028c:	eeb0 0a48 	vmov.f32	s0, s16
 8010290:	eef0 0a68 	vmov.f32	s1, s17
 8010294:	f001 f8e0 	bl	8011458 <__d2b>
 8010298:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801029c:	4682      	mov	sl, r0
 801029e:	2d00      	cmp	r5, #0
 80102a0:	d07f      	beq.n	80103a2 <_dtoa_r+0x20a>
 80102a2:	ee18 3a90 	vmov	r3, s17
 80102a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80102ae:	ec51 0b18 	vmov	r0, r1, d8
 80102b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80102b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80102be:	4619      	mov	r1, r3
 80102c0:	2200      	movs	r2, #0
 80102c2:	4b75      	ldr	r3, [pc, #468]	; (8010498 <_dtoa_r+0x300>)
 80102c4:	f7f0 f810 	bl	80002e8 <__aeabi_dsub>
 80102c8:	a367      	add	r3, pc, #412	; (adr r3, 8010468 <_dtoa_r+0x2d0>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	f7f0 f9c3 	bl	8000658 <__aeabi_dmul>
 80102d2:	a367      	add	r3, pc, #412	; (adr r3, 8010470 <_dtoa_r+0x2d8>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	f7f0 f808 	bl	80002ec <__adddf3>
 80102dc:	4606      	mov	r6, r0
 80102de:	4628      	mov	r0, r5
 80102e0:	460f      	mov	r7, r1
 80102e2:	f7f0 f94f 	bl	8000584 <__aeabi_i2d>
 80102e6:	a364      	add	r3, pc, #400	; (adr r3, 8010478 <_dtoa_r+0x2e0>)
 80102e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ec:	f7f0 f9b4 	bl	8000658 <__aeabi_dmul>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4630      	mov	r0, r6
 80102f6:	4639      	mov	r1, r7
 80102f8:	f7ef fff8 	bl	80002ec <__adddf3>
 80102fc:	4606      	mov	r6, r0
 80102fe:	460f      	mov	r7, r1
 8010300:	f7f0 fc5a 	bl	8000bb8 <__aeabi_d2iz>
 8010304:	2200      	movs	r2, #0
 8010306:	4683      	mov	fp, r0
 8010308:	2300      	movs	r3, #0
 801030a:	4630      	mov	r0, r6
 801030c:	4639      	mov	r1, r7
 801030e:	f7f0 fc15 	bl	8000b3c <__aeabi_dcmplt>
 8010312:	b148      	cbz	r0, 8010328 <_dtoa_r+0x190>
 8010314:	4658      	mov	r0, fp
 8010316:	f7f0 f935 	bl	8000584 <__aeabi_i2d>
 801031a:	4632      	mov	r2, r6
 801031c:	463b      	mov	r3, r7
 801031e:	f7f0 fc03 	bl	8000b28 <__aeabi_dcmpeq>
 8010322:	b908      	cbnz	r0, 8010328 <_dtoa_r+0x190>
 8010324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010328:	f1bb 0f16 	cmp.w	fp, #22
 801032c:	d857      	bhi.n	80103de <_dtoa_r+0x246>
 801032e:	4b5b      	ldr	r3, [pc, #364]	; (801049c <_dtoa_r+0x304>)
 8010330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010338:	ec51 0b18 	vmov	r0, r1, d8
 801033c:	f7f0 fbfe 	bl	8000b3c <__aeabi_dcmplt>
 8010340:	2800      	cmp	r0, #0
 8010342:	d04e      	beq.n	80103e2 <_dtoa_r+0x24a>
 8010344:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010348:	2300      	movs	r3, #0
 801034a:	930c      	str	r3, [sp, #48]	; 0x30
 801034c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801034e:	1b5b      	subs	r3, r3, r5
 8010350:	1e5a      	subs	r2, r3, #1
 8010352:	bf45      	ittet	mi
 8010354:	f1c3 0301 	rsbmi	r3, r3, #1
 8010358:	9305      	strmi	r3, [sp, #20]
 801035a:	2300      	movpl	r3, #0
 801035c:	2300      	movmi	r3, #0
 801035e:	9206      	str	r2, [sp, #24]
 8010360:	bf54      	ite	pl
 8010362:	9305      	strpl	r3, [sp, #20]
 8010364:	9306      	strmi	r3, [sp, #24]
 8010366:	f1bb 0f00 	cmp.w	fp, #0
 801036a:	db3c      	blt.n	80103e6 <_dtoa_r+0x24e>
 801036c:	9b06      	ldr	r3, [sp, #24]
 801036e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010372:	445b      	add	r3, fp
 8010374:	9306      	str	r3, [sp, #24]
 8010376:	2300      	movs	r3, #0
 8010378:	9308      	str	r3, [sp, #32]
 801037a:	9b07      	ldr	r3, [sp, #28]
 801037c:	2b09      	cmp	r3, #9
 801037e:	d868      	bhi.n	8010452 <_dtoa_r+0x2ba>
 8010380:	2b05      	cmp	r3, #5
 8010382:	bfc4      	itt	gt
 8010384:	3b04      	subgt	r3, #4
 8010386:	9307      	strgt	r3, [sp, #28]
 8010388:	9b07      	ldr	r3, [sp, #28]
 801038a:	f1a3 0302 	sub.w	r3, r3, #2
 801038e:	bfcc      	ite	gt
 8010390:	2500      	movgt	r5, #0
 8010392:	2501      	movle	r5, #1
 8010394:	2b03      	cmp	r3, #3
 8010396:	f200 8085 	bhi.w	80104a4 <_dtoa_r+0x30c>
 801039a:	e8df f003 	tbb	[pc, r3]
 801039e:	3b2e      	.short	0x3b2e
 80103a0:	5839      	.short	0x5839
 80103a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80103a6:	441d      	add	r5, r3
 80103a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80103ac:	2b20      	cmp	r3, #32
 80103ae:	bfc1      	itttt	gt
 80103b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80103b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80103b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80103bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80103c0:	bfd6      	itet	le
 80103c2:	f1c3 0320 	rsble	r3, r3, #32
 80103c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80103ca:	fa06 f003 	lslle.w	r0, r6, r3
 80103ce:	f7f0 f8c9 	bl	8000564 <__aeabi_ui2d>
 80103d2:	2201      	movs	r2, #1
 80103d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80103d8:	3d01      	subs	r5, #1
 80103da:	920e      	str	r2, [sp, #56]	; 0x38
 80103dc:	e76f      	b.n	80102be <_dtoa_r+0x126>
 80103de:	2301      	movs	r3, #1
 80103e0:	e7b3      	b.n	801034a <_dtoa_r+0x1b2>
 80103e2:	900c      	str	r0, [sp, #48]	; 0x30
 80103e4:	e7b2      	b.n	801034c <_dtoa_r+0x1b4>
 80103e6:	9b05      	ldr	r3, [sp, #20]
 80103e8:	eba3 030b 	sub.w	r3, r3, fp
 80103ec:	9305      	str	r3, [sp, #20]
 80103ee:	f1cb 0300 	rsb	r3, fp, #0
 80103f2:	9308      	str	r3, [sp, #32]
 80103f4:	2300      	movs	r3, #0
 80103f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80103f8:	e7bf      	b.n	801037a <_dtoa_r+0x1e2>
 80103fa:	2300      	movs	r3, #0
 80103fc:	9309      	str	r3, [sp, #36]	; 0x24
 80103fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010400:	2b00      	cmp	r3, #0
 8010402:	dc52      	bgt.n	80104aa <_dtoa_r+0x312>
 8010404:	2301      	movs	r3, #1
 8010406:	9301      	str	r3, [sp, #4]
 8010408:	9304      	str	r3, [sp, #16]
 801040a:	461a      	mov	r2, r3
 801040c:	920a      	str	r2, [sp, #40]	; 0x28
 801040e:	e00b      	b.n	8010428 <_dtoa_r+0x290>
 8010410:	2301      	movs	r3, #1
 8010412:	e7f3      	b.n	80103fc <_dtoa_r+0x264>
 8010414:	2300      	movs	r3, #0
 8010416:	9309      	str	r3, [sp, #36]	; 0x24
 8010418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801041a:	445b      	add	r3, fp
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	3301      	adds	r3, #1
 8010420:	2b01      	cmp	r3, #1
 8010422:	9304      	str	r3, [sp, #16]
 8010424:	bfb8      	it	lt
 8010426:	2301      	movlt	r3, #1
 8010428:	69e0      	ldr	r0, [r4, #28]
 801042a:	2100      	movs	r1, #0
 801042c:	2204      	movs	r2, #4
 801042e:	f102 0614 	add.w	r6, r2, #20
 8010432:	429e      	cmp	r6, r3
 8010434:	d93d      	bls.n	80104b2 <_dtoa_r+0x31a>
 8010436:	6041      	str	r1, [r0, #4]
 8010438:	4620      	mov	r0, r4
 801043a:	f000 fceb 	bl	8010e14 <_Balloc>
 801043e:	9000      	str	r0, [sp, #0]
 8010440:	2800      	cmp	r0, #0
 8010442:	d139      	bne.n	80104b8 <_dtoa_r+0x320>
 8010444:	4b16      	ldr	r3, [pc, #88]	; (80104a0 <_dtoa_r+0x308>)
 8010446:	4602      	mov	r2, r0
 8010448:	f240 11af 	movw	r1, #431	; 0x1af
 801044c:	e6bd      	b.n	80101ca <_dtoa_r+0x32>
 801044e:	2301      	movs	r3, #1
 8010450:	e7e1      	b.n	8010416 <_dtoa_r+0x27e>
 8010452:	2501      	movs	r5, #1
 8010454:	2300      	movs	r3, #0
 8010456:	9307      	str	r3, [sp, #28]
 8010458:	9509      	str	r5, [sp, #36]	; 0x24
 801045a:	f04f 33ff 	mov.w	r3, #4294967295
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	9304      	str	r3, [sp, #16]
 8010462:	2200      	movs	r2, #0
 8010464:	2312      	movs	r3, #18
 8010466:	e7d1      	b.n	801040c <_dtoa_r+0x274>
 8010468:	636f4361 	.word	0x636f4361
 801046c:	3fd287a7 	.word	0x3fd287a7
 8010470:	8b60c8b3 	.word	0x8b60c8b3
 8010474:	3fc68a28 	.word	0x3fc68a28
 8010478:	509f79fb 	.word	0x509f79fb
 801047c:	3fd34413 	.word	0x3fd34413
 8010480:	080150d1 	.word	0x080150d1
 8010484:	080150e8 	.word	0x080150e8
 8010488:	7ff00000 	.word	0x7ff00000
 801048c:	080150cd 	.word	0x080150cd
 8010490:	080150c4 	.word	0x080150c4
 8010494:	080150a1 	.word	0x080150a1
 8010498:	3ff80000 	.word	0x3ff80000
 801049c:	080151d8 	.word	0x080151d8
 80104a0:	08015140 	.word	0x08015140
 80104a4:	2301      	movs	r3, #1
 80104a6:	9309      	str	r3, [sp, #36]	; 0x24
 80104a8:	e7d7      	b.n	801045a <_dtoa_r+0x2c2>
 80104aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	9304      	str	r3, [sp, #16]
 80104b0:	e7ba      	b.n	8010428 <_dtoa_r+0x290>
 80104b2:	3101      	adds	r1, #1
 80104b4:	0052      	lsls	r2, r2, #1
 80104b6:	e7ba      	b.n	801042e <_dtoa_r+0x296>
 80104b8:	69e3      	ldr	r3, [r4, #28]
 80104ba:	9a00      	ldr	r2, [sp, #0]
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	9b04      	ldr	r3, [sp, #16]
 80104c0:	2b0e      	cmp	r3, #14
 80104c2:	f200 80a8 	bhi.w	8010616 <_dtoa_r+0x47e>
 80104c6:	2d00      	cmp	r5, #0
 80104c8:	f000 80a5 	beq.w	8010616 <_dtoa_r+0x47e>
 80104cc:	f1bb 0f00 	cmp.w	fp, #0
 80104d0:	dd38      	ble.n	8010544 <_dtoa_r+0x3ac>
 80104d2:	4bc0      	ldr	r3, [pc, #768]	; (80107d4 <_dtoa_r+0x63c>)
 80104d4:	f00b 020f 	and.w	r2, fp, #15
 80104d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80104e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80104e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80104e8:	d019      	beq.n	801051e <_dtoa_r+0x386>
 80104ea:	4bbb      	ldr	r3, [pc, #748]	; (80107d8 <_dtoa_r+0x640>)
 80104ec:	ec51 0b18 	vmov	r0, r1, d8
 80104f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104f4:	f7f0 f9da 	bl	80008ac <__aeabi_ddiv>
 80104f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104fc:	f008 080f 	and.w	r8, r8, #15
 8010500:	2503      	movs	r5, #3
 8010502:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80107d8 <_dtoa_r+0x640>
 8010506:	f1b8 0f00 	cmp.w	r8, #0
 801050a:	d10a      	bne.n	8010522 <_dtoa_r+0x38a>
 801050c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010510:	4632      	mov	r2, r6
 8010512:	463b      	mov	r3, r7
 8010514:	f7f0 f9ca 	bl	80008ac <__aeabi_ddiv>
 8010518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801051c:	e02b      	b.n	8010576 <_dtoa_r+0x3de>
 801051e:	2502      	movs	r5, #2
 8010520:	e7ef      	b.n	8010502 <_dtoa_r+0x36a>
 8010522:	f018 0f01 	tst.w	r8, #1
 8010526:	d008      	beq.n	801053a <_dtoa_r+0x3a2>
 8010528:	4630      	mov	r0, r6
 801052a:	4639      	mov	r1, r7
 801052c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010530:	f7f0 f892 	bl	8000658 <__aeabi_dmul>
 8010534:	3501      	adds	r5, #1
 8010536:	4606      	mov	r6, r0
 8010538:	460f      	mov	r7, r1
 801053a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801053e:	f109 0908 	add.w	r9, r9, #8
 8010542:	e7e0      	b.n	8010506 <_dtoa_r+0x36e>
 8010544:	f000 809f 	beq.w	8010686 <_dtoa_r+0x4ee>
 8010548:	f1cb 0600 	rsb	r6, fp, #0
 801054c:	4ba1      	ldr	r3, [pc, #644]	; (80107d4 <_dtoa_r+0x63c>)
 801054e:	4fa2      	ldr	r7, [pc, #648]	; (80107d8 <_dtoa_r+0x640>)
 8010550:	f006 020f 	and.w	r2, r6, #15
 8010554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	ec51 0b18 	vmov	r0, r1, d8
 8010560:	f7f0 f87a 	bl	8000658 <__aeabi_dmul>
 8010564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010568:	1136      	asrs	r6, r6, #4
 801056a:	2300      	movs	r3, #0
 801056c:	2502      	movs	r5, #2
 801056e:	2e00      	cmp	r6, #0
 8010570:	d17e      	bne.n	8010670 <_dtoa_r+0x4d8>
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1d0      	bne.n	8010518 <_dtoa_r+0x380>
 8010576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010578:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	f000 8084 	beq.w	801068a <_dtoa_r+0x4f2>
 8010582:	4b96      	ldr	r3, [pc, #600]	; (80107dc <_dtoa_r+0x644>)
 8010584:	2200      	movs	r2, #0
 8010586:	4640      	mov	r0, r8
 8010588:	4649      	mov	r1, r9
 801058a:	f7f0 fad7 	bl	8000b3c <__aeabi_dcmplt>
 801058e:	2800      	cmp	r0, #0
 8010590:	d07b      	beq.n	801068a <_dtoa_r+0x4f2>
 8010592:	9b04      	ldr	r3, [sp, #16]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d078      	beq.n	801068a <_dtoa_r+0x4f2>
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	dd39      	ble.n	8010612 <_dtoa_r+0x47a>
 801059e:	4b90      	ldr	r3, [pc, #576]	; (80107e0 <_dtoa_r+0x648>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	4640      	mov	r0, r8
 80105a4:	4649      	mov	r1, r9
 80105a6:	f7f0 f857 	bl	8000658 <__aeabi_dmul>
 80105aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105ae:	9e01      	ldr	r6, [sp, #4]
 80105b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80105b4:	3501      	adds	r5, #1
 80105b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80105ba:	4628      	mov	r0, r5
 80105bc:	f7ef ffe2 	bl	8000584 <__aeabi_i2d>
 80105c0:	4642      	mov	r2, r8
 80105c2:	464b      	mov	r3, r9
 80105c4:	f7f0 f848 	bl	8000658 <__aeabi_dmul>
 80105c8:	4b86      	ldr	r3, [pc, #536]	; (80107e4 <_dtoa_r+0x64c>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	f7ef fe8e 	bl	80002ec <__adddf3>
 80105d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80105d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d8:	9303      	str	r3, [sp, #12]
 80105da:	2e00      	cmp	r6, #0
 80105dc:	d158      	bne.n	8010690 <_dtoa_r+0x4f8>
 80105de:	4b82      	ldr	r3, [pc, #520]	; (80107e8 <_dtoa_r+0x650>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	4640      	mov	r0, r8
 80105e4:	4649      	mov	r1, r9
 80105e6:	f7ef fe7f 	bl	80002e8 <__aeabi_dsub>
 80105ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105ee:	4680      	mov	r8, r0
 80105f0:	4689      	mov	r9, r1
 80105f2:	f7f0 fac1 	bl	8000b78 <__aeabi_dcmpgt>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	f040 8296 	bne.w	8010b28 <_dtoa_r+0x990>
 80105fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010600:	4640      	mov	r0, r8
 8010602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010606:	4649      	mov	r1, r9
 8010608:	f7f0 fa98 	bl	8000b3c <__aeabi_dcmplt>
 801060c:	2800      	cmp	r0, #0
 801060e:	f040 8289 	bne.w	8010b24 <_dtoa_r+0x98c>
 8010612:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010618:	2b00      	cmp	r3, #0
 801061a:	f2c0 814e 	blt.w	80108ba <_dtoa_r+0x722>
 801061e:	f1bb 0f0e 	cmp.w	fp, #14
 8010622:	f300 814a 	bgt.w	80108ba <_dtoa_r+0x722>
 8010626:	4b6b      	ldr	r3, [pc, #428]	; (80107d4 <_dtoa_r+0x63c>)
 8010628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801062c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010632:	2b00      	cmp	r3, #0
 8010634:	f280 80dc 	bge.w	80107f0 <_dtoa_r+0x658>
 8010638:	9b04      	ldr	r3, [sp, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	f300 80d8 	bgt.w	80107f0 <_dtoa_r+0x658>
 8010640:	f040 826f 	bne.w	8010b22 <_dtoa_r+0x98a>
 8010644:	4b68      	ldr	r3, [pc, #416]	; (80107e8 <_dtoa_r+0x650>)
 8010646:	2200      	movs	r2, #0
 8010648:	4640      	mov	r0, r8
 801064a:	4649      	mov	r1, r9
 801064c:	f7f0 f804 	bl	8000658 <__aeabi_dmul>
 8010650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010654:	f7f0 fa86 	bl	8000b64 <__aeabi_dcmpge>
 8010658:	9e04      	ldr	r6, [sp, #16]
 801065a:	4637      	mov	r7, r6
 801065c:	2800      	cmp	r0, #0
 801065e:	f040 8245 	bne.w	8010aec <_dtoa_r+0x954>
 8010662:	9d00      	ldr	r5, [sp, #0]
 8010664:	2331      	movs	r3, #49	; 0x31
 8010666:	f805 3b01 	strb.w	r3, [r5], #1
 801066a:	f10b 0b01 	add.w	fp, fp, #1
 801066e:	e241      	b.n	8010af4 <_dtoa_r+0x95c>
 8010670:	07f2      	lsls	r2, r6, #31
 8010672:	d505      	bpl.n	8010680 <_dtoa_r+0x4e8>
 8010674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010678:	f7ef ffee 	bl	8000658 <__aeabi_dmul>
 801067c:	3501      	adds	r5, #1
 801067e:	2301      	movs	r3, #1
 8010680:	1076      	asrs	r6, r6, #1
 8010682:	3708      	adds	r7, #8
 8010684:	e773      	b.n	801056e <_dtoa_r+0x3d6>
 8010686:	2502      	movs	r5, #2
 8010688:	e775      	b.n	8010576 <_dtoa_r+0x3de>
 801068a:	9e04      	ldr	r6, [sp, #16]
 801068c:	465f      	mov	r7, fp
 801068e:	e792      	b.n	80105b6 <_dtoa_r+0x41e>
 8010690:	9900      	ldr	r1, [sp, #0]
 8010692:	4b50      	ldr	r3, [pc, #320]	; (80107d4 <_dtoa_r+0x63c>)
 8010694:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010698:	4431      	add	r1, r6
 801069a:	9102      	str	r1, [sp, #8]
 801069c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801069e:	eeb0 9a47 	vmov.f32	s18, s14
 80106a2:	eef0 9a67 	vmov.f32	s19, s15
 80106a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80106aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106ae:	2900      	cmp	r1, #0
 80106b0:	d044      	beq.n	801073c <_dtoa_r+0x5a4>
 80106b2:	494e      	ldr	r1, [pc, #312]	; (80107ec <_dtoa_r+0x654>)
 80106b4:	2000      	movs	r0, #0
 80106b6:	f7f0 f8f9 	bl	80008ac <__aeabi_ddiv>
 80106ba:	ec53 2b19 	vmov	r2, r3, d9
 80106be:	f7ef fe13 	bl	80002e8 <__aeabi_dsub>
 80106c2:	9d00      	ldr	r5, [sp, #0]
 80106c4:	ec41 0b19 	vmov	d9, r0, r1
 80106c8:	4649      	mov	r1, r9
 80106ca:	4640      	mov	r0, r8
 80106cc:	f7f0 fa74 	bl	8000bb8 <__aeabi_d2iz>
 80106d0:	4606      	mov	r6, r0
 80106d2:	f7ef ff57 	bl	8000584 <__aeabi_i2d>
 80106d6:	4602      	mov	r2, r0
 80106d8:	460b      	mov	r3, r1
 80106da:	4640      	mov	r0, r8
 80106dc:	4649      	mov	r1, r9
 80106de:	f7ef fe03 	bl	80002e8 <__aeabi_dsub>
 80106e2:	3630      	adds	r6, #48	; 0x30
 80106e4:	f805 6b01 	strb.w	r6, [r5], #1
 80106e8:	ec53 2b19 	vmov	r2, r3, d9
 80106ec:	4680      	mov	r8, r0
 80106ee:	4689      	mov	r9, r1
 80106f0:	f7f0 fa24 	bl	8000b3c <__aeabi_dcmplt>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d164      	bne.n	80107c2 <_dtoa_r+0x62a>
 80106f8:	4642      	mov	r2, r8
 80106fa:	464b      	mov	r3, r9
 80106fc:	4937      	ldr	r1, [pc, #220]	; (80107dc <_dtoa_r+0x644>)
 80106fe:	2000      	movs	r0, #0
 8010700:	f7ef fdf2 	bl	80002e8 <__aeabi_dsub>
 8010704:	ec53 2b19 	vmov	r2, r3, d9
 8010708:	f7f0 fa18 	bl	8000b3c <__aeabi_dcmplt>
 801070c:	2800      	cmp	r0, #0
 801070e:	f040 80b6 	bne.w	801087e <_dtoa_r+0x6e6>
 8010712:	9b02      	ldr	r3, [sp, #8]
 8010714:	429d      	cmp	r5, r3
 8010716:	f43f af7c 	beq.w	8010612 <_dtoa_r+0x47a>
 801071a:	4b31      	ldr	r3, [pc, #196]	; (80107e0 <_dtoa_r+0x648>)
 801071c:	ec51 0b19 	vmov	r0, r1, d9
 8010720:	2200      	movs	r2, #0
 8010722:	f7ef ff99 	bl	8000658 <__aeabi_dmul>
 8010726:	4b2e      	ldr	r3, [pc, #184]	; (80107e0 <_dtoa_r+0x648>)
 8010728:	ec41 0b19 	vmov	d9, r0, r1
 801072c:	2200      	movs	r2, #0
 801072e:	4640      	mov	r0, r8
 8010730:	4649      	mov	r1, r9
 8010732:	f7ef ff91 	bl	8000658 <__aeabi_dmul>
 8010736:	4680      	mov	r8, r0
 8010738:	4689      	mov	r9, r1
 801073a:	e7c5      	b.n	80106c8 <_dtoa_r+0x530>
 801073c:	ec51 0b17 	vmov	r0, r1, d7
 8010740:	f7ef ff8a 	bl	8000658 <__aeabi_dmul>
 8010744:	9b02      	ldr	r3, [sp, #8]
 8010746:	9d00      	ldr	r5, [sp, #0]
 8010748:	930f      	str	r3, [sp, #60]	; 0x3c
 801074a:	ec41 0b19 	vmov	d9, r0, r1
 801074e:	4649      	mov	r1, r9
 8010750:	4640      	mov	r0, r8
 8010752:	f7f0 fa31 	bl	8000bb8 <__aeabi_d2iz>
 8010756:	4606      	mov	r6, r0
 8010758:	f7ef ff14 	bl	8000584 <__aeabi_i2d>
 801075c:	3630      	adds	r6, #48	; 0x30
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4640      	mov	r0, r8
 8010764:	4649      	mov	r1, r9
 8010766:	f7ef fdbf 	bl	80002e8 <__aeabi_dsub>
 801076a:	f805 6b01 	strb.w	r6, [r5], #1
 801076e:	9b02      	ldr	r3, [sp, #8]
 8010770:	429d      	cmp	r5, r3
 8010772:	4680      	mov	r8, r0
 8010774:	4689      	mov	r9, r1
 8010776:	f04f 0200 	mov.w	r2, #0
 801077a:	d124      	bne.n	80107c6 <_dtoa_r+0x62e>
 801077c:	4b1b      	ldr	r3, [pc, #108]	; (80107ec <_dtoa_r+0x654>)
 801077e:	ec51 0b19 	vmov	r0, r1, d9
 8010782:	f7ef fdb3 	bl	80002ec <__adddf3>
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	4640      	mov	r0, r8
 801078c:	4649      	mov	r1, r9
 801078e:	f7f0 f9f3 	bl	8000b78 <__aeabi_dcmpgt>
 8010792:	2800      	cmp	r0, #0
 8010794:	d173      	bne.n	801087e <_dtoa_r+0x6e6>
 8010796:	ec53 2b19 	vmov	r2, r3, d9
 801079a:	4914      	ldr	r1, [pc, #80]	; (80107ec <_dtoa_r+0x654>)
 801079c:	2000      	movs	r0, #0
 801079e:	f7ef fda3 	bl	80002e8 <__aeabi_dsub>
 80107a2:	4602      	mov	r2, r0
 80107a4:	460b      	mov	r3, r1
 80107a6:	4640      	mov	r0, r8
 80107a8:	4649      	mov	r1, r9
 80107aa:	f7f0 f9c7 	bl	8000b3c <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	f43f af2f 	beq.w	8010612 <_dtoa_r+0x47a>
 80107b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80107b6:	1e6b      	subs	r3, r5, #1
 80107b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80107ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80107be:	2b30      	cmp	r3, #48	; 0x30
 80107c0:	d0f8      	beq.n	80107b4 <_dtoa_r+0x61c>
 80107c2:	46bb      	mov	fp, r7
 80107c4:	e04a      	b.n	801085c <_dtoa_r+0x6c4>
 80107c6:	4b06      	ldr	r3, [pc, #24]	; (80107e0 <_dtoa_r+0x648>)
 80107c8:	f7ef ff46 	bl	8000658 <__aeabi_dmul>
 80107cc:	4680      	mov	r8, r0
 80107ce:	4689      	mov	r9, r1
 80107d0:	e7bd      	b.n	801074e <_dtoa_r+0x5b6>
 80107d2:	bf00      	nop
 80107d4:	080151d8 	.word	0x080151d8
 80107d8:	080151b0 	.word	0x080151b0
 80107dc:	3ff00000 	.word	0x3ff00000
 80107e0:	40240000 	.word	0x40240000
 80107e4:	401c0000 	.word	0x401c0000
 80107e8:	40140000 	.word	0x40140000
 80107ec:	3fe00000 	.word	0x3fe00000
 80107f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80107f4:	9d00      	ldr	r5, [sp, #0]
 80107f6:	4642      	mov	r2, r8
 80107f8:	464b      	mov	r3, r9
 80107fa:	4630      	mov	r0, r6
 80107fc:	4639      	mov	r1, r7
 80107fe:	f7f0 f855 	bl	80008ac <__aeabi_ddiv>
 8010802:	f7f0 f9d9 	bl	8000bb8 <__aeabi_d2iz>
 8010806:	9001      	str	r0, [sp, #4]
 8010808:	f7ef febc 	bl	8000584 <__aeabi_i2d>
 801080c:	4642      	mov	r2, r8
 801080e:	464b      	mov	r3, r9
 8010810:	f7ef ff22 	bl	8000658 <__aeabi_dmul>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	4630      	mov	r0, r6
 801081a:	4639      	mov	r1, r7
 801081c:	f7ef fd64 	bl	80002e8 <__aeabi_dsub>
 8010820:	9e01      	ldr	r6, [sp, #4]
 8010822:	9f04      	ldr	r7, [sp, #16]
 8010824:	3630      	adds	r6, #48	; 0x30
 8010826:	f805 6b01 	strb.w	r6, [r5], #1
 801082a:	9e00      	ldr	r6, [sp, #0]
 801082c:	1bae      	subs	r6, r5, r6
 801082e:	42b7      	cmp	r7, r6
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	d134      	bne.n	80108a0 <_dtoa_r+0x708>
 8010836:	f7ef fd59 	bl	80002ec <__adddf3>
 801083a:	4642      	mov	r2, r8
 801083c:	464b      	mov	r3, r9
 801083e:	4606      	mov	r6, r0
 8010840:	460f      	mov	r7, r1
 8010842:	f7f0 f999 	bl	8000b78 <__aeabi_dcmpgt>
 8010846:	b9c8      	cbnz	r0, 801087c <_dtoa_r+0x6e4>
 8010848:	4642      	mov	r2, r8
 801084a:	464b      	mov	r3, r9
 801084c:	4630      	mov	r0, r6
 801084e:	4639      	mov	r1, r7
 8010850:	f7f0 f96a 	bl	8000b28 <__aeabi_dcmpeq>
 8010854:	b110      	cbz	r0, 801085c <_dtoa_r+0x6c4>
 8010856:	9b01      	ldr	r3, [sp, #4]
 8010858:	07db      	lsls	r3, r3, #31
 801085a:	d40f      	bmi.n	801087c <_dtoa_r+0x6e4>
 801085c:	4651      	mov	r1, sl
 801085e:	4620      	mov	r0, r4
 8010860:	f000 fb18 	bl	8010e94 <_Bfree>
 8010864:	2300      	movs	r3, #0
 8010866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010868:	702b      	strb	r3, [r5, #0]
 801086a:	f10b 0301 	add.w	r3, fp, #1
 801086e:	6013      	str	r3, [r2, #0]
 8010870:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010872:	2b00      	cmp	r3, #0
 8010874:	f43f ace2 	beq.w	801023c <_dtoa_r+0xa4>
 8010878:	601d      	str	r5, [r3, #0]
 801087a:	e4df      	b.n	801023c <_dtoa_r+0xa4>
 801087c:	465f      	mov	r7, fp
 801087e:	462b      	mov	r3, r5
 8010880:	461d      	mov	r5, r3
 8010882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010886:	2a39      	cmp	r2, #57	; 0x39
 8010888:	d106      	bne.n	8010898 <_dtoa_r+0x700>
 801088a:	9a00      	ldr	r2, [sp, #0]
 801088c:	429a      	cmp	r2, r3
 801088e:	d1f7      	bne.n	8010880 <_dtoa_r+0x6e8>
 8010890:	9900      	ldr	r1, [sp, #0]
 8010892:	2230      	movs	r2, #48	; 0x30
 8010894:	3701      	adds	r7, #1
 8010896:	700a      	strb	r2, [r1, #0]
 8010898:	781a      	ldrb	r2, [r3, #0]
 801089a:	3201      	adds	r2, #1
 801089c:	701a      	strb	r2, [r3, #0]
 801089e:	e790      	b.n	80107c2 <_dtoa_r+0x62a>
 80108a0:	4ba3      	ldr	r3, [pc, #652]	; (8010b30 <_dtoa_r+0x998>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	f7ef fed8 	bl	8000658 <__aeabi_dmul>
 80108a8:	2200      	movs	r2, #0
 80108aa:	2300      	movs	r3, #0
 80108ac:	4606      	mov	r6, r0
 80108ae:	460f      	mov	r7, r1
 80108b0:	f7f0 f93a 	bl	8000b28 <__aeabi_dcmpeq>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d09e      	beq.n	80107f6 <_dtoa_r+0x65e>
 80108b8:	e7d0      	b.n	801085c <_dtoa_r+0x6c4>
 80108ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108bc:	2a00      	cmp	r2, #0
 80108be:	f000 80ca 	beq.w	8010a56 <_dtoa_r+0x8be>
 80108c2:	9a07      	ldr	r2, [sp, #28]
 80108c4:	2a01      	cmp	r2, #1
 80108c6:	f300 80ad 	bgt.w	8010a24 <_dtoa_r+0x88c>
 80108ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108cc:	2a00      	cmp	r2, #0
 80108ce:	f000 80a5 	beq.w	8010a1c <_dtoa_r+0x884>
 80108d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80108d6:	9e08      	ldr	r6, [sp, #32]
 80108d8:	9d05      	ldr	r5, [sp, #20]
 80108da:	9a05      	ldr	r2, [sp, #20]
 80108dc:	441a      	add	r2, r3
 80108de:	9205      	str	r2, [sp, #20]
 80108e0:	9a06      	ldr	r2, [sp, #24]
 80108e2:	2101      	movs	r1, #1
 80108e4:	441a      	add	r2, r3
 80108e6:	4620      	mov	r0, r4
 80108e8:	9206      	str	r2, [sp, #24]
 80108ea:	f000 fb89 	bl	8011000 <__i2b>
 80108ee:	4607      	mov	r7, r0
 80108f0:	b165      	cbz	r5, 801090c <_dtoa_r+0x774>
 80108f2:	9b06      	ldr	r3, [sp, #24]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	dd09      	ble.n	801090c <_dtoa_r+0x774>
 80108f8:	42ab      	cmp	r3, r5
 80108fa:	9a05      	ldr	r2, [sp, #20]
 80108fc:	bfa8      	it	ge
 80108fe:	462b      	movge	r3, r5
 8010900:	1ad2      	subs	r2, r2, r3
 8010902:	9205      	str	r2, [sp, #20]
 8010904:	9a06      	ldr	r2, [sp, #24]
 8010906:	1aed      	subs	r5, r5, r3
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	9306      	str	r3, [sp, #24]
 801090c:	9b08      	ldr	r3, [sp, #32]
 801090e:	b1f3      	cbz	r3, 801094e <_dtoa_r+0x7b6>
 8010910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 80a3 	beq.w	8010a5e <_dtoa_r+0x8c6>
 8010918:	2e00      	cmp	r6, #0
 801091a:	dd10      	ble.n	801093e <_dtoa_r+0x7a6>
 801091c:	4639      	mov	r1, r7
 801091e:	4632      	mov	r2, r6
 8010920:	4620      	mov	r0, r4
 8010922:	f000 fc2d 	bl	8011180 <__pow5mult>
 8010926:	4652      	mov	r2, sl
 8010928:	4601      	mov	r1, r0
 801092a:	4607      	mov	r7, r0
 801092c:	4620      	mov	r0, r4
 801092e:	f000 fb7d 	bl	801102c <__multiply>
 8010932:	4651      	mov	r1, sl
 8010934:	4680      	mov	r8, r0
 8010936:	4620      	mov	r0, r4
 8010938:	f000 faac 	bl	8010e94 <_Bfree>
 801093c:	46c2      	mov	sl, r8
 801093e:	9b08      	ldr	r3, [sp, #32]
 8010940:	1b9a      	subs	r2, r3, r6
 8010942:	d004      	beq.n	801094e <_dtoa_r+0x7b6>
 8010944:	4651      	mov	r1, sl
 8010946:	4620      	mov	r0, r4
 8010948:	f000 fc1a 	bl	8011180 <__pow5mult>
 801094c:	4682      	mov	sl, r0
 801094e:	2101      	movs	r1, #1
 8010950:	4620      	mov	r0, r4
 8010952:	f000 fb55 	bl	8011000 <__i2b>
 8010956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010958:	2b00      	cmp	r3, #0
 801095a:	4606      	mov	r6, r0
 801095c:	f340 8081 	ble.w	8010a62 <_dtoa_r+0x8ca>
 8010960:	461a      	mov	r2, r3
 8010962:	4601      	mov	r1, r0
 8010964:	4620      	mov	r0, r4
 8010966:	f000 fc0b 	bl	8011180 <__pow5mult>
 801096a:	9b07      	ldr	r3, [sp, #28]
 801096c:	2b01      	cmp	r3, #1
 801096e:	4606      	mov	r6, r0
 8010970:	dd7a      	ble.n	8010a68 <_dtoa_r+0x8d0>
 8010972:	f04f 0800 	mov.w	r8, #0
 8010976:	6933      	ldr	r3, [r6, #16]
 8010978:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801097c:	6918      	ldr	r0, [r3, #16]
 801097e:	f000 faf1 	bl	8010f64 <__hi0bits>
 8010982:	f1c0 0020 	rsb	r0, r0, #32
 8010986:	9b06      	ldr	r3, [sp, #24]
 8010988:	4418      	add	r0, r3
 801098a:	f010 001f 	ands.w	r0, r0, #31
 801098e:	f000 8094 	beq.w	8010aba <_dtoa_r+0x922>
 8010992:	f1c0 0320 	rsb	r3, r0, #32
 8010996:	2b04      	cmp	r3, #4
 8010998:	f340 8085 	ble.w	8010aa6 <_dtoa_r+0x90e>
 801099c:	9b05      	ldr	r3, [sp, #20]
 801099e:	f1c0 001c 	rsb	r0, r0, #28
 80109a2:	4403      	add	r3, r0
 80109a4:	9305      	str	r3, [sp, #20]
 80109a6:	9b06      	ldr	r3, [sp, #24]
 80109a8:	4403      	add	r3, r0
 80109aa:	4405      	add	r5, r0
 80109ac:	9306      	str	r3, [sp, #24]
 80109ae:	9b05      	ldr	r3, [sp, #20]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	dd05      	ble.n	80109c0 <_dtoa_r+0x828>
 80109b4:	4651      	mov	r1, sl
 80109b6:	461a      	mov	r2, r3
 80109b8:	4620      	mov	r0, r4
 80109ba:	f000 fc3b 	bl	8011234 <__lshift>
 80109be:	4682      	mov	sl, r0
 80109c0:	9b06      	ldr	r3, [sp, #24]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	dd05      	ble.n	80109d2 <_dtoa_r+0x83a>
 80109c6:	4631      	mov	r1, r6
 80109c8:	461a      	mov	r2, r3
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 fc32 	bl	8011234 <__lshift>
 80109d0:	4606      	mov	r6, r0
 80109d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d072      	beq.n	8010abe <_dtoa_r+0x926>
 80109d8:	4631      	mov	r1, r6
 80109da:	4650      	mov	r0, sl
 80109dc:	f000 fc96 	bl	801130c <__mcmp>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	da6c      	bge.n	8010abe <_dtoa_r+0x926>
 80109e4:	2300      	movs	r3, #0
 80109e6:	4651      	mov	r1, sl
 80109e8:	220a      	movs	r2, #10
 80109ea:	4620      	mov	r0, r4
 80109ec:	f000 fa74 	bl	8010ed8 <__multadd>
 80109f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109f6:	4682      	mov	sl, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 81b0 	beq.w	8010d5e <_dtoa_r+0xbc6>
 80109fe:	2300      	movs	r3, #0
 8010a00:	4639      	mov	r1, r7
 8010a02:	220a      	movs	r2, #10
 8010a04:	4620      	mov	r0, r4
 8010a06:	f000 fa67 	bl	8010ed8 <__multadd>
 8010a0a:	9b01      	ldr	r3, [sp, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	4607      	mov	r7, r0
 8010a10:	f300 8096 	bgt.w	8010b40 <_dtoa_r+0x9a8>
 8010a14:	9b07      	ldr	r3, [sp, #28]
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	dc59      	bgt.n	8010ace <_dtoa_r+0x936>
 8010a1a:	e091      	b.n	8010b40 <_dtoa_r+0x9a8>
 8010a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a22:	e758      	b.n	80108d6 <_dtoa_r+0x73e>
 8010a24:	9b04      	ldr	r3, [sp, #16]
 8010a26:	1e5e      	subs	r6, r3, #1
 8010a28:	9b08      	ldr	r3, [sp, #32]
 8010a2a:	42b3      	cmp	r3, r6
 8010a2c:	bfbf      	itttt	lt
 8010a2e:	9b08      	ldrlt	r3, [sp, #32]
 8010a30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010a32:	9608      	strlt	r6, [sp, #32]
 8010a34:	1af3      	sublt	r3, r6, r3
 8010a36:	bfb4      	ite	lt
 8010a38:	18d2      	addlt	r2, r2, r3
 8010a3a:	1b9e      	subge	r6, r3, r6
 8010a3c:	9b04      	ldr	r3, [sp, #16]
 8010a3e:	bfbc      	itt	lt
 8010a40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010a42:	2600      	movlt	r6, #0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	bfb7      	itett	lt
 8010a48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010a4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010a50:	1a9d      	sublt	r5, r3, r2
 8010a52:	2300      	movlt	r3, #0
 8010a54:	e741      	b.n	80108da <_dtoa_r+0x742>
 8010a56:	9e08      	ldr	r6, [sp, #32]
 8010a58:	9d05      	ldr	r5, [sp, #20]
 8010a5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010a5c:	e748      	b.n	80108f0 <_dtoa_r+0x758>
 8010a5e:	9a08      	ldr	r2, [sp, #32]
 8010a60:	e770      	b.n	8010944 <_dtoa_r+0x7ac>
 8010a62:	9b07      	ldr	r3, [sp, #28]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	dc19      	bgt.n	8010a9c <_dtoa_r+0x904>
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	b9bb      	cbnz	r3, 8010a9c <_dtoa_r+0x904>
 8010a6c:	9b03      	ldr	r3, [sp, #12]
 8010a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a72:	b99b      	cbnz	r3, 8010a9c <_dtoa_r+0x904>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a7a:	0d1b      	lsrs	r3, r3, #20
 8010a7c:	051b      	lsls	r3, r3, #20
 8010a7e:	b183      	cbz	r3, 8010aa2 <_dtoa_r+0x90a>
 8010a80:	9b05      	ldr	r3, [sp, #20]
 8010a82:	3301      	adds	r3, #1
 8010a84:	9305      	str	r3, [sp, #20]
 8010a86:	9b06      	ldr	r3, [sp, #24]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	9306      	str	r3, [sp, #24]
 8010a8c:	f04f 0801 	mov.w	r8, #1
 8010a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f47f af6f 	bne.w	8010976 <_dtoa_r+0x7de>
 8010a98:	2001      	movs	r0, #1
 8010a9a:	e774      	b.n	8010986 <_dtoa_r+0x7ee>
 8010a9c:	f04f 0800 	mov.w	r8, #0
 8010aa0:	e7f6      	b.n	8010a90 <_dtoa_r+0x8f8>
 8010aa2:	4698      	mov	r8, r3
 8010aa4:	e7f4      	b.n	8010a90 <_dtoa_r+0x8f8>
 8010aa6:	d082      	beq.n	80109ae <_dtoa_r+0x816>
 8010aa8:	9a05      	ldr	r2, [sp, #20]
 8010aaa:	331c      	adds	r3, #28
 8010aac:	441a      	add	r2, r3
 8010aae:	9205      	str	r2, [sp, #20]
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	441a      	add	r2, r3
 8010ab4:	441d      	add	r5, r3
 8010ab6:	9206      	str	r2, [sp, #24]
 8010ab8:	e779      	b.n	80109ae <_dtoa_r+0x816>
 8010aba:	4603      	mov	r3, r0
 8010abc:	e7f4      	b.n	8010aa8 <_dtoa_r+0x910>
 8010abe:	9b04      	ldr	r3, [sp, #16]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dc37      	bgt.n	8010b34 <_dtoa_r+0x99c>
 8010ac4:	9b07      	ldr	r3, [sp, #28]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	dd34      	ble.n	8010b34 <_dtoa_r+0x99c>
 8010aca:	9b04      	ldr	r3, [sp, #16]
 8010acc:	9301      	str	r3, [sp, #4]
 8010ace:	9b01      	ldr	r3, [sp, #4]
 8010ad0:	b963      	cbnz	r3, 8010aec <_dtoa_r+0x954>
 8010ad2:	4631      	mov	r1, r6
 8010ad4:	2205      	movs	r2, #5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f9fe 	bl	8010ed8 <__multadd>
 8010adc:	4601      	mov	r1, r0
 8010ade:	4606      	mov	r6, r0
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	f000 fc13 	bl	801130c <__mcmp>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f73f adbb 	bgt.w	8010662 <_dtoa_r+0x4ca>
 8010aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aee:	9d00      	ldr	r5, [sp, #0]
 8010af0:	ea6f 0b03 	mvn.w	fp, r3
 8010af4:	f04f 0800 	mov.w	r8, #0
 8010af8:	4631      	mov	r1, r6
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 f9ca 	bl	8010e94 <_Bfree>
 8010b00:	2f00      	cmp	r7, #0
 8010b02:	f43f aeab 	beq.w	801085c <_dtoa_r+0x6c4>
 8010b06:	f1b8 0f00 	cmp.w	r8, #0
 8010b0a:	d005      	beq.n	8010b18 <_dtoa_r+0x980>
 8010b0c:	45b8      	cmp	r8, r7
 8010b0e:	d003      	beq.n	8010b18 <_dtoa_r+0x980>
 8010b10:	4641      	mov	r1, r8
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 f9be 	bl	8010e94 <_Bfree>
 8010b18:	4639      	mov	r1, r7
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 f9ba 	bl	8010e94 <_Bfree>
 8010b20:	e69c      	b.n	801085c <_dtoa_r+0x6c4>
 8010b22:	2600      	movs	r6, #0
 8010b24:	4637      	mov	r7, r6
 8010b26:	e7e1      	b.n	8010aec <_dtoa_r+0x954>
 8010b28:	46bb      	mov	fp, r7
 8010b2a:	4637      	mov	r7, r6
 8010b2c:	e599      	b.n	8010662 <_dtoa_r+0x4ca>
 8010b2e:	bf00      	nop
 8010b30:	40240000 	.word	0x40240000
 8010b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f000 80c8 	beq.w	8010ccc <_dtoa_r+0xb34>
 8010b3c:	9b04      	ldr	r3, [sp, #16]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	2d00      	cmp	r5, #0
 8010b42:	dd05      	ble.n	8010b50 <_dtoa_r+0x9b8>
 8010b44:	4639      	mov	r1, r7
 8010b46:	462a      	mov	r2, r5
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f000 fb73 	bl	8011234 <__lshift>
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f1b8 0f00 	cmp.w	r8, #0
 8010b54:	d05b      	beq.n	8010c0e <_dtoa_r+0xa76>
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f000 f95b 	bl	8010e14 <_Balloc>
 8010b5e:	4605      	mov	r5, r0
 8010b60:	b928      	cbnz	r0, 8010b6e <_dtoa_r+0x9d6>
 8010b62:	4b83      	ldr	r3, [pc, #524]	; (8010d70 <_dtoa_r+0xbd8>)
 8010b64:	4602      	mov	r2, r0
 8010b66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010b6a:	f7ff bb2e 	b.w	80101ca <_dtoa_r+0x32>
 8010b6e:	693a      	ldr	r2, [r7, #16]
 8010b70:	3202      	adds	r2, #2
 8010b72:	0092      	lsls	r2, r2, #2
 8010b74:	f107 010c 	add.w	r1, r7, #12
 8010b78:	300c      	adds	r0, #12
 8010b7a:	f7ff fa6e 	bl	801005a <memcpy>
 8010b7e:	2201      	movs	r2, #1
 8010b80:	4629      	mov	r1, r5
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 fb56 	bl	8011234 <__lshift>
 8010b88:	9b00      	ldr	r3, [sp, #0]
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	9304      	str	r3, [sp, #16]
 8010b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b92:	4413      	add	r3, r2
 8010b94:	9308      	str	r3, [sp, #32]
 8010b96:	9b02      	ldr	r3, [sp, #8]
 8010b98:	f003 0301 	and.w	r3, r3, #1
 8010b9c:	46b8      	mov	r8, r7
 8010b9e:	9306      	str	r3, [sp, #24]
 8010ba0:	4607      	mov	r7, r0
 8010ba2:	9b04      	ldr	r3, [sp, #16]
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	4650      	mov	r0, sl
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	f7ff fa6a 	bl	8010084 <quorem>
 8010bb0:	4641      	mov	r1, r8
 8010bb2:	9002      	str	r0, [sp, #8]
 8010bb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010bb8:	4650      	mov	r0, sl
 8010bba:	f000 fba7 	bl	801130c <__mcmp>
 8010bbe:	463a      	mov	r2, r7
 8010bc0:	9005      	str	r0, [sp, #20]
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f000 fbbd 	bl	8011344 <__mdiff>
 8010bca:	68c2      	ldr	r2, [r0, #12]
 8010bcc:	4605      	mov	r5, r0
 8010bce:	bb02      	cbnz	r2, 8010c12 <_dtoa_r+0xa7a>
 8010bd0:	4601      	mov	r1, r0
 8010bd2:	4650      	mov	r0, sl
 8010bd4:	f000 fb9a 	bl	801130c <__mcmp>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4620      	mov	r0, r4
 8010bde:	9209      	str	r2, [sp, #36]	; 0x24
 8010be0:	f000 f958 	bl	8010e94 <_Bfree>
 8010be4:	9b07      	ldr	r3, [sp, #28]
 8010be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010be8:	9d04      	ldr	r5, [sp, #16]
 8010bea:	ea43 0102 	orr.w	r1, r3, r2
 8010bee:	9b06      	ldr	r3, [sp, #24]
 8010bf0:	4319      	orrs	r1, r3
 8010bf2:	d110      	bne.n	8010c16 <_dtoa_r+0xa7e>
 8010bf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010bf8:	d029      	beq.n	8010c4e <_dtoa_r+0xab6>
 8010bfa:	9b05      	ldr	r3, [sp, #20]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	dd02      	ble.n	8010c06 <_dtoa_r+0xa6e>
 8010c00:	9b02      	ldr	r3, [sp, #8]
 8010c02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010c06:	9b01      	ldr	r3, [sp, #4]
 8010c08:	f883 9000 	strb.w	r9, [r3]
 8010c0c:	e774      	b.n	8010af8 <_dtoa_r+0x960>
 8010c0e:	4638      	mov	r0, r7
 8010c10:	e7ba      	b.n	8010b88 <_dtoa_r+0x9f0>
 8010c12:	2201      	movs	r2, #1
 8010c14:	e7e1      	b.n	8010bda <_dtoa_r+0xa42>
 8010c16:	9b05      	ldr	r3, [sp, #20]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	db04      	blt.n	8010c26 <_dtoa_r+0xa8e>
 8010c1c:	9907      	ldr	r1, [sp, #28]
 8010c1e:	430b      	orrs	r3, r1
 8010c20:	9906      	ldr	r1, [sp, #24]
 8010c22:	430b      	orrs	r3, r1
 8010c24:	d120      	bne.n	8010c68 <_dtoa_r+0xad0>
 8010c26:	2a00      	cmp	r2, #0
 8010c28:	dded      	ble.n	8010c06 <_dtoa_r+0xa6e>
 8010c2a:	4651      	mov	r1, sl
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 fb00 	bl	8011234 <__lshift>
 8010c34:	4631      	mov	r1, r6
 8010c36:	4682      	mov	sl, r0
 8010c38:	f000 fb68 	bl	801130c <__mcmp>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	dc03      	bgt.n	8010c48 <_dtoa_r+0xab0>
 8010c40:	d1e1      	bne.n	8010c06 <_dtoa_r+0xa6e>
 8010c42:	f019 0f01 	tst.w	r9, #1
 8010c46:	d0de      	beq.n	8010c06 <_dtoa_r+0xa6e>
 8010c48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c4c:	d1d8      	bne.n	8010c00 <_dtoa_r+0xa68>
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	2339      	movs	r3, #57	; 0x39
 8010c52:	7013      	strb	r3, [r2, #0]
 8010c54:	462b      	mov	r3, r5
 8010c56:	461d      	mov	r5, r3
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c5e:	2a39      	cmp	r2, #57	; 0x39
 8010c60:	d06c      	beq.n	8010d3c <_dtoa_r+0xba4>
 8010c62:	3201      	adds	r2, #1
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	e747      	b.n	8010af8 <_dtoa_r+0x960>
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	dd07      	ble.n	8010c7c <_dtoa_r+0xae4>
 8010c6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c70:	d0ed      	beq.n	8010c4e <_dtoa_r+0xab6>
 8010c72:	9a01      	ldr	r2, [sp, #4]
 8010c74:	f109 0301 	add.w	r3, r9, #1
 8010c78:	7013      	strb	r3, [r2, #0]
 8010c7a:	e73d      	b.n	8010af8 <_dtoa_r+0x960>
 8010c7c:	9b04      	ldr	r3, [sp, #16]
 8010c7e:	9a08      	ldr	r2, [sp, #32]
 8010c80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d043      	beq.n	8010d10 <_dtoa_r+0xb78>
 8010c88:	4651      	mov	r1, sl
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	220a      	movs	r2, #10
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 f922 	bl	8010ed8 <__multadd>
 8010c94:	45b8      	cmp	r8, r7
 8010c96:	4682      	mov	sl, r0
 8010c98:	f04f 0300 	mov.w	r3, #0
 8010c9c:	f04f 020a 	mov.w	r2, #10
 8010ca0:	4641      	mov	r1, r8
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	d107      	bne.n	8010cb6 <_dtoa_r+0xb1e>
 8010ca6:	f000 f917 	bl	8010ed8 <__multadd>
 8010caa:	4680      	mov	r8, r0
 8010cac:	4607      	mov	r7, r0
 8010cae:	9b04      	ldr	r3, [sp, #16]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	9304      	str	r3, [sp, #16]
 8010cb4:	e775      	b.n	8010ba2 <_dtoa_r+0xa0a>
 8010cb6:	f000 f90f 	bl	8010ed8 <__multadd>
 8010cba:	4639      	mov	r1, r7
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	220a      	movs	r2, #10
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 f908 	bl	8010ed8 <__multadd>
 8010cc8:	4607      	mov	r7, r0
 8010cca:	e7f0      	b.n	8010cae <_dtoa_r+0xb16>
 8010ccc:	9b04      	ldr	r3, [sp, #16]
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	9d00      	ldr	r5, [sp, #0]
 8010cd2:	4631      	mov	r1, r6
 8010cd4:	4650      	mov	r0, sl
 8010cd6:	f7ff f9d5 	bl	8010084 <quorem>
 8010cda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	f805 9b01 	strb.w	r9, [r5], #1
 8010ce4:	1aea      	subs	r2, r5, r3
 8010ce6:	9b01      	ldr	r3, [sp, #4]
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	dd07      	ble.n	8010cfc <_dtoa_r+0xb64>
 8010cec:	4651      	mov	r1, sl
 8010cee:	2300      	movs	r3, #0
 8010cf0:	220a      	movs	r2, #10
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f000 f8f0 	bl	8010ed8 <__multadd>
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	e7ea      	b.n	8010cd2 <_dtoa_r+0xb3a>
 8010cfc:	9b01      	ldr	r3, [sp, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	bfc8      	it	gt
 8010d02:	461d      	movgt	r5, r3
 8010d04:	9b00      	ldr	r3, [sp, #0]
 8010d06:	bfd8      	it	le
 8010d08:	2501      	movle	r5, #1
 8010d0a:	441d      	add	r5, r3
 8010d0c:	f04f 0800 	mov.w	r8, #0
 8010d10:	4651      	mov	r1, sl
 8010d12:	2201      	movs	r2, #1
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 fa8d 	bl	8011234 <__lshift>
 8010d1a:	4631      	mov	r1, r6
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	f000 faf5 	bl	801130c <__mcmp>
 8010d22:	2800      	cmp	r0, #0
 8010d24:	dc96      	bgt.n	8010c54 <_dtoa_r+0xabc>
 8010d26:	d102      	bne.n	8010d2e <_dtoa_r+0xb96>
 8010d28:	f019 0f01 	tst.w	r9, #1
 8010d2c:	d192      	bne.n	8010c54 <_dtoa_r+0xabc>
 8010d2e:	462b      	mov	r3, r5
 8010d30:	461d      	mov	r5, r3
 8010d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d36:	2a30      	cmp	r2, #48	; 0x30
 8010d38:	d0fa      	beq.n	8010d30 <_dtoa_r+0xb98>
 8010d3a:	e6dd      	b.n	8010af8 <_dtoa_r+0x960>
 8010d3c:	9a00      	ldr	r2, [sp, #0]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d189      	bne.n	8010c56 <_dtoa_r+0xabe>
 8010d42:	f10b 0b01 	add.w	fp, fp, #1
 8010d46:	2331      	movs	r3, #49	; 0x31
 8010d48:	e796      	b.n	8010c78 <_dtoa_r+0xae0>
 8010d4a:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <_dtoa_r+0xbdc>)
 8010d4c:	f7ff ba99 	b.w	8010282 <_dtoa_r+0xea>
 8010d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f47f aa6d 	bne.w	8010232 <_dtoa_r+0x9a>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <_dtoa_r+0xbe0>)
 8010d5a:	f7ff ba92 	b.w	8010282 <_dtoa_r+0xea>
 8010d5e:	9b01      	ldr	r3, [sp, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	dcb5      	bgt.n	8010cd0 <_dtoa_r+0xb38>
 8010d64:	9b07      	ldr	r3, [sp, #28]
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	f73f aeb1 	bgt.w	8010ace <_dtoa_r+0x936>
 8010d6c:	e7b0      	b.n	8010cd0 <_dtoa_r+0xb38>
 8010d6e:	bf00      	nop
 8010d70:	08015140 	.word	0x08015140
 8010d74:	080150a0 	.word	0x080150a0
 8010d78:	080150c4 	.word	0x080150c4

08010d7c <_free_r>:
 8010d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d7e:	2900      	cmp	r1, #0
 8010d80:	d044      	beq.n	8010e0c <_free_r+0x90>
 8010d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d86:	9001      	str	r0, [sp, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8010d8e:	bfb8      	it	lt
 8010d90:	18e4      	addlt	r4, r4, r3
 8010d92:	f7fe fb2f 	bl	800f3f4 <__malloc_lock>
 8010d96:	4a1e      	ldr	r2, [pc, #120]	; (8010e10 <_free_r+0x94>)
 8010d98:	9801      	ldr	r0, [sp, #4]
 8010d9a:	6813      	ldr	r3, [r2, #0]
 8010d9c:	b933      	cbnz	r3, 8010dac <_free_r+0x30>
 8010d9e:	6063      	str	r3, [r4, #4]
 8010da0:	6014      	str	r4, [r2, #0]
 8010da2:	b003      	add	sp, #12
 8010da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010da8:	f7fe bb2a 	b.w	800f400 <__malloc_unlock>
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	d908      	bls.n	8010dc2 <_free_r+0x46>
 8010db0:	6825      	ldr	r5, [r4, #0]
 8010db2:	1961      	adds	r1, r4, r5
 8010db4:	428b      	cmp	r3, r1
 8010db6:	bf01      	itttt	eq
 8010db8:	6819      	ldreq	r1, [r3, #0]
 8010dba:	685b      	ldreq	r3, [r3, #4]
 8010dbc:	1949      	addeq	r1, r1, r5
 8010dbe:	6021      	streq	r1, [r4, #0]
 8010dc0:	e7ed      	b.n	8010d9e <_free_r+0x22>
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	b10b      	cbz	r3, 8010dcc <_free_r+0x50>
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	d9fa      	bls.n	8010dc2 <_free_r+0x46>
 8010dcc:	6811      	ldr	r1, [r2, #0]
 8010dce:	1855      	adds	r5, r2, r1
 8010dd0:	42a5      	cmp	r5, r4
 8010dd2:	d10b      	bne.n	8010dec <_free_r+0x70>
 8010dd4:	6824      	ldr	r4, [r4, #0]
 8010dd6:	4421      	add	r1, r4
 8010dd8:	1854      	adds	r4, r2, r1
 8010dda:	42a3      	cmp	r3, r4
 8010ddc:	6011      	str	r1, [r2, #0]
 8010dde:	d1e0      	bne.n	8010da2 <_free_r+0x26>
 8010de0:	681c      	ldr	r4, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	6053      	str	r3, [r2, #4]
 8010de6:	440c      	add	r4, r1
 8010de8:	6014      	str	r4, [r2, #0]
 8010dea:	e7da      	b.n	8010da2 <_free_r+0x26>
 8010dec:	d902      	bls.n	8010df4 <_free_r+0x78>
 8010dee:	230c      	movs	r3, #12
 8010df0:	6003      	str	r3, [r0, #0]
 8010df2:	e7d6      	b.n	8010da2 <_free_r+0x26>
 8010df4:	6825      	ldr	r5, [r4, #0]
 8010df6:	1961      	adds	r1, r4, r5
 8010df8:	428b      	cmp	r3, r1
 8010dfa:	bf04      	itt	eq
 8010dfc:	6819      	ldreq	r1, [r3, #0]
 8010dfe:	685b      	ldreq	r3, [r3, #4]
 8010e00:	6063      	str	r3, [r4, #4]
 8010e02:	bf04      	itt	eq
 8010e04:	1949      	addeq	r1, r1, r5
 8010e06:	6021      	streq	r1, [r4, #0]
 8010e08:	6054      	str	r4, [r2, #4]
 8010e0a:	e7ca      	b.n	8010da2 <_free_r+0x26>
 8010e0c:	b003      	add	sp, #12
 8010e0e:	bd30      	pop	{r4, r5, pc}
 8010e10:	20000918 	.word	0x20000918

08010e14 <_Balloc>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	69c6      	ldr	r6, [r0, #28]
 8010e18:	4604      	mov	r4, r0
 8010e1a:	460d      	mov	r5, r1
 8010e1c:	b976      	cbnz	r6, 8010e3c <_Balloc+0x28>
 8010e1e:	2010      	movs	r0, #16
 8010e20:	f7fe fa38 	bl	800f294 <malloc>
 8010e24:	4602      	mov	r2, r0
 8010e26:	61e0      	str	r0, [r4, #28]
 8010e28:	b920      	cbnz	r0, 8010e34 <_Balloc+0x20>
 8010e2a:	4b18      	ldr	r3, [pc, #96]	; (8010e8c <_Balloc+0x78>)
 8010e2c:	4818      	ldr	r0, [pc, #96]	; (8010e90 <_Balloc+0x7c>)
 8010e2e:	216b      	movs	r1, #107	; 0x6b
 8010e30:	f7fe fa12 	bl	800f258 <__assert_func>
 8010e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e38:	6006      	str	r6, [r0, #0]
 8010e3a:	60c6      	str	r6, [r0, #12]
 8010e3c:	69e6      	ldr	r6, [r4, #28]
 8010e3e:	68f3      	ldr	r3, [r6, #12]
 8010e40:	b183      	cbz	r3, 8010e64 <_Balloc+0x50>
 8010e42:	69e3      	ldr	r3, [r4, #28]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e4a:	b9b8      	cbnz	r0, 8010e7c <_Balloc+0x68>
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8010e52:	1d72      	adds	r2, r6, #5
 8010e54:	0092      	lsls	r2, r2, #2
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 fe24 	bl	8011aa4 <_calloc_r>
 8010e5c:	b160      	cbz	r0, 8010e78 <_Balloc+0x64>
 8010e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e62:	e00e      	b.n	8010e82 <_Balloc+0x6e>
 8010e64:	2221      	movs	r2, #33	; 0x21
 8010e66:	2104      	movs	r1, #4
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 fe1b 	bl	8011aa4 <_calloc_r>
 8010e6e:	69e3      	ldr	r3, [r4, #28]
 8010e70:	60f0      	str	r0, [r6, #12]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1e4      	bne.n	8010e42 <_Balloc+0x2e>
 8010e78:	2000      	movs	r0, #0
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	6802      	ldr	r2, [r0, #0]
 8010e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e82:	2300      	movs	r3, #0
 8010e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e88:	e7f7      	b.n	8010e7a <_Balloc+0x66>
 8010e8a:	bf00      	nop
 8010e8c:	080150d1 	.word	0x080150d1
 8010e90:	08015151 	.word	0x08015151

08010e94 <_Bfree>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	69c6      	ldr	r6, [r0, #28]
 8010e98:	4605      	mov	r5, r0
 8010e9a:	460c      	mov	r4, r1
 8010e9c:	b976      	cbnz	r6, 8010ebc <_Bfree+0x28>
 8010e9e:	2010      	movs	r0, #16
 8010ea0:	f7fe f9f8 	bl	800f294 <malloc>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	61e8      	str	r0, [r5, #28]
 8010ea8:	b920      	cbnz	r0, 8010eb4 <_Bfree+0x20>
 8010eaa:	4b09      	ldr	r3, [pc, #36]	; (8010ed0 <_Bfree+0x3c>)
 8010eac:	4809      	ldr	r0, [pc, #36]	; (8010ed4 <_Bfree+0x40>)
 8010eae:	218f      	movs	r1, #143	; 0x8f
 8010eb0:	f7fe f9d2 	bl	800f258 <__assert_func>
 8010eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010eb8:	6006      	str	r6, [r0, #0]
 8010eba:	60c6      	str	r6, [r0, #12]
 8010ebc:	b13c      	cbz	r4, 8010ece <_Bfree+0x3a>
 8010ebe:	69eb      	ldr	r3, [r5, #28]
 8010ec0:	6862      	ldr	r2, [r4, #4]
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ec8:	6021      	str	r1, [r4, #0]
 8010eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ece:	bd70      	pop	{r4, r5, r6, pc}
 8010ed0:	080150d1 	.word	0x080150d1
 8010ed4:	08015151 	.word	0x08015151

08010ed8 <__multadd>:
 8010ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010edc:	690d      	ldr	r5, [r1, #16]
 8010ede:	4607      	mov	r7, r0
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	461e      	mov	r6, r3
 8010ee4:	f101 0c14 	add.w	ip, r1, #20
 8010ee8:	2000      	movs	r0, #0
 8010eea:	f8dc 3000 	ldr.w	r3, [ip]
 8010eee:	b299      	uxth	r1, r3
 8010ef0:	fb02 6101 	mla	r1, r2, r1, r6
 8010ef4:	0c1e      	lsrs	r6, r3, #16
 8010ef6:	0c0b      	lsrs	r3, r1, #16
 8010ef8:	fb02 3306 	mla	r3, r2, r6, r3
 8010efc:	b289      	uxth	r1, r1
 8010efe:	3001      	adds	r0, #1
 8010f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f04:	4285      	cmp	r5, r0
 8010f06:	f84c 1b04 	str.w	r1, [ip], #4
 8010f0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f0e:	dcec      	bgt.n	8010eea <__multadd+0x12>
 8010f10:	b30e      	cbz	r6, 8010f56 <__multadd+0x7e>
 8010f12:	68a3      	ldr	r3, [r4, #8]
 8010f14:	42ab      	cmp	r3, r5
 8010f16:	dc19      	bgt.n	8010f4c <__multadd+0x74>
 8010f18:	6861      	ldr	r1, [r4, #4]
 8010f1a:	4638      	mov	r0, r7
 8010f1c:	3101      	adds	r1, #1
 8010f1e:	f7ff ff79 	bl	8010e14 <_Balloc>
 8010f22:	4680      	mov	r8, r0
 8010f24:	b928      	cbnz	r0, 8010f32 <__multadd+0x5a>
 8010f26:	4602      	mov	r2, r0
 8010f28:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <__multadd+0x84>)
 8010f2a:	480d      	ldr	r0, [pc, #52]	; (8010f60 <__multadd+0x88>)
 8010f2c:	21ba      	movs	r1, #186	; 0xba
 8010f2e:	f7fe f993 	bl	800f258 <__assert_func>
 8010f32:	6922      	ldr	r2, [r4, #16]
 8010f34:	3202      	adds	r2, #2
 8010f36:	f104 010c 	add.w	r1, r4, #12
 8010f3a:	0092      	lsls	r2, r2, #2
 8010f3c:	300c      	adds	r0, #12
 8010f3e:	f7ff f88c 	bl	801005a <memcpy>
 8010f42:	4621      	mov	r1, r4
 8010f44:	4638      	mov	r0, r7
 8010f46:	f7ff ffa5 	bl	8010e94 <_Bfree>
 8010f4a:	4644      	mov	r4, r8
 8010f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f50:	3501      	adds	r5, #1
 8010f52:	615e      	str	r6, [r3, #20]
 8010f54:	6125      	str	r5, [r4, #16]
 8010f56:	4620      	mov	r0, r4
 8010f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5c:	08015140 	.word	0x08015140
 8010f60:	08015151 	.word	0x08015151

08010f64 <__hi0bits>:
 8010f64:	0c03      	lsrs	r3, r0, #16
 8010f66:	041b      	lsls	r3, r3, #16
 8010f68:	b9d3      	cbnz	r3, 8010fa0 <__hi0bits+0x3c>
 8010f6a:	0400      	lsls	r0, r0, #16
 8010f6c:	2310      	movs	r3, #16
 8010f6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f72:	bf04      	itt	eq
 8010f74:	0200      	lsleq	r0, r0, #8
 8010f76:	3308      	addeq	r3, #8
 8010f78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f7c:	bf04      	itt	eq
 8010f7e:	0100      	lsleq	r0, r0, #4
 8010f80:	3304      	addeq	r3, #4
 8010f82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f86:	bf04      	itt	eq
 8010f88:	0080      	lsleq	r0, r0, #2
 8010f8a:	3302      	addeq	r3, #2
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	db05      	blt.n	8010f9c <__hi0bits+0x38>
 8010f90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010f94:	f103 0301 	add.w	r3, r3, #1
 8010f98:	bf08      	it	eq
 8010f9a:	2320      	moveq	r3, #32
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	4770      	bx	lr
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	e7e4      	b.n	8010f6e <__hi0bits+0xa>

08010fa4 <__lo0bits>:
 8010fa4:	6803      	ldr	r3, [r0, #0]
 8010fa6:	f013 0207 	ands.w	r2, r3, #7
 8010faa:	d00c      	beq.n	8010fc6 <__lo0bits+0x22>
 8010fac:	07d9      	lsls	r1, r3, #31
 8010fae:	d422      	bmi.n	8010ff6 <__lo0bits+0x52>
 8010fb0:	079a      	lsls	r2, r3, #30
 8010fb2:	bf49      	itett	mi
 8010fb4:	085b      	lsrmi	r3, r3, #1
 8010fb6:	089b      	lsrpl	r3, r3, #2
 8010fb8:	6003      	strmi	r3, [r0, #0]
 8010fba:	2201      	movmi	r2, #1
 8010fbc:	bf5c      	itt	pl
 8010fbe:	6003      	strpl	r3, [r0, #0]
 8010fc0:	2202      	movpl	r2, #2
 8010fc2:	4610      	mov	r0, r2
 8010fc4:	4770      	bx	lr
 8010fc6:	b299      	uxth	r1, r3
 8010fc8:	b909      	cbnz	r1, 8010fce <__lo0bits+0x2a>
 8010fca:	0c1b      	lsrs	r3, r3, #16
 8010fcc:	2210      	movs	r2, #16
 8010fce:	b2d9      	uxtb	r1, r3
 8010fd0:	b909      	cbnz	r1, 8010fd6 <__lo0bits+0x32>
 8010fd2:	3208      	adds	r2, #8
 8010fd4:	0a1b      	lsrs	r3, r3, #8
 8010fd6:	0719      	lsls	r1, r3, #28
 8010fd8:	bf04      	itt	eq
 8010fda:	091b      	lsreq	r3, r3, #4
 8010fdc:	3204      	addeq	r2, #4
 8010fde:	0799      	lsls	r1, r3, #30
 8010fe0:	bf04      	itt	eq
 8010fe2:	089b      	lsreq	r3, r3, #2
 8010fe4:	3202      	addeq	r2, #2
 8010fe6:	07d9      	lsls	r1, r3, #31
 8010fe8:	d403      	bmi.n	8010ff2 <__lo0bits+0x4e>
 8010fea:	085b      	lsrs	r3, r3, #1
 8010fec:	f102 0201 	add.w	r2, r2, #1
 8010ff0:	d003      	beq.n	8010ffa <__lo0bits+0x56>
 8010ff2:	6003      	str	r3, [r0, #0]
 8010ff4:	e7e5      	b.n	8010fc2 <__lo0bits+0x1e>
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	e7e3      	b.n	8010fc2 <__lo0bits+0x1e>
 8010ffa:	2220      	movs	r2, #32
 8010ffc:	e7e1      	b.n	8010fc2 <__lo0bits+0x1e>
	...

08011000 <__i2b>:
 8011000:	b510      	push	{r4, lr}
 8011002:	460c      	mov	r4, r1
 8011004:	2101      	movs	r1, #1
 8011006:	f7ff ff05 	bl	8010e14 <_Balloc>
 801100a:	4602      	mov	r2, r0
 801100c:	b928      	cbnz	r0, 801101a <__i2b+0x1a>
 801100e:	4b05      	ldr	r3, [pc, #20]	; (8011024 <__i2b+0x24>)
 8011010:	4805      	ldr	r0, [pc, #20]	; (8011028 <__i2b+0x28>)
 8011012:	f240 1145 	movw	r1, #325	; 0x145
 8011016:	f7fe f91f 	bl	800f258 <__assert_func>
 801101a:	2301      	movs	r3, #1
 801101c:	6144      	str	r4, [r0, #20]
 801101e:	6103      	str	r3, [r0, #16]
 8011020:	bd10      	pop	{r4, pc}
 8011022:	bf00      	nop
 8011024:	08015140 	.word	0x08015140
 8011028:	08015151 	.word	0x08015151

0801102c <__multiply>:
 801102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011030:	4691      	mov	r9, r2
 8011032:	690a      	ldr	r2, [r1, #16]
 8011034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011038:	429a      	cmp	r2, r3
 801103a:	bfb8      	it	lt
 801103c:	460b      	movlt	r3, r1
 801103e:	460c      	mov	r4, r1
 8011040:	bfbc      	itt	lt
 8011042:	464c      	movlt	r4, r9
 8011044:	4699      	movlt	r9, r3
 8011046:	6927      	ldr	r7, [r4, #16]
 8011048:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801104c:	68a3      	ldr	r3, [r4, #8]
 801104e:	6861      	ldr	r1, [r4, #4]
 8011050:	eb07 060a 	add.w	r6, r7, sl
 8011054:	42b3      	cmp	r3, r6
 8011056:	b085      	sub	sp, #20
 8011058:	bfb8      	it	lt
 801105a:	3101      	addlt	r1, #1
 801105c:	f7ff feda 	bl	8010e14 <_Balloc>
 8011060:	b930      	cbnz	r0, 8011070 <__multiply+0x44>
 8011062:	4602      	mov	r2, r0
 8011064:	4b44      	ldr	r3, [pc, #272]	; (8011178 <__multiply+0x14c>)
 8011066:	4845      	ldr	r0, [pc, #276]	; (801117c <__multiply+0x150>)
 8011068:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801106c:	f7fe f8f4 	bl	800f258 <__assert_func>
 8011070:	f100 0514 	add.w	r5, r0, #20
 8011074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011078:	462b      	mov	r3, r5
 801107a:	2200      	movs	r2, #0
 801107c:	4543      	cmp	r3, r8
 801107e:	d321      	bcc.n	80110c4 <__multiply+0x98>
 8011080:	f104 0314 	add.w	r3, r4, #20
 8011084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011088:	f109 0314 	add.w	r3, r9, #20
 801108c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011090:	9202      	str	r2, [sp, #8]
 8011092:	1b3a      	subs	r2, r7, r4
 8011094:	3a15      	subs	r2, #21
 8011096:	f022 0203 	bic.w	r2, r2, #3
 801109a:	3204      	adds	r2, #4
 801109c:	f104 0115 	add.w	r1, r4, #21
 80110a0:	428f      	cmp	r7, r1
 80110a2:	bf38      	it	cc
 80110a4:	2204      	movcc	r2, #4
 80110a6:	9201      	str	r2, [sp, #4]
 80110a8:	9a02      	ldr	r2, [sp, #8]
 80110aa:	9303      	str	r3, [sp, #12]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d80c      	bhi.n	80110ca <__multiply+0x9e>
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	dd03      	ble.n	80110bc <__multiply+0x90>
 80110b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d05b      	beq.n	8011174 <__multiply+0x148>
 80110bc:	6106      	str	r6, [r0, #16]
 80110be:	b005      	add	sp, #20
 80110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c4:	f843 2b04 	str.w	r2, [r3], #4
 80110c8:	e7d8      	b.n	801107c <__multiply+0x50>
 80110ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80110ce:	f1ba 0f00 	cmp.w	sl, #0
 80110d2:	d024      	beq.n	801111e <__multiply+0xf2>
 80110d4:	f104 0e14 	add.w	lr, r4, #20
 80110d8:	46a9      	mov	r9, r5
 80110da:	f04f 0c00 	mov.w	ip, #0
 80110de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80110e2:	f8d9 1000 	ldr.w	r1, [r9]
 80110e6:	fa1f fb82 	uxth.w	fp, r2
 80110ea:	b289      	uxth	r1, r1
 80110ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80110f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80110f4:	f8d9 2000 	ldr.w	r2, [r9]
 80110f8:	4461      	add	r1, ip
 80110fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80110fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8011102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011106:	b289      	uxth	r1, r1
 8011108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801110c:	4577      	cmp	r7, lr
 801110e:	f849 1b04 	str.w	r1, [r9], #4
 8011112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011116:	d8e2      	bhi.n	80110de <__multiply+0xb2>
 8011118:	9a01      	ldr	r2, [sp, #4]
 801111a:	f845 c002 	str.w	ip, [r5, r2]
 801111e:	9a03      	ldr	r2, [sp, #12]
 8011120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011124:	3304      	adds	r3, #4
 8011126:	f1b9 0f00 	cmp.w	r9, #0
 801112a:	d021      	beq.n	8011170 <__multiply+0x144>
 801112c:	6829      	ldr	r1, [r5, #0]
 801112e:	f104 0c14 	add.w	ip, r4, #20
 8011132:	46ae      	mov	lr, r5
 8011134:	f04f 0a00 	mov.w	sl, #0
 8011138:	f8bc b000 	ldrh.w	fp, [ip]
 801113c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011140:	fb09 220b 	mla	r2, r9, fp, r2
 8011144:	4452      	add	r2, sl
 8011146:	b289      	uxth	r1, r1
 8011148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801114c:	f84e 1b04 	str.w	r1, [lr], #4
 8011150:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011154:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011158:	f8be 1000 	ldrh.w	r1, [lr]
 801115c:	fb09 110a 	mla	r1, r9, sl, r1
 8011160:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011164:	4567      	cmp	r7, ip
 8011166:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801116a:	d8e5      	bhi.n	8011138 <__multiply+0x10c>
 801116c:	9a01      	ldr	r2, [sp, #4]
 801116e:	50a9      	str	r1, [r5, r2]
 8011170:	3504      	adds	r5, #4
 8011172:	e799      	b.n	80110a8 <__multiply+0x7c>
 8011174:	3e01      	subs	r6, #1
 8011176:	e79b      	b.n	80110b0 <__multiply+0x84>
 8011178:	08015140 	.word	0x08015140
 801117c:	08015151 	.word	0x08015151

08011180 <__pow5mult>:
 8011180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011184:	4615      	mov	r5, r2
 8011186:	f012 0203 	ands.w	r2, r2, #3
 801118a:	4606      	mov	r6, r0
 801118c:	460f      	mov	r7, r1
 801118e:	d007      	beq.n	80111a0 <__pow5mult+0x20>
 8011190:	4c25      	ldr	r4, [pc, #148]	; (8011228 <__pow5mult+0xa8>)
 8011192:	3a01      	subs	r2, #1
 8011194:	2300      	movs	r3, #0
 8011196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801119a:	f7ff fe9d 	bl	8010ed8 <__multadd>
 801119e:	4607      	mov	r7, r0
 80111a0:	10ad      	asrs	r5, r5, #2
 80111a2:	d03d      	beq.n	8011220 <__pow5mult+0xa0>
 80111a4:	69f4      	ldr	r4, [r6, #28]
 80111a6:	b97c      	cbnz	r4, 80111c8 <__pow5mult+0x48>
 80111a8:	2010      	movs	r0, #16
 80111aa:	f7fe f873 	bl	800f294 <malloc>
 80111ae:	4602      	mov	r2, r0
 80111b0:	61f0      	str	r0, [r6, #28]
 80111b2:	b928      	cbnz	r0, 80111c0 <__pow5mult+0x40>
 80111b4:	4b1d      	ldr	r3, [pc, #116]	; (801122c <__pow5mult+0xac>)
 80111b6:	481e      	ldr	r0, [pc, #120]	; (8011230 <__pow5mult+0xb0>)
 80111b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80111bc:	f7fe f84c 	bl	800f258 <__assert_func>
 80111c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111c4:	6004      	str	r4, [r0, #0]
 80111c6:	60c4      	str	r4, [r0, #12]
 80111c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80111cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111d0:	b94c      	cbnz	r4, 80111e6 <__pow5mult+0x66>
 80111d2:	f240 2171 	movw	r1, #625	; 0x271
 80111d6:	4630      	mov	r0, r6
 80111d8:	f7ff ff12 	bl	8011000 <__i2b>
 80111dc:	2300      	movs	r3, #0
 80111de:	f8c8 0008 	str.w	r0, [r8, #8]
 80111e2:	4604      	mov	r4, r0
 80111e4:	6003      	str	r3, [r0, #0]
 80111e6:	f04f 0900 	mov.w	r9, #0
 80111ea:	07eb      	lsls	r3, r5, #31
 80111ec:	d50a      	bpl.n	8011204 <__pow5mult+0x84>
 80111ee:	4639      	mov	r1, r7
 80111f0:	4622      	mov	r2, r4
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7ff ff1a 	bl	801102c <__multiply>
 80111f8:	4639      	mov	r1, r7
 80111fa:	4680      	mov	r8, r0
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7ff fe49 	bl	8010e94 <_Bfree>
 8011202:	4647      	mov	r7, r8
 8011204:	106d      	asrs	r5, r5, #1
 8011206:	d00b      	beq.n	8011220 <__pow5mult+0xa0>
 8011208:	6820      	ldr	r0, [r4, #0]
 801120a:	b938      	cbnz	r0, 801121c <__pow5mult+0x9c>
 801120c:	4622      	mov	r2, r4
 801120e:	4621      	mov	r1, r4
 8011210:	4630      	mov	r0, r6
 8011212:	f7ff ff0b 	bl	801102c <__multiply>
 8011216:	6020      	str	r0, [r4, #0]
 8011218:	f8c0 9000 	str.w	r9, [r0]
 801121c:	4604      	mov	r4, r0
 801121e:	e7e4      	b.n	80111ea <__pow5mult+0x6a>
 8011220:	4638      	mov	r0, r7
 8011222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011226:	bf00      	nop
 8011228:	080152a0 	.word	0x080152a0
 801122c:	080150d1 	.word	0x080150d1
 8011230:	08015151 	.word	0x08015151

08011234 <__lshift>:
 8011234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011238:	460c      	mov	r4, r1
 801123a:	6849      	ldr	r1, [r1, #4]
 801123c:	6923      	ldr	r3, [r4, #16]
 801123e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	4607      	mov	r7, r0
 8011246:	4691      	mov	r9, r2
 8011248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801124c:	f108 0601 	add.w	r6, r8, #1
 8011250:	42b3      	cmp	r3, r6
 8011252:	db0b      	blt.n	801126c <__lshift+0x38>
 8011254:	4638      	mov	r0, r7
 8011256:	f7ff fddd 	bl	8010e14 <_Balloc>
 801125a:	4605      	mov	r5, r0
 801125c:	b948      	cbnz	r0, 8011272 <__lshift+0x3e>
 801125e:	4602      	mov	r2, r0
 8011260:	4b28      	ldr	r3, [pc, #160]	; (8011304 <__lshift+0xd0>)
 8011262:	4829      	ldr	r0, [pc, #164]	; (8011308 <__lshift+0xd4>)
 8011264:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011268:	f7fd fff6 	bl	800f258 <__assert_func>
 801126c:	3101      	adds	r1, #1
 801126e:	005b      	lsls	r3, r3, #1
 8011270:	e7ee      	b.n	8011250 <__lshift+0x1c>
 8011272:	2300      	movs	r3, #0
 8011274:	f100 0114 	add.w	r1, r0, #20
 8011278:	f100 0210 	add.w	r2, r0, #16
 801127c:	4618      	mov	r0, r3
 801127e:	4553      	cmp	r3, sl
 8011280:	db33      	blt.n	80112ea <__lshift+0xb6>
 8011282:	6920      	ldr	r0, [r4, #16]
 8011284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011288:	f104 0314 	add.w	r3, r4, #20
 801128c:	f019 091f 	ands.w	r9, r9, #31
 8011290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011298:	d02b      	beq.n	80112f2 <__lshift+0xbe>
 801129a:	f1c9 0e20 	rsb	lr, r9, #32
 801129e:	468a      	mov	sl, r1
 80112a0:	2200      	movs	r2, #0
 80112a2:	6818      	ldr	r0, [r3, #0]
 80112a4:	fa00 f009 	lsl.w	r0, r0, r9
 80112a8:	4310      	orrs	r0, r2
 80112aa:	f84a 0b04 	str.w	r0, [sl], #4
 80112ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80112b2:	459c      	cmp	ip, r3
 80112b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80112b8:	d8f3      	bhi.n	80112a2 <__lshift+0x6e>
 80112ba:	ebac 0304 	sub.w	r3, ip, r4
 80112be:	3b15      	subs	r3, #21
 80112c0:	f023 0303 	bic.w	r3, r3, #3
 80112c4:	3304      	adds	r3, #4
 80112c6:	f104 0015 	add.w	r0, r4, #21
 80112ca:	4584      	cmp	ip, r0
 80112cc:	bf38      	it	cc
 80112ce:	2304      	movcc	r3, #4
 80112d0:	50ca      	str	r2, [r1, r3]
 80112d2:	b10a      	cbz	r2, 80112d8 <__lshift+0xa4>
 80112d4:	f108 0602 	add.w	r6, r8, #2
 80112d8:	3e01      	subs	r6, #1
 80112da:	4638      	mov	r0, r7
 80112dc:	612e      	str	r6, [r5, #16]
 80112de:	4621      	mov	r1, r4
 80112e0:	f7ff fdd8 	bl	8010e94 <_Bfree>
 80112e4:	4628      	mov	r0, r5
 80112e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80112ee:	3301      	adds	r3, #1
 80112f0:	e7c5      	b.n	801127e <__lshift+0x4a>
 80112f2:	3904      	subs	r1, #4
 80112f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80112f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80112fc:	459c      	cmp	ip, r3
 80112fe:	d8f9      	bhi.n	80112f4 <__lshift+0xc0>
 8011300:	e7ea      	b.n	80112d8 <__lshift+0xa4>
 8011302:	bf00      	nop
 8011304:	08015140 	.word	0x08015140
 8011308:	08015151 	.word	0x08015151

0801130c <__mcmp>:
 801130c:	b530      	push	{r4, r5, lr}
 801130e:	6902      	ldr	r2, [r0, #16]
 8011310:	690c      	ldr	r4, [r1, #16]
 8011312:	1b12      	subs	r2, r2, r4
 8011314:	d10e      	bne.n	8011334 <__mcmp+0x28>
 8011316:	f100 0314 	add.w	r3, r0, #20
 801131a:	3114      	adds	r1, #20
 801131c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801132c:	42a5      	cmp	r5, r4
 801132e:	d003      	beq.n	8011338 <__mcmp+0x2c>
 8011330:	d305      	bcc.n	801133e <__mcmp+0x32>
 8011332:	2201      	movs	r2, #1
 8011334:	4610      	mov	r0, r2
 8011336:	bd30      	pop	{r4, r5, pc}
 8011338:	4283      	cmp	r3, r0
 801133a:	d3f3      	bcc.n	8011324 <__mcmp+0x18>
 801133c:	e7fa      	b.n	8011334 <__mcmp+0x28>
 801133e:	f04f 32ff 	mov.w	r2, #4294967295
 8011342:	e7f7      	b.n	8011334 <__mcmp+0x28>

08011344 <__mdiff>:
 8011344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	460c      	mov	r4, r1
 801134a:	4606      	mov	r6, r0
 801134c:	4611      	mov	r1, r2
 801134e:	4620      	mov	r0, r4
 8011350:	4690      	mov	r8, r2
 8011352:	f7ff ffdb 	bl	801130c <__mcmp>
 8011356:	1e05      	subs	r5, r0, #0
 8011358:	d110      	bne.n	801137c <__mdiff+0x38>
 801135a:	4629      	mov	r1, r5
 801135c:	4630      	mov	r0, r6
 801135e:	f7ff fd59 	bl	8010e14 <_Balloc>
 8011362:	b930      	cbnz	r0, 8011372 <__mdiff+0x2e>
 8011364:	4b3a      	ldr	r3, [pc, #232]	; (8011450 <__mdiff+0x10c>)
 8011366:	4602      	mov	r2, r0
 8011368:	f240 2137 	movw	r1, #567	; 0x237
 801136c:	4839      	ldr	r0, [pc, #228]	; (8011454 <__mdiff+0x110>)
 801136e:	f7fd ff73 	bl	800f258 <__assert_func>
 8011372:	2301      	movs	r3, #1
 8011374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137c:	bfa4      	itt	ge
 801137e:	4643      	movge	r3, r8
 8011380:	46a0      	movge	r8, r4
 8011382:	4630      	mov	r0, r6
 8011384:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011388:	bfa6      	itte	ge
 801138a:	461c      	movge	r4, r3
 801138c:	2500      	movge	r5, #0
 801138e:	2501      	movlt	r5, #1
 8011390:	f7ff fd40 	bl	8010e14 <_Balloc>
 8011394:	b920      	cbnz	r0, 80113a0 <__mdiff+0x5c>
 8011396:	4b2e      	ldr	r3, [pc, #184]	; (8011450 <__mdiff+0x10c>)
 8011398:	4602      	mov	r2, r0
 801139a:	f240 2145 	movw	r1, #581	; 0x245
 801139e:	e7e5      	b.n	801136c <__mdiff+0x28>
 80113a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80113a4:	6926      	ldr	r6, [r4, #16]
 80113a6:	60c5      	str	r5, [r0, #12]
 80113a8:	f104 0914 	add.w	r9, r4, #20
 80113ac:	f108 0514 	add.w	r5, r8, #20
 80113b0:	f100 0e14 	add.w	lr, r0, #20
 80113b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80113b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80113bc:	f108 0210 	add.w	r2, r8, #16
 80113c0:	46f2      	mov	sl, lr
 80113c2:	2100      	movs	r1, #0
 80113c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80113c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113cc:	fa11 f88b 	uxtah	r8, r1, fp
 80113d0:	b299      	uxth	r1, r3
 80113d2:	0c1b      	lsrs	r3, r3, #16
 80113d4:	eba8 0801 	sub.w	r8, r8, r1
 80113d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80113dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80113e0:	fa1f f888 	uxth.w	r8, r8
 80113e4:	1419      	asrs	r1, r3, #16
 80113e6:	454e      	cmp	r6, r9
 80113e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80113ec:	f84a 3b04 	str.w	r3, [sl], #4
 80113f0:	d8e8      	bhi.n	80113c4 <__mdiff+0x80>
 80113f2:	1b33      	subs	r3, r6, r4
 80113f4:	3b15      	subs	r3, #21
 80113f6:	f023 0303 	bic.w	r3, r3, #3
 80113fa:	3304      	adds	r3, #4
 80113fc:	3415      	adds	r4, #21
 80113fe:	42a6      	cmp	r6, r4
 8011400:	bf38      	it	cc
 8011402:	2304      	movcc	r3, #4
 8011404:	441d      	add	r5, r3
 8011406:	4473      	add	r3, lr
 8011408:	469e      	mov	lr, r3
 801140a:	462e      	mov	r6, r5
 801140c:	4566      	cmp	r6, ip
 801140e:	d30e      	bcc.n	801142e <__mdiff+0xea>
 8011410:	f10c 0203 	add.w	r2, ip, #3
 8011414:	1b52      	subs	r2, r2, r5
 8011416:	f022 0203 	bic.w	r2, r2, #3
 801141a:	3d03      	subs	r5, #3
 801141c:	45ac      	cmp	ip, r5
 801141e:	bf38      	it	cc
 8011420:	2200      	movcc	r2, #0
 8011422:	4413      	add	r3, r2
 8011424:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011428:	b17a      	cbz	r2, 801144a <__mdiff+0x106>
 801142a:	6107      	str	r7, [r0, #16]
 801142c:	e7a4      	b.n	8011378 <__mdiff+0x34>
 801142e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011432:	fa11 f288 	uxtah	r2, r1, r8
 8011436:	1414      	asrs	r4, r2, #16
 8011438:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801143c:	b292      	uxth	r2, r2
 801143e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011442:	f84e 2b04 	str.w	r2, [lr], #4
 8011446:	1421      	asrs	r1, r4, #16
 8011448:	e7e0      	b.n	801140c <__mdiff+0xc8>
 801144a:	3f01      	subs	r7, #1
 801144c:	e7ea      	b.n	8011424 <__mdiff+0xe0>
 801144e:	bf00      	nop
 8011450:	08015140 	.word	0x08015140
 8011454:	08015151 	.word	0x08015151

08011458 <__d2b>:
 8011458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801145c:	460f      	mov	r7, r1
 801145e:	2101      	movs	r1, #1
 8011460:	ec59 8b10 	vmov	r8, r9, d0
 8011464:	4616      	mov	r6, r2
 8011466:	f7ff fcd5 	bl	8010e14 <_Balloc>
 801146a:	4604      	mov	r4, r0
 801146c:	b930      	cbnz	r0, 801147c <__d2b+0x24>
 801146e:	4602      	mov	r2, r0
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <__d2b+0xac>)
 8011472:	4825      	ldr	r0, [pc, #148]	; (8011508 <__d2b+0xb0>)
 8011474:	f240 310f 	movw	r1, #783	; 0x30f
 8011478:	f7fd feee 	bl	800f258 <__assert_func>
 801147c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011484:	bb2d      	cbnz	r5, 80114d2 <__d2b+0x7a>
 8011486:	9301      	str	r3, [sp, #4]
 8011488:	f1b8 0300 	subs.w	r3, r8, #0
 801148c:	d026      	beq.n	80114dc <__d2b+0x84>
 801148e:	4668      	mov	r0, sp
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	f7ff fd87 	bl	8010fa4 <__lo0bits>
 8011496:	e9dd 1200 	ldrd	r1, r2, [sp]
 801149a:	b1e8      	cbz	r0, 80114d8 <__d2b+0x80>
 801149c:	f1c0 0320 	rsb	r3, r0, #32
 80114a0:	fa02 f303 	lsl.w	r3, r2, r3
 80114a4:	430b      	orrs	r3, r1
 80114a6:	40c2      	lsrs	r2, r0
 80114a8:	6163      	str	r3, [r4, #20]
 80114aa:	9201      	str	r2, [sp, #4]
 80114ac:	9b01      	ldr	r3, [sp, #4]
 80114ae:	61a3      	str	r3, [r4, #24]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	bf14      	ite	ne
 80114b4:	2202      	movne	r2, #2
 80114b6:	2201      	moveq	r2, #1
 80114b8:	6122      	str	r2, [r4, #16]
 80114ba:	b1bd      	cbz	r5, 80114ec <__d2b+0x94>
 80114bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114c0:	4405      	add	r5, r0
 80114c2:	603d      	str	r5, [r7, #0]
 80114c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114c8:	6030      	str	r0, [r6, #0]
 80114ca:	4620      	mov	r0, r4
 80114cc:	b003      	add	sp, #12
 80114ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114d6:	e7d6      	b.n	8011486 <__d2b+0x2e>
 80114d8:	6161      	str	r1, [r4, #20]
 80114da:	e7e7      	b.n	80114ac <__d2b+0x54>
 80114dc:	a801      	add	r0, sp, #4
 80114de:	f7ff fd61 	bl	8010fa4 <__lo0bits>
 80114e2:	9b01      	ldr	r3, [sp, #4]
 80114e4:	6163      	str	r3, [r4, #20]
 80114e6:	3020      	adds	r0, #32
 80114e8:	2201      	movs	r2, #1
 80114ea:	e7e5      	b.n	80114b8 <__d2b+0x60>
 80114ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80114f4:	6038      	str	r0, [r7, #0]
 80114f6:	6918      	ldr	r0, [r3, #16]
 80114f8:	f7ff fd34 	bl	8010f64 <__hi0bits>
 80114fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011500:	e7e2      	b.n	80114c8 <__d2b+0x70>
 8011502:	bf00      	nop
 8011504:	08015140 	.word	0x08015140
 8011508:	08015151 	.word	0x08015151

0801150c <__sfputc_r>:
 801150c:	6893      	ldr	r3, [r2, #8]
 801150e:	3b01      	subs	r3, #1
 8011510:	2b00      	cmp	r3, #0
 8011512:	b410      	push	{r4}
 8011514:	6093      	str	r3, [r2, #8]
 8011516:	da08      	bge.n	801152a <__sfputc_r+0x1e>
 8011518:	6994      	ldr	r4, [r2, #24]
 801151a:	42a3      	cmp	r3, r4
 801151c:	db01      	blt.n	8011522 <__sfputc_r+0x16>
 801151e:	290a      	cmp	r1, #10
 8011520:	d103      	bne.n	801152a <__sfputc_r+0x1e>
 8011522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011526:	f000 b9e3 	b.w	80118f0 <__swbuf_r>
 801152a:	6813      	ldr	r3, [r2, #0]
 801152c:	1c58      	adds	r0, r3, #1
 801152e:	6010      	str	r0, [r2, #0]
 8011530:	7019      	strb	r1, [r3, #0]
 8011532:	4608      	mov	r0, r1
 8011534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011538:	4770      	bx	lr

0801153a <__sfputs_r>:
 801153a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153c:	4606      	mov	r6, r0
 801153e:	460f      	mov	r7, r1
 8011540:	4614      	mov	r4, r2
 8011542:	18d5      	adds	r5, r2, r3
 8011544:	42ac      	cmp	r4, r5
 8011546:	d101      	bne.n	801154c <__sfputs_r+0x12>
 8011548:	2000      	movs	r0, #0
 801154a:	e007      	b.n	801155c <__sfputs_r+0x22>
 801154c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011550:	463a      	mov	r2, r7
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff ffda 	bl	801150c <__sfputc_r>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d1f3      	bne.n	8011544 <__sfputs_r+0xa>
 801155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011560 <_vfiprintf_r>:
 8011560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	460d      	mov	r5, r1
 8011566:	b09d      	sub	sp, #116	; 0x74
 8011568:	4614      	mov	r4, r2
 801156a:	4698      	mov	r8, r3
 801156c:	4606      	mov	r6, r0
 801156e:	b118      	cbz	r0, 8011578 <_vfiprintf_r+0x18>
 8011570:	6a03      	ldr	r3, [r0, #32]
 8011572:	b90b      	cbnz	r3, 8011578 <_vfiprintf_r+0x18>
 8011574:	f7fe fc3c 	bl	800fdf0 <__sinit>
 8011578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801157a:	07d9      	lsls	r1, r3, #31
 801157c:	d405      	bmi.n	801158a <_vfiprintf_r+0x2a>
 801157e:	89ab      	ldrh	r3, [r5, #12]
 8011580:	059a      	lsls	r2, r3, #22
 8011582:	d402      	bmi.n	801158a <_vfiprintf_r+0x2a>
 8011584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011586:	f7fe fd66 	bl	8010056 <__retarget_lock_acquire_recursive>
 801158a:	89ab      	ldrh	r3, [r5, #12]
 801158c:	071b      	lsls	r3, r3, #28
 801158e:	d501      	bpl.n	8011594 <_vfiprintf_r+0x34>
 8011590:	692b      	ldr	r3, [r5, #16]
 8011592:	b99b      	cbnz	r3, 80115bc <_vfiprintf_r+0x5c>
 8011594:	4629      	mov	r1, r5
 8011596:	4630      	mov	r0, r6
 8011598:	f000 f9e8 	bl	801196c <__swsetup_r>
 801159c:	b170      	cbz	r0, 80115bc <_vfiprintf_r+0x5c>
 801159e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a0:	07dc      	lsls	r4, r3, #31
 80115a2:	d504      	bpl.n	80115ae <_vfiprintf_r+0x4e>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	b01d      	add	sp, #116	; 0x74
 80115aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ae:	89ab      	ldrh	r3, [r5, #12]
 80115b0:	0598      	lsls	r0, r3, #22
 80115b2:	d4f7      	bmi.n	80115a4 <_vfiprintf_r+0x44>
 80115b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115b6:	f7fe fd4f 	bl	8010058 <__retarget_lock_release_recursive>
 80115ba:	e7f3      	b.n	80115a4 <_vfiprintf_r+0x44>
 80115bc:	2300      	movs	r3, #0
 80115be:	9309      	str	r3, [sp, #36]	; 0x24
 80115c0:	2320      	movs	r3, #32
 80115c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80115ca:	2330      	movs	r3, #48	; 0x30
 80115cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011780 <_vfiprintf_r+0x220>
 80115d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115d4:	f04f 0901 	mov.w	r9, #1
 80115d8:	4623      	mov	r3, r4
 80115da:	469a      	mov	sl, r3
 80115dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115e0:	b10a      	cbz	r2, 80115e6 <_vfiprintf_r+0x86>
 80115e2:	2a25      	cmp	r2, #37	; 0x25
 80115e4:	d1f9      	bne.n	80115da <_vfiprintf_r+0x7a>
 80115e6:	ebba 0b04 	subs.w	fp, sl, r4
 80115ea:	d00b      	beq.n	8011604 <_vfiprintf_r+0xa4>
 80115ec:	465b      	mov	r3, fp
 80115ee:	4622      	mov	r2, r4
 80115f0:	4629      	mov	r1, r5
 80115f2:	4630      	mov	r0, r6
 80115f4:	f7ff ffa1 	bl	801153a <__sfputs_r>
 80115f8:	3001      	adds	r0, #1
 80115fa:	f000 80a9 	beq.w	8011750 <_vfiprintf_r+0x1f0>
 80115fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011600:	445a      	add	r2, fp
 8011602:	9209      	str	r2, [sp, #36]	; 0x24
 8011604:	f89a 3000 	ldrb.w	r3, [sl]
 8011608:	2b00      	cmp	r3, #0
 801160a:	f000 80a1 	beq.w	8011750 <_vfiprintf_r+0x1f0>
 801160e:	2300      	movs	r3, #0
 8011610:	f04f 32ff 	mov.w	r2, #4294967295
 8011614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011618:	f10a 0a01 	add.w	sl, sl, #1
 801161c:	9304      	str	r3, [sp, #16]
 801161e:	9307      	str	r3, [sp, #28]
 8011620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011624:	931a      	str	r3, [sp, #104]	; 0x68
 8011626:	4654      	mov	r4, sl
 8011628:	2205      	movs	r2, #5
 801162a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162e:	4854      	ldr	r0, [pc, #336]	; (8011780 <_vfiprintf_r+0x220>)
 8011630:	f7ee fdfe 	bl	8000230 <memchr>
 8011634:	9a04      	ldr	r2, [sp, #16]
 8011636:	b9d8      	cbnz	r0, 8011670 <_vfiprintf_r+0x110>
 8011638:	06d1      	lsls	r1, r2, #27
 801163a:	bf44      	itt	mi
 801163c:	2320      	movmi	r3, #32
 801163e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011642:	0713      	lsls	r3, r2, #28
 8011644:	bf44      	itt	mi
 8011646:	232b      	movmi	r3, #43	; 0x2b
 8011648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801164c:	f89a 3000 	ldrb.w	r3, [sl]
 8011650:	2b2a      	cmp	r3, #42	; 0x2a
 8011652:	d015      	beq.n	8011680 <_vfiprintf_r+0x120>
 8011654:	9a07      	ldr	r2, [sp, #28]
 8011656:	4654      	mov	r4, sl
 8011658:	2000      	movs	r0, #0
 801165a:	f04f 0c0a 	mov.w	ip, #10
 801165e:	4621      	mov	r1, r4
 8011660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011664:	3b30      	subs	r3, #48	; 0x30
 8011666:	2b09      	cmp	r3, #9
 8011668:	d94d      	bls.n	8011706 <_vfiprintf_r+0x1a6>
 801166a:	b1b0      	cbz	r0, 801169a <_vfiprintf_r+0x13a>
 801166c:	9207      	str	r2, [sp, #28]
 801166e:	e014      	b.n	801169a <_vfiprintf_r+0x13a>
 8011670:	eba0 0308 	sub.w	r3, r0, r8
 8011674:	fa09 f303 	lsl.w	r3, r9, r3
 8011678:	4313      	orrs	r3, r2
 801167a:	9304      	str	r3, [sp, #16]
 801167c:	46a2      	mov	sl, r4
 801167e:	e7d2      	b.n	8011626 <_vfiprintf_r+0xc6>
 8011680:	9b03      	ldr	r3, [sp, #12]
 8011682:	1d19      	adds	r1, r3, #4
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	9103      	str	r1, [sp, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	bfbb      	ittet	lt
 801168c:	425b      	neglt	r3, r3
 801168e:	f042 0202 	orrlt.w	r2, r2, #2
 8011692:	9307      	strge	r3, [sp, #28]
 8011694:	9307      	strlt	r3, [sp, #28]
 8011696:	bfb8      	it	lt
 8011698:	9204      	strlt	r2, [sp, #16]
 801169a:	7823      	ldrb	r3, [r4, #0]
 801169c:	2b2e      	cmp	r3, #46	; 0x2e
 801169e:	d10c      	bne.n	80116ba <_vfiprintf_r+0x15a>
 80116a0:	7863      	ldrb	r3, [r4, #1]
 80116a2:	2b2a      	cmp	r3, #42	; 0x2a
 80116a4:	d134      	bne.n	8011710 <_vfiprintf_r+0x1b0>
 80116a6:	9b03      	ldr	r3, [sp, #12]
 80116a8:	1d1a      	adds	r2, r3, #4
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	9203      	str	r2, [sp, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	bfb8      	it	lt
 80116b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80116b6:	3402      	adds	r4, #2
 80116b8:	9305      	str	r3, [sp, #20]
 80116ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011790 <_vfiprintf_r+0x230>
 80116be:	7821      	ldrb	r1, [r4, #0]
 80116c0:	2203      	movs	r2, #3
 80116c2:	4650      	mov	r0, sl
 80116c4:	f7ee fdb4 	bl	8000230 <memchr>
 80116c8:	b138      	cbz	r0, 80116da <_vfiprintf_r+0x17a>
 80116ca:	9b04      	ldr	r3, [sp, #16]
 80116cc:	eba0 000a 	sub.w	r0, r0, sl
 80116d0:	2240      	movs	r2, #64	; 0x40
 80116d2:	4082      	lsls	r2, r0
 80116d4:	4313      	orrs	r3, r2
 80116d6:	3401      	adds	r4, #1
 80116d8:	9304      	str	r3, [sp, #16]
 80116da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116de:	4829      	ldr	r0, [pc, #164]	; (8011784 <_vfiprintf_r+0x224>)
 80116e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116e4:	2206      	movs	r2, #6
 80116e6:	f7ee fda3 	bl	8000230 <memchr>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d03f      	beq.n	801176e <_vfiprintf_r+0x20e>
 80116ee:	4b26      	ldr	r3, [pc, #152]	; (8011788 <_vfiprintf_r+0x228>)
 80116f0:	bb1b      	cbnz	r3, 801173a <_vfiprintf_r+0x1da>
 80116f2:	9b03      	ldr	r3, [sp, #12]
 80116f4:	3307      	adds	r3, #7
 80116f6:	f023 0307 	bic.w	r3, r3, #7
 80116fa:	3308      	adds	r3, #8
 80116fc:	9303      	str	r3, [sp, #12]
 80116fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011700:	443b      	add	r3, r7
 8011702:	9309      	str	r3, [sp, #36]	; 0x24
 8011704:	e768      	b.n	80115d8 <_vfiprintf_r+0x78>
 8011706:	fb0c 3202 	mla	r2, ip, r2, r3
 801170a:	460c      	mov	r4, r1
 801170c:	2001      	movs	r0, #1
 801170e:	e7a6      	b.n	801165e <_vfiprintf_r+0xfe>
 8011710:	2300      	movs	r3, #0
 8011712:	3401      	adds	r4, #1
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	4619      	mov	r1, r3
 8011718:	f04f 0c0a 	mov.w	ip, #10
 801171c:	4620      	mov	r0, r4
 801171e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011722:	3a30      	subs	r2, #48	; 0x30
 8011724:	2a09      	cmp	r2, #9
 8011726:	d903      	bls.n	8011730 <_vfiprintf_r+0x1d0>
 8011728:	2b00      	cmp	r3, #0
 801172a:	d0c6      	beq.n	80116ba <_vfiprintf_r+0x15a>
 801172c:	9105      	str	r1, [sp, #20]
 801172e:	e7c4      	b.n	80116ba <_vfiprintf_r+0x15a>
 8011730:	fb0c 2101 	mla	r1, ip, r1, r2
 8011734:	4604      	mov	r4, r0
 8011736:	2301      	movs	r3, #1
 8011738:	e7f0      	b.n	801171c <_vfiprintf_r+0x1bc>
 801173a:	ab03      	add	r3, sp, #12
 801173c:	9300      	str	r3, [sp, #0]
 801173e:	462a      	mov	r2, r5
 8011740:	4b12      	ldr	r3, [pc, #72]	; (801178c <_vfiprintf_r+0x22c>)
 8011742:	a904      	add	r1, sp, #16
 8011744:	4630      	mov	r0, r6
 8011746:	f7fd ff01 	bl	800f54c <_printf_float>
 801174a:	4607      	mov	r7, r0
 801174c:	1c78      	adds	r0, r7, #1
 801174e:	d1d6      	bne.n	80116fe <_vfiprintf_r+0x19e>
 8011750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011752:	07d9      	lsls	r1, r3, #31
 8011754:	d405      	bmi.n	8011762 <_vfiprintf_r+0x202>
 8011756:	89ab      	ldrh	r3, [r5, #12]
 8011758:	059a      	lsls	r2, r3, #22
 801175a:	d402      	bmi.n	8011762 <_vfiprintf_r+0x202>
 801175c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801175e:	f7fe fc7b 	bl	8010058 <__retarget_lock_release_recursive>
 8011762:	89ab      	ldrh	r3, [r5, #12]
 8011764:	065b      	lsls	r3, r3, #25
 8011766:	f53f af1d 	bmi.w	80115a4 <_vfiprintf_r+0x44>
 801176a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801176c:	e71c      	b.n	80115a8 <_vfiprintf_r+0x48>
 801176e:	ab03      	add	r3, sp, #12
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	462a      	mov	r2, r5
 8011774:	4b05      	ldr	r3, [pc, #20]	; (801178c <_vfiprintf_r+0x22c>)
 8011776:	a904      	add	r1, sp, #16
 8011778:	4630      	mov	r0, r6
 801177a:	f7fe f98b 	bl	800fa94 <_printf_i>
 801177e:	e7e4      	b.n	801174a <_vfiprintf_r+0x1ea>
 8011780:	080152ac 	.word	0x080152ac
 8011784:	080152b6 	.word	0x080152b6
 8011788:	0800f54d 	.word	0x0800f54d
 801178c:	0801153b 	.word	0x0801153b
 8011790:	080152b2 	.word	0x080152b2

08011794 <__sflush_r>:
 8011794:	898a      	ldrh	r2, [r1, #12]
 8011796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801179a:	4605      	mov	r5, r0
 801179c:	0710      	lsls	r0, r2, #28
 801179e:	460c      	mov	r4, r1
 80117a0:	d458      	bmi.n	8011854 <__sflush_r+0xc0>
 80117a2:	684b      	ldr	r3, [r1, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	dc05      	bgt.n	80117b4 <__sflush_r+0x20>
 80117a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	dc02      	bgt.n	80117b4 <__sflush_r+0x20>
 80117ae:	2000      	movs	r0, #0
 80117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117b6:	2e00      	cmp	r6, #0
 80117b8:	d0f9      	beq.n	80117ae <__sflush_r+0x1a>
 80117ba:	2300      	movs	r3, #0
 80117bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117c0:	682f      	ldr	r7, [r5, #0]
 80117c2:	6a21      	ldr	r1, [r4, #32]
 80117c4:	602b      	str	r3, [r5, #0]
 80117c6:	d032      	beq.n	801182e <__sflush_r+0x9a>
 80117c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117ca:	89a3      	ldrh	r3, [r4, #12]
 80117cc:	075a      	lsls	r2, r3, #29
 80117ce:	d505      	bpl.n	80117dc <__sflush_r+0x48>
 80117d0:	6863      	ldr	r3, [r4, #4]
 80117d2:	1ac0      	subs	r0, r0, r3
 80117d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117d6:	b10b      	cbz	r3, 80117dc <__sflush_r+0x48>
 80117d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117da:	1ac0      	subs	r0, r0, r3
 80117dc:	2300      	movs	r3, #0
 80117de:	4602      	mov	r2, r0
 80117e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117e2:	6a21      	ldr	r1, [r4, #32]
 80117e4:	4628      	mov	r0, r5
 80117e6:	47b0      	blx	r6
 80117e8:	1c43      	adds	r3, r0, #1
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	d106      	bne.n	80117fc <__sflush_r+0x68>
 80117ee:	6829      	ldr	r1, [r5, #0]
 80117f0:	291d      	cmp	r1, #29
 80117f2:	d82b      	bhi.n	801184c <__sflush_r+0xb8>
 80117f4:	4a29      	ldr	r2, [pc, #164]	; (801189c <__sflush_r+0x108>)
 80117f6:	410a      	asrs	r2, r1
 80117f8:	07d6      	lsls	r6, r2, #31
 80117fa:	d427      	bmi.n	801184c <__sflush_r+0xb8>
 80117fc:	2200      	movs	r2, #0
 80117fe:	6062      	str	r2, [r4, #4]
 8011800:	04d9      	lsls	r1, r3, #19
 8011802:	6922      	ldr	r2, [r4, #16]
 8011804:	6022      	str	r2, [r4, #0]
 8011806:	d504      	bpl.n	8011812 <__sflush_r+0x7e>
 8011808:	1c42      	adds	r2, r0, #1
 801180a:	d101      	bne.n	8011810 <__sflush_r+0x7c>
 801180c:	682b      	ldr	r3, [r5, #0]
 801180e:	b903      	cbnz	r3, 8011812 <__sflush_r+0x7e>
 8011810:	6560      	str	r0, [r4, #84]	; 0x54
 8011812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011814:	602f      	str	r7, [r5, #0]
 8011816:	2900      	cmp	r1, #0
 8011818:	d0c9      	beq.n	80117ae <__sflush_r+0x1a>
 801181a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801181e:	4299      	cmp	r1, r3
 8011820:	d002      	beq.n	8011828 <__sflush_r+0x94>
 8011822:	4628      	mov	r0, r5
 8011824:	f7ff faaa 	bl	8010d7c <_free_r>
 8011828:	2000      	movs	r0, #0
 801182a:	6360      	str	r0, [r4, #52]	; 0x34
 801182c:	e7c0      	b.n	80117b0 <__sflush_r+0x1c>
 801182e:	2301      	movs	r3, #1
 8011830:	4628      	mov	r0, r5
 8011832:	47b0      	blx	r6
 8011834:	1c41      	adds	r1, r0, #1
 8011836:	d1c8      	bne.n	80117ca <__sflush_r+0x36>
 8011838:	682b      	ldr	r3, [r5, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0c5      	beq.n	80117ca <__sflush_r+0x36>
 801183e:	2b1d      	cmp	r3, #29
 8011840:	d001      	beq.n	8011846 <__sflush_r+0xb2>
 8011842:	2b16      	cmp	r3, #22
 8011844:	d101      	bne.n	801184a <__sflush_r+0xb6>
 8011846:	602f      	str	r7, [r5, #0]
 8011848:	e7b1      	b.n	80117ae <__sflush_r+0x1a>
 801184a:	89a3      	ldrh	r3, [r4, #12]
 801184c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011850:	81a3      	strh	r3, [r4, #12]
 8011852:	e7ad      	b.n	80117b0 <__sflush_r+0x1c>
 8011854:	690f      	ldr	r7, [r1, #16]
 8011856:	2f00      	cmp	r7, #0
 8011858:	d0a9      	beq.n	80117ae <__sflush_r+0x1a>
 801185a:	0793      	lsls	r3, r2, #30
 801185c:	680e      	ldr	r6, [r1, #0]
 801185e:	bf08      	it	eq
 8011860:	694b      	ldreq	r3, [r1, #20]
 8011862:	600f      	str	r7, [r1, #0]
 8011864:	bf18      	it	ne
 8011866:	2300      	movne	r3, #0
 8011868:	eba6 0807 	sub.w	r8, r6, r7
 801186c:	608b      	str	r3, [r1, #8]
 801186e:	f1b8 0f00 	cmp.w	r8, #0
 8011872:	dd9c      	ble.n	80117ae <__sflush_r+0x1a>
 8011874:	6a21      	ldr	r1, [r4, #32]
 8011876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011878:	4643      	mov	r3, r8
 801187a:	463a      	mov	r2, r7
 801187c:	4628      	mov	r0, r5
 801187e:	47b0      	blx	r6
 8011880:	2800      	cmp	r0, #0
 8011882:	dc06      	bgt.n	8011892 <__sflush_r+0xfe>
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801188a:	81a3      	strh	r3, [r4, #12]
 801188c:	f04f 30ff 	mov.w	r0, #4294967295
 8011890:	e78e      	b.n	80117b0 <__sflush_r+0x1c>
 8011892:	4407      	add	r7, r0
 8011894:	eba8 0800 	sub.w	r8, r8, r0
 8011898:	e7e9      	b.n	801186e <__sflush_r+0xda>
 801189a:	bf00      	nop
 801189c:	dfbffffe 	.word	0xdfbffffe

080118a0 <_fflush_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	690b      	ldr	r3, [r1, #16]
 80118a4:	4605      	mov	r5, r0
 80118a6:	460c      	mov	r4, r1
 80118a8:	b913      	cbnz	r3, 80118b0 <_fflush_r+0x10>
 80118aa:	2500      	movs	r5, #0
 80118ac:	4628      	mov	r0, r5
 80118ae:	bd38      	pop	{r3, r4, r5, pc}
 80118b0:	b118      	cbz	r0, 80118ba <_fflush_r+0x1a>
 80118b2:	6a03      	ldr	r3, [r0, #32]
 80118b4:	b90b      	cbnz	r3, 80118ba <_fflush_r+0x1a>
 80118b6:	f7fe fa9b 	bl	800fdf0 <__sinit>
 80118ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0f3      	beq.n	80118aa <_fflush_r+0xa>
 80118c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118c4:	07d0      	lsls	r0, r2, #31
 80118c6:	d404      	bmi.n	80118d2 <_fflush_r+0x32>
 80118c8:	0599      	lsls	r1, r3, #22
 80118ca:	d402      	bmi.n	80118d2 <_fflush_r+0x32>
 80118cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ce:	f7fe fbc2 	bl	8010056 <__retarget_lock_acquire_recursive>
 80118d2:	4628      	mov	r0, r5
 80118d4:	4621      	mov	r1, r4
 80118d6:	f7ff ff5d 	bl	8011794 <__sflush_r>
 80118da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118dc:	07da      	lsls	r2, r3, #31
 80118de:	4605      	mov	r5, r0
 80118e0:	d4e4      	bmi.n	80118ac <_fflush_r+0xc>
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	059b      	lsls	r3, r3, #22
 80118e6:	d4e1      	bmi.n	80118ac <_fflush_r+0xc>
 80118e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ea:	f7fe fbb5 	bl	8010058 <__retarget_lock_release_recursive>
 80118ee:	e7dd      	b.n	80118ac <_fflush_r+0xc>

080118f0 <__swbuf_r>:
 80118f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f2:	460e      	mov	r6, r1
 80118f4:	4614      	mov	r4, r2
 80118f6:	4605      	mov	r5, r0
 80118f8:	b118      	cbz	r0, 8011902 <__swbuf_r+0x12>
 80118fa:	6a03      	ldr	r3, [r0, #32]
 80118fc:	b90b      	cbnz	r3, 8011902 <__swbuf_r+0x12>
 80118fe:	f7fe fa77 	bl	800fdf0 <__sinit>
 8011902:	69a3      	ldr	r3, [r4, #24]
 8011904:	60a3      	str	r3, [r4, #8]
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	071a      	lsls	r2, r3, #28
 801190a:	d525      	bpl.n	8011958 <__swbuf_r+0x68>
 801190c:	6923      	ldr	r3, [r4, #16]
 801190e:	b31b      	cbz	r3, 8011958 <__swbuf_r+0x68>
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	6922      	ldr	r2, [r4, #16]
 8011914:	1a98      	subs	r0, r3, r2
 8011916:	6963      	ldr	r3, [r4, #20]
 8011918:	b2f6      	uxtb	r6, r6
 801191a:	4283      	cmp	r3, r0
 801191c:	4637      	mov	r7, r6
 801191e:	dc04      	bgt.n	801192a <__swbuf_r+0x3a>
 8011920:	4621      	mov	r1, r4
 8011922:	4628      	mov	r0, r5
 8011924:	f7ff ffbc 	bl	80118a0 <_fflush_r>
 8011928:	b9e0      	cbnz	r0, 8011964 <__swbuf_r+0x74>
 801192a:	68a3      	ldr	r3, [r4, #8]
 801192c:	3b01      	subs	r3, #1
 801192e:	60a3      	str	r3, [r4, #8]
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	6022      	str	r2, [r4, #0]
 8011936:	701e      	strb	r6, [r3, #0]
 8011938:	6962      	ldr	r2, [r4, #20]
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	429a      	cmp	r2, r3
 801193e:	d004      	beq.n	801194a <__swbuf_r+0x5a>
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	07db      	lsls	r3, r3, #31
 8011944:	d506      	bpl.n	8011954 <__swbuf_r+0x64>
 8011946:	2e0a      	cmp	r6, #10
 8011948:	d104      	bne.n	8011954 <__swbuf_r+0x64>
 801194a:	4621      	mov	r1, r4
 801194c:	4628      	mov	r0, r5
 801194e:	f7ff ffa7 	bl	80118a0 <_fflush_r>
 8011952:	b938      	cbnz	r0, 8011964 <__swbuf_r+0x74>
 8011954:	4638      	mov	r0, r7
 8011956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011958:	4621      	mov	r1, r4
 801195a:	4628      	mov	r0, r5
 801195c:	f000 f806 	bl	801196c <__swsetup_r>
 8011960:	2800      	cmp	r0, #0
 8011962:	d0d5      	beq.n	8011910 <__swbuf_r+0x20>
 8011964:	f04f 37ff 	mov.w	r7, #4294967295
 8011968:	e7f4      	b.n	8011954 <__swbuf_r+0x64>
	...

0801196c <__swsetup_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4b2a      	ldr	r3, [pc, #168]	; (8011a18 <__swsetup_r+0xac>)
 8011970:	4605      	mov	r5, r0
 8011972:	6818      	ldr	r0, [r3, #0]
 8011974:	460c      	mov	r4, r1
 8011976:	b118      	cbz	r0, 8011980 <__swsetup_r+0x14>
 8011978:	6a03      	ldr	r3, [r0, #32]
 801197a:	b90b      	cbnz	r3, 8011980 <__swsetup_r+0x14>
 801197c:	f7fe fa38 	bl	800fdf0 <__sinit>
 8011980:	89a3      	ldrh	r3, [r4, #12]
 8011982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011986:	0718      	lsls	r0, r3, #28
 8011988:	d422      	bmi.n	80119d0 <__swsetup_r+0x64>
 801198a:	06d9      	lsls	r1, r3, #27
 801198c:	d407      	bmi.n	801199e <__swsetup_r+0x32>
 801198e:	2309      	movs	r3, #9
 8011990:	602b      	str	r3, [r5, #0]
 8011992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011996:	81a3      	strh	r3, [r4, #12]
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	e034      	b.n	8011a08 <__swsetup_r+0x9c>
 801199e:	0758      	lsls	r0, r3, #29
 80119a0:	d512      	bpl.n	80119c8 <__swsetup_r+0x5c>
 80119a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119a4:	b141      	cbz	r1, 80119b8 <__swsetup_r+0x4c>
 80119a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119aa:	4299      	cmp	r1, r3
 80119ac:	d002      	beq.n	80119b4 <__swsetup_r+0x48>
 80119ae:	4628      	mov	r0, r5
 80119b0:	f7ff f9e4 	bl	8010d7c <_free_r>
 80119b4:	2300      	movs	r3, #0
 80119b6:	6363      	str	r3, [r4, #52]	; 0x34
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119be:	81a3      	strh	r3, [r4, #12]
 80119c0:	2300      	movs	r3, #0
 80119c2:	6063      	str	r3, [r4, #4]
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	6023      	str	r3, [r4, #0]
 80119c8:	89a3      	ldrh	r3, [r4, #12]
 80119ca:	f043 0308 	orr.w	r3, r3, #8
 80119ce:	81a3      	strh	r3, [r4, #12]
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	b94b      	cbnz	r3, 80119e8 <__swsetup_r+0x7c>
 80119d4:	89a3      	ldrh	r3, [r4, #12]
 80119d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119de:	d003      	beq.n	80119e8 <__swsetup_r+0x7c>
 80119e0:	4621      	mov	r1, r4
 80119e2:	4628      	mov	r0, r5
 80119e4:	f000 f8b9 	bl	8011b5a <__smakebuf_r>
 80119e8:	89a0      	ldrh	r0, [r4, #12]
 80119ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119ee:	f010 0301 	ands.w	r3, r0, #1
 80119f2:	d00a      	beq.n	8011a0a <__swsetup_r+0x9e>
 80119f4:	2300      	movs	r3, #0
 80119f6:	60a3      	str	r3, [r4, #8]
 80119f8:	6963      	ldr	r3, [r4, #20]
 80119fa:	425b      	negs	r3, r3
 80119fc:	61a3      	str	r3, [r4, #24]
 80119fe:	6923      	ldr	r3, [r4, #16]
 8011a00:	b943      	cbnz	r3, 8011a14 <__swsetup_r+0xa8>
 8011a02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a06:	d1c4      	bne.n	8011992 <__swsetup_r+0x26>
 8011a08:	bd38      	pop	{r3, r4, r5, pc}
 8011a0a:	0781      	lsls	r1, r0, #30
 8011a0c:	bf58      	it	pl
 8011a0e:	6963      	ldrpl	r3, [r4, #20]
 8011a10:	60a3      	str	r3, [r4, #8]
 8011a12:	e7f4      	b.n	80119fe <__swsetup_r+0x92>
 8011a14:	2000      	movs	r0, #0
 8011a16:	e7f7      	b.n	8011a08 <__swsetup_r+0x9c>
 8011a18:	20000070 	.word	0x20000070

08011a1c <_raise_r>:
 8011a1c:	291f      	cmp	r1, #31
 8011a1e:	b538      	push	{r3, r4, r5, lr}
 8011a20:	4604      	mov	r4, r0
 8011a22:	460d      	mov	r5, r1
 8011a24:	d904      	bls.n	8011a30 <_raise_r+0x14>
 8011a26:	2316      	movs	r3, #22
 8011a28:	6003      	str	r3, [r0, #0]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011a32:	b112      	cbz	r2, 8011a3a <_raise_r+0x1e>
 8011a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a38:	b94b      	cbnz	r3, 8011a4e <_raise_r+0x32>
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	f000 f830 	bl	8011aa0 <_getpid_r>
 8011a40:	462a      	mov	r2, r5
 8011a42:	4601      	mov	r1, r0
 8011a44:	4620      	mov	r0, r4
 8011a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a4a:	f000 b817 	b.w	8011a7c <_kill_r>
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d00a      	beq.n	8011a68 <_raise_r+0x4c>
 8011a52:	1c59      	adds	r1, r3, #1
 8011a54:	d103      	bne.n	8011a5e <_raise_r+0x42>
 8011a56:	2316      	movs	r3, #22
 8011a58:	6003      	str	r3, [r0, #0]
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	e7e7      	b.n	8011a2e <_raise_r+0x12>
 8011a5e:	2400      	movs	r4, #0
 8011a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a64:	4628      	mov	r0, r5
 8011a66:	4798      	blx	r3
 8011a68:	2000      	movs	r0, #0
 8011a6a:	e7e0      	b.n	8011a2e <_raise_r+0x12>

08011a6c <raise>:
 8011a6c:	4b02      	ldr	r3, [pc, #8]	; (8011a78 <raise+0xc>)
 8011a6e:	4601      	mov	r1, r0
 8011a70:	6818      	ldr	r0, [r3, #0]
 8011a72:	f7ff bfd3 	b.w	8011a1c <_raise_r>
 8011a76:	bf00      	nop
 8011a78:	20000070 	.word	0x20000070

08011a7c <_kill_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d07      	ldr	r5, [pc, #28]	; (8011a9c <_kill_r+0x20>)
 8011a80:	2300      	movs	r3, #0
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	4611      	mov	r1, r2
 8011a88:	602b      	str	r3, [r5, #0]
 8011a8a:	f7f8 fd91 	bl	800a5b0 <_kill>
 8011a8e:	1c43      	adds	r3, r0, #1
 8011a90:	d102      	bne.n	8011a98 <_kill_r+0x1c>
 8011a92:	682b      	ldr	r3, [r5, #0]
 8011a94:	b103      	cbz	r3, 8011a98 <_kill_r+0x1c>
 8011a96:	6023      	str	r3, [r4, #0]
 8011a98:	bd38      	pop	{r3, r4, r5, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20000a5c 	.word	0x20000a5c

08011aa0 <_getpid_r>:
 8011aa0:	f7f8 bd7e 	b.w	800a5a0 <_getpid>

08011aa4 <_calloc_r>:
 8011aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aa6:	fba1 2402 	umull	r2, r4, r1, r2
 8011aaa:	b94c      	cbnz	r4, 8011ac0 <_calloc_r+0x1c>
 8011aac:	4611      	mov	r1, r2
 8011aae:	9201      	str	r2, [sp, #4]
 8011ab0:	f7fd fc20 	bl	800f2f4 <_malloc_r>
 8011ab4:	9a01      	ldr	r2, [sp, #4]
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	b930      	cbnz	r0, 8011ac8 <_calloc_r+0x24>
 8011aba:	4628      	mov	r0, r5
 8011abc:	b003      	add	sp, #12
 8011abe:	bd30      	pop	{r4, r5, pc}
 8011ac0:	220c      	movs	r2, #12
 8011ac2:	6002      	str	r2, [r0, #0]
 8011ac4:	2500      	movs	r5, #0
 8011ac6:	e7f8      	b.n	8011aba <_calloc_r+0x16>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	f7fe fa36 	bl	800ff3a <memset>
 8011ace:	e7f4      	b.n	8011aba <_calloc_r+0x16>

08011ad0 <__ascii_mbtowc>:
 8011ad0:	b082      	sub	sp, #8
 8011ad2:	b901      	cbnz	r1, 8011ad6 <__ascii_mbtowc+0x6>
 8011ad4:	a901      	add	r1, sp, #4
 8011ad6:	b142      	cbz	r2, 8011aea <__ascii_mbtowc+0x1a>
 8011ad8:	b14b      	cbz	r3, 8011aee <__ascii_mbtowc+0x1e>
 8011ada:	7813      	ldrb	r3, [r2, #0]
 8011adc:	600b      	str	r3, [r1, #0]
 8011ade:	7812      	ldrb	r2, [r2, #0]
 8011ae0:	1e10      	subs	r0, r2, #0
 8011ae2:	bf18      	it	ne
 8011ae4:	2001      	movne	r0, #1
 8011ae6:	b002      	add	sp, #8
 8011ae8:	4770      	bx	lr
 8011aea:	4610      	mov	r0, r2
 8011aec:	e7fb      	b.n	8011ae6 <__ascii_mbtowc+0x16>
 8011aee:	f06f 0001 	mvn.w	r0, #1
 8011af2:	e7f8      	b.n	8011ae6 <__ascii_mbtowc+0x16>

08011af4 <__ascii_wctomb>:
 8011af4:	b149      	cbz	r1, 8011b0a <__ascii_wctomb+0x16>
 8011af6:	2aff      	cmp	r2, #255	; 0xff
 8011af8:	bf85      	ittet	hi
 8011afa:	238a      	movhi	r3, #138	; 0x8a
 8011afc:	6003      	strhi	r3, [r0, #0]
 8011afe:	700a      	strbls	r2, [r1, #0]
 8011b00:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b04:	bf98      	it	ls
 8011b06:	2001      	movls	r0, #1
 8011b08:	4770      	bx	lr
 8011b0a:	4608      	mov	r0, r1
 8011b0c:	4770      	bx	lr

08011b0e <__swhatbuf_r>:
 8011b0e:	b570      	push	{r4, r5, r6, lr}
 8011b10:	460c      	mov	r4, r1
 8011b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b16:	2900      	cmp	r1, #0
 8011b18:	b096      	sub	sp, #88	; 0x58
 8011b1a:	4615      	mov	r5, r2
 8011b1c:	461e      	mov	r6, r3
 8011b1e:	da0d      	bge.n	8011b3c <__swhatbuf_r+0x2e>
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b26:	f04f 0100 	mov.w	r1, #0
 8011b2a:	bf0c      	ite	eq
 8011b2c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b30:	2340      	movne	r3, #64	; 0x40
 8011b32:	2000      	movs	r0, #0
 8011b34:	6031      	str	r1, [r6, #0]
 8011b36:	602b      	str	r3, [r5, #0]
 8011b38:	b016      	add	sp, #88	; 0x58
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}
 8011b3c:	466a      	mov	r2, sp
 8011b3e:	f000 f849 	bl	8011bd4 <_fstat_r>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	dbec      	blt.n	8011b20 <__swhatbuf_r+0x12>
 8011b46:	9901      	ldr	r1, [sp, #4]
 8011b48:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011b4c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011b50:	4259      	negs	r1, r3
 8011b52:	4159      	adcs	r1, r3
 8011b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b58:	e7eb      	b.n	8011b32 <__swhatbuf_r+0x24>

08011b5a <__smakebuf_r>:
 8011b5a:	898b      	ldrh	r3, [r1, #12]
 8011b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b5e:	079d      	lsls	r5, r3, #30
 8011b60:	4606      	mov	r6, r0
 8011b62:	460c      	mov	r4, r1
 8011b64:	d507      	bpl.n	8011b76 <__smakebuf_r+0x1c>
 8011b66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b6a:	6023      	str	r3, [r4, #0]
 8011b6c:	6123      	str	r3, [r4, #16]
 8011b6e:	2301      	movs	r3, #1
 8011b70:	6163      	str	r3, [r4, #20]
 8011b72:	b002      	add	sp, #8
 8011b74:	bd70      	pop	{r4, r5, r6, pc}
 8011b76:	ab01      	add	r3, sp, #4
 8011b78:	466a      	mov	r2, sp
 8011b7a:	f7ff ffc8 	bl	8011b0e <__swhatbuf_r>
 8011b7e:	9900      	ldr	r1, [sp, #0]
 8011b80:	4605      	mov	r5, r0
 8011b82:	4630      	mov	r0, r6
 8011b84:	f7fd fbb6 	bl	800f2f4 <_malloc_r>
 8011b88:	b948      	cbnz	r0, 8011b9e <__smakebuf_r+0x44>
 8011b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b8e:	059a      	lsls	r2, r3, #22
 8011b90:	d4ef      	bmi.n	8011b72 <__smakebuf_r+0x18>
 8011b92:	f023 0303 	bic.w	r3, r3, #3
 8011b96:	f043 0302 	orr.w	r3, r3, #2
 8011b9a:	81a3      	strh	r3, [r4, #12]
 8011b9c:	e7e3      	b.n	8011b66 <__smakebuf_r+0xc>
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	6020      	str	r0, [r4, #0]
 8011ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba6:	81a3      	strh	r3, [r4, #12]
 8011ba8:	9b00      	ldr	r3, [sp, #0]
 8011baa:	6163      	str	r3, [r4, #20]
 8011bac:	9b01      	ldr	r3, [sp, #4]
 8011bae:	6120      	str	r0, [r4, #16]
 8011bb0:	b15b      	cbz	r3, 8011bca <__smakebuf_r+0x70>
 8011bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	f000 f81e 	bl	8011bf8 <_isatty_r>
 8011bbc:	b128      	cbz	r0, 8011bca <__smakebuf_r+0x70>
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	f023 0303 	bic.w	r3, r3, #3
 8011bc4:	f043 0301 	orr.w	r3, r3, #1
 8011bc8:	81a3      	strh	r3, [r4, #12]
 8011bca:	89a3      	ldrh	r3, [r4, #12]
 8011bcc:	431d      	orrs	r5, r3
 8011bce:	81a5      	strh	r5, [r4, #12]
 8011bd0:	e7cf      	b.n	8011b72 <__smakebuf_r+0x18>
	...

08011bd4 <_fstat_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4d07      	ldr	r5, [pc, #28]	; (8011bf4 <_fstat_r+0x20>)
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4604      	mov	r4, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	4611      	mov	r1, r2
 8011be0:	602b      	str	r3, [r5, #0]
 8011be2:	f7f8 fd44 	bl	800a66e <_fstat>
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	d102      	bne.n	8011bf0 <_fstat_r+0x1c>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	b103      	cbz	r3, 8011bf0 <_fstat_r+0x1c>
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	bf00      	nop
 8011bf4:	20000a5c 	.word	0x20000a5c

08011bf8 <_isatty_r>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	4d06      	ldr	r5, [pc, #24]	; (8011c14 <_isatty_r+0x1c>)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	4604      	mov	r4, r0
 8011c00:	4608      	mov	r0, r1
 8011c02:	602b      	str	r3, [r5, #0]
 8011c04:	f7f8 fd43 	bl	800a68e <_isatty>
 8011c08:	1c43      	adds	r3, r0, #1
 8011c0a:	d102      	bne.n	8011c12 <_isatty_r+0x1a>
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	b103      	cbz	r3, 8011c12 <_isatty_r+0x1a>
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	bd38      	pop	{r3, r4, r5, pc}
 8011c14:	20000a5c 	.word	0x20000a5c

08011c18 <_init>:
 8011c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1a:	bf00      	nop
 8011c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1e:	bc08      	pop	{r3}
 8011c20:	469e      	mov	lr, r3
 8011c22:	4770      	bx	lr

08011c24 <_fini>:
 8011c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c26:	bf00      	nop
 8011c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c2a:	bc08      	pop	{r3}
 8011c2c:	469e      	mov	lr, r3
 8011c2e:	4770      	bx	lr
