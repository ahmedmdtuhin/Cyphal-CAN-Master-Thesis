
CAN_implementation_with_IRQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  08007b18  08007b18  00008b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800866c  0800866c  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800866c  0800866c  0000966c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008674  08008674  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008674  08008674  00009674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800867c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  200001dc  08008858  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08008858  0000a668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4ea  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b7  00000000  00000000  000186f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0001a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b5  00000000  00000000  0001b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e7c  00000000  00000000  0001bff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f889  00000000  00000000  0003ee71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0278  00000000  00000000  0004e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  0011e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00122f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b00 	.word	0x08007b00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007b00 	.word	0x08007b00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 ff6a 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f86e 	bl	8000fc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ssd1306_Init();
 8000ee4:	f000 fd70 	bl	80019c8 <ssd1306_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa7e 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 fa52 	bl	8001394 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000ef0:	f000 f8d2 	bl	8001098 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000ef4:	f000 fa20 	bl	8001338 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 8000ef8:	f000 f904 	bl	8001104 <CAN_Filter_Config>
  /* USER CODE END 2 */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable CAN1 interrupt call backs for the respective interrupt notifications flags
 8000efc:	2102      	movs	r1, #2
 8000efe:	4829      	ldr	r0, [pc, #164]	@ (8000fa4 <main+0xcc>)
 8000f00:	f001 fc00 	bl	8002704 <HAL_CAN_ActivateNotification>

  if(HAL_CAN_Start(&hcan1) != HAL_OK) //Starts CAN1
 8000f04:	4827      	ldr	r0, [pc, #156]	@ (8000fa4 <main+0xcc>)
 8000f06:	f001 f9c7 	bl	8002298 <HAL_CAN_Start>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <main+0x3c>
      {
          Error_Handler();
 8000f10:	f000 fad8 	bl	80014c4 <Error_Handler>
      }


  CAN1_Tx();
 8000f14:	f000 f91c 	bl	8001150 <CAN1_Tx>
  {
	  /* USER CODE END WHILE */

	          /* USER CODE BEGIN 3 */
	          // Check if a CAN message was received and update OLED display
	          if (can_msg_received)
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <main+0xd0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d02c      	beq.n	8000f7c <main+0xa4>
	          {
	              can_msg_received = 0; // Reset the flag
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <main+0xd0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

	              ssd1306_Fill(Black);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fdb7 	bl	8001a9c <ssd1306_Fill>
	              	    ssd1306_SetCursor(8, 10);
 8000f2e:	210a      	movs	r1, #10
 8000f30:	2008      	movs	r0, #8
 8000f32:	f000 fef5 	bl	8001d20 <ssd1306_SetCursor>
	              	    ssd1306_WriteString("Message Received:", Font_7x10, White);
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <main+0xd4>)
 8000f38:	2301      	movs	r3, #1
 8000f3a:	ca06      	ldmia	r2, {r1, r2}
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <main+0xd8>)
 8000f3e:	f000 fec9 	bl	8001cd4 <ssd1306_WriteString>
	              	    ssd1306_SetCursor(10, 25);
 8000f42:	2119      	movs	r1, #25
 8000f44:	200a      	movs	r0, #10
 8000f46:	f000 feeb 	bl	8001d20 <ssd1306_SetCursor>
	              	    //ssd1306_WriteString(ascii_msg, Font_7x10, White);
	              	    ssd1306_UpdateScreen();
 8000f4a:	f000 fdbf 	bl	8001acc <ssd1306_UpdateScreen>

	              	    // Debug output
	              	    HAL_Delay(500); // Delay for visibility on the OLED display
 8000f4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f52:	f000 ffa1 	bl	8001e98 <HAL_Delay>

	              	    ssd1306_Fill(Black);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 fda0 	bl	8001a9c <ssd1306_Fill>
	              	    ssd1306_SetCursor(10, 10);
 8000f5c:	210a      	movs	r1, #10
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f000 fede 	bl	8001d20 <ssd1306_SetCursor>
	              	    ssd1306_WriteString(received_ascii_msg, Font_7x10, White);
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <main+0xd4>)
 8000f66:	2301      	movs	r3, #1
 8000f68:	ca06      	ldmia	r2, {r1, r2}
 8000f6a:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <main+0xdc>)
 8000f6c:	f000 feb2 	bl	8001cd4 <ssd1306_WriteString>
	              	    ssd1306_UpdateScreen();
 8000f70:	f000 fdac 	bl	8001acc <ssd1306_UpdateScreen>
	              	    HAL_Delay(500);
 8000f74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f78:	f000 ff8e 	bl	8001e98 <HAL_Delay>
	          }

	          // Turn off the LED after 10 ms
	          if (HAL_GetTick() >= led_off_time && led_off_time != 0)
 8000f7c:	f000 ff80 	bl	8001e80 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <main+0xe0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3c6      	bcc.n	8000f18 <main+0x40>
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <main+0xe0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0c2      	beq.n	8000f18 <main+0x40>
	          {
	              HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2120      	movs	r1, #32
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <main+0xe4>)
 8000f98:	f002 f8b0 	bl	80030fc <HAL_GPIO_WritePin>
	              led_off_time = 0; // Reset the off timestamp
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <main+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	          if (can_msg_received)
 8000fa2:	e7b9      	b.n	8000f18 <main+0x40>
 8000fa4:	200001f8 	.word	0x200001f8
 8000fa8:	200002c0 	.word	0x200002c0
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	08007b18 	.word	0x08007b18
 8000fb4:	200002c4 	.word	0x200002c4
 8000fb8:	200002bc 	.word	0x200002bc
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2234      	movs	r2, #52	@ 0x34
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fcfd 	bl	80059ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  void CAN_Filter_Config(void);
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <SystemClock_Config+0xd0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <SystemClock_Config+0xd0>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <SystemClock_Config+0xd0>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <SystemClock_Config+0xd4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800100c:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <SystemClock_Config+0xd4>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <SystemClock_Config+0xd4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001028:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001038:	2354      	movs	r3, #84	@ 0x54
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f867 	bl	8004120 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001058:	f000 fa34 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2102      	movs	r1, #2
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fd07 	bl	8003a8c <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001084:	f000 fa1e 	bl	80014c4 <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	@ 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_CAN1_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <MX_CAN1_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010b6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80010ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <MX_CAN1_Init+0x64>)
 80010ea:	f000 fef9 	bl	8001ee0 <HAL_CAN_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010f4:	f000 f9e6 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001f8 	.word	0x200001f8
 8001100:	40006400 	.word	0x40006400

08001104 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0

	 	CAN_FilterTypeDef can1_filter_init;

	 	can1_filter_init.FilterActivation = ENABLE;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
	 	can1_filter_init.FilterBank  = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
	 	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
	 	can1_filter_init.FilterIdHigh = 0x0000;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
	 	can1_filter_init.FilterIdLow = 0x0000;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
	 	can1_filter_init.FilterMaskIdHigh = 0X0000;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
	 	can1_filter_init.FilterMaskIdLow = 0x0000;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
	 	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
	 	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800112a:	2301      	movs	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]

	 	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <CAN_Filter_Config+0x48>)
 8001134:	f000 ffd0 	bl	80020d8 <HAL_CAN_ConfigFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <CAN_Filter_Config+0x3e>
	 	{
	 		Error_Handler();
 800113e:	f000 f9c1 	bl	80014c4 <Error_Handler>

	 }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f8 	.word	0x200001f8

08001150 <CAN1_Tx>:

void CAN1_Tx(void)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b092      	sub	sp, #72	@ 0x48
 8001154:	af00      	add	r7, sp, #0


    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;can_msg_received = 0; // Reset the flag
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <CAN1_Tx+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

    // Display the message on SSD1306 OLED display
    ssd1306_Fill(Black);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 fc9d 	bl	8001a9c <ssd1306_Fill>
    ssd1306_SetCursor(8, 10);
 8001162:	210a      	movs	r1, #10
 8001164:	2008      	movs	r0, #8
 8001166:	f000 fddb 	bl	8001d20 <ssd1306_SetCursor>
    ssd1306_WriteString("Message Received:", Font_7x10, White);
 800116a:	4a39      	ldr	r2, [pc, #228]	@ (8001250 <CAN1_Tx+0x100>)
 800116c:	2301      	movs	r3, #1
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	4838      	ldr	r0, [pc, #224]	@ (8001254 <CAN1_Tx+0x104>)
 8001172:	f000 fdaf 	bl	8001cd4 <ssd1306_WriteString>
    ssd1306_SetCursor(10, 25);
 8001176:	2119      	movs	r1, #25
 8001178:	200a      	movs	r0, #10
 800117a:	f000 fdd1 	bl	8001d20 <ssd1306_SetCursor>
    ssd1306_WriteString(received_ascii_msg, Font_7x10, White);
 800117e:	4a34      	ldr	r2, [pc, #208]	@ (8001250 <CAN1_Tx+0x100>)
 8001180:	2301      	movs	r3, #1
 8001182:	ca06      	ldmia	r2, {r1, r2}
 8001184:	4834      	ldr	r0, [pc, #208]	@ (8001258 <CAN1_Tx+0x108>)
 8001186:	f000 fda5 	bl	8001cd4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800118a:	f000 fc9f 	bl	8001acc <ssd1306_UpdateScreen>
    // Sample data byte to be sent
    //uint8_t message[6] = {'H','E','L','L','O','\0'};
    //uint8_t message[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    //uint8_t message[16] = {'T','H', 'I', 'S',' ','I','S',' ','C','A','N',' ','M','S','G','\0'};
    uint8_t message[8] = {'C','A','N',' ','M','S','G','\0'};
 800118e:	4a33      	ldr	r2, [pc, #204]	@ (800125c <CAN1_Tx+0x10c>)
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001198:	e883 0003 	stmia.w	r3, {r0, r1}


    TxHeader.DLC = 8; // Data length code: number of bytes in message
 800119c:	2308      	movs	r3, #8
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
    TxHeader.StdId = 0x123; // Standard ID of the message
 80011a0:	f240 1323 	movw	r3, #291	@ 0x123
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.IDE = CAN_ID_STD; // Standard ID type
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    TxHeader.RTR = CAN_RTR_DATA; // Data frame
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Transmiting the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK)
 80011ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011b6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80011ba:	4829      	ldr	r0, [pc, #164]	@ (8001260 <CAN1_Tx+0x110>)
 80011bc:	f001 f8b0 	bl	8002320 <HAL_CAN_AddTxMessage>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <CAN1_Tx+0x7a>
    {
        Error_Handler();
 80011c6:	f000 f97d 	bl	80014c4 <Error_Handler>
    }
//   while( HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox))  //was for polling
//          {};


    char msg[] = "CAN Msg Transmited Successfully!\n";
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <CAN1_Tx+0x114>)
 80011cc:	463c      	mov	r4, r7
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80011dc:	463b      	mov	r3, r7
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f866 	bl	80002b0 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4639      	mov	r1, r7
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ee:	481e      	ldr	r0, [pc, #120]	@ (8001268 <CAN1_Tx+0x118>)
 80011f0:	f003 fa84 	bl	80046fc <HAL_UART_Transmit>

    //LCD
    ssd1306_Fill(Black);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 fc51 	bl	8001a9c <ssd1306_Fill>
    ssd1306_SetCursor(0, 10);
 80011fa:	210a      	movs	r1, #10
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 fd8f 	bl	8001d20 <ssd1306_SetCursor>
    ssd1306_WriteString(&msg, Font_7x10, White);
 8001202:	4a13      	ldr	r2, [pc, #76]	@ (8001250 <CAN1_Tx+0x100>)
 8001204:	4638      	mov	r0, r7
 8001206:	2301      	movs	r3, #1
 8001208:	ca06      	ldmia	r2, {r1, r2}
 800120a:	f000 fd63 	bl	8001cd4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800120e:	f000 fc5d 	bl	8001acc <ssd1306_UpdateScreen>

    HAL_Delay(500);
 8001212:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001216:	f000 fe3f 	bl	8001e98 <HAL_Delay>

    ssd1306_Fill(Black);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fc3e 	bl	8001a9c <ssd1306_Fill>
    ssd1306_SetCursor(42, 10);
 8001220:	210a      	movs	r1, #10
 8001222:	202a      	movs	r0, #42	@ 0x2a
 8001224:	f000 fd7c 	bl	8001d20 <ssd1306_SetCursor>
    ssd1306_WriteString(&message, Font_7x10, White);
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <CAN1_Tx+0x100>)
 800122a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800122e:	2301      	movs	r3, #1
 8001230:	ca06      	ldmia	r2, {r1, r2}
 8001232:	f000 fd4f 	bl	8001cd4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001236:	f000 fc49 	bl	8001acc <ssd1306_UpdateScreen>

    HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800123e:	f000 fe2b 	bl	8001e98 <HAL_Delay>
}
 8001242:	bf00      	nop
 8001244:	3748      	adds	r7, #72	@ 0x48
 8001246:	46bd      	mov	sp, r7
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	200002c0 	.word	0x200002c0
 8001250:	20000004 	.word	0x20000004
 8001254:	08007b18 	.word	0x08007b18
 8001258:	200002c4 	.word	0x200002c4
 800125c:	08007b2c 	.word	0x08007b2c
 8001260:	200001f8 	.word	0x200001f8
 8001264:	08007b34 	.word	0x08007b34
 8001268:	20000274 	.word	0x20000274

0800126c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	@ 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t rcvd_msg[8]; // Assuming  CAN message is 8 bytes long

    // Retrieve the received CAN message
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	2100      	movs	r1, #0
 800127e:	4825      	ldr	r0, [pc, #148]	@ (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001280:	f001 f91e 	bl	80024c0 <HAL_CAN_GetRxMessage>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    {
        Error_Handler();
 800128a:	f000 f91b 	bl	80014c4 <Error_Handler>
    }

    // Convert received CAN message bytes to hexadecimal ASCII characters
    for (int i = 0; i < RxHeader.DLC && i < 8; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001292:	e010      	b.n	80012b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    {
        sprintf(received_ascii_msg + i * 2, "%02X", rcvd_msg[i]);
 8001294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	461a      	mov	r2, r3
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800129c:	18d0      	adds	r0, r2, r3
 800129e:	f107 0208 	add.w	r2, r7, #8
 80012a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	491c      	ldr	r1, [pc, #112]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80012ac:	f004 fb2c 	bl	8005908 <siprintf>
    for (int i = 0; i < RxHeader.DLC && i < 8; i++)
 80012b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b2:	3301      	adds	r3, #1
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d902      	bls.n	80012c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 80012be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	dde7      	ble.n	8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
    received_ascii_msg[RxHeader.DLC * 2] = '\0'; // Null terminate the string
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4a13      	ldr	r2, [pc, #76]	@ (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	54d1      	strb	r1, [r2, r3]

    // Print the formatted message over UART
    sprintf(display_msg, "Message Received: %s\r\n", received_ascii_msg);
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80012d2:	4814      	ldr	r0, [pc, #80]	@ (8001324 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80012d4:	f004 fb18 	bl	8005908 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)display_msg, strlen(display_msg), HAL_MAX_DELAY);
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80012da:	f7fe ffe9 	bl	80002b0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	490f      	ldr	r1, [pc, #60]	@ (8001324 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80012ea:	f003 fa07 	bl	80046fc <HAL_UART_Transmit>

    // Turn on the LED
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2120      	movs	r1, #32
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80012f4:	f001 ff02 	bl	80030fc <HAL_GPIO_WritePin>
    led_off_time = HAL_GetTick() + 10; // Set the off timestamp (current time + 10 ms)
 80012f8:	f000 fdc2 	bl	8001e80 <HAL_GetTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	330a      	adds	r3, #10
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001302:	6013      	str	r3, [r2, #0]

    // Set flag to update OLED display
    can_msg_received = 1;
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001f8 	.word	0x200001f8
 8001318:	200002c4 	.word	0x200002c4
 800131c:	08007b58 	.word	0x08007b58
 8001320:	08007b60 	.word	0x08007b60
 8001324:	200002d8 	.word	0x200002d8
 8001328:	20000274 	.word	0x20000274
 800132c:	40020000 	.word	0x40020000
 8001330:	200002bc 	.word	0x200002bc
 8001334:	200002c0 	.word	0x200002c0

08001338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x50>)
 800133e:	4a13      	ldr	r2, [pc, #76]	@ (800138c <MX_I2C1_Init+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001344:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <MX_I2C1_Init+0x58>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001356:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800135a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <MX_I2C1_Init+0x50>)
 8001376:	f001 fedb 	bl	8003130 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001380:	f000 f8a0 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000220 	.word	0x20000220
 800138c:	40005400 	.word	0x40005400
 8001390:	000186a0 	.word	0x000186a0

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 f946 	bl	800465c <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f875 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000274 	.word	0x20000274
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4812      	ldr	r0, [pc, #72]	@ (80014bc <MX_GPIO_Init+0xd4>)
 8001474:	f001 fe42 	bl	80030fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_GPIO_Init+0xd8>)
 8001490:	f001 fca0 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001494:	2320      	movs	r3, #32
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_Init+0xd4>)
 80014ac:	f001 fc92 	bl	8002dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020800 	.word	0x40020800

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <HAL_MspInit+0x4c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	@ (800151c <HAL_MspInit+0x4c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150e:	2007      	movs	r0, #7
 8001510:	f001 fc1e 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <HAL_CAN_MspInit+0x94>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d134      	bne.n	80015ac <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 800154c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_CAN_MspInit+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800157a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800158c:	2309      	movs	r3, #9
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <HAL_CAN_MspInit+0x9c>)
 8001598:	f001 fc1c 	bl	8002dd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2014      	movs	r0, #20
 80015a2:	f001 fbe0 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015a6:	2014      	movs	r0, #20
 80015a8:	f001 fbf9 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40006400 	.word	0x40006400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_I2C_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001604:	2312      	movs	r3, #18
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	480c      	ldr	r0, [pc, #48]	@ (800164c <HAL_I2C_MspInit+0x8c>)
 800161c:	f001 fbda 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 800162a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_I2C_MspInit+0x88>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <HAL_UART_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12b      	bne.n	80016ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016aa:	230c      	movs	r3, #12
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ba:	2307      	movs	r3, #7
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <HAL_UART_MspInit+0x8c>)
 80016c6:	f001 fb85 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40004400 	.word	0x40004400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 fb8f 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <CAN1_RX0_IRQHandler+0x10>)
 8001746:	f001 f803 	bl	8002750 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001f8 	.word	0x200001f8

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176e:	f004 f981 	bl	8005a74 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	2216      	movs	r2, #22
 8001776:	601a      	str	r2, [r3, #0]
  return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001796:	bf00      	nop
 8001798:	e7fd      	b.n	8001796 <_exit+0x12>

0800179a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e00a      	b.n	80017c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ac:	f3af 8000 	nop.w
 80017b0:	4601      	mov	r1, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	b2ca      	uxtb	r2, r1
 80017ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf0      	blt.n	80017ac <_read+0x12>
  }

  return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e009      	b.n	80017fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	60ba      	str	r2, [r7, #8]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbf1      	blt.n	80017e6 <_write+0x12>
  }
  return len;
 8001802:	687b      	ldr	r3, [r7, #4]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_close>:

int _close(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001834:	605a      	str	r2, [r3, #4]
  return 0;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_isatty>:

int _isatty(int file)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f004 f8e6 	bl	8005a74 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20020000 	.word	0x20020000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	2000030c 	.word	0x2000030c
 80018dc:	20000668 	.word	0x20000668

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800193c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001908:	f7ff ffea 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	@ (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	@ (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001932:	f004 f8a5 	bl	8005a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff facf 	bl	8000ed8 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001948:	0800867c 	.word	0x0800867c
  ldr r2, =_sbss
 800194c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001950:	20000668 	.word	0x20000668

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>

08001956 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af04      	add	r7, sp, #16
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800196e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	2301      	movs	r3, #1
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	2200      	movs	r2, #0
 8001980:	2178      	movs	r1, #120	@ 0x78
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <ssd1306_WriteCommand+0x2c>)
 8001984:	f001 fd18 	bl	80033b8 <HAL_I2C_Mem_Write>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000220 	.word	0x20000220

08001994 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a6:	9202      	str	r2, [sp, #8]
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	2240      	movs	r2, #64	@ 0x40
 80019b2:	2178      	movs	r1, #120	@ 0x78
 80019b4:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <ssd1306_WriteData+0x30>)
 80019b6:	f001 fcff 	bl	80033b8 <HAL_I2C_Mem_Write>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000220 	.word	0x20000220

080019c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80019cc:	f7ff ffc3 	bl	8001956 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80019d0:	2064      	movs	r0, #100	@ 0x64
 80019d2:	f000 fa61 	bl	8001e98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f9ce 	bl	8001d78 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80019dc:	2020      	movs	r0, #32
 80019de:	f7ff ffc1 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff ffbe 	bl	8001964 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019e8:	20b0      	movs	r0, #176	@ 0xb0
 80019ea:	f7ff ffbb 	bl	8001964 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80019ee:	20c8      	movs	r0, #200	@ 0xc8
 80019f0:	f7ff ffb8 	bl	8001964 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ffb5 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019fa:	2010      	movs	r0, #16
 80019fc:	f7ff ffb2 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a00:	2040      	movs	r0, #64	@ 0x40
 8001a02:	f7ff ffaf 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a06:	20ff      	movs	r0, #255	@ 0xff
 8001a08:	f000 f9a2 	bl	8001d50 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a0c:	20a1      	movs	r0, #161	@ 0xa1
 8001a0e:	f7ff ffa9 	bl	8001964 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a12:	20a6      	movs	r0, #166	@ 0xa6
 8001a14:	f7ff ffa6 	bl	8001964 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a18:	20a8      	movs	r0, #168	@ 0xa8
 8001a1a:	f7ff ffa3 	bl	8001964 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001a1e:	201f      	movs	r0, #31
 8001a20:	f7ff ffa0 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a24:	20a4      	movs	r0, #164	@ 0xa4
 8001a26:	f7ff ff9d 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a2a:	20d3      	movs	r0, #211	@ 0xd3
 8001a2c:	f7ff ff9a 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ff97 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a36:	20d5      	movs	r0, #213	@ 0xd5
 8001a38:	f7ff ff94 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a3c:	20f0      	movs	r0, #240	@ 0xf0
 8001a3e:	f7ff ff91 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a42:	20d9      	movs	r0, #217	@ 0xd9
 8001a44:	f7ff ff8e 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a48:	2022      	movs	r0, #34	@ 0x22
 8001a4a:	f7ff ff8b 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a4e:	20da      	movs	r0, #218	@ 0xda
 8001a50:	f7ff ff88 	bl	8001964 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7ff ff85 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a5a:	20db      	movs	r0, #219	@ 0xdb
 8001a5c:	f7ff ff82 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a60:	2020      	movs	r0, #32
 8001a62:	f7ff ff7f 	bl	8001964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a66:	208d      	movs	r0, #141	@ 0x8d
 8001a68:	f7ff ff7c 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a6c:	2014      	movs	r0, #20
 8001a6e:	f7ff ff79 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 f980 	bl	8001d78 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 f80f 	bl	8001a9c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a7e:	f000 f825 	bl	8001acc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <ssd1306_Init+0xd0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <ssd1306_Init+0xd0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a8e:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <ssd1306_Init+0xd0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	711a      	strb	r2, [r3, #4]
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000510 	.word	0x20000510

08001a9c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <ssd1306_Fill+0x14>
 8001aac:	2300      	movs	r3, #0
 8001aae:	e000      	b.n	8001ab2 <ssd1306_Fill+0x16>
 8001ab0:	23ff      	movs	r3, #255	@ 0xff
 8001ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <ssd1306_Fill+0x2c>)
 8001aba:	f003 ff88 	bl	80059ce <memset>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000310 	.word	0x20000310

08001acc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	e016      	b.n	8001b06 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	3b50      	subs	r3, #80	@ 0x50
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff40 	bl	8001964 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff ff3d 	bl	8001964 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001aea:	2010      	movs	r0, #16
 8001aec:	f7ff ff3a 	bl	8001964 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	4a08      	ldr	r2, [pc, #32]	@ (8001b18 <ssd1306_UpdateScreen+0x4c>)
 8001af6:	4413      	add	r3, r2
 8001af8:	2180      	movs	r1, #128	@ 0x80
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff4a 	bl	8001994 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	3301      	adds	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d9e5      	bls.n	8001ad8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000310 	.word	0x20000310

08001b1c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	460b      	mov	r3, r1
 8001b28:	71bb      	strb	r3, [r7, #6]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db3d      	blt.n	8001bb2 <ssd1306_DrawPixel+0x96>
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	2b1f      	cmp	r3, #31
 8001b3a:	d83a      	bhi.n	8001bb2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d11a      	bne.n	8001b78 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b2d8      	uxtb	r0, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	01db      	lsls	r3, r3, #7
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <ssd1306_DrawPixel+0xa4>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b259      	sxtb	r1, r3
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2c9      	uxtb	r1, r1
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <ssd1306_DrawPixel+0xa4>)
 8001b74:	54d1      	strb	r1, [r2, r3]
 8001b76:	e01d      	b.n	8001bb4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	b2d8      	uxtb	r0, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	4413      	add	r3, r2
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <ssd1306_DrawPixel+0xa4>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	b259      	sxtb	r1, r3
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2c9      	uxtb	r1, r1
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <ssd1306_DrawPixel+0xa4>)
 8001bae:	54d1      	strb	r1, [r2, r3]
 8001bb0:	e000      	b.n	8001bb4 <ssd1306_DrawPixel+0x98>
        return;
 8001bb2:	bf00      	nop
    }
}
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000310 	.word	0x20000310

08001bc4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4604      	mov	r4, r0
 8001bcc:	1d38      	adds	r0, r7, #4
 8001bce:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b1f      	cmp	r3, #31
 8001be0:	d902      	bls.n	8001be8 <ssd1306_WriteChar+0x24>
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001be6:	d901      	bls.n	8001bec <ssd1306_WriteChar+0x28>
        return 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e06c      	b.n	8001cc6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bec:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	793b      	ldrb	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2b80      	cmp	r3, #128	@ 0x80
 8001bf8:	dc06      	bgt.n	8001c08 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001bfa:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001bfc:	885b      	ldrh	r3, [r3, #2]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	dd01      	ble.n	8001c0c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e05c      	b.n	8001cc6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	e04c      	b.n	8001cac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3b20      	subs	r3, #32
 8001c18:	7979      	ldrb	r1, [r7, #5]
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	440b      	add	r3, r1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	e034      	b.n	8001c9c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	7bba      	ldrb	r2, [r7, #14]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7ff ff5b 	bl	8001b1c <ssd1306_DrawPixel>
 8001c66:	e016      	b.n	8001c96 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	b2d8      	uxtb	r0, r3
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	b2d9      	uxtb	r1, r3
 8001c84:	7bbb      	ldrb	r3, [r7, #14]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	f7ff ff43 	bl	8001b1c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	793b      	ldrb	r3, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d3c5      	bcc.n	8001c32 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	797b      	ldrb	r3, [r7, #5]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d3ad      	bcc.n	8001c12 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	793a      	ldrb	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <ssd1306_WriteChar+0x10c>)
 8001cc2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000510 	.word	0x20000510

08001cd4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	1d38      	adds	r0, r7, #4
 8001cde:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ce2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001ce4:	e012      	b.n	8001d0c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	7818      	ldrb	r0, [r3, #0]
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	1d3a      	adds	r2, r7, #4
 8001cee:	ca06      	ldmia	r2, {r1, r2}
 8001cf0:	f7ff ff68 	bl	8001bc4 <ssd1306_WriteChar>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d002      	beq.n	8001d06 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	e008      	b.n	8001d18 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e8      	bne.n	8001ce6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <ssd1306_SetCursor+0x2c>)
 8001d36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <ssd1306_SetCursor+0x2c>)
 8001d3e:	805a      	strh	r2, [r3, #2]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000510 	.word	0x20000510

08001d50 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d5a:	2381      	movs	r3, #129	@ 0x81
 8001d5c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdff 	bl	8001964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fdfb 	bl	8001964 <ssd1306_WriteCommand>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d88:	23af      	movs	r3, #175	@ 0xaf
 8001d8a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <ssd1306_SetDisplayOn+0x38>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	715a      	strb	r2, [r3, #5]
 8001d92:	e004      	b.n	8001d9e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d94:	23ae      	movs	r3, #174	@ 0xae
 8001d96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <ssd1306_SetDisplayOn+0x38>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fddf 	bl	8001964 <ssd1306_WriteCommand>
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000510 	.word	0x20000510

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 ffb7 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fb72 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 ffcf 	bl	8002dba <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e34:	f000 ff97 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000010 	.word	0x20000010
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	20000518 	.word	0x20000518

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000518 	.word	0x20000518

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010

08001ee0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0ed      	b.n	80020ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fb0e 	bl	8001520 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f14:	f7ff ffb4 	bl	8001e80 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f1a:	e012      	b.n	8001f42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f1c:	f7ff ffb0 	bl	8001e80 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b0a      	cmp	r3, #10
 8001f28:	d90b      	bls.n	8001f42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2205      	movs	r2, #5
 8001f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0c5      	b.n	80020ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0e5      	beq.n	8001f1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0202 	bic.w	r2, r2, #2
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7ff ff8e 	bl	8001e80 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f66:	e012      	b.n	8001f8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f68:	f7ff ff8a 	bl	8001e80 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b0a      	cmp	r3, #10
 8001f74:	d90b      	bls.n	8001f8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2205      	movs	r2, #5
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e09f      	b.n	80020ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e5      	bne.n	8001f68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e007      	b.n	8001fc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7e5b      	ldrb	r3, [r3, #25]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d108      	bne.n	8001fe0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e007      	b.n	8001ff0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e9b      	ldrb	r3, [r3, #26]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d108      	bne.n	800200a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e007      	b.n	800201a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0220 	bic.w	r2, r2, #32
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7edb      	ldrb	r3, [r3, #27]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0210 	bic.w	r2, r2, #16
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e007      	b.n	8002044 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0210 	orr.w	r2, r2, #16
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7f1b      	ldrb	r3, [r3, #28]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0208 	orr.w	r2, r2, #8
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e007      	b.n	800206e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0208 	bic.w	r2, r2, #8
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7f5b      	ldrb	r3, [r3, #29]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0204 	orr.w	r2, r2, #4
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e007      	b.n	8002098 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	ea42 0103 	orr.w	r1, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d003      	beq.n	80020fe <HAL_CAN_ConfigFilter+0x26>
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	f040 80be 	bne.w	800227a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020fe:	4b65      	ldr	r3, [pc, #404]	@ (8002294 <HAL_CAN_ConfigFilter+0x1bc>)
 8002100:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002118:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	431a      	orrs	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2201      	movs	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d123      	bne.n	80021a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002182:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3248      	adds	r2, #72	@ 0x48
 8002188:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800219c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	3348      	adds	r3, #72	@ 0x48
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d122      	bne.n	80021f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3248      	adds	r2, #72	@ 0x48
 80021d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	3348      	adds	r3, #72	@ 0x48
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	401a      	ands	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002210:	e007      	b.n	8002222 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	431a      	orrs	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	401a      	ands	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800223c:	e007      	b.n	800224e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	431a      	orrs	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800226c:	f023 0201 	bic.w	r2, r3, #1
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e006      	b.n	8002288 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40006400 	.word	0x40006400

08002298 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d12e      	bne.n	800230a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff fddc 	bl	8001e80 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022ca:	e012      	b.n	80022f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022cc:	f7ff fdd8 	bl	8001e80 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d90b      	bls.n	80022f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2205      	movs	r2, #5
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e012      	b.n	8002318 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e5      	bne.n	80022cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e006      	b.n	8002318 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	@ 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d003      	beq.n	800234c <HAL_CAN_AddTxMessage+0x2c>
 8002344:	7ffb      	ldrb	r3, [r7, #31]
 8002346:	2b02      	cmp	r3, #2
 8002348:	f040 80ad 	bne.w	80024a6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8095 	beq.w	8002496 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002376:	2201      	movs	r2, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	6809      	ldr	r1, [r1, #0]
 8002396:	431a      	orrs	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3318      	adds	r3, #24
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	440b      	add	r3, r1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e00f      	b.n	80023c4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3318      	adds	r3, #24
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	440b      	add	r3, r1
 80023c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3318      	adds	r3, #24
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	440b      	add	r3, r1
 80023d4:	3304      	adds	r3, #4
 80023d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	7d1b      	ldrb	r3, [r3, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d111      	bne.n	8002404 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3318      	adds	r3, #24
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3318      	adds	r3, #24
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	3304      	adds	r3, #4
 8002402:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3307      	adds	r3, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	061a      	lsls	r2, r3, #24
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3306      	adds	r3, #6
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3305      	adds	r3, #5
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4313      	orrs	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	3204      	adds	r2, #4
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	4610      	mov	r0, r2
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	6811      	ldr	r1, [r2, #0]
 800242c:	ea43 0200 	orr.w	r2, r3, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	440b      	add	r3, r1
 8002436:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800243a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3303      	adds	r3, #3
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	061a      	lsls	r2, r3, #24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3302      	adds	r3, #2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3301      	adds	r3, #1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4313      	orrs	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	4610      	mov	r0, r2
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	ea43 0200 	orr.w	r2, r3, r0
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	440b      	add	r3, r1
 800246c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002470:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3318      	adds	r3, #24
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6811      	ldr	r1, [r2, #0]
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3318      	adds	r3, #24
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	440b      	add	r3, r1
 8002490:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e00e      	b.n	80024b4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e006      	b.n	80024b4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3724      	adds	r7, #36	@ 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d003      	beq.n	80024e4 <HAL_CAN_GetRxMessage+0x24>
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 8103 	bne.w	80026ea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10e      	bne.n	8002508 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d116      	bne.n	8002526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0f7      	b.n	80026f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0e8      	b.n	80026f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	331b      	adds	r3, #27
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0204 	and.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	331b      	adds	r3, #27
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0d5b      	lsrs	r3, r3, #21
 8002554:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e00b      	b.n	8002576 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	331b      	adds	r3, #27
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	331b      	adds	r3, #27
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0202 	and.w	r2, r3, #2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	331b      	adds	r3, #27
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2208      	movs	r2, #8
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e00b      	b.n	80025c4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	331b      	adds	r3, #27
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	331b      	adds	r3, #27
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	331b      	adds	r3, #27
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	3304      	adds	r3, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0a1a      	lsrs	r2, r3, #8
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0c1a      	lsrs	r2, r3, #16
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3302      	adds	r3, #2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	4413      	add	r3, r2
 8002648:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e1a      	lsrs	r2, r3, #24
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	3303      	adds	r3, #3
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3304      	adds	r3, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0a1a      	lsrs	r2, r3, #8
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3305      	adds	r3, #5
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0c1a      	lsrs	r2, r3, #16
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3306      	adds	r3, #6
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e1a      	lsrs	r2, r3, #24
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3307      	adds	r3, #7
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	e007      	b.n	80026e6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e006      	b.n	80026f8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d002      	beq.n	8002722 <HAL_CAN_ActivateNotification+0x1e>
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d109      	bne.n	8002736 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e006      	b.n	8002744 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d07c      	beq.n	8002890 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f983 	bl	8002abe <HAL_CAN_TxMailbox0CompleteCallback>
 80027b8:	e016      	b.n	80027e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80027cc:	e00c      	b.n	80027e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e0:	e002      	b.n	80027e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f989 	bl	8002afa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d024      	beq.n	800283c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f963 	bl	8002ad2 <HAL_CAN_TxMailbox1CompleteCallback>
 800280c:	e016      	b.n	800283c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	e00c      	b.n	800283c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
 8002834:	e002      	b.n	800283c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f969 	bl	8002b0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d024      	beq.n	8002890 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800284e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f943 	bl	8002ae6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002860:	e016      	b.n	8002890 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
 8002874:	e00c      	b.n	8002890 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
 8002888:	e002      	b.n	8002890 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f949 	bl	8002b22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2208      	movs	r2, #8
 80028ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f930 	bl	8002b36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fcbc 	bl	800126c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f912 	bl	8002b5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8f9 	bl	8002b4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8fc 	bl	8002b72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2208      	movs	r2, #8
 8002994:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8f5 	bl	8002b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d07b      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d072      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d043      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d03e      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a1e:	2b60      	cmp	r3, #96	@ 0x60
 8002a20:	d02b      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x32a>
 8002a22:	2b60      	cmp	r3, #96	@ 0x60
 8002a24:	d82e      	bhi.n	8002a84 <HAL_CAN_IRQHandler+0x334>
 8002a26:	2b50      	cmp	r3, #80	@ 0x50
 8002a28:	d022      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x320>
 8002a2a:	2b50      	cmp	r3, #80	@ 0x50
 8002a2c:	d82a      	bhi.n	8002a84 <HAL_CAN_IRQHandler+0x334>
 8002a2e:	2b40      	cmp	r3, #64	@ 0x40
 8002a30:	d019      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x316>
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	d826      	bhi.n	8002a84 <HAL_CAN_IRQHandler+0x334>
 8002a36:	2b30      	cmp	r3, #48	@ 0x30
 8002a38:	d010      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x30c>
 8002a3a:	2b30      	cmp	r3, #48	@ 0x30
 8002a3c:	d822      	bhi.n	8002a84 <HAL_CAN_IRQHandler+0x334>
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d002      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x2f8>
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d005      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a46:	e01d      	b.n	8002a84 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a50:	e019      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a5a:	e014      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	f043 0320 	orr.w	r3, r3, #32
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a64:	e00f      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a6e:	e00a      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a78:	e005      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a82:	e000      	b.n	8002a86 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f872 	bl	8002b9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	@ 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e165      	b.n	80030bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 8154 	bne.w	80030b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d130      	bne.n	8002e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0201 	and.w	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80ae 	beq.w	80030b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80030d4 <HAL_GPIO_Init+0x300>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a5c      	ldr	r2, [pc, #368]	@ (80030d4 <HAL_GPIO_Init+0x300>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80030d4 <HAL_GPIO_Init+0x300>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a58      	ldr	r2, [pc, #352]	@ (80030d8 <HAL_GPIO_Init+0x304>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80030dc <HAL_GPIO_Init+0x308>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d025      	beq.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <HAL_GPIO_Init+0x216>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4d      	ldr	r2, [pc, #308]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x212>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80030e8 <HAL_GPIO_Init+0x314>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80030ec <HAL_GPIO_Init+0x318>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x20a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80030f0 <HAL_GPIO_Init+0x31c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x206>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a49      	ldr	r2, [pc, #292]	@ (80030f4 <HAL_GPIO_Init+0x320>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x202>
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	e00c      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e00a      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fda:	2305      	movs	r3, #5
 8002fdc:	e008      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e004      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_GPIO_Init+0x21c>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	f002 0203 	and.w	r2, r2, #3
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	4093      	lsls	r3, r2
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003000:	4935      	ldr	r1, [pc, #212]	@ (80030d8 <HAL_GPIO_Init+0x304>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a26      	ldr	r2, [pc, #152]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003062:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b0:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	f67f ae96 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40020400 	.word	0x40020400
 80030e4:	40020800 	.word	0x40020800
 80030e8:	40020c00 	.word	0x40020c00
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40021400 	.word	0x40021400
 80030f4:	40021800 	.word	0x40021800
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e12b      	b.n	800339a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fa32 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	@ 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003194:	f000 fd6c 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a81      	ldr	r2, [pc, #516]	@ (80033a4 <HAL_I2C_Init+0x274>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d807      	bhi.n	80031b4 <HAL_I2C_Init+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a80      	ldr	r2, [pc, #512]	@ (80033a8 <HAL_I2C_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e006      	b.n	80031c2 <HAL_I2C_Init+0x92>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a7d      	ldr	r2, [pc, #500]	@ (80033ac <HAL_I2C_Init+0x27c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0e7      	b.n	800339a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a78      	ldr	r2, [pc, #480]	@ (80033b0 <HAL_I2C_Init+0x280>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a6a      	ldr	r2, [pc, #424]	@ (80033a4 <HAL_I2C_Init+0x274>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d802      	bhi.n	8003204 <HAL_I2C_Init+0xd4>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	e009      	b.n	8003218 <HAL_I2C_Init+0xe8>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	4a69      	ldr	r2, [pc, #420]	@ (80033b4 <HAL_I2C_Init+0x284>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800322a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	495c      	ldr	r1, [pc, #368]	@ (80033a4 <HAL_I2C_Init+0x274>)
 8003234:	428b      	cmp	r3, r1
 8003236:	d819      	bhi.n	800326c <HAL_I2C_Init+0x13c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e59      	subs	r1, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fbb1 f3f3 	udiv	r3, r1, r3
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800324c:	400b      	ands	r3, r1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_I2C_Init+0x138>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e59      	subs	r1, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	e051      	b.n	800330c <HAL_I2C_Init+0x1dc>
 8003268:	2304      	movs	r3, #4
 800326a:	e04f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_I2C_Init+0x168>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e012      	b.n	80032be <HAL_I2C_Init+0x18e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x196>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e022      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10e      	bne.n	80032ec <HAL_I2C_Init+0x1bc>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e58      	subs	r0, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	6809      	ldr	r1, [r1, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800333a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6911      	ldr	r1, [r2, #16]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	000186a0 	.word	0x000186a0
 80033a8:	001e847f 	.word	0x001e847f
 80033ac:	003d08ff 	.word	0x003d08ff
 80033b0:	431bde83 	.word	0x431bde83
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d2:	f7fe fd55 	bl	8001e80 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	f040 80d9 	bne.w	8003598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2319      	movs	r3, #25
 80033ec:	2201      	movs	r2, #1
 80033ee:	496d      	ldr	r1, [pc, #436]	@ (80035a4 <HAL_I2C_Mem_Write+0x1ec>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f971 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0cc      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2C_Mem_Write+0x56>
 800340a:	2302      	movs	r3, #2
 800340c:	e0c5      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2221      	movs	r2, #33	@ 0x21
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	@ 0x40
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a4d      	ldr	r2, [pc, #308]	@ (80035a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f890 	bl	80035ac <I2C_RequestMemoryWrite>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d052      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e081      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa36 	bl	800390c <I2C_WaitOnTXEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d107      	bne.n	80034be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_I2C_Mem_Write+0x180>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1aa      	bne.n	8003496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fa29 	bl	800399c <I2C_WaitOnBTFFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e016      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	00100002 	.word	0x00100002
 80035a8:	ffff0000 	.word	0xffff0000

080035ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2200      	movs	r2, #0
 80035de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f878 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fc:	d103      	bne.n	8003606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e05f      	b.n	80036ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	492d      	ldr	r1, [pc, #180]	@ (80036d4 <I2C_RequestMemoryWrite+0x128>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f8d3 	bl	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04c      	b.n	80036ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f95e 	bl	800390c <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02b      	b.n	80036ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	611a      	str	r2, [r3, #16]
 8003682:	e021      	b.n	80036c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f938 	bl	800390c <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e005      	b.n	80036ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036be:	893b      	ldrh	r3, [r7, #8]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	00010002 	.word	0x00010002

080036d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e8:	e048      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f0:	d044      	beq.n	800377c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe fbc5 	bl	8001e80 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d139      	bne.n	800377c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10d      	bne.n	800372e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	e00c      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x70>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	d116      	bne.n	800377c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e023      	b.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10d      	bne.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	43da      	mvns	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	e00c      	b.n	80037bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d093      	beq.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037da:	e071      	b.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ea:	d123      	bne.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e067      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800383a:	d041      	beq.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7fe fb20 	bl	8001e80 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d136      	bne.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10c      	bne.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e00b      	b.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	43da      	mvns	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e021      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10c      	bne.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e00b      	b.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af6d 	bne.w	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	e034      	b.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f886 	bl	8003a2c <I2C_IsAcknowledgeFailed>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e034      	b.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003930:	d028      	beq.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe faa5 	bl	8001e80 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11d      	bne.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d016      	beq.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	2b80      	cmp	r3, #128	@ 0x80
 8003990:	d1c3      	bne.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a8:	e034      	b.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f83e 	bl	8003a2c <I2C_IsAcknowledgeFailed>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e034      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c0:	d028      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe fa5d 	bl	8001e80 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11d      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d016      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d1c3      	bne.n	80039aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a42:	d11b      	bne.n	8003a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0cc      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b68      	ldr	r3, [pc, #416]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d90c      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b65      	ldr	r3, [pc, #404]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b8      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae0:	4b59      	ldr	r3, [pc, #356]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af8:	4b53      	ldr	r3, [pc, #332]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a52      	ldr	r2, [pc, #328]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b04:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	494d      	ldr	r1, [pc, #308]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d044      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d119      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e06f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e067      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b37      	ldr	r3, [pc, #220]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4934      	ldr	r1, [pc, #208]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fe f980 	bl	8001e80 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe f97c 	bl	8001e80 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e04f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d20c      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b22      	ldr	r3, [pc, #136]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	@ (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4916      	ldr	r1, [pc, #88]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfe:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490e      	ldr	r1, [pc, #56]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c12:	f000 f855 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490a      	ldr	r1, [pc, #40]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f8e0 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023c00 	.word	0x40023c00
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	08007b78 	.word	0x08007b78
 8003c50:	20000000 	.word	0x20000000
 8003c54:	2000000c 	.word	0x2000000c

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	@ (8003c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000000 	.word	0x20000000

08003c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c74:	f7ff fff0 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	@ (8003c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	08007b88 	.word	0x08007b88

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c9c:	f7ff ffdc 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0b5b      	lsrs	r3, r3, #13
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	@ (8003cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08007b88 	.word	0x08007b88

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b0ae      	sub	sp, #184	@ 0xb8
 8003cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce6:	4bcb      	ldr	r3, [pc, #812]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	f200 8206 	bhi.w	8004100 <HAL_RCC_GetSysClockFreq+0x440>
 8003cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08004101 	.word	0x08004101
 8003d04:	08004101 	.word	0x08004101
 8003d08:	08004101 	.word	0x08004101
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08004101 	.word	0x08004101
 8003d14:	08004101 	.word	0x08004101
 8003d18:	08004101 	.word	0x08004101
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08004101 	.word	0x08004101
 8003d24:	08004101 	.word	0x08004101
 8003d28:	08004101 	.word	0x08004101
 8003d2c:	08003f31 	.word	0x08003f31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4bb9      	ldr	r3, [pc, #740]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d36:	e1e7      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4bb8      	ldr	r3, [pc, #736]	@ (800401c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d3e:	e1e3      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4bb4      	ldr	r3, [pc, #720]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4c:	4bb1      	ldr	r3, [pc, #708]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d071      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d58:	4bae      	ldr	r3, [pc, #696]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d90:	0150      	lsls	r0, r2, #5
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4621      	mov	r1, r4
 8003d98:	1a51      	subs	r1, r2, r1
 8003d9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003db0:	4649      	mov	r1, r9
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dba:	4641      	mov	r1, r8
 8003dbc:	018a      	lsls	r2, r1, #6
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	1a51      	subs	r1, r2, r1
 8003dc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dd8:	4649      	mov	r1, r9
 8003dda:	00cb      	lsls	r3, r1, #3
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de2:	4641      	mov	r1, r8
 8003de4:	00ca      	lsls	r2, r1, #3
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4622      	mov	r2, r4
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df2:	462b      	mov	r3, r5
 8003df4:	460a      	mov	r2, r1
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e08:	4629      	mov	r1, r5
 8003e0a:	024b      	lsls	r3, r1, #9
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e12:	4621      	mov	r1, r4
 8003e14:	024a      	lsls	r2, r1, #9
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e2c:	f7fc fedc 	bl	8000be8 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e3a:	e067      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4b75      	ldr	r3, [pc, #468]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e56:	2300      	movs	r3, #0
 8003e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e70:	0150      	lsls	r0, r2, #5
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4621      	mov	r1, r4
 8003e78:	1a51      	subs	r1, r2, r1
 8003e7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e90:	4649      	mov	r1, r9
 8003e92:	018b      	lsls	r3, r1, #6
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	018a      	lsls	r2, r1, #6
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ebe:	4692      	mov	sl, r2
 8003ec0:	469b      	mov	fp, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	462b      	mov	r3, r5
 8003ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ef8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003efa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003efe:	f7fc fe73 	bl	8000be8 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4613      	mov	r3, r2
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f0c:	4b41      	ldr	r3, [pc, #260]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f2e:	e0eb      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f30:	4b38      	ldr	r3, [pc, #224]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d06b      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f48:	4b32      	ldr	r3, [pc, #200]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	2200      	movs	r2, #0
 8003f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f64:	4622      	mov	r2, r4
 8003f66:	462b      	mov	r3, r5
 8003f68:	f04f 0000 	mov.w	r0, #0
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	0159      	lsls	r1, r3, #5
 8003f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f76:	0150      	lsls	r0, r2, #5
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	1a51      	subs	r1, r2, r1
 8003f80:	61b9      	str	r1, [r7, #24]
 8003f82:	4629      	mov	r1, r5
 8003f84:	eb63 0301 	sbc.w	r3, r3, r1
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f96:	4659      	mov	r1, fp
 8003f98:	018b      	lsls	r3, r1, #6
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	018a      	lsls	r2, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ebb2 0801 	subs.w	r8, r2, r1
 8003faa:	4659      	mov	r1, fp
 8003fac:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc4:	4690      	mov	r8, r2
 8003fc6:	4699      	mov	r9, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	eb18 0303 	adds.w	r3, r8, r3
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	eb49 0303 	adc.w	r3, r9, r3
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	024b      	lsls	r3, r1, #9
 8003fe8:	4621      	mov	r1, r4
 8003fea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fee:	4621      	mov	r1, r4
 8003ff0:	024a      	lsls	r2, r1, #9
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ffe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004000:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004004:	f7fc fdf0 	bl	8000be8 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4613      	mov	r3, r2
 800400e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004012:	e065      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x420>
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x458>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	4618      	mov	r0, r3
 800402a:	4611      	mov	r1, r2
 800402c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004030:	653b      	str	r3, [r7, #80]	@ 0x50
 8004032:	2300      	movs	r3, #0
 8004034:	657b      	str	r3, [r7, #84]	@ 0x54
 8004036:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800403a:	4642      	mov	r2, r8
 800403c:	464b      	mov	r3, r9
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	0159      	lsls	r1, r3, #5
 8004048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404c:	0150      	lsls	r0, r2, #5
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4641      	mov	r1, r8
 8004054:	1a51      	subs	r1, r2, r1
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	4649      	mov	r1, r9
 800405a:	eb63 0301 	sbc.w	r3, r3, r1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800406c:	4659      	mov	r1, fp
 800406e:	018b      	lsls	r3, r1, #6
 8004070:	4651      	mov	r1, sl
 8004072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004076:	4651      	mov	r1, sl
 8004078:	018a      	lsls	r2, r1, #6
 800407a:	4651      	mov	r1, sl
 800407c:	1a54      	subs	r4, r2, r1
 800407e:	4659      	mov	r1, fp
 8004080:	eb63 0501 	sbc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	464b      	mov	r3, r9
 80040a0:	eb45 0303 	adc.w	r3, r5, r3
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040b2:	4629      	mov	r1, r5
 80040b4:	028b      	lsls	r3, r1, #10
 80040b6:	4621      	mov	r1, r4
 80040b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040bc:	4621      	mov	r1, r4
 80040be:	028a      	lsls	r2, r1, #10
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040c8:	2200      	movs	r2, #0
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040d2:	f7fc fd89 	bl	8000be8 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4613      	mov	r3, r2
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x458>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	0f1b      	lsrs	r3, r3, #28
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80040ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040fe:	e003      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004108:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800410c:	4618      	mov	r0, r3
 800410e:	37b8      	adds	r7, #184	@ 0xb8
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400

08004120 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e28d      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8083 	beq.w	8004246 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004140:	4b94      	ldr	r3, [pc, #592]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b04      	cmp	r3, #4
 800414a:	d019      	beq.n	8004180 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800414c:	4b91      	ldr	r3, [pc, #580]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
        || \
 8004154:	2b08      	cmp	r3, #8
 8004156:	d106      	bne.n	8004166 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004158:	4b8e      	ldr	r3, [pc, #568]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4b8b      	ldr	r3, [pc, #556]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b88      	ldr	r3, [pc, #544]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b84      	ldr	r3, [pc, #528]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x124>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e25a      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x90>
 80041a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7b      	ldr	r2, [pc, #492]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xcc>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0xb4>
 80041ba:	4b76      	ldr	r3, [pc, #472]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a75      	ldr	r2, [pc, #468]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b73      	ldr	r3, [pc, #460]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a72      	ldr	r2, [pc, #456]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xcc>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fe44 	bl	8001e80 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fe40 	bl	8001e80 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e21f      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b61      	ldr	r3, [pc, #388]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xdc>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd fe30 	bl	8001e80 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd fe2c 	bl	8001e80 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e20b      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b57      	ldr	r3, [pc, #348]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x104>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d06f      	beq.n	8004332 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004252:	4b50      	ldr	r3, [pc, #320]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d017      	beq.n	800428e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800425e:	4b4d      	ldr	r3, [pc, #308]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
        || \
 8004266:	2b08      	cmp	r3, #8
 8004268:	d105      	bne.n	8004276 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800426a:	4b4a      	ldr	r3, [pc, #296]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d11c      	bne.n	80042bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004282:	4b44      	ldr	r3, [pc, #272]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d116      	bne.n	80042bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428e:	4b41      	ldr	r3, [pc, #260]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x186>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e1d3      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4937      	ldr	r1, [pc, #220]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	e03a      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_RCC_OscConfig+0x278>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ca:	f7fd fdd9 	bl	8001e80 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d2:	f7fd fdd5 	bl	8001e80 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1b4      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f0:	4b28      	ldr	r3, [pc, #160]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4925      	ldr	r1, [pc, #148]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]
 8004304:	e015      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004306:	4b24      	ldr	r3, [pc, #144]	@ (8004398 <HAL_RCC_OscConfig+0x278>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd fdb8 	bl	8001e80 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004314:	f7fd fdb4 	bl	8001e80 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e193      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	4b1b      	ldr	r3, [pc, #108]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d036      	beq.n	80043ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_RCC_OscConfig+0x27c>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd fd98 	bl	8001e80 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004354:	f7fd fd94 	bl	8001e80 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e173      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_OscConfig+0x274>)
 8004368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x234>
 8004372:	e01b      	b.n	80043ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_OscConfig+0x27c>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fd81 	bl	8001e80 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	e00e      	b.n	80043a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004382:	f7fd fd7d 	bl	8001e80 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d907      	bls.n	80043a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e15c      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
 8004394:	40023800 	.word	0x40023800
 8004398:	42470000 	.word	0x42470000
 800439c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	4b8a      	ldr	r3, [pc, #552]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ea      	bne.n	8004382 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8097 	beq.w	80044e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043be:	4b83      	ldr	r3, [pc, #524]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	4b7f      	ldr	r3, [pc, #508]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	4a7e      	ldr	r2, [pc, #504]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043da:	4b7c      	ldr	r3, [pc, #496]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ea:	4b79      	ldr	r3, [pc, #484]	@ (80045d0 <HAL_RCC_OscConfig+0x4b0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d118      	bne.n	8004428 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f6:	4b76      	ldr	r3, [pc, #472]	@ (80045d0 <HAL_RCC_OscConfig+0x4b0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	@ (80045d0 <HAL_RCC_OscConfig+0x4b0>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004402:	f7fd fd3d 	bl	8001e80 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fd fd39 	bl	8001e80 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e118      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b6c      	ldr	r3, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x4b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x31e>
 8004430:	4b66      	ldr	r3, [pc, #408]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4a65      	ldr	r2, [pc, #404]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6713      	str	r3, [r2, #112]	@ 0x70
 800443c:	e01c      	b.n	8004478 <HAL_RCC_OscConfig+0x358>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0x340>
 8004446:	4b61      	ldr	r3, [pc, #388]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	4a60      	ldr	r2, [pc, #384]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	6713      	str	r3, [r2, #112]	@ 0x70
 8004452:	4b5e      	ldr	r3, [pc, #376]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a5d      	ldr	r2, [pc, #372]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0x358>
 8004460:	4b5a      	ldr	r3, [pc, #360]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004464:	4a59      	ldr	r2, [pc, #356]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	4b57      	ldr	r3, [pc, #348]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	4a56      	ldr	r2, [pc, #344]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004472:	f023 0304 	bic.w	r3, r3, #4
 8004476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d015      	beq.n	80044ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd fcfe 	bl	8001e80 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd fcfa 	bl	8001e80 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0d7      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	4b4b      	ldr	r3, [pc, #300]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ee      	beq.n	8004488 <HAL_RCC_OscConfig+0x368>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd fce8 	bl	8001e80 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd fce4 	bl	8001e80 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0c1      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	4b40      	ldr	r3, [pc, #256]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ee      	bne.n	80044b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044dc:	4b3b      	ldr	r3, [pc, #236]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	4a3a      	ldr	r2, [pc, #232]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80ad 	beq.w	800464c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f2:	4b36      	ldr	r3, [pc, #216]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d060      	beq.n	80045c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d145      	bne.n	8004592 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b33      	ldr	r3, [pc, #204]	@ (80045d4 <HAL_RCC_OscConfig+0x4b4>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd fcb8 	bl	8001e80 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fcb4 	bl	8001e80 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e093      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	3b01      	subs	r3, #1
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	491b      	ldr	r1, [pc, #108]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004564:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <HAL_RCC_OscConfig+0x4b4>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd fc89 	bl	8001e80 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7fd fc85 	bl	8001e80 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e064      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x452>
 8004590:	e05c      	b.n	800464c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <HAL_RCC_OscConfig+0x4b4>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd fc72 	bl	8001e80 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd fc6e 	bl	8001e80 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e04d      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x480>
 80045be:	e045      	b.n	800464c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e040      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004658 <HAL_RCC_OscConfig+0x538>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d030      	beq.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d129      	bne.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d122      	bne.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800460e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004610:	4293      	cmp	r3, r2
 8004612:	d119      	bne.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	3b01      	subs	r3, #1
 8004622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d10f      	bne.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e042      	b.n	80046f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc ffe4 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	@ 0x24
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f973 	bl	800498c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	@ 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	d175      	bne.n	8004808 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Transmit+0x2c>
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e06e      	b.n	800480a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2221      	movs	r2, #33	@ 0x21
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473a:	f7fd fba1 	bl	8001e80 <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004754:	d108      	bne.n	8004768 <HAL_UART_Transmit+0x6c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e003      	b.n	8004770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004770:	e02e      	b.n	80047d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f848 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e03a      	b.n	800480a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3302      	adds	r3, #2
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e007      	b.n	80047c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1cb      	bne.n	8004772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2140      	movs	r1, #64	@ 0x40
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f814 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e006      	b.n	800480a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004822:	e03b      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800482a:	d037      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fd fb28 	bl	8001e80 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	6a3a      	ldr	r2, [r7, #32]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <UART_WaitOnFlagUntilTimeout+0x30>
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e03a      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d023      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d020      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d01d      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b08      	cmp	r3, #8
 800486c:	d116      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f81d 	bl	80048c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2208      	movs	r2, #8
 800488e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e00f      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d0b4      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b095      	sub	sp, #84	@ 0x54
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d119      	bne.n	8004970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60bb      	str	r3, [r7, #8]
   return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	647b      	str	r3, [r7, #68]	@ 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495c:	61ba      	str	r2, [r7, #24]
 800495e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800497e:	bf00      	nop
 8004980:	3754      	adds	r7, #84	@ 0x54
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b0c0      	sub	sp, #256	@ 0x100
 8004992:	af00      	add	r7, sp, #0
 8004994:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	68d9      	ldr	r1, [r3, #12]
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	ea40 0301 	orr.w	r3, r0, r1
 80049b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049e4:	f021 010c 	bic.w	r1, r1, #12
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049f2:	430b      	orrs	r3, r1
 80049f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	ea40 0301 	orr.w	r3, r0, r1
 8004a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d005      	beq.n	8004a2c <UART_SetConfig+0xa0>
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b8d      	ldr	r3, [pc, #564]	@ (8004c5c <UART_SetConfig+0x2d0>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d104      	bne.n	8004a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7ff f934 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8004a30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a34:	e003      	b.n	8004a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a36:	f7ff f91b 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8004a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a48:	f040 810c 	bne.w	8004c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a66:	415b      	adcs	r3, r3
 8004a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a6e:	4621      	mov	r1, r4
 8004a70:	eb12 0801 	adds.w	r8, r2, r1
 8004a74:	4629      	mov	r1, r5
 8004a76:	eb43 0901 	adc.w	r9, r3, r1
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a8e:	4690      	mov	r8, r2
 8004a90:	4699      	mov	r9, r3
 8004a92:	4623      	mov	r3, r4
 8004a94:	eb18 0303 	adds.w	r3, r8, r3
 8004a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	eb49 0303 	adc.w	r3, r9, r3
 8004aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aba:	460b      	mov	r3, r1
 8004abc:	18db      	adds	r3, r3, r3
 8004abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	eb42 0303 	adc.w	r3, r2, r3
 8004ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ad0:	f7fc f88a 	bl	8000be8 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4b61      	ldr	r3, [pc, #388]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	011c      	lsls	r4, r3, #4
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004afc:	415b      	adcs	r3, r3
 8004afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b04:	4641      	mov	r1, r8
 8004b06:	eb12 0a01 	adds.w	sl, r2, r1
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b24:	4692      	mov	sl, r2
 8004b26:	469b      	mov	fp, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b32:	464b      	mov	r3, r9
 8004b34:	eb4b 0303 	adc.w	r3, fp, r3
 8004b38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b50:	460b      	mov	r3, r1
 8004b52:	18db      	adds	r3, r3, r3
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b56:	4613      	mov	r3, r2
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b66:	f7fc f83f 	bl	8000be8 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004b72:	fba3 2301 	umull	r2, r3, r3, r1
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2264      	movs	r2, #100	@ 0x64
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	1acb      	subs	r3, r1, r3
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b86:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004b88:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b94:	441c      	add	r4, r3
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bb8:	4641      	mov	r1, r8
 8004bba:	1851      	adds	r1, r2, r1
 8004bbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	00cb      	lsls	r3, r1, #3
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bda:	4651      	mov	r1, sl
 8004bdc:	00ca      	lsls	r2, r1, #3
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	4642      	mov	r2, r8
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bec:	464b      	mov	r3, r9
 8004bee:	460a      	mov	r2, r1
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	18db      	adds	r3, r3, r3
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c12:	4613      	mov	r3, r2
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c22:	f7fb ffe1 	bl	8000be8 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2164      	movs	r1, #100	@ 0x64
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	3332      	adds	r3, #50	@ 0x32
 8004c3e:	4a08      	ldr	r2, [pc, #32]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4422      	add	r2, r4
 8004c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c54:	e106      	b.n	8004e64 <UART_SetConfig+0x4d8>
 8004c56:	bf00      	nop
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40011400 	.word	0x40011400
 8004c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c76:	4642      	mov	r2, r8
 8004c78:	464b      	mov	r3, r9
 8004c7a:	1891      	adds	r1, r2, r2
 8004c7c:	6239      	str	r1, [r7, #32]
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c86:	4641      	mov	r1, r8
 8004c88:	1854      	adds	r4, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb43 0501 	adc.w	r5, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	00eb      	lsls	r3, r5, #3
 8004c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9e:	00e2      	lsls	r2, r4, #3
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4643      	mov	r3, r8
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cac:	464b      	mov	r3, r9
 8004cae:	eb45 0303 	adc.w	r3, r5, r3
 8004cb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cdc:	4621      	mov	r1, r4
 8004cde:	008a      	lsls	r2, r1, #2
 8004ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ce4:	f7fb ff80 	bl	8000be8 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <UART_SetConfig+0x4e4>)
 8004cee:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	011c      	lsls	r4, r3, #4
 8004cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	61b9      	str	r1, [r7, #24]
 8004d10:	415b      	adcs	r3, r3
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d18:	4641      	mov	r1, r8
 8004d1a:	1851      	adds	r1, r2, r1
 8004d1c:	6139      	str	r1, [r7, #16]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	414b      	adcs	r3, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d30:	4659      	mov	r1, fp
 8004d32:	00cb      	lsls	r3, r1, #3
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	00ca      	lsls	r2, r1, #3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	4642      	mov	r2, r8
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	460a      	mov	r2, r1
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d70:	4649      	mov	r1, r9
 8004d72:	008b      	lsls	r3, r1, #2
 8004d74:	4641      	mov	r1, r8
 8004d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	008a      	lsls	r2, r1, #2
 8004d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d82:	f7fb ff31 	bl	8000be8 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4b38      	ldr	r3, [pc, #224]	@ (8004e70 <UART_SetConfig+0x4e4>)
 8004d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2264      	movs	r2, #100	@ 0x64
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	1acb      	subs	r3, r1, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	3332      	adds	r3, #50	@ 0x32
 8004da0:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <UART_SetConfig+0x4e4>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dac:	441c      	add	r4, r3
 8004dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db2:	2200      	movs	r2, #0
 8004db4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004db6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004db8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dcc:	4641      	mov	r1, r8
 8004dce:	1851      	adds	r1, r2, r1
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	414b      	adcs	r3, r1
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004de4:	4659      	mov	r1, fp
 8004de6:	00cb      	lsls	r3, r1, #3
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dee:	4651      	mov	r1, sl
 8004df0:	00ca      	lsls	r2, r1, #3
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfe:	464b      	mov	r3, r9
 8004e00:	460a      	mov	r2, r1
 8004e02:	eb42 0303 	adc.w	r3, r2, r3
 8004e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e12:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e20:	4649      	mov	r1, r9
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	4641      	mov	r1, r8
 8004e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	008a      	lsls	r2, r1, #2
 8004e2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e32:	f7fb fed9 	bl	8000be8 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <UART_SetConfig+0x4e4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	@ 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	3332      	adds	r3, #50	@ 0x32
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <UART_SetConfig+0x4e4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 020f 	and.w	r2, r3, #15
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4422      	add	r2, r4
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	bf00      	nop
 8004e66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e70:	51eb851f 	.word	0x51eb851f

08004e74 <__assert_func>:
 8004e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e76:	4614      	mov	r4, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <__assert_func+0x2c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4605      	mov	r5, r0
 8004e80:	68d8      	ldr	r0, [r3, #12]
 8004e82:	b954      	cbnz	r4, 8004e9a <__assert_func+0x26>
 8004e84:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <__assert_func+0x30>)
 8004e86:	461c      	mov	r4, r3
 8004e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e8c:	9100      	str	r1, [sp, #0]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	4905      	ldr	r1, [pc, #20]	@ (8004ea8 <__assert_func+0x34>)
 8004e92:	f000 fd09 	bl	80058a8 <fiprintf>
 8004e96:	f000 fe28 	bl	8005aea <abort>
 8004e9a:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <__assert_func+0x38>)
 8004e9c:	e7f4      	b.n	8004e88 <__assert_func+0x14>
 8004e9e:	bf00      	nop
 8004ea0:	20000020 	.word	0x20000020
 8004ea4:	08008337 	.word	0x08008337
 8004ea8:	08008309 	.word	0x08008309
 8004eac:	080082fc 	.word	0x080082fc

08004eb0 <__cvt>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	ec57 6b10 	vmov	r6, r7, d0
 8004eb8:	2f00      	cmp	r7, #0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	bfbb      	ittet	lt
 8004ec2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ec6:	461f      	movlt	r7, r3
 8004ec8:	2300      	movge	r3, #0
 8004eca:	232d      	movlt	r3, #45	@ 0x2d
 8004ecc:	700b      	strb	r3, [r1, #0]
 8004ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	f023 0820 	bic.w	r8, r3, #32
 8004eda:	bfbc      	itt	lt
 8004edc:	4632      	movlt	r2, r6
 8004ede:	4616      	movlt	r6, r2
 8004ee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ee4:	d005      	beq.n	8004ef2 <__cvt+0x42>
 8004ee6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004eea:	d100      	bne.n	8004eee <__cvt+0x3e>
 8004eec:	3401      	adds	r4, #1
 8004eee:	2102      	movs	r1, #2
 8004ef0:	e000      	b.n	8004ef4 <__cvt+0x44>
 8004ef2:	2103      	movs	r1, #3
 8004ef4:	ab03      	add	r3, sp, #12
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	ab02      	add	r3, sp, #8
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	ec47 6b10 	vmov	d0, r6, r7
 8004f00:	4653      	mov	r3, sl
 8004f02:	4622      	mov	r2, r4
 8004f04:	f000 fe80 	bl	8005c08 <_dtoa_r>
 8004f08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	d119      	bne.n	8004f44 <__cvt+0x94>
 8004f10:	f019 0f01 	tst.w	r9, #1
 8004f14:	d00e      	beq.n	8004f34 <__cvt+0x84>
 8004f16:	eb00 0904 	add.w	r9, r0, r4
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fdf1 	bl	8000b08 <__aeabi_dcmpeq>
 8004f26:	b108      	cbz	r0, 8004f2c <__cvt+0x7c>
 8004f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f2c:	2230      	movs	r2, #48	@ 0x30
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	454b      	cmp	r3, r9
 8004f32:	d31e      	bcc.n	8004f72 <__cvt+0xc2>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f38:	1b5b      	subs	r3, r3, r5
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	b004      	add	sp, #16
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f48:	eb00 0904 	add.w	r9, r0, r4
 8004f4c:	d1e5      	bne.n	8004f1a <__cvt+0x6a>
 8004f4e:	7803      	ldrb	r3, [r0, #0]
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d10a      	bne.n	8004f6a <__cvt+0xba>
 8004f54:	2200      	movs	r2, #0
 8004f56:	2300      	movs	r3, #0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 8004f60:	b918      	cbnz	r0, 8004f6a <__cvt+0xba>
 8004f62:	f1c4 0401 	rsb	r4, r4, #1
 8004f66:	f8ca 4000 	str.w	r4, [sl]
 8004f6a:	f8da 3000 	ldr.w	r3, [sl]
 8004f6e:	4499      	add	r9, r3
 8004f70:	e7d3      	b.n	8004f1a <__cvt+0x6a>
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	9103      	str	r1, [sp, #12]
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e7d9      	b.n	8004f2e <__cvt+0x7e>

08004f7a <__exponent>:
 8004f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	bfba      	itte	lt
 8004f80:	4249      	neglt	r1, r1
 8004f82:	232d      	movlt	r3, #45	@ 0x2d
 8004f84:	232b      	movge	r3, #43	@ 0x2b
 8004f86:	2909      	cmp	r1, #9
 8004f88:	7002      	strb	r2, [r0, #0]
 8004f8a:	7043      	strb	r3, [r0, #1]
 8004f8c:	dd29      	ble.n	8004fe2 <__exponent+0x68>
 8004f8e:	f10d 0307 	add.w	r3, sp, #7
 8004f92:	461d      	mov	r5, r3
 8004f94:	270a      	movs	r7, #10
 8004f96:	461a      	mov	r2, r3
 8004f98:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f9c:	fb07 1416 	mls	r4, r7, r6, r1
 8004fa0:	3430      	adds	r4, #48	@ 0x30
 8004fa2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2c63      	cmp	r4, #99	@ 0x63
 8004faa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004fae:	4631      	mov	r1, r6
 8004fb0:	dcf1      	bgt.n	8004f96 <__exponent+0x1c>
 8004fb2:	3130      	adds	r1, #48	@ 0x30
 8004fb4:	1e94      	subs	r4, r2, #2
 8004fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fba:	1c41      	adds	r1, r0, #1
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	d30a      	bcc.n	8004fd8 <__exponent+0x5e>
 8004fc2:	f10d 0309 	add.w	r3, sp, #9
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ac      	cmp	r4, r5
 8004fca:	bf88      	it	hi
 8004fcc:	2300      	movhi	r3, #0
 8004fce:	3302      	adds	r3, #2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	1a18      	subs	r0, r3, r0
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fe0:	e7ed      	b.n	8004fbe <__exponent+0x44>
 8004fe2:	2330      	movs	r3, #48	@ 0x30
 8004fe4:	3130      	adds	r1, #48	@ 0x30
 8004fe6:	7083      	strb	r3, [r0, #2]
 8004fe8:	70c1      	strb	r1, [r0, #3]
 8004fea:	1d03      	adds	r3, r0, #4
 8004fec:	e7f1      	b.n	8004fd2 <__exponent+0x58>
	...

08004ff0 <_printf_float>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	b08d      	sub	sp, #52	@ 0x34
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	461f      	mov	r7, r3
 8005000:	4605      	mov	r5, r0
 8005002:	f000 fced 	bl	80059e0 <_localeconv_r>
 8005006:	6803      	ldr	r3, [r0, #0]
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb f950 	bl	80002b0 <strlen>
 8005010:	2300      	movs	r3, #0
 8005012:	930a      	str	r3, [sp, #40]	@ 0x28
 8005014:	f8d8 3000 	ldr.w	r3, [r8]
 8005018:	9005      	str	r0, [sp, #20]
 800501a:	3307      	adds	r3, #7
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	f103 0208 	add.w	r2, r3, #8
 8005024:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005028:	f8d4 b000 	ldr.w	fp, [r4]
 800502c:	f8c8 2000 	str.w	r2, [r8]
 8005030:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005034:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005038:	9307      	str	r3, [sp, #28]
 800503a:	f8cd 8018 	str.w	r8, [sp, #24]
 800503e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005046:	4b9c      	ldr	r3, [pc, #624]	@ (80052b8 <_printf_float+0x2c8>)
 8005048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800504c:	f7fb fd8e 	bl	8000b6c <__aeabi_dcmpun>
 8005050:	bb70      	cbnz	r0, 80050b0 <_printf_float+0xc0>
 8005052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005056:	4b98      	ldr	r3, [pc, #608]	@ (80052b8 <_printf_float+0x2c8>)
 8005058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800505c:	f7fb fd68 	bl	8000b30 <__aeabi_dcmple>
 8005060:	bb30      	cbnz	r0, 80050b0 <_printf_float+0xc0>
 8005062:	2200      	movs	r2, #0
 8005064:	2300      	movs	r3, #0
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb fd57 	bl	8000b1c <__aeabi_dcmplt>
 800506e:	b110      	cbz	r0, 8005076 <_printf_float+0x86>
 8005070:	232d      	movs	r3, #45	@ 0x2d
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005076:	4a91      	ldr	r2, [pc, #580]	@ (80052bc <_printf_float+0x2cc>)
 8005078:	4b91      	ldr	r3, [pc, #580]	@ (80052c0 <_printf_float+0x2d0>)
 800507a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800507e:	bf94      	ite	ls
 8005080:	4690      	movls	r8, r2
 8005082:	4698      	movhi	r8, r3
 8005084:	2303      	movs	r3, #3
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	f02b 0304 	bic.w	r3, fp, #4
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	f04f 0900 	mov.w	r9, #0
 8005092:	9700      	str	r7, [sp, #0]
 8005094:	4633      	mov	r3, r6
 8005096:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f9d2 	bl	8005444 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f040 808d 	bne.w	80051c0 <_printf_float+0x1d0>
 80050a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050aa:	b00d      	add	sp, #52	@ 0x34
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	4649      	mov	r1, r9
 80050b8:	f7fb fd58 	bl	8000b6c <__aeabi_dcmpun>
 80050bc:	b140      	cbz	r0, 80050d0 <_printf_float+0xe0>
 80050be:	464b      	mov	r3, r9
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bfbc      	itt	lt
 80050c4:	232d      	movlt	r3, #45	@ 0x2d
 80050c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050ca:	4a7e      	ldr	r2, [pc, #504]	@ (80052c4 <_printf_float+0x2d4>)
 80050cc:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <_printf_float+0x2d8>)
 80050ce:	e7d4      	b.n	800507a <_printf_float+0x8a>
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050d6:	9206      	str	r2, [sp, #24]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	d13b      	bne.n	8005154 <_printf_float+0x164>
 80050dc:	2306      	movs	r3, #6
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050e4:	2300      	movs	r3, #0
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80050ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050f0:	ab09      	add	r3, sp, #36	@ 0x24
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	ec49 8b10 	vmov	d0, r8, r9
 80050fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050fe:	4628      	mov	r0, r5
 8005100:	f7ff fed6 	bl	8004eb0 <__cvt>
 8005104:	9b06      	ldr	r3, [sp, #24]
 8005106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005108:	2b47      	cmp	r3, #71	@ 0x47
 800510a:	4680      	mov	r8, r0
 800510c:	d129      	bne.n	8005162 <_printf_float+0x172>
 800510e:	1cc8      	adds	r0, r1, #3
 8005110:	db02      	blt.n	8005118 <_printf_float+0x128>
 8005112:	6863      	ldr	r3, [r4, #4]
 8005114:	4299      	cmp	r1, r3
 8005116:	dd41      	ble.n	800519c <_printf_float+0x1ac>
 8005118:	f1aa 0a02 	sub.w	sl, sl, #2
 800511c:	fa5f fa8a 	uxtb.w	sl, sl
 8005120:	3901      	subs	r1, #1
 8005122:	4652      	mov	r2, sl
 8005124:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005128:	9109      	str	r1, [sp, #36]	@ 0x24
 800512a:	f7ff ff26 	bl	8004f7a <__exponent>
 800512e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005130:	1813      	adds	r3, r2, r0
 8005132:	2a01      	cmp	r2, #1
 8005134:	4681      	mov	r9, r0
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	dc02      	bgt.n	8005140 <_printf_float+0x150>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d2      	lsls	r2, r2, #31
 800513e:	d501      	bpl.n	8005144 <_printf_float+0x154>
 8005140:	3301      	adds	r3, #1
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0a2      	beq.n	8005092 <_printf_float+0xa2>
 800514c:	232d      	movs	r3, #45	@ 0x2d
 800514e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005152:	e79e      	b.n	8005092 <_printf_float+0xa2>
 8005154:	9a06      	ldr	r2, [sp, #24]
 8005156:	2a47      	cmp	r2, #71	@ 0x47
 8005158:	d1c2      	bne.n	80050e0 <_printf_float+0xf0>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1c0      	bne.n	80050e0 <_printf_float+0xf0>
 800515e:	2301      	movs	r3, #1
 8005160:	e7bd      	b.n	80050de <_printf_float+0xee>
 8005162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005166:	d9db      	bls.n	8005120 <_printf_float+0x130>
 8005168:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800516c:	d118      	bne.n	80051a0 <_printf_float+0x1b0>
 800516e:	2900      	cmp	r1, #0
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	dd0b      	ble.n	800518c <_printf_float+0x19c>
 8005174:	6121      	str	r1, [r4, #16]
 8005176:	b913      	cbnz	r3, 800517e <_printf_float+0x18e>
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	07d0      	lsls	r0, r2, #31
 800517c:	d502      	bpl.n	8005184 <_printf_float+0x194>
 800517e:	3301      	adds	r3, #1
 8005180:	440b      	add	r3, r1
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	e7db      	b.n	8005144 <_printf_float+0x154>
 800518c:	b913      	cbnz	r3, 8005194 <_printf_float+0x1a4>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	07d2      	lsls	r2, r2, #31
 8005192:	d501      	bpl.n	8005198 <_printf_float+0x1a8>
 8005194:	3302      	adds	r3, #2
 8005196:	e7f4      	b.n	8005182 <_printf_float+0x192>
 8005198:	2301      	movs	r3, #1
 800519a:	e7f2      	b.n	8005182 <_printf_float+0x192>
 800519c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051a2:	4299      	cmp	r1, r3
 80051a4:	db05      	blt.n	80051b2 <_printf_float+0x1c2>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	6121      	str	r1, [r4, #16]
 80051aa:	07d8      	lsls	r0, r3, #31
 80051ac:	d5ea      	bpl.n	8005184 <_printf_float+0x194>
 80051ae:	1c4b      	adds	r3, r1, #1
 80051b0:	e7e7      	b.n	8005182 <_printf_float+0x192>
 80051b2:	2900      	cmp	r1, #0
 80051b4:	bfd4      	ite	le
 80051b6:	f1c1 0202 	rsble	r2, r1, #2
 80051ba:	2201      	movgt	r2, #1
 80051bc:	4413      	add	r3, r2
 80051be:	e7e0      	b.n	8005182 <_printf_float+0x192>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	055a      	lsls	r2, r3, #21
 80051c4:	d407      	bmi.n	80051d6 <_printf_float+0x1e6>
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	4642      	mov	r2, r8
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	d12b      	bne.n	800522c <_printf_float+0x23c>
 80051d4:	e767      	b.n	80050a6 <_printf_float+0xb6>
 80051d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051da:	f240 80dd 	bls.w	8005398 <_printf_float+0x3a8>
 80051de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	f7fb fc8f 	bl	8000b08 <__aeabi_dcmpeq>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d033      	beq.n	8005256 <_printf_float+0x266>
 80051ee:	4a37      	ldr	r2, [pc, #220]	@ (80052cc <_printf_float+0x2dc>)
 80051f0:	2301      	movs	r3, #1
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f af54 	beq.w	80050a6 <_printf_float+0xb6>
 80051fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005202:	4543      	cmp	r3, r8
 8005204:	db02      	blt.n	800520c <_printf_float+0x21c>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	07d8      	lsls	r0, r3, #31
 800520a:	d50f      	bpl.n	800522c <_printf_float+0x23c>
 800520c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af45 	beq.w	80050a6 <_printf_float+0xb6>
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005224:	f104 0a1a 	add.w	sl, r4, #26
 8005228:	45c8      	cmp	r8, r9
 800522a:	dc09      	bgt.n	8005240 <_printf_float+0x250>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	f100 8103 	bmi.w	800543a <_printf_float+0x44a>
 8005234:	68e0      	ldr	r0, [r4, #12]
 8005236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005238:	4298      	cmp	r0, r3
 800523a:	bfb8      	it	lt
 800523c:	4618      	movlt	r0, r3
 800523e:	e734      	b.n	80050aa <_printf_float+0xba>
 8005240:	2301      	movs	r3, #1
 8005242:	4652      	mov	r2, sl
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f af2b 	beq.w	80050a6 <_printf_float+0xb6>
 8005250:	f109 0901 	add.w	r9, r9, #1
 8005254:	e7e8      	b.n	8005228 <_printf_float+0x238>
 8005256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	dc39      	bgt.n	80052d0 <_printf_float+0x2e0>
 800525c:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <_printf_float+0x2dc>)
 800525e:	2301      	movs	r3, #1
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af1d 	beq.w	80050a6 <_printf_float+0xb6>
 800526c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005270:	ea59 0303 	orrs.w	r3, r9, r3
 8005274:	d102      	bne.n	800527c <_printf_float+0x28c>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	07d9      	lsls	r1, r3, #31
 800527a:	d5d7      	bpl.n	800522c <_printf_float+0x23c>
 800527c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af0d 	beq.w	80050a6 <_printf_float+0xb6>
 800528c:	f04f 0a00 	mov.w	sl, #0
 8005290:	f104 0b1a 	add.w	fp, r4, #26
 8005294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005296:	425b      	negs	r3, r3
 8005298:	4553      	cmp	r3, sl
 800529a:	dc01      	bgt.n	80052a0 <_printf_float+0x2b0>
 800529c:	464b      	mov	r3, r9
 800529e:	e793      	b.n	80051c8 <_printf_float+0x1d8>
 80052a0:	2301      	movs	r3, #1
 80052a2:	465a      	mov	r2, fp
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f aefb 	beq.w	80050a6 <_printf_float+0xb6>
 80052b0:	f10a 0a01 	add.w	sl, sl, #1
 80052b4:	e7ee      	b.n	8005294 <_printf_float+0x2a4>
 80052b6:	bf00      	nop
 80052b8:	7fefffff 	.word	0x7fefffff
 80052bc:	08008338 	.word	0x08008338
 80052c0:	0800833c 	.word	0x0800833c
 80052c4:	08008340 	.word	0x08008340
 80052c8:	08008344 	.word	0x08008344
 80052cc:	08008348 	.word	0x08008348
 80052d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052d6:	4553      	cmp	r3, sl
 80052d8:	bfa8      	it	ge
 80052da:	4653      	movge	r3, sl
 80052dc:	2b00      	cmp	r3, #0
 80052de:	4699      	mov	r9, r3
 80052e0:	dc36      	bgt.n	8005350 <_printf_float+0x360>
 80052e2:	f04f 0b00 	mov.w	fp, #0
 80052e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ea:	f104 021a 	add.w	r2, r4, #26
 80052ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052f0:	9306      	str	r3, [sp, #24]
 80052f2:	eba3 0309 	sub.w	r3, r3, r9
 80052f6:	455b      	cmp	r3, fp
 80052f8:	dc31      	bgt.n	800535e <_printf_float+0x36e>
 80052fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fc:	459a      	cmp	sl, r3
 80052fe:	dc3a      	bgt.n	8005376 <_printf_float+0x386>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d437      	bmi.n	8005376 <_printf_float+0x386>
 8005306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005308:	ebaa 0903 	sub.w	r9, sl, r3
 800530c:	9b06      	ldr	r3, [sp, #24]
 800530e:	ebaa 0303 	sub.w	r3, sl, r3
 8005312:	4599      	cmp	r9, r3
 8005314:	bfa8      	it	ge
 8005316:	4699      	movge	r9, r3
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	dc33      	bgt.n	8005386 <_printf_float+0x396>
 800531e:	f04f 0800 	mov.w	r8, #0
 8005322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005326:	f104 0b1a 	add.w	fp, r4, #26
 800532a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532c:	ebaa 0303 	sub.w	r3, sl, r3
 8005330:	eba3 0309 	sub.w	r3, r3, r9
 8005334:	4543      	cmp	r3, r8
 8005336:	f77f af79 	ble.w	800522c <_printf_float+0x23c>
 800533a:	2301      	movs	r3, #1
 800533c:	465a      	mov	r2, fp
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f aeae 	beq.w	80050a6 <_printf_float+0xb6>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	e7ec      	b.n	800532a <_printf_float+0x33a>
 8005350:	4642      	mov	r2, r8
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	d1c2      	bne.n	80052e2 <_printf_float+0x2f2>
 800535c:	e6a3      	b.n	80050a6 <_printf_float+0xb6>
 800535e:	2301      	movs	r3, #1
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	9206      	str	r2, [sp, #24]
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae9c 	beq.w	80050a6 <_printf_float+0xb6>
 800536e:	9a06      	ldr	r2, [sp, #24]
 8005370:	f10b 0b01 	add.w	fp, fp, #1
 8005374:	e7bb      	b.n	80052ee <_printf_float+0x2fe>
 8005376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	d1c0      	bne.n	8005306 <_printf_float+0x316>
 8005384:	e68f      	b.n	80050a6 <_printf_float+0xb6>
 8005386:	9a06      	ldr	r2, [sp, #24]
 8005388:	464b      	mov	r3, r9
 800538a:	4442      	add	r2, r8
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	d1c3      	bne.n	800531e <_printf_float+0x32e>
 8005396:	e686      	b.n	80050a6 <_printf_float+0xb6>
 8005398:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800539c:	f1ba 0f01 	cmp.w	sl, #1
 80053a0:	dc01      	bgt.n	80053a6 <_printf_float+0x3b6>
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	d536      	bpl.n	8005414 <_printf_float+0x424>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4642      	mov	r2, r8
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f ae78 	beq.w	80050a6 <_printf_float+0xb6>
 80053b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f ae70 	beq.w	80050a6 <_printf_float+0xb6>
 80053c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053ca:	2200      	movs	r2, #0
 80053cc:	2300      	movs	r3, #0
 80053ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80053d2:	f7fb fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80053d6:	b9c0      	cbnz	r0, 800540a <_printf_float+0x41a>
 80053d8:	4653      	mov	r3, sl
 80053da:	f108 0201 	add.w	r2, r8, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d10c      	bne.n	8005402 <_printf_float+0x412>
 80053e8:	e65d      	b.n	80050a6 <_printf_float+0xb6>
 80053ea:	2301      	movs	r3, #1
 80053ec:	465a      	mov	r2, fp
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae56 	beq.w	80050a6 <_printf_float+0xb6>
 80053fa:	f108 0801 	add.w	r8, r8, #1
 80053fe:	45d0      	cmp	r8, sl
 8005400:	dbf3      	blt.n	80053ea <_printf_float+0x3fa>
 8005402:	464b      	mov	r3, r9
 8005404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005408:	e6df      	b.n	80051ca <_printf_float+0x1da>
 800540a:	f04f 0800 	mov.w	r8, #0
 800540e:	f104 0b1a 	add.w	fp, r4, #26
 8005412:	e7f4      	b.n	80053fe <_printf_float+0x40e>
 8005414:	2301      	movs	r3, #1
 8005416:	4642      	mov	r2, r8
 8005418:	e7e1      	b.n	80053de <_printf_float+0x3ee>
 800541a:	2301      	movs	r3, #1
 800541c:	464a      	mov	r2, r9
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae3e 	beq.w	80050a6 <_printf_float+0xb6>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005432:	1a5b      	subs	r3, r3, r1
 8005434:	4543      	cmp	r3, r8
 8005436:	dcf0      	bgt.n	800541a <_printf_float+0x42a>
 8005438:	e6fc      	b.n	8005234 <_printf_float+0x244>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	f104 0919 	add.w	r9, r4, #25
 8005442:	e7f4      	b.n	800542e <_printf_float+0x43e>

08005444 <_printf_common>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	4616      	mov	r6, r2
 800544a:	4698      	mov	r8, r3
 800544c:	688a      	ldr	r2, [r1, #8]
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005454:	4293      	cmp	r3, r2
 8005456:	bfb8      	it	lt
 8005458:	4613      	movlt	r3, r2
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005460:	4607      	mov	r7, r0
 8005462:	460c      	mov	r4, r1
 8005464:	b10a      	cbz	r2, 800546a <_printf_common+0x26>
 8005466:	3301      	adds	r3, #1
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	0699      	lsls	r1, r3, #26
 800546e:	bf42      	ittt	mi
 8005470:	6833      	ldrmi	r3, [r6, #0]
 8005472:	3302      	addmi	r3, #2
 8005474:	6033      	strmi	r3, [r6, #0]
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	f015 0506 	ands.w	r5, r5, #6
 800547c:	d106      	bne.n	800548c <_printf_common+0x48>
 800547e:	f104 0a19 	add.w	sl, r4, #25
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	6832      	ldr	r2, [r6, #0]
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	42ab      	cmp	r3, r5
 800548a:	dc26      	bgt.n	80054da <_printf_common+0x96>
 800548c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	3b00      	subs	r3, #0
 8005494:	bf18      	it	ne
 8005496:	2301      	movne	r3, #1
 8005498:	0692      	lsls	r2, r2, #26
 800549a:	d42b      	bmi.n	80054f4 <_printf_common+0xb0>
 800549c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054a0:	4641      	mov	r1, r8
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c8      	blx	r9
 80054a6:	3001      	adds	r0, #1
 80054a8:	d01e      	beq.n	80054e8 <_printf_common+0xa4>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6922      	ldr	r2, [r4, #16]
 80054ae:	f003 0306 	and.w	r3, r3, #6
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf02      	ittt	eq
 80054b6:	68e5      	ldreq	r5, [r4, #12]
 80054b8:	6833      	ldreq	r3, [r6, #0]
 80054ba:	1aed      	subeq	r5, r5, r3
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	bf0c      	ite	eq
 80054c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c4:	2500      	movne	r5, #0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bfc4      	itt	gt
 80054ca:	1a9b      	subgt	r3, r3, r2
 80054cc:	18ed      	addgt	r5, r5, r3
 80054ce:	2600      	movs	r6, #0
 80054d0:	341a      	adds	r4, #26
 80054d2:	42b5      	cmp	r5, r6
 80054d4:	d11a      	bne.n	800550c <_printf_common+0xc8>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e008      	b.n	80054ec <_printf_common+0xa8>
 80054da:	2301      	movs	r3, #1
 80054dc:	4652      	mov	r2, sl
 80054de:	4641      	mov	r1, r8
 80054e0:	4638      	mov	r0, r7
 80054e2:	47c8      	blx	r9
 80054e4:	3001      	adds	r0, #1
 80054e6:	d103      	bne.n	80054f0 <_printf_common+0xac>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	3501      	adds	r5, #1
 80054f2:	e7c6      	b.n	8005482 <_printf_common+0x3e>
 80054f4:	18e1      	adds	r1, r4, r3
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	2030      	movs	r0, #48	@ 0x30
 80054fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054fe:	4422      	add	r2, r4
 8005500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005508:	3302      	adds	r3, #2
 800550a:	e7c7      	b.n	800549c <_printf_common+0x58>
 800550c:	2301      	movs	r3, #1
 800550e:	4622      	mov	r2, r4
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d0e6      	beq.n	80054e8 <_printf_common+0xa4>
 800551a:	3601      	adds	r6, #1
 800551c:	e7d9      	b.n	80054d2 <_printf_common+0x8e>
	...

08005520 <_printf_i>:
 8005520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7e0f      	ldrb	r7, [r1, #24]
 8005526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005528:	2f78      	cmp	r7, #120	@ 0x78
 800552a:	4691      	mov	r9, r2
 800552c:	4680      	mov	r8, r0
 800552e:	460c      	mov	r4, r1
 8005530:	469a      	mov	sl, r3
 8005532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005536:	d807      	bhi.n	8005548 <_printf_i+0x28>
 8005538:	2f62      	cmp	r7, #98	@ 0x62
 800553a:	d80a      	bhi.n	8005552 <_printf_i+0x32>
 800553c:	2f00      	cmp	r7, #0
 800553e:	f000 80d2 	beq.w	80056e6 <_printf_i+0x1c6>
 8005542:	2f58      	cmp	r7, #88	@ 0x58
 8005544:	f000 80b9 	beq.w	80056ba <_printf_i+0x19a>
 8005548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800554c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005550:	e03a      	b.n	80055c8 <_printf_i+0xa8>
 8005552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005556:	2b15      	cmp	r3, #21
 8005558:	d8f6      	bhi.n	8005548 <_printf_i+0x28>
 800555a:	a101      	add	r1, pc, #4	@ (adr r1, 8005560 <_printf_i+0x40>)
 800555c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055cd 	.word	0x080055cd
 8005568:	08005549 	.word	0x08005549
 800556c:	08005549 	.word	0x08005549
 8005570:	08005549 	.word	0x08005549
 8005574:	08005549 	.word	0x08005549
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005549 	.word	0x08005549
 8005580:	08005549 	.word	0x08005549
 8005584:	08005549 	.word	0x08005549
 8005588:	08005549 	.word	0x08005549
 800558c:	080056cd 	.word	0x080056cd
 8005590:	080055f7 	.word	0x080055f7
 8005594:	08005687 	.word	0x08005687
 8005598:	08005549 	.word	0x08005549
 800559c:	08005549 	.word	0x08005549
 80055a0:	080056ef 	.word	0x080056ef
 80055a4:	08005549 	.word	0x08005549
 80055a8:	080055f7 	.word	0x080055f7
 80055ac:	08005549 	.word	0x08005549
 80055b0:	08005549 	.word	0x08005549
 80055b4:	0800568f 	.word	0x0800568f
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6032      	str	r2, [r6, #0]
 80055c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c8:	2301      	movs	r3, #1
 80055ca:	e09d      	b.n	8005708 <_printf_i+0x1e8>
 80055cc:	6833      	ldr	r3, [r6, #0]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	6031      	str	r1, [r6, #0]
 80055d4:	0606      	lsls	r6, r0, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xbc>
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	e003      	b.n	80055e4 <_printf_i+0xc4>
 80055dc:	0645      	lsls	r5, r0, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xb8>
 80055e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	da03      	bge.n	80055f0 <_printf_i+0xd0>
 80055e8:	232d      	movs	r3, #45	@ 0x2d
 80055ea:	426d      	negs	r5, r5
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055f0:	4859      	ldr	r0, [pc, #356]	@ (8005758 <_printf_i+0x238>)
 80055f2:	230a      	movs	r3, #10
 80055f4:	e011      	b.n	800561a <_printf_i+0xfa>
 80055f6:	6821      	ldr	r1, [r4, #0]
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	0608      	lsls	r0, r1, #24
 80055fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005600:	d402      	bmi.n	8005608 <_printf_i+0xe8>
 8005602:	0649      	lsls	r1, r1, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	2f6f      	cmp	r7, #111	@ 0x6f
 800560a:	4853      	ldr	r0, [pc, #332]	@ (8005758 <_printf_i+0x238>)
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	bf14      	ite	ne
 8005610:	230a      	movne	r3, #10
 8005612:	2308      	moveq	r3, #8
 8005614:	2100      	movs	r1, #0
 8005616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800561a:	6866      	ldr	r6, [r4, #4]
 800561c:	60a6      	str	r6, [r4, #8]
 800561e:	2e00      	cmp	r6, #0
 8005620:	bfa2      	ittt	ge
 8005622:	6821      	ldrge	r1, [r4, #0]
 8005624:	f021 0104 	bicge.w	r1, r1, #4
 8005628:	6021      	strge	r1, [r4, #0]
 800562a:	b90d      	cbnz	r5, 8005630 <_printf_i+0x110>
 800562c:	2e00      	cmp	r6, #0
 800562e:	d04b      	beq.n	80056c8 <_printf_i+0x1a8>
 8005630:	4616      	mov	r6, r2
 8005632:	fbb5 f1f3 	udiv	r1, r5, r3
 8005636:	fb03 5711 	mls	r7, r3, r1, r5
 800563a:	5dc7      	ldrb	r7, [r0, r7]
 800563c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005640:	462f      	mov	r7, r5
 8005642:	42bb      	cmp	r3, r7
 8005644:	460d      	mov	r5, r1
 8005646:	d9f4      	bls.n	8005632 <_printf_i+0x112>
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10b      	bne.n	8005664 <_printf_i+0x144>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07df      	lsls	r7, r3, #31
 8005650:	d508      	bpl.n	8005664 <_printf_i+0x144>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	6861      	ldr	r1, [r4, #4]
 8005656:	4299      	cmp	r1, r3
 8005658:	bfde      	ittt	le
 800565a:	2330      	movle	r3, #48	@ 0x30
 800565c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005660:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005664:	1b92      	subs	r2, r2, r6
 8005666:	6122      	str	r2, [r4, #16]
 8005668:	f8cd a000 	str.w	sl, [sp]
 800566c:	464b      	mov	r3, r9
 800566e:	aa03      	add	r2, sp, #12
 8005670:	4621      	mov	r1, r4
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fee6 	bl	8005444 <_printf_common>
 8005678:	3001      	adds	r0, #1
 800567a:	d14a      	bne.n	8005712 <_printf_i+0x1f2>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	4833      	ldr	r0, [pc, #204]	@ (800575c <_printf_i+0x23c>)
 8005690:	2778      	movs	r7, #120	@ 0x78
 8005692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6831      	ldr	r1, [r6, #0]
 800569a:	061f      	lsls	r7, r3, #24
 800569c:	f851 5b04 	ldr.w	r5, [r1], #4
 80056a0:	d402      	bmi.n	80056a8 <_printf_i+0x188>
 80056a2:	065f      	lsls	r7, r3, #25
 80056a4:	bf48      	it	mi
 80056a6:	b2ad      	uxthmi	r5, r5
 80056a8:	6031      	str	r1, [r6, #0]
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	bf44      	itt	mi
 80056ae:	f043 0320 	orrmi.w	r3, r3, #32
 80056b2:	6023      	strmi	r3, [r4, #0]
 80056b4:	b11d      	cbz	r5, 80056be <_printf_i+0x19e>
 80056b6:	2310      	movs	r3, #16
 80056b8:	e7ac      	b.n	8005614 <_printf_i+0xf4>
 80056ba:	4827      	ldr	r0, [pc, #156]	@ (8005758 <_printf_i+0x238>)
 80056bc:	e7e9      	b.n	8005692 <_printf_i+0x172>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f023 0320 	bic.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	e7f6      	b.n	80056b6 <_printf_i+0x196>
 80056c8:	4616      	mov	r6, r2
 80056ca:	e7bd      	b.n	8005648 <_printf_i+0x128>
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	6961      	ldr	r1, [r4, #20]
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	062e      	lsls	r6, r5, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1c0>
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1c6>
 80056e0:	0668      	lsls	r0, r5, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1bc>
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4616      	mov	r6, r2
 80056ec:	e7bc      	b.n	8005668 <_printf_i+0x148>
 80056ee:	6833      	ldr	r3, [r6, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	6032      	str	r2, [r6, #0]
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa fd88 	bl	8000210 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1e6>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005710:	e7aa      	b.n	8005668 <_printf_i+0x148>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ad      	beq.n	800567c <_printf_i+0x15c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x22e>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a6      	b.n	8005680 <_printf_i+0x160>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09d      	beq.n	800567c <_printf_i+0x15c>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x212>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x206>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x222>
 8005756:	bf00      	nop
 8005758:	0800834a 	.word	0x0800834a
 800575c:	0800835b 	.word	0x0800835b

08005760 <std>:
 8005760:	2300      	movs	r3, #0
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	e9c0 3300 	strd	r3, r3, [r0]
 800576a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800576e:	6083      	str	r3, [r0, #8]
 8005770:	8181      	strh	r1, [r0, #12]
 8005772:	6643      	str	r3, [r0, #100]	@ 0x64
 8005774:	81c2      	strh	r2, [r0, #14]
 8005776:	6183      	str	r3, [r0, #24]
 8005778:	4619      	mov	r1, r3
 800577a:	2208      	movs	r2, #8
 800577c:	305c      	adds	r0, #92	@ 0x5c
 800577e:	f000 f926 	bl	80059ce <memset>
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <std+0x58>)
 8005784:	6263      	str	r3, [r4, #36]	@ 0x24
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <std+0x5c>)
 8005788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x60>)
 800578c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <std+0x64>)
 8005790:	6323      	str	r3, [r4, #48]	@ 0x30
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <std+0x68>)
 8005794:	6224      	str	r4, [r4, #32]
 8005796:	429c      	cmp	r4, r3
 8005798:	d006      	beq.n	80057a8 <std+0x48>
 800579a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800579e:	4294      	cmp	r4, r2
 80057a0:	d002      	beq.n	80057a8 <std+0x48>
 80057a2:	33d0      	adds	r3, #208	@ 0xd0
 80057a4:	429c      	cmp	r4, r3
 80057a6:	d105      	bne.n	80057b4 <std+0x54>
 80057a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b0:	f000 b98a 	b.w	8005ac8 <__retarget_lock_init_recursive>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	bf00      	nop
 80057b8:	08005949 	.word	0x08005949
 80057bc:	0800596b 	.word	0x0800596b
 80057c0:	080059a3 	.word	0x080059a3
 80057c4:	080059c7 	.word	0x080059c7
 80057c8:	2000051c 	.word	0x2000051c

080057cc <stdio_exit_handler>:
 80057cc:	4a02      	ldr	r2, [pc, #8]	@ (80057d8 <stdio_exit_handler+0xc>)
 80057ce:	4903      	ldr	r1, [pc, #12]	@ (80057dc <stdio_exit_handler+0x10>)
 80057d0:	4803      	ldr	r0, [pc, #12]	@ (80057e0 <stdio_exit_handler+0x14>)
 80057d2:	f000 b87b 	b.w	80058cc <_fwalk_sglue>
 80057d6:	bf00      	nop
 80057d8:	20000014 	.word	0x20000014
 80057dc:	080076d1 	.word	0x080076d1
 80057e0:	20000024 	.word	0x20000024

080057e4 <cleanup_stdio>:
 80057e4:	6841      	ldr	r1, [r0, #4]
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <cleanup_stdio+0x34>)
 80057e8:	4299      	cmp	r1, r3
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	d001      	beq.n	80057f4 <cleanup_stdio+0x10>
 80057f0:	f001 ff6e 	bl	80076d0 <_fflush_r>
 80057f4:	68a1      	ldr	r1, [r4, #8]
 80057f6:	4b09      	ldr	r3, [pc, #36]	@ (800581c <cleanup_stdio+0x38>)
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d002      	beq.n	8005802 <cleanup_stdio+0x1e>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f001 ff67 	bl	80076d0 <_fflush_r>
 8005802:	68e1      	ldr	r1, [r4, #12]
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <cleanup_stdio+0x3c>)
 8005806:	4299      	cmp	r1, r3
 8005808:	d004      	beq.n	8005814 <cleanup_stdio+0x30>
 800580a:	4620      	mov	r0, r4
 800580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005810:	f001 bf5e 	b.w	80076d0 <_fflush_r>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	bf00      	nop
 8005818:	2000051c 	.word	0x2000051c
 800581c:	20000584 	.word	0x20000584
 8005820:	200005ec 	.word	0x200005ec

08005824 <global_stdio_init.part.0>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <global_stdio_init.part.0+0x30>)
 8005828:	4c0b      	ldr	r4, [pc, #44]	@ (8005858 <global_stdio_init.part.0+0x34>)
 800582a:	4a0c      	ldr	r2, [pc, #48]	@ (800585c <global_stdio_init.part.0+0x38>)
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4620      	mov	r0, r4
 8005830:	2200      	movs	r2, #0
 8005832:	2104      	movs	r1, #4
 8005834:	f7ff ff94 	bl	8005760 <std>
 8005838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800583c:	2201      	movs	r2, #1
 800583e:	2109      	movs	r1, #9
 8005840:	f7ff ff8e 	bl	8005760 <std>
 8005844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005848:	2202      	movs	r2, #2
 800584a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584e:	2112      	movs	r1, #18
 8005850:	f7ff bf86 	b.w	8005760 <std>
 8005854:	20000654 	.word	0x20000654
 8005858:	2000051c 	.word	0x2000051c
 800585c:	080057cd 	.word	0x080057cd

08005860 <__sfp_lock_acquire>:
 8005860:	4801      	ldr	r0, [pc, #4]	@ (8005868 <__sfp_lock_acquire+0x8>)
 8005862:	f000 b932 	b.w	8005aca <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	2000065d 	.word	0x2000065d

0800586c <__sfp_lock_release>:
 800586c:	4801      	ldr	r0, [pc, #4]	@ (8005874 <__sfp_lock_release+0x8>)
 800586e:	f000 b92d 	b.w	8005acc <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	2000065d 	.word	0x2000065d

08005878 <__sinit>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	f7ff fff0 	bl	8005860 <__sfp_lock_acquire>
 8005880:	6a23      	ldr	r3, [r4, #32]
 8005882:	b11b      	cbz	r3, 800588c <__sinit+0x14>
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f7ff bff0 	b.w	800586c <__sfp_lock_release>
 800588c:	4b04      	ldr	r3, [pc, #16]	@ (80058a0 <__sinit+0x28>)
 800588e:	6223      	str	r3, [r4, #32]
 8005890:	4b04      	ldr	r3, [pc, #16]	@ (80058a4 <__sinit+0x2c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f5      	bne.n	8005884 <__sinit+0xc>
 8005898:	f7ff ffc4 	bl	8005824 <global_stdio_init.part.0>
 800589c:	e7f2      	b.n	8005884 <__sinit+0xc>
 800589e:	bf00      	nop
 80058a0:	080057e5 	.word	0x080057e5
 80058a4:	20000654 	.word	0x20000654

080058a8 <fiprintf>:
 80058a8:	b40e      	push	{r1, r2, r3}
 80058aa:	b503      	push	{r0, r1, lr}
 80058ac:	4601      	mov	r1, r0
 80058ae:	ab03      	add	r3, sp, #12
 80058b0:	4805      	ldr	r0, [pc, #20]	@ (80058c8 <fiprintf+0x20>)
 80058b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	f001 fd6d 	bl	8007398 <_vfiprintf_r>
 80058be:	b002      	add	sp, #8
 80058c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c4:	b003      	add	sp, #12
 80058c6:	4770      	bx	lr
 80058c8:	20000020 	.word	0x20000020

080058cc <_fwalk_sglue>:
 80058cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d0:	4607      	mov	r7, r0
 80058d2:	4688      	mov	r8, r1
 80058d4:	4614      	mov	r4, r2
 80058d6:	2600      	movs	r6, #0
 80058d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058dc:	f1b9 0901 	subs.w	r9, r9, #1
 80058e0:	d505      	bpl.n	80058ee <_fwalk_sglue+0x22>
 80058e2:	6824      	ldr	r4, [r4, #0]
 80058e4:	2c00      	cmp	r4, #0
 80058e6:	d1f7      	bne.n	80058d8 <_fwalk_sglue+0xc>
 80058e8:	4630      	mov	r0, r6
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d907      	bls.n	8005904 <_fwalk_sglue+0x38>
 80058f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058f8:	3301      	adds	r3, #1
 80058fa:	d003      	beq.n	8005904 <_fwalk_sglue+0x38>
 80058fc:	4629      	mov	r1, r5
 80058fe:	4638      	mov	r0, r7
 8005900:	47c0      	blx	r8
 8005902:	4306      	orrs	r6, r0
 8005904:	3568      	adds	r5, #104	@ 0x68
 8005906:	e7e9      	b.n	80058dc <_fwalk_sglue+0x10>

08005908 <siprintf>:
 8005908:	b40e      	push	{r1, r2, r3}
 800590a:	b500      	push	{lr}
 800590c:	b09c      	sub	sp, #112	@ 0x70
 800590e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005910:	9002      	str	r0, [sp, #8]
 8005912:	9006      	str	r0, [sp, #24]
 8005914:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005918:	4809      	ldr	r0, [pc, #36]	@ (8005940 <siprintf+0x38>)
 800591a:	9107      	str	r1, [sp, #28]
 800591c:	9104      	str	r1, [sp, #16]
 800591e:	4909      	ldr	r1, [pc, #36]	@ (8005944 <siprintf+0x3c>)
 8005920:	f853 2b04 	ldr.w	r2, [r3], #4
 8005924:	9105      	str	r1, [sp, #20]
 8005926:	6800      	ldr	r0, [r0, #0]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	a902      	add	r1, sp, #8
 800592c:	f001 fc0e 	bl	800714c <_svfiprintf_r>
 8005930:	9b02      	ldr	r3, [sp, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	b01c      	add	sp, #112	@ 0x70
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	20000020 	.word	0x20000020
 8005944:	ffff0208 	.word	0xffff0208

08005948 <__sread>:
 8005948:	b510      	push	{r4, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	f000 f86c 	bl	8005a2c <_read_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	bfab      	itete	ge
 8005958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800595a:	89a3      	ldrhlt	r3, [r4, #12]
 800595c:	181b      	addge	r3, r3, r0
 800595e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005962:	bfac      	ite	ge
 8005964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005966:	81a3      	strhlt	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__swrite>:
 800596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	461f      	mov	r7, r3
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	4616      	mov	r6, r2
 800597a:	d505      	bpl.n	8005988 <__swrite+0x1e>
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	2302      	movs	r3, #2
 8005982:	2200      	movs	r2, #0
 8005984:	f000 f840 	bl	8005a08 <_lseek_r>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	4628      	mov	r0, r5
 800599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	f000 b857 	b.w	8005a50 <_write_r>

080059a2 <__sseek>:
 80059a2:	b510      	push	{r4, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 f82d 	bl	8005a08 <_lseek_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	bf15      	itete	ne
 80059b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059be:	81a3      	strheq	r3, [r4, #12]
 80059c0:	bf18      	it	ne
 80059c2:	81a3      	strhne	r3, [r4, #12]
 80059c4:	bd10      	pop	{r4, pc}

080059c6 <__sclose>:
 80059c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ca:	f000 b80d 	b.w	80059e8 <_close_r>

080059ce <memset>:
 80059ce:	4402      	add	r2, r0
 80059d0:	4603      	mov	r3, r0
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d100      	bne.n	80059d8 <memset+0xa>
 80059d6:	4770      	bx	lr
 80059d8:	f803 1b01 	strb.w	r1, [r3], #1
 80059dc:	e7f9      	b.n	80059d2 <memset+0x4>
	...

080059e0 <_localeconv_r>:
 80059e0:	4800      	ldr	r0, [pc, #0]	@ (80059e4 <_localeconv_r+0x4>)
 80059e2:	4770      	bx	lr
 80059e4:	20000160 	.word	0x20000160

080059e8 <_close_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d06      	ldr	r5, [pc, #24]	@ (8005a04 <_close_r+0x1c>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	f7fb ff0a 	bl	800180c <_close>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d102      	bne.n	8005a02 <_close_r+0x1a>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	b103      	cbz	r3, 8005a02 <_close_r+0x1a>
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20000658 	.word	0x20000658

08005a08 <_lseek_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d07      	ldr	r5, [pc, #28]	@ (8005a28 <_lseek_r+0x20>)
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4611      	mov	r1, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	602a      	str	r2, [r5, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f7fb ff1f 	bl	800185a <_lseek>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_lseek_r+0x1e>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_lseek_r+0x1e>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000658 	.word	0x20000658

08005a2c <_read_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d07      	ldr	r5, [pc, #28]	@ (8005a4c <_read_r+0x20>)
 8005a30:	4604      	mov	r4, r0
 8005a32:	4608      	mov	r0, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	2200      	movs	r2, #0
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fb fead 	bl	800179a <_read>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_read_r+0x1e>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_read_r+0x1e>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000658 	.word	0x20000658

08005a50 <_write_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d07      	ldr	r5, [pc, #28]	@ (8005a70 <_write_r+0x20>)
 8005a54:	4604      	mov	r4, r0
 8005a56:	4608      	mov	r0, r1
 8005a58:	4611      	mov	r1, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	602a      	str	r2, [r5, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f7fb feb8 	bl	80017d4 <_write>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_write_r+0x1e>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_write_r+0x1e>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	20000658 	.word	0x20000658

08005a74 <__errno>:
 8005a74:	4b01      	ldr	r3, [pc, #4]	@ (8005a7c <__errno+0x8>)
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000020 	.word	0x20000020

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab8 <__libc_init_array+0x38>)
 8005a84:	4c0d      	ldr	r4, [pc, #52]	@ (8005abc <__libc_init_array+0x3c>)
 8005a86:	1b64      	subs	r4, r4, r5
 8005a88:	10a4      	asrs	r4, r4, #2
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	42a6      	cmp	r6, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac0 <__libc_init_array+0x40>)
 8005a92:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac4 <__libc_init_array+0x44>)
 8005a94:	f002 f834 	bl	8007b00 <_init>
 8005a98:	1b64      	subs	r4, r4, r5
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	42a6      	cmp	r6, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa8:	4798      	blx	r3
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab2:	4798      	blx	r3
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	08008674 	.word	0x08008674
 8005abc:	08008674 	.word	0x08008674
 8005ac0:	08008674 	.word	0x08008674
 8005ac4:	08008678 	.word	0x08008678

08005ac8 <__retarget_lock_init_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <__retarget_lock_acquire_recursive>:
 8005aca:	4770      	bx	lr

08005acc <__retarget_lock_release_recursive>:
 8005acc:	4770      	bx	lr

08005ace <memcpy>:
 8005ace:	440a      	add	r2, r1
 8005ad0:	4291      	cmp	r1, r2
 8005ad2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad6:	d100      	bne.n	8005ada <memcpy+0xc>
 8005ad8:	4770      	bx	lr
 8005ada:	b510      	push	{r4, lr}
 8005adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae4:	4291      	cmp	r1, r2
 8005ae6:	d1f9      	bne.n	8005adc <memcpy+0xe>
 8005ae8:	bd10      	pop	{r4, pc}

08005aea <abort>:
 8005aea:	b508      	push	{r3, lr}
 8005aec:	2006      	movs	r0, #6
 8005aee:	f001 feed 	bl	80078cc <raise>
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fb fe46 	bl	8001784 <_exit>

08005af8 <quorem>:
 8005af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	6903      	ldr	r3, [r0, #16]
 8005afe:	690c      	ldr	r4, [r1, #16]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	4607      	mov	r7, r0
 8005b04:	db7e      	blt.n	8005c04 <quorem+0x10c>
 8005b06:	3c01      	subs	r4, #1
 8005b08:	f101 0814 	add.w	r8, r1, #20
 8005b0c:	00a3      	lsls	r3, r4, #2
 8005b0e:	f100 0514 	add.w	r5, r0, #20
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b22:	3301      	adds	r3, #1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b2e:	d32e      	bcc.n	8005b8e <quorem+0x96>
 8005b30:	f04f 0a00 	mov.w	sl, #0
 8005b34:	46c4      	mov	ip, r8
 8005b36:	46ae      	mov	lr, r5
 8005b38:	46d3      	mov	fp, sl
 8005b3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b3e:	b298      	uxth	r0, r3
 8005b40:	fb06 a000 	mla	r0, r6, r0, sl
 8005b44:	0c02      	lsrs	r2, r0, #16
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	fb06 2303 	mla	r3, r6, r3, r2
 8005b4c:	f8de 2000 	ldr.w	r2, [lr]
 8005b50:	b280      	uxth	r0, r0
 8005b52:	b292      	uxth	r2, r2
 8005b54:	1a12      	subs	r2, r2, r0
 8005b56:	445a      	add	r2, fp
 8005b58:	f8de 0000 	ldr.w	r0, [lr]
 8005b5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b70:	45e1      	cmp	r9, ip
 8005b72:	f84e 2b04 	str.w	r2, [lr], #4
 8005b76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b7a:	d2de      	bcs.n	8005b3a <quorem+0x42>
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	58eb      	ldr	r3, [r5, r3]
 8005b80:	b92b      	cbnz	r3, 8005b8e <quorem+0x96>
 8005b82:	9b01      	ldr	r3, [sp, #4]
 8005b84:	3b04      	subs	r3, #4
 8005b86:	429d      	cmp	r5, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	d32f      	bcc.n	8005bec <quorem+0xf4>
 8005b8c:	613c      	str	r4, [r7, #16]
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f001 f978 	bl	8006e84 <__mcmp>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	db25      	blt.n	8005be4 <quorem+0xec>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ba0:	f8d1 c000 	ldr.w	ip, [r1]
 8005ba4:	fa1f fe82 	uxth.w	lr, r2
 8005ba8:	fa1f f38c 	uxth.w	r3, ip
 8005bac:	eba3 030e 	sub.w	r3, r3, lr
 8005bb0:	4403      	add	r3, r0
 8005bb2:	0c12      	lsrs	r2, r2, #16
 8005bb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bc2:	45c1      	cmp	r9, r8
 8005bc4:	f841 3b04 	str.w	r3, [r1], #4
 8005bc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bcc:	d2e6      	bcs.n	8005b9c <quorem+0xa4>
 8005bce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bd6:	b922      	cbnz	r2, 8005be2 <quorem+0xea>
 8005bd8:	3b04      	subs	r3, #4
 8005bda:	429d      	cmp	r5, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	d30b      	bcc.n	8005bf8 <quorem+0x100>
 8005be0:	613c      	str	r4, [r7, #16]
 8005be2:	3601      	adds	r6, #1
 8005be4:	4630      	mov	r0, r6
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	3b04      	subs	r3, #4
 8005bf0:	2a00      	cmp	r2, #0
 8005bf2:	d1cb      	bne.n	8005b8c <quorem+0x94>
 8005bf4:	3c01      	subs	r4, #1
 8005bf6:	e7c6      	b.n	8005b86 <quorem+0x8e>
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d1ef      	bne.n	8005be0 <quorem+0xe8>
 8005c00:	3c01      	subs	r4, #1
 8005c02:	e7ea      	b.n	8005bda <quorem+0xe2>
 8005c04:	2000      	movs	r0, #0
 8005c06:	e7ee      	b.n	8005be6 <quorem+0xee>

08005c08 <_dtoa_r>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	69c7      	ldr	r7, [r0, #28]
 8005c0e:	b099      	sub	sp, #100	@ 0x64
 8005c10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c14:	ec55 4b10 	vmov	r4, r5, d0
 8005c18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c22:	b97f      	cbnz	r7, 8005c44 <_dtoa_r+0x3c>
 8005c24:	2010      	movs	r0, #16
 8005c26:	f000 fdfd 	bl	8006824 <malloc>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c30:	b920      	cbnz	r0, 8005c3c <_dtoa_r+0x34>
 8005c32:	4ba7      	ldr	r3, [pc, #668]	@ (8005ed0 <_dtoa_r+0x2c8>)
 8005c34:	21ef      	movs	r1, #239	@ 0xef
 8005c36:	48a7      	ldr	r0, [pc, #668]	@ (8005ed4 <_dtoa_r+0x2cc>)
 8005c38:	f7ff f91c 	bl	8004e74 <__assert_func>
 8005c3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c40:	6007      	str	r7, [r0, #0]
 8005c42:	60c7      	str	r7, [r0, #12]
 8005c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	b159      	cbz	r1, 8005c64 <_dtoa_r+0x5c>
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	604a      	str	r2, [r1, #4]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
 8005c56:	4658      	mov	r0, fp
 8005c58:	f000 feda 	bl	8006a10 <_Bfree>
 8005c5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	1e2b      	subs	r3, r5, #0
 8005c66:	bfb9      	ittee	lt
 8005c68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c6c:	9303      	strlt	r3, [sp, #12]
 8005c6e:	2300      	movge	r3, #0
 8005c70:	6033      	strge	r3, [r6, #0]
 8005c72:	9f03      	ldr	r7, [sp, #12]
 8005c74:	4b98      	ldr	r3, [pc, #608]	@ (8005ed8 <_dtoa_r+0x2d0>)
 8005c76:	bfbc      	itt	lt
 8005c78:	2201      	movlt	r2, #1
 8005c7a:	6032      	strlt	r2, [r6, #0]
 8005c7c:	43bb      	bics	r3, r7
 8005c7e:	d112      	bne.n	8005ca6 <_dtoa_r+0x9e>
 8005c80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c8c:	4323      	orrs	r3, r4
 8005c8e:	f000 854d 	beq.w	800672c <_dtoa_r+0xb24>
 8005c92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005eec <_dtoa_r+0x2e4>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 854f 	beq.w	800673c <_dtoa_r+0xb34>
 8005c9e:	f10a 0303 	add.w	r3, sl, #3
 8005ca2:	f000 bd49 	b.w	8006738 <_dtoa_r+0xb30>
 8005ca6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	ec51 0b17 	vmov	r0, r1, d7
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cb6:	f7fa ff27 	bl	8000b08 <__aeabi_dcmpeq>
 8005cba:	4680      	mov	r8, r0
 8005cbc:	b158      	cbz	r0, 8005cd6 <_dtoa_r+0xce>
 8005cbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cc6:	b113      	cbz	r3, 8005cce <_dtoa_r+0xc6>
 8005cc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cca:	4b84      	ldr	r3, [pc, #528]	@ (8005edc <_dtoa_r+0x2d4>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ef0 <_dtoa_r+0x2e8>
 8005cd2:	f000 bd33 	b.w	800673c <_dtoa_r+0xb34>
 8005cd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cda:	aa16      	add	r2, sp, #88	@ 0x58
 8005cdc:	a917      	add	r1, sp, #92	@ 0x5c
 8005cde:	4658      	mov	r0, fp
 8005ce0:	f001 f980 	bl	8006fe4 <__d2b>
 8005ce4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ce8:	4681      	mov	r9, r0
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d077      	beq.n	8005dde <_dtoa_r+0x1d6>
 8005cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d08:	4619      	mov	r1, r3
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4b74      	ldr	r3, [pc, #464]	@ (8005ee0 <_dtoa_r+0x2d8>)
 8005d0e:	f7fa fadb 	bl	80002c8 <__aeabi_dsub>
 8005d12:	a369      	add	r3, pc, #420	@ (adr r3, 8005eb8 <_dtoa_r+0x2b0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fc8e 	bl	8000638 <__aeabi_dmul>
 8005d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec0 <_dtoa_r+0x2b8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fad3 	bl	80002cc <__adddf3>
 8005d26:	4604      	mov	r4, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	f7fa fc1a 	bl	8000564 <__aeabi_i2d>
 8005d30:	a365      	add	r3, pc, #404	@ (adr r3, 8005ec8 <_dtoa_r+0x2c0>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fc7f 	bl	8000638 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fac3 	bl	80002cc <__adddf3>
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	f7fa ff25 	bl	8000b98 <__aeabi_d2iz>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	4607      	mov	r7, r0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fee0 	bl	8000b1c <__aeabi_dcmplt>
 8005d5c:	b140      	cbz	r0, 8005d70 <_dtoa_r+0x168>
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7fa fc00 	bl	8000564 <__aeabi_i2d>
 8005d64:	4622      	mov	r2, r4
 8005d66:	462b      	mov	r3, r5
 8005d68:	f7fa fece 	bl	8000b08 <__aeabi_dcmpeq>
 8005d6c:	b900      	cbnz	r0, 8005d70 <_dtoa_r+0x168>
 8005d6e:	3f01      	subs	r7, #1
 8005d70:	2f16      	cmp	r7, #22
 8005d72:	d851      	bhi.n	8005e18 <_dtoa_r+0x210>
 8005d74:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee4 <_dtoa_r+0x2dc>)
 8005d76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d82:	f7fa fecb 	bl	8000b1c <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d048      	beq.n	8005e1c <_dtoa_r+0x214>
 8005d8a:	3f01      	subs	r7, #1
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d92:	1b9b      	subs	r3, r3, r6
 8005d94:	1e5a      	subs	r2, r3, #1
 8005d96:	bf44      	itt	mi
 8005d98:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d9c:	2300      	movmi	r3, #0
 8005d9e:	9208      	str	r2, [sp, #32]
 8005da0:	bf54      	ite	pl
 8005da2:	f04f 0800 	movpl.w	r8, #0
 8005da6:	9308      	strmi	r3, [sp, #32]
 8005da8:	2f00      	cmp	r7, #0
 8005daa:	db39      	blt.n	8005e20 <_dtoa_r+0x218>
 8005dac:	9b08      	ldr	r3, [sp, #32]
 8005dae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005db0:	443b      	add	r3, r7
 8005db2:	9308      	str	r3, [sp, #32]
 8005db4:	2300      	movs	r3, #0
 8005db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d864      	bhi.n	8005e88 <_dtoa_r+0x280>
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	bfc4      	itt	gt
 8005dc2:	3b04      	subgt	r3, #4
 8005dc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	f1a3 0302 	sub.w	r3, r3, #2
 8005dcc:	bfcc      	ite	gt
 8005dce:	2400      	movgt	r4, #0
 8005dd0:	2401      	movle	r4, #1
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d863      	bhi.n	8005e9e <_dtoa_r+0x296>
 8005dd6:	e8df f003 	tbb	[pc, r3]
 8005dda:	372a      	.short	0x372a
 8005ddc:	5535      	.short	0x5535
 8005dde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005de2:	441e      	add	r6, r3
 8005de4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	bfc1      	itttt	gt
 8005dec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005df0:	409f      	lslgt	r7, r3
 8005df2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005df6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005dfa:	bfd6      	itet	le
 8005dfc:	f1c3 0320 	rsble	r3, r3, #32
 8005e00:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e04:	fa04 f003 	lslle.w	r0, r4, r3
 8005e08:	f7fa fb9c 	bl	8000544 <__aeabi_ui2d>
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e12:	3e01      	subs	r6, #1
 8005e14:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e16:	e777      	b.n	8005d08 <_dtoa_r+0x100>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7b8      	b.n	8005d8e <_dtoa_r+0x186>
 8005e1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e1e:	e7b7      	b.n	8005d90 <_dtoa_r+0x188>
 8005e20:	427b      	negs	r3, r7
 8005e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e24:	2300      	movs	r3, #0
 8005e26:	eba8 0807 	sub.w	r8, r8, r7
 8005e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e2c:	e7c4      	b.n	8005db8 <_dtoa_r+0x1b0>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc35      	bgt.n	8005ea4 <_dtoa_r+0x29c>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e42:	e00b      	b.n	8005e5c <_dtoa_r+0x254>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e7f3      	b.n	8005e30 <_dtoa_r+0x228>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	bfb8      	it	lt
 8005e5a:	2301      	movlt	r3, #1
 8005e5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e60:	2100      	movs	r1, #0
 8005e62:	2204      	movs	r2, #4
 8005e64:	f102 0514 	add.w	r5, r2, #20
 8005e68:	429d      	cmp	r5, r3
 8005e6a:	d91f      	bls.n	8005eac <_dtoa_r+0x2a4>
 8005e6c:	6041      	str	r1, [r0, #4]
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 fd8e 	bl	8006990 <_Balloc>
 8005e74:	4682      	mov	sl, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d13c      	bne.n	8005ef4 <_dtoa_r+0x2ec>
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <_dtoa_r+0x2e0>)
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e82:	e6d8      	b.n	8005c36 <_dtoa_r+0x2e>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e7e0      	b.n	8005e4a <_dtoa_r+0x242>
 8005e88:	2401      	movs	r4, #1
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	9307      	str	r3, [sp, #28]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2312      	movs	r3, #18
 8005e9c:	e7d0      	b.n	8005e40 <_dtoa_r+0x238>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ea2:	e7f5      	b.n	8005e90 <_dtoa_r+0x288>
 8005ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	9307      	str	r3, [sp, #28]
 8005eaa:	e7d7      	b.n	8005e5c <_dtoa_r+0x254>
 8005eac:	3101      	adds	r1, #1
 8005eae:	0052      	lsls	r2, r2, #1
 8005eb0:	e7d8      	b.n	8005e64 <_dtoa_r+0x25c>
 8005eb2:	bf00      	nop
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	636f4361 	.word	0x636f4361
 8005ebc:	3fd287a7 	.word	0x3fd287a7
 8005ec0:	8b60c8b3 	.word	0x8b60c8b3
 8005ec4:	3fc68a28 	.word	0x3fc68a28
 8005ec8:	509f79fb 	.word	0x509f79fb
 8005ecc:	3fd34413 	.word	0x3fd34413
 8005ed0:	08008379 	.word	0x08008379
 8005ed4:	08008390 	.word	0x08008390
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	08008349 	.word	0x08008349
 8005ee0:	3ff80000 	.word	0x3ff80000
 8005ee4:	08008488 	.word	0x08008488
 8005ee8:	080083e8 	.word	0x080083e8
 8005eec:	08008375 	.word	0x08008375
 8005ef0:	08008348 	.word	0x08008348
 8005ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ef8:	6018      	str	r0, [r3, #0]
 8005efa:	9b07      	ldr	r3, [sp, #28]
 8005efc:	2b0e      	cmp	r3, #14
 8005efe:	f200 80a4 	bhi.w	800604a <_dtoa_r+0x442>
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	f000 80a1 	beq.w	800604a <_dtoa_r+0x442>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	dd33      	ble.n	8005f74 <_dtoa_r+0x36c>
 8005f0c:	4bad      	ldr	r3, [pc, #692]	@ (80061c4 <_dtoa_r+0x5bc>)
 8005f0e:	f007 020f 	and.w	r2, r7, #15
 8005f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f16:	ed93 7b00 	vldr	d7, [r3]
 8005f1a:	05f8      	lsls	r0, r7, #23
 8005f1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f24:	d516      	bpl.n	8005f54 <_dtoa_r+0x34c>
 8005f26:	4ba8      	ldr	r3, [pc, #672]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f30:	f7fa fcac 	bl	800088c <__aeabi_ddiv>
 8005f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f38:	f004 040f 	and.w	r4, r4, #15
 8005f3c:	2603      	movs	r6, #3
 8005f3e:	4da2      	ldr	r5, [pc, #648]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f40:	b954      	cbnz	r4, 8005f58 <_dtoa_r+0x350>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	f7fa fc9f 	bl	800088c <__aeabi_ddiv>
 8005f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f52:	e028      	b.n	8005fa6 <_dtoa_r+0x39e>
 8005f54:	2602      	movs	r6, #2
 8005f56:	e7f2      	b.n	8005f3e <_dtoa_r+0x336>
 8005f58:	07e1      	lsls	r1, r4, #31
 8005f5a:	d508      	bpl.n	8005f6e <_dtoa_r+0x366>
 8005f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f64:	f7fa fb68 	bl	8000638 <__aeabi_dmul>
 8005f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	1064      	asrs	r4, r4, #1
 8005f70:	3508      	adds	r5, #8
 8005f72:	e7e5      	b.n	8005f40 <_dtoa_r+0x338>
 8005f74:	f000 80d2 	beq.w	800611c <_dtoa_r+0x514>
 8005f78:	427c      	negs	r4, r7
 8005f7a:	4b92      	ldr	r3, [pc, #584]	@ (80061c4 <_dtoa_r+0x5bc>)
 8005f7c:	4d92      	ldr	r5, [pc, #584]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f7e:	f004 020f 	and.w	r2, r4, #15
 8005f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f8e:	f7fa fb53 	bl	8000638 <__aeabi_dmul>
 8005f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f96:	1124      	asrs	r4, r4, #4
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2602      	movs	r6, #2
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	f040 80b2 	bne.w	8006106 <_dtoa_r+0x4fe>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d3      	bne.n	8005f4e <_dtoa_r+0x346>
 8005fa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80b7 	beq.w	8006120 <_dtoa_r+0x518>
 8005fb2:	4b86      	ldr	r3, [pc, #536]	@ (80061cc <_dtoa_r+0x5c4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f000 80ae 	beq.w	8006120 <_dtoa_r+0x518>
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80aa 	beq.w	8006120 <_dtoa_r+0x518>
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd37      	ble.n	8006042 <_dtoa_r+0x43a>
 8005fd2:	1e7b      	subs	r3, r7, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80061d0 <_dtoa_r+0x5c8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa fb2b 	bl	8000638 <__aeabi_dmul>
 8005fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe6:	9c00      	ldr	r4, [sp, #0]
 8005fe8:	3601      	adds	r6, #1
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7fa faba 	bl	8000564 <__aeabi_i2d>
 8005ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ff4:	f7fa fb20 	bl	8000638 <__aeabi_dmul>
 8005ff8:	4b76      	ldr	r3, [pc, #472]	@ (80061d4 <_dtoa_r+0x5cc>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f7fa f966 	bl	80002cc <__adddf3>
 8006000:	4605      	mov	r5, r0
 8006002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006006:	2c00      	cmp	r4, #0
 8006008:	f040 808d 	bne.w	8006126 <_dtoa_r+0x51e>
 800600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006010:	4b71      	ldr	r3, [pc, #452]	@ (80061d8 <_dtoa_r+0x5d0>)
 8006012:	2200      	movs	r2, #0
 8006014:	f7fa f958 	bl	80002c8 <__aeabi_dsub>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006020:	462a      	mov	r2, r5
 8006022:	4633      	mov	r3, r6
 8006024:	f7fa fd98 	bl	8000b58 <__aeabi_dcmpgt>
 8006028:	2800      	cmp	r0, #0
 800602a:	f040 828b 	bne.w	8006544 <_dtoa_r+0x93c>
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	462a      	mov	r2, r5
 8006034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006038:	f7fa fd70 	bl	8000b1c <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 8128 	bne.w	8006292 <_dtoa_r+0x68a>
 8006042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800604a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800604c:	2b00      	cmp	r3, #0
 800604e:	f2c0 815a 	blt.w	8006306 <_dtoa_r+0x6fe>
 8006052:	2f0e      	cmp	r7, #14
 8006054:	f300 8157 	bgt.w	8006306 <_dtoa_r+0x6fe>
 8006058:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <_dtoa_r+0x5bc>)
 800605a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800605e:	ed93 7b00 	vldr	d7, [r3]
 8006062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	ed8d 7b00 	vstr	d7, [sp]
 800606a:	da03      	bge.n	8006074 <_dtoa_r+0x46c>
 800606c:	9b07      	ldr	r3, [sp, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f340 8101 	ble.w	8006276 <_dtoa_r+0x66e>
 8006074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006078:	4656      	mov	r6, sl
 800607a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f7fa fc03 	bl	800088c <__aeabi_ddiv>
 8006086:	f7fa fd87 	bl	8000b98 <__aeabi_d2iz>
 800608a:	4680      	mov	r8, r0
 800608c:	f7fa fa6a 	bl	8000564 <__aeabi_i2d>
 8006090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006094:	f7fa fad0 	bl	8000638 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060a4:	f7fa f910 	bl	80002c8 <__aeabi_dsub>
 80060a8:	f806 4b01 	strb.w	r4, [r6], #1
 80060ac:	9d07      	ldr	r5, [sp, #28]
 80060ae:	eba6 040a 	sub.w	r4, r6, sl
 80060b2:	42a5      	cmp	r5, r4
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	f040 8117 	bne.w	80062ea <_dtoa_r+0x6e2>
 80060bc:	f7fa f906 	bl	80002cc <__adddf3>
 80060c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c4:	4604      	mov	r4, r0
 80060c6:	460d      	mov	r5, r1
 80060c8:	f7fa fd46 	bl	8000b58 <__aeabi_dcmpgt>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f040 80f9 	bne.w	80062c4 <_dtoa_r+0x6bc>
 80060d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa fd15 	bl	8000b08 <__aeabi_dcmpeq>
 80060de:	b118      	cbz	r0, 80060e8 <_dtoa_r+0x4e0>
 80060e0:	f018 0f01 	tst.w	r8, #1
 80060e4:	f040 80ee 	bne.w	80062c4 <_dtoa_r+0x6bc>
 80060e8:	4649      	mov	r1, r9
 80060ea:	4658      	mov	r0, fp
 80060ec:	f000 fc90 	bl	8006a10 <_Bfree>
 80060f0:	2300      	movs	r3, #0
 80060f2:	7033      	strb	r3, [r6, #0]
 80060f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060f6:	3701      	adds	r7, #1
 80060f8:	601f      	str	r7, [r3, #0]
 80060fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 831d 	beq.w	800673c <_dtoa_r+0xb34>
 8006102:	601e      	str	r6, [r3, #0]
 8006104:	e31a      	b.n	800673c <_dtoa_r+0xb34>
 8006106:	07e2      	lsls	r2, r4, #31
 8006108:	d505      	bpl.n	8006116 <_dtoa_r+0x50e>
 800610a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610e:	f7fa fa93 	bl	8000638 <__aeabi_dmul>
 8006112:	3601      	adds	r6, #1
 8006114:	2301      	movs	r3, #1
 8006116:	1064      	asrs	r4, r4, #1
 8006118:	3508      	adds	r5, #8
 800611a:	e73f      	b.n	8005f9c <_dtoa_r+0x394>
 800611c:	2602      	movs	r6, #2
 800611e:	e742      	b.n	8005fa6 <_dtoa_r+0x39e>
 8006120:	9c07      	ldr	r4, [sp, #28]
 8006122:	9704      	str	r7, [sp, #16]
 8006124:	e761      	b.n	8005fea <_dtoa_r+0x3e2>
 8006126:	4b27      	ldr	r3, [pc, #156]	@ (80061c4 <_dtoa_r+0x5bc>)
 8006128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800612a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800612e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006132:	4454      	add	r4, sl
 8006134:	2900      	cmp	r1, #0
 8006136:	d053      	beq.n	80061e0 <_dtoa_r+0x5d8>
 8006138:	4928      	ldr	r1, [pc, #160]	@ (80061dc <_dtoa_r+0x5d4>)
 800613a:	2000      	movs	r0, #0
 800613c:	f7fa fba6 	bl	800088c <__aeabi_ddiv>
 8006140:	4633      	mov	r3, r6
 8006142:	462a      	mov	r2, r5
 8006144:	f7fa f8c0 	bl	80002c8 <__aeabi_dsub>
 8006148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614c:	4656      	mov	r6, sl
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	f7fa fd21 	bl	8000b98 <__aeabi_d2iz>
 8006156:	4605      	mov	r5, r0
 8006158:	f7fa fa04 	bl	8000564 <__aeabi_i2d>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006164:	f7fa f8b0 	bl	80002c8 <__aeabi_dsub>
 8006168:	3530      	adds	r5, #48	@ 0x30
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006172:	f806 5b01 	strb.w	r5, [r6], #1
 8006176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800617a:	f7fa fccf 	bl	8000b1c <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	d171      	bne.n	8006266 <_dtoa_r+0x65e>
 8006182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006186:	4911      	ldr	r1, [pc, #68]	@ (80061cc <_dtoa_r+0x5c4>)
 8006188:	2000      	movs	r0, #0
 800618a:	f7fa f89d 	bl	80002c8 <__aeabi_dsub>
 800618e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006192:	f7fa fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8006196:	2800      	cmp	r0, #0
 8006198:	f040 8095 	bne.w	80062c6 <_dtoa_r+0x6be>
 800619c:	42a6      	cmp	r6, r4
 800619e:	f43f af50 	beq.w	8006042 <_dtoa_r+0x43a>
 80061a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a6:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <_dtoa_r+0x5c8>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	f7fa fa45 	bl	8000638 <__aeabi_dmul>
 80061ae:	4b08      	ldr	r3, [pc, #32]	@ (80061d0 <_dtoa_r+0x5c8>)
 80061b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061b4:	2200      	movs	r2, #0
 80061b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ba:	f7fa fa3d 	bl	8000638 <__aeabi_dmul>
 80061be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c2:	e7c4      	b.n	800614e <_dtoa_r+0x546>
 80061c4:	08008488 	.word	0x08008488
 80061c8:	08008460 	.word	0x08008460
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	40240000 	.word	0x40240000
 80061d4:	401c0000 	.word	0x401c0000
 80061d8:	40140000 	.word	0x40140000
 80061dc:	3fe00000 	.word	0x3fe00000
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7fa fa28 	bl	8000638 <__aeabi_dmul>
 80061e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80061ee:	4656      	mov	r6, sl
 80061f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f4:	f7fa fcd0 	bl	8000b98 <__aeabi_d2iz>
 80061f8:	4605      	mov	r5, r0
 80061fa:	f7fa f9b3 	bl	8000564 <__aeabi_i2d>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006206:	f7fa f85f 	bl	80002c8 <__aeabi_dsub>
 800620a:	3530      	adds	r5, #48	@ 0x30
 800620c:	f806 5b01 	strb.w	r5, [r6], #1
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	42a6      	cmp	r6, r4
 8006216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	d124      	bne.n	800626a <_dtoa_r+0x662>
 8006220:	4bac      	ldr	r3, [pc, #688]	@ (80064d4 <_dtoa_r+0x8cc>)
 8006222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006226:	f7fa f851 	bl	80002cc <__adddf3>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	f7fa fc91 	bl	8000b58 <__aeabi_dcmpgt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d145      	bne.n	80062c6 <_dtoa_r+0x6be>
 800623a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800623e:	49a5      	ldr	r1, [pc, #660]	@ (80064d4 <_dtoa_r+0x8cc>)
 8006240:	2000      	movs	r0, #0
 8006242:	f7fa f841 	bl	80002c8 <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800624e:	f7fa fc65 	bl	8000b1c <__aeabi_dcmplt>
 8006252:	2800      	cmp	r0, #0
 8006254:	f43f aef5 	beq.w	8006042 <_dtoa_r+0x43a>
 8006258:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800625a:	1e73      	subs	r3, r6, #1
 800625c:	9315      	str	r3, [sp, #84]	@ 0x54
 800625e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006262:	2b30      	cmp	r3, #48	@ 0x30
 8006264:	d0f8      	beq.n	8006258 <_dtoa_r+0x650>
 8006266:	9f04      	ldr	r7, [sp, #16]
 8006268:	e73e      	b.n	80060e8 <_dtoa_r+0x4e0>
 800626a:	4b9b      	ldr	r3, [pc, #620]	@ (80064d8 <_dtoa_r+0x8d0>)
 800626c:	f7fa f9e4 	bl	8000638 <__aeabi_dmul>
 8006270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006274:	e7bc      	b.n	80061f0 <_dtoa_r+0x5e8>
 8006276:	d10c      	bne.n	8006292 <_dtoa_r+0x68a>
 8006278:	4b98      	ldr	r3, [pc, #608]	@ (80064dc <_dtoa_r+0x8d4>)
 800627a:	2200      	movs	r2, #0
 800627c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006280:	f7fa f9da 	bl	8000638 <__aeabi_dmul>
 8006284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006288:	f7fa fc5c 	bl	8000b44 <__aeabi_dcmpge>
 800628c:	2800      	cmp	r0, #0
 800628e:	f000 8157 	beq.w	8006540 <_dtoa_r+0x938>
 8006292:	2400      	movs	r4, #0
 8006294:	4625      	mov	r5, r4
 8006296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006298:	43db      	mvns	r3, r3
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	4656      	mov	r6, sl
 800629e:	2700      	movs	r7, #0
 80062a0:	4621      	mov	r1, r4
 80062a2:	4658      	mov	r0, fp
 80062a4:	f000 fbb4 	bl	8006a10 <_Bfree>
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	d0dc      	beq.n	8006266 <_dtoa_r+0x65e>
 80062ac:	b12f      	cbz	r7, 80062ba <_dtoa_r+0x6b2>
 80062ae:	42af      	cmp	r7, r5
 80062b0:	d003      	beq.n	80062ba <_dtoa_r+0x6b2>
 80062b2:	4639      	mov	r1, r7
 80062b4:	4658      	mov	r0, fp
 80062b6:	f000 fbab 	bl	8006a10 <_Bfree>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4658      	mov	r0, fp
 80062be:	f000 fba7 	bl	8006a10 <_Bfree>
 80062c2:	e7d0      	b.n	8006266 <_dtoa_r+0x65e>
 80062c4:	9704      	str	r7, [sp, #16]
 80062c6:	4633      	mov	r3, r6
 80062c8:	461e      	mov	r6, r3
 80062ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ce:	2a39      	cmp	r2, #57	@ 0x39
 80062d0:	d107      	bne.n	80062e2 <_dtoa_r+0x6da>
 80062d2:	459a      	cmp	sl, r3
 80062d4:	d1f8      	bne.n	80062c8 <_dtoa_r+0x6c0>
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	3201      	adds	r2, #1
 80062da:	9204      	str	r2, [sp, #16]
 80062dc:	2230      	movs	r2, #48	@ 0x30
 80062de:	f88a 2000 	strb.w	r2, [sl]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	3201      	adds	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e7bd      	b.n	8006266 <_dtoa_r+0x65e>
 80062ea:	4b7b      	ldr	r3, [pc, #492]	@ (80064d8 <_dtoa_r+0x8d0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	f7fa f9a3 	bl	8000638 <__aeabi_dmul>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	f7fa fc05 	bl	8000b08 <__aeabi_dcmpeq>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f43f aebb 	beq.w	800607a <_dtoa_r+0x472>
 8006304:	e6f0      	b.n	80060e8 <_dtoa_r+0x4e0>
 8006306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006308:	2a00      	cmp	r2, #0
 800630a:	f000 80db 	beq.w	80064c4 <_dtoa_r+0x8bc>
 800630e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006310:	2a01      	cmp	r2, #1
 8006312:	f300 80bf 	bgt.w	8006494 <_dtoa_r+0x88c>
 8006316:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006318:	2a00      	cmp	r2, #0
 800631a:	f000 80b7 	beq.w	800648c <_dtoa_r+0x884>
 800631e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006322:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006324:	4646      	mov	r6, r8
 8006326:	9a08      	ldr	r2, [sp, #32]
 8006328:	2101      	movs	r1, #1
 800632a:	441a      	add	r2, r3
 800632c:	4658      	mov	r0, fp
 800632e:	4498      	add	r8, r3
 8006330:	9208      	str	r2, [sp, #32]
 8006332:	f000 fc21 	bl	8006b78 <__i2b>
 8006336:	4605      	mov	r5, r0
 8006338:	b15e      	cbz	r6, 8006352 <_dtoa_r+0x74a>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	dd08      	ble.n	8006352 <_dtoa_r+0x74a>
 8006340:	42b3      	cmp	r3, r6
 8006342:	9a08      	ldr	r2, [sp, #32]
 8006344:	bfa8      	it	ge
 8006346:	4633      	movge	r3, r6
 8006348:	eba8 0803 	sub.w	r8, r8, r3
 800634c:	1af6      	subs	r6, r6, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	9308      	str	r3, [sp, #32]
 8006352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006354:	b1f3      	cbz	r3, 8006394 <_dtoa_r+0x78c>
 8006356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80b7 	beq.w	80064cc <_dtoa_r+0x8c4>
 800635e:	b18c      	cbz	r4, 8006384 <_dtoa_r+0x77c>
 8006360:	4629      	mov	r1, r5
 8006362:	4622      	mov	r2, r4
 8006364:	4658      	mov	r0, fp
 8006366:	f000 fcc7 	bl	8006cf8 <__pow5mult>
 800636a:	464a      	mov	r2, r9
 800636c:	4601      	mov	r1, r0
 800636e:	4605      	mov	r5, r0
 8006370:	4658      	mov	r0, fp
 8006372:	f000 fc17 	bl	8006ba4 <__multiply>
 8006376:	4649      	mov	r1, r9
 8006378:	9004      	str	r0, [sp, #16]
 800637a:	4658      	mov	r0, fp
 800637c:	f000 fb48 	bl	8006a10 <_Bfree>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	4699      	mov	r9, r3
 8006384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006386:	1b1a      	subs	r2, r3, r4
 8006388:	d004      	beq.n	8006394 <_dtoa_r+0x78c>
 800638a:	4649      	mov	r1, r9
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fcb3 	bl	8006cf8 <__pow5mult>
 8006392:	4681      	mov	r9, r0
 8006394:	2101      	movs	r1, #1
 8006396:	4658      	mov	r0, fp
 8006398:	f000 fbee 	bl	8006b78 <__i2b>
 800639c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800639e:	4604      	mov	r4, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 81cf 	beq.w	8006744 <_dtoa_r+0xb3c>
 80063a6:	461a      	mov	r2, r3
 80063a8:	4601      	mov	r1, r0
 80063aa:	4658      	mov	r0, fp
 80063ac:	f000 fca4 	bl	8006cf8 <__pow5mult>
 80063b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	4604      	mov	r4, r0
 80063b6:	f300 8095 	bgt.w	80064e4 <_dtoa_r+0x8dc>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8087 	bne.w	80064d0 <_dtoa_r+0x8c8>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f040 8089 	bne.w	80064e0 <_dtoa_r+0x8d8>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	0d1b      	lsrs	r3, r3, #20
 80063d6:	051b      	lsls	r3, r3, #20
 80063d8:	b12b      	cbz	r3, 80063e6 <_dtoa_r+0x7de>
 80063da:	9b08      	ldr	r3, [sp, #32]
 80063dc:	3301      	adds	r3, #1
 80063de:	9308      	str	r3, [sp, #32]
 80063e0:	f108 0801 	add.w	r8, r8, #1
 80063e4:	2301      	movs	r3, #1
 80063e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81b0 	beq.w	8006750 <_dtoa_r+0xb48>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063f6:	6918      	ldr	r0, [r3, #16]
 80063f8:	f000 fb72 	bl	8006ae0 <__hi0bits>
 80063fc:	f1c0 0020 	rsb	r0, r0, #32
 8006400:	9b08      	ldr	r3, [sp, #32]
 8006402:	4418      	add	r0, r3
 8006404:	f010 001f 	ands.w	r0, r0, #31
 8006408:	d077      	beq.n	80064fa <_dtoa_r+0x8f2>
 800640a:	f1c0 0320 	rsb	r3, r0, #32
 800640e:	2b04      	cmp	r3, #4
 8006410:	dd6b      	ble.n	80064ea <_dtoa_r+0x8e2>
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	f1c0 001c 	rsb	r0, r0, #28
 8006418:	4403      	add	r3, r0
 800641a:	4480      	add	r8, r0
 800641c:	4406      	add	r6, r0
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	f1b8 0f00 	cmp.w	r8, #0
 8006424:	dd05      	ble.n	8006432 <_dtoa_r+0x82a>
 8006426:	4649      	mov	r1, r9
 8006428:	4642      	mov	r2, r8
 800642a:	4658      	mov	r0, fp
 800642c:	f000 fcbe 	bl	8006dac <__lshift>
 8006430:	4681      	mov	r9, r0
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd05      	ble.n	8006444 <_dtoa_r+0x83c>
 8006438:	4621      	mov	r1, r4
 800643a:	461a      	mov	r2, r3
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fcb5 	bl	8006dac <__lshift>
 8006442:	4604      	mov	r4, r0
 8006444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d059      	beq.n	80064fe <_dtoa_r+0x8f6>
 800644a:	4621      	mov	r1, r4
 800644c:	4648      	mov	r0, r9
 800644e:	f000 fd19 	bl	8006e84 <__mcmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	da53      	bge.n	80064fe <_dtoa_r+0x8f6>
 8006456:	1e7b      	subs	r3, r7, #1
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	4649      	mov	r1, r9
 800645c:	2300      	movs	r3, #0
 800645e:	220a      	movs	r2, #10
 8006460:	4658      	mov	r0, fp
 8006462:	f000 faf7 	bl	8006a54 <__multadd>
 8006466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006468:	4681      	mov	r9, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8172 	beq.w	8006754 <_dtoa_r+0xb4c>
 8006470:	2300      	movs	r3, #0
 8006472:	4629      	mov	r1, r5
 8006474:	220a      	movs	r2, #10
 8006476:	4658      	mov	r0, fp
 8006478:	f000 faec 	bl	8006a54 <__multadd>
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	4605      	mov	r5, r0
 8006482:	dc67      	bgt.n	8006554 <_dtoa_r+0x94c>
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	2b02      	cmp	r3, #2
 8006488:	dc41      	bgt.n	800650e <_dtoa_r+0x906>
 800648a:	e063      	b.n	8006554 <_dtoa_r+0x94c>
 800648c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800648e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006492:	e746      	b.n	8006322 <_dtoa_r+0x71a>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	1e5c      	subs	r4, r3, #1
 8006498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800649a:	42a3      	cmp	r3, r4
 800649c:	bfbf      	itttt	lt
 800649e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064a4:	1ae3      	sublt	r3, r4, r3
 80064a6:	bfb4      	ite	lt
 80064a8:	18d2      	addlt	r2, r2, r3
 80064aa:	1b1c      	subge	r4, r3, r4
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	bfbc      	itt	lt
 80064b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064b2:	2400      	movlt	r4, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bfb5      	itete	lt
 80064b8:	eba8 0603 	sublt.w	r6, r8, r3
 80064bc:	9b07      	ldrge	r3, [sp, #28]
 80064be:	2300      	movlt	r3, #0
 80064c0:	4646      	movge	r6, r8
 80064c2:	e730      	b.n	8006326 <_dtoa_r+0x71e>
 80064c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064c8:	4646      	mov	r6, r8
 80064ca:	e735      	b.n	8006338 <_dtoa_r+0x730>
 80064cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064ce:	e75c      	b.n	800638a <_dtoa_r+0x782>
 80064d0:	2300      	movs	r3, #0
 80064d2:	e788      	b.n	80063e6 <_dtoa_r+0x7de>
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	40240000 	.word	0x40240000
 80064dc:	40140000 	.word	0x40140000
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	e780      	b.n	80063e6 <_dtoa_r+0x7de>
 80064e4:	2300      	movs	r3, #0
 80064e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e8:	e782      	b.n	80063f0 <_dtoa_r+0x7e8>
 80064ea:	d099      	beq.n	8006420 <_dtoa_r+0x818>
 80064ec:	9a08      	ldr	r2, [sp, #32]
 80064ee:	331c      	adds	r3, #28
 80064f0:	441a      	add	r2, r3
 80064f2:	4498      	add	r8, r3
 80064f4:	441e      	add	r6, r3
 80064f6:	9208      	str	r2, [sp, #32]
 80064f8:	e792      	b.n	8006420 <_dtoa_r+0x818>
 80064fa:	4603      	mov	r3, r0
 80064fc:	e7f6      	b.n	80064ec <_dtoa_r+0x8e4>
 80064fe:	9b07      	ldr	r3, [sp, #28]
 8006500:	9704      	str	r7, [sp, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc20      	bgt.n	8006548 <_dtoa_r+0x940>
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650a:	2b02      	cmp	r3, #2
 800650c:	dd1e      	ble.n	800654c <_dtoa_r+0x944>
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f47f aec0 	bne.w	8006296 <_dtoa_r+0x68e>
 8006516:	4621      	mov	r1, r4
 8006518:	2205      	movs	r2, #5
 800651a:	4658      	mov	r0, fp
 800651c:	f000 fa9a 	bl	8006a54 <__multadd>
 8006520:	4601      	mov	r1, r0
 8006522:	4604      	mov	r4, r0
 8006524:	4648      	mov	r0, r9
 8006526:	f000 fcad 	bl	8006e84 <__mcmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	f77f aeb3 	ble.w	8006296 <_dtoa_r+0x68e>
 8006530:	4656      	mov	r6, sl
 8006532:	2331      	movs	r3, #49	@ 0x31
 8006534:	f806 3b01 	strb.w	r3, [r6], #1
 8006538:	9b04      	ldr	r3, [sp, #16]
 800653a:	3301      	adds	r3, #1
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	e6ae      	b.n	800629e <_dtoa_r+0x696>
 8006540:	9c07      	ldr	r4, [sp, #28]
 8006542:	9704      	str	r7, [sp, #16]
 8006544:	4625      	mov	r5, r4
 8006546:	e7f3      	b.n	8006530 <_dtoa_r+0x928>
 8006548:	9b07      	ldr	r3, [sp, #28]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8104 	beq.w	800675c <_dtoa_r+0xb54>
 8006554:	2e00      	cmp	r6, #0
 8006556:	dd05      	ble.n	8006564 <_dtoa_r+0x95c>
 8006558:	4629      	mov	r1, r5
 800655a:	4632      	mov	r2, r6
 800655c:	4658      	mov	r0, fp
 800655e:	f000 fc25 	bl	8006dac <__lshift>
 8006562:	4605      	mov	r5, r0
 8006564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d05a      	beq.n	8006620 <_dtoa_r+0xa18>
 800656a:	6869      	ldr	r1, [r5, #4]
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fa0f 	bl	8006990 <_Balloc>
 8006572:	4606      	mov	r6, r0
 8006574:	b928      	cbnz	r0, 8006582 <_dtoa_r+0x97a>
 8006576:	4b84      	ldr	r3, [pc, #528]	@ (8006788 <_dtoa_r+0xb80>)
 8006578:	4602      	mov	r2, r0
 800657a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800657e:	f7ff bb5a 	b.w	8005c36 <_dtoa_r+0x2e>
 8006582:	692a      	ldr	r2, [r5, #16]
 8006584:	3202      	adds	r2, #2
 8006586:	0092      	lsls	r2, r2, #2
 8006588:	f105 010c 	add.w	r1, r5, #12
 800658c:	300c      	adds	r0, #12
 800658e:	f7ff fa9e 	bl	8005ace <memcpy>
 8006592:	2201      	movs	r2, #1
 8006594:	4631      	mov	r1, r6
 8006596:	4658      	mov	r0, fp
 8006598:	f000 fc08 	bl	8006dac <__lshift>
 800659c:	f10a 0301 	add.w	r3, sl, #1
 80065a0:	9307      	str	r3, [sp, #28]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	4453      	add	r3, sl
 80065a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	462f      	mov	r7, r5
 80065b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065b2:	4605      	mov	r5, r0
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	4621      	mov	r1, r4
 80065b8:	3b01      	subs	r3, #1
 80065ba:	4648      	mov	r0, r9
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	f7ff fa9b 	bl	8005af8 <quorem>
 80065c2:	4639      	mov	r1, r7
 80065c4:	9002      	str	r0, [sp, #8]
 80065c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065ca:	4648      	mov	r0, r9
 80065cc:	f000 fc5a 	bl	8006e84 <__mcmp>
 80065d0:	462a      	mov	r2, r5
 80065d2:	9008      	str	r0, [sp, #32]
 80065d4:	4621      	mov	r1, r4
 80065d6:	4658      	mov	r0, fp
 80065d8:	f000 fc70 	bl	8006ebc <__mdiff>
 80065dc:	68c2      	ldr	r2, [r0, #12]
 80065de:	4606      	mov	r6, r0
 80065e0:	bb02      	cbnz	r2, 8006624 <_dtoa_r+0xa1c>
 80065e2:	4601      	mov	r1, r0
 80065e4:	4648      	mov	r0, r9
 80065e6:	f000 fc4d 	bl	8006e84 <__mcmp>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4631      	mov	r1, r6
 80065ee:	4658      	mov	r0, fp
 80065f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f2:	f000 fa0d 	bl	8006a10 <_Bfree>
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065fa:	9e07      	ldr	r6, [sp, #28]
 80065fc:	ea43 0102 	orr.w	r1, r3, r2
 8006600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006602:	4319      	orrs	r1, r3
 8006604:	d110      	bne.n	8006628 <_dtoa_r+0xa20>
 8006606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800660a:	d029      	beq.n	8006660 <_dtoa_r+0xa58>
 800660c:	9b08      	ldr	r3, [sp, #32]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd02      	ble.n	8006618 <_dtoa_r+0xa10>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006618:	9b00      	ldr	r3, [sp, #0]
 800661a:	f883 8000 	strb.w	r8, [r3]
 800661e:	e63f      	b.n	80062a0 <_dtoa_r+0x698>
 8006620:	4628      	mov	r0, r5
 8006622:	e7bb      	b.n	800659c <_dtoa_r+0x994>
 8006624:	2201      	movs	r2, #1
 8006626:	e7e1      	b.n	80065ec <_dtoa_r+0x9e4>
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db04      	blt.n	8006638 <_dtoa_r+0xa30>
 800662e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006630:	430b      	orrs	r3, r1
 8006632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006634:	430b      	orrs	r3, r1
 8006636:	d120      	bne.n	800667a <_dtoa_r+0xa72>
 8006638:	2a00      	cmp	r2, #0
 800663a:	dded      	ble.n	8006618 <_dtoa_r+0xa10>
 800663c:	4649      	mov	r1, r9
 800663e:	2201      	movs	r2, #1
 8006640:	4658      	mov	r0, fp
 8006642:	f000 fbb3 	bl	8006dac <__lshift>
 8006646:	4621      	mov	r1, r4
 8006648:	4681      	mov	r9, r0
 800664a:	f000 fc1b 	bl	8006e84 <__mcmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	dc03      	bgt.n	800665a <_dtoa_r+0xa52>
 8006652:	d1e1      	bne.n	8006618 <_dtoa_r+0xa10>
 8006654:	f018 0f01 	tst.w	r8, #1
 8006658:	d0de      	beq.n	8006618 <_dtoa_r+0xa10>
 800665a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800665e:	d1d8      	bne.n	8006612 <_dtoa_r+0xa0a>
 8006660:	9a00      	ldr	r2, [sp, #0]
 8006662:	2339      	movs	r3, #57	@ 0x39
 8006664:	7013      	strb	r3, [r2, #0]
 8006666:	4633      	mov	r3, r6
 8006668:	461e      	mov	r6, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006670:	2a39      	cmp	r2, #57	@ 0x39
 8006672:	d052      	beq.n	800671a <_dtoa_r+0xb12>
 8006674:	3201      	adds	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e612      	b.n	80062a0 <_dtoa_r+0x698>
 800667a:	2a00      	cmp	r2, #0
 800667c:	dd07      	ble.n	800668e <_dtoa_r+0xa86>
 800667e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006682:	d0ed      	beq.n	8006660 <_dtoa_r+0xa58>
 8006684:	9a00      	ldr	r2, [sp, #0]
 8006686:	f108 0301 	add.w	r3, r8, #1
 800668a:	7013      	strb	r3, [r2, #0]
 800668c:	e608      	b.n	80062a0 <_dtoa_r+0x698>
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	9a07      	ldr	r2, [sp, #28]
 8006692:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006698:	4293      	cmp	r3, r2
 800669a:	d028      	beq.n	80066ee <_dtoa_r+0xae6>
 800669c:	4649      	mov	r1, r9
 800669e:	2300      	movs	r3, #0
 80066a0:	220a      	movs	r2, #10
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 f9d6 	bl	8006a54 <__multadd>
 80066a8:	42af      	cmp	r7, r5
 80066aa:	4681      	mov	r9, r0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	f04f 020a 	mov.w	r2, #10
 80066b4:	4639      	mov	r1, r7
 80066b6:	4658      	mov	r0, fp
 80066b8:	d107      	bne.n	80066ca <_dtoa_r+0xac2>
 80066ba:	f000 f9cb 	bl	8006a54 <__multadd>
 80066be:	4607      	mov	r7, r0
 80066c0:	4605      	mov	r5, r0
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	e774      	b.n	80065b4 <_dtoa_r+0x9ac>
 80066ca:	f000 f9c3 	bl	8006a54 <__multadd>
 80066ce:	4629      	mov	r1, r5
 80066d0:	4607      	mov	r7, r0
 80066d2:	2300      	movs	r3, #0
 80066d4:	220a      	movs	r2, #10
 80066d6:	4658      	mov	r0, fp
 80066d8:	f000 f9bc 	bl	8006a54 <__multadd>
 80066dc:	4605      	mov	r5, r0
 80066de:	e7f0      	b.n	80066c2 <_dtoa_r+0xaba>
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bfcc      	ite	gt
 80066e6:	461e      	movgt	r6, r3
 80066e8:	2601      	movle	r6, #1
 80066ea:	4456      	add	r6, sl
 80066ec:	2700      	movs	r7, #0
 80066ee:	4649      	mov	r1, r9
 80066f0:	2201      	movs	r2, #1
 80066f2:	4658      	mov	r0, fp
 80066f4:	f000 fb5a 	bl	8006dac <__lshift>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4681      	mov	r9, r0
 80066fc:	f000 fbc2 	bl	8006e84 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	dcb0      	bgt.n	8006666 <_dtoa_r+0xa5e>
 8006704:	d102      	bne.n	800670c <_dtoa_r+0xb04>
 8006706:	f018 0f01 	tst.w	r8, #1
 800670a:	d1ac      	bne.n	8006666 <_dtoa_r+0xa5e>
 800670c:	4633      	mov	r3, r6
 800670e:	461e      	mov	r6, r3
 8006710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006714:	2a30      	cmp	r2, #48	@ 0x30
 8006716:	d0fa      	beq.n	800670e <_dtoa_r+0xb06>
 8006718:	e5c2      	b.n	80062a0 <_dtoa_r+0x698>
 800671a:	459a      	cmp	sl, r3
 800671c:	d1a4      	bne.n	8006668 <_dtoa_r+0xa60>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	2331      	movs	r3, #49	@ 0x31
 8006726:	f88a 3000 	strb.w	r3, [sl]
 800672a:	e5b9      	b.n	80062a0 <_dtoa_r+0x698>
 800672c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800672e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800678c <_dtoa_r+0xb84>
 8006732:	b11b      	cbz	r3, 800673c <_dtoa_r+0xb34>
 8006734:	f10a 0308 	add.w	r3, sl, #8
 8006738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4650      	mov	r0, sl
 800673e:	b019      	add	sp, #100	@ 0x64
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006746:	2b01      	cmp	r3, #1
 8006748:	f77f ae37 	ble.w	80063ba <_dtoa_r+0x7b2>
 800674c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800674e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006750:	2001      	movs	r0, #1
 8006752:	e655      	b.n	8006400 <_dtoa_r+0x7f8>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f77f aed6 	ble.w	8006508 <_dtoa_r+0x900>
 800675c:	4656      	mov	r6, sl
 800675e:	4621      	mov	r1, r4
 8006760:	4648      	mov	r0, r9
 8006762:	f7ff f9c9 	bl	8005af8 <quorem>
 8006766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800676a:	f806 8b01 	strb.w	r8, [r6], #1
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	eba6 020a 	sub.w	r2, r6, sl
 8006774:	4293      	cmp	r3, r2
 8006776:	ddb3      	ble.n	80066e0 <_dtoa_r+0xad8>
 8006778:	4649      	mov	r1, r9
 800677a:	2300      	movs	r3, #0
 800677c:	220a      	movs	r2, #10
 800677e:	4658      	mov	r0, fp
 8006780:	f000 f968 	bl	8006a54 <__multadd>
 8006784:	4681      	mov	r9, r0
 8006786:	e7ea      	b.n	800675e <_dtoa_r+0xb56>
 8006788:	080083e8 	.word	0x080083e8
 800678c:	0800836c 	.word	0x0800836c

08006790 <_free_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	2900      	cmp	r1, #0
 8006796:	d041      	beq.n	800681c <_free_r+0x8c>
 8006798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679c:	1f0c      	subs	r4, r1, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfb8      	it	lt
 80067a2:	18e4      	addlt	r4, r4, r3
 80067a4:	f000 f8e8 	bl	8006978 <__malloc_lock>
 80067a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <_free_r+0x90>)
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	b933      	cbnz	r3, 80067bc <_free_r+0x2c>
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	6014      	str	r4, [r2, #0]
 80067b2:	4628      	mov	r0, r5
 80067b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067b8:	f000 b8e4 	b.w	8006984 <__malloc_unlock>
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d908      	bls.n	80067d2 <_free_r+0x42>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	1821      	adds	r1, r4, r0
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf01      	itttt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	1809      	addeq	r1, r1, r0
 80067ce:	6021      	streq	r1, [r4, #0]
 80067d0:	e7ed      	b.n	80067ae <_free_r+0x1e>
 80067d2:	461a      	mov	r2, r3
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	b10b      	cbz	r3, 80067dc <_free_r+0x4c>
 80067d8:	42a3      	cmp	r3, r4
 80067da:	d9fa      	bls.n	80067d2 <_free_r+0x42>
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	1850      	adds	r0, r2, r1
 80067e0:	42a0      	cmp	r0, r4
 80067e2:	d10b      	bne.n	80067fc <_free_r+0x6c>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	4401      	add	r1, r0
 80067e8:	1850      	adds	r0, r2, r1
 80067ea:	4283      	cmp	r3, r0
 80067ec:	6011      	str	r1, [r2, #0]
 80067ee:	d1e0      	bne.n	80067b2 <_free_r+0x22>
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	6053      	str	r3, [r2, #4]
 80067f6:	4408      	add	r0, r1
 80067f8:	6010      	str	r0, [r2, #0]
 80067fa:	e7da      	b.n	80067b2 <_free_r+0x22>
 80067fc:	d902      	bls.n	8006804 <_free_r+0x74>
 80067fe:	230c      	movs	r3, #12
 8006800:	602b      	str	r3, [r5, #0]
 8006802:	e7d6      	b.n	80067b2 <_free_r+0x22>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	1821      	adds	r1, r4, r0
 8006808:	428b      	cmp	r3, r1
 800680a:	bf04      	itt	eq
 800680c:	6819      	ldreq	r1, [r3, #0]
 800680e:	685b      	ldreq	r3, [r3, #4]
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	bf04      	itt	eq
 8006814:	1809      	addeq	r1, r1, r0
 8006816:	6021      	streq	r1, [r4, #0]
 8006818:	6054      	str	r4, [r2, #4]
 800681a:	e7ca      	b.n	80067b2 <_free_r+0x22>
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20000664 	.word	0x20000664

08006824 <malloc>:
 8006824:	4b02      	ldr	r3, [pc, #8]	@ (8006830 <malloc+0xc>)
 8006826:	4601      	mov	r1, r0
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	f000 b825 	b.w	8006878 <_malloc_r>
 800682e:	bf00      	nop
 8006830:	20000020 	.word	0x20000020

08006834 <sbrk_aligned>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4e0f      	ldr	r6, [pc, #60]	@ (8006874 <sbrk_aligned+0x40>)
 8006838:	460c      	mov	r4, r1
 800683a:	6831      	ldr	r1, [r6, #0]
 800683c:	4605      	mov	r5, r0
 800683e:	b911      	cbnz	r1, 8006846 <sbrk_aligned+0x12>
 8006840:	f001 f860 	bl	8007904 <_sbrk_r>
 8006844:	6030      	str	r0, [r6, #0]
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f001 f85b 	bl	8007904 <_sbrk_r>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d103      	bne.n	800685a <sbrk_aligned+0x26>
 8006852:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006856:	4620      	mov	r0, r4
 8006858:	bd70      	pop	{r4, r5, r6, pc}
 800685a:	1cc4      	adds	r4, r0, #3
 800685c:	f024 0403 	bic.w	r4, r4, #3
 8006860:	42a0      	cmp	r0, r4
 8006862:	d0f8      	beq.n	8006856 <sbrk_aligned+0x22>
 8006864:	1a21      	subs	r1, r4, r0
 8006866:	4628      	mov	r0, r5
 8006868:	f001 f84c 	bl	8007904 <_sbrk_r>
 800686c:	3001      	adds	r0, #1
 800686e:	d1f2      	bne.n	8006856 <sbrk_aligned+0x22>
 8006870:	e7ef      	b.n	8006852 <sbrk_aligned+0x1e>
 8006872:	bf00      	nop
 8006874:	20000660 	.word	0x20000660

08006878 <_malloc_r>:
 8006878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800687c:	1ccd      	adds	r5, r1, #3
 800687e:	f025 0503 	bic.w	r5, r5, #3
 8006882:	3508      	adds	r5, #8
 8006884:	2d0c      	cmp	r5, #12
 8006886:	bf38      	it	cc
 8006888:	250c      	movcc	r5, #12
 800688a:	2d00      	cmp	r5, #0
 800688c:	4606      	mov	r6, r0
 800688e:	db01      	blt.n	8006894 <_malloc_r+0x1c>
 8006890:	42a9      	cmp	r1, r5
 8006892:	d904      	bls.n	800689e <_malloc_r+0x26>
 8006894:	230c      	movs	r3, #12
 8006896:	6033      	str	r3, [r6, #0]
 8006898:	2000      	movs	r0, #0
 800689a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800689e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006974 <_malloc_r+0xfc>
 80068a2:	f000 f869 	bl	8006978 <__malloc_lock>
 80068a6:	f8d8 3000 	ldr.w	r3, [r8]
 80068aa:	461c      	mov	r4, r3
 80068ac:	bb44      	cbnz	r4, 8006900 <_malloc_r+0x88>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4630      	mov	r0, r6
 80068b2:	f7ff ffbf 	bl	8006834 <sbrk_aligned>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	4604      	mov	r4, r0
 80068ba:	d158      	bne.n	800696e <_malloc_r+0xf6>
 80068bc:	f8d8 4000 	ldr.w	r4, [r8]
 80068c0:	4627      	mov	r7, r4
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	d143      	bne.n	800694e <_malloc_r+0xd6>
 80068c6:	2c00      	cmp	r4, #0
 80068c8:	d04b      	beq.n	8006962 <_malloc_r+0xea>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4639      	mov	r1, r7
 80068ce:	4630      	mov	r0, r6
 80068d0:	eb04 0903 	add.w	r9, r4, r3
 80068d4:	f001 f816 	bl	8007904 <_sbrk_r>
 80068d8:	4581      	cmp	r9, r0
 80068da:	d142      	bne.n	8006962 <_malloc_r+0xea>
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	1a6d      	subs	r5, r5, r1
 80068e0:	4629      	mov	r1, r5
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ffa6 	bl	8006834 <sbrk_aligned>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d03a      	beq.n	8006962 <_malloc_r+0xea>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	442b      	add	r3, r5
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	f8d8 3000 	ldr.w	r3, [r8]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	bb62      	cbnz	r2, 8006954 <_malloc_r+0xdc>
 80068fa:	f8c8 7000 	str.w	r7, [r8]
 80068fe:	e00f      	b.n	8006920 <_malloc_r+0xa8>
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	1b52      	subs	r2, r2, r5
 8006904:	d420      	bmi.n	8006948 <_malloc_r+0xd0>
 8006906:	2a0b      	cmp	r2, #11
 8006908:	d917      	bls.n	800693a <_malloc_r+0xc2>
 800690a:	1961      	adds	r1, r4, r5
 800690c:	42a3      	cmp	r3, r4
 800690e:	6025      	str	r5, [r4, #0]
 8006910:	bf18      	it	ne
 8006912:	6059      	strne	r1, [r3, #4]
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	bf08      	it	eq
 8006918:	f8c8 1000 	streq.w	r1, [r8]
 800691c:	5162      	str	r2, [r4, r5]
 800691e:	604b      	str	r3, [r1, #4]
 8006920:	4630      	mov	r0, r6
 8006922:	f000 f82f 	bl	8006984 <__malloc_unlock>
 8006926:	f104 000b 	add.w	r0, r4, #11
 800692a:	1d23      	adds	r3, r4, #4
 800692c:	f020 0007 	bic.w	r0, r0, #7
 8006930:	1ac2      	subs	r2, r0, r3
 8006932:	bf1c      	itt	ne
 8006934:	1a1b      	subne	r3, r3, r0
 8006936:	50a3      	strne	r3, [r4, r2]
 8006938:	e7af      	b.n	800689a <_malloc_r+0x22>
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	42a3      	cmp	r3, r4
 800693e:	bf0c      	ite	eq
 8006940:	f8c8 2000 	streq.w	r2, [r8]
 8006944:	605a      	strne	r2, [r3, #4]
 8006946:	e7eb      	b.n	8006920 <_malloc_r+0xa8>
 8006948:	4623      	mov	r3, r4
 800694a:	6864      	ldr	r4, [r4, #4]
 800694c:	e7ae      	b.n	80068ac <_malloc_r+0x34>
 800694e:	463c      	mov	r4, r7
 8006950:	687f      	ldr	r7, [r7, #4]
 8006952:	e7b6      	b.n	80068c2 <_malloc_r+0x4a>
 8006954:	461a      	mov	r2, r3
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	42a3      	cmp	r3, r4
 800695a:	d1fb      	bne.n	8006954 <_malloc_r+0xdc>
 800695c:	2300      	movs	r3, #0
 800695e:	6053      	str	r3, [r2, #4]
 8006960:	e7de      	b.n	8006920 <_malloc_r+0xa8>
 8006962:	230c      	movs	r3, #12
 8006964:	6033      	str	r3, [r6, #0]
 8006966:	4630      	mov	r0, r6
 8006968:	f000 f80c 	bl	8006984 <__malloc_unlock>
 800696c:	e794      	b.n	8006898 <_malloc_r+0x20>
 800696e:	6005      	str	r5, [r0, #0]
 8006970:	e7d6      	b.n	8006920 <_malloc_r+0xa8>
 8006972:	bf00      	nop
 8006974:	20000664 	.word	0x20000664

08006978 <__malloc_lock>:
 8006978:	4801      	ldr	r0, [pc, #4]	@ (8006980 <__malloc_lock+0x8>)
 800697a:	f7ff b8a6 	b.w	8005aca <__retarget_lock_acquire_recursive>
 800697e:	bf00      	nop
 8006980:	2000065c 	.word	0x2000065c

08006984 <__malloc_unlock>:
 8006984:	4801      	ldr	r0, [pc, #4]	@ (800698c <__malloc_unlock+0x8>)
 8006986:	f7ff b8a1 	b.w	8005acc <__retarget_lock_release_recursive>
 800698a:	bf00      	nop
 800698c:	2000065c 	.word	0x2000065c

08006990 <_Balloc>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	69c6      	ldr	r6, [r0, #28]
 8006994:	4604      	mov	r4, r0
 8006996:	460d      	mov	r5, r1
 8006998:	b976      	cbnz	r6, 80069b8 <_Balloc+0x28>
 800699a:	2010      	movs	r0, #16
 800699c:	f7ff ff42 	bl	8006824 <malloc>
 80069a0:	4602      	mov	r2, r0
 80069a2:	61e0      	str	r0, [r4, #28]
 80069a4:	b920      	cbnz	r0, 80069b0 <_Balloc+0x20>
 80069a6:	4b18      	ldr	r3, [pc, #96]	@ (8006a08 <_Balloc+0x78>)
 80069a8:	4818      	ldr	r0, [pc, #96]	@ (8006a0c <_Balloc+0x7c>)
 80069aa:	216b      	movs	r1, #107	@ 0x6b
 80069ac:	f7fe fa62 	bl	8004e74 <__assert_func>
 80069b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069b4:	6006      	str	r6, [r0, #0]
 80069b6:	60c6      	str	r6, [r0, #12]
 80069b8:	69e6      	ldr	r6, [r4, #28]
 80069ba:	68f3      	ldr	r3, [r6, #12]
 80069bc:	b183      	cbz	r3, 80069e0 <_Balloc+0x50>
 80069be:	69e3      	ldr	r3, [r4, #28]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069c6:	b9b8      	cbnz	r0, 80069f8 <_Balloc+0x68>
 80069c8:	2101      	movs	r1, #1
 80069ca:	fa01 f605 	lsl.w	r6, r1, r5
 80069ce:	1d72      	adds	r2, r6, #5
 80069d0:	0092      	lsls	r2, r2, #2
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 ffa6 	bl	8007924 <_calloc_r>
 80069d8:	b160      	cbz	r0, 80069f4 <_Balloc+0x64>
 80069da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069de:	e00e      	b.n	80069fe <_Balloc+0x6e>
 80069e0:	2221      	movs	r2, #33	@ 0x21
 80069e2:	2104      	movs	r1, #4
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 ff9d 	bl	8007924 <_calloc_r>
 80069ea:	69e3      	ldr	r3, [r4, #28]
 80069ec:	60f0      	str	r0, [r6, #12]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e4      	bne.n	80069be <_Balloc+0x2e>
 80069f4:	2000      	movs	r0, #0
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	6802      	ldr	r2, [r0, #0]
 80069fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069fe:	2300      	movs	r3, #0
 8006a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a04:	e7f7      	b.n	80069f6 <_Balloc+0x66>
 8006a06:	bf00      	nop
 8006a08:	08008379 	.word	0x08008379
 8006a0c:	080083f9 	.word	0x080083f9

08006a10 <_Bfree>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	69c6      	ldr	r6, [r0, #28]
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b976      	cbnz	r6, 8006a38 <_Bfree+0x28>
 8006a1a:	2010      	movs	r0, #16
 8006a1c:	f7ff ff02 	bl	8006824 <malloc>
 8006a20:	4602      	mov	r2, r0
 8006a22:	61e8      	str	r0, [r5, #28]
 8006a24:	b920      	cbnz	r0, 8006a30 <_Bfree+0x20>
 8006a26:	4b09      	ldr	r3, [pc, #36]	@ (8006a4c <_Bfree+0x3c>)
 8006a28:	4809      	ldr	r0, [pc, #36]	@ (8006a50 <_Bfree+0x40>)
 8006a2a:	218f      	movs	r1, #143	@ 0x8f
 8006a2c:	f7fe fa22 	bl	8004e74 <__assert_func>
 8006a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a34:	6006      	str	r6, [r0, #0]
 8006a36:	60c6      	str	r6, [r0, #12]
 8006a38:	b13c      	cbz	r4, 8006a4a <_Bfree+0x3a>
 8006a3a:	69eb      	ldr	r3, [r5, #28]
 8006a3c:	6862      	ldr	r2, [r4, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a44:	6021      	str	r1, [r4, #0]
 8006a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	08008379 	.word	0x08008379
 8006a50:	080083f9 	.word	0x080083f9

08006a54 <__multadd>:
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a58:	690d      	ldr	r5, [r1, #16]
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	461e      	mov	r6, r3
 8006a60:	f101 0c14 	add.w	ip, r1, #20
 8006a64:	2000      	movs	r0, #0
 8006a66:	f8dc 3000 	ldr.w	r3, [ip]
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a70:	0c1e      	lsrs	r6, r3, #16
 8006a72:	0c0b      	lsrs	r3, r1, #16
 8006a74:	fb02 3306 	mla	r3, r2, r6, r3
 8006a78:	b289      	uxth	r1, r1
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a80:	4285      	cmp	r5, r0
 8006a82:	f84c 1b04 	str.w	r1, [ip], #4
 8006a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a8a:	dcec      	bgt.n	8006a66 <__multadd+0x12>
 8006a8c:	b30e      	cbz	r6, 8006ad2 <__multadd+0x7e>
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	dc19      	bgt.n	8006ac8 <__multadd+0x74>
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	4638      	mov	r0, r7
 8006a98:	3101      	adds	r1, #1
 8006a9a:	f7ff ff79 	bl	8006990 <_Balloc>
 8006a9e:	4680      	mov	r8, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__multadd+0x5a>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <__multadd+0x84>)
 8006aa6:	480d      	ldr	r0, [pc, #52]	@ (8006adc <__multadd+0x88>)
 8006aa8:	21ba      	movs	r1, #186	@ 0xba
 8006aaa:	f7fe f9e3 	bl	8004e74 <__assert_func>
 8006aae:	6922      	ldr	r2, [r4, #16]
 8006ab0:	3202      	adds	r2, #2
 8006ab2:	f104 010c 	add.w	r1, r4, #12
 8006ab6:	0092      	lsls	r2, r2, #2
 8006ab8:	300c      	adds	r0, #12
 8006aba:	f7ff f808 	bl	8005ace <memcpy>
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f7ff ffa5 	bl	8006a10 <_Bfree>
 8006ac6:	4644      	mov	r4, r8
 8006ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006acc:	3501      	adds	r5, #1
 8006ace:	615e      	str	r6, [r3, #20]
 8006ad0:	6125      	str	r5, [r4, #16]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad8:	080083e8 	.word	0x080083e8
 8006adc:	080083f9 	.word	0x080083f9

08006ae0 <__hi0bits>:
 8006ae0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	bf36      	itet	cc
 8006ae8:	0403      	lslcc	r3, r0, #16
 8006aea:	2000      	movcs	r0, #0
 8006aec:	2010      	movcc	r0, #16
 8006aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006af2:	bf3c      	itt	cc
 8006af4:	021b      	lslcc	r3, r3, #8
 8006af6:	3008      	addcc	r0, #8
 8006af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006afc:	bf3c      	itt	cc
 8006afe:	011b      	lslcc	r3, r3, #4
 8006b00:	3004      	addcc	r0, #4
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b06:	bf3c      	itt	cc
 8006b08:	009b      	lslcc	r3, r3, #2
 8006b0a:	3002      	addcc	r0, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	db05      	blt.n	8006b1c <__hi0bits+0x3c>
 8006b10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b14:	f100 0001 	add.w	r0, r0, #1
 8006b18:	bf08      	it	eq
 8006b1a:	2020      	moveq	r0, #32
 8006b1c:	4770      	bx	lr

08006b1e <__lo0bits>:
 8006b1e:	6803      	ldr	r3, [r0, #0]
 8006b20:	4602      	mov	r2, r0
 8006b22:	f013 0007 	ands.w	r0, r3, #7
 8006b26:	d00b      	beq.n	8006b40 <__lo0bits+0x22>
 8006b28:	07d9      	lsls	r1, r3, #31
 8006b2a:	d421      	bmi.n	8006b70 <__lo0bits+0x52>
 8006b2c:	0798      	lsls	r0, r3, #30
 8006b2e:	bf49      	itett	mi
 8006b30:	085b      	lsrmi	r3, r3, #1
 8006b32:	089b      	lsrpl	r3, r3, #2
 8006b34:	2001      	movmi	r0, #1
 8006b36:	6013      	strmi	r3, [r2, #0]
 8006b38:	bf5c      	itt	pl
 8006b3a:	6013      	strpl	r3, [r2, #0]
 8006b3c:	2002      	movpl	r0, #2
 8006b3e:	4770      	bx	lr
 8006b40:	b299      	uxth	r1, r3
 8006b42:	b909      	cbnz	r1, 8006b48 <__lo0bits+0x2a>
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	2010      	movs	r0, #16
 8006b48:	b2d9      	uxtb	r1, r3
 8006b4a:	b909      	cbnz	r1, 8006b50 <__lo0bits+0x32>
 8006b4c:	3008      	adds	r0, #8
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	0719      	lsls	r1, r3, #28
 8006b52:	bf04      	itt	eq
 8006b54:	091b      	lsreq	r3, r3, #4
 8006b56:	3004      	addeq	r0, #4
 8006b58:	0799      	lsls	r1, r3, #30
 8006b5a:	bf04      	itt	eq
 8006b5c:	089b      	lsreq	r3, r3, #2
 8006b5e:	3002      	addeq	r0, #2
 8006b60:	07d9      	lsls	r1, r3, #31
 8006b62:	d403      	bmi.n	8006b6c <__lo0bits+0x4e>
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	f100 0001 	add.w	r0, r0, #1
 8006b6a:	d003      	beq.n	8006b74 <__lo0bits+0x56>
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4770      	bx	lr
 8006b70:	2000      	movs	r0, #0
 8006b72:	4770      	bx	lr
 8006b74:	2020      	movs	r0, #32
 8006b76:	4770      	bx	lr

08006b78 <__i2b>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	f7ff ff07 	bl	8006990 <_Balloc>
 8006b82:	4602      	mov	r2, r0
 8006b84:	b928      	cbnz	r0, 8006b92 <__i2b+0x1a>
 8006b86:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <__i2b+0x24>)
 8006b88:	4805      	ldr	r0, [pc, #20]	@ (8006ba0 <__i2b+0x28>)
 8006b8a:	f240 1145 	movw	r1, #325	@ 0x145
 8006b8e:	f7fe f971 	bl	8004e74 <__assert_func>
 8006b92:	2301      	movs	r3, #1
 8006b94:	6144      	str	r4, [r0, #20]
 8006b96:	6103      	str	r3, [r0, #16]
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	080083e8 	.word	0x080083e8
 8006ba0:	080083f9 	.word	0x080083f9

08006ba4 <__multiply>:
 8006ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba8:	4614      	mov	r4, r2
 8006baa:	690a      	ldr	r2, [r1, #16]
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bfa8      	it	ge
 8006bb2:	4623      	movge	r3, r4
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	bfa4      	itt	ge
 8006bb8:	460c      	movge	r4, r1
 8006bba:	461f      	movge	r7, r3
 8006bbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006bc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	6861      	ldr	r1, [r4, #4]
 8006bc8:	eb0a 0609 	add.w	r6, sl, r9
 8006bcc:	42b3      	cmp	r3, r6
 8006bce:	b085      	sub	sp, #20
 8006bd0:	bfb8      	it	lt
 8006bd2:	3101      	addlt	r1, #1
 8006bd4:	f7ff fedc 	bl	8006990 <_Balloc>
 8006bd8:	b930      	cbnz	r0, 8006be8 <__multiply+0x44>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b44      	ldr	r3, [pc, #272]	@ (8006cf0 <__multiply+0x14c>)
 8006bde:	4845      	ldr	r0, [pc, #276]	@ (8006cf4 <__multiply+0x150>)
 8006be0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006be4:	f7fe f946 	bl	8004e74 <__assert_func>
 8006be8:	f100 0514 	add.w	r5, r0, #20
 8006bec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	d321      	bcc.n	8006c3c <__multiply+0x98>
 8006bf8:	f107 0114 	add.w	r1, r7, #20
 8006bfc:	f104 0214 	add.w	r2, r4, #20
 8006c00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	1b13      	subs	r3, r2, r4
 8006c0c:	3b15      	subs	r3, #21
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	3304      	adds	r3, #4
 8006c14:	f104 0715 	add.w	r7, r4, #21
 8006c18:	42ba      	cmp	r2, r7
 8006c1a:	bf38      	it	cc
 8006c1c:	2304      	movcc	r3, #4
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d80c      	bhi.n	8006c42 <__multiply+0x9e>
 8006c28:	2e00      	cmp	r6, #0
 8006c2a:	dd03      	ble.n	8006c34 <__multiply+0x90>
 8006c2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d05b      	beq.n	8006cec <__multiply+0x148>
 8006c34:	6106      	str	r6, [r0, #16]
 8006c36:	b005      	add	sp, #20
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	f843 2b04 	str.w	r2, [r3], #4
 8006c40:	e7d8      	b.n	8006bf4 <__multiply+0x50>
 8006c42:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c46:	f1ba 0f00 	cmp.w	sl, #0
 8006c4a:	d024      	beq.n	8006c96 <__multiply+0xf2>
 8006c4c:	f104 0e14 	add.w	lr, r4, #20
 8006c50:	46a9      	mov	r9, r5
 8006c52:	f04f 0c00 	mov.w	ip, #0
 8006c56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c5a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c5e:	fa1f fb87 	uxth.w	fp, r7
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c6c:	f8d9 7000 	ldr.w	r7, [r9]
 8006c70:	4463      	add	r3, ip
 8006c72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c76:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c84:	4572      	cmp	r2, lr
 8006c86:	f849 3b04 	str.w	r3, [r9], #4
 8006c8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c8e:	d8e2      	bhi.n	8006c56 <__multiply+0xb2>
 8006c90:	9b01      	ldr	r3, [sp, #4]
 8006c92:	f845 c003 	str.w	ip, [r5, r3]
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c9c:	3104      	adds	r1, #4
 8006c9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ca2:	d021      	beq.n	8006ce8 <__multiply+0x144>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	f104 0c14 	add.w	ip, r4, #20
 8006caa:	46ae      	mov	lr, r5
 8006cac:	f04f 0a00 	mov.w	sl, #0
 8006cb0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006cb8:	fb09 770b 	mla	r7, r9, fp, r7
 8006cbc:	4457      	add	r7, sl
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cc4:	f84e 3b04 	str.w	r3, [lr], #4
 8006cc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cd0:	f8be 3000 	ldrh.w	r3, [lr]
 8006cd4:	fb09 330a 	mla	r3, r9, sl, r3
 8006cd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006cdc:	4562      	cmp	r2, ip
 8006cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ce2:	d8e5      	bhi.n	8006cb0 <__multiply+0x10c>
 8006ce4:	9f01      	ldr	r7, [sp, #4]
 8006ce6:	51eb      	str	r3, [r5, r7]
 8006ce8:	3504      	adds	r5, #4
 8006cea:	e799      	b.n	8006c20 <__multiply+0x7c>
 8006cec:	3e01      	subs	r6, #1
 8006cee:	e79b      	b.n	8006c28 <__multiply+0x84>
 8006cf0:	080083e8 	.word	0x080083e8
 8006cf4:	080083f9 	.word	0x080083f9

08006cf8 <__pow5mult>:
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	f012 0203 	ands.w	r2, r2, #3
 8006d02:	4607      	mov	r7, r0
 8006d04:	460e      	mov	r6, r1
 8006d06:	d007      	beq.n	8006d18 <__pow5mult+0x20>
 8006d08:	4c25      	ldr	r4, [pc, #148]	@ (8006da0 <__pow5mult+0xa8>)
 8006d0a:	3a01      	subs	r2, #1
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d12:	f7ff fe9f 	bl	8006a54 <__multadd>
 8006d16:	4606      	mov	r6, r0
 8006d18:	10ad      	asrs	r5, r5, #2
 8006d1a:	d03d      	beq.n	8006d98 <__pow5mult+0xa0>
 8006d1c:	69fc      	ldr	r4, [r7, #28]
 8006d1e:	b97c      	cbnz	r4, 8006d40 <__pow5mult+0x48>
 8006d20:	2010      	movs	r0, #16
 8006d22:	f7ff fd7f 	bl	8006824 <malloc>
 8006d26:	4602      	mov	r2, r0
 8006d28:	61f8      	str	r0, [r7, #28]
 8006d2a:	b928      	cbnz	r0, 8006d38 <__pow5mult+0x40>
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <__pow5mult+0xac>)
 8006d2e:	481e      	ldr	r0, [pc, #120]	@ (8006da8 <__pow5mult+0xb0>)
 8006d30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d34:	f7fe f89e 	bl	8004e74 <__assert_func>
 8006d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d3c:	6004      	str	r4, [r0, #0]
 8006d3e:	60c4      	str	r4, [r0, #12]
 8006d40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d48:	b94c      	cbnz	r4, 8006d5e <__pow5mult+0x66>
 8006d4a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f7ff ff12 	bl	8006b78 <__i2b>
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	6003      	str	r3, [r0, #0]
 8006d5e:	f04f 0900 	mov.w	r9, #0
 8006d62:	07eb      	lsls	r3, r5, #31
 8006d64:	d50a      	bpl.n	8006d7c <__pow5mult+0x84>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff ff1a 	bl	8006ba4 <__multiply>
 8006d70:	4631      	mov	r1, r6
 8006d72:	4680      	mov	r8, r0
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7ff fe4b 	bl	8006a10 <_Bfree>
 8006d7a:	4646      	mov	r6, r8
 8006d7c:	106d      	asrs	r5, r5, #1
 8006d7e:	d00b      	beq.n	8006d98 <__pow5mult+0xa0>
 8006d80:	6820      	ldr	r0, [r4, #0]
 8006d82:	b938      	cbnz	r0, 8006d94 <__pow5mult+0x9c>
 8006d84:	4622      	mov	r2, r4
 8006d86:	4621      	mov	r1, r4
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff ff0b 	bl	8006ba4 <__multiply>
 8006d8e:	6020      	str	r0, [r4, #0]
 8006d90:	f8c0 9000 	str.w	r9, [r0]
 8006d94:	4604      	mov	r4, r0
 8006d96:	e7e4      	b.n	8006d62 <__pow5mult+0x6a>
 8006d98:	4630      	mov	r0, r6
 8006d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d9e:	bf00      	nop
 8006da0:	08008454 	.word	0x08008454
 8006da4:	08008379 	.word	0x08008379
 8006da8:	080083f9 	.word	0x080083f9

08006dac <__lshift>:
 8006dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	460c      	mov	r4, r1
 8006db2:	6849      	ldr	r1, [r1, #4]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dba:	68a3      	ldr	r3, [r4, #8]
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	4691      	mov	r9, r2
 8006dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dc4:	f108 0601 	add.w	r6, r8, #1
 8006dc8:	42b3      	cmp	r3, r6
 8006dca:	db0b      	blt.n	8006de4 <__lshift+0x38>
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f7ff fddf 	bl	8006990 <_Balloc>
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	b948      	cbnz	r0, 8006dea <__lshift+0x3e>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <__lshift+0xd0>)
 8006dda:	4829      	ldr	r0, [pc, #164]	@ (8006e80 <__lshift+0xd4>)
 8006ddc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006de0:	f7fe f848 	bl	8004e74 <__assert_func>
 8006de4:	3101      	adds	r1, #1
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	e7ee      	b.n	8006dc8 <__lshift+0x1c>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f100 0114 	add.w	r1, r0, #20
 8006df0:	f100 0210 	add.w	r2, r0, #16
 8006df4:	4618      	mov	r0, r3
 8006df6:	4553      	cmp	r3, sl
 8006df8:	db33      	blt.n	8006e62 <__lshift+0xb6>
 8006dfa:	6920      	ldr	r0, [r4, #16]
 8006dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e00:	f104 0314 	add.w	r3, r4, #20
 8006e04:	f019 091f 	ands.w	r9, r9, #31
 8006e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e10:	d02b      	beq.n	8006e6a <__lshift+0xbe>
 8006e12:	f1c9 0e20 	rsb	lr, r9, #32
 8006e16:	468a      	mov	sl, r1
 8006e18:	2200      	movs	r2, #0
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e20:	4310      	orrs	r0, r2
 8006e22:	f84a 0b04 	str.w	r0, [sl], #4
 8006e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2a:	459c      	cmp	ip, r3
 8006e2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e30:	d8f3      	bhi.n	8006e1a <__lshift+0x6e>
 8006e32:	ebac 0304 	sub.w	r3, ip, r4
 8006e36:	3b15      	subs	r3, #21
 8006e38:	f023 0303 	bic.w	r3, r3, #3
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	f104 0015 	add.w	r0, r4, #21
 8006e42:	4584      	cmp	ip, r0
 8006e44:	bf38      	it	cc
 8006e46:	2304      	movcc	r3, #4
 8006e48:	50ca      	str	r2, [r1, r3]
 8006e4a:	b10a      	cbz	r2, 8006e50 <__lshift+0xa4>
 8006e4c:	f108 0602 	add.w	r6, r8, #2
 8006e50:	3e01      	subs	r6, #1
 8006e52:	4638      	mov	r0, r7
 8006e54:	612e      	str	r6, [r5, #16]
 8006e56:	4621      	mov	r1, r4
 8006e58:	f7ff fdda 	bl	8006a10 <_Bfree>
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e66:	3301      	adds	r3, #1
 8006e68:	e7c5      	b.n	8006df6 <__lshift+0x4a>
 8006e6a:	3904      	subs	r1, #4
 8006e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e70:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e74:	459c      	cmp	ip, r3
 8006e76:	d8f9      	bhi.n	8006e6c <__lshift+0xc0>
 8006e78:	e7ea      	b.n	8006e50 <__lshift+0xa4>
 8006e7a:	bf00      	nop
 8006e7c:	080083e8 	.word	0x080083e8
 8006e80:	080083f9 	.word	0x080083f9

08006e84 <__mcmp>:
 8006e84:	690a      	ldr	r2, [r1, #16]
 8006e86:	4603      	mov	r3, r0
 8006e88:	6900      	ldr	r0, [r0, #16]
 8006e8a:	1a80      	subs	r0, r0, r2
 8006e8c:	b530      	push	{r4, r5, lr}
 8006e8e:	d10e      	bne.n	8006eae <__mcmp+0x2a>
 8006e90:	3314      	adds	r3, #20
 8006e92:	3114      	adds	r1, #20
 8006e94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ea4:	4295      	cmp	r5, r2
 8006ea6:	d003      	beq.n	8006eb0 <__mcmp+0x2c>
 8006ea8:	d205      	bcs.n	8006eb6 <__mcmp+0x32>
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eae:	bd30      	pop	{r4, r5, pc}
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	d3f3      	bcc.n	8006e9c <__mcmp+0x18>
 8006eb4:	e7fb      	b.n	8006eae <__mcmp+0x2a>
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	e7f9      	b.n	8006eae <__mcmp+0x2a>
	...

08006ebc <__mdiff>:
 8006ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	4614      	mov	r4, r2
 8006eca:	f7ff ffdb 	bl	8006e84 <__mcmp>
 8006ece:	1e05      	subs	r5, r0, #0
 8006ed0:	d112      	bne.n	8006ef8 <__mdiff+0x3c>
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff fd5b 	bl	8006990 <_Balloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	b928      	cbnz	r0, 8006eea <__mdiff+0x2e>
 8006ede:	4b3f      	ldr	r3, [pc, #252]	@ (8006fdc <__mdiff+0x120>)
 8006ee0:	f240 2137 	movw	r1, #567	@ 0x237
 8006ee4:	483e      	ldr	r0, [pc, #248]	@ (8006fe0 <__mdiff+0x124>)
 8006ee6:	f7fd ffc5 	bl	8004e74 <__assert_func>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	b003      	add	sp, #12
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	bfbc      	itt	lt
 8006efa:	464b      	movlt	r3, r9
 8006efc:	46a1      	movlt	r9, r4
 8006efe:	4630      	mov	r0, r6
 8006f00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f04:	bfba      	itte	lt
 8006f06:	461c      	movlt	r4, r3
 8006f08:	2501      	movlt	r5, #1
 8006f0a:	2500      	movge	r5, #0
 8006f0c:	f7ff fd40 	bl	8006990 <_Balloc>
 8006f10:	4602      	mov	r2, r0
 8006f12:	b918      	cbnz	r0, 8006f1c <__mdiff+0x60>
 8006f14:	4b31      	ldr	r3, [pc, #196]	@ (8006fdc <__mdiff+0x120>)
 8006f16:	f240 2145 	movw	r1, #581	@ 0x245
 8006f1a:	e7e3      	b.n	8006ee4 <__mdiff+0x28>
 8006f1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f20:	6926      	ldr	r6, [r4, #16]
 8006f22:	60c5      	str	r5, [r0, #12]
 8006f24:	f109 0310 	add.w	r3, r9, #16
 8006f28:	f109 0514 	add.w	r5, r9, #20
 8006f2c:	f104 0e14 	add.w	lr, r4, #20
 8006f30:	f100 0b14 	add.w	fp, r0, #20
 8006f34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	46d9      	mov	r9, fp
 8006f40:	f04f 0c00 	mov.w	ip, #0
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	fa1f f38a 	uxth.w	r3, sl
 8006f54:	4619      	mov	r1, r3
 8006f56:	b283      	uxth	r3, r0
 8006f58:	1acb      	subs	r3, r1, r3
 8006f5a:	0c00      	lsrs	r0, r0, #16
 8006f5c:	4463      	add	r3, ip
 8006f5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f6c:	4576      	cmp	r6, lr
 8006f6e:	f849 3b04 	str.w	r3, [r9], #4
 8006f72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f76:	d8e5      	bhi.n	8006f44 <__mdiff+0x88>
 8006f78:	1b33      	subs	r3, r6, r4
 8006f7a:	3b15      	subs	r3, #21
 8006f7c:	f023 0303 	bic.w	r3, r3, #3
 8006f80:	3415      	adds	r4, #21
 8006f82:	3304      	adds	r3, #4
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	bf38      	it	cc
 8006f88:	2304      	movcc	r3, #4
 8006f8a:	441d      	add	r5, r3
 8006f8c:	445b      	add	r3, fp
 8006f8e:	461e      	mov	r6, r3
 8006f90:	462c      	mov	r4, r5
 8006f92:	4544      	cmp	r4, r8
 8006f94:	d30e      	bcc.n	8006fb4 <__mdiff+0xf8>
 8006f96:	f108 0103 	add.w	r1, r8, #3
 8006f9a:	1b49      	subs	r1, r1, r5
 8006f9c:	f021 0103 	bic.w	r1, r1, #3
 8006fa0:	3d03      	subs	r5, #3
 8006fa2:	45a8      	cmp	r8, r5
 8006fa4:	bf38      	it	cc
 8006fa6:	2100      	movcc	r1, #0
 8006fa8:	440b      	add	r3, r1
 8006faa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fae:	b191      	cbz	r1, 8006fd6 <__mdiff+0x11a>
 8006fb0:	6117      	str	r7, [r2, #16]
 8006fb2:	e79d      	b.n	8006ef0 <__mdiff+0x34>
 8006fb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fb8:	46e6      	mov	lr, ip
 8006fba:	0c08      	lsrs	r0, r1, #16
 8006fbc:	fa1c fc81 	uxtah	ip, ip, r1
 8006fc0:	4471      	add	r1, lr
 8006fc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fc6:	b289      	uxth	r1, r1
 8006fc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006fcc:	f846 1b04 	str.w	r1, [r6], #4
 8006fd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fd4:	e7dd      	b.n	8006f92 <__mdiff+0xd6>
 8006fd6:	3f01      	subs	r7, #1
 8006fd8:	e7e7      	b.n	8006faa <__mdiff+0xee>
 8006fda:	bf00      	nop
 8006fdc:	080083e8 	.word	0x080083e8
 8006fe0:	080083f9 	.word	0x080083f9

08006fe4 <__d2b>:
 8006fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	460f      	mov	r7, r1
 8006fea:	2101      	movs	r1, #1
 8006fec:	ec59 8b10 	vmov	r8, r9, d0
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	f7ff fccd 	bl	8006990 <_Balloc>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	b930      	cbnz	r0, 8007008 <__d2b+0x24>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b23      	ldr	r3, [pc, #140]	@ (800708c <__d2b+0xa8>)
 8006ffe:	4824      	ldr	r0, [pc, #144]	@ (8007090 <__d2b+0xac>)
 8007000:	f240 310f 	movw	r1, #783	@ 0x30f
 8007004:	f7fd ff36 	bl	8004e74 <__assert_func>
 8007008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800700c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007010:	b10d      	cbz	r5, 8007016 <__d2b+0x32>
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	f1b8 0300 	subs.w	r3, r8, #0
 800701c:	d023      	beq.n	8007066 <__d2b+0x82>
 800701e:	4668      	mov	r0, sp
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	f7ff fd7c 	bl	8006b1e <__lo0bits>
 8007026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800702a:	b1d0      	cbz	r0, 8007062 <__d2b+0x7e>
 800702c:	f1c0 0320 	rsb	r3, r0, #32
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	430b      	orrs	r3, r1
 8007036:	40c2      	lsrs	r2, r0
 8007038:	6163      	str	r3, [r4, #20]
 800703a:	9201      	str	r2, [sp, #4]
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	61a3      	str	r3, [r4, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf0c      	ite	eq
 8007044:	2201      	moveq	r2, #1
 8007046:	2202      	movne	r2, #2
 8007048:	6122      	str	r2, [r4, #16]
 800704a:	b1a5      	cbz	r5, 8007076 <__d2b+0x92>
 800704c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007050:	4405      	add	r5, r0
 8007052:	603d      	str	r5, [r7, #0]
 8007054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007058:	6030      	str	r0, [r6, #0]
 800705a:	4620      	mov	r0, r4
 800705c:	b003      	add	sp, #12
 800705e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007062:	6161      	str	r1, [r4, #20]
 8007064:	e7ea      	b.n	800703c <__d2b+0x58>
 8007066:	a801      	add	r0, sp, #4
 8007068:	f7ff fd59 	bl	8006b1e <__lo0bits>
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	3020      	adds	r0, #32
 8007072:	2201      	movs	r2, #1
 8007074:	e7e8      	b.n	8007048 <__d2b+0x64>
 8007076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800707a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800707e:	6038      	str	r0, [r7, #0]
 8007080:	6918      	ldr	r0, [r3, #16]
 8007082:	f7ff fd2d 	bl	8006ae0 <__hi0bits>
 8007086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800708a:	e7e5      	b.n	8007058 <__d2b+0x74>
 800708c:	080083e8 	.word	0x080083e8
 8007090:	080083f9 	.word	0x080083f9

08007094 <__ssputs_r>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	688e      	ldr	r6, [r1, #8]
 800709a:	461f      	mov	r7, r3
 800709c:	42be      	cmp	r6, r7
 800709e:	680b      	ldr	r3, [r1, #0]
 80070a0:	4682      	mov	sl, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	4690      	mov	r8, r2
 80070a6:	d82d      	bhi.n	8007104 <__ssputs_r+0x70>
 80070a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070b0:	d026      	beq.n	8007100 <__ssputs_r+0x6c>
 80070b2:	6965      	ldr	r5, [r4, #20]
 80070b4:	6909      	ldr	r1, [r1, #16]
 80070b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ba:	eba3 0901 	sub.w	r9, r3, r1
 80070be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c2:	1c7b      	adds	r3, r7, #1
 80070c4:	444b      	add	r3, r9
 80070c6:	106d      	asrs	r5, r5, #1
 80070c8:	429d      	cmp	r5, r3
 80070ca:	bf38      	it	cc
 80070cc:	461d      	movcc	r5, r3
 80070ce:	0553      	lsls	r3, r2, #21
 80070d0:	d527      	bpl.n	8007122 <__ssputs_r+0x8e>
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7ff fbd0 	bl	8006878 <_malloc_r>
 80070d8:	4606      	mov	r6, r0
 80070da:	b360      	cbz	r0, 8007136 <__ssputs_r+0xa2>
 80070dc:	6921      	ldr	r1, [r4, #16]
 80070de:	464a      	mov	r2, r9
 80070e0:	f7fe fcf5 	bl	8005ace <memcpy>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	6126      	str	r6, [r4, #16]
 80070f2:	6165      	str	r5, [r4, #20]
 80070f4:	444e      	add	r6, r9
 80070f6:	eba5 0509 	sub.w	r5, r5, r9
 80070fa:	6026      	str	r6, [r4, #0]
 80070fc:	60a5      	str	r5, [r4, #8]
 80070fe:	463e      	mov	r6, r7
 8007100:	42be      	cmp	r6, r7
 8007102:	d900      	bls.n	8007106 <__ssputs_r+0x72>
 8007104:	463e      	mov	r6, r7
 8007106:	6820      	ldr	r0, [r4, #0]
 8007108:	4632      	mov	r2, r6
 800710a:	4641      	mov	r1, r8
 800710c:	f000 fb9c 	bl	8007848 <memmove>
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	1b9b      	subs	r3, r3, r6
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	4433      	add	r3, r6
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	2000      	movs	r0, #0
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	462a      	mov	r2, r5
 8007124:	f000 fc24 	bl	8007970 <_realloc_r>
 8007128:	4606      	mov	r6, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	d1e0      	bne.n	80070f0 <__ssputs_r+0x5c>
 800712e:	6921      	ldr	r1, [r4, #16]
 8007130:	4650      	mov	r0, sl
 8007132:	f7ff fb2d 	bl	8006790 <_free_r>
 8007136:	230c      	movs	r3, #12
 8007138:	f8ca 3000 	str.w	r3, [sl]
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007148:	e7e9      	b.n	800711e <__ssputs_r+0x8a>
	...

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4698      	mov	r8, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	b09d      	sub	sp, #116	@ 0x74
 8007158:	4607      	mov	r7, r0
 800715a:	460d      	mov	r5, r1
 800715c:	4614      	mov	r4, r2
 800715e:	d510      	bpl.n	8007182 <_svfiprintf_r+0x36>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b973      	cbnz	r3, 8007182 <_svfiprintf_r+0x36>
 8007164:	2140      	movs	r1, #64	@ 0x40
 8007166:	f7ff fb87 	bl	8006878 <_malloc_r>
 800716a:	6028      	str	r0, [r5, #0]
 800716c:	6128      	str	r0, [r5, #16]
 800716e:	b930      	cbnz	r0, 800717e <_svfiprintf_r+0x32>
 8007170:	230c      	movs	r3, #12
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007178:	b01d      	add	sp, #116	@ 0x74
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	2340      	movs	r3, #64	@ 0x40
 8007180:	616b      	str	r3, [r5, #20]
 8007182:	2300      	movs	r3, #0
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	2320      	movs	r3, #32
 8007188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800718c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007190:	2330      	movs	r3, #48	@ 0x30
 8007192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007330 <_svfiprintf_r+0x1e4>
 8007196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800719a:	f04f 0901 	mov.w	r9, #1
 800719e:	4623      	mov	r3, r4
 80071a0:	469a      	mov	sl, r3
 80071a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a6:	b10a      	cbz	r2, 80071ac <_svfiprintf_r+0x60>
 80071a8:	2a25      	cmp	r2, #37	@ 0x25
 80071aa:	d1f9      	bne.n	80071a0 <_svfiprintf_r+0x54>
 80071ac:	ebba 0b04 	subs.w	fp, sl, r4
 80071b0:	d00b      	beq.n	80071ca <_svfiprintf_r+0x7e>
 80071b2:	465b      	mov	r3, fp
 80071b4:	4622      	mov	r2, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff6b 	bl	8007094 <__ssputs_r>
 80071be:	3001      	adds	r0, #1
 80071c0:	f000 80a7 	beq.w	8007312 <_svfiprintf_r+0x1c6>
 80071c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c6:	445a      	add	r2, fp
 80071c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 809f 	beq.w	8007312 <_svfiprintf_r+0x1c6>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071de:	f10a 0a01 	add.w	sl, sl, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	9307      	str	r3, [sp, #28]
 80071e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80071ec:	4654      	mov	r4, sl
 80071ee:	2205      	movs	r2, #5
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	484e      	ldr	r0, [pc, #312]	@ (8007330 <_svfiprintf_r+0x1e4>)
 80071f6:	f7f9 f80b 	bl	8000210 <memchr>
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	b9d8      	cbnz	r0, 8007236 <_svfiprintf_r+0xea>
 80071fe:	06d0      	lsls	r0, r2, #27
 8007200:	bf44      	itt	mi
 8007202:	2320      	movmi	r3, #32
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007208:	0711      	lsls	r1, r2, #28
 800720a:	bf44      	itt	mi
 800720c:	232b      	movmi	r3, #43	@ 0x2b
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b2a      	cmp	r3, #42	@ 0x2a
 8007218:	d015      	beq.n	8007246 <_svfiprintf_r+0xfa>
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4621      	mov	r1, r4
 8007226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722a:	3b30      	subs	r3, #48	@ 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d94b      	bls.n	80072c8 <_svfiprintf_r+0x17c>
 8007230:	b1b0      	cbz	r0, 8007260 <_svfiprintf_r+0x114>
 8007232:	9207      	str	r2, [sp, #28]
 8007234:	e014      	b.n	8007260 <_svfiprintf_r+0x114>
 8007236:	eba0 0308 	sub.w	r3, r0, r8
 800723a:	fa09 f303 	lsl.w	r3, r9, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	46a2      	mov	sl, r4
 8007244:	e7d2      	b.n	80071ec <_svfiprintf_r+0xa0>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	1d19      	adds	r1, r3, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	9103      	str	r1, [sp, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfbb      	ittet	lt
 8007252:	425b      	neglt	r3, r3
 8007254:	f042 0202 	orrlt.w	r2, r2, #2
 8007258:	9307      	strge	r3, [sp, #28]
 800725a:	9307      	strlt	r3, [sp, #28]
 800725c:	bfb8      	it	lt
 800725e:	9204      	strlt	r2, [sp, #16]
 8007260:	7823      	ldrb	r3, [r4, #0]
 8007262:	2b2e      	cmp	r3, #46	@ 0x2e
 8007264:	d10a      	bne.n	800727c <_svfiprintf_r+0x130>
 8007266:	7863      	ldrb	r3, [r4, #1]
 8007268:	2b2a      	cmp	r3, #42	@ 0x2a
 800726a:	d132      	bne.n	80072d2 <_svfiprintf_r+0x186>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007278:	3402      	adds	r4, #2
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007340 <_svfiprintf_r+0x1f4>
 8007280:	7821      	ldrb	r1, [r4, #0]
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	f7f8 ffc3 	bl	8000210 <memchr>
 800728a:	b138      	cbz	r0, 800729c <_svfiprintf_r+0x150>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	eba0 000a 	sub.w	r0, r0, sl
 8007292:	2240      	movs	r2, #64	@ 0x40
 8007294:	4082      	lsls	r2, r0
 8007296:	4313      	orrs	r3, r2
 8007298:	3401      	adds	r4, #1
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a0:	4824      	ldr	r0, [pc, #144]	@ (8007334 <_svfiprintf_r+0x1e8>)
 80072a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072a6:	2206      	movs	r2, #6
 80072a8:	f7f8 ffb2 	bl	8000210 <memchr>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d036      	beq.n	800731e <_svfiprintf_r+0x1d2>
 80072b0:	4b21      	ldr	r3, [pc, #132]	@ (8007338 <_svfiprintf_r+0x1ec>)
 80072b2:	bb1b      	cbnz	r3, 80072fc <_svfiprintf_r+0x1b0>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	3307      	adds	r3, #7
 80072b8:	f023 0307 	bic.w	r3, r3, #7
 80072bc:	3308      	adds	r3, #8
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c2:	4433      	add	r3, r6
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	e76a      	b.n	800719e <_svfiprintf_r+0x52>
 80072c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072cc:	460c      	mov	r4, r1
 80072ce:	2001      	movs	r0, #1
 80072d0:	e7a8      	b.n	8007224 <_svfiprintf_r+0xd8>
 80072d2:	2300      	movs	r3, #0
 80072d4:	3401      	adds	r4, #1
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	4619      	mov	r1, r3
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4620      	mov	r0, r4
 80072e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e4:	3a30      	subs	r2, #48	@ 0x30
 80072e6:	2a09      	cmp	r2, #9
 80072e8:	d903      	bls.n	80072f2 <_svfiprintf_r+0x1a6>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0c6      	beq.n	800727c <_svfiprintf_r+0x130>
 80072ee:	9105      	str	r1, [sp, #20]
 80072f0:	e7c4      	b.n	800727c <_svfiprintf_r+0x130>
 80072f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f6:	4604      	mov	r4, r0
 80072f8:	2301      	movs	r3, #1
 80072fa:	e7f0      	b.n	80072de <_svfiprintf_r+0x192>
 80072fc:	ab03      	add	r3, sp, #12
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	462a      	mov	r2, r5
 8007302:	4b0e      	ldr	r3, [pc, #56]	@ (800733c <_svfiprintf_r+0x1f0>)
 8007304:	a904      	add	r1, sp, #16
 8007306:	4638      	mov	r0, r7
 8007308:	f7fd fe72 	bl	8004ff0 <_printf_float>
 800730c:	1c42      	adds	r2, r0, #1
 800730e:	4606      	mov	r6, r0
 8007310:	d1d6      	bne.n	80072c0 <_svfiprintf_r+0x174>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	065b      	lsls	r3, r3, #25
 8007316:	f53f af2d 	bmi.w	8007174 <_svfiprintf_r+0x28>
 800731a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800731c:	e72c      	b.n	8007178 <_svfiprintf_r+0x2c>
 800731e:	ab03      	add	r3, sp, #12
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	462a      	mov	r2, r5
 8007324:	4b05      	ldr	r3, [pc, #20]	@ (800733c <_svfiprintf_r+0x1f0>)
 8007326:	a904      	add	r1, sp, #16
 8007328:	4638      	mov	r0, r7
 800732a:	f7fe f8f9 	bl	8005520 <_printf_i>
 800732e:	e7ed      	b.n	800730c <_svfiprintf_r+0x1c0>
 8007330:	08008550 	.word	0x08008550
 8007334:	0800855a 	.word	0x0800855a
 8007338:	08004ff1 	.word	0x08004ff1
 800733c:	08007095 	.word	0x08007095
 8007340:	08008556 	.word	0x08008556

08007344 <__sfputc_r>:
 8007344:	6893      	ldr	r3, [r2, #8]
 8007346:	3b01      	subs	r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	b410      	push	{r4}
 800734c:	6093      	str	r3, [r2, #8]
 800734e:	da08      	bge.n	8007362 <__sfputc_r+0x1e>
 8007350:	6994      	ldr	r4, [r2, #24]
 8007352:	42a3      	cmp	r3, r4
 8007354:	db01      	blt.n	800735a <__sfputc_r+0x16>
 8007356:	290a      	cmp	r1, #10
 8007358:	d103      	bne.n	8007362 <__sfputc_r+0x1e>
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	f000 b9df 	b.w	8007720 <__swbuf_r>
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	1c58      	adds	r0, r3, #1
 8007366:	6010      	str	r0, [r2, #0]
 8007368:	7019      	strb	r1, [r3, #0]
 800736a:	4608      	mov	r0, r1
 800736c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007370:	4770      	bx	lr

08007372 <__sfputs_r>:
 8007372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007374:	4606      	mov	r6, r0
 8007376:	460f      	mov	r7, r1
 8007378:	4614      	mov	r4, r2
 800737a:	18d5      	adds	r5, r2, r3
 800737c:	42ac      	cmp	r4, r5
 800737e:	d101      	bne.n	8007384 <__sfputs_r+0x12>
 8007380:	2000      	movs	r0, #0
 8007382:	e007      	b.n	8007394 <__sfputs_r+0x22>
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	463a      	mov	r2, r7
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffda 	bl	8007344 <__sfputc_r>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d1f3      	bne.n	800737c <__sfputs_r+0xa>
 8007394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007398 <_vfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	460d      	mov	r5, r1
 800739e:	b09d      	sub	sp, #116	@ 0x74
 80073a0:	4614      	mov	r4, r2
 80073a2:	4698      	mov	r8, r3
 80073a4:	4606      	mov	r6, r0
 80073a6:	b118      	cbz	r0, 80073b0 <_vfiprintf_r+0x18>
 80073a8:	6a03      	ldr	r3, [r0, #32]
 80073aa:	b90b      	cbnz	r3, 80073b0 <_vfiprintf_r+0x18>
 80073ac:	f7fe fa64 	bl	8005878 <__sinit>
 80073b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_vfiprintf_r+0x2a>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	059a      	lsls	r2, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_vfiprintf_r+0x2a>
 80073bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073be:	f7fe fb84 	bl	8005aca <__retarget_lock_acquire_recursive>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	071b      	lsls	r3, r3, #28
 80073c6:	d501      	bpl.n	80073cc <_vfiprintf_r+0x34>
 80073c8:	692b      	ldr	r3, [r5, #16]
 80073ca:	b99b      	cbnz	r3, 80073f4 <_vfiprintf_r+0x5c>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f9e4 	bl	800779c <__swsetup_r>
 80073d4:	b170      	cbz	r0, 80073f4 <_vfiprintf_r+0x5c>
 80073d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073d8:	07dc      	lsls	r4, r3, #31
 80073da:	d504      	bpl.n	80073e6 <_vfiprintf_r+0x4e>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e0:	b01d      	add	sp, #116	@ 0x74
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	0598      	lsls	r0, r3, #22
 80073ea:	d4f7      	bmi.n	80073dc <_vfiprintf_r+0x44>
 80073ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ee:	f7fe fb6d 	bl	8005acc <__retarget_lock_release_recursive>
 80073f2:	e7f3      	b.n	80073dc <_vfiprintf_r+0x44>
 80073f4:	2300      	movs	r3, #0
 80073f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f8:	2320      	movs	r3, #32
 80073fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007402:	2330      	movs	r3, #48	@ 0x30
 8007404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075b4 <_vfiprintf_r+0x21c>
 8007408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800740c:	f04f 0901 	mov.w	r9, #1
 8007410:	4623      	mov	r3, r4
 8007412:	469a      	mov	sl, r3
 8007414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007418:	b10a      	cbz	r2, 800741e <_vfiprintf_r+0x86>
 800741a:	2a25      	cmp	r2, #37	@ 0x25
 800741c:	d1f9      	bne.n	8007412 <_vfiprintf_r+0x7a>
 800741e:	ebba 0b04 	subs.w	fp, sl, r4
 8007422:	d00b      	beq.n	800743c <_vfiprintf_r+0xa4>
 8007424:	465b      	mov	r3, fp
 8007426:	4622      	mov	r2, r4
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f7ff ffa1 	bl	8007372 <__sfputs_r>
 8007430:	3001      	adds	r0, #1
 8007432:	f000 80a7 	beq.w	8007584 <_vfiprintf_r+0x1ec>
 8007436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007438:	445a      	add	r2, fp
 800743a:	9209      	str	r2, [sp, #36]	@ 0x24
 800743c:	f89a 3000 	ldrb.w	r3, [sl]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 809f 	beq.w	8007584 <_vfiprintf_r+0x1ec>
 8007446:	2300      	movs	r3, #0
 8007448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800744c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007450:	f10a 0a01 	add.w	sl, sl, #1
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800745c:	931a      	str	r3, [sp, #104]	@ 0x68
 800745e:	4654      	mov	r4, sl
 8007460:	2205      	movs	r2, #5
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4853      	ldr	r0, [pc, #332]	@ (80075b4 <_vfiprintf_r+0x21c>)
 8007468:	f7f8 fed2 	bl	8000210 <memchr>
 800746c:	9a04      	ldr	r2, [sp, #16]
 800746e:	b9d8      	cbnz	r0, 80074a8 <_vfiprintf_r+0x110>
 8007470:	06d1      	lsls	r1, r2, #27
 8007472:	bf44      	itt	mi
 8007474:	2320      	movmi	r3, #32
 8007476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800747a:	0713      	lsls	r3, r2, #28
 800747c:	bf44      	itt	mi
 800747e:	232b      	movmi	r3, #43	@ 0x2b
 8007480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007484:	f89a 3000 	ldrb.w	r3, [sl]
 8007488:	2b2a      	cmp	r3, #42	@ 0x2a
 800748a:	d015      	beq.n	80074b8 <_vfiprintf_r+0x120>
 800748c:	9a07      	ldr	r2, [sp, #28]
 800748e:	4654      	mov	r4, sl
 8007490:	2000      	movs	r0, #0
 8007492:	f04f 0c0a 	mov.w	ip, #10
 8007496:	4621      	mov	r1, r4
 8007498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800749c:	3b30      	subs	r3, #48	@ 0x30
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d94b      	bls.n	800753a <_vfiprintf_r+0x1a2>
 80074a2:	b1b0      	cbz	r0, 80074d2 <_vfiprintf_r+0x13a>
 80074a4:	9207      	str	r2, [sp, #28]
 80074a6:	e014      	b.n	80074d2 <_vfiprintf_r+0x13a>
 80074a8:	eba0 0308 	sub.w	r3, r0, r8
 80074ac:	fa09 f303 	lsl.w	r3, r9, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	46a2      	mov	sl, r4
 80074b6:	e7d2      	b.n	800745e <_vfiprintf_r+0xc6>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	1d19      	adds	r1, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	9103      	str	r1, [sp, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bfbb      	ittet	lt
 80074c4:	425b      	neglt	r3, r3
 80074c6:	f042 0202 	orrlt.w	r2, r2, #2
 80074ca:	9307      	strge	r3, [sp, #28]
 80074cc:	9307      	strlt	r3, [sp, #28]
 80074ce:	bfb8      	it	lt
 80074d0:	9204      	strlt	r2, [sp, #16]
 80074d2:	7823      	ldrb	r3, [r4, #0]
 80074d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80074d6:	d10a      	bne.n	80074ee <_vfiprintf_r+0x156>
 80074d8:	7863      	ldrb	r3, [r4, #1]
 80074da:	2b2a      	cmp	r3, #42	@ 0x2a
 80074dc:	d132      	bne.n	8007544 <_vfiprintf_r+0x1ac>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	1d1a      	adds	r2, r3, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	9203      	str	r2, [sp, #12]
 80074e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074ea:	3402      	adds	r4, #2
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075c4 <_vfiprintf_r+0x22c>
 80074f2:	7821      	ldrb	r1, [r4, #0]
 80074f4:	2203      	movs	r2, #3
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7f8 fe8a 	bl	8000210 <memchr>
 80074fc:	b138      	cbz	r0, 800750e <_vfiprintf_r+0x176>
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	eba0 000a 	sub.w	r0, r0, sl
 8007504:	2240      	movs	r2, #64	@ 0x40
 8007506:	4082      	lsls	r2, r0
 8007508:	4313      	orrs	r3, r2
 800750a:	3401      	adds	r4, #1
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007512:	4829      	ldr	r0, [pc, #164]	@ (80075b8 <_vfiprintf_r+0x220>)
 8007514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007518:	2206      	movs	r2, #6
 800751a:	f7f8 fe79 	bl	8000210 <memchr>
 800751e:	2800      	cmp	r0, #0
 8007520:	d03f      	beq.n	80075a2 <_vfiprintf_r+0x20a>
 8007522:	4b26      	ldr	r3, [pc, #152]	@ (80075bc <_vfiprintf_r+0x224>)
 8007524:	bb1b      	cbnz	r3, 800756e <_vfiprintf_r+0x1d6>
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	3307      	adds	r3, #7
 800752a:	f023 0307 	bic.w	r3, r3, #7
 800752e:	3308      	adds	r3, #8
 8007530:	9303      	str	r3, [sp, #12]
 8007532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007534:	443b      	add	r3, r7
 8007536:	9309      	str	r3, [sp, #36]	@ 0x24
 8007538:	e76a      	b.n	8007410 <_vfiprintf_r+0x78>
 800753a:	fb0c 3202 	mla	r2, ip, r2, r3
 800753e:	460c      	mov	r4, r1
 8007540:	2001      	movs	r0, #1
 8007542:	e7a8      	b.n	8007496 <_vfiprintf_r+0xfe>
 8007544:	2300      	movs	r3, #0
 8007546:	3401      	adds	r4, #1
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	4619      	mov	r1, r3
 800754c:	f04f 0c0a 	mov.w	ip, #10
 8007550:	4620      	mov	r0, r4
 8007552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007556:	3a30      	subs	r2, #48	@ 0x30
 8007558:	2a09      	cmp	r2, #9
 800755a:	d903      	bls.n	8007564 <_vfiprintf_r+0x1cc>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0c6      	beq.n	80074ee <_vfiprintf_r+0x156>
 8007560:	9105      	str	r1, [sp, #20]
 8007562:	e7c4      	b.n	80074ee <_vfiprintf_r+0x156>
 8007564:	fb0c 2101 	mla	r1, ip, r1, r2
 8007568:	4604      	mov	r4, r0
 800756a:	2301      	movs	r3, #1
 800756c:	e7f0      	b.n	8007550 <_vfiprintf_r+0x1b8>
 800756e:	ab03      	add	r3, sp, #12
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	462a      	mov	r2, r5
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <_vfiprintf_r+0x228>)
 8007576:	a904      	add	r1, sp, #16
 8007578:	4630      	mov	r0, r6
 800757a:	f7fd fd39 	bl	8004ff0 <_printf_float>
 800757e:	4607      	mov	r7, r0
 8007580:	1c78      	adds	r0, r7, #1
 8007582:	d1d6      	bne.n	8007532 <_vfiprintf_r+0x19a>
 8007584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x1fe>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x1fe>
 8007590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007592:	f7fe fa9b 	bl	8005acc <__retarget_lock_release_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af1f 	bmi.w	80073dc <_vfiprintf_r+0x44>
 800759e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a0:	e71e      	b.n	80073e0 <_vfiprintf_r+0x48>
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <_vfiprintf_r+0x228>)
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7fd ffb7 	bl	8005520 <_printf_i>
 80075b2:	e7e4      	b.n	800757e <_vfiprintf_r+0x1e6>
 80075b4:	08008550 	.word	0x08008550
 80075b8:	0800855a 	.word	0x0800855a
 80075bc:	08004ff1 	.word	0x08004ff1
 80075c0:	08007373 	.word	0x08007373
 80075c4:	08008556 	.word	0x08008556

080075c8 <__sflush_r>:
 80075c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	0716      	lsls	r6, r2, #28
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	d454      	bmi.n	8007682 <__sflush_r+0xba>
 80075d8:	684b      	ldr	r3, [r1, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc02      	bgt.n	80075e4 <__sflush_r+0x1c>
 80075de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd48      	ble.n	8007676 <__sflush_r+0xae>
 80075e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d045      	beq.n	8007676 <__sflush_r+0xae>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	d030      	beq.n	800765a <__sflush_r+0x92>
 80075f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	0759      	lsls	r1, r3, #29
 80075fe:	d505      	bpl.n	800760c <__sflush_r+0x44>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007606:	b10b      	cbz	r3, 800760c <__sflush_r+0x44>
 8007608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007610:	6a21      	ldr	r1, [r4, #32]
 8007612:	4628      	mov	r0, r5
 8007614:	47b0      	blx	r6
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	d106      	bne.n	800762a <__sflush_r+0x62>
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	291d      	cmp	r1, #29
 8007620:	d82b      	bhi.n	800767a <__sflush_r+0xb2>
 8007622:	4a2a      	ldr	r2, [pc, #168]	@ (80076cc <__sflush_r+0x104>)
 8007624:	410a      	asrs	r2, r1
 8007626:	07d6      	lsls	r6, r2, #31
 8007628:	d427      	bmi.n	800767a <__sflush_r+0xb2>
 800762a:	2200      	movs	r2, #0
 800762c:	6062      	str	r2, [r4, #4]
 800762e:	04d9      	lsls	r1, r3, #19
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	d504      	bpl.n	8007640 <__sflush_r+0x78>
 8007636:	1c42      	adds	r2, r0, #1
 8007638:	d101      	bne.n	800763e <__sflush_r+0x76>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b903      	cbnz	r3, 8007640 <__sflush_r+0x78>
 800763e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	b1b9      	cbz	r1, 8007676 <__sflush_r+0xae>
 8007646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800764a:	4299      	cmp	r1, r3
 800764c:	d002      	beq.n	8007654 <__sflush_r+0x8c>
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff f89e 	bl	8006790 <_free_r>
 8007654:	2300      	movs	r3, #0
 8007656:	6363      	str	r3, [r4, #52]	@ 0x34
 8007658:	e00d      	b.n	8007676 <__sflush_r+0xae>
 800765a:	2301      	movs	r3, #1
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	4602      	mov	r2, r0
 8007662:	1c50      	adds	r0, r2, #1
 8007664:	d1c9      	bne.n	80075fa <__sflush_r+0x32>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0c6      	beq.n	80075fa <__sflush_r+0x32>
 800766c:	2b1d      	cmp	r3, #29
 800766e:	d001      	beq.n	8007674 <__sflush_r+0xac>
 8007670:	2b16      	cmp	r3, #22
 8007672:	d11e      	bne.n	80076b2 <__sflush_r+0xea>
 8007674:	602f      	str	r7, [r5, #0]
 8007676:	2000      	movs	r0, #0
 8007678:	e022      	b.n	80076c0 <__sflush_r+0xf8>
 800767a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767e:	b21b      	sxth	r3, r3
 8007680:	e01b      	b.n	80076ba <__sflush_r+0xf2>
 8007682:	690f      	ldr	r7, [r1, #16]
 8007684:	2f00      	cmp	r7, #0
 8007686:	d0f6      	beq.n	8007676 <__sflush_r+0xae>
 8007688:	0793      	lsls	r3, r2, #30
 800768a:	680e      	ldr	r6, [r1, #0]
 800768c:	bf08      	it	eq
 800768e:	694b      	ldreq	r3, [r1, #20]
 8007690:	600f      	str	r7, [r1, #0]
 8007692:	bf18      	it	ne
 8007694:	2300      	movne	r3, #0
 8007696:	eba6 0807 	sub.w	r8, r6, r7
 800769a:	608b      	str	r3, [r1, #8]
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	dde9      	ble.n	8007676 <__sflush_r+0xae>
 80076a2:	6a21      	ldr	r1, [r4, #32]
 80076a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076a6:	4643      	mov	r3, r8
 80076a8:	463a      	mov	r2, r7
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b0      	blx	r6
 80076ae:	2800      	cmp	r0, #0
 80076b0:	dc08      	bgt.n	80076c4 <__sflush_r+0xfc>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	4407      	add	r7, r0
 80076c6:	eba8 0800 	sub.w	r8, r8, r0
 80076ca:	e7e7      	b.n	800769c <__sflush_r+0xd4>
 80076cc:	dfbffffe 	.word	0xdfbffffe

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6a03      	ldr	r3, [r0, #32]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f7fe f8c7 	bl	8005878 <__sinit>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f3      	beq.n	80076da <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x32>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x32>
 80076fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fe:	f7fe f9e4 	bl	8005aca <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff5f 	bl	80075c8 <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	4605      	mov	r5, r0
 8007710:	d4e4      	bmi.n	80076dc <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4e1      	bmi.n	80076dc <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800771a:	f7fe f9d7 	bl	8005acc <__retarget_lock_release_recursive>
 800771e:	e7dd      	b.n	80076dc <_fflush_r+0xc>

08007720 <__swbuf_r>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	460e      	mov	r6, r1
 8007724:	4614      	mov	r4, r2
 8007726:	4605      	mov	r5, r0
 8007728:	b118      	cbz	r0, 8007732 <__swbuf_r+0x12>
 800772a:	6a03      	ldr	r3, [r0, #32]
 800772c:	b90b      	cbnz	r3, 8007732 <__swbuf_r+0x12>
 800772e:	f7fe f8a3 	bl	8005878 <__sinit>
 8007732:	69a3      	ldr	r3, [r4, #24]
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	071a      	lsls	r2, r3, #28
 800773a:	d501      	bpl.n	8007740 <__swbuf_r+0x20>
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	b943      	cbnz	r3, 8007752 <__swbuf_r+0x32>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f82a 	bl	800779c <__swsetup_r>
 8007748:	b118      	cbz	r0, 8007752 <__swbuf_r+0x32>
 800774a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800774e:	4638      	mov	r0, r7
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	6922      	ldr	r2, [r4, #16]
 8007756:	1a98      	subs	r0, r3, r2
 8007758:	6963      	ldr	r3, [r4, #20]
 800775a:	b2f6      	uxtb	r6, r6
 800775c:	4283      	cmp	r3, r0
 800775e:	4637      	mov	r7, r6
 8007760:	dc05      	bgt.n	800776e <__swbuf_r+0x4e>
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	f7ff ffb3 	bl	80076d0 <_fflush_r>
 800776a:	2800      	cmp	r0, #0
 800776c:	d1ed      	bne.n	800774a <__swbuf_r+0x2a>
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	3b01      	subs	r3, #1
 8007772:	60a3      	str	r3, [r4, #8]
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	701e      	strb	r6, [r3, #0]
 800777c:	6962      	ldr	r2, [r4, #20]
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	429a      	cmp	r2, r3
 8007782:	d004      	beq.n	800778e <__swbuf_r+0x6e>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	07db      	lsls	r3, r3, #31
 8007788:	d5e1      	bpl.n	800774e <__swbuf_r+0x2e>
 800778a:	2e0a      	cmp	r6, #10
 800778c:	d1df      	bne.n	800774e <__swbuf_r+0x2e>
 800778e:	4621      	mov	r1, r4
 8007790:	4628      	mov	r0, r5
 8007792:	f7ff ff9d 	bl	80076d0 <_fflush_r>
 8007796:	2800      	cmp	r0, #0
 8007798:	d0d9      	beq.n	800774e <__swbuf_r+0x2e>
 800779a:	e7d6      	b.n	800774a <__swbuf_r+0x2a>

0800779c <__swsetup_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4b29      	ldr	r3, [pc, #164]	@ (8007844 <__swsetup_r+0xa8>)
 80077a0:	4605      	mov	r5, r0
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	460c      	mov	r4, r1
 80077a6:	b118      	cbz	r0, 80077b0 <__swsetup_r+0x14>
 80077a8:	6a03      	ldr	r3, [r0, #32]
 80077aa:	b90b      	cbnz	r3, 80077b0 <__swsetup_r+0x14>
 80077ac:	f7fe f864 	bl	8005878 <__sinit>
 80077b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b4:	0719      	lsls	r1, r3, #28
 80077b6:	d422      	bmi.n	80077fe <__swsetup_r+0x62>
 80077b8:	06da      	lsls	r2, r3, #27
 80077ba:	d407      	bmi.n	80077cc <__swsetup_r+0x30>
 80077bc:	2209      	movs	r2, #9
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ca:	e033      	b.n	8007834 <__swsetup_r+0x98>
 80077cc:	0758      	lsls	r0, r3, #29
 80077ce:	d512      	bpl.n	80077f6 <__swsetup_r+0x5a>
 80077d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077d2:	b141      	cbz	r1, 80077e6 <__swsetup_r+0x4a>
 80077d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d8:	4299      	cmp	r1, r3
 80077da:	d002      	beq.n	80077e2 <__swsetup_r+0x46>
 80077dc:	4628      	mov	r0, r5
 80077de:	f7fe ffd7 	bl	8006790 <_free_r>
 80077e2:	2300      	movs	r3, #0
 80077e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	2300      	movs	r3, #0
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f043 0308 	orr.w	r3, r3, #8
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	b94b      	cbnz	r3, 8007816 <__swsetup_r+0x7a>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d003      	beq.n	8007816 <__swsetup_r+0x7a>
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f90e 	bl	8007a32 <__smakebuf_r>
 8007816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781a:	f013 0201 	ands.w	r2, r3, #1
 800781e:	d00a      	beq.n	8007836 <__swsetup_r+0x9a>
 8007820:	2200      	movs	r2, #0
 8007822:	60a2      	str	r2, [r4, #8]
 8007824:	6962      	ldr	r2, [r4, #20]
 8007826:	4252      	negs	r2, r2
 8007828:	61a2      	str	r2, [r4, #24]
 800782a:	6922      	ldr	r2, [r4, #16]
 800782c:	b942      	cbnz	r2, 8007840 <__swsetup_r+0xa4>
 800782e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007832:	d1c5      	bne.n	80077c0 <__swsetup_r+0x24>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	0799      	lsls	r1, r3, #30
 8007838:	bf58      	it	pl
 800783a:	6962      	ldrpl	r2, [r4, #20]
 800783c:	60a2      	str	r2, [r4, #8]
 800783e:	e7f4      	b.n	800782a <__swsetup_r+0x8e>
 8007840:	2000      	movs	r0, #0
 8007842:	e7f7      	b.n	8007834 <__swsetup_r+0x98>
 8007844:	20000020 	.word	0x20000020

08007848 <memmove>:
 8007848:	4288      	cmp	r0, r1
 800784a:	b510      	push	{r4, lr}
 800784c:	eb01 0402 	add.w	r4, r1, r2
 8007850:	d902      	bls.n	8007858 <memmove+0x10>
 8007852:	4284      	cmp	r4, r0
 8007854:	4623      	mov	r3, r4
 8007856:	d807      	bhi.n	8007868 <memmove+0x20>
 8007858:	1e43      	subs	r3, r0, #1
 800785a:	42a1      	cmp	r1, r4
 800785c:	d008      	beq.n	8007870 <memmove+0x28>
 800785e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007866:	e7f8      	b.n	800785a <memmove+0x12>
 8007868:	4402      	add	r2, r0
 800786a:	4601      	mov	r1, r0
 800786c:	428a      	cmp	r2, r1
 800786e:	d100      	bne.n	8007872 <memmove+0x2a>
 8007870:	bd10      	pop	{r4, pc}
 8007872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800787a:	e7f7      	b.n	800786c <memmove+0x24>

0800787c <_raise_r>:
 800787c:	291f      	cmp	r1, #31
 800787e:	b538      	push	{r3, r4, r5, lr}
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
 8007884:	d904      	bls.n	8007890 <_raise_r+0x14>
 8007886:	2316      	movs	r3, #22
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007892:	b112      	cbz	r2, 800789a <_raise_r+0x1e>
 8007894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007898:	b94b      	cbnz	r3, 80078ae <_raise_r+0x32>
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f830 	bl	8007900 <_getpid_r>
 80078a0:	4622      	mov	r2, r4
 80078a2:	4601      	mov	r1, r0
 80078a4:	4628      	mov	r0, r5
 80078a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078aa:	f000 b817 	b.w	80078dc <_kill_r>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d00a      	beq.n	80078c8 <_raise_r+0x4c>
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	d103      	bne.n	80078be <_raise_r+0x42>
 80078b6:	2316      	movs	r3, #22
 80078b8:	6003      	str	r3, [r0, #0]
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7e7      	b.n	800788e <_raise_r+0x12>
 80078be:	2100      	movs	r1, #0
 80078c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078c4:	4620      	mov	r0, r4
 80078c6:	4798      	blx	r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7e0      	b.n	800788e <_raise_r+0x12>

080078cc <raise>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	@ (80078d8 <raise+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7ff bfd3 	b.w	800787c <_raise_r>
 80078d6:	bf00      	nop
 80078d8:	20000020 	.word	0x20000020

080078dc <_kill_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	@ (80078fc <_kill_r+0x20>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	f7f9 ff3b 	bl	8001764 <_kill>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d102      	bne.n	80078f8 <_kill_r+0x1c>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	b103      	cbz	r3, 80078f8 <_kill_r+0x1c>
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
 80078fa:	bf00      	nop
 80078fc:	20000658 	.word	0x20000658

08007900 <_getpid_r>:
 8007900:	f7f9 bf28 	b.w	8001754 <_getpid>

08007904 <_sbrk_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	@ (8007920 <_sbrk_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7f9 ffb0 	bl	8001874 <_sbrk>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_sbrk_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_sbrk_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000658 	.word	0x20000658

08007924 <_calloc_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	fba1 5402 	umull	r5, r4, r1, r2
 800792a:	b93c      	cbnz	r4, 800793c <_calloc_r+0x18>
 800792c:	4629      	mov	r1, r5
 800792e:	f7fe ffa3 	bl	8006878 <_malloc_r>
 8007932:	4606      	mov	r6, r0
 8007934:	b928      	cbnz	r0, 8007942 <_calloc_r+0x1e>
 8007936:	2600      	movs	r6, #0
 8007938:	4630      	mov	r0, r6
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	220c      	movs	r2, #12
 800793e:	6002      	str	r2, [r0, #0]
 8007940:	e7f9      	b.n	8007936 <_calloc_r+0x12>
 8007942:	462a      	mov	r2, r5
 8007944:	4621      	mov	r1, r4
 8007946:	f7fe f842 	bl	80059ce <memset>
 800794a:	e7f5      	b.n	8007938 <_calloc_r+0x14>

0800794c <__ascii_mbtowc>:
 800794c:	b082      	sub	sp, #8
 800794e:	b901      	cbnz	r1, 8007952 <__ascii_mbtowc+0x6>
 8007950:	a901      	add	r1, sp, #4
 8007952:	b142      	cbz	r2, 8007966 <__ascii_mbtowc+0x1a>
 8007954:	b14b      	cbz	r3, 800796a <__ascii_mbtowc+0x1e>
 8007956:	7813      	ldrb	r3, [r2, #0]
 8007958:	600b      	str	r3, [r1, #0]
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	1e10      	subs	r0, r2, #0
 800795e:	bf18      	it	ne
 8007960:	2001      	movne	r0, #1
 8007962:	b002      	add	sp, #8
 8007964:	4770      	bx	lr
 8007966:	4610      	mov	r0, r2
 8007968:	e7fb      	b.n	8007962 <__ascii_mbtowc+0x16>
 800796a:	f06f 0001 	mvn.w	r0, #1
 800796e:	e7f8      	b.n	8007962 <__ascii_mbtowc+0x16>

08007970 <_realloc_r>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	4680      	mov	r8, r0
 8007976:	4615      	mov	r5, r2
 8007978:	460c      	mov	r4, r1
 800797a:	b921      	cbnz	r1, 8007986 <_realloc_r+0x16>
 800797c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4611      	mov	r1, r2
 8007982:	f7fe bf79 	b.w	8006878 <_malloc_r>
 8007986:	b92a      	cbnz	r2, 8007994 <_realloc_r+0x24>
 8007988:	f7fe ff02 	bl	8006790 <_free_r>
 800798c:	2400      	movs	r4, #0
 800798e:	4620      	mov	r0, r4
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	f000 f8ac 	bl	8007af0 <_malloc_usable_size_r>
 8007998:	4285      	cmp	r5, r0
 800799a:	4606      	mov	r6, r0
 800799c:	d802      	bhi.n	80079a4 <_realloc_r+0x34>
 800799e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079a2:	d8f4      	bhi.n	800798e <_realloc_r+0x1e>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7fe ff66 	bl	8006878 <_malloc_r>
 80079ac:	4607      	mov	r7, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0ec      	beq.n	800798c <_realloc_r+0x1c>
 80079b2:	42b5      	cmp	r5, r6
 80079b4:	462a      	mov	r2, r5
 80079b6:	4621      	mov	r1, r4
 80079b8:	bf28      	it	cs
 80079ba:	4632      	movcs	r2, r6
 80079bc:	f7fe f887 	bl	8005ace <memcpy>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4640      	mov	r0, r8
 80079c4:	f7fe fee4 	bl	8006790 <_free_r>
 80079c8:	463c      	mov	r4, r7
 80079ca:	e7e0      	b.n	800798e <_realloc_r+0x1e>

080079cc <__ascii_wctomb>:
 80079cc:	4603      	mov	r3, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	b141      	cbz	r1, 80079e4 <__ascii_wctomb+0x18>
 80079d2:	2aff      	cmp	r2, #255	@ 0xff
 80079d4:	d904      	bls.n	80079e0 <__ascii_wctomb+0x14>
 80079d6:	228a      	movs	r2, #138	@ 0x8a
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079de:	4770      	bx	lr
 80079e0:	700a      	strb	r2, [r1, #0]
 80079e2:	2001      	movs	r0, #1
 80079e4:	4770      	bx	lr

080079e6 <__swhatbuf_r>:
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	460c      	mov	r4, r1
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	2900      	cmp	r1, #0
 80079f0:	b096      	sub	sp, #88	@ 0x58
 80079f2:	4615      	mov	r5, r2
 80079f4:	461e      	mov	r6, r3
 80079f6:	da0d      	bge.n	8007a14 <__swhatbuf_r+0x2e>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079fe:	f04f 0100 	mov.w	r1, #0
 8007a02:	bf14      	ite	ne
 8007a04:	2340      	movne	r3, #64	@ 0x40
 8007a06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	6031      	str	r1, [r6, #0]
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	b016      	add	sp, #88	@ 0x58
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	466a      	mov	r2, sp
 8007a16:	f000 f849 	bl	8007aac <_fstat_r>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	dbec      	blt.n	80079f8 <__swhatbuf_r+0x12>
 8007a1e:	9901      	ldr	r1, [sp, #4]
 8007a20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a28:	4259      	negs	r1, r3
 8007a2a:	4159      	adcs	r1, r3
 8007a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a30:	e7eb      	b.n	8007a0a <__swhatbuf_r+0x24>

08007a32 <__smakebuf_r>:
 8007a32:	898b      	ldrh	r3, [r1, #12]
 8007a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a36:	079d      	lsls	r5, r3, #30
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	d507      	bpl.n	8007a4e <__smakebuf_r+0x1c>
 8007a3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	2301      	movs	r3, #1
 8007a48:	6163      	str	r3, [r4, #20]
 8007a4a:	b003      	add	sp, #12
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	ab01      	add	r3, sp, #4
 8007a50:	466a      	mov	r2, sp
 8007a52:	f7ff ffc8 	bl	80079e6 <__swhatbuf_r>
 8007a56:	9f00      	ldr	r7, [sp, #0]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7fe ff0b 	bl	8006878 <_malloc_r>
 8007a62:	b948      	cbnz	r0, 8007a78 <__smakebuf_r+0x46>
 8007a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d4ee      	bmi.n	8007a4a <__smakebuf_r+0x18>
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	e7e2      	b.n	8007a3e <__smakebuf_r+0xc>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	6020      	str	r0, [r4, #0]
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a88:	b15b      	cbz	r3, 8007aa2 <__smakebuf_r+0x70>
 8007a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 f81e 	bl	8007ad0 <_isatty_r>
 8007a94:	b128      	cbz	r0, 8007aa2 <__smakebuf_r+0x70>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f023 0303 	bic.w	r3, r3, #3
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	431d      	orrs	r5, r3
 8007aa6:	81a5      	strh	r5, [r4, #12]
 8007aa8:	e7cf      	b.n	8007a4a <__smakebuf_r+0x18>
	...

08007aac <_fstat_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	@ (8007acc <_fstat_r+0x20>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f7f9 feb3 	bl	8001824 <_fstat>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d102      	bne.n	8007ac8 <_fstat_r+0x1c>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	b103      	cbz	r3, 8007ac8 <_fstat_r+0x1c>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	bf00      	nop
 8007acc:	20000658 	.word	0x20000658

08007ad0 <_isatty_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	@ (8007aec <_isatty_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7f9 feb2 	bl	8001844 <_isatty>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_isatty_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_isatty_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20000658 	.word	0x20000658

08007af0 <_malloc_usable_size_r>:
 8007af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af4:	1f18      	subs	r0, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfbc      	itt	lt
 8007afa:	580b      	ldrlt	r3, [r1, r0]
 8007afc:	18c0      	addlt	r0, r0, r3
 8007afe:	4770      	bx	lr

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
